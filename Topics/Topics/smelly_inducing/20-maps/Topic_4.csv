Topic_no,Keywords,Contrib,System,Text
4,"support, implement, fix, create, class, method, implementation, handle, interface, table, follow, functionality, return, add, session, refactore, java, utility, external, reason",0.0829,conscrypt,Dont trigger a reverse DNS lookup from a log statement. Also nuke a bunch of redundant Javadoc and promote the shutdownInput/shutdownOutput methods that always throw to SSLSocket. Change-Id: I077f7413bb6cba66be6204c68f7911b51a191643
,,0.2304,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes Java 8 style SNI hostname to OpenSSLEngineImpl (#155) The SNIHostName, et al., support was lacking from OpenSSLEngineImpl causing endpoint protocol identification to fail in Netty tests./"
,,0.1237,conscrypt,"Benchmark fixes and various cleanup. (#188)/Make openjdk target support Java 7/Adding platform to the build (#158)/Add Java 8 style SNI hostname to OpenSSLEngineImpl (#155) The SNIHostName, et al., support was lacking from OpenSSLEngineImpl causing endpoint protocol identification to fail in Netty tests./"
,,0.1504,conscrypt,Introducing top-level Conscrypt class (#152) This is a one-stop-shop for creating and configuring Conscrypt types. It allows a standard way for configuring extended settings that are not currently supported by the standard Java APIs./
,,0.1839,conscrypt,Adding all factory methods for engine socket. (#192) Also properly throwing SSLHandshakeException in some cases. Fixes OpenSSLSocketImplTest to cover both socket types (#182)/Introducing top-level Conscrypt class (#152) This is a one-stop-shop for creating and configuring Conscrypt types. It allows a standard way for configuring extended settings that are not currently supported by the standard Java APIs./Add handshake listener to engine. (#136) Fixes
,,0.1383,conscrypt,"Importing more Android integ tests. (#184)/Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes OCSP and SCTs on the SSL, not SSL_CTX. As Conscrypt is currently set up, one SSL_CTX (owned, ultimately, by the SSLContext) may correspond to multiple SSLParameters which, in the Java API, are configured on the SSLSocket or SSLEngine directly. Thus we should use the SSL versions of the APIs which now exist. This avoids mutating an SSL_CTX which may be shared by multiple SSLs with different configurations. Change-Id: I19485c316087004c6050d85520b0169f2ca0d493/Exposing SSL_max_seal_overhead (#135) Also adding a method to calculate the maximum buffer size required for a wrap operation./Remove DHE/"
,,0.1952,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes AEADBadTagException throwing to method This is not available on all Android versions, so we access it via reflection here. Extract it to its own method so we can suppress the Error-Prone warning more precisely./"
,,0.2435,conscrypt,"Adding all factory methods for engine socket. (#192) Also properly throwing SSLHandshakeException in some cases. Fixes down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes top-level Conscrypt class (#152) This is a one-stop-shop for creating and configuring Conscrypt types. It allows a standard way for configuring extended settings that are not currently supported by the standard Java APIs./Suppress Error-Prone warnings These warnings are not useful here, so suppress them./"
,,0.1561,conscrypt,Introducing top-level Conscrypt class (#152) This is a one-stop-shop for creating and configuring Conscrypt types. It allows a standard way for configuring extended settings that are not currently supported by the standard Java APIs./
,,0.1485,conscrypt,Introducing top-level Conscrypt class (#152) This is a one-stop-shop for creating and configuring Conscrypt types. It allows a standard way for configuring extended settings that are not currently supported by the standard Java APIs./
,,0.1509,conscrypt,Introducing top-level Conscrypt class (#152) This is a one-stop-shop for creating and configuring Conscrypt types. It allows a standard way for configuring extended settings that are not currently supported by the standard Java APIs./Allow handshakeListener to be set when engineState is MODE_SET (#137)/
,,0.2255,conscrypt,"Refactor OpenSSLSocketImplTest to cover both socket types (#182)/Importing Android integration tests (#178)/Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes top-level Conscrypt class (#152) This is a one-stop-shop for creating and configuring Conscrypt types. It allows a standard way for configuring extended settings that are not currently supported by the standard Java APIs./Configure OCSP and SCTs on the SSL, not SSL_CTX. As Conscrypt is currently set up, one SSL_CTX (owned, ultimately, by the SSLContext) may correspond to multiple SSLParameters which, in the Java API, are configured on the SSLSocket or SSLEngine directly. Thus we should use the SSL versions of the APIs which now exist. This avoids mutating an SSL_CTX which may be shared by multiple SSLs with different configurations. Change-Id: I19485c316087004c6050d85520b0169f2ca0d493/Adding conversion utility ALPN protocols (#140) Exposing additional set methods in OpenSSLEngineImpl and OpenSSLSocketImpl to allow the caller to set the ALPN protocols without having to manually encode. Also simplifying the exposure of the maxSealOverhead value./"
,,0.1178,conscrypt,"Add Java 8 style SNI hostname to OpenSSLEngineImpl (#155) The SNIHostName, et al., support was lacking from OpenSSLEngineImpl causing endpoint protocol identification to fail in Netty tests./"
,,0.3056,conscrypt,"Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.3732,conscrypt,"Use InetAddress originalHostName (if present) for getHostnameOrIP (#303) * Use InetAddress originalHostName (is present) for getHostnameOrIP Test: CtsLibcoreTestCases Bug: 35942385 Bug: 31028374 Change-Id: Ie1acc2dd23fadbbc48de1a5845146e9a5953e9cf * Fix lint problems and remove class introduced in API 19./Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes fixes to the Conscrypt engine. (#201)/"
,,0.3175,conscrypt,"Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes to SSL_get0_peer_certificates. This works towards issue So the exception can be routed out properly, this moves the SSL_get0_peer_certificates call to after doHandshake completes in ConscryptFileDescriptorSocket. Although, due to False Start (the ""cut-through"" logic in that class), the handshake may not be fully complete at the time, BoringSSLs API is such that the certificates and other properties will be available once SSL_do_handshake first completes./Pass encoded local certs to BoringSSL (#253) Current code was encoding and then decoding the certs before finally passing them to the native code. We were also separately setting and then verifying the private key. All of this can be replaced with a single JNI call SSL_set_chain_and_key, which accepts the encoded certs (we dont have to decode them again). See This shows a perf bump for the handshake (from ~750 to 800 ops/sec)./Cleaning up JNI exceptions (#252) There were a bunch of exceptions that are being thrown from JNI methods that arent currently declared. Also removed a few unused JNI methods and duplicate constants, preferring those from NativeConstants./Remove Java OpenSSL name mapping. (#227) As of [0], BoringSSL supports the standard cipher suite names. The Java names are the same, with the exception of TLS_RSA_WITH_3DES_EDE_CBC_SHA/SSL_RSA_WITH_3DES_EDE_CBC_SHA for historical reasons. Add code to map between that exception but otherwise rely on the native support. [0] session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.3273,conscrypt,"Use InetAddress originalHostName (if present) for getHostnameOrIP (#303) * Use InetAddress originalHostName (is present) for getHostnameOrIP Test: CtsLibcoreTestCases Bug: 35942385 Bug: 31028374 Change-Id: Ie1acc2dd23fadbbc48de1a5845146e9a5953e9cf * Fix lint problems and remove class introduced in API 19./User-friendly errors when native library fails to load (#295) Currently, we throw in static initialization of NativeCryptoJni, which leads to ClassNotFoundException whenever we try to access the native code at runtime. The user has no way of knowing that the library failed to load, or why. This PR attempts to make it more clear as to what went wrong, by doing the following: Log each load error, in the order attempted. Select the ""best"" load error to be thrown Dont throw from the NativeCrypto static initializer. Rather, save the best error and throw when attempting to access top-level conscrypt classes./Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes certs in verify callback (#248) This code was copied from Netty/netty-tcnative and seems to significantly increases performance of the verify callback. Before we call back to Java, we first encode all of the certs and then decode them in Java into X509Certificate instances. Previous code was calling into JNI for each method in the certificate. This helps in addressing session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes fixes to the Conscrypt engine. (#201)/"
,,0.3116,conscrypt,"Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.27,conscrypt,"Switch to SSL_get0_peer_certificates. This works towards issue So the exception can be routed out properly, this moves the SSL_get0_peer_certificates call to after doHandshake completes in ConscryptFileDescriptorSocket. Although, due to False Start (the ""cut-through"" logic in that class), the handshake may not be fully complete at the time, BoringSSLs API is such that the certificates and other properties will be available once SSL_do_handshake first completes./Pass encoded local certs to BoringSSL (#253) Current code was encoding and then decoding the certs before finally passing them to the native code. We were also separately setting and then verifying the private key. All of this can be replaced with a single JNI call SSL_set_chain_and_key, which accepts the encoded certs (we dont have to decode them again). See This shows a perf bump for the handshake (from ~750 to 800 ops/sec)./Cleaning up JNI exceptions (#252) There were a bunch of exceptions that are being thrown from JNI methods that arent currently declared. Also removed a few unused JNI methods and duplicate constants, preferring those from NativeConstants./Remove Java OpenSSL name mapping. (#227) As of [0], BoringSSL supports the standard cipher suite names. The Java names are the same, with the exception of TLS_RSA_WITH_3DES_EDE_CBC_SHA/SSL_RSA_WITH_3DES_EDE_CBC_SHA for historical reasons. Add code to map between that exception but otherwise rely on the native support. [0] AlgorithmParameters.GCM in Conscrypt. (#217) * Implement AlgorithmParameters.GCM in Conscrypt. In order to handle the ASN.1 encoding, exposes a subset of the ASN.1 encoding API from BoringSSL in NativeCrypto. * Rename {write,read}_integer to {write,read}_uint64. Add a UniquePtr to ensure exceptions dont cause a memory leak./Some parsing and serializing fixes. (#219) This fixes a memory leak in NativeCrypto_i2d_PKCS7. It never frees derBytes. Also removing a dependency on the legacy ASN.1 stack./Add availability checks (#216) Fixes session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes fixes to the Conscrypt engine. (#201)/"
,,0.157,conscrypt,Conformance fixes for the engine-based socket. (#202) This allows the SSLSocketTest to pass with the engine-based socket enabled. Also restructuring the inheritance hierarchy so that the FD and engine sockets both behave the same way (both either wrappers or not). The restructure involves the following: AbstractConscryptSocket: New base class for both sockets. It handles the wrap/no-wrap logic. OpenSSLSocketImplWrapper: deleted and replaced by AbstractConscryptSocket. OpenSSLSocketImpl: reduced to a public shim class between AbstractConscryptSocket and the implementations. For backward-compat only. ConscryptFileDescriptorSocket: Renamed from OpenSSLSocketImpl. The old FD socket./Various fixes to the Conscrypt engine. (#201)/
,,0.1314,conscrypt,Move closer to the old test version The original test never called shutdownInput() since the Javadoc indicates it will make the socket behave in a different manner than expected in this test. Also assert that were not using the type of socket that we expect to return if we get a SocketException. This will indicate when this difference is fixed and the test can be changed to reflect the expectation./Conformance fixes for the engine-based socket. (#202) This allows the SSLSocketTest to pass with the engine-based socket enabled. Also restructuring the inheritance hierarchy so that the FD and engine sockets both behave the same way (both either wrappers or not). The restructure involves the following: AbstractConscryptSocket: New base class for both sockets. It handles the wrap/no-wrap logic. OpenSSLSocketImplWrapper: deleted and replaced by AbstractConscryptSocket. OpenSSLSocketImpl: reduced to a public shim class between AbstractConscryptSocket and the implementations. For backward-compat only. ConscryptFileDescriptorSocket: Renamed from OpenSSLSocketImpl. The old FD socket./Updates to SSLSocketTest to support engine-based socket. (#199)/
,,0.36200000000000004,conscrypt,"Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.0767,conscrypt,"Add utility method for identifying a Conscrypt Provider. (#313) Also flattening the Conscrypt class. The current structure with subclasses helps to organize, but it makes API stability harder. Partially addresses"
,,0.1535,conscrypt,Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.1837,conscrypt,Add missing Java 9 methods for ALPN (#339) Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.1648,conscrypt,Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.1704,conscrypt,Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.1937,conscrypt,Add missing Java 9 methods for ALPN (#339) Fixes app_data.h field init ordering. (#337) The ordering needs to be in the same order as the fields to comply with strict warnings./Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.2319,conscrypt,"Switch from wrapping to subclassing for Java 9 methods. (#359) Older Android apps rely on OpenSSLSocketImpl being in the superclass chain of sockets, which means wrapping them can cause problems. Instead, use a subclass to add the appropriate methods. This also makes the subclass implementation quite clean, but it pollutes the Platform classes with a bunch of methods and means we have to remember not to use the constructors directly./Provide the issuers when calling chooseClientAlias. (#344) I cant see any reason why the issuers shouldnt be provided, and this method hasnt been changed in at least 4 years, so I expect it was just an oversight. Fixes missing Java 9 methods for ALPN (#339) Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes"
,,0.1648,conscrypt,Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.1891,conscrypt,Add missing Java 9 methods for ALPN (#339) Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.4663,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.4749,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.4728,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.4728,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.461,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.1033,conscrypt,"Merge ConscryptSocketBase and AbstractConscryptSocket (#529) We used to need this separation because we had delegating sockets that inherited from AbstractConscryptSocket but not ConscryptSocketBase, but those are gone now, so we no longer need to have two classes here. While the remaining file is named AbstractConscryptSocket (to parallel AbstractConscryptEngine), what really happened is the abstract methods from AbstractConscryptSocket got merged into ConscryptSocketBase, and then the resulting class was renamed./"
,,0.0825,conscrypt,"Add explicit no-arg constructors (#563) Were somewhat inconsistent on whether we include these or not, but we now want these to be present so we can add annotations to them to support Android features. This also makes it more obvious that these classes are publicly constructible./"
,,0.0997,conscrypt,"Update Provider installation in tests (#629) Change CertPinManagerTest and CTVerifierTest to only install the provider if its not installed already and check if the provider was installed before uninstalling. Otherwise, when running on the Android platform they will uninstall the platform copy of Conscrypt and break every following test./Drop support for Java 6 (#606)/"
,,0.0765,Frostwire,[android] implemented apollo BaseActivity with new AbstractActivity/[android] implementing apollo SearchActivity with new AbstractActivity/
,,0.0588,Frostwire,[android] refactor in ImageLoader in preparation for when Picasso release with Downloader interface removed/
,,0.0588,Frostwire,[desktop] declaration access fixes/
,,0.0545,jna,synch libffi with (adds mingw32ce support) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0648,pljava,Added SecurityManagers for trusted and untrusted versions/
,,0.0699,realm-java,minor test added/Added set() method to the generated Cursor classes./
,,0.0795,realm-java,"Experimental Table.findSortedLong() replaced by Table.lowerBoundLong() and Table.upperBoundLong() because these provide more flexibility, and it follows similar changes in the core library/Added count*() and lookup() methods currently without tests/"
,,0.0595,realm-java,Fixed bug where copyToRealm() crashed when copying objects with primary key data./Moved setPrimaryKey to JNI./
,,0.0723,realm-java,DefaultRealmModule not created for empty Kotlin projects (#3749)/
,,0.0599,realm-java,Public Sync API (#73)/
,,0.0673,realm-java,Upgrade to beta-33 / 2.0.0-rc4 (#90)/
,,0.0786,realm-java,PermissionOffer/PermissionOfferResponse support (#4005) Added support for PermissionOffer and PermissionOfferResponse/
,,0.5692,realm-java,"Create ProxyUtils class to simplify proxies (#4942) Move a simple task to a utility class, to reduce Proxy code size/Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./Clean up the Proxies a bit, in prep for RealmInteger mods (#4770) * Clean up the Proxies a bit, in prep for RealmInteger mods/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.5717,realm-java,"Create ProxyUtils class to simplify proxies (#4942) Move a simple task to a utility class, to reduce Proxy code size/Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./Clean up the Proxies a bit, in prep for RealmInteger mods (#4770) * Clean up the Proxies a bit, in prep for RealmInteger mods/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.55,realm-java,"Counters: Merge MutableRealmIntegers Feature (#5017) * Counters: Partial implementations * Counters: Wired to core (#4953) * Counters: Required, Index and Documentation (#4969) * Add tests for and * Document ManagedRealmInteger * Counters: JSON for MutableRealmIntegers (#5007) * Clean up documentation/Create ProxyUtils class to simplify proxies (#4942) Move a simple task to a utility class, to reduce Proxy code size/Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./Clean up the Proxies a bit, in prep for RealmInteger mods (#4770) * Clean up the Proxies a bit, in prep for RealmInteger mods/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.1087,realm-java,Support stable IDs for sync (#4693) * Support stable IDs for sync A special column to store stable IDs are added by sync. See for details. Calling sync::create_object instead of add_empty_row to create new object. Calling sync::create_table/sync::create_table_with_primary_key instead of add_table to create a new object schema. addPrimaryKey() is not allowed for synced Realm anymore. New API RealmSchema.createWithPrimaryKeyField is added./
,,0.1495,realm-java,"Use Object Store to handle schema migration Use Object Store to handle migration. This is for non-synced Realm. Object Store will compare the expected OsSchemaInfo with the current on on the disc. if they dont match, the migration callback supplied by java will called to do manual migration. Update Object Store to 0d0aef97b8/"
,,0.4185,realm-java,"dynamic realm in migration/Use Object Store to handle schema migration Use Object Store to handle migration. This is for non-synced Realm. Object Store will compare the expected OsSchemaInfo with the current on on the disc. if they dont match, the migration callback supplied by java will called to do manual migration. Update Object Store to 0d0aef97b8/Merge standard schema classes to their parents Since we changed the architecture, no need for this extra abstraction anymore./Support readOnly() on Configurations (#4575)/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.3745,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3817,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3918,realm-java,"Add CompactOnLaunch. (#4857) * Implement CompactOnLaunch. This commit adds RealmConfiguration.compactOnLaunch and RealmConfiguration.Builder.compactOnLaunch(CompactOnLaunchCallback). It makes a Realm determines if it should be compacted. * Throw an exception if it is read-only Realm. * Add readOnly_compactOnLaunch_throws * Fix a wrong signature. * Add tests to check compactOnLaunch. * Fix tests. * Add Javadoc. * Updated CHANGELOG>md * Fix a typo * PR feedback. * PR feedback: Improve tests. * PR feedback. * Improve Javadocs sentences. * Support Proguard. * Rename more accurate. * PR feedback. * Fix Proguard. * Fix JNI code. * PR feedback: Remove 2 createConfiguration. * PR feedback * Add RealmConfiguration.Builder.compactOnLaunch(). * Fix a bug of JNI code. * Add more tests. * Improve Javadoc. * PR feedback: Add a test to check a bug. * add a test to check a bug where compactOnLaunch is called each time a Realm is opened on a new thread. * PR feedback * Imporve Javadoc. * Fix a test (Thread). * PR: fix a test./Support stable IDs for sync (#4693) * Support stable IDs for sync A special column to store stable IDs are added by sync. See for details. Calling sync::create_object instead of add_empty_row to create new object. Calling sync::create_table/sync::create_table_with_primary_key instead of add_table to create a new object schema. addPrimaryKey() is not allowed for synced Realm anymore. New API RealmSchema.createWithPrimaryKeyField is added./Use Object Store to handle schema migration Use Object Store to handle migration. This is for non-synced Realm. Object Store will compare the expected OsSchemaInfo with the current on on the disc. if they dont match, the migration callback supplied by java will called to do manual migration. Update Object Store to 0d0aef97b8/Returning sessions state (#4821) * Returning sessions state/Nh/android support ssl (#4591) * Expose two new SyncConfiguration options to 1: Disable TLS verification. 2: provide the trusted root CA to validate the RealmObjectServer TLS connection (since OpenSSL doesnt have access to Android keystore) fixes readOnly() on Configurations (#4575)/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.3883,realm-java,Support stable IDs for sync (#4693) * Support stable IDs for sync A special column to store stable IDs are added by sync. See for details. Calling sync::create_object instead of add_empty_row to create new object. Calling sync::create_table/sync::create_table_with_primary_key instead of add_table to create a new object schema. addPrimaryKey() is not allowed for synced Realm anymore. New API RealmSchema.createWithPrimaryKeyField is added./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.4109,realm-java,Backlink queries (#4704) * Fixing unit tests for backlink queries. * Reintroducing of a native implementation of isNotEmpty(). * Moving inverse relationships out of beta stage./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3817,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3788,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.4788,realm-java,"Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./add Nullable annotation to methods that can return null (#4999) * add Nullable annotation to methods that can return null * add changelog entry for introfucinf annotation. * fix Kotlin example * fix Kotlin test/Use Object Store to handle schema migration Use Object Store to handle migration. This is for non-synced Realm. Object Store will compare the expected OsSchemaInfo with the current on on the disc. if they dont match, the migration callback supplied by java will called to do manual migration. Update Object Store to 0d0aef97b8/Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./Turn off the column check for synced realms (#4706)/Fix queries not working on proguarded Realms model classes (#4690)/Support readOnly() on Configurations (#4575)/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.0809,realm-java,Ensure stable classes order in generated mediators (#5567) Fixes
,,0.2914,rocksdb,"[Java] Generalize dis-own native handle and refine dispose framework. Summary: 1. Move disOwnNativeHandle() function from RocksDB to RocksObject to allow other RocksObject to use disOwnNativeHandle() when its ownership of native handle has been transferred. 2. RocksObject now has an abstract implementation of dispose(), which does the following two things. First, it checks whether both isOwningNativeHandle() and isInitialized() return true. If so, it will call the protected abstract function dispose0(), which all the subclasses of RocksObject should implement. Second, it sets nativeHandle_ 0. This redesign ensure all subclasses of RocksObject have the same dispose behavior. 3. All subclasses of RocksObject now should implement dispose0() instead of dispose(), and dispose0() will be called only when isInitialized() returns true. Test Plan: make rocksdbjava make jtest Reviewers: dhruba, sdong, ankgup87, rsumbaly, swapnilghike, zzbennett, haobo Reviewed By: haobo Subscribers: leveldb Differential Revision:"
,,0.289,rocksdb,"[Java] Generalize dis-own native handle and refine dispose framework. Summary: 1. Move disOwnNativeHandle() function from RocksDB to RocksObject to allow other RocksObject to use disOwnNativeHandle() when its ownership of native handle has been transferred. 2. RocksObject now has an abstract implementation of dispose(), which does the following two things. First, it checks whether both isOwningNativeHandle() and isInitialized() return true. If so, it will call the protected abstract function dispose0(), which all the subclasses of RocksObject should implement. Second, it sets nativeHandle_ 0. This redesign ensure all subclasses of RocksObject have the same dispose behavior. 3. All subclasses of RocksObject now should implement dispose0() instead of dispose(), and dispose0() will be called only when isInitialized() returns true. Test Plan: make rocksdbjava make jtest Reviewers: dhruba, sdong, ankgup87, rsumbaly, swapnilghike, zzbennett, haobo Reviewed By: haobo Subscribers: leveldb Differential Revision:"
,,0.2926,rocksdb,"[Java] Generalize dis-own native handle and refine dispose framework. Summary: 1. Move disOwnNativeHandle() function from RocksDB to RocksObject to allow other RocksObject to use disOwnNativeHandle() when its ownership of native handle has been transferred. 2. RocksObject now has an abstract implementation of dispose(), which does the following two things. First, it checks whether both isOwningNativeHandle() and isInitialized() return true. If so, it will call the protected abstract function dispose0(), which all the subclasses of RocksObject should implement. Second, it sets nativeHandle_ 0. This redesign ensure all subclasses of RocksObject have the same dispose behavior. 3. All subclasses of RocksObject now should implement dispose0() instead of dispose(), and dispose0() will be called only when isInitialized() returns true. Test Plan: make rocksdbjava make jtest Reviewers: dhruba, sdong, ankgup87, rsumbaly, swapnilghike, zzbennett, haobo Reviewed By: haobo Subscribers: leveldb Differential Revision:"
,,0.1593,rocksdb,"[RocksJava] ColumnFamily custom Options API extension ********************* *************************** ******** ************* ******** ******** *********** ******** ******** ********* ******** ************************************* ************************************* ************************************* ****** *** *** ****** ****** *** *** *** ****** ****** *** ****** *************************** *********************/Iterator support for Write Batches/[RocksJava] BackupInfos & Restore-/BackupableDB enhancements Summary: BackupableDB deleteBackup method BackupableDB purgeOldBackups bugfix BackupInfos now available in Restorable-/BackupableDB Extended BackupableDBTest to cover more of the currently implemented functionality. Test Plan: make rocksdbjava make jtest Differential Revision: code style problems identified by lint/Add locking to comparator jni callback methods which must be thread-safe/Feature Implement Java API for Comparator and Slice. Allows use of either byte[] or DirectByteBuffer for accessing underlying data./[Java] Fixed 32-bit overflowing issue when converting jlong to size_t Summary: Fixed 32-bit overflowing issue when converting jlong to size_t by capping jlong to std::numeric_limits<size_t>::max(). Test Plan: make rocksdbjava make jtest Reviewers: ankgup87, ljin, sdong, igor Reviewed By: igor Subscribers: leveldb Differential Revision:"
,,0.15,rocksdb,"Add rocksdb::ToString() to address cases where std::to_string is not available. Summary: In some environment such as android, the c++ library does not have std::to_string. This path adds rocksdb::ToString(), which wraps std::to_string when std::to_string is not available, and implements std::to_string in the other case. Test Plan: make dbg ./db_test make clean make dbg OPT=-DOS_ANDROID ./db_test Reviewers: ljin, sdong, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.1419,rocksdb,"[RocksJava] Cleanup portal.h Simple Java Native Objects usually are represented using the same functionality but within different classes. With this commit a template class was introduced to remove the redundant impelementation to a certain extent./Abstract duplicate code on key and value slice objects into generic methods/Implement WBWIRocksIterator for WriteBatchWithIndex in the Java API/[RocksJava] ColumnFamilyDescriptor alignment with listColumnFamilies Summary: Previous to this commit ColumnFamilyDescriptor took a String as name for the ColumnFamily name. String is however encoding dependent which is bad because listColumnFamilies returns byte arrays without any encoding information. All public API call were deprecated and flagged to be removed in 3.10.0 Test Plan: make rocksdbjava make test mvn rocksjni.pom package Reviewers: yhchiang, adamretter, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.1163,rocksdb,"[RocksJava] CF Name shall handle bytes correctly Summary: Bytes are currently misinterpreted by the Java if the byte array contains zero bytes within its content. For Strings thats usually not useful. As the Java API allows every kind of byte array values it might be the case that zero padding might happen. Test Plan: make rocksdbjava make jtest Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision: ReadOptions support in Iterators The methods: newIterator iterators support now also ReadOptions. That allows a user of the Java API to retrieve RocksIterator instances on a snapshot./[RocksJava] ColumnFamily name JNI correction Previous to this commit there was a problem with unterminated String usage as jByteArrays are not zero terminated./[RocksJava] ColumnFamilyDescriptor alignment with listColumnFamilies Summary: Previous to this commit ColumnFamilyDescriptor took a String as name for the ColumnFamily name. String is however encoding dependent which is bad because listColumnFamilies returns byte arrays without any encoding information. All public API call were deprecated and flagged to be removed in 3.10.0 Test Plan: make rocksdbjava make test mvn rocksjni.pom package Reviewers: yhchiang, adamretter, ankgup87 Subscribers: dhruba Differential Revision: CompactRange support manual range compaction support in RocksJava/[RocksJava] GetIntProperty in RocksDB Expose GetIntProperty methods to RocksJava. As the integer(64-Bit) value is no integer in Java the method is aligned with the return type which is long./"
,,0.131,rocksdb,[RocksJava] Comparator tests for CF Added AbstractComparatorTest. Fixed a bug in the JNI Part about Java comparators/[RocksJava] Sigsegv fix for MergerOperatorByName/[RocksJava] Convenience methods for Options RocksDB introduced in 3.7.0 convenience methods for getting ColumnFamilyOptions and DBOptions instances from predefined configuration structures. There is now also a method in RocksJava to load DBOptions as well as ColumnFamilyOptions from a predefined Properties based configuration./
,,0.1452,rocksdb,"Add rocksdb::ToString() to address cases where std::to_string is not available. Summary: In some environment such as android, the c++ library does not have std::to_string. This path adds rocksdb::ToString(), which wraps std::to_string when std::to_string is not available, and implements std::to_string in the other case. Test Plan: make dbg ./db_test make clean make dbg OPT=-DOS_ANDROID ./db_test Reviewers: ljin, sdong, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.0725,rocksdb,Added some more wrappers and wrote a test for backup in C/Allow creating backups from C/Add cuckoo table options to the C interface/
,,0.0887,rocksdb,Split WinEnv into separate classes. (#1128) For ease of reuse and customization as a library without wrapping. WinEnvThreads is a class for replacement. WintEnvIO is a class for reuse and behavior override. Added private virtual functions for custom override of fallocate pread for io classes./
,,0.0968,rocksdb,"[RocksJava] Adjusted RateLimiter to 3.10.0 (#1368) Summary: Deprecated RateLimiterConfig and GenericRateLimiterConfig Introduced RateLimiter It is now possible to use all C++ related methods also in RocksJava. A noteable method is setBytesPerSecond which can change the allowed number of bytes per second at runtime. Test Plan: make rocksdbjava make jtest Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision: bug in UnScSigned-off-by: xh931076284 (#1336) Fix HdfsEnv::UnSchedule() API error/"
,,0.0946,rocksdb,"[RocksJava] Adjusted RateLimiter to 3.10.0 (#1368) Summary: Deprecated RateLimiterConfig and GenericRateLimiterConfig Introduced RateLimiter It is now possible to use all C++ related methods also in RocksJava. A noteable method is setBytesPerSecond which can change the allowed number of bytes per second at runtime. Test Plan: make rocksdbjava make jtest Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.1033,rocksdb,"[RocksJava] Adjusted RateLimiter to 3.10.0 (#1368) Summary: Deprecated RateLimiterConfig and GenericRateLimiterConfig Introduced RateLimiter It is now possible to use all C++ related methods also in RocksJava. A noteable method is setBytesPerSecond which can change the allowed number of bytes per second at runtime. Test Plan: make rocksdbjava make jtest Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.1033,rocksdb,"[RocksJava] Adjusted RateLimiter to 3.10.0 (#1368) Summary: Deprecated RateLimiterConfig and GenericRateLimiterConfig Introduced RateLimiter It is now possible to use all C++ related methods also in RocksJava. A noteable method is setBytesPerSecond which can change the allowed number of bytes per second at runtime. Test Plan: make rocksdbjava make jtest Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.1687,rocksdb,"Two-level Indexes Summary: Partition Index blocks and use a Partition-index as a 2nd level index. The two-level index can be used by setting BlockBasedTableOptions::kTwoLevelIndexSearch as the index type and configuring BlockBasedTableOptions::index_per_partition t15539501 Closes Differential Revision: D4473535 Pulled By: maysamyabandeh fbshipit-source-id: bffb87e/Windows thread Summary: introduce new methods into a public threadpool interface, allow submission of std::functions as they allow greater flexibility. add Joining methods to the implementation to join scheduled and submitted jobs with an option to cancel jobs that did not start executing. Remove ugly `#ifdefs` between pthread and std implementation, make it uniform. introduce pimpl for a drop in replacement of the implementation Introduce rocksdb::port::Thread typedef which is a replacement for std::thread. On Posix Thread defaults as before std::thread. Implement WindowsThread that allocates memory in a more controllable manner than windows std::thread with a replaceable implementation. should be no functionality changes. Closes Differential Revision: D4492902 Pulled By: siying fbshipit-source-id: c74cb11/"
,,0.2063,rocksdb,"Windows thread Summary: introduce new methods into a public threadpool interface, allow submission of std::functions as they allow greater flexibility. add Joining methods to the implementation to join scheduled and submitted jobs with an option to cancel jobs that did not start executing. Remove ugly `#ifdefs` between pthread and std implementation, make it uniform. introduce pimpl for a drop in replacement of the implementation Introduce rocksdb::port::Thread typedef which is a replacement for std::thread. On Posix Thread defaults as before std::thread. Implement WindowsThread that allocates memory in a more controllable manner than windows std::thread with a replaceable implementation. should be no functionality changes. Closes Differential Revision: D4492902 Pulled By: siying fbshipit-source-id: c74cb11/Add EventListener::OnExternalFileIngested() event Summary: Add EventListener::OnExternalFileIngested() to allow user to subscribe to external file ingestion events Closes Differential Revision: D4285844 Pulled By: IslamAbdelRahman fbshipit-source-id: 0b95a88/"
