Topic_no,Keywords,Contrib,System,Text
11,"support, key, readseq_micro, provide, make, test, cipher_suite, base, signature, enable, work, implementation, sign, connection, expose, set, list, cipher, exception, handshake",0.0738,conscrypt,Add OpenSSL KeyPairGenerator and KeyFactory Refactor the way OpenSSL keys are handled so we can generate OpenSSL keys with the KeyPairGenerator and KeyFactory and pass them around without keeping the context in the OpenSSLSignature where it originated. Change-Id: Ib66bd1914e241a240cd97b1ea37e8526998107d9/Add signature generation to OpenSSLSignature Change-Id: I1203516d95a937edb48959146bbec64b338e4f1e/
,,0.1065,conscrypt,"Tracking openssl-1.0.1 Bug: 6168278 Change-Id: I240d2cbc91f616fd486efc5203e2221c9896d90f/OpenSSL block ciphers, part 1 This implements the NativeCrypto piece necessary to do basic block cipher operations. More work will need to be done to enable useful modes. This gives us the ability to replace BouncyCastles ECB mode that it bases the higher level CBC, CTR, etc modes on. However, calling through JNI to OpenSSL for 16-byte blocks for AES ends up being the same speed as the Java implementation. Further enhancements to use large blocks during the JNI call should show marked improvements in speed. Change-Id: I594a6d13ce5101a1ef2877b84edaa5e5b65e1e71/Support in-memory HTTPS session caching for wrapped sockets. Previously we couldnt reuse sessions with HttpsURLConnection because the host was incorrect (getInetAddress returns null for wrapped sockets) and because the compression method was different (NULL vs. ZLIB). This improves HttpsURLConnection request/response time on localhost from ~275ms to ~145ms (without connection pooling). Change-Id: I97bc343326658690b00589c0c804c2378b91ae61/"
,,0.1067,conscrypt,Conscrypt: add SHA-224 with tests SHA-224 has made a comeback in the latest StandardNames documentation. This change adds tests for SHA-224 and also Conscrypt providers for things we have code paths to support. Change-Id: I8c200082ff76ee4ae38b6efaa16e6741b33b7f5b/
,,0.1531,conscrypt,"Remove unsupported Cipher modes OpenSSL silently ignores the padding modes when specified for stream ciphers, but apparently Java does not. Change-Id: Icd92122d63b3b8e99d704e8193414dda5057146d/Return IvParameters in OpenSSLCipher#getParameters The getParameters() call was unimplemented in the OpenSSLCipher as an oversight. Add it so code relying on it will continue to work. Additionally add tests for getIV() and getParameters() to make sure they work correctly. (cherry picked from commit 8d59a14a150738b8b3a2a8c31d1a48b8ae0a3d0c) Bug: 10423926 Change-Id: I6bc7fc540509242dff9e5411f66f82be54691cb4/"
,,0.3604,conscrypt,"Track update to OpenSSL 1.0.1f The constants for handshake cutthrough and CBC record splitting were changed during the upgrade to OpenSSL 1.0.1f. This changes NativeCrypto.java to track them. Change-Id: I9e385c323d5557c5d50cffe3ce797dcf89667ad9/AArch64: Use long for pointers in Java sources. Fixing some mistakes in the JNI signatures: some pointers were passed via jint rather than jlong. Change-Id: I6120cc5742c8429a9e0fddda715b5169d820d31a Signed-off-by: Marcus Oakland prefer Forward Secrecy cipher suites. The documentation for the list of TLS/SSL cipher suites used by default states that cipher suites offering Forward Secrecy are preferred. This CL adjusts the list to conform: FS cipher suites that use RC4_128 bulk encryption algorithm were not preferred over non-FS cipher suites that use AES. Bug: 11220570 Change-Id: Ic9019306898600086920874474764186b710c3ef/Enable AES-GCM cipher suites by default in SSLSocket. AES-GCM is preferred to AES-CBC whose MAC-pad-then-encrypt approach has issues (e.g., Lucky 13 attack). Bug: 11220570 Change-Id: Ib007bc89ccf08358ed3f093f630350fa859e7c35/Enable support for TLSv1.2 cipher suites in SSLSocket. This adds support for AES-GCM and AES-CBC with MACs based on SHA256 and SHA384. Bug: 11220570 Change-Id: I56e7e25c5cd65a4c7662da6d4bbe5720f427e677/Enable TLSv1.1 and TLSv1.2 by default for SSLSocket. TLSv1.1 and TLSv1.2 offer built-in protection against BEAST attack and support for GCM cipher suites. This change causes TLS/SSL handshake failures with a small fraction of servers, load balancers and TLS/SSL accelerators with broken TLS/SSL implementations. Scans demonstrate that the number is around 0.6%. Breaking connectivity (using platform default settings) to a tiny minority of the ecosystem is acceptable because this inconvenience is outweighed by the added safety for the overwheling majority of the ecosystem. App developers affected by this issue should consider asking such servers to be fixed or explicitly disabling TLSv1.1 and TLSv1.2 in their apps. Bug: 11220570 Change-Id: Ice9e8ce550401ba5e3385fd369c40f01c06ac7fd/Stop depending on CipherSuite in OpenSSL-backed sockets. This is in preparation for removing Harmony-backed TLS/SSL implementations. Change-Id: Ic108e16d086fb99b69f0a4e4faeb816dc50a7643/Deprioritize HMAC-MD5 in default TLS/SSL cipher suites. Although HMAC-MD5 is not yet broken, the foundations are now much more shaky that those of HMAC-SHA. See This CL also adds a comment about the key rules governing the preference order of cipher suites used by default. Bug: 11220570 Change-Id: I2a2fe4d427650081637efc14fd7c427a33cbea7e/Prefer Forward Secrecy TLS/SSL cipher suites by default. This modifies the list of TLS/SSL cipher suites used by default to prefer those offering Forward Secrecy (FS) ECDHE and DHE. Bug: 11220570 Change-Id: I20f635d11e937d64de4f4e2fea34e1c5ea7a67ac/Deprioritize RC4-based TLS/SSL cipher suites. Now that BEAST and Lucky13 mitigations are enabled, it is prudent to prefer AES CBC cipher suites over RC4 ones (see Bug: 11220570 Change-Id: I52b9724700fd8eaeebbadcfa518a96823a1410b8/"
,,0.0842,conscrypt,"AArch64: Use long for pointers in Java sources. Fixing some mistakes in the JNI signatures: some pointers were passed via jint rather than jlong. Change-Id: I6120cc5742c8429a9e0fddda715b5169d820d31a Signed-off-by: Marcus Oakland depending on CipherSuite in OpenSSL-backed sockets. This is in preparation for removing Harmony-backed TLS/SSL implementations. Change-Id: Ic108e16d086fb99b69f0a4e4faeb816dc50a7643/Use SNI hostname for session caching The session caching wasnt paying attention to the requested SNI hostname when finding cached sessions. This checks the requested SNI hostname in an attempt to get the correct hostname from the cache. Change-Id: If3dbc64f11377a615389de9774c4061d1c92b997/Random cleanups of old code style Add annotation, remove unused imports, and remove unnecessary casts. Also make sure annotations are on a line by themselves. Change-Id: I294b43353d7b1e77fd1c9d031af7b7062f024eee/"
,,0.2164,conscrypt,"Finish switching to android.system.Os. Looks like I missed one last time... Change-Id: Ib009e87493b36fc815166c44ce3c3a532aa5cd82/Track libcore.os move towards the light. Change-Id: Id41fb809eb764ce60f6d3cecf5715a57af432027/Add back missing sslSession Accidentally removed during refactor. Change-Id: I4295af935b269ec7ea91f1d1d140f32188e15e64/Add OpenSSLEngineImpl Add support for SSLEngine via OpenSSL APIs. Currently this supports just the basic SSLEngine functionality. It can be improved in efficiency and performance, but it appears not to leak anything and be correct according to our test suites. Change-Id: Iea2dc3922e7c30e26daca38361877bd2f88ae668/Refactor OpenSSLSocketImpl Move functionality that will be shared with OpenSSLs SSLEngine implementation out of OpenSSLSocketImpl and into the (soon-to-be) shared SSLParametersImpl. The functionality should stay the same. Change-Id: If8faa3ad2c9c73c0a0cd4b9716639b362b2b26a1/Remove SSLEngineImpl This is replaced by OpenSSL-backed SSLEngineImpl. Change-Id: I7b51f6fa772e431c6283008535bfec90821d0bef/Use the new endpointVerificationAlgorithm API Use the new X509ExtendedTrustManager and use the new getEndpointVerificationAlgorithm to check the hostname during the handshake. Bug: 13103812 Change-Id: Id0a74d4ef21a7d7c90357a111f99b09971e535d0/Support TLS/SSL without X509TrustManager or X509KeyManager. This makes TLS/SSL primitives operate as expected when no X509TrustManager or X509KeyManager is provided. Instead of blowing up with KeyManagementException or NullPointerException (or similar) when X509TrustManager or X509KeyManager is not provided, this CL makes SSLContext.init accept such setup, and makes SSLSocket and SSLEngine reject certificate chains, select no private keys/aliases, and accept no certificate issuers. Bug: 13563574 Change-Id: I8de58377a09025258357dd4da9f6cb1b6f2dab80/"
,,0.5687,conscrypt,"Assert that the padding extension is enabled by default. Change-Id: I1c8aa589e3274bfd3a5fc66c3e948828903c1966/Expose support for TLS-PSK. TLS-PSK (Pre-Shared Key) is a set of TLS/SSL cipher suites that use symmetric (pre-shared) keys for mutual authentication of peers. These cipher suites are in some scenarios more suitable than those based on public key cryptography and X.509. See RFC 4279 (Pre-Shared Key Ciphersuites for Transport Layer Security (TLS)) for more information. OpenSSL currently supports only the following PSK cipher suites: * TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 * TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 * TLS_PSK_WITH_3DES_EDE_CBC_SHA * TLS_PSK_WITH_AES_128_CBC_SHA * TLS_PSK_WITH_AES_256_CBC_SHA * TLS_PSK_WITH_RC4_128_SHA The last four cipher suites mutually authenticate the peers and secure the connection using a pre-shared symmetric key. These cipher suites do not provide Forward Secrecy once the pre-shared key is compromised, all previous communications secured with that key can be decrypted. The first two cipher suites combine the pre-shared symmetric key with an ephemeral key obtained from an ECDH key exchange performed during the TLS/SSL handshake, thus providing Forward Secrecy. Users of TLS-PSK are expected to provide an implementation of PSKKeyManager to SSLContext.init and then enable at least one PSK cipher suite in SSLSocket/SSLEngine. Bug: 15073623 Change-Id: I8e59264455f980f23a5e66099c27b5b4d932b9bb/SSL: also allow calls to read/write after cutthrough Also add test to make sure this works. Bug: 14832989 Change-Id: I046111cdcc4086a7104d462696078a767e86b12c/"
,,0.5049,conscrypt,"reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. Change-Id: I39ab275cd9744ba442fee7db9038107b4603526f/DHKeyPairGenerator: use provided params If the prime is provided in the DHParameterSpec, then use it to generate the key. Bug: 16188130 Change-Id: I42de02c71a58d691ef7ba6e2252367105687b758/Add ability to wrap platform keys This is mostly useful for unbundled Conscrypt currently when working with KeyChain-based keys, but could be good for use with PKCS11-like keys in other JSSE providers. Bug: 15469749 Change-Id: I56bf2eaf3228bdf42d671437f4fffdafb8b47b12/Add more debugging for getting methods When JNI registration fails, we should log it immediately to help with debugging. Otherwise, it will tell you that you called a JNI function with an exception pending. Change-Id: I7cbba4d6639265a79a9d043d120f1a2bf72a85f7/Expose support for TLS-PSK. TLS-PSK (Pre-Shared Key) is a set of TLS/SSL cipher suites that use symmetric (pre-shared) keys for mutual authentication of peers. These cipher suites are in some scenarios more suitable than those based on public key cryptography and X.509. See RFC 4279 (Pre-Shared Key Ciphersuites for Transport Layer Security (TLS)) for more information. OpenSSL currently supports only the following PSK cipher suites: * TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 * TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 * TLS_PSK_WITH_3DES_EDE_CBC_SHA * TLS_PSK_WITH_AES_128_CBC_SHA * TLS_PSK_WITH_AES_256_CBC_SHA * TLS_PSK_WITH_RC4_128_SHA The last four cipher suites mutually authenticate the peers and secure the connection using a pre-shared symmetric key. These cipher suites do not provide Forward Secrecy once the pre-shared key is compromised, all previous communications secured with that key can be decrypted. The first two cipher suites combine the pre-shared symmetric key with an ephemeral key obtained from an ECDH key exchange performed during the TLS/SSL handshake, thus providing Forward Secrecy. Users of TLS-PSK are expected to provide an implementation of PSKKeyManager to SSLContext.init and then enable at least one PSK cipher suite in SSLSocket/SSLEngine. Bug: 15073623 Change-Id: I8e59264455f980f23a5e66099c27b5b4d932b9bb/Unbundle: hacks to let Conscrypt compile standalone This is the first pass at getting Conscrypt to compile standalone. It works fine in apps currently. There are a few TODOs to fix. Change-Id: I9b43ba12c55e04c8897ccacf38979ca671a55a26/NativeCryptoTest: fix shutdown test These werent actually testing that the exceptions were thrown before. Since we actually throw now, make sure were throwing the expected exception type. Change-Id: I57b11492118dd7c04faa57c58de7b023294b179c/Fix of native crash in the evpUpdate method The org.apache.harmony.security.tests.java.security.MessageDigest1Test CTS test classs testSHAProvider method was causing a SIGSEGV when ""md.update(bytes, 1, was called, as the evpUpdate method was not checking for the inLength parameter being negative. This has been rectified and the test now passes. Bug: 14821275 Change-Id: I94489a518f7a2d4a6e84e58f91d8eee6f0ceb045 Signed-off-by: Marcus Oakland keys: derive public key if not available Also make the params mutex when were inflating from a serial object since it will be null otherwise. Change-Id: I36641725161c0a708ba303500acca368b0511abe/SSL: also allow calls to read/write after cutthrough Also add test to make sure this works. Bug: 14832989 Change-Id: I046111cdcc4086a7104d462696078a767e86b12c/Check for renegotiate_pending for tests Tests call SSL_renegotiate to force a renegotiation, but was relying on AppData being unset in this function. Instead we check that both SSL_is_init_finished is false and SSL_renegotiation_pending is false. Renegotiation is handled by SSL_write implicitly instead of explicitly like the wrapper around SSL_do_handshake does. Change-Id: I7e761afa718503933334cc19fbc696d714eca500/Add DH keys Add the initial steps for DH keys to be generated and handled via OpenSSL. Next steps will be hooking it up via other APIs that use DH keys. Change-Id: Ib159e60db73f82b75e0ba375a1d165c51286edac/SSLSocket: restore previous pre-handshake behavior Before AppData was created in the initial handshake, calling SSL_read or SSL_write would have a NULL appData field. This caused an exception to be thrown. Now we have to check to make sure the handshake completed before we continue on with SSL_read and SSL_write. Change-Id: I969577cf56f61858450a7981a5196f58a6502968/"
,,0.6295,conscrypt,"Enable PSK cipher suites when PSKKeyManager is provided. This enables TLS-PSK cipher suites by default iff SSLContext is initialized with a PSKKeyManager. For consistency, X.509 based cipher suites are no longer enabled by default at all times they are now only enabled by default iff SSLContext is initialized with a X509KeyManager or a X509TrustManager. When both X.509 and PSK cipher suites need to be enabled, PSK cipher suites are given higher priority in the resulting list of cipher suites. This is based on the assumption that in most cases users of TLS/SSL who enable TLS-PSK would prefer TLS-PSK to be used when the peer supports TLS-PSK. Bug: 15073623 Change-Id: I8e2bc3e7a1ea8a986e468973b6bad19dc6b7bc3c/DHKeyPairGenerator: use provided params If the prime is provided in the DHParameterSpec, then use it to generate the key. Bug: 16188130 Change-Id: I42de02c71a58d691ef7ba6e2252367105687b758/Assert that the padding extension is enabled by default. Change-Id: I1c8aa589e3274bfd3a5fc66c3e948828903c1966/Adjust the list of supported ECDHE-PSK cipher suites. The SHA-2 based cipher suites cannot be used with SSLv3 but there is no way to express that in OpenSSLs configuration. This CL thus adjusts the list of supported cipher suites accordingly. Bug: 15073623 Change-Id: I427c99f4c1c72690d95e5a3c63763631c41ddae2/Add ability to wrap platform keys This is mostly useful for unbundled Conscrypt currently when working with KeyChain-based keys, but could be good for use with PKCS11-like keys in other JSSE providers. Bug: 15469749 Change-Id: I56bf2eaf3228bdf42d671437f4fffdafb8b47b12/Expose support for TLS-PSK. TLS-PSK (Pre-Shared Key) is a set of TLS/SSL cipher suites that use symmetric (pre-shared) keys for mutual authentication of peers. These cipher suites are in some scenarios more suitable than those based on public key cryptography and X.509. See RFC 4279 (Pre-Shared Key Ciphersuites for Transport Layer Security (TLS)) for more information. OpenSSL currently supports only the following PSK cipher suites: * TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 * TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 * TLS_PSK_WITH_3DES_EDE_CBC_SHA * TLS_PSK_WITH_AES_128_CBC_SHA * TLS_PSK_WITH_AES_256_CBC_SHA * TLS_PSK_WITH_RC4_128_SHA The last four cipher suites mutually authenticate the peers and secure the connection using a pre-shared symmetric key. These cipher suites do not provide Forward Secrecy once the pre-shared key is compromised, all previous communications secured with that key can be decrypted. The first two cipher suites combine the pre-shared symmetric key with an ephemeral key obtained from an ECDH key exchange performed during the TLS/SSL handshake, thus providing Forward Secrecy. Users of TLS-PSK are expected to provide an implementation of PSKKeyManager to SSLContext.init and then enable at least one PSK cipher suite in SSLSocket/SSLEngine. Bug: 15073623 Change-Id: I8e59264455f980f23a5e66099c27b5b4d932b9bb/Add DH keys Add the initial steps for DH keys to be generated and handled via OpenSSL. Next steps will be hooking it up via other APIs that use DH keys. Change-Id: Ib159e60db73f82b75e0ba375a1d165c51286edac/"
,,0.4224,conscrypt,"Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() Bug: Change-Id: I5bcaf3ee8910ff75e785baed4c4604fee6c5e700/OpenSSLEngineImpl: fix unwrap behavior with array The decrypted bytes should written sequentially into each buffer of the destination array until its full before moving to the next buffer. Change-Id: I2454249c167deafde6c12134d3c8cd658cd7c21b/Log CCS exceptions do not merge. Unlike the previous CL, this uses reflection for android.os.Process and android.util.EventLog throughout. (cherry picked from commit 35b1f354ec2b647966a198ffed932d82eb8eeb5b) Bug: 15452942 Change-Id: I34b9eaedf1f1e450b1f8004887bb0482601d789e/OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. (cherry picked from commit e08f238580e8ee471012bef8240c8d3397c7b780) Bug: 16352665 Change-Id: Idc78204b7077fb367b64e1867c807cd39f596f98/Various fixes in OpenSSLEngineImpl. Fix ""Buffers were not large enough"" exception by directly using the destination buffers. Corrections around bytesProduced and bytesConsumed behavior. Return BUFFER_OVERFLOW if a zero length destination is provided to unwrap. (cherry picked from commit bdfcc189efe41a3f812aeb55ea634bace67d159a) Bug: 16352665 Change-Id: I1f1e9b72cd6968ed4f3c3c0edccbccebc33d6790/Various fixes in OpenSSLEngineImpl. Fix ""Buffers were not large enough"" exception by directly using the destination buffers. Corrections around bytesProduced and bytesConsumed behavior. Return BUFFER_OVERFLOW if a zero length destination is provided to unwrap. Change-Id: I1f1e9b72cd6968ed4f3c3c0edccbccebc33d6790/Log OpenSSL CCS errors Bug: 15452942 Change-Id: I49e7bad6a65c70e113324c02fc23315cff168f5b/Expose support for TLS-PSK. TLS-PSK (Pre-Shared Key) is a set of TLS/SSL cipher suites that use symmetric (pre-shared) keys for mutual authentication of peers. These cipher suites are in some scenarios more suitable than those based on public key cryptography and X.509. See RFC 4279 (Pre-Shared Key Ciphersuites for Transport Layer Security (TLS)) for more information. OpenSSL currently supports only the following PSK cipher suites: * TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 * TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 * TLS_PSK_WITH_3DES_EDE_CBC_SHA * TLS_PSK_WITH_AES_128_CBC_SHA * TLS_PSK_WITH_AES_256_CBC_SHA * TLS_PSK_WITH_RC4_128_SHA The last four cipher suites mutually authenticate the peers and secure the connection using a pre-shared symmetric key. These cipher suites do not provide Forward Secrecy once the pre-shared key is compromised, all previous communications secured with that key can be decrypted. The first two cipher suites combine the pre-shared symmetric key with an ephemeral key obtained from an ECDH key exchange performed during the TLS/SSL handshake, thus providing Forward Secrecy. Users of TLS-PSK are expected to provide an implementation of PSKKeyManager to SSLContext.init and then enable at least one PSK cipher suite in SSLSocket/SSLEngine. Bug: 15073623 Change-Id: I8e59264455f980f23a5e66099c27b5b4d932b9bb/Unbundle: hacks to let Conscrypt compile standalone This is the first pass at getting Conscrypt to compile standalone. It works fine in apps currently. There are a few TODOs to fix. Change-Id: I9b43ba12c55e04c8897ccacf38979ca671a55a26/SSLEngine: handle EOF for our BIOs If we reache EOF (really the end of our current bytes buffered for read) during writing or reading, dont try to count the returned as part of the read bytes. Change-Id: I76d42b00f14b121f1524e7c035efcf2c99627278/"
,,0.5669,conscrypt,"Log CCS exceptions do not merge. Unlike the previous CL, this uses reflection for android.os.Process and android.util.EventLog throughout. (cherry picked from commit 35b1f354ec2b647966a198ffed932d82eb8eeb5b) Bug: 15452942 Change-Id: I34b9eaedf1f1e450b1f8004887bb0482601d789e/Remove (cherry picked from commit b860016f415dfc5655dcee45f70e8871a2e3edfe) Change-Id: I4302ea4e0200ac80a0b9f3b953d58270b65b3d0c/Remove Change-Id: Iea7c633eb68df576bf72314ff5ce31bc8094d9ce/Log OpenSSL CCS errors Bug: 15452942 Change-Id: I49e7bad6a65c70e113324c02fc23315cff168f5b/SSLParametersImpl is the source of enabled cipher suites and protocols. An instance of SSLParametersImpl is associated with SSLContext and is then cloned into any SSLSocketFactory, SSLServerSocketFactory, SSLSocket, SSLServerSocket, and SSLEngine. This CL ensures that all these primitives obtain their list of enabled cipher suites and protocols from their instance of SSLParametersImpl. Bug: 15073623 Change-Id: I40bf32e8654b299518ec0e77c3218a0790d9c4fd/Expose support for TLS-PSK. TLS-PSK (Pre-Shared Key) is a set of TLS/SSL cipher suites that use symmetric (pre-shared) keys for mutual authentication of peers. These cipher suites are in some scenarios more suitable than those based on public key cryptography and X.509. See RFC 4279 (Pre-Shared Key Ciphersuites for Transport Layer Security (TLS)) for more information. OpenSSL currently supports only the following PSK cipher suites: * TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 * TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 * TLS_PSK_WITH_3DES_EDE_CBC_SHA * TLS_PSK_WITH_AES_128_CBC_SHA * TLS_PSK_WITH_AES_256_CBC_SHA * TLS_PSK_WITH_RC4_128_SHA The last four cipher suites mutually authenticate the peers and secure the connection using a pre-shared symmetric key. These cipher suites do not provide Forward Secrecy once the pre-shared key is compromised, all previous communications secured with that key can be decrypted. The first two cipher suites combine the pre-shared symmetric key with an ephemeral key obtained from an ECDH key exchange performed during the TLS/SSL handshake, thus providing Forward Secrecy. Users of TLS-PSK are expected to provide an implementation of PSKKeyManager to SSLContext.init and then enable at least one PSK cipher suite in SSLSocket/SSLEngine. Bug: 15073623 Change-Id: I8e59264455f980f23a5e66099c27b5b4d932b9bb/Unbundle: hacks to let Conscrypt compile standalone This is the first pass at getting Conscrypt to compile standalone. It works fine in apps currently. There are a few TODOs to fix. Change-Id: I9b43ba12c55e04c8897ccacf38979ca671a55a26/"
,,0.0744,conscrypt,"external/conscrypt: add NativeConstants. NativeConstants.java is generated by a C program and thus the values will automatically be kept in sync with the contents of the OpenSSL headers. Bug: 20521989 Change-Id: Ib5a97bf6ace05988e3eef4a9c8e02d0f707d46ad/conscrypt: throw exception for null references in NativeCrypto Adapted tests to use ""null"" instead of an Object with a null context, as null contexts are now rejected by constructors. bug: 19657430 Change-Id: I47ebfde7170e1818afd64a75a8e4bc1e1d588aea/"
,,0.19,conscrypt,"external/conscrypt: fix WITH_JNI_TRACE in light of BoringSSL update. These values in BoringSSL are now uint32_ts, which upsets the compiler when printing them as longs. This change casts the values to longs so that it continues to work with OpenSSL. Change-Id: I35af51d765d67b3c8c30e55b80eac24dda420a88/OpenSSLCipher: add AEAD cipher This allows us to provide an implementation of AES-GCM using the new EVP_AEAD interface in BoringSSL. It simply buffers up the input until doFinal(...) is called which makes it much safer than any streaming interfaces, because the caller cant use the plaintext until its authenticated by the GHASH (or whatever other AEAD you happen to use). Bug: 20636336 Change-Id: I6e4b063a8137a16102b1f6ac15687a38ddfe1691/external/conscrypt: ask OpenSSL for supported cipher suites. Rather than enumerate the list of supported cipher suites in conscrypt, ask OpenSSL for the list and just maintain a mapping from OpenSSLs names to the standard, external name. (The mapping could also be removed with BoringSSL since it can return the standard name for an SSL_CIPHER*. But in order to keep OpenSSL compat this change doesnt depend on that.) Bug: 20531880 Change-Id: Ib541c9787093e7b900052fdf12dd2a2029b4b020/RI: AttachCurrentThread has different type Change-Id: Ia74b5ecb1af69010d51f963f4f757339deda8b9b/RI: cast to char* for JNI registration The RI has a different type that causing compilation errors if you dont do this cast. Change-Id: I5961d79c88bef6cba2dc0de9c81e310005e4712c/NativeCrypto: not finding a key is not fatal If we dont find a key in the keystore, we should just return null reference. The only time we should throw exceptions is when the key decoding failed or something else like that. Bug: 20488918 (cherry picked from commit 8098cbbc7fbf2d22402da487465a153734f9f9b6) Change-Id: I621b39257bc98d888f7ad390fb8648326c67dfc4/NativeCrypto: not finding a key is not fatal If we dont find a key in the keystore, we should just return null reference. The only time we should throw exceptions is when the key decoding failed or something else like that. Bug: 20488918 Change-Id: I85408615a9c7a63242178908f309f93a2972033c/NativeCrypto: do not discard pending exceptions The switch to native reference objects left some duplicate NullPointerException creation that led to some JNI warnings. Simply get rid of the redundant NullPointerException throws. Bug: 19657430 Change-Id: I7e6bcb74154078cf019bfdea5d2721f6e6cb8524/external/conscrypt: recognise des-ede-cbc as an alias for des-cbc. Bug: 20518919 Change-Id: I2b697529420a5c3fd9f96887a11977d261b3d1aa/OpenSSLEngine: do not try to load ENGINE for BoringSSL Since BoringSSL doesnt use ENGINE instances, we should not fail when the native code returns the equivalent of a NULL instance. This change propagates the knowledge of whether were using BoringSSL or OpenSSL up to the Java layer. Change-Id: Ib8c2224a909564ae6f0c6d5984020c44517f6c29/Add fallthrough intention markers To help identify accidental fallthroughs, clang has an option to warn when one is detected. Add the macro to make it compatible with earlier versions of Clang or GCC. Change-Id: I48add3e3e9c0cbfe9b6d812d3336062a4d971909/BoringSSL PKCS#7 PEM and CRL support. Based on recent additions to BoringSSL itself, this change adds PKCS#7 PEM and CRL support for conscrypt with BoringSSL. Change-Id: Icef9d017dce54c3070b605a70773c60bb1b8cfa2/Add back d2i_PKCS7_bio and PEM_read_bio_PKCS7. For the moment, the BoringSSL version is going to be broken until I get the needed changes into BoringSSL to support this. Change-Id: Id2c3f179c6f9fc4f4385d2274884e69530fabff0/"
,,0.5064,conscrypt,"external/conscrypt: support arbitrary ECC groups. The Java provider mechanism doesnt really let us fallback to another provider based on whether certain ECC groups are supported or not. Since I expect that some people will be trying to do Bitcoin on Android, this should keep them happy. Change-Id: I1db48b104e12a6e7dae21df9c31c21bff0d62a9b/OpenSSLCipher: add AEAD cipher This allows us to provide an implementation of AES-GCM using the new EVP_AEAD interface in BoringSSL. It simply buffers up the input until doFinal(...) is called which makes it much safer than any streaming interfaces, because the caller cant use the plaintext until its authenticated by the GHASH (or whatever other AEAD you happen to use). Bug: 20636336 Change-Id: I6e4b063a8137a16102b1f6ac15687a38ddfe1691/Split up JNI library initialization Different platforms require vastly different ways of loading the JNI glue library, so split the loading job into different directories so they can be more easily compiled. Change-Id: I963c2e0d4667cbb655a0788f161eae74d7a2f037/external/conscrypt: ask OpenSSL for supported cipher suites. Rather than enumerate the list of supported cipher suites in conscrypt, ask OpenSSL for the list and just maintain a mapping from OpenSSLs names to the standard, external name. (The mapping could also be removed with BoringSSL since it can return the standard name for an SSL_CIPHER*. But in order to keep OpenSSL compat this change doesnt depend on that.) Bug: 20531880 Change-Id: Ib541c9787093e7b900052fdf12dd2a2029b4b020/external/conscrypt: switch NativeCrypto itself to use NativeConstants. Now that other users of the constants in NativeCrypto have been switched over, those constants can be removed. Bug: 20521989 Change-Id: I276a1c8daeb3501b6924ff68cf9f1e9f6fbd63a9/external/conscrypt: add SSL_CIPHER_get_kx_name This will be used by a future change to avoid needing to know the OpenSSL-internal SSL_aRSA (etc) constants. Bug: 20521989 Change-Id: I99d83005530f81956d102426fe28beeaed058cea/OpenSSLEngine: do not try to load ENGINE for BoringSSL Since BoringSSL doesnt use ENGINE instances, we should not fail when the native code returns the equivalent of a NULL instance. This change propagates the knowledge of whether were using BoringSSL or OpenSSL up to the Java layer. Change-Id: Ib8c2224a909564ae6f0c6d5984020c44517f6c29/Enable any opaque private keys to be used with TLS/SSL stack. Prior to this CL, opaque private keys those that do not expose/export their key material were not supported by Conscrypts SSLSocket, SSLServerSocket and SSLEngine implementations if the keys were backed by other providers. This CL fixes this issue. Conscrypts TLS/SSL stack now works with arbitrary opaque private keys provided that: * for EC private key: an installed implementation of NONEwithECDSA Signature accepts the key for signing; and * for RSA private key: an installed implementation of NONEwithRSA Signature accepts the key for signing and an installed implementation of RSA/ECB/PKCS1Padding Cipher accepts the key for decryption. This normally requires that the JCA Provider which produced the PrivateKey instance expose the above Cipher transformation and Signature algorithms. HOW THIS WORKS The underlying OpenSSL TLS/SSL stack uses the provided private keys only to decrypt and sign. For opaque private keys these requests are delegated (same as before, via CryptoUpcalls) to corresponding Cipher (RSA/ECB/PKCS1Padding) and Signature (NONEwithRSA or NONEwithECDSA) implementations. Even when signing and decryption is outsourced, OpenSSL still needs the modulus (for RSA) and order (for EC), supposedly to estimate output size of signing or decryption operations. This information is not available via the PrivateKey interface. However, an opaque private key may still implement the RSAKey or ECKey interface which provides access to modulus or order but does not provide access to key material. Moreover, in all use cases of private keys with Conscrypts TLS/SSL stack the modulus or order can be obtained and provided to OpenSSL. In the case of private keys used for client or server authentication, the public key of the certificate is used as the source of the information. In the case of TLS Channel ID, the order is currently fixed and known (only NIST P-256 is supported). Bug: 19284418 Change-Id: I8fea2492f9cf48cfc29c3e7d2ee99a68e84e82ec/"
,,0.2203,conscrypt,"OpenSSLCipher: add AEAD cipher This allows us to provide an implementation of AES-GCM using the new EVP_AEAD interface in BoringSSL. It simply buffers up the input until doFinal(...) is called which makes it much safer than any streaming interfaces, because the caller cant use the plaintext until its authenticated by the GHASH (or whatever other AEAD you happen to use). Bug: 20636336 Change-Id: I6e4b063a8137a16102b1f6ac15687a38ddfe1691/OpenSSLCipher: refactor in preparation for AEAD BoringSSL uses a different interface for AEAD that is much simplier called EVP_AEAD. Separate out the EVP_CIPHER usage so that we can have another subclass with the EVP_AEAD usage. Bug: 20636336 Change-Id: I661d92bd449f2fcc3c4a6e511155490917ecef0c/OpenSSLCipher: exception when IV not specified If youre decrypting with a mode that requires an IV, init should throw an exception indicating as much. Add the checks to make sure this happens. Bug: 19201819 Change-Id: I2d3481da4f63bffb340dc1197f6b5cb29360fbff/"
,,0.4988,conscrypt,"Rename Arrays to ArrayUtils To avoid conflict with the java.util.Arrays class, rename our own internal compatibility class to ArrayUtils. Change-Id: Iae79a4d37749e16e62712f3bb5038d870b78d999/external/conscrypt: add NativeConstants. NativeConstants.java is generated by a C program and thus the values will automatically be kept in sync with the contents of the OpenSSL headers. Bug: 20521989 Change-Id: Ib5a97bf6ace05988e3eef4a9c8e02d0f707d46ad/Enable any opaque private keys to be used with TLS/SSL stack. Prior to this CL, opaque private keys those that do not expose/export their key material were not supported by Conscrypts SSLSocket, SSLServerSocket and SSLEngine implementations if the keys were backed by other providers. This CL fixes this issue. Conscrypts TLS/SSL stack now works with arbitrary opaque private keys provided that: * for EC private key: an installed implementation of NONEwithECDSA Signature accepts the key for signing; and * for RSA private key: an installed implementation of NONEwithRSA Signature accepts the key for signing and an installed implementation of RSA/ECB/PKCS1Padding Cipher accepts the key for decryption. This normally requires that the JCA Provider which produced the PrivateKey instance expose the above Cipher transformation and Signature algorithms. HOW THIS WORKS The underlying OpenSSL TLS/SSL stack uses the provided private keys only to decrypt and sign. For opaque private keys these requests are delegated (same as before, via CryptoUpcalls) to corresponding Cipher (RSA/ECB/PKCS1Padding) and Signature (NONEwithRSA or NONEwithECDSA) implementations. Even when signing and decryption is outsourced, OpenSSL still needs the modulus (for RSA) and order (for EC), supposedly to estimate output size of signing or decryption operations. This information is not available via the PrivateKey interface. However, an opaque private key may still implement the RSAKey or ECKey interface which provides access to modulus or order but does not provide access to key material. Moreover, in all use cases of private keys with Conscrypts TLS/SSL stack the modulus or order can be obtained and provided to OpenSSL. In the case of private keys used for client or server authentication, the public key of the certificate is used as the source of the information. In the case of TLS Channel ID, the order is currently fixed and known (only NIST P-256 is supported). Bug: 19284418 Change-Id: I8fea2492f9cf48cfc29c3e7d2ee99a68e84e82ec/"
,,0.156,conscrypt,NativeCrypto: Add TLS SCT extension support. Change-Id: I438b23ecb86340f837f62359b342637966b81512/NativeCrypto: support OCSP stapling This only provides access to the OCSP data. It does not use it to verify the certificate. Change-Id: Ib448cbf52a5c824655585afc62d1580404a44f2c/NativeCrypto: add method to extract extensions from an OCSP response. This will be useful to extract signed timestamps to perform Certificate Transparency verification. Change-Id: I44db4435ce47d9c5562323c18d475be24b00bca7/
,,0.1999,conscrypt,"Clear BoringSSL error queue in NativeCrypto.EVP_DigestVerifyFinal. This fixes a bug introduced in b4345a619c1f34e2390210d11476a8619cebd695 where NativeCrypto.EVP_DigestVerifyFinal left the BAD_SIGNATURE error in the BoringSSL error queue when a signature did not verify. Some of the following NativeCrypto operations would then fail because they assumed that it was their BoringSSL calls that generated the BAD_SIGNATURE error. The fix is to unconditionally clear the BoringSSL error queue at the end of NativeCrypto.EVP_DigestVerifyFinal, same as its predecessor NativeCrypto.EVP_VerifyFinal did. Change-Id: I0d092b1b39afa3c6d19a785cbf7dd311ffcd4c04/Switch from EVP_[Sign|Verify] to EVP_Digest[Sign|Verify]. This switches Conscrypts Signature implementations from the older EVP_Sign/EVP_Verify API to the newer EVP_DigestSign/EVP_DigestVerify API. The main factor driving this switch is to expose RSASSA-PSS which does not work via the old API. In particular, this change: * adds EVP_DigestSign* and EVP_DigestVerify* to NativeCrypto. Some of these NativeCrypto functions were already there but werent used. This made it easier to adjust their signatures to best results. * switches Signature implementation from EVP_Sign/EVP_Verify to EVP_DigestSign/EVP_DigestVerify. * removes EVP_Sign* and EVP_Verify* from NativeCrypto because they are no longer used. * inlines NativeCryptos evpInit into its EVP_DigestInit_ex because the latter became the only user of evpInit after the cleanup. Change-Id: Id29ea4fc2bc5b1cd81daaee8b475fd147616de51/Adjust names of digest-related NativeCrypto methods. This adjusts the names of digest-related NativeCrypto methods to match the names of underlying BoringSSL functions. This makes it easier to reason about the functionality being invoked via NativeCrypto. Change-Id: I04e2148ba818ae3e9ad60871b046052fcfffec4d/Zero-copy digesting for direct ByteBuffer input. Prior to this change, Conscrypts MessageDigest.update(ByteBuffer) invoked for a direct ByteBuffer resulted in the creation of a new byte[] of size ByteBuffer.remaining() and the copying of the ByteBuffers contents into that array. This change implements an optimization which avoids the allocation and copying, by making BoringSSL EVP_DigestUpdate read directly from the memory region represented by the direct ByteBuffer. Change-Id: I112d318128402d1d78e226df9dfe54af55955953/NativeCrypto: Add TLS SCT extension support. Change-Id: I438b23ecb86340f837f62359b342637966b81512/NativeCrypto: support OCSP stapling This only provides access to the OCSP data. It does not use it to verify the certificate. Change-Id: Ib448cbf52a5c824655585afc62d1580404a44f2c/NativeCrypto: add method to extract extensions from an OCSP response. This will be useful to extract signed timestamps to perform Certificate Transparency verification. Change-Id: I44db4435ce47d9c5562323c18d475be24b00bca7/Add method to delete extension from a certificate The OpenSSLX509Certificate is still immutable. Instead a modified copy is returned. The use case for this is recreating the TBS component of a Precertificate as described by RFC6962 section 3.2. Change-Id: I2a9305ae7464642910decaf5ab46121a6f15d722/Remove references to OpenSSLs |wbuf|. The |wbuf| member is an internal field that disappears in the latest BoringSSL revision. Also, it doesnt appear to be neccessary: SSL_write wont report that bytes were written until the record has hit the transport, so theres no need to be sensitive to an implementation detail. (See also cl/100529082.) Change-Id: I036bb7ebf69649025967a2af467313d7676e62ca/"
,,0.228,conscrypt,"Switch from EVP_[Sign|Verify] to EVP_Digest[Sign|Verify]. This switches Conscrypts Signature implementations from the older EVP_Sign/EVP_Verify API to the newer EVP_DigestSign/EVP_DigestVerify API. The main factor driving this switch is to expose RSASSA-PSS which does not work via the old API. In particular, this change: * adds EVP_DigestSign* and EVP_DigestVerify* to NativeCrypto. Some of these NativeCrypto functions were already there but werent used. This made it easier to adjust their signatures to best results. * switches Signature implementation from EVP_Sign/EVP_Verify to EVP_DigestSign/EVP_DigestVerify. * removes EVP_Sign* and EVP_Verify* from NativeCrypto because they are no longer used. * inlines NativeCryptos evpInit into its EVP_DigestInit_ex because the latter became the only user of evpInit after the cleanup. Change-Id: Id29ea4fc2bc5b1cd81daaee8b475fd147616de51/Zero-copy HMAC and signing/verification for direct ByteBuffer. Prior to this change, Conscrypts Mac and Signature implementations copied the contents of direct ByteBuffer inputs. This change implements an optimization which avoids the allocation and copying of contents of direct ByteBuffer inputs. Bug: 24674857 Change-Id: I1436839182483fd42318d4b0af4d633283e3453d/"
,,0.09699999999999999,conscrypt,Add handshake session and ExtendedX509TrustManager support This enables the new API to specify when a host should be verified by hostname. Before there was no public API that was capable of indicating to the TrustManager which DNS hostname you were intending to connect with. Change-Id: Ic5845d1e93f02b54d971673a280d0a3571739fbf/
,,0.1313,conscrypt,"Fix compilation with JNI_TRACE_** Change-Id: I8417daea4b10f8c02642fe6c9be170312461139c/Use some C++11 concepts Run clang-modernizer over the native code and clang-format for the changed lines. Change-Id: I02211de90214567a128c4e3ca88aad26541a7629/Basic implementation of RSASSA-PSS Signature. This makes Conscrypt provide RSASSA-PSS Signature implementations. These implementations currently do not support changing their parameters (e.g., via Signature.setParameter(PSSParameterSpec)) and returning their current parameters (e.g., via Signature.getParameters()). This will be added in a follow-up change. Bug: 25794302 Change-Id: I1488e0e9592f92a9e15365131c76ce2902ad4607/"
,,0.1794,conscrypt,"Support for PSS Signature configuration via PSSParameterSpec. This adds support for configuring the PSS Signature implementation via java.security.spec.PSSParameterSpec. This also makes the signature implementation return its current configuration as AlgorithmParameters of algorithm ""PSS"" from which a PSSParameterSpec can be obtained. Bug: 25794302 Change-Id: Ib7e087cdc75a6b02898afafdfc4308802d6eb5d5/Basic implementation of RSASSA-PSS Signature. This makes Conscrypt provide RSASSA-PSS Signature implementations. These implementations currently do not support changing their parameters (e.g., via Signature.setParameter(PSSParameterSpec)) and returning their current parameters (e.g., via Signature.getParameters()). This will be added in a follow-up change. Bug: 25794302 Change-Id: I1488e0e9592f92a9e15365131c76ce2902ad4607/"
,,0.1592,conscrypt,"Add support for SNI API This adds support for retrieving SNI name as a server and setting SNI name as a client. It currently doesnt implement use of the SNIMatcher API. Change-Id: I4f76fcbd96bd7c3398532f3858bbdd0d06103082/Add ChaCha20-Poly1305 as an enabled cipher suite Change-Id: Idc143d37c63cf3436ccdddc22abcb11802fc6615/external/conscrypt: sort list of cipher suite strings. This change sorts the list using sort(1). Change-Id: Ief0c407969c92405464b9b2e9ebc694f98260263/Basic implementation of RSASSA-PSS Signature. This makes Conscrypt provide RSASSA-PSS Signature implementations. These implementations currently do not support changing their parameters (e.g., via Signature.setParameter(PSSParameterSpec)) and returning their current parameters (e.g., via Signature.getParameters()). This will be added in a follow-up change. Bug: 25794302 Change-Id: I1488e0e9592f92a9e15365131c76ce2902ad4607/"
,,0.1143,conscrypt,"Add support for SNI API This adds support for retrieving SNI name as a server and setting SNI name as a client. It currently doesnt implement use of the SNIMatcher API. Change-Id: I4f76fcbd96bd7c3398532f3858bbdd0d06103082/Add handshake session and ExtendedX509TrustManager support This enables the new API to specify when a host should be verified by hostname. Before there was no public API that was capable of indicating to the TrustManager which DNS hostname you were intending to connect with. Change-Id: Ic5845d1e93f02b54d971673a280d0a3571739fbf/Revert ""Revert ""Add ExtendedSSLSession, et al."""" This reverts commit 132c311de656e7396b78b388c6351be8a84a159c. Some stubs were neded to allow building on unbundled builds. Change-Id: I713d00923eecac7e323d53e561cf509794cc4fd4/Add ExtendedSSLSession, et al. In order to support SNI certificate selection of the server-side and enhanced certificate verification on the client side, we add ExtendedSSLSession and the getHandshakeSession support. This is just to set up for future implementations of SNI and ExtendedX509TrustManager and doesnt actually implement the logic needed to fully support the new features. Change-Id: I300d3134d8ab9c184d6473183612dc53658a8221/"
,,0.0954,conscrypt,"Add compat methods for using SNI and other new features Newer revisions of Android have SSLParameters with SNI support, endpoint identification algorithm support, and honor cipher suite order preference support. Add these to the /compat/ subtree so we can use them if available in unbundled releases. Change-Id: Iab3a3e6863b025c64790b08952a8b43cf087e920/"
,,0.198,conscrypt,Use OCSP-stapled responses in TrustManagerImpl Test: vogar host \ out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack \ out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack \ libcore/luni/src/test/java/libcore/javax/net/ssl/*Test.java Change-Id: I45762ab463be7aebea848387677d0fa8f92424bd/Move CertBlacklist to conscrypt CertBlacklist is mostly unchanged from bouncycastle except removing the bouncycastle Digest and Hex dependencies in isPublicKeyBlackListed. (cherry picked from commit ce5bdd0391d93d9a4b1fe7005041271341eb69b2) Bug: 29397721 Change-Id: Icccdcc0e108e8b0c60c47522114749518247a598/
,,0.2474,conscrypt,"Use built-in key debugging mechanism When debugging a network flow its useful to log the negotiated keys to see what is happening inside the session. Previously this was implemented in Conscrypt, but BoringSSL has this capability built-in now. Documentation at Test: vogar host \ out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack \ out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack \ libcore/luni/src/test/java/libcore/javax/net/ssl/*Test.java Change-Id: I50a5b315d302492667a28926161836e34b9dd357/JNI_TRACE_KEYS for non-RSA connections Wireshark uses a different format for connections that are non-RSA such as those negotiated with ECDHE or DHE. This change prints out the keys in the format that Wireshark expects. Change-Id: If81e172091c29fe7e65068091be382677f23e425/"
,,0.0926,conscrypt,Add implementation of OpenSSLSocket that uses OpenSSLEngineImpl Use above class of wrapped socket does not have a file descriptor OpenSSLEngine now exposes ALPN state Enable use of PrivilegedAction to load .so Created by MOE: MOE_MIGRATED_REVID=123899267/
,,0.2808,conscrypt,"Improve performance of OpenSSLEngine Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I947bd3701e90bd65104f8f5c07ba218c4e051944/Use fewer deprecated BoringSSL APIs. ""Handshake cutthrough"" was renamed to False Start at some point. Use the newer APIs which match what everyone refers to it as. SSL_set_reject_peer_renegotiations needed to be generalized at some point to take an enum. In doing so, it no longer has this weird double-negative spelling. The non-_long variants of SSL_alert_type_string and SSL_alert_desc_string dont do anything useful. We thought the one- and two-character codes were nuts, so they just return and now. Change-Id: I83d1fa26b0ea05284b0d73f1e2a58df07887aefe Test: mma in external/conscrypt/Convert NativeCryptoTest to JUnit4 This is basically a regex substitution change with minimnal renames just to convert to JUnit4. Further JUnit4-isms will come in subsequent changes. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: Icb6aedc3acee31d62750132bbe8eeaf9150bd3c0/Remove NPN support NPN is deprecated and clients should use ALPN instead for now. In the interest of removing support for it in BoringSSL, we will remove NPN support from Conscrypt as well. For now keep around the NPN setters and getters in OpenSSLSocketImpl and OpenSSLEngineImpl to help with backward compatibility for users that may be using reflection. Test: make && make cts && cts-tradefed run cts CtsLibcoreTestCases Change-Id: Ia4edb21412d9c4b2440291ae0a8a97d2217bf5b5/Drop RC4 cipher suite support from TLS Bug: 30977793 Test: libcore/run-libcore-tests libcore/luni/src/test/java/libcore/javax/net/ssl/* and running NativeCryptoTest. Change-Id: I04b91a6d3bf75a757d2c74bd1a39aea2709a9199/"
,,0.3492,conscrypt,"Fix some leaks on sk_push error. sk_push only takes ownership of the pointer on success, so the pattern needs to be slightly different. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: Ic1b10b9aae5addf20bf770c334ada9bc461c97b8/Fix reference counting. SSL_use_certificate and friends were leaking and client_cert_cb was failing to give refcounts for objects it returns. The two cancelled each other out. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I9e9e75902054f59be12f68fb14cf9f3f75a7a46e/Restrict TLS signing to non-RSA-PSS algorithms A recent change in BoringSSL allowed connections to use RSA-PSS as the signing algorithm for TLSv1.2 connections. However, the CryptoUpcalls interface is not ready for this and it cannot currently make the upcall correctly to have these signed. Temporarily disable RSA-PSS signatures with TLS by explicitly setting the list of signature algorithms. Test:†cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test:†cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Bug: 31714503 Change-Id: Ie1c23b7231b5673816946a6c06030e1e25752415/OpenSSLCipherRSA: add support for OAEP labels The OAEP label L can be specified by using a custom PSource.PSpecified with OAEPParameterSpec. This is not commonly used, but is an option thats easily supported. Test: vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/javax/crypto/CipherTest.java Change-Id: Ide7a087b5bc4dde31d55e38a8efdd16e3dd44ba5/NativeCrypto: add debugging format checking when debug off Before if you enabled WITH_JNI_TRACE you might get some formatting errors because format is not checked when debugging is enabled. Switch to constexpr to enable debugging and rely on Dead Code Elimination pass in the compiler to remove all the debug code when its not in use. This allows the compiler to properly check printf-style formatting for debug statements instead of the preprocessor removing the code. Test: compile with kWithJniTrace true and run vogar tests Change-Id: Ief3fe1c099a38d802db32deb7ffa91e4c8d4a572/No need to call ERR_remove_thread_state. In BoringSSL, error data is maintained in thread-locals and automatically released via thread-local destructors. ERR_remove_thread_state just calls ERR_clear_error now anyway. Change-Id: Ie4b54ec0573f58076eba3102079f773425debcdc Test: mma/Convert EVP_AEAD_CTX to stack-only The EVP_AEAD_CTX object is only valid for the period of time in which it is being used, so there is no need to have separate calls to EVP_AEAD_CTX_init and EVP_AEAD_CTX_cleanup. Sweep the arguments to these into the EVP_AEAD_CTX_seal and EVP_AEAD_CTX_open calls. Test: make build-art-host vogar && vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/javax/crypto/CipherTest.java Change-Id: I02b2c5759efdd8f29ec354ee9c10053dd1f9c53c/Switch to BoringSSL scopers The latest version of BoringSSL includes scopers for various types. Switch to those to reduce redundancy. There are a few that are missing and EVP_AEAD_CTX can be rewritten to not need anything beyond the supplied ScopedEVP_AEAD_CTX in BoringSSL. Test: make && vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/mockito-api-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/javax/net/ssl/*Test.java libcore/luni/src/test/java/libcore/javax/crypto/*Test.java Change-Id: I814f10936e6d7eb479da99391723fc9bce4e6096/Remove NPN support NPN is deprecated and clients should use ALPN instead for now. In the interest of removing support for it in BoringSSL, we will remove NPN support from Conscrypt as well. For now keep around the NPN setters and getters in OpenSSLSocketImpl and OpenSSLEngineImpl to help with backward compatibility for users that may be using reflection. Test: make && make cts && cts-tradefed run cts CtsLibcoreTestCases Change-Id: Ia4edb21412d9c4b2440291ae0a8a97d2217bf5b5/Substitute NULL for nullptr Since we dont actually rely on a STL, we dont have to get NULL from, but since were compiling C++11 we get nullptr for free. This also fixes builds against MacOS SDK since it doesnt have available when you explicitly opt out of an STL in the Android.mk module. Test: mmma external/conscrypt; make PRODUCT-sdk_phone_armv7-sdk Change-Id: I54929c7e5c05ec271925f5f3d1896df1661e9b59/"
,,0.2331,conscrypt,Move MGF1 algorithm name and OID to EvpMdRef Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: Ia3bbceb2a6022ebfbbd7ce1b4c2bb8d8c5ca956b/Move JCA names and OIDs to constants Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2fb67d6e9aa812b3b2ea26e14d18fbe752c70fc3/Use EvpMdRef for size calculation Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I9c909e401d6224f626b69dae3ac21e16a7a9b03c/Consolidate EVP_MD references to one place There were several places where EVP_get_digestbyname was being called for the same data. Consolidate these all down to one place so there is no need to call it several times in the same program. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: Ib3f8b678c775e74eb5edaabde42f042d7b4eac95/OpenSSLSignature: always throw on setting context Most of the EVP_PKEY_CTX_ctrl error codes are not handled by Conscrypt so make sure we have a default exception in case something goes awry during setup. Test: vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/mockito-api-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/java/security/SignatureTest.java Change-Id: I1f5a753242b6bc31cca9feb96486bbc86ad8af54/
,,0.498,conscrypt,"Improve performance of OpenSSLEngine Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I947bd3701e90bd65104f8f5c07ba218c4e051944/OpenSSLCipherRSA: add support for OAEP labels The OAEP label L can be specified by using a custom PSource.PSpecified with OAEPParameterSpec. This is not commonly used, but is an option thats easily supported. Test: vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/javax/crypto/CipherTest.java Change-Id: Ide7a087b5bc4dde31d55e38a8efdd16e3dd44ba5/Strip out SSLv3 from enabled protocols for app compat HttpsURLConnection on Android before Marshmallow tried to setEnabledProtocols with just ""SSLv3"" without checking if it was a supported protocol. Instead of throwing IllegalArgumentException when the unsupported protocol is encountered, strip it out and later throw an SSLHandshakeException if no protocols are enabled. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Bug: 32053327 Bug: 30977793 Change-Id: I2f2008d85fcc5b5fbdc71722a3d6e0a9c22bfbc2/Add NativeCrypto.EVP_PKEY_CTX_set_rsa_oaep_md This will allow us to set the OAEP message digest function later on in addition to the MGF1 message digest function. Test: †mmma external/conscrypt && vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/conscrypt-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/conscrypt-tests-hostdex_intermediates/classes.jack com.android.org.conscrypt.NativeCryptoTest Change-Id: Iee45d973e253f3b5c60919d70571abb96d97bb08/Add EVP_PKEY_{encrypt,decrypt} calls This adds the structure and tests for the EVP_PKEY_encrypt and EVP_PKEY_decrypt functions to be called from Java. Test: mmma external/conscrypt && vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/conscrypt-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/conscrypt-tests-hostdex_intermediates/classes.jack com.android.org.conscrypt.NativeCryptoTest Change-Id: I36dfbd6c6f76c5cbda8490375e8579ca32a4babb/Use fewer deprecated BoringSSL APIs. ""Handshake cutthrough"" was renamed to False Start at some point. Use the newer APIs which match what everyone refers to it as. SSL_set_reject_peer_renegotiations needed to be generalized at some point to take an enum. In doing so, it no longer has this weird double-negative spelling. The non-_long variants of SSL_alert_type_string and SSL_alert_desc_string dont do anything useful. We thought the one- and two-character codes were nuts, so they just return and now. Change-Id: I83d1fa26b0ea05284b0d73f1e2a58df07887aefe Test: mma in external/conscrypt/Blacklisting TLS 1.3 ciphersuites from Android TLS 1.3 adds a new set of AEAD-only ciphers, which will be exposed by BoringSSLs draft TLS 1.3 implementation. Were not ready to ship TLS 1.3 in Conscrypt yet, but get_cipher_names returns the new ciphers by default (cipher/version filtering happens much later). Suppress those ciphers for now. Test: cts-tradefed run cts CtsLibcoreTestCases CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I14421aec8dceb4b0eb7347b8ebf88a87a10ba856/Drop SSLv3 support Bug: 30977793 Test: libcore/run-libcore-tests libcore/luni/src/test/java/libcore/javax/net/ssl/* Change-Id: Ic88ff61bb16017e213a017ecdb16a1ac5b9baa48/Convert EVP_AEAD_CTX to stack-only The EVP_AEAD_CTX object is only valid for the period of time in which it is being used, so there is no need to have separate calls to EVP_AEAD_CTX_init and EVP_AEAD_CTX_cleanup. Sweep the arguments to these into the EVP_AEAD_CTX_seal and EVP_AEAD_CTX_open calls. Test: make build-art-host vogar && vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/javax/crypto/CipherTest.java Change-Id: I02b2c5759efdd8f29ec354ee9c10053dd1f9c53c/OpenSSLSignature: always throw on setting context Most of the EVP_PKEY_CTX_ctrl error codes are not handled by Conscrypt so make sure we have a default exception in case something goes awry during setup. Test: vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/mockito-api-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/java/security/SignatureTest.java Change-Id: I1f5a753242b6bc31cca9feb96486bbc86ad8af54/Drop RC4 cipher suite support from TLS Bug: 30977793 Test: libcore/run-libcore-tests libcore/luni/src/test/java/libcore/javax/net/ssl/* and running NativeCryptoTest. Change-Id: I04b91a6d3bf75a757d2c74bd1a39aea2709a9199/"
,,0.3166,conscrypt,"Improve performance of OpenSSLEngine Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I947bd3701e90bd65104f8f5c07ba218c4e051944/Move CT to platform/ This moves the CT code from main to platform and the checking from OpenSSLSocketImpl to TrustManagerImpl. Theres still some plumbing that needs to be done in main to store the TLS extension data so TrustManagerImpl can get it. Test: Run OpenSSLSocketImplTest, verified network connections still work Change-Id: I643db4668cbec2d1bb221156c5844667ae8701c8/OpenSSLEngineImpl: throw ISE if client/server mode not set According to SSLEngine documentation, IllegalStateException will be thrown if or is called before setting the client/server mode. When OpenSSLEngineImpl was written, it was written against the existing tests which did not fail in this scenario due to a missing fail() call in the try/catch. The existing test calls with a 10 byte buffer which immediatly hits the BUFFER_OVERFLOW condition. To avoid this the ByteBuffer check was moved below the state check which means calling with a too-small buffer without starting the handshake first will fail on the buffer size check only after the first call. This should not affect callers as they have to handle this condition during the normal operation of the SSLEngine anyway. Test: vogar host out/target/common/obj/JAVA_LIBRARIES/bouncycastle_intermediates/classes.jack out/target/common/obj/JAVA_LIBRARIES/bouncycastle-ocsp_intermediates/classes.jack out/target/common/obj/JAVA_LIBRARIES/bouncycastle-bcpkix_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack libcore/harmony-tests/src/test/java/org/apache/harmony/tests/javax/net/ssl/SSLEngineTest.java Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Bug: 31301555 Change-Id: I6f4c36d5abcc71e020ce40c7f61df2ed01b1a53e/Remove NPN support NPN is deprecated and clients should use ALPN instead for now. In the interest of removing support for it in BoringSSL, we will remove NPN support from Conscrypt as well. For now keep around the NPN setters and getters in OpenSSLSocketImpl and OpenSSLEngineImpl to help with backward compatibility for users that may be using reflection. Test: make && make cts && cts-tradefed run cts CtsLibcoreTestCases Change-Id: Ia4edb21412d9c4b2440291ae0a8a97d2217bf5b5/"
,,0.2935,conscrypt,"Improve performance of OpenSSLEngine Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I947bd3701e90bd65104f8f5c07ba218c4e051944/Use fewer deprecated BoringSSL APIs. ""Handshake cutthrough"" was renamed to False Start at some point. Use the newer APIs which match what everyone refers to it as. SSL_set_reject_peer_renegotiations needed to be generalized at some point to take an enum. In doing so, it no longer has this weird double-negative spelling. The non-_long variants of SSL_alert_type_string and SSL_alert_desc_string dont do anything useful. We thought the one- and two-character codes were nuts, so they just return and now. Change-Id: I83d1fa26b0ea05284b0d73f1e2a58df07887aefe Test: mma in external/conscrypt/Move CT to platform/ This moves the CT code from main to platform and the checking from OpenSSLSocketImpl to TrustManagerImpl. Theres still some plumbing that needs to be done in main to store the TLS extension data so TrustManagerImpl can get it. Test: Run OpenSSLSocketImplTest, verified network connections still work Change-Id: I643db4668cbec2d1bb221156c5844667ae8701c8/Partial revert of ""Fix static analysis findings"" This reverts commit ee3b1694a206350e87a70cc83dd35a1ec2053fd6. This causes deadlocks for wrapped sockets. Bug: 31449904 Test: make build-art-host vogar && vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java Change-Id: Iedf2244ae4ed8bd79dae996406c7668ebadc832e/Remove NPN support NPN is deprecated and clients should use ALPN instead for now. In the interest of removing support for it in BoringSSL, we will remove NPN support from Conscrypt as well. For now keep around the NPN setters and getters in OpenSSLSocketImpl and OpenSSLEngineImpl to help with backward compatibility for users that may be using reflection. Test: make && make cts && cts-tradefed run cts CtsLibcoreTestCases Change-Id: Ia4edb21412d9c4b2440291ae0a8a97d2217bf5b5/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/"
,,0.2899,conscrypt,"Implement unadorned ChaCha20. (#367) ChaCha20 is a stream cipher in its own right, and it was pointed out that it was weird that requesting ""ChaCha20"" alone from Conscrypt returned an implementation of ChaCha20+Poly1305. This implements plain ChaCha20 and makes it the default implementation, so to access ChaCha20+Poly1305 the caller must ask for ChaCha20/Poly1305/NoPadding explicitly. We havent made a release with ChaCha20 in it yet, so it should be fine to change the meaning of requesting ""ChaCha20""./Implement ChaCha20 support. (#356) Adds Cipher, KeyGenerator, and AlgorithmParameters for ChaCha20. Main changes are in OpenSSLCipher$EVP_AEAD. Refactored so the GCM- specific portions are all in the GCM subclass and the generic AEAD portions (such as not allowing reuse of key/IV combinations) are in the superclass. Also updates so that calling Cipher.init() on an instance of AES/GCM/NoPadding with a GCM AlgorithmParameters will pick up the values from the AlgorithmParameters (previously, it would only work with GCMParameterSpec or something convertable to IvParameterSpec)./Use public API to get session ID. (#348)/Add missing Java 9 methods for ALPN (#339) Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes"
,,0.3154,conscrypt,"Cleaning up various warnings. (#365)/Allow modes (ECB and NONE) and padding (NOPADDING) for ARC4. (#361) This allows callers to request ARC4/NONE/NOPADDING as an equivalent name to requesting just ARC4. Both NONE and ECB are supported as modes for RSA and for other providers implementations of stream ciphers like ARC4 that dont use modes, so we accept both here as well./Implement ChaCha20 support. (#356) Adds Cipher, KeyGenerator, and AlgorithmParameters for ChaCha20. Main changes are in OpenSSLCipher$EVP_AEAD. Refactored so the GCM- specific portions are all in the GCM subclass and the generic AEAD portions (such as not allowing reuse of key/IV combinations) are in the superclass. Also updates so that calling Cipher.init() on an instance of AES/GCM/NoPadding with a GCM AlgorithmParameters will pick up the values from the AlgorithmParameters (previously, it would only work with GCMParameterSpec or something convertable to IvParameterSpec)./"
,,0.2341,conscrypt,"Implement ChaCha20 support. (#356) Adds Cipher, KeyGenerator, and AlgorithmParameters for ChaCha20. Main changes are in OpenSSLCipher$EVP_AEAD. Refactored so the GCM- specific portions are all in the GCM subclass and the generic AEAD portions (such as not allowing reuse of key/IV combinations) are in the superclass. Also updates so that calling Cipher.init() on an instance of AES/GCM/NoPadding with a GCM AlgorithmParameters will pick up the values from the AlgorithmParameters (previously, it would only work with GCMParameterSpec or something convertable to IvParameterSpec)./Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes"
,,0.2302,conscrypt,"Add a function to force an engine read. (#453) The SSLEngine implementation sometimes need to prompt BoringSSL to process any incoming TLS data in order to determine whether there is enough data to produce plaintext. We previously were reading into a zero-byte buffer to do this, but that causes ambiguity in return values because a return of 0 from SSL_read() could mean a failure (generally EOF) or could mean a successful read of 0 bytes (which would be expected when reading into a zero-byte array). Instead, use SSL_peek. Fixes struct timevals tv_usec to print as long. (#474) Apparently some Darwin environments have 32-bit suseconds_t, which means we get a warning trying to print it via %ld. Just force whatever we have to be a long, so it always gets printed properly./Add logging macros that work on all platforms. (#462) This adds CONSCRYPT_LOG_X macros that redirect to either ALOG on Android or fprintf(stderr) on non-Android. In the future, we could use these to allow users to register a logging callback and send the logs to a destination of their choice (via java.util.Logger or log4j or what have you), but for now well keep it simple. Fixes support for token binding and EKM. (#445) Token binding allows higher-level protocols to bind their higher-level authentication tokens to their TLS sessions, making it more difficult for attackers to present those higher-level tokens in a future session. At the TLS level, all that needs to occur is a parameter negotiation, the rest of the token binding protocol is left up to the caller. Parameter options are specified as integers, and I decided not to supply constants for the currently-defined values. This is a niche enough use case that any user of it should be able to decide what values they want to support (and will want to share constants with whatever higher-level protocol theyre using with token binding). BoringSSL also doesnt supply constants for these values, so were in good company there. Keying material exporting (aka EKM, for exported keying material) is specified in RFC 5705, and is necessary for implementing token binding as well as other protocols./Parse ASN1_TIME structures in constructors. (#446) The legacy OpenSSL APIs in BoringSSL dont parse ASN1_TIME values until theyre used, which means that the existing code could explode in the middle of X509Certificate.getNotAfter() and similar Date-returning calls, and those calls arent declared to throw anything. Instead, read and cache the values in the constructor, where we can throw a relevant exception if necessary. We have to clone the Date values when returning them because Date is mutable./"
,,0.3039,conscrypt,"Disallow invalid SNI hostnames in setHostname(). (#470) The code that sets the SNI value on the connection checks for impl.getUseSni() && AddressUtils.isValidSniHostname(hostname) which is good for hostnames that were supplied as the hostname to connect to, since they may or may not be valid for SNI, but means that if you set an invalid hostname with setHostname() it will just silently be omitted from the connection and no SNI extension will be included in the handshake. Better to reject the hostname immediately. Also disallow hostnames with trailing dots, which arent legal SNI hostnames per RFC 6066. Also disallow null bytes./"
,,0.3013,conscrypt,"Disallow invalid SNI hostnames in setHostname(). (#470) The code that sets the SNI value on the connection checks for impl.getUseSni() && AddressUtils.isValidSniHostname(hostname) which is good for hostnames that were supplied as the hostname to connect to, since they may or may not be valid for SNI, but means that if you set an invalid hostname with setHostname() it will just silently be omitted from the connection and no SNI extension will be included in the handshake. Better to reject the hostname immediately. Also disallow hostnames with trailing dots, which arent legal SNI hostnames per RFC 6066. Also disallow null bytes./"
,,0.4205,conscrypt,"Disallow invalid SNI hostnames in setHostname(). (#470) The code that sets the SNI value on the connection checks for impl.getUseSni() && AddressUtils.isValidSniHostname(hostname) which is good for hostnames that were supplied as the hostname to connect to, since they may or may not be valid for SNI, but means that if you set an invalid hostname with setHostname() it will just silently be omitted from the connection and no SNI extension will be included in the handshake. Better to reject the hostname immediately. Also disallow hostnames with trailing dots, which arent legal SNI hostnames per RFC 6066. Also disallow null bytes./Add support for token binding and EKM. (#445) Token binding allows higher-level protocols to bind their higher-level authentication tokens to their TLS sessions, making it more difficult for attackers to present those higher-level tokens in a future session. At the TLS level, all that needs to occur is a parameter negotiation, the rest of the token binding protocol is left up to the caller. Parameter options are specified as integers, and I decided not to supply constants for the currently-defined values. This is a niche enough use case that any user of it should be able to decide what values they want to support (and will want to share constants with whatever higher-level protocol theyre using with token binding). BoringSSL also doesnt supply constants for these values, so were in good company there. Keying material exporting (aka EKM, for exported keying material) is specified in RFC 5705, and is necessary for implementing token binding as well as other protocols./"
,,0.285,conscrypt,"Support TLS 1.3 sessions. (#515) TLS 1.3 sessions are designed to only be used once, preventing correlation across connections. This implements support for those sessions by removing such sessions from the cache whenever theyre retrieved from the session cache and not sending them to the persistent (filesystem-based) cache, which we currently cannot delete individual items from. Also switch our per-host-port caches to support a list of cached sessions rather than a single one, so that if we get multiple sessions from the peer we can cache them all and use them when establishing multiple connections in parallel or such things./Obey supported_signature_algorithms when present (#521) In TLS 1.2, servers can supply a list of supported signature algorithms, and we should base our key choice on what is supported by the server. In TLS 1.3, this is the only mechanism for supplying the servers requirements, so this is necessary for TLS 1.3 support./Support opaque keys with RSA-PSS signatures. (#513) TLS 1.3 only uses RSA-PSS signatures (rather than RSA-PKCS#1), so we need to support these. Implement it by switching to Cipher.RSA/ECB/NoPadding instead of using Signature.RSA. Fix the opaque key tests so they actually work properly./Stop using set_options to set protocol support. (#500) The *_set_min_protocol_version and *_set_max_protocol_version functions were introduced to be explicit about setting supported versions. Use those functions instead of SSL_set_options with disabling constants. There arent any higher-level tests because this is already covered by tests like SSLSocket.test_SSLSocket_setEnabledProtocols, SSLSocket.test_SSLSocket_noncontiguousProtocols_useLower, etc./"
,,0.1539,conscrypt,"Dont init cipher suites if native code didnt load (#517) The try/catch and setting of loadError prevents the first static initializer in NativeCrypto from rendering the class unloadable, but the second static initializer still does, which means that users tend to get NoClassDefFoundErrors when they try to use Conscrypt instead of a more useful UnsatisfiedLinkError that points to the root cause./Stop using set_options to set protocol support. (#500) The *_set_min_protocol_version and *_set_max_protocol_version functions were introduced to be explicit about setting supported versions. Use those functions instead of SSL_set_options with disabling constants. There arent any higher-level tests because this is already covered by tests like SSLSocket.test_SSLSocket_setEnabledProtocols, SSLSocket.test_SSLSocket_noncontiguousProtocols_useLower, etc./"
,,0.3208,conscrypt,"Provide TrustManagerFactory (#516) This is necessary for users who want to enable TLS 1.3, since the TrustManagerFactory implementation shipped with OpenJDK throws an exception if it encounters an SSLSocket or SSLEngine thats negotiated TLS 1.3. Use our TrustManager in tests. Also adds a HostnameVerifier in the tests that does the simplest thing, because our TrustManager verifies hostnames by default, whereas the OpenJDK one doesnt, and the bundled HostnameVerifier on OpenJDK just fails to verify anything./Support opaque keys with RSA-PSS signatures. (#513) TLS 1.3 only uses RSA-PSS signatures (rather than RSA-PKCS#1), so we need to support these. Implement it by switching to Cipher.RSA/ECB/NoPadding instead of using Signature.RSA. Fix the opaque key tests so they actually work properly./"
,,0.2803,conscrypt,"Support TLS 1.3 (#524) Enables support for negotiating TLS 1.3. TLS 1.3 is not enabled unless SSLContext.TLSv1.3 is requested or setEnabledProtocols() is called with a set of values that includes TLSv1.3. Detailed changes: Adds protocol constants for TLS 1.3, and provides SSLContext.TLSv1.3, which has TLS 1.3 enabled by default. Adjusts cipher suite code for TLS 1.3 suites. When enabled, all TLS 1.3 cipher suites are always returned from supportedCipherSuites() and enabledCipherSuites(). Attempts to customize TLS 1.3 cipher suites in setEnabledCipherSuites() are ignored. Splits {SSLEngine,SSLSocket}Test into version-dependent and version-independent tests. The latter remain in {SSLEngine,SSLSocket}Test and the former move into new files {SSLEngine,SSLSocket}VersionCompatibilityTest, which are parameterized to test all combinations of client and server on TLS 1.2 and TLS 1.3. Remove a pile of RI-specific TLS-related expectation declarations from StandardNames. We dont actually verify the behavior of the RI at any point, so it was just making the code more confusing. Fixes"
,,0.2712,conscrypt,"Support TLS 1.3 (#524) Enables support for negotiating TLS 1.3. TLS 1.3 is not enabled unless SSLContext.TLSv1.3 is requested or setEnabledProtocols() is called with a set of values that includes TLSv1.3. Detailed changes: Adds protocol constants for TLS 1.3, and provides SSLContext.TLSv1.3, which has TLS 1.3 enabled by default. Adjusts cipher suite code for TLS 1.3 suites. When enabled, all TLS 1.3 cipher suites are always returned from supportedCipherSuites() and enabledCipherSuites(). Attempts to customize TLS 1.3 cipher suites in setEnabledCipherSuites() are ignored. Splits {SSLEngine,SSLSocket}Test into version-dependent and version-independent tests. The latter remain in {SSLEngine,SSLSocket}Test and the former move into new files {SSLEngine,SSLSocket}VersionCompatibilityTest, which are parameterized to test all combinations of client and server on TLS 1.2 and TLS 1.3. Remove a pile of RI-specific TLS-related expectation declarations from StandardNames. We dont actually verify the behavior of the RI at any point, so it was just making the code more confusing. Fixes"
,,0.106,conscrypt,Switch preferred SSLContext to TLSv13/
,,0.0577,conscrypt,Support updateAAD(ByteBuffer) (#647)/
,,0.0645,Frostwire,"[android] pass saved instance bundle in AbstractFragment#initComponents, similar to AbstractActivity/"
,,0.075,OpenDDS,"fix security test issues (double association / volatile gap without info_dst / secure discovery), fix rtps transport test to associate correctly/"
,,0.0588,pljava,Updated to Java7 and clang for Mac OS X Mavericks/
,,0.0628,realm-java,Remove reflection from the generated proxy code./
,,0.0891,realm-java,Nh/android support ssl (#4591) * Expose two new SyncConfiguration options to 1: Disable TLS verification. 2: provide the trusted root CA to validate the RealmObjectServer TLS connection (since OpenSSL doesnt have access to Android keystore) fixes
,,0.1355,realm-java,Add Supports for Primitive Lists (#5031) * Extended Annotation Processor to support it in model classes * Relaxed Generic Constraints * Support in insert/insertOrUpdate * Support in copyToRealm/copyToRealmOrUpdate * Support in copyFromRealm/
,,0.1322,realm-java,Add Supports for Primitive Lists (#5031) * Extended Annotation Processor to support it in model classes * Relaxed Generic Constraints * Support in insert/insertOrUpdate * Support in copyToRealm/copyToRealmOrUpdate * Support in copyFromRealm/
,,0.0686,realm-java,[Sync] Verify certificate using TrustManager (#5515)/
,,0.0717,realm-java,Better exception message if non model class is provided as function argument/
,,0.1168,rocksdb,"Merge operator fixes part 1. Summary: null checks and revisions to DBIter::MergeValuesNewToOld() DBIter test to stringappend_test fix with Merge and TTL More plans for fixes later. Test Plan: clean; make stringappend_test 32; ./stringappend_test all check; Reviewers: haobo, emayanke, vamsi, dhruba Reviewed By: haobo CC: leveldb Differential Revision: for Merge Operator Summary: Updated db_bench and utilities/merge_operators.h to allow for dynamic benchmarking of merge operators in db_bench. Added a new test (--benchmarks=mergerandom), which performs a bunch of random Merge() operations over random keys. Also added a ""--merge_operator="" flag so that the tester can easily benchmark different merge operators. Currently supports the PutOperator and UInt64Add operator. Support for stringappend or list append may come later. Test Plan: 1. make db_bench 2. Test the PutOperator (simulating Put) as follows: ./db_bench 3. Test the UInt64AddOperator (simulating numeric addition) similarly: ./db_bench Reviewers: haobo, dhruba, zshao, MarkCallaghan Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.1058,rocksdb,"Enhance partial merge to support multiple arguments Summary: * PartialMerge api now takes a list of operands instead of two operands. * Add min_pertial_merge_operands to Options, indicating the minimum number of operands to trigger partial merge. * This diff is based on Schalks previous diff (D14601), but it also includes necessary changes such as updating the pure C api for partial merge. Test Plan: * make check all * develop tests for cases where partial merge takes more than two operands. TODOs (from Schalk): * Add test with min_partial_merge_operands > 2. * Perform benchmarks to measure the performance improvements (can probably use results of task * Add description of problem to doc/index.html. * Change wiki pages to reflect the interface changes. Reviewers: haobo, igor, vamsi Reviewed By: haobo CC: leveldb, dhruba Differential Revision:"
,,0.0792,rocksdb,ttl/ttl_test.cc: prefer prefix ++operator for non-primitive types Signed-off-by: Danny Al-Gaaf
,,0.0577,rocksdb,C: add MultiGet support/
,,0.3889,rocksdb,"db_stress shouldnt assert file size 0 if file creation fails Summary: OnTableFileCreated() now is also called when the file creaion fails. In that case, we shouldnt assert the file size is not 0. Test Plan: Run crash test Reviewers: yiwu, andrewkr, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: IslamAbdelRahman, leveldb, andrewkr, dhruba Differential Revision: FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.2817,rocksdb,Added SetOptions support to RocksJava (#1243) * [refactor] Split Java ColumnFamilyOptions into mutable and immutable and implement any missing immutable options * [feature] Implement RocksDB#setOptions/fixes 1220: rocksjni build fails on Windows due to variable-size array declaration (#1223) * fixes 1220: rocksjni build fails on Windows due to variable-size array declaration using new keyword to create variable-size arrays in order to satisfy most of the compilers * fixes 1220: rocksjni build fails on Windows due to variable-size array declaration using unique_ptr keyword to create variable-size arrays in order to satisfy most of the compilers/
,,0.3198,rocksdb,fixes 1220: rocksjni build fails on Windows due to variable-size array declaration (#1223) * fixes 1220: rocksjni build fails on Windows due to variable-size array declaration using new keyword to create variable-size arrays in order to satisfy most of the compilers * fixes 1220: rocksjni build fails on Windows due to variable-size array declaration using unique_ptr keyword to create variable-size arrays in order to satisfy most of the compilers/
,,0.22699999999999998,rocksdb,"Added further Java API options for controlling concurrent writes/Exposed further Java API options for controlling compaction/Added SetOptions support to RocksJava (#1243) * [refactor] Split Java ColumnFamilyOptions into mutable and immutable and implement any missing immutable options * [feature] Implement RocksDB#setOptions/[Fix java build] Stop using non standard std::make_unique Summary: std::make_unique is not standard and not always available, remove it Test Plan: Run ""make clean jclean rocksdbjava jtest on my mac Reviewers: yhchiang, yiwu, sdong, andrewkr Reviewed By: andrewkr Subscribers: andrewkr, dhruba Differential Revision: 1220: rocksjni build fails on Windows due to variable-size array declaration (#1223) * fixes 1220: rocksjni build fails on Windows due to variable-size array declaration using new keyword to create variable-size arrays in order to satisfy most of the compilers * fixes 1220: rocksjni build fails on Windows due to variable-size array declaration using unique_ptr keyword to create variable-size arrays in order to satisfy most of the compilers/"
,,0.3877,rocksdb,"Only cache level 0 indexes and filter when opening table reader Summary: In T8216281 we decided to disable prefetching the index and filter during opening table handlers during startup (max_open_files Test Plan: Rely on `IndexAndFilterBlocksOfNewTableAddedToCache` to guarantee L0 indexes and filters are still cached and change `PinL0IndexAndFilterBlocksTest` to make sure other levels are not cached (maybe add one more test to test we dont cache other levels?) Reviewers: sdong, andrewkr Reviewed By: andrewkr Subscribers: andrewkr, dhruba Differential Revision: FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.4807,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.4741,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.4798,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.3356,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision: Statistics to track Compression/Decompression (#1197) * Added new statistics and refactored to allow ioptions to be passed around as required to access environment and statistics pointers (and, as a convenient side effect, info_log pointer). * Prevent incrementing compression counter when compression is turned off in options. * Prevent incrementing compression counter when compression is turned off in options. * Added two more supported compression types to test code in db_test.cc * Prevent incrementing compression counter when compression is turned off in options. * Added new StatsLevel that excludes compression timing. * Fixed casting error in coding.h * Fixed CompressionStatsTest for new StatsLevel. * Removed unused variable that was breaking the Linux build/[rocksdb] make more options dynamic Summary: make more ColumnFamilyOptions dynamic: compression soft_pending_compaction_bytes_limit hard_pending_compaction_bytes_limit min_partial_merge_operands report_bg_io_stats paranoid_file_checks Test Plan: Add sanity check in `db_test.cc` for all above options except for soft_pending_compaction_bytes_limit and hard_pending_compaction_bytes_limit. All passed. Reviewers: andrewkr, sdong, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
