Topic_no,Keywords,Contrib,System,Text
8,"type, remove, add, fix, work, long, issue, string, find, default, message, rename, handle, double, thing, break, require, override, window, map",0.075,conscrypt,NativeCrypto should honor timeout less than one second Bug: Change-Id: I4507a1e9fe37b1c095f7bb4d3e3a55d6d738f7ad/Tracking openssl-1.0.1b Change-Id: I418a5b36670c6cc72e1e6cc29add950409f97f9f/Expose NPN in OpenSSL. This is derived from costins change Ib18da136cb628515d6909c438cd0809452d7058a. It moves the protocols data to the AppDatas callbacks so the memory can be released when the handshake completes. Change-Id: Id61feaa6f28250e393f5c8093688b099e92dce9c/
,,0.0657,conscrypt,Expose NPN in OpenSSL. This is derived from costins change Ib18da136cb628515d6909c438cd0809452d7058a. It moves the protocols data to the AppDatas callbacks so the memory can be released when the handshake completes. Change-Id: Id61feaa6f28250e393f5c8093688b099e92dce9c/
,,0.1083,conscrypt,Fix static analysis findings Add annotations where we intentionally left out and a brief explanation. Add synchronized keyword where needed by overriding methods so they match the parent class. Change-Id: I55591a5902530f1c2fb8cc89260c3df09648ec8e/
,,0.1301,conscrypt,"Fix static analysis findings Add annotations where we intentionally left out and a brief explanation. Add synchronized keyword where needed by overriding methods so they match the parent class. Change-Id: I55591a5902530f1c2fb8cc89260c3df09648ec8e/Allow SSLSession to return IP address In an effort to not use reverse DNS, we no longer return hostnames from sockets created via IP addresses. However, this also made the SSLSession return null when a Socket is created to an IP address instead of an FQDN. While being careful not to trigger another DNS lookup, simply return a textual representation of the IP address connected when the SSLSocket has no knowledge of what the actual FQDN is supposed to be. (cherry picked from commit ee1a154153a1b20d55fc4b0dd9752277f0cd6451) Bug: 27123298 Change-Id: Ie37e214f91e4f005f90da0d4a2aba1cd604d60b7/Try to get peer hostname from SocketAddress Java 7 added a new method to InetSocketAddress called getHostString() which returns the unresolved host for a given address. This should be suitable for use with SNI as long as it isnt an IP address. This also helps with testing because we can use serialization tricks to rewrite the ""hostname"" field of an already-serialized loopback address. Bug: 27271561 Change-Id: I9845e57d505712cdfee87d18246a1a3b021deea3/OpenSSLSocketImpl: Dont accidentally create a SocketImpl. We dont call super.close() when were wrapping a socket, so well have to be careful not to call any superclass methods that might end up creating a SocketImpl. bug: 27250522 Change-Id: Ie98127d002cc3b3dd3dd419b62adcfec47817479/"
,,0.1252,conscrypt,"Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes renegotiation with sockets (#321) Fixes Fixes send and receive close_notify alerts (#325) As part: * Dont call SSL_clear() when shutting down an SSL, because we need to be able to hand it close_notify messages still. Since both SSLEngine and SSLSocket arent reusable, this is safe. * Return SSL_ERROR_ZERO_RETURN explicitly when it happens, so that we can properly adjust our state in response to a close_notify being received. * Check if there are pending bytes to be sent when wrap() is called, even if the SSLEngine is closed./"
,,0.0686,Frostwire,[desktop] Not using mp4parser for tagging/
,,0.0823,Frostwire,[common] username fix for YT/[common] Fixed YT dash extraction/[common] Improved regex for date and player id/
,,0.0648,Frostwire,[android] Added retry logic to ImageLoader. Using it in FileListAdapter/
,,0.0789,Frostwire,"[all] after so much time, it does not make sense to have a dedicated package for the single class Logger/"
,,0.077,Frostwire,"[all] after so much time, it does not make sense to have a dedicated package for the single class Logger/"
,,0.0713,Frostwire,"[desktop] GUIUtils.toUnitBytes GUIUtils.getBytesInHuman Since we kept forgetting the old method to get bytes in human friendly units, Ive deleted the new implementation and renamed the old one/"
,,0.2295,Frostwire,"[desktop] New: Send Feedback Dialog * [issue-632] Adding Send Feedback Dialog * [issue-632]Adding Send Feedback Dialog * [desktop] temp * [desktop][issue-632] Adding Send Feedback action * [desktop][issue-632] Updated endpoint * [desktop][issue-632] warning fixes * [desktop][issue-632] Adding Your Name field to SendFeedback Dialog * [desktop][issue-632] Adding validations to Dialog * [desktop][issue-632] improvements to Send Feedback Dialog * [desktop][issue-632] misc fixes & refactors * [desktop][issue-632] system info output in HTML or not * [desktop][issue-632] Feedback interval to 5 mins, make sure user can copy & paste long messages and layout doesnt break * [desktop] cleanup/"
,,0.0689,Frostwire,"[desktop] cleanup empty methods, encapsulation fixes/"
,,0.0673,Frostwire,[desktop] remove redundant casts/
,,0.0804,Frostwire,"[common/desktop] time calculations reverted to long, not double/"
,,0.0673,Frostwire,[android/WIP] Upgrading com.android.billingclient to 2.0.3/
,,0.0731,javacpp,* Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.0788,javacpp,"squid:S00108 Nested blocks of code should not be left empty/ * Fix swallowed `InterruptedException` (issue bytedeco/javacv#315)/squid:S00117 Local variable and method parameter names should comply with a naming convention squid:S1197 Array designators ""[]"" should be on the type, not the variable squid:S00115 Constant names should comply with a naming convention/"
,,0.0887,javacpp,* Catch more exceptions that can occur in `Loader` when caching resources (pull
,,0.1255,javacpp,"* Allow users to override platform properties via system properties starting with ""org.bytedeco.javacpp.platform.""/ * Replace calls to `Class.getResource()` with `Loader.findResource()` to work around issues with JPMS ([pull * Enhance `Loader.findResources()` with `Class.getResource()` and search among parent packages * Take shortest common package name among all user classes for the default output path of `Builder`/"
,,0.0652,javacpp,"* Fix `Loader.cacheResource()` with the ""jrt"" protocol as used by jlink (pull"
,,0.077,javacpp,* Consider `Pointer` values `maxBytes` or `maxPhysicalBytes` suffixed with `%` as relative to `Runtime.maxMemory()` (pull
,,0.129,jna,"* include/ffi_common.h: Delete, after moving contents to... * include/ffi_private.h: Subsume contents of ffi_common.h. * include/Makefile.am (noinst_HEADERS): Remove ffi_common.h. * include/Makefile.in: Rebuilt. * arm/ffi.c, m68k/ffi.c, mips/ffi.c, powerpc/ffi.c, s390/ffi.c, ia64/ffi.c: Include ffi_private.h, not ffi_common.h. * alpha/ffi.c, sparc/ffi.c, x86/ffi.c: Dont include ffi_common.h. * types.c, raw_api.c, java_raw_api.c, prep_cif.c: Dont include ffi_common.h. * debug.c: Include ffi_private.h instead of ffi_common.h. * mips/ffi.c (calc_n32_struct_flags): Make static. (FIX_ARGP): Remove call to debugging routine ffi_stop_here. * mips/n32.S: Include ffi_private.h. * mips/o32.S: Include ffi_private.h./Many changes. Not quite there yet./"
,,0.0648,jna,Fix compilation error in file monitor example git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0863,OpenDDS,"Initial support for Wireshark 2.x, see TODO comments proto_tree_add* still needs to be handled as this has a large breaking change in wireshark/"
,,0.2588,OpenDDS,"Dissector: Handle invalid ITLs, mark missing ITLs Handle Segfaults in sample dissectors from invalid ITLs. This wouldnt detect if an ITL is valid, just check if a pointer is definitely invalid during the payload dissection, inform the user via the GUI that the error is most likely caused by an invalid ITL file and exit as gracefully as possible (exit()). Ideally it would just mark the packets as malformed and recover, but that code is less than ideal (using set long jump from the SIGSEGV handler). Also in this commit is using Wiresharks expert info to inform the user in the GUI that it couldnt dissect a sample payload for other reasons: No Topic to Track or No Dissector could be found for the Type./Dissector: Basic Payload Dissection in WS2 This is the basic framework for payload dissection in wireshark2. Involves adding a hf vector to the Sample_Manager Singleton, adding fields as they encountered in Sample_Dissector, and merging them with the constant DCPS fields and passing the result to wireshark when DCPS is registered. Sample Fields are left with a int that is the wireshark field id (hf_). During packet dissect, Sample_Fields are passed the wireshark field id and using that they can add data corresponding to their field. Payload type is now set on opendds.sample.payload and payload contents are added in a tree under that. Work left as of writing this is: to fix/complete registration of non string fields, involve composite types (seq, union, etc), clean up Sample_Manager usage, check/stop possible leak of dynamically generated field names and get working with tests other than Messenger./Dissector: Add Sample IDL Type to Protocol Tree Also because it uses the preset header field, DCPS packets can not be filtered by if they contain Sample Data and more specifically by IDL Type./Dissector: Fixed ""double"" DCPS packet info In the packet tree, OpenDDS packet infomation would be added twice to the packet information tree, at least in Wireshark 2.4.1 for the Messager tests. This appears to resolve that by removing a dissection call for TCP packets./"
,,0.0781,OpenDDS,"Dissector: Adjustments for WS compatibility Made some changes to README Sample Dissection enabled for Wireshark 1.x. Attempted to make compatible with the next release, 2.5/2.6, but it has an assertion error on start up. 1.10 and before segfaults. Tested successfully with 1.12, 2.0, 2.2, and 2.4 on Linux./"
,,0.3122,OpenDDS,"dissector: Fixed Type Support and expert changes Added support for dissection for OpenDDS fixed-point numbers which are converted to doubles for numerical functions. If ACE_CDR::Fixed is missing, a message will be displayed that this is so. Also started marking some packets with a warning instead of marking it as malformed. For example, when an individual field fails for some reason or non essential information is unavailable, like the dissector ITL file./Dissector: Various Changes for PR Comments Removed Some Manual Memory Management: String and WString code rewritten to use TAO::String_Manager_T utf16_to_utf8 rewritten to use std::vector Various Other Small Changes/Dissector: %s %C ACE_DEBUG/Dissector: READ and error handling fix/Dissector: Fixs for PR Addressing Adams inital comments, Codacy, the Merge Conflict and a few things I found along the way./Dissector: Various Smaller Tasks Completely Removed ws_proto_tree_add_text(). Mark Packet if a determinable error occurs during sample dissection./Dissector: Serializer Refactor: Compiles, but broken/Dissector: Nexted Structs/Dissector: Namespace Resolution and Union Bug Added Sample_Base as a Parent Class to Sample_Field and Sample_Dissector. Sample_Base holds wireshark namespace and field for every context that its child class is used in. Tweaked Array and Sequence Labels and Namespace. For now using ""_e"" (for element) to access an element of the sequence or array. Removed namespace debug messages. Fixed bug in Union length calculation that caused String Key Test to hang on dissection./"
,,0.1104,OpenDDS,Dissector: Refctr SD with RCH (Compiles but broken)/Various Improvements to the Dissector Made small changes to make it more complaint with what Wireshark is expecting. Some Formatting fixes and more comments Fixed a malformed packet error where multiple samples causes a boundary error of some kind./
,,0.0664,pljava,*** empty log message ***/
,,0.0639,pljava,*** empty log message ***/Initial revision/
,,0.0686,pljava,*** empty log message ***/
,,0.0686,pljava,*** empty log message ***/
,,0.0833,pljava,*** empty log message ***/*** empty log message ***/Added classes to handle SPI cursors and complex set parameters./
,,0.0686,pljava,*** empty log message ***/
,,0.0751,pljava,Added version logic to makefile system/
,,0.075,pljava,*** empty log message ***/Improved caching and closing of prepared statements./*** empty log message ***/*** empty log message ***/
,,0.0686,pljava,*** empty log message ***/
,,0.0686,pljava,*** empty log message ***/
,,0.0686,pljava,*** empty log message ***/
,,0.0664,pljava,*** empty log message ***/*** empty log message ***/*** empty log message ***/*** empty log message ***/*** empty log message ***/*** empty log message ***/*** empty log message ***/
,,0.1331,pljava,Backport of things missing in PostgreSQL 7.4/Backport of things missing in PostgreSQL 7.4/
,,0.1427,pljava,Backport of things missing in PostgreSQL 7.4/Backport of things missing in PostgreSQL 7.4/Fixed bug# 1218/Removed some obsolete GCJ/*** empty log message ***/Added the ability to return a ResultSet Added object pooling capabilities/
,,0.0829,pljava,Changes needed to accomodate OUT parameters in 8.1/Fixed bug# 1218/Runtime detection of integer-datetimes/Removed some obsolete GCJ/*** empty log message ***/Added the ability to return a ResultSet Added object pooling capabilities/Added SecurityManagers for trusted and untrusted versions/
,,0.0652,pljava,Rewrite of fence mechanism/
,,0.1082,pljava,Removed JavaHandle and complex MemoryContext stuff that was no longer needed./Rewrite of fence mechanism/
,,0.1082,pljava,Removed JavaHandle and complex MemoryContext stuff that was no longer needed./Rewrite of fence mechanism/
,,0.1257,pljava,Removed JavaHandle and complex MemoryContext stuff that was no longer needed./Rewrite of fence mechanism/
,,0.1039,pljava,Rewrite of the type mapping system/
,,0.0664,pljava,*** empty log message ***/
,,0.0669,pljava,Fixed some issues with Meta-data/
,,0.1596,pljava,"Changes are required because of move of GETSTRUCT() and timeout handling framework changes done in PG 9.3. Along with that I fixes minor issue in DDRProcessor.java that is causing ""illegal start of expression"" error. Maven did not worked for me to build it and hang endlessly while building c source code (pljava-so). As a workaround I temporarily fixed makefiles to test PG9.3 related fix that seems worked and generated pljava.jar and pljava.so files and their basic sanity seems working fine./"
,,0.3436,pljava,"Snippet implicitly requires its implementor-name. That way, a snippet that will test some condition and enable that implementor-name at install time can be declared to provide it, and be emitted earlier. However, not to insist on supplying a snippet that explicitly provides every implementor name ... some could just be selected by the user with SET LOCAL pljava.implementors TO ... before installing. So the implicit requirement will be counted in indegree initially, to delay such a snippet as far as practical, but only until a cycle-breaker releases it when no other progress can be made./SQL generator now reports require cycles usefully. Should have done that all along./Now Snippet can carry implementor-name. Nothing sets it yet, but it now defaults to PostgreSQL for everything, in recognition of the fact that hardly any of the PG SQL code that gets generated here will be in the exact ISO-prescribed syntax of the exact five allowed, unadorned SQL statements. Yes, that makes DDR files bigger. The zip format will compress them well./Workaround the problem reported in The annotation processor in javac runs in multiple rounds, as long as generated source files keep appearing, and one final round after they dont. This code used to save some mapping of Class objects to the javax.lang.model objects (TypeElement/TypeMirror) until the final round, which worked in Java 6, but as of 7 one gets back different model objects in different rounds, for the same types, and they dont match, so type mapping breaks. This workaround moves all those lookups to before or during round 1, when a consistent set of model objects can be looked up. So, it will work as long as all the source files that might contain pljava annotations will be found in round 1. That should always be the case unless someone is using a very fancy build with _other_ annotation processors generating new source files with pljava annotations that have to be processed in additional rounds. For now, that wont work, because their types wont seem to match what was computed in round 1. So dont do that. might refer to this problem, and promises a fix in Java 9, for what its worth./"
,,0.0599,pljava,Just noticed this example left the schema name off./
,,0.4061,pljava,"Conform to Point/ComplexTuple renames. Completes the work on MappedUDT, with Point and ComplexTuple now annotation examples, and the corresponding code removed from the old hand-maintained examples.ddr. In a couple last this-really-has-to-be-it review passes... some msg() calls had the Element parameter in the wrong place (and, being variadic and expecting extra parameters, didnt warn about it). whether to include length/alignment/storage in the output when like is used should explicitly depend on whether they were set explicitly (is that explicit enough?); otherwise, in some cases it wouldnt be possible to override the values copied by like. removed a goofy constant in the VarlenaUDTTest left over from very early sanity checking. Shortened unnecessary full-qualification on some enums actually in scope./Conform to BaseUDT rename, add MappedUDT. Supporting MappedUDT is much simpler. It emits a CREATE TYPE foo AS ( ... structure ... ) if a structure is provided, or not, if it isnt, followed by a SELECT sqlj.add_type_mapping( ... ), and thats it. Much javadoc also added. This commit ends with pure renames of the Point and ComplexTuple examples in preparation to make them annotation examples ... breaking compilation until they are fixed up in the next commit, but git can see where they went./Add a class annotation to make a base/scalar UDT. Add the annotation, have DDRProcessor recognize it. Check the annotated class for the required properties and members. The snippets map formerly allowed only one type of annotation on a given element. That happened to work, but not now when a class could have both a UDT and a SQLAction annotation, for example. Adapt the map to key by element and snippet class, so snippets of different classes can be hung on an element and selectively retrieved. An old comment in populateAnnotationImpl suggested it would reduce boilerplate setter code if, failing to find a setter method, the field itself could be reflectively looked up and stored. Thats done now, so setter methods are needed only when something more special has to be done. Function declarations will be synthesized automagically for the four mandatory (in, out, recv, send) methods, but to allow their properties to be individually adjusted, they can still accept Function annotations. Thats done by hanging a new subclass of FunctionImpl on those elements, that generates the right special form of declaration, and has setters that refuse changes to certain properties where that wouldnt make sense. Treat the default implementor-tag (PostgreSQL if not changed with new ddr.implementor command line property) specially. Now that everything is getting wrapped with an implementor tag by default, the implied requires=""implementor-tag"" was holding everything back until released by the cycle-breaker, sometimes in puzzling order. The implementor tag that happens to be the default one should /not/ be treated as a pending requirement. Move ComplexScalar to annotation subpackage, in preparation for revamping it as an annotation example. So git wont lose track of it, this is a breaking change, to be fixed in the next commit with edits corresponding to the move./"
,,0.3562,pljava,"Use PG 8.3 find_coercion_pathway API. Ok, this compiles and doesnt break any tests (and will give errors for unhandled return cases, or a warning when disregarding domain constraints). The reason it went unnoticed so long is that Type_getCoerce{In,Out} are really very seldom called. They are almost dead code--fairly contrived function declarations are needed even to force them to be called for test purposes. That seems to be mostly because Type_getCoerce{In,Out} wont be called if Type_canReplaceType returns true, which it very often does, because (a) Type_fromOid silently replaces domains with their base types, and (b) Function builds the method signature by mapping the SQL return type to a Java type and looking for a matching method, failing if none is found, rather than looking for a method by its name and parameter signature only, then validating its return type. So, essentially by construction, coercion of the return type cant ever turn out to be necessary. It could, however, if the AS string gives the Java return type explicitly, and it requires coercion to the (base type of the) SQL type. SQL/JRT has no syntax to specify the Java return type, but as an extension it seems PL/Java does: ""Function mapping"" in the wiki gives an example where it precedes class.method, separated by a space. Only the example doesnt work. Thats because the getAS code accepts the syntax only when the return type is purely alphanumeric (no dots, so non-package-qualified). Not a recent change, has been that way since 2006. An is also accepted, though, even after a package-qualified return type. The example works if retried with an SQL/JRT, it seems to me, specifies the other approach to method resolution, that is, find the method by name and parameter signature, then work out what to do with its return type, but that would be a change to current PL/Java behavior. The unimplemented warning for RELABELTYPE to a domain type essentially cant be triggered, because of the way any domain is replaced by its base type before consulting canReplaceType. Thats harmless for IN parameters. For the return type, its a type-safety hole: a PL/Java function can return a value that isnt valid for its declared result domain. Fixing that should be possible, but beyond the scope of this issue. The not-implemented errors for COERCEVIAIO and ARRAYCOERCE can be triggered, just by constructing exactly the sort of function declarations where you would expect those things to happen. They would still be arguably contrived cases, where the AS string specifies a method with different types than would naturally correspond to the SQL ones. Nevertheless, the ""Function mappping"" wiki page says ""PL/Java will use a standard PostgreSQL explicit cast when the SQL type of the parameter or return value does not correspond..."" and thats not completely true at the moment, as long as some features available in standard PostgreSQL explicit casts, like array or I/O coercion, arent yet implemented. Again, beyond the scope of issue 65. At least those cases now give clear errors, instead of crashes or Krueger numbers as I just confirmed in a build without this change, so this does in fact fix a latent bug. Note that the single-row result set writers used for functions that return composite or set-of-composite results have their own coercion logic completely unrelated to this, and implemented in SPIConnection.java. There are more moving parts here than I had hoped..../Type_getCoerceOut correct statement order. Ken Olson pointed this out as a case of dead code, but in fact it was live use of an unassigned variable just before the function call that was going to assign it. Had to be an editing mixup, has been that way a very long time, and has probably not caused more problems only because its statistically rare for a random stack location to be exactly equal to InvalidOid. Scratches the surface of A full solution for that issue will have to come later, but this much was an obvious Heisenbug with an obvious fix./"
,,0.2064,pljava,"Lay groundwork for typmod support. To fully support type modifiers, including the three-argument forms of input/receive functions, will take more thought than 1.5.0 can wait for. But to release 1.5.0 with the SQL generator emitting the one-argument forms would invite headaches later, because CREATE OR REPLACE FUNCTION cant change the parameter list, and DROP/reCREATE would cause cascading disruption. So, make sure the generator already emits the three-argument form, and just be sure to fail if a non-default typmod is in fact passed, with more complete support to be added later. By happy chance, it seems that PostgreSQL only very rarely passes non- default typmods to the input/receive functions--possibly only during COPY operations. (Those were the only way I was able to test this change.) In most other cases where a typmod is used, PostgreSQL relies on a typmod application cast in a separate step, not on passing the typmod to input/receive. PL/Java is already usable to implement typmodin, typmodout, and cast functions, so in limited testing it seems possible already to do types with typmods, maybe as long as COPY operations on them are not needed. Therefore, add an example that illustrates it./"
,,0.1772,pljava,"Make DEBUG1 quieter. Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the initial load message that identifies PL/Java and JVM versions. (This is NOTICE if PL/Java is explicitly LOADed, so its seen by default, but in other cases you can now see it by enabling DEBUG1, and not mixed in with a lot of other stuff.)/Cluster name as property and in jps title. Make the cluster name easily available if it is set (to a nonempty string, in PostgreSQL versions where it is available), as a java system property and in the title visible to jps and jvisualvm. In passing, lose the default vmoption to lock out jvisualvm local connections. Noah Misch persuades me that PostgreSQL itself doesnt make special efforts to prevent things that already require access as the postgres user on the server host, and it would be unpostgresy to do so here. Instead, simply document how to disable attachment, if the admin so desires./"
,,0.1479,pljava,"Handle widening of portalPos and demise of posOverflow. No need for version conditionals around isPosOverflow: it isnt in an API class, and nothing in this code base uses it, so out it goes. This eliminates the other compile-time error that was blocking compilation for PG 9.6, but its not the last thing to have had its width changed./Handle the PG 9.6 widening of SPI_processed. Includes a start on some Java 8 JDBC additions: getLargeUpdateCount() and executeLargeBatch()./"
,,0.1017,pljava,"Fulfill old todo for setting a libjvm default. By passing on the mvn command line, the downstream maintainer of a packaging system for a platform where the standard Java install location is known can build a package where the default for pljava.libjvm_location is usually right./"
,,0.3164,pljava,"Dont repeat yourself with UDT mappings. It was never satisfying to define a UDT in Java through annotations and still have the DDR generator give ""no mapping to an SQL type"" errors for functions accepting or returning that type. It was easy enough (if tedious) to work around by adding explicit type= or annotations, but the DDR generator had all the necessary information to figure that out without such manual help. Now it does, eliminating the tedium illustrated in To accommodate mappings added from the source being compiled, the protoMappings collection is now of TypeMirror instances rather than of Class instances. Still future work: also add implied ordering dependencies for uses of the new type (such as functions that have it as parameter or return types and have to follow the type declaration, as illustrated in or that are named in it as, for example, typmod in/out functions, and have to precede it)./Types.getArrayType() does the trick./Recognize type SQLXML in the annotation processor./"
,,0.2735,pljava,"Use getSQLTypeName, and add a test. Provide one of the short-term solutions suggested in issue As the current PreparedStatement implementation does not get the inferred parameter types from PostgreSQL (which became possible with SPI only as recently as PostgreSQL 9.0), its setObject method must make a best effort to map in the other direction, finding the PostgreSQL type that corresponds to the Java parameter value. In one case, this is easily made much more reliable: when the Java parameter value is an SQLData instance (a UDT), and therefore has a getSQLTypeName method, unused until now. Add a test method (in the ComplexTuple UDT example) to confirm that the type is properly mapped when passed as a parameter to a PreparedStatement./"
,,0.2858,pljava,"Use getSQLTypeName, and add a test. Provide one of the short-term solutions suggested in issue As the current PreparedStatement implementation does not get the inferred parameter types from PostgreSQL (which became possible with SPI only as recently as PostgreSQL 9.0), its setObject method must make a best effort to map in the other direction, finding the PostgreSQL type that corresponds to the Java parameter value. In one case, this is easily made much more reliable: when the Java parameter value is an SQLData instance (a UDT), and therefore has a getSQLTypeName method, unused until now. Add a test method (in the ComplexTuple UDT example) to confirm that the type is properly mapped when passed as a parameter to a PreparedStatement./"
,,0.077,pljava,Drop GUC_LIST_QUOTE flag on pljava.implementors. It becomes disallowed for extensions to define GUC_LIST_QUOTE variables as of PG 11 (846b5a5)./
,,0.0648,realm-java,Updated tightdb version. Updated jni now warning free./
,,0.0923,realm-java,Major overhaul of generic.mk/config.mk and build.sh which shall serve as a uniform front-end for building each part/Still working on script to build a complete distribution package including all language bindings/
,,0.0661,realm-java,Added TableBase::distinct() Added TableBase::average() Added checks for columnType in setIndex()/Prepared and added new methods to table/view interface (issue tightdb version. Updated jni now warning free./
,,0.0764,realm-java,Tracking latest error handling improvements in core library/WIP on ReadTransactions/
,,0.1259,realm-java,"Tracking latest error handling improvements in core library/Changes due to improved error handling in core library. Group no longer has an is_valid() method. From now on, Group instances are always valid./Fixes due to changed Group and SharedGroup constructors in core library/Fixed create of Group(byte[]). Enabled all GroupTest tests and added new test./"
,,0.2116,realm-java,"String conversion in both directions is complete except for an important FIXME in to_jstring() in util.h/String conversion from C++ to Java done, opposite order remains/Tracking changes in core library: Renaming of column type enumeration/"
,,0.1404,realm-java,"Added experimental table method: nativeFindSortedInt (currently disabled). Add try/catch around WriteToMem() (many more needs this)./Group::BufferSpec eliminated. Using BinaryData instead./String conversion in both directions is complete except for an important FIXME in to_jstring() in util.h/String conversion from C++ to Java done, opposite order remains/Fix due to core lib change: Group::get_table_count() Group::size()/"
,,0.252,realm-java,"Added experimental method to Table: findSortedLong(). NOTICE it does not return if the value was actually found or not you have to check that through a get() afterwards for now./Fixes for: Merge branch master into explicit_string_size/Added experimental method: table.moveLastOver() method/Added Table::addColumn(), renameColumn(), removeColumn()/String conversion in both directions is complete except for an important FIXME in to_jstring() in util.h/String conversion from C++ to Java done, opposite order remains/Tracking changes in core library: Renaming of column type enumeration/Just another FIXME/WIP: Updated with float, double support. Still a crash./"
,,0.102,realm-java,Added testcases for Mixed float and double/
,,0.1524,realm-java,"refdoc: added dynamic view and query and example for Table/float: updated floats sum, average to return double instead of float./WIP: Updated with float, double support. Still a crash./"
,,0.1865,realm-java,"Added experimental method to Table: findSortedLong(). NOTICE it does not return if the value was actually found or not you have to check that through a get() afterwards for now./Added experimental method: table.moveLastOver() method/float: updated floats sum, average to return double instead of float./WIP: Updated with float, double support. Still a crash./"
,,0.1756,realm-java,"refdoc: added dynamic view and query and example for Table/Added experimental method to Table: findSortedLong(). NOTICE it does not return if the value was actually found or not you have to check that through a get() afterwards for now./added a few classes in Java ref-doc/Added experimental method: table.moveLastOver() method/Added Table::addColumn(), renameColumn(), removeColumn()/float: updated floats sum, average to return double instead of float./WIP: Updated with float, double support. Still a crash./"
,,0.0599,realm-java,Group::mode_Normal has been renamed to Group::mode_ReadWrite in the core library/
,,0.1725,realm-java,"renamed exception/add exception. Throw it when wrong type is acessed from Mixed type/Table.close() now private (added private_debug_close() instead. Added better support for detecting valid View and Query after close of table. Still not completely tested, also missing core-support./ColumnType.Long renamed to Integer/BREAKING CHANGE: Column type enum have been renamed. Is now less verbose and more java like e.g. ColumnType.ColumnTypeString is now ColumnType.STRING etc/"
,,0.0534,realm-java,Added maximumDate and minimumDate/
,,0.0957,realm-java,Renamed ConcurrencyExample to ServiceExample. Added threadExample to distribution examples./
,,0.0977,realm-java,Renamed ConcurrencyExample to ServiceExample. Added threadExample to distribution examples./
,,0.1019,realm-java,Renamed ConcurrencyExample to ServiceExample. Added threadExample to distribution examples./
,,0.0669,realm-java,Fix a few lint warning reported by the Android Linter/
,,0.12,realm-java,"Expanding time resolution into millisecs (#2679) Expanding time resolution into milliseconds but using cores new column type Timestamp. An upgrade to core version 0.100.0 is required, and some minor updates are coming from some changes in the core API./Upgrading to Realm Core 0.97.0/"
,,0.0673,realm-java,Upgrading to Realm Core 0.97.0/
,,0.11599999999999999,realm-java,RealmObjectSchema.setClassName() transfers primary key for new class name (#3149) RealmObjectSchema.setClassName() transfers a primary key for a new class name that the renamed class can maintain the old primary key./Redundant addIndex(fieldName) removed (#2917) In RealmObjectSchema.addModifiers() there is a redundant addIndex(fieldName) called before addPrimaryKey(fieldName). This should have been removed at on RealmObjectSchema misses Index addition. (#2832) RealmObjectSchema.addPrimaryKey() is supposed to add a search index to its primary key field but it is currently missing. This is to fix the addition and removal of a search index related to primary key methods in RealmObjectSchema./
,,0.0636,realm-java,Re-add Sync Progress Notifications (#4415)/Fix admin users not connection correctly to ROS (#4760)/
,,0.0652,realm-java,Fix admin users not connection correctly to ROS (#4760)/
,,0.071,rocksdb,Minor fixes found while trying to compile it using clang on Mac OS X/
,,0.08800000000000001,rocksdb,"Merge operator fixes part 1. Summary: null checks and revisions to DBIter::MergeValuesNewToOld() DBIter test to stringappend_test fix with Merge and TTL More plans for fixes later. Test Plan: clean; make stringappend_test 32; ./stringappend_test all check; Reviewers: haobo, emayanke, vamsi, dhruba Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.1407,rocksdb,"[RocksJava] Add compression per level to API Summary: RocksDB offers the possibility to set different compression types on a per level basis. This shall be also available using RocksJava. Test Plan: make rocksdbjava make jtest Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision: 32-Bit adjustments Summary: Before this change overflowing size_t values led to a checked Exception. After that change: size_t overflows on 32-Bit architecture throw now an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly. This is especially an advantage for developers targeting 64-Bit systems because it is not necessary anymore to catch exceptions which are never thrown on a 64-Bit system. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision: JNI Logger callback Summary: Within this commit a new AbstractLogger was introduced which allows to handle log messages at an application level. Log messages are passed up to Java using a JNI callback. This allows a Java-Developer to use common Java APIs for log messages e.g. SLF4J, LOG4J, etc. Within this commit no new dependencies were introduced, which keeps the RocksDB API clean and doesn`t force a developer to use a predefined high-level Java API. Another feature is to dynamically set a custom loggers verbosity at runtime using its public method `setInfoLogLevel` and to retrieve the currently active level using the `infoLogLevel` method. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, ankgup87, yhchiang Subscribers: dhruba Differential Revision: Logging JNI callback Within this commit a new AbstractLogger was introduced which pushes info log messages all the way up to Java./"
,,0.1956,rocksdb,"Refactor to support file_reader_writer on Windows. Summary. A change Has attempted to move common functionality out of platform dependent code to a new facility called file_reader_writer. This includes: perf counters Buffering RateLimiting However, the change did not attempt to refactor Windows code. To mitigate, we introduce new quering interfaces such as UseOSBuffer(), GetRequiredBufferAlignment() and ReaderWriterForward() for pure forwarding where required. Introduce WritableFile got a new method Truncate(). This is to communicate to the file as to how much data it has on close. When space is pre-allocated on Linux it is filled with zeros implicitly, no such thing exist on Windows so we must truncate file on close. When operating in unbuffered mode the last page is filled with zeros but we still want to truncate. Previously, Close() would take care of it but now buffer management is shifted to the wrappers and the file has no idea about the file true size. This means that Close() on the wrapper level must always include Truncate() as well as wrapper __dtor should call Close() and against double Close(). Move buffered/unbuffered write logic to the wrapper. Utilize Aligned buffer class. Adjust tests and implement Truncate() where necessary. Come up with reasonable defaults for new virtual interfaces. Forward calls for RandomAccessReadAhead class to avoid double buffering and locking (double locking in unbuffered mode on WIndows)./Make WinEnv::NowMicros return system time Previous change for the function made use of the QueryPerformanceCounter to return microseconds values that do not repeat as std::chrono::system_clock returned values that made auto_roll_logger_test fail. The interface documentation does not state that we need to return system time describing the return value as a number of microsecs since some moment in time. However, because on Linux it is implemented using gettimeofday various pieces of code (such as GenericRateLimiter) took advantage of that and make use of NowMicros() as a system timestamp. Thus the previous change broke rate_limiter_test on Windows. In addition, the interface name NowMicros() suggests that it is actually a timestamp so people use it as such. This change makes use of the new system call on Windows that returns system time with required precision. This change preserves the fix for auto_roll_logger_test and fixes rate_limiter_test. Note that DBTest.RateLimitingTest still fails due to a separately reported issue./Remove usage of C runtime API that has file handle limitation/"
,,0.1161,rocksdb,Fix a memory leak of Slice objects from org.rocksdb.WBWIRocksIterator#entry1/Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1454,rocksdb,Remove unnessecary java.util.List expense in JNI/Pass by pointer from/to Java from JNI not by object/Improve the speed and synchronization around the construction of Java/JNI objects/Adding support for Windows JNI build/
,,0.1182,rocksdb,Pass by pointer from/to Java from JNI not by object/Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1182,rocksdb,Pass by pointer from/to Java from JNI not by object/Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.126,rocksdb,Remove unnessecary java.util.List expense in JNI/Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1182,rocksdb,Pass by pointer from/to Java from JNI not by object/Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1204,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1204,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1204,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1182,rocksdb,Pass by pointer from/to Java from JNI not by object/Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1182,rocksdb,Pass by pointer from/to Java from JNI not by object/Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1141,rocksdb,Fix a memory leak of Slice objects from org.rocksdb.WBWIRocksIterator#entry1/Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1204,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1204,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1204,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1204,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1161,rocksdb,Fix a memory leak of Slice objects from org.rocksdb.WBWIRocksIterator#entry1/Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1204,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1204,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1204,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1141,rocksdb,Fix a memory leak of Slice objects from org.rocksdb.WBWIRocksIterator#entry1/Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1204,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1183,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.1815,rocksdb,"Remove double buffering on RandomRead on Windows. Summary: Remove double buffering on RandomRead on Windows. With more logic appear in file reader/write Read no longer obeys forwarding calls to Windows implementation. Previously direct_io (unbuffered) was only available on Windows but now is supported as generic. We remove intermediate buffering on Windows. Remove random_access_max_buffer_size option which was windows specific. Non-zero values for that opton introduced unnecessary lock contention. Remove Env::EnableReadAhead(), Env::ShouldForwardRawRequest() that are no longer necessary. Add aligned buffer reads for cases when requested reads exceed read ahead size. Closes Differential Revision: D4847770 Pulled By: siying fbshipit-source-id: 8ab48f8e854ab498a4fd398a6934859792a2788f/"
