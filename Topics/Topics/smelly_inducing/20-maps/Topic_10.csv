Topic_no,Keywords,Contrib,System,Text
10,"pointer, avoid, git_svn, native, load, field, structure, type, read, callback, library, include, provide, miss, branch, make, improve, call, extract, explicitly",0.096,conscrypt,Rename internal SSLParameters to SSLParametersImpl to avoid collision with new javax.net.ssl.SSLParameters Bug: 2672817 Change-Id: Iadf21b848eaf8850fce22721b9ba3739ab2e9fca/
,,0.0949,conscrypt,Support in-memory HTTPS session caching for wrapped sockets. Previously we couldnt reuse sessions with HttpsURLConnection because the host was incorrect (getInetAddress returns null for wrapped sockets) and because the compression method was different (NULL vs. ZLIB). This improves HttpsURLConnection request/response time on localhost from ~275ms to ~145ms (without connection pooling). Change-Id: I97bc343326658690b00589c0c804c2378b91ae61/
,,0.0686,Frostwire,[android] more cleanup in apollo loaders code/
,,0.1084,Frostwire,[android] no need to pass arguments in NetworkManager#isDataWIFIUp/[android] removal of static Context reference in Librarian to avoid memory leaks/
,,0.0673,Frostwire,[android] possible NPE on transfer removal/
,,0.1299,javacpp,"* Added new `Pointer.limit` property, mainly useful to get the `size` of an output parameter, as returned by an adapter specified with the annotation * Renamed the `capacity` field of an adapter to `size` as it now maps to both `Pointer.limit` and `Pointer.capacity` (the latter only for new allocations)/ * Added `Pointer.put(Pointer)` method, the counterpart of `Buffer.put(Buffer)`, to call the native `memcpy()` function on two `Pointer` objects/Initial commit/"
,,0.2227,javacpp,"* Before loading the JNI library, the `Loader` now also tries to extract and load libraries listed in the preload={...})` annotation values, and to support library names with version numbers, each value has to follow the format (or to have `Builder` use it for the compiler as well), where ""version"" is the version number found in the filename as required by the native dynamic linker, usually a short sequence of digits and dots, but it can be anything (e.g.: would map to ""libmylib.so.4.2"", ""libmylib.4.2.dylib"", and ""mylib.4.2.dll"" under Linux, Mac OS X, and Windows respectively) * Stopped using `java.net.URL` as hash key in `Loader` (very bad idea)/ * New `Loader.loadLibrary()` method similar to `System.loadLibrary()`, but before searching the library path, it tries to extract and load the librar * `Generator` now accepts on `FunctionPointer` class declarations * Added new value to cast explicitly the output of a C++ adapter object * Upgraded references of the Android NDK to version r8 * Included new command line option ""-Xcompiler"" to pass options such as ""-Wl,-static"" directly to the compiler * Made other various minor changes and enhancements/Fixed Maven build and Mac OS X `-framework` option (issue and other minor things/Initial commit/"
,,0.18899999999999997,javacpp,"* New `Loader.loadLibrary()` method similar to `System.loadLibrary()`, but before searching the library path, it tries to extract and load the librar * `Generator` now accepts on `FunctionPointer` class declarations * Added new value to cast explicitly the output of a C++ adapter object * Upgraded references of the Android NDK to version r8 * Included new command line option ""-Xcompiler"" to pass options such as ""-Wl,-static"" directly to the compiler * Made other various minor changes and enhancements/Initial commit/"
,,0.1014,javacpp,* `Generator` would ignore `Pointer.position()` in the case of and parameters * Replaced hack to create a `Pointer` from a `Buffer` object with something more standard/ * Fixed `Pointer.equals(null)` throwing `NullPointerException` (issue * would erroneously prevent `sizeof()` operations from getting generated/
,,0.0891,javacpp,* `Generator` would ignore `Pointer.position()` in the case of and parameters * Replaced hack to create a `Pointer` from a `Buffer` object with something more standard/
,,0.2366,javacpp,"* Exported `Loader.isLoadLibraries()`, which always returns true, except when the `Builder` loads the classes * Made it possible to specify a nested class (with a $ character in the name) on the command line * When `Pointer.limit 0`, the methods `put()`, `zero()`, and `asBuffer()` now assume a size of 1/ * Added `Pointer.withDeallocator(Pointer)` method to attach easily a custom `Deallocator` created out of a `static void deallocate(Pointer)` method in the subclass, including native ones such as static void deallocate(Pointer)`/ * Fixed memory corruption when returning by value an `std::vector<>` using an adapter * Added `Pointer.zero()` method that calls `memset(0)` on the range * For easier memory management, more than one `Pointer` now allowed to share the `deallocator` when ""casting"" them/"
,,0.1651,javacpp,"* To help diagnose `UnsatisfiedLinkError` thrown by `Loader.load()`, they have been augmented with a potential cause originating from the ""preloading"" of libraries, whose premature deletion has also been fixed/ * Provided new annotation value to let users specify the name of the native library used by both `Builder` and `Loader`, where different classes with the same name get built together, which also works on nested classes (issue"
,,0.1522,javacpp,"* Upgraded references of the Android NDK to version r9 * Added new `Builder` option ""-copylibs"" that copies into the build directory any dependent shared libraries listed in the preload={...})` annotation * `Loader.getPlatformName()` can now be overridden by setting the `com.googlecode.javacpp.platform.name` system property * Refactored the loading code for into a neat `Loader.ClassProperties` class, among a few other small changes in `Loader`, `Builder`, `Generator`, and the properties/ * Included often used directories such as `/usr/local/include/` and `/usr/local/lib/` to `compiler.includepath` and `compiler.linkpath` default properties * New value lets users specify properties in common on a similarly annotated shared config class of sorts/"
,,0.0802,javacpp,Released version 0.6 * Added new very preliminary `Parser` to produce Java interface files almost automatically from C/C++ header files; please refer to the new JavaCPP Presets subproject for details/
,,0.2009,javacpp,"Released version 0.7 * Tweaked a few things to support RoboVM and target iOS, but `JNI_OnLoad()` does not appear to get called... * Upgraded references of the Android NDK to version r9c * Improved the C++ support of the `Parser` for templates and overloaded operators/ * Made `Loader.load()` work, within reason, even when all annotations and resources have been removed, for example, by ProGuard * Fixed compile error when using a `FunctionPointer` as parameter from outside its top-level enclosing class * The `Parser` now filters tokens appropriately with preprocessor directives * Improved the C++ support of the `Parser` for macros, templates, etc/"
,,0.1614,javacpp,"* Made `Loader.load()` work, within reason, even when all annotations and resources have been removed, for example, by ProGuard * Fixed compile error when using a `FunctionPointer` as parameter from outside its top-level enclosing class * The `Parser` now filters tokens appropriately with preprocessor directives * Improved the C++ support of the `Parser` for macros, templates, etc/"
,,0.1352,javacpp,"* Log when `Pointer.deallocator` gets registered, garbage collected, or deallocated manually, if `Logger.isDebugEnabled()` (redirectable to SLF4J) * Make `Pointer implements AutoCloseable` to let us try-with-resources, thus bumping requirements to Java SE 7 and Android 4.0/Update version in the `pom.xml` file to 1.1-SNAPSHOT * Introduce the concept of ""owner address"" to integrate `Pointer` transparently with `std::shared_ptr`, etc (Thanks to Cyprien Noel for the idea)/ * Add new ""org.bytedeco.javacpp.nopointergc"" system property to prevent `Pointer` from registering deallocators with the garbage collector/"
,,0.1082,javacpp,"* Add new ""org.bytedeco.javacpp.cachedir"" system property to specify where to extract and leave native libraries to share across multiple JVM instances/"
,,0.1016,javacpp,"* Prevent `Generator` from initializing classes when preloading them, which can cause problems (issue bytedeco/javacpp-presets#126)/ * Add logging to `Loader.loadLibrary()` to help diagnose loading problems (issue"
,,0.0815,javacpp,"* Add ""org.bytedeco.javacpp.maxbytes"" system property, forcing a call to `System.gc()` when this amount of memory tracked with deallocators is reached/ * Enhance the `indexer` package with `long` indexing, initially via the `sun.misc.Unsafe`, for now/"
,,0.1085,javacpp,"* Add ""org.bytedeco.javacpp.maxbytes"" system property, forcing a call to `System.gc()` when this amount of memory tracked with deallocators is reached/long pointers/squid:S00108 Nested blocks of code should not be left empty/"
,,0.1237,javacpp,"* Add ""org.bytedeco.javacpp.maxretries"" system property, the number times to call `System.gc()` before giving up (defaults to 10)/ * Deallocate native memory in a dedicated thread to reduce lock contention (issue a bit longer for `System.gc()` to reclaim memory/Add `Pointer.maxBytes()` and `totalBytes()` to monitor amount of memory tracked/"
,,0.1985,javacpp,"* Prevent Android system libraries from getting copied or extracted/ * Fix `IndexerTest` potentially failing with `OutOfMemoryError` (issue bytedeco/javacpp-presets#234) * Preload libraries to work around some cases when they refuse to load once renamed (issue deeplearning4j/libnd4j#235) * Fix compilation error on some `linux-ppc64le` platforms (issue deeplearning4j/libnd4j#232)/* Fix `Loader` crashing on Android (issue bytedeco/javacv#412)/ * Add the ability the specify, after a `#` character, the output filename of libraries extracted by `Loader.load()`/ * Add parameters to `Loader.load()` offering more flexibility over the platform properties and library paths/ * Fix `Loader.load()` error when called right after `Builder.build()` within the same process/"
,,0.1563,javacpp,"* Accelerate call to `Pointer.physicalBytes()` on Linux (issue * Add ""org.bytedeco.javacpp.maxphysicalbytes"" system property to force calls to `System.gc()` based on `Pointer.physicalBytes()` * Allow strings ending with ""t"", ""g"", ""m"", etc to specify the number of bytes in system properties (issue synchronization of memory allocation to avoid `OutOfMemoryError` when low on memory/ * Synchronize memory allocation in `Pointer` when low on memory to avoid `OutOfMemoryError`/"
,,0.0657,javacpp,* Make `Loader` cache libraries (in `~/.javacpp/cache/` by default) instead of using temporary files/
,,0.0802,javacpp,"Update version in the `pom.xml` file to 1.3.2-SNAPSHOT * Make `Pointer.asBuffer()` thread-safe (issue version 1.3/Update version in the `pom.xml` file to 1.3-SNAPSHOT * Print memory sizes in a human-readable format with `Pointer.formatBytes()` * Map standard `malloc()`, `calloc()`, `realloc()`, and `free()` functions (issue"
,,0.2424,javacpp,"* Fix broken `outputDirectory` property and corresponding `-d` command line option (issue * Add `Loader.extractResources()` and `cacheResources()` methods to extract or cache all resources with given name/Update version in the `pom.xml` file to 1.3.1-SNAPSHOT * Fix potential issues with `Parser` repeating the or annotations on parameters * To support Scala singleton objects better, consider as `static` methods from objects that are not `Pointer` * Allow `Loader.extractResource()` and `cacheResource()` to extract or cache all files from a directory in a JAR file * Create version-less symbolic links to libraries in cache on those platforms where it is useful to link easily * Use `java.io.tmpdir` as fallback in `Loader.getCacheDir()`, and throw a clear exception on failure/Release version 1.2.7 * Fix `Loader` errors that could occur due to recent changes/ * Improve `Loader` handling of duplicate libraries found in different JAR files using symbolic links (useful for MKL, etc)/ * Prevent `Loader` from overwriting previously extracted and renamed libraries (issue deeplearning4j/nd4j#1460)/"
,,0.0833,javacpp,* Let `Pointer` log debug messages when forced to call `System.gc()`/
,,0.1427,javacpp,"* Prevent `Loader` from loading system libraries, which causes problems on Android 7.x (issue bytedeco/javacv#617)/ * Avoid `Loader` issues with spaces, etc in paths to library files (issue deeplearning4j/nd4j#1564)/"
,,0.11900000000000001,javacpp,* Make public the `Pointer.formatBytes()` and `Pointer.parseBytes()` static methods/ * Fix potential formatting issues with `OutOfMemoryError` thrown from `Pointer`/
,,0.0946,javacpp,"* Prevent race condition that could occur in `Loader.cacheResource()` (pull * Let users bundle arbitrary resources, have them extracted in cache, and used as `include` or `link` paths (pull"
,,0.13699999999999998,javacpp,* Try to use symbolic links in `Loader.load()` for output filenames specified with the `#` character (useful for libraries like MKL)/
,,0.1626,javacpp,* Create symbolic links to libraries preloaded by `Loader` as needed on Mac for renamed libraries/ * Fix potential race conditions and various issues with `Loader` that could prevent libraries like MKL from working properly/
,,0.1193,javacpp,"* Synchronize `Loader.loadLibrary()` to fix potential race condition (pull * Fall back on Android-friendly `System.loadLibrary()` in `Loader.load()` instead of ""java.library.path"" (issue bytedeco/javacv#970)/"
,,0.1164,javacpp,"* Add `Loader.getLoadedLibraries()` method for debugging purposes and fix flaky `BuilderTest` (issue * Call `PointerScope.attach()` as part of `Pointer.deallocator()`, instead of `init()`, to support custom deallocators as well * Prevent `Parser` from appending annotations to setter methods of variables to satisfy the `Generator`/"
,,0.0867,javacpp,* Add `Loader.loadGlobal()` to load symbols globally as often required by Python libraries (issue ContinuumIO/anaconda-issues#6401)/
,,0.066,javacpp,Clarify what values of 0 or less mean for `Pointer.maxBytes` and `maxPhysicalBytes`/
,,0.4363,jna,"Fix wchar_t* return when null Allow Pointer[] as function argument Fix window utils test on osx to avoid os-cast shadows git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable callback return values (e.g. sig_t signal(int sig, sig_t f)) Move native function proxy wrapping to CallbackReference from Structure git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Start on issue Main thing I wanted to do was get the second parameter to ToNativeConverter.toNative() in there so we dont have future API breakage by adding it later. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Revert r266 Integer.valueOf() and friends are 1.5+ features, so it breaks 1.4 support git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Pass the Method of the Library subclass that invoked the Function, to the FromNativeConverter. Also optimized the code in Library.Handler so only one Map lookup per function invoke is needed. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Clean up varargs Add per-field Structure read/write Avoid automatic writes to volatile structure fields Read/wrap function pointers in Structure fields Disallow Memory/Function as declared Structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Use libffi instead of custom assembly (tested for darwin (universal), linux-i386, win32-x86 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.36700000000000005,jna,Provide explicit dispose on NativeLibrary Cache NativeMappedConverter instances for improved performance Preliminary support for wince (improve backwards compatibility for older VMs) Provide synch after call interface for arguments that need to perform some sort of synchronization after a native call git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow array of struct by reference as argument Pretty-print structure info in toString git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Provide for tweaking of invocation handling between interface and native Add test for annotation preservation in proxy methods Add explicit global variable lookup Add utility method to determine Web Start native library location git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/implement struct by value add missing Pointer char function git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0912,jna,add more return types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1022,jna,"Pass the Method of the Library subclass that invoked the Function, to the FromNativeConverter. Also optimized the code in Library.Handler so only one Map lookup per function invoke is needed. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.2106,jna,Provide for tweaking of invocation handling between interface and native Add test for annotation preservation in proxy methods Add explicit global variable lookup Add utility method to determine Web Start native library location git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2134,jna,"use long offsets and sizes for pointer arithmetic git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/make memory share public git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0778,jna,provide memory alignment to Memory if requested git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.4151,jna,"Dont keep a strong reference to the library proxy Keep a mapping for the proxy on calls to loadLibrary Dont fail if no alpha on shaped window demo Clean up a few comments git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Clean up temp files on w32 Avoid empty paths in search list Add canonical out-of-date jar Clean up ant build script targets git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/extract integer type with platform-specific size remove temporary file suffix altogether git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Clean up varargs Add per-field Structure read/write Avoid automatic writes to volatile structure fields Read/wrap function pointers in Structure fields Disallow Memory/Function as declared Structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Copy issue fix from v3 branch git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.4754,jna,"Provide explicit dispose on NativeLibrary Cache NativeMappedConverter instances for improved performance Preliminary support for wince (improve backwards compatibility for older VMs) Provide synch after call interface for arguments that need to perform some sort of synchronization after a native call git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix JNLP class loader method lookup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix bug in stdcall function mapping when using struct by value Defer size_t/off_t definition, for now git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate Structure.ByReference reads Cache native library options as well as alignments/type mappers Ensure library options are passed to callbacks Add protection around remaining Pointer read/write calls Consolidate wide character reads/writes Avoid stack overflow reading self-referential structures or loops More prettification of Structure.toString Add size_t/off_t standard types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/reinstate w32 JAWT workaround; tests work without it, but demo code doesnt git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Provide for tweaking of invocation handling between interface and native Add test for annotation preservation in proxy methods Add explicit global variable lookup Add utility method to determine Web Start native library location git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add a hack for OpenJDK (Soylatte) on macosx System.mapLibraryName() returns a .dylib extension now, not .jnilib. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Use simpler workaround for loading AWT/JAWT on X11-based platforms git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0861,jna,improve package/version information in code and manifest git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/enable ibm j9 build/run git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2245,jna,Allow arbitrary callback method names Allow specification of callback type mapper with TYPE_MAPPER Allow write with uninitialized boxed primitives in Structure Fix memory leak with callbacks called from native threads w/no java context Fix Structure derived classes to allow setting TypeMapper git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.3943,jna,"use long offsets and sizes for pointer arithmetic git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Dont try to use the library extension as the suffix. System.load() doesnt appear to care what the library you tell it to load is called. Could be a possible source of why it wont load on multi-byte charsets under windows. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Use libffi instead of custom assembly (tested for darwin (universal), linux-i386, win32-x86 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.4509,jna,Consolidate structure ffi type info initialization and avoid premature GC Enable union by-value by using largest fields type info Explicitly throw IllegalArgument on bad type info Throw IllegalState on missing type info Explicitly write version/md5 info into Makefile from ant (to avoid platform-specific variances in sed) Make Structure.ByValue/ByReference public to allow client code comparisons Consolidate Structure field get/set operations Avoid extra Pointer peer lookup from native code (wmeissner) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/implement struct by value add missing Pointer char function git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.3744,jna,Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow Pointer[] as field in Structure Clean up error messages when Structure size calculation fails git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Clean up varargs Add per-field Structure read/write Avoid automatic writes to volatile structure fields Read/wrap function pointers in Structure fields Disallow Memory/Function as declared Structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.6154,jna,Improve test output git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix bug in STructure.toArray w/nested struct arrays git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Ensure initialized nested structure arrays use the right memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Improve error messages when illegal argument/return types are used git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate Structure.ByReference reads Cache native library options as well as alignments/type mappers Ensure library options are passed to callbacks Add protection around remaining Pointer read/write calls Consolidate wide character reads/writes Avoid stack overflow reading self-referential structures or loops More prettification of Structure.toString Add size_t/off_t standard types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix NPE when sizing struct with a struct array field git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow array of struct by reference as argument Pretty-print structure info in toString git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix VM crash running test under linux-amd64 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Properly handle default boolean mapping (int) in Structure read/write Provide Pointer.share(offset) (allow omission of size) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate structure ffi type info initialization and avoid premature GC Enable union by-value by using largest fields type info Explicitly throw IllegalArgument on bad type info Throw IllegalState on missing type info Explicitly write version/md5 info into Makefile from ant (to avoid platform-specific variances in sed) Make Structure.ByValue/ByReference public to allow client code comparisons Consolidate Structure field get/set operations Avoid extra Pointer peer lookup from native code (wmeissner) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/implement struct by value add missing Pointer char function git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1121,jna,Allow final modifier in Structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix NPE when using NativeMapped within Structure ( git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1511,jna,auto-write Structure.ByReference fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0849,jna,struct/union improvements git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1361,jna,"ensure JNA library can be unloaded git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix stdcall callbacks catch all exceptions when invoking callback git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Use libffi instead of custom assembly (tested for darwin (universal), linux-i386, win32-x86 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.4379,jna,"ensure JNA library can be unloaded git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix indexOf return value git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/use long offsets and sizes for pointer arithmetic git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Remove unused locals git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Use libffi instead of custom assembly (tested for darwin (universal), linux-i386, win32-x86 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.6054,jna,"allocate minimal space for invocation args, instead of MAX_NARGS git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/update project files (netbeans/eclipse) use setjmp/longjmp to recover from w32 faults instead of simply setting SP embed version resource information in w32 dll dont update last error if ffi_call faults git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate Structure.ByReference reads Cache native library options as well as alignments/type mappers Ensure library options are passed to callbacks Add protection around remaining Pointer read/write calls Consolidate wide character reads/writes Avoid stack overflow reading self-referential structures or loops More prettification of Structure.toString Add size_t/off_t standard types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate structure ffi type info initialization and avoid premature GC Enable union by-value by using largest fields type info Explicitly throw IllegalArgument on bad type info Throw IllegalState on missing type info Explicitly write version/md5 info into Makefile from ant (to avoid platform-specific variances in sed) Make Structure.ByValue/ByReference public to allow client code comparisons Consolidate Structure field get/set operations Avoid extra Pointer peer lookup from native code (wmeissner) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/defer AWT toolkit initialization until actual JAWT use Make w32 dynamically load JAWT to avoid forcing toolkit init on JNA load git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Embed version and checksum into native library Print version information for java jna.jar git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Avoid error loading JAWT when running headless Use primary colors in window shape test (Dan) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/implement struct by value add missing Pointer char function git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1,jna,Use UTF8 encoding for OSX library names git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1038,jna,merge win64 branch git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2668,jna,"Add explicit check for correct stdcall stack pointer git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Ensure TCHAR*[] gets encoded properly on w32, wchar_t*[] on others git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable callback return values (e.g. sig_t signal(int sig, sig_t f)) Move native function proxy wrapping to CallbackReference from Structure git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0823,jna,implement struct by value add missing Pointer char function git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1982,jna,Dont keep a strong reference to the library proxy Keep a mapping for the proxy on calls to loadLibrary Dont fail if no alpha on shaped window demo Clean up a few comments git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.174,jna,Show drop shadow on OSX BalloonManager Fix NPE on OSX BalloonManager git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1557,jna,Fix OSX window transparency for 1.5+/Leopard git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow window masks to be set on heavyweight components (at least on w32 and x11) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Improve transparent window drawing performance on w32 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0879,jna,fix bug where struct is incorrectly passed by value instead of by reference git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1197,jna,Fix cursor tracking on alpha-masked windows git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Work around OSX transparent window dragging bug git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2146,jna,"Fix wchar_t* return when null Allow Pointer[] as function argument Fix window utils test on osx to avoid os-cast shadows git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Ensure TCHAR*[] gets encoded properly on w32, wchar_t*[] on others git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1121,jna,Allow array of struct by reference as argument Pretty-print structure info in toString git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.261,jna,Allow arbitrary callback method names Allow specification of callback type mapper with TYPE_MAPPER Allow write with uninitialized boxed primitives in Structure Fix memory leak with callbacks called from native threads w/no java context Fix Structure derived classes to allow setting TypeMapper git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/merge win64 branch git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0801,jna,implement struct by value add missing Pointer char function git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2717,jna,"Fix wchar_t* return when null Allow Pointer[] as function argument Fix window utils test on osx to avoid os-cast shadows git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Clean up tests git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1064,jna,add missing import git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/make color-checking on OSX more robust git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.4001,jna,"Allow lookup of OSX framework libraries by name git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fixup library searching for 32bit VM on 64bit OS scenarios git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Copy fix for issue from v3 branch git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.442,jna,Add explicit test for matching linux versioned libs git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Provide explicit dispose on NativeLibrary Cache NativeMappedConverter instances for improved performance Preliminary support for wince (improve backwards compatibility for older VMs) Provide synch after call interface for arguments that need to perform some sort of synchronization after a native call git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Provide for tweaking of invocation handling between interface and native Add test for annotation preservation in proxy methods Add explicit global variable lookup Add utility method to determine Web Start native library location git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0677,jna,"Check entire linux version, not just last digit git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.2757,jna,"Fix stdcall callbacks catch all exceptions when invoking callback git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable callback return values (e.g. sig_t signal(int sig, sig_t f)) Move native function proxy wrapping to CallbackReference from Structure git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Revert r266 Integer.valueOf() and friends are 1.5+ features, so it breaks 1.4 support git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Use libffi instead of custom assembly (tested for darwin (universal), linux-i386, win32-x86 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.4693,jna,Consolidate Structure.ByReference reads Cache native library options as well as alignments/type mappers Ensure library options are passed to callbacks Add protection around remaining Pointer read/write calls Consolidate wide character reads/writes Avoid stack overflow reading self-referential structures or loops More prettification of Structure.toString Add size_t/off_t standard types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/implement struct by value add missing Pointer char function git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0702,jna,improve w32 window masking git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.066,jna,"Fix bug in stdcall function mapping when using struct by value Defer size_t/off_t definition, for now git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.4496,jna,Allow array of struct by reference as argument Pretty-print structure info in toString git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate structure ffi type info initialization and avoid premature GC Enable union by-value by using largest fields type info Explicitly throw IllegalArgument on bad type info Throw IllegalState on missing type info Explicitly write version/md5 info into Makefile from ant (to avoid platform-specific variances in sed) Make Structure.ByValue/ByReference public to allow client code comparisons Consolidate Structure field get/set operations Avoid extra Pointer peer lookup from native code (wmeissner) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2281,jna,Provide explicit dispose on NativeLibrary Cache NativeMappedConverter instances for improved performance Preliminary support for wince (improve backwards compatibility for older VMs) Provide synch after call interface for arguments that need to perform some sort of synchronization after a native call git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0813,jna,Fix NPE in NativeMappedConverter git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix NPE when using NativeMapped within Structure ( git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.066,jna,"Fix bug in stdcall function mapping when using struct by value Defer size_t/off_t definition, for now git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1038,jna,merge win64 branch git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1237,pljava,"There can be reasons to explicitly include directories in jars, and to extract them even if they are empty, so JarX and Build now permit that./Using the ZipFile enumeration in extract(String) was a crock. The enumeration comes back in hashed order, the resulting seek time is atrocious, and on a large enough jar, the oh-so-reliable ZipFile would eventually just barf. Now we open the file twice, the second time as a ZipInputStream. Its more reliable and faster, though it does introduce assumptions about the file being a regular file, still there when we try to open it the second time, etc. Sure would be nice if ZipFile worked better./Initial commit./"
,,0.0609,pljava,Updated to Java7 and clang for Mac OS X Mavericks/
,,0.0588,pljava,Updated to Java7 and clang for Mac OS X Mavericks/
,,0.063,pljava,Updated to Java7 and clang for Mac OS X Mavericks/
,,0.1183,pljava,"Workaround Windows creating_extension visibility. Should now detect (in most cases?) when an extension is being created, even in versions where creating_extension isnt visible in Windows. Test depends on seeing the command in ActivePortal; I am not sure what contexts could be contrived where that wouldnt work right, but ordinary foreseeable cases seem to work. Got rid of pljavaInExtension: the idea that two cases have to be distinguished (loading PL/Java itself as an extension, or using it in the creation of some other extension) was sound, but the second case isnt something that can be checked once at load time; it needs a backend function that sqlj.install_jar can invoke whenever needed./"
,,0.1827,pljava,"Make create-extension-didnt message clearer. The only error message resulting from a CREATE EXTENSION attempt that failed (because the library had been loaded before in the session, therefore LOAD was a no-op) is one about a table that already exists. But the name of the table appears in the error message, so the table may as well be named ""see doc: do CREATE EXTENSION PLJAVA in new session"" which may serve to get the point across./Rework extension wrappers slightly. Instead of different ad-hoc ways of detecting the already-LOADed no-op issue for different CREATE EXTENSION cases, have the LOAD- invoked code always drop the loadpath table, so all extension scripts can use the same approach to force an error if it didnt happen./"
,,0.0699,pljava,"Keep making DEBUG1 quieter. These sites were missed in commit 1eb3bd8, trying to get the PL/Java-loaded-versions announcement to be the only thing at DEBUG1./"
,,0.0738,realm-java,"added count(), lookup() metods. Added simple performance test/"
,,0.0701,realm-java,Renamed class util to Util./Fixed initialisation to be threadsafe. Updated load of library file for Windows (must look into this again later created Asana task)./
,,0.0706,realm-java,moved check to java and changed to illegalArgument exception/added parent object to view and query. Now sets ptr to 0 in synchronized block/
,,0.0852,realm-java,Printing location of error/Move C++ Java exception mapping to a function/More debug info when converting a string from to Java fails./Revert the support for lenient UTF conversion/Fix for: Lenient UTF-8 UTF-16 transcoding (insert replacement characters)/Lenient UTF-8 UTF-16 transcoding (insert replacement characters)/Catching standard exceptions./Adding better error messages when converting to Java string/Use to_jstring() everywhere at the JNI layer./
,,0.0639,realm-java,Queries on links can be case sensitive./
,,0.3067,realm-java,Merge remote-tracking branch origin/master into kneth/object-store/results/BYE BYE finalizer (#3144) NativeObject Interface * NativeObject is an interface now. The implementation should supply a function to return a native deallocator pointer as well. * NativeObjectReference doesnt necessarily to know the pointer type anymore since it can always get a pointer to the deallocator function. Use phantom reference and daemon thread to replace finalizer for destruct native objects. * The phantom reference pool is implemented as a linked list which suppose to be fast insertion/removal. * A daemon thread is created to monitor and free all phantom reference. * Delayed disposal before native object creation is not needed any more. * SharedGroup still gets freed in the caller thread with a lock on context. * Native object needs to pass a destruction function pointer in addition to the native object pointer./
,,0.3088,realm-java,BYE BYE finalizer (#3144) NativeObject Interface * NativeObject is an interface now. The implementation should supply a function to return a native deallocator pointer as well. * NativeObjectReference doesnt necessarily to know the pointer type anymore since it can always get a pointer to the deallocator function. Use phantom reference and daemon thread to replace finalizer for destruct native objects. * The phantom reference pool is implemented as a linked list which suppose to be fast insertion/removal. * A daemon thread is created to monitor and free all phantom reference. * Delayed disposal before native object creation is not needed any more. * SharedGroup still gets freed in the caller thread with a lock on context. * Native object needs to pass a destruction function pointer in addition to the native object pointer./
,,0.3065,realm-java,BYE BYE finalizer (#3144) NativeObject Interface * NativeObject is an interface now. The implementation should supply a function to return a native deallocator pointer as well. * NativeObjectReference doesnt necessarily to know the pointer type anymore since it can always get a pointer to the deallocator function. Use phantom reference and daemon thread to replace finalizer for destruct native objects. * The phantom reference pool is implemented as a linked list which suppose to be fast insertion/removal. * A daemon thread is created to monitor and free all phantom reference. * Delayed disposal before native object creation is not needed any more. * SharedGroup still gets freed in the caller thread with a lock on context. * Native object needs to pass a destruction function pointer in addition to the native object pointer./
,,0.2788,realm-java,Use getTargetTable to build query on linkview otherwise RealmQueryTests.findFirst() will fail because it compares the row with the tables name first./Move TableOrView.NO_MATCH to Table/BYE BYE finalizer (#3144) NativeObject Interface * NativeObject is an interface now. The implementation should supply a function to return a native deallocator pointer as well. * NativeObjectReference doesnt necessarily to know the pointer type anymore since it can always get a pointer to the deallocator function. Use phantom reference and daemon thread to replace finalizer for destruct native objects. * The phantom reference pool is implemented as a linked list which suppose to be fast insertion/removal. * A daemon thread is created to monitor and free all phantom reference. * Delayed disposal before native object creation is not needed any more. * SharedGroup still gets freed in the caller thread with a lock on context. * Native object needs to pass a destruction function pointer in addition to the native object pointer./
,,0.0686,realm-java,Rename Context to NativeContext (#4597)/
,,0.0664,realm-java,Rename Context to NativeContext (#4597)/
,,0.0897,rocksdb,"[Java] Correct the library loading for zlib in RocksJava. Summary: Correct the library loading for zlib in RocksJava: zlib should be loaded by loadLibrary(""z"") instead of loadLibrary(""zlib""). Test Plan: make rocksdbjava cd java make db_bench ./jdb_bench.sh Reviewers: sdong, ljin, ankgup87 Reviewed By: ankgup87 Subscribers: leveldb Differential Revision: Enable compression_ratio option in DbBenchmark.java Summary: Enable the random values in Java DB Bench to be generated based on the compression_ratio specified in the command-line arguments. Test Plan: make rocksdbjava java/jdb_bench.sh Reviewers: sdong, ankgup87, haobo Reviewed By: haobo Subscribers: leveldb Differential Revision:"
,,0.1038,rocksdb,"Adjustment to NativeLibraryLoader to allow native library to be loaded from either java.library.path or from extracting from the Jar. Means that the test in the build do not need to rely on the Jar, useful when creating similar builds (and executing tests) from Maven/Make sure to use the correct Java classloader for loading the RocksDB Native Library/Minor tidyup and use Java 7 for file copying/"
,,0.1082,rocksdb,"Provide an option so that SST ingestion wont fall back to copy after hard linking fails (#5333) Summary: RocksDB always tries to perform a hard link operation on the external SST file to ingest. This operation can fail if the external SST resides on a different device/FS, or the underlying FS does not support hard link. Currently RocksDB assumes that if the link fails, the user is willing to perform file copy, which is not true according to the post. This commit provides an option named failed_move_fall_back_to_copy for users to choose which behavior they want. Pull Request resolved: Differential Revision: D15457597 Pulled By: HaoyuHuang fbshipit-source-id: f3626e13f845db4f7ed970a53ec8a2b1f0d62214/"
