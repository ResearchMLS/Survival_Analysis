Topic_no,Keywords,Contrib,System,Text
9,"call, check, error, create, fail, reference, instance, implement, pass, lock, empty, object, result, run, case, free, thread, issue, generate, change",0.1674,conscrypt,"Fix OpenSSLSessionImpl.getCreationTime and getLastAccessedTime. This addresses one part of this abandoned change from ursg: Ive also tidied up the native method names to use the harmony ""-Impl"" convention, removed useless methods that just forward to a native method, and removed dead code. Ive canonicalized some of the duplication too, but I want to go through the rest of out OpenSSL code before I really start trying to remove the duplication. When this is submitted, Ill fix the other (unrelated) bug the abandoned change addressed./"
,,0.0965,conscrypt,"Stop allocating empty arrays. Bug: 3166662 Change-Id: I151de373b2bf53786d19824336fa434c02b0b0e8/CloseGuard: finalizers for closeable objects should log complaints Introducing CloseGuard which warns when resources are implictly cleaned up by finalizers when an explicit termination method, to use the Effective Java ""Issue 7: Avoid finalizers"" terminology, should have been used by the caller. libcore classes that can use CloseGuard now do so. Bug: 3041575 Change-Id: I4a4e3554addaf3075c823feb0a0ff0ad1c1f6196/Use BufferedInputStream when reading cacerts.bks Change-Id: Ibc20bdcadb5c3bc4bcebfeb96b10c42d9c05e7c8/"
,,0.1009,conscrypt,"Conscrypt: use certificate references in SSL code Instead of marshalling and unmarshalling to ASN.1 DER, just use references to OpenSSL X509 objects everywhere applicable. Change-Id: I1a28ae9232091ee199a9d4c7cd3c7bbd1efa1ca4/"
,,0.2522,conscrypt,"Conscrypt: use certificate references in SSL code Instead of marshalling and unmarshalling to ASN.1 DER, just use references to OpenSSL X509 objects everywhere applicable. Change-Id: I1a28ae9232091ee199a9d4c7cd3c7bbd1efa1ca4/Conscrypt: remove dependence on stlport This helps with unbundling of Conscrypt by not forcing the app to include a static version of stlport in their program. Change-Id: I5bd17213059b8ae4d8d86921d82b43465253a62f/Properly refcount X509 instances We were leaking X509 references from stacks before so we could get away with reusing references that should have been freed. Since were properly tracking references now, we need to up the reference of things were using. (cherry picked from commit 499f7cd642cc32f89f793fe356afbebeba8bf9c1) Bug: 10610037 Change-Id: I4a4beda9b635881c51194410a6da8274c3c1d429/Fix BIO_OutputStream::write to return the correct length. This was leaving bad OpenSSL error states lying around for later innocent calls to trip over. Also clean up some of the other error reporting/handling. Bug: 9822466 Bug: 10344304 Change-Id: I9e6d6fd9a6c5e466336217b47f45c211aff5555d/Fix libcores NativeCode.mk so we actually compile with Change-Id: Ib665ea7c6f54e43851bc04f0265e65218407c70f/"
,,0.1083,conscrypt,"Conscrypt: use certificate references in SSL code Instead of marshalling and unmarshalling to ASN.1 DER, just use references to OpenSSL X509 objects everywhere applicable. Change-Id: I1a28ae9232091ee199a9d4c7cd3c7bbd1efa1ca4/"
,,0.1204,conscrypt,"Tidy up locking in OpenSSLSocketImpl. We guard all state with a single lock ""stateLock"", which replaces usages of ""this"" and ""handshakeLock"". We do not perform any blocking operations while holding this lock. In particular, startHandshake is no longer synchronized. We use a single integer to keep track of handshake state instead of a pair of booleans. Also fix a bug in getSession, the previous implementation wouldnt work in cut-through mode. This fixes a deadlock in SSLSocketTest_interrupt. Change-Id: I9aef991e0579d4094e287dde8e521d09d6468c51/Conscrypt: use certificate references in SSL code Instead of marshalling and unmarshalling to ASN.1 DER, just use references to OpenSSL X509 objects everywhere applicable. Change-Id: I1a28ae9232091ee199a9d4c7cd3c7bbd1efa1ca4/Some cleanup while investigating test_SSLSocket_interrupt Bug: 10681815 Change-Id: If9a76f4c55b578c6f135befebcc443ab9aef3073/"
,,0.4093,conscrypt,"Add OpenSSLEngineImpl Add support for SSLEngine via OpenSSL APIs. Currently this supports just the basic SSLEngine functionality. It can be improved in efficiency and performance, but it appears not to leak anything and be correct according to our test suites. Change-Id: Iea2dc3922e7c30e26daca38361877bd2f88ae668/Refactor OpenSSLSocketImpl Move functionality that will be shared with OpenSSLs SSLEngine implementation out of OpenSSLSocketImpl and into the (soon-to-be) shared SSLParametersImpl. The functionality should stay the same. Change-Id: If8faa3ad2c9c73c0a0cd4b9716639b362b2b26a1/Convert calls to BIO_free to BIO_free_all If we have a chain of BIO, we want to free the entire chain. Otherwise, we might accidentally leave references sitting around. This shouldnt matter for our current use-case, but might help in the future. Change-Id: I586937629e1e4f2e80b5feefe2f49a85e8a31d31/ALPN: change socket calls to SSL_set_alpn_protos Calling SSL_CTX_set_alpn_protos appears to be detrimental to thread safety since the implementation of it resets the values. Its not idempotent to call it multiple times like SSL_CTX_enable_npn. Bug: Change-Id: I09ed9e75d08528300b86201c3e847b26702d4284/Use the new endpointVerificationAlgorithm API Use the new X509ExtendedTrustManager and use the new getEndpointVerificationAlgorithm to check the hostname during the handshake. Bug: 13103812 Change-Id: Id0a74d4ef21a7d7c90357a111f99b09971e535d0/Fix up concurrent use of APIs Code that is incorrectly using MessageDigest, Signature, or Mac in multiple threads simultaneously could cause a SEGV if OpenSSL is clearing out the MD_CTX at the same time another thread is trying to write to it. Make sure we initialize a new MD_CTX after each run to avoid crashing. The program using the instances concurrently is still wrong and will most likely get inconsistent results. Switch to using a context object instance to make sure we can hold a reference to the object during the native call. Bug: 8787753 Change-Id: I2518613a47cf03c811a29d17040804fc708394dd/Throw instead of segfaulting when NULL EVP_PKEY encountered. Change-Id: Idba6702dd43e541b51c990fc3440a17351e6def9/NativeCrypto: Handle 0-byte bignum arrays Some DSA tests were calling with bignum arrays that had the high bit set indicating a negative number. Also an empty array was being passed as another part of the test. This was working, but it was reading one byte past the end of the buffer. Change-Id: Ibd5a0dce61703ea569fd483f8acf66fd149703f8/"
,,0.4178,conscrypt,"Make AppData creation symmetric AppData was being created in SSL_do_handshake, but freed in SSL_free. Make it symmetric by creating AppData in SSL_new instead. The SSLEngine may call do_handshake multiple times to complete a handshake, but this was creating an AppData each time it entered. Creating in SSL_new avoids the problem of checking whether it was already created on each entry into SSL_do_handshake calls. Bug: 14247219 Change-Id: I825486798250998a4d4141201bda68a4dffe13a4/Add OpenSSLEngineImpl Add support for SSLEngine via OpenSSL APIs. Currently this supports just the basic SSLEngine functionality. It can be improved in efficiency and performance, but it appears not to leak anything and be correct according to our test suites. Change-Id: Iea2dc3922e7c30e26daca38361877bd2f88ae668/ALPN: change socket calls to SSL_set_alpn_protos Calling SSL_CTX_set_alpn_protos appears to be detrimental to thread safety since the implementation of it resets the values. Its not idempotent to call it multiple times like SSL_CTX_enable_npn. Bug: Change-Id: I09ed9e75d08528300b86201c3e847b26702d4284/Add JNI_TRACE_MD to cut down on noise During start-up of vogar, it does thousands of digests on the input class files which makes the output really noisy. Since debugging MD stuff is uncommon, just hide it behind another debug flag. Change-Id: I972a1b61c6ffe2d4cc345b089f0be10751ea32e4/Throw SSLHandshakeException for errors during handshake This is a subclass of SSLHandshake, so its not technically any different, but more sophisticated clients use this to differentiate between a failure during handshake and a general SSL failure. Bug: 13130968 Change-Id: Ifad026c9af6748c1f7cb6a75f8f49aa3e75deea8/Return SSL_TLSEXT_ERR_NOACK with no NPN/ALPN We were returning SSL_TLSEXT_ERR_OK even if we did not select any NPN/ALPN support. Bug: Change-Id: I79ea821512f03f1391247d3bcfc7ac7d042ecb41/Fix up concurrent use of APIs Code that is incorrectly using MessageDigest, Signature, or Mac in multiple threads simultaneously could cause a SEGV if OpenSSL is clearing out the MD_CTX at the same time another thread is trying to write to it. Make sure we initialize a new MD_CTX after each run to avoid crashing. The program using the instances concurrently is still wrong and will most likely get inconsistent results. Switch to using a context object instance to make sure we can hold a reference to the object during the native call. Bug: 8787753 Change-Id: I2518613a47cf03c811a29d17040804fc708394dd/Throw ArrayIndexOutOfBoundsException instead of generic This exception is specifically for arrays which is what were dealing with here. Change-Id: I11be2c75019844701b305240152815d7c610fbef/Harden (EC)DSA signatures against weak nonces. Private key information is leaked by (EC)DSA signatures when nonces are produced by a weak RNG. This CL enables a mitigation provided by OpenSSL: mix in private key and message being signed into randomly generated nonce. Provided private key was generated by strong RNG, this should mitigate the weakness. NOTE: This mitigation is not implemented for signatures which use hardware-backed private keys (AndroidKeyStore). Change-Id: I60dbf57bff3cfcdcbbeb18be5d9dfba523cc6bb8/Throw instead of segfaulting when NULL EVP_PKEY encountered. Change-Id: Idba6702dd43e541b51c990fc3440a17351e6def9/BIGNUM convert to Java BigInteger Java BigInteger is in twos complement, so it needs conversion for negative numbers. We were mishandling it before and the previous change just hacked around it. Actually convert to twos complement instead. Change-Id: I6bfe9577f0936678476193b55433b7d7dbc04400/"
,,0.4195,conscrypt,"Fix up concurrent use of APIs Code that is incorrectly using MessageDigest, Signature, or Mac in multiple threads simultaneously could cause a SEGV if OpenSSL is clearing out the MD_CTX at the same time another thread is trying to write to it. Make sure we initialize a new MD_CTX after each run to avoid crashing. The program using the instances concurrently is still wrong and will most likely get inconsistent results. Switch to using a context object instance to make sure we can hold a reference to the object during the native call. Bug: 8787753 Change-Id: I2518613a47cf03c811a29d17040804fc708394dd/Harden (EC)DSA signatures against weak nonces. Private key information is leaked by (EC)DSA signatures when nonces are produced by a weak RNG. This CL enables a mitigation provided by OpenSSL: mix in private key and message being signed into randomly generated nonce. Provided private key was generated by strong RNG, this should mitigate the weakness. NOTE: This mitigation is not implemented for signatures which use hardware-backed private keys (AndroidKeyStore). Change-Id: I60dbf57bff3cfcdcbbeb18be5d9dfba523cc6bb8/Late binding: convert OpenSSLSignature to late binding You must be a child of SignatureSpi to do late binding correctly. Also remove useless test. Change-Id: I4190ec919ad0eca9f344a2d7ac4c03216dccab55/OpenSSLSignature: refactor key checking Use OpenSSLKey to do the conversions from different key types. Change-Id: Ie89730bba983cb5f2917fed7194e8b08562f6e16/"
,,0.4818,conscrypt,"SSLEngine: fix some behaviors * We were not checking buffer lengths. * wrap/unwrap should start a handshake. Change-Id: I35fbd8bf5eb699923f4712e7590bce7e7e13e529/Add OpenSSLEngineImpl Add support for SSLEngine via OpenSSL APIs. Currently this supports just the basic SSLEngine functionality. It can be improved in efficiency and performance, but it appears not to leak anything and be correct according to our test suites. Change-Id: Iea2dc3922e7c30e26daca38361877bd2f88ae668/Convert calls to BIO_free to BIO_free_all If we have a chain of BIO, we want to free the entire chain. Otherwise, we might accidentally leave references sitting around. This shouldnt matter for our current use-case, but might help in the future. Change-Id: I586937629e1e4f2e80b5feefe2f49a85e8a31d31/ALPN: change socket calls to SSL_set_alpn_protos Calling SSL_CTX_set_alpn_protos appears to be detrimental to thread safety since the implementation of it resets the values. Its not idempotent to call it multiple times like SSL_CTX_enable_npn. Bug: Change-Id: I09ed9e75d08528300b86201c3e847b26702d4284/Use the new endpointVerificationAlgorithm API Use the new X509ExtendedTrustManager and use the new getEndpointVerificationAlgorithm to check the hostname during the handshake. Bug: 13103812 Change-Id: Id0a74d4ef21a7d7c90357a111f99b09971e535d0/Fix up concurrent use of APIs Code that is incorrectly using MessageDigest, Signature, or Mac in multiple threads simultaneously could cause a SEGV if OpenSSL is clearing out the MD_CTX at the same time another thread is trying to write to it. Make sure we initialize a new MD_CTX after each run to avoid crashing. The program using the instances concurrently is still wrong and will most likely get inconsistent results. Switch to using a context object instance to make sure we can hold a reference to the object during the native call. Bug: 8787753 Change-Id: I2518613a47cf03c811a29d17040804fc708394dd/Harden (EC)DSA signatures against weak nonces. Private key information is leaked by (EC)DSA signatures when nonces are produced by a weak RNG. This CL enables a mitigation provided by OpenSSL: mix in private key and message being signed into randomly generated nonce. Provided private key was generated by strong RNG, this should mitigate the weakness. NOTE: This mitigation is not implemented for signatures which use hardware-backed private keys (AndroidKeyStore). Change-Id: I60dbf57bff3cfcdcbbeb18be5d9dfba523cc6bb8/OpenSSLX509Certificate: only catch BadPaddingException We only need to catch BadPaddingException right now. Let the other non-RuntimeException exceptions pass. Change-Id: I5b6878250d428b1ee953092967b7418003ee9216/"
,,0.0757,conscrypt,external/conscrypt: add NativeConstants. NativeConstants.java is generated by a C program and thus the values will automatically be kept in sync with the contents of the OpenSSL headers. Bug: 20521989 Change-Id: Ib5a97bf6ace05988e3eef4a9c8e02d0f707d46ad/
,,0.075,conscrypt,"GCM: return the correct AlgorithmParameters Instead of the correct AlgorithmParameters of type ""GCM,"" we were returning the generic ""AES"" version that basically only converts to an IvParameterSpec. Bug: 22319986 Change-Id: Ib42905c3ad31e44b72e8066192bd26981c8351ba/"
,,0.1787,conscrypt,"Switch OpenSSLMac from EVP_PKEY_HMAC to HMAC_CTX. EVP_PKEY_HMAC is just a wrapper over HMAC_CTX, so this is slightly more efficient. This is also the last consumer of BoringSSLs EVP_PKEY_HMAC, so the API may be removed after this. Change-Id: I545914b429b23631efd3cacaa22c6d2e7d165fab/Use SSL_CTX_set_tmp_ecdh instead of SSL_CTX_set_tmp_ecdh_callback. Conscrypt is the only consumer of SSL_CTX_set_tmp_ecdh_callback for BoringSSL. The callback variant is also bizarre. The key length parameter is legacy and pointless. When used with SSL_OP_SINGLE_ECDH (which BoringSSL always enables), theres no point in configuring the callback over a static group. The callback also does not participate in supported_curves negotiation. Change-Id: Ie588532a559f13d2b69b7278f9b8d4d41e31828d/Consistently use ARRAY_OFFSET_*INVALID macros. Not all the ad-hoc ones check for integer overflow correctly. Consistently use the same check everywhere. Change-Id: I913b7de792406d9819a6830cc21ec500ddceff6e/Fix error conditions in certificate/PKCS#7 reading When an error condition is encountered in BoringSSL, sometimes it deliberately does not put something on the ERR stack to prevent abuse of that knowledge. Instead we need to throw an exception explicitly when no error is pushed onto the stack. Bug: 21034231 Change-Id: Ia06347c5653672c982ecff2c26be9b091d03009f/Fix up JNI_TRACE for AEAD Bug: 21762837 Change-Id: I11042be8fe1e046ac96759b4554ce9229e1cf6f3/NativeCrypto: special case for empty cipher list For the Java language, setting an empty cipher list is not an error but its an error in OpenSSL. However, the underlying API actually updates the cipher list to an empty string as intended. So we need to handle this special case by clearing the error stack and making sure that our expectation is satisfied. Bug: 21195269 Change-Id: Id21792215513f4e0d6e051160f69e5f830d39015/external/conscrypt: tweaks for next BoringSSL import. Upstream BoringSSL has dropped |SSL_ST_BEFORE| (which appears to have been unused) and all the |*_LOCK_*| symbols. The latter are replaced with |*_up_ref|, with so that it continues to work with OpenSSL. Change-Id: Ib609c83d428b7624e24e3b96c93afc2e482e6a6d/NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal We need to check the ERR stack on a return code of 0. Previously there was a comment indicating the weird behavior about DSA keys throwing after a check for a return value of but this API is never supposed to return anything other than 1 for success or 0 for failure. (cherry picked from commit 49854878b83114e3e15c7ad3ca030352b786b5df) Bug: 18869265 Change-Id: Ic871c63b6d65949053819950ed8053f47501bd60/NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal We need to check the ERR stack on a return code of 0. Previously there was a comment indicating the weird behavior about DSA keys throwing after a check for a return value of but this API is never supposed to return anything other than 1 for success or 0 for failure. Bug: 18869265 Change-Id: Ic871c63b6d65949053819950ed8053f47501bd60/"
,,0.1308,conscrypt,"Improve path building This CL changes certificate path building from building the first possible chain only to building all possible chains until a valid chain is found or all potential chains are exhausted. This will allow us to more gracefully handle CA and intermediate changes. This CL does _not_ change the verification step in any way, all chains generated are still verified the same as they were before. (cherry-picked from commit 381c900af12815e6f0c01519d8ebdd57297303e9) Change-Id: Ia8c4cd4131eb6ddf299da144b963a24cd1b64605/"
,,0.1728,conscrypt,"UniqueMutex for explicit ordering with ScopedSslBio The MUTEX_LOCK / MUTEX_UNLOCK semantics work if you also explicitly clear out resources that were supposed to be cleared before the lock is released. However, with wrapper classes that do it automatically, you cant get the correct ordering. Instead of converting these all to manual acquire and release, convert the mutex handling to use automatic release via UniqueMutex so that ordering is correct with resources that should be protected by the mutex. Thanks to Zhen Song for finding these issues. Bug: 28473706 Change-Id: I4b63ce674e0fc343fe156936df7e8f6e3130722f/Revert ""Switch Conscrypt to EC_GROUP_new_arbitrary."" This reverts commit f695b9fa2d3b67f95cc40fb485db5ee73da60f25. Having a different API for this case than upstream is more trouble than is worth it. A separate ""incomplete EC_GROUP"" state is a nuisance, but not much more of a nuisance for future hopes than having separate ""static EC_GROUP"" and ""arbitrary EC_GROUP"" buckets. (BoringSSL will keep both APIs around until this is cycled everywhere so we wont need more multi-sided changes.) Change-Id: Iad4604a04d75b29b9aac9dfde0f9ae18964017e8/OpenSSLSessionImpl: add better errors when converting Frequently an old SSLSession cache from a different version of OpenSSL or BoringSSL will cause the de-serialization of the SSLSession information to fail. This will spam the logs and happens Frequently when GmsCores ProviderInstaller is used. For now try to extract a bit more useful information from the error thrown by native code and dont bother to print the stack trace since its not fatal. (cherry picked from commit de8236f4bb9d70fa4e6a52679b4bf40b04c44f9b) Bug: 25328662 Change-Id: I0a396a52418e7911b98133b45bbfafcc6651e863/OpenSSLSessionImpl: add better errors when converting Frequently an old SSLSession cache from a different version of OpenSSL or BoringSSL will cause the de-serialization of the SSLSession information to fail. This will spam the logs and happens Frequently when GmsCores ProviderInstaller is used. For now try to extract a bit more useful information from the error thrown by native code and dont bother to print the stack trace since its not fatal. Bug: 25328662 Change-Id: I0a396a52418e7911b98133b45bbfafcc6651e863/"
,,0.1868,conscrypt,"Throw SocketException if the FD socket has had its SSL freed (#343) Under some circumstances (which are repeatable, but I havent been able to lock down), the HTTP connection reuse system in the JDK will attempt to reuse a finalized ConscryptFileDescriptorSocket. When this happens, the socket throws a NullPointerException from the native code when methods are called, because the native SSL object has been freed, which causes a lot of problems. Instead, have the socket throw SocketException instead, which everything understands and responds properly to. As best as I can tell, this is happening because the finalizer of some object thats not ours but has a strong reference to our socket adds a new strong reference, but our finalizer has already been enqueued and thus is run even though the object then can later be reused. I havent been able to find this finalizer, but everything tolerates the code as written and responds properly to the SocketException, so it seems like a good solution until we get rid of the FD socket entirely. Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes"
,,0.4091,conscrypt,"Pass NativeSsl references to NativeCrypto (#408) * Pass NativeSsl references to NativeCrypto The existing implementation of passing raw addresses to NativeCrypto can cause issues where the native code may still be executing when the finalizer runs and frees the underlying native resources. A call to NativeSsl.read(), for instance, is not enough to keep the NativeSsl or its owning socket alive, so if its waiting for input the finalizer can run. Switching to passing the Java object to native code keeps the Java object alive for GC purposes, preventing its finalizer from running. As part of this, also move the freeing of NativeSsl instances into a finalizer on NativeSsl instead of on the sockets. The sockets can still become garbage even if the NativeSsl is kept alive, so we only want to free it when the NativeSsl itself is garbage. We will also want to do this for other native objects, but SSL* instances are by far the most-used native objects and the most likely to be used in a long-running I/O operation, so starting here gives us a lot of benefit. * Reliably close objects in tests. * Pass both pointer and Java reference. This allows us to access the SSL* pointer without having to indirect through the Java objects fields, but still prevents the NativeSsl from being GCed while the method is being run. * Explain unsafe finalization fix in NativeCrypto Javadoc./"
,,0.3657,conscrypt,"Add compile option for checking error queue. (#416) We need to ensure that the BoringSSL error stack is clear when returning from native functions, otherwise a later function might inspect the error stack and interpret it incorrectly. Adds the compile option CONSCRYPT_CHECK_ERROR_QUEUE which enables the macro CHECK_ERROR_QUEUE_ON_RETURN. That macro, when enabled, creates a class that checks the error queue is empty in its destructor. The macro has been added to almost every native method called from Java, enforcing that the error queue is empty when we return from native code back to Java code. Adds the gradle property checkErrorQueue to enable the code and adds it to the Travis config. Also fixes a couple places found by this checking that we were failing to clear the error queue after handling errors./Clean up exception throwing in native code. (#417) Change throwExceptionIfNecessary to throwExceptionFromBoringSSLError. The definition changes from throwing an exception if theres an error on the stack to having a precondition of having an error on the stack. This makes its behavior and the expected usage more clear (it always results in an exception pending). This also should let us know if were encountering return-failure-but-dont-stack-an-error situations that we didnt know about. Normalize function names to throwFooException. Ensure that we always return immediately after throwing an exception. Some call sites allowed the exception-throwing branch to fall through to the return statement from a non-throwing branch, which is unclear, since that return statement is useless, and runs the risk of additional code being inserted after the exception. Fixes"
,,0.4299,conscrypt,"Throw SocketException on ERR_SSL_SYSCALL. (#430) SSLSocketTest#test_SSLSocket_interrupt_readWrapperAndCloseUnderlying is failing periodically on our internal continuous builds, and it appears to be happening due to a race condition. The test is testing what happens when an SSLSocket thats wrapping an underlying Socket is blocked on a read and then underlying socket is closed by another thread. There appears to be a race condition between the OS waking up the reading thread and the write of to java.io.FileDescriptors private field. If the reading thread wakes up and proceeds past the check of the file descriptors validity before the field write is visible, then it will attempt to call SSL_read() and get ERR_SSL_SYSCALL, and it responds by returning whereas the test expects SocketException to be thrown (which it does if the file descriptor is invalid). This changes the code to always throw SocketException when ERR_SSL_SYSCALL is reported with a return value of 0, which the BoringSSL docs say happens ""if the transport returned EOF"", which should mean the file descriptor is closed./Finalization safety for SSL_CTX objects. (#427)/Add compile option for checking error queue. (#416) We need to ensure that the BoringSSL error stack is clear when returning from native functions, otherwise a later function might inspect the error stack and interpret it incorrectly. Adds the compile option CONSCRYPT_CHECK_ERROR_QUEUE which enables the macro CHECK_ERROR_QUEUE_ON_RETURN. That macro, when enabled, creates a class that checks the error queue is empty in its destructor. The macro has been added to almost every native method called from Java, enforcing that the error queue is empty when we return from native code back to Java code. Adds the gradle property checkErrorQueue to enable the code and adds it to the Travis config. Also fixes a couple places found by this checking that we were failing to clear the error queue after handling errors./Clean up exception throwing in native code. (#417) Change throwExceptionIfNecessary to throwExceptionFromBoringSSLError. The definition changes from throwing an exception if theres an error on the stack to having a precondition of having an error on the stack. This makes its behavior and the expected usage more clear (it always results in an exception pending). This also should let us know if were encountering return-failure-but-dont-stack-an-error situations that we didnt know about. Normalize function names to throwFooException. Ensure that we always return immediately after throwing an exception. Some call sites allowed the exception-throwing branch to fall through to the return statement from a non-throwing branch, which is unclear, since that return statement is useless, and runs the risk of additional code being inserted after the exception. Fixes unused parameters in native_crypto.cc (#412) Our Android build rules generate errors for unused parameters. We cant enable the warnings in the external build rules because BoringSSL has many unused parameters and we build the two together in the external build./More finalization safety. (#410) This updates OpenSSLX509Certificate and OpenSSLX509CRL in the same way as NativeSsl was done previously./Pass NativeSsl references to NativeCrypto (#408) * Pass NativeSsl references to NativeCrypto The existing implementation of passing raw addresses to NativeCrypto can cause issues where the native code may still be executing when the finalizer runs and frees the underlying native resources. A call to NativeSsl.read(), for instance, is not enough to keep the NativeSsl or its owning socket alive, so if its waiting for input the finalizer can run. Switching to passing the Java object to native code keeps the Java object alive for GC purposes, preventing its finalizer from running. As part of this, also move the freeing of NativeSsl instances into a finalizer on NativeSsl instead of on the sockets. The sockets can still become garbage even if the NativeSsl is kept alive, so we only want to free it when the NativeSsl itself is garbage. We will also want to do this for other native objects, but SSL* instances are by far the most-used native objects and the most likely to be used in a long-running I/O operation, so starting here gives us a lot of benefit. * Reliably close objects in tests. * Pass both pointer and Java reference. This allows us to access the SSL* pointer without having to indirect through the Java objects fields, but still prevents the NativeSsl from being GCed while the method is being run. * Explain unsafe finalization fix in NativeCrypto Javadoc./Fix error detection in RSA_generate_key_ex. (#398) RSA_generate_key_ex returns 1 on success and 0 on failure, so we could never detect failures that happened. Also update an allocation failure to throw OutOfMemoryError instead of RuntimeException./Add support for accessing tls-unique channel binding value. (#388)/Check an X509-like structure submember for nullness. (#380) Weve seen very sporadic crashes due to null pointer dereferencing somewhere inside X509_get_ext_by_critical, and this is the only way I can see that that can happen. X509_get_ext_by_critical passes x->cert_info->extensions to X509v3_get_ext_by_critical, and thats the only pointer that isnt explicitly checked for nullness. These crashes are incredibly rare, so its not out of the realm of possibility for them to be memory corruption or something, but better safe than sorry./"
,,0.2615,conscrypt,"Clean up exception throwing in native code. (#417) Change throwExceptionIfNecessary to throwExceptionFromBoringSSLError. The definition changes from throwing an exception if theres an error on the stack to having a precondition of having an error on the stack. This makes its behavior and the expected usage more clear (it always results in an exception pending). This also should let us know if were encountering return-failure-but-dont-stack-an-error situations that we didnt know about. Normalize function names to throwFooException. Ensure that we always return immediately after throwing an exception. Some call sites allowed the exception-throwing branch to fall through to the return statement from a non-throwing branch, which is unclear, since that return statement is useless, and runs the risk of additional code being inserted after the exception. Fixes if an exception is pending before throwing another one. (#386) This can occur if a BoringSSL call results in a socket read from a Java socket which throws an exception. Since throwing an exception when another exception is pending causes the process to crash, just let the other exception propagate out of the function./"
,,0.413,conscrypt,"Pass NativeSsl references to NativeCrypto (#408) * Pass NativeSsl references to NativeCrypto The existing implementation of passing raw addresses to NativeCrypto can cause issues where the native code may still be executing when the finalizer runs and frees the underlying native resources. A call to NativeSsl.read(), for instance, is not enough to keep the NativeSsl or its owning socket alive, so if its waiting for input the finalizer can run. Switching to passing the Java object to native code keeps the Java object alive for GC purposes, preventing its finalizer from running. As part of this, also move the freeing of NativeSsl instances into a finalizer on NativeSsl instead of on the sockets. The sockets can still become garbage even if the NativeSsl is kept alive, so we only want to free it when the NativeSsl itself is garbage. We will also want to do this for other native objects, but SSL* instances are by far the most-used native objects and the most likely to be used in a long-running I/O operation, so starting here gives us a lot of benefit. * Reliably close objects in tests. * Pass both pointer and Java reference. This allows us to access the SSL* pointer without having to indirect through the Java objects fields, but still prevents the NativeSsl from being GCed while the method is being run. * Explain unsafe finalization fix in NativeCrypto Javadoc./Add support for accessing tls-unique channel binding value. (#388)/"
,,0.1652,conscrypt,"Allow d2i_X509_bio and friends to not set an error (#552) BoringSSL recently changed so that d2i_X509_bio doesnt set an error in the error queue when it receives certain garbage inputs. We dont actually care what error is set in the queue (we just end up catching whatever is thrown and throwing CertificateException), so change to tolerate having no error in the queue./"
,,0.0625,Frostwire,[android] apply distraction free setting without restarting session/
,,0.0758,Frostwire,[common] more robust handling of network errors in BaseHttpDownload/
,,0.1029,Frostwire,[android] syntax error. redundant logic fixes/[android] removal of static Context reference in Librarian to avoid memory leaks/
,,0.0758,Frostwire,[android] ApolloFragment async refactor and cleanup/[android] tidy move inner static class to the bottom/
,,0.0849,Frostwire,[android] avoid static leak on ImageCache.flush()/
,,0.0652,jna,Testsuite fixes./
,,0.1221,OpenDDS,"BranchChangeLogTag: Thu May 15 20:54:58 UTC 2014 Brian Johnson Wed May 7 18:09:59 UTC 2014 Brian Johnson Transport work possible deadlocking in MulticastTransport.cpp, added logging to trace assoc failures throughout multicast, removed an unused TransportClient* arg in UdpTransport/MulticastDataLink released lock prior to calling passive_connection to alleviate deadlock with accept_datalink start_session needing to acquire lock for find_or_create_session/"
,,0.0751,OpenDDS,BranchLogTag: Wed May 7 13:45:52 UTC 2014 Peter Oschwald Tue May 6 18:00:21 UTC 2014 Peter Oschwald unused args in RtpsUdpTransport.cpp to alleviate compile warnings/
,,0.0778,pljava,Handle the PG 9.6 widening of SPI_processed. Includes a start on some Java 8 JDBC additions: getLargeUpdateCount() and executeLargeBatch()./
,,0.0657,pljava,Handle the PG 9.6 widening of SPI_processed. Includes a start on some Java 8 JDBC additions: getLargeUpdateCount() and executeLargeBatch()./
,,0.1071,realm-java,"Fixes for: A config step has been introduced into the build procedure./A config step has been introduced into the build procedure. The main reason is that it allows reliable uninstallation, but there are several other benefits too. Also, support for running in debug mode has been improved./"
,,0.0664,realm-java,Deprecate Realm.getInstance(Context) * Deprecate Realm.getInstance(Context). * Replease `Realm.getInstance(Context)` in examples./
,,0.0716,realm-java,Align Sync APIs with Cocoa (#5835)/
,,0.0792,rocksdb,hdfs cleanup; fix to NewDirectory to comply with definition in env.h fix compile error with env_test; static casts added/hdfs cleanup and compile test against CDH 4.4./
,,0.2519,rocksdb,[RocksJava] Hardening RocksIterator RocksIterator will sometimes Sigsegv on dispose. Mainly thats related to dispose order. If the related RocksDB instance is freed beforehand RocksIterator.dispose() will fail. Within this commit there is a major change to RocksIterator. RocksIterator will hold a private reference to the RocksDB instance which created the RocksIterator. So even if RocksDB is freed in the same GC cycle the RocksIterator instances will be freed prior to related RocksDB instances. Another aspect targets the dispose logic if the RocksDB is freed previously and already gc`ed. On dispose of a RocksIterator the dispose logic will check if the RocksDB instance points to an initialized DB. If not the dispose logic will not perform any further action. The crash can be reproduced by using the related test provided within this commit. Related information: This relates to facebook rocksdb-dev group post about SigSegv on RocksIterator.dispose()./
,,0.2058,rocksdb,"Fix broken test in 31b02d. Summary: CorruptionTest for backupable_db_test did not call GarbageCollect() after deleting a corrupt backup, which sometimes lead to test failures as the newly created backup would reuse the same backup ID and files and fail the consistency check. Moved around some of the test logic to ensure that GarbageCollect() is called at the right time. Test Plan: Run backupable_db_test eight times and make sure it passes repeatedly. Also run make check to make sure other tests dont fail. Reviewers: igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision: Backup Engine. Summary: Improve the backup engine by not deleting the corrupted backup when it is detected; instead leaving it to the client to delete the corrupted backup. Also add a BackupEngine::Open() call. Test Plan: Add check to CorruptionTest inside backupable_db_test to check that the corrupt backups are not deleted. The previous version of the code failed this test as backups were deleted, but after the changes in this commit, this test passes. Run make check to ensure that no other tests fail. Reviewers: sdong, benj, sanketh, sumeet, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.41100000000000003,rocksdb,"Fixed a dependency issue of ThreadLocalPtr Summary: When a child thread that uses ThreadLocalPtr, ThreadLocalPtr::OnThreadExit will be called when that child thread is destroyed. However, OnThreadExit will try to access a static singleton of ThreadLocalPtr, which will be destroyed when the main thread exit. As a result, when a child thread that uses ThreadLocalPtr exits AFTER the main thread exits, illegal memory access will occur. This diff includes a test that reproduce this legacy bug. AddressSanitizer: heap-use-after-free on address 0x608000007fa0 at pc 0x959b79 bp 0x7f5fa7426b60 sp 0x7f5fa7426b58 READ of size 8 at 0x608000007fa0 thread T1 This patch fix this issue by having the thread local mutex never be deleted (but will leak small piece of memory at the end.) The patch also describe a better solution (thread_local) in the comment that requires gcc 4.8.1 and in latest clang as a future work once we agree to move toward gcc 4.8. Test Plan: COMPILE_WITH_ASAN=1 make thread_local_test ./thread_local_test Reviewers: anthony, hermanlee4, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision: the destruction order of PosixEnv and ThreadLocalPtr Summary: By default, RocksDB initializes the singletons of ThreadLocalPtr first, then initializes PosixEnv via static initializer. Destructor terminates objects in reverse order, so terminating PosixEnv (calling pthread_mutex_lock), then ThreadLocal (calling pthread_mutex_destroy). However, in certain case, application might initialize PosixEnv first, then ThreadLocalPtr. This will cause core dump at the end of the program (eg. This patch fix this issue by ensuring the destruction order by moving the global static singletons to function static singletons. Since function static singletons are initialized when the function is first called, this property allows us invoke to enforce the construction of the static PosixEnv and the singletons of ThreadLocalPtr by calling the function where the ThreadLocalPtr singletons belongs right before we initialize the static PosixEnv. Test Plan: Verified in the MyRocks. Reviewers: yoshinorim, IslamAbdelRahman, rven, kradhakrishnan, anthony, sdong, MarkCallaghan Reviewed By: anthony Subscribers: dhruba, leveldb Differential Revision:"
,,0.1094,rocksdb,"Added ""number of merge operands"" to statistics in ssts. Summary: A couple of notes from the diff: The namespace block I added at the top of table_properties_collector.cc was in reaction to an issue i was having with PutVarint64 and reusing the ""val"" string. Im not sure this is the cleanest way of doing this, but abstracting this out at least results in the correct behavior. I chose ""rocksdb.merge.operands"" as the property name. I am open to suggestions for better names. The change to sst_dump_tool.cc seems a bit inelegant to me. Is there a better way to do the if-else block? Test Plan: I added a test case in table_properties_collector_test.cc. It adds two merge operands and checks to make sure that both of them are reflected by GetMergeOperands. It also checks to make sure the wasPropertyPresent bool is properly set in the method. Running both of these tests should pass: ./table_properties_collector_test ./sst_dump_test Reviewers: IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: andrewkr, dhruba Differential Revision:"
,,0.1049,rocksdb,"Added ""number of merge operands"" to statistics in ssts. Summary: A couple of notes from the diff: The namespace block I added at the top of table_properties_collector.cc was in reaction to an issue i was having with PutVarint64 and reusing the ""val"" string. Im not sure this is the cleanest way of doing this, but abstracting this out at least results in the correct behavior. I chose ""rocksdb.merge.operands"" as the property name. I am open to suggestions for better names. The change to sst_dump_tool.cc seems a bit inelegant to me. Is there a better way to do the if-else block? Test Plan: I added a test case in table_properties_collector_test.cc. It adds two merge operands and checks to make sure that both of them are reflected by GetMergeOperands. It also checks to make sure the wasPropertyPresent bool is properly set in the method. Running both of these tests should pass: ./table_properties_collector_test ./sst_dump_test Reviewers: IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: andrewkr, dhruba Differential Revision:"
,,0.0792,rocksdb,Implement WinRandomRW file and improve code reuse (#1388)/
,,0.3071,rocksdb,"comment unused parameters to turn on flag Summary: This PR comments out the rest of the unused arguments which allow us to turn on the flag. This is the second part of a codemod relating to Closes Differential Revision: D7426121 Pulled By: Dayvedde fbshipit-source-id: 223994923b42bd4953eb016a0129e47560f7e352/Windows cumulative patch Summary: This patch addressed several issues. Portability including db_test std::thread port::Thread Cc: and %z to ROCKSDB portable macro. Cc: maysamyabandeh Implement Env::AreFilesSame Make the implementation of file unique number more robust Get rid of C-runtime and go directly to Windows API when dealing with file primitives. Implement GetSectorSize() and aling unbuffered read on the value if available. Adjust Windows Logger for the new interface, implement CloseImpl() Cc: anand1976 Fix test running script issue where $status var was of incorrect scope so the failures were swallowed and not reported. DestroyDB() creates a logger and opens a LOG file in the directory being cleaned up. This holds a lock on the folder and the cleanup is prevented. This fails one of the checkpoin tests. We observe the same in production. We close the log file in this change. Fix DBTest2.ReadAmpBitmapLiveInCacheAfterDBClose failure where the test attempts to open a directory with NewRandomAccessFile which does not work on Windows. Fix DBTest.SoftLimit as it is dependent on thread timing. CC: yiwu-arbug Closes Differential Revision: D7156304 Pulled By: siying fbshipit-source-id: 43db0a757f1dfceffeb2b7988043156639173f5b/Fix deadlock in ColumnFamilyData::InstallSuperVersion() Summary: Deadlock: a memtable flush holds DB::mutex_ and calls ThreadLocalPtr::Scrape(), which locks ThreadLocalPtr mutex; meanwhile, a thread exit handler locks ThreadLocalPtr mutex and calls SuperVersionUnrefHandle, which tries to lock DB::mutex_. This deadlock is hit all the time on our workload. It blocks our release. In general, the problem is that ThreadLocalPtr takes an arbitrary callback and calls it while holding a lock on a global mutex. The same global mutex is (at least in some cases) locked by almost all ThreadLocalPtr methods, on any instance of ThreadLocalPtr. So, therell be a deadlock if the callback tries to do anything to any instance of ThreadLocalPtr, or waits for another thread to do so. So, probably the only safe way to use ThreadLocalPtr callbacks is to do only do simple and lock-free things in them. This PR fixes the deadlock by making sure that local_sv_ never holds the last reference to a SuperVersion, and therefore SuperVersionUnrefHandle never has to do any nontrivial cleanup. I also searched for other uses of ThreadLocalPtr to see if they may have similar bugs. Theres only one other use, in transaction_lock_mgr.cc, and it looks fine. Closes Reviewed By: sagar0 Differential Revision: D7005346 Pulled By: al13n321 fbshipit-source-id: 37575591b84f07a891d6659e87e784660fde815f/"
