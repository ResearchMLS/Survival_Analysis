Topic_no,Keywords,Contrib,System,Text
1,"test, realm, object, update, change, method, comment, check, annotation, close, null, realmresult, field, create, unit_test, query, core, add, object_store, nullable",0.0737,conscrypt,Fix NativeCrypto FindBugs warnings. Change-Id: I102367575b1257582bb20c659223e3f02650fda4/
,,0.1086,conscrypt,"Update d2i_SSL_SESSION test expectations Update d2i_SSL_SESSION to only throw IOException and change tests to expect that to happen. Since IOException is declared as a thrown exception, non-test code should already be expecting this. Bug: 27526112 Change-Id: Ic8c1a47debce9cb76221150d050be86d010c6ec3/"
,,0.0639,Frostwire,[common] fixed SC search/
,,0.063,Frostwire,[desktop] avoid UI thread violation/
,,0.0825,javacpp,"Update version in the `pom.xml` file to 0.11-SNAPSHOT * Provide `UByteIndexer` and `UShortIndexer`, treating array and buffer data as unsigned integers, for ease of use * Clean up Windows `java.io.tmpdir` even when program messes with `java.class.path` (issue"
,,0.0744,javacpp,Add `PointerScope.getInnerScope()` that can be called from any context/ * Add `PointerScope` to manage more easily the resources of a group of `Pointer` objects/
,,0.0577,pljava,Changes needed for PostgreSQL 8.1.x/
,,0.1407,pljava,"Annotate Connection methods and add more comments. Add to the methods in SPIConnection that are specified by the Connection API (to make it easier to spot the ones that arent). For those added in JDBC 4.1, the annotation is commented out, as PL/Java 1.5 still strives to be buildable with Java 6. Once the back-compatibility horizon is Java 7 or later, those can be uncommented. It would also be fair to say this has added annotations (or commented-out annotations) through JDBC 4.2, as it didnt add any new Connection methods. The PL/Java-specific and internal methods are now easier to pick out (theyre the ones without annotations), and have some more extensive comments about what theyre doing there. Also moved one method to be nearer the stuff it pertains to. No code changes (except to add the specified generic signature on getTypeMap/setTypeMap). Indentation adjusted in a couple contiguous areas./"
,,0.0664,realm-java,Use java.io.IOException./
,,0.066,realm-java,Added hasChanged() to SharedGroup/
,,0.0985,realm-java,Updated test of TableView and Query close() test. + other minor updates/added private_close/Renamed class util to Util./Added finalize to TableQuery/
,,0.1629,realm-java,Outcommented lookup in table and tableview/Query could leak./Updated test of TableView and Query close() test. + other minor updates/Renamed class util to Util./Space in public comments added + Renaming of addLong to incrementInColumn (including test cases)/
,,0.125,realm-java,"Lookup reenabled on typed table. Test case added, Check for null otherwise core crash/debugging datebug fixed one/merged develop into breaking/Renamed to reflect c++ renames/Outcommented lookup in table and tableview/Table.close() now private (added private_debug_close() instead. Added better support for detecting valid View and Query after close of table. Still not completely tested, also missing core-support./Renamed class util to Util./Space in public comments added + Renaming of addLong to incrementInColumn (including test cases)/"
,,0.0807,realm-java,"removed CloseMutex class Commented out/added jni bridge to getColumnIndex/pivot native test cases added/throw exception when setting null on string + test cases/missing "".""/"
,,0.2165,realm-java,Refactored json methods to support standalone objects. Added stub methods + begun work on unit tests./Merge branch master into cm-primary-keys Conflicts: changelog.txt realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java realm/src/androidTest/java/io/realm/RealmAnnotationTest.java realm/src/main/java/io/realm/internal/Row.java realm/src/main/java/io/realm/internal/Table.java/Allow custom constructors but require no arg public constructor as well./Added unit tests and fixes bug found on the way/Preliminary support for primary keys in the binding + Unit tests./
,,0.1386,realm-java,Throw NoSuchMethodError when RealmResults.indexOf() is called as the method is not implemented./Improved error message for child object sorting./Changing sort to be in-place./Added support for remove in RealmResults iterators. Additional unit tests for their usage./Proper iterators implemented for RealmResults./Root cause unit test added./Adding thread check on RealmObject. Refactoring unit tests. Updating changelog./
,,0.0689,realm-java,Preliminary support for primary keys in the binding + Unit tests./
,,0.1056,realm-java,Setting same value to a primary field no longer violates the primary key constraint./Primary keys are now indexed. Refactored Table/Row for missing cases + cleaner code. Additional unit tests./Preliminary support for primary keys in the binding + Unit tests./
,,0.193,realm-java,"Only check for duplicate values when switching primary key fields./Style fixes./Setting same value to a primary field no longer violates the primary key constraint./Merge branch master into cm-primary-keys Conflicts: changelog.txt realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java realm/src/androidTest/java/io/realm/RealmAnnotationTest.java realm/src/main/java/io/realm/internal/Row.java realm/src/main/java/io/realm/internal/Table.java/It is no longer possible to manually set 0 or """" in primary key fields. Refactored error checking so it is more maintainable./Primary keys are now indexed. Refactored Table/Row for missing cases + cleaner code. Additional unit tests./Preliminary support for primary keys in the binding + Unit tests./"
,,0.1513,realm-java,"Better error reporting for error cases when creating a Realm using the File constructors./Revert ""Revert ""Merge pull request from realm/kg-core-0.87.0"""" This reverts commit 6be8edca486f53273f28553584d28bc17c5a0ddf./Mitigate the file size growing problem This change does the following: * disables the caching of Realm instances in threads without an event loop * makes the Realm class implement Closable * does reference counting for closing Realm instances * checks if the Realm instance has not been closed before any operation/"
,,0.0681,realm-java,Fixed issues with Null when using JSONObject./
,,0.0704,realm-java,Made Thread example more resilient to monkey test events./
,,0.1187,realm-java,Handle null value for String in Json when updating Fix Update the objects String field to empty string when the corresponding field in Json is null./Updates due to PR feedback/Tighter check on table validation involving RealmList<> fields./
,,0.092,realm-java,Improve unit test for class with boolean fields in the AP/Updates due to PR feedback/Tighter check on table validation involving RealmList<> fields./
,,0.1448,realm-java,"Add analytics on annotation/Index fields with annotation And update test cases to adapt this change./Support search indexing for column int, bool, date 1. Enable the search index annotation on byte, short, int, long, boolean, and Date. 2. Enable add/remove search index in java. 3. Annotation processor test to support better detailed test cases. 4. Modify JNI test cases. 5. Update doc. 6. Add AnnotationIndexTypes to avoid polluting other test cases. This is the first PR for Implicit index to int primary keys will be handled in another PR./Simple dynamic API added./Add check on fields of type RealmList/"
,,0.0795,realm-java,Populate after generating the metadata/Avoid wildcard imports and execute in the background/Add analytics on annotation/
,,0.1102,realm-java,Support UnreachableVersionException from Core/Realm will now throw a RealmError when Realm Core enters an unrecoverable error condition./
,,0.1648,realm-java,"add logic to release handover resources, update threading example with asyc transaction/using std::unique_ptr for handover + remove unnecessary begin_read in a spearate JNI call + latest fixes from fsa_handover_demo (untyped query etc.)/add support for findFirst & findAllSorted*, update UnitTests/Changing logic to handover the query from caller to background thread, handle different failure points (begin_read, import_handover), update UnitTests/Support UnreachableVersionException from Core/add retry policy + concurrency tests + perf improvement to the query/POC async query, using Core fsa_handover_demo branch/"
,,0.0849,realm-java,Merge remote-tracking branch origin/master into nh-async-query/
,,0.0998,realm-java,Add support for in-memory Realm 1. Add durability to createNativeWithImplicitTransactions. 2. Add inMemory to RealmConfiguration. 3. Support passing durability to SharedGroup constructor. 4. Add new static method getInMemoryRealm to Realm class. 5. Add test cases./
,,0.3392,realm-java,"Suppress useless cast and raw type warnings in generated proxy classes. This warnings are reported when `-Xlint:all` is added to the compilar args. Example configuration of `build.gradle` is: ``` allprojects { gradle.projectsEvaluated { tasks.withType(JavaCompile) { options.compilerArgs options.compilerArgs } } } ```/reorder parameters of ColumnInfo class/fix for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./Add Nullable suport * Add boxed type support. * Add annotation. * isNull and isNotNull support all nullable types now. * equalTo query can take null as input param for nullable fields. * Add functions for nullable related migration. * JSON converter behavior changes for null value. * Update test cases./"
,,0.3401,realm-java,"Suppress useless cast and raw type warnings in generated proxy classes. This warnings are reported when `-Xlint:all` is added to the compilar args. Example configuration of `build.gradle` is: ``` allprojects { gradle.projectsEvaluated { tasks.withType(JavaCompile) { options.compilerArgs options.compilerArgs } } } ```/reorder parameters of ColumnInfo class/fix for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./Add Nullable suport * Add boxed type support. * Add annotation. * isNull and isNotNull support all nullable types now. * equalTo query can take null as input param for nullable fields. * Add functions for nullable related migration. * JSON converter behavior changes for null value. * Update test cases./"
,,0.0681,realm-java,fix tests/Milestone 4: before merging origin/master/
,,0.2908,realm-java,"Change to is_not_null for links Since it is supported by core now./add distinctAsync/fix code style/Added RealmQuery.isEmpty()/optimising TableView construction/small code style fix/using TableRef/remove dynamic allocation for Handover TableView/now throwing Exception if we try to add/remove listener for unmanaged RealmObject/RealmResults/update as per round 2 feedback/Add Nullable suport * Add boxed type support. * Add annotation. * isNull and isNotNull support all nullable types now. * equalTo query can take null as input param for nullable fields. * Add functions for nullable related migration. * JSON converter behavior changes for null value. * Update test cases./update branch as per PR feedback/Milestone 4: before merging origin/master/Milestone 3: findAllSorted, findFirst & asyncTransaction working/Milestone 2: findAllAsync & findFirst working with retries sratetgies/"
,,0.1276,realm-java,now throwing Exception if we try to add/remove listener for unmanaged RealmObject/RealmResults/update as per round 2 feedback/Milestone 4: before merging origin/master/Milestone 2: findAllAsync & findFirst working with retries sratetgies/
,,0.0694,realm-java,Update core to v0.89.8 Add RealmEncryptionNotSupportedException/
,,0.2585,realm-java,Add Nullable suport * Add boxed type support. * Add annotation. * isNull and isNotNull support all nullable types now. * equalTo query can take null as input param for nullable fields. * Add functions for nullable related migration. * JSON converter behavior changes for null value. * Update test cases./
,,0.0841,realm-java,Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./
,,0.1068,realm-java,More fixes for the AP/Fix the AP unit tests/Fix the unit tests of the annotations processor. Also remove one unit test which makes no sense now that users can write model classes in any way they like./update unit tests for annotation-processor/Added Realm.copyFromRealm()/New Migration and Dynamic API. New Sort/Case enums. New RealmCache/
,,0.1068,realm-java,More fixes for the AP/Fix the AP unit tests/Fix the unit tests of the annotations processor. Also remove one unit test which makes no sense now that users can write model classes in any way they like./update unit tests for annotation-processor/Added Realm.copyFromRealm()/New Migration and Dynamic API. New Sort/Case enums. New RealmCache/
,,0.1066,realm-java,Remove reflection from the generated proxy code./Address the first wave of review comments/Realm.createOrUpdateObjectFromJson() now works correctly if the RealmObject class contains a primary key/
,,0.3758,realm-java,"Access to RealmResults based on deleted RealmList * When the original RealmList is deleted, for most methods of RealmResults should just work without crash by just treat it like an empty RealmResults. * RealmResults.where() throws IllegalStateExecption in this case. * RealmResults.isValid() returns false in this case. This is a temp fix, check for more details. Close RealmQuery.distinct(), RealmResults.distinct()/Fix PMD error. Nested if/Applying code review recommendations and adding removed from Realm tests. Review recommendations are from and and jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and RxJava support/fix 1894 changelistener not called/enhancing notifications, adding Async queries for DynamicRealmObject/New Migration and Dynamic API. New Sort/Case enums. New RealmCache/"
,,0.2045,realm-java,"Access to RealmResults based on deleted RealmList * When the original RealmList is deleted, for most methods of RealmResults should just work without crash by just treat it like an empty RealmResults. * RealmResults.where() throws IllegalStateExecption in this case. * RealmResults.isValid() returns false in this case. This is a temp fix, check for more details. Close Migration and Dynamic API. New Sort/Case enums. New RealmCache/"
,,0.1044,realm-java,Fix RealmQuery.isNotEmpty(). It is fix for Fix the native method + Renaming./Support for RealmQuery.isNotEmpty() added/New Migration and Dynamic API. New Sort/Case enums. New RealmCache/
,,0.1236,realm-java,"Added RealmQuery.distinct(), RealmResults.distinct()/Cleanup internal classes/"
,,0.0891,realm-java,"Notify listeners of async RealmObject even if the result is empty/enhancing notifications, adding Async queries for DynamicRealmObject/"
,,0.1177,realm-java,"Cleanup internal classes/enhancing notifications, adding Async queries for DynamicRealmObject/New Migration and Dynamic API. New Sort/Case enums. New RealmCache/"
,,0.11199999999999999,realm-java,New Migration and Dynamic API. New Sort/Case enums. New RealmCache/Release LinkView native pointers Fix * Add abstract method to NativeObjectReference for native resource releasing. * Implement NativeObjectReference.cleanup for UncheckRow and LinkView/
,,0.0838,realm-java,Release LinkView native pointers Fix * Add abstract method to NativeObjectReference for native resource releasing. * Implement NativeObjectReference.cleanup for UncheckRow and LinkView/
,,0.3387,realm-java,"Add RealmList.removeAllFromRealm and Realm.clear * Add LinkView.removeAllTargetRows. * Add Realm.clear to remove all objects from Realm. * Add RealmList.removeAllFromRealm(). * Javadoc & test case update. Close code review recommendations and adding removed from Realm tests. Review recommendations are from and and jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and internal classes/Release LinkView native pointers Fix * Add abstract method to NativeObjectReference for native resource releasing. * Implement NativeObjectReference.cleanup for UncheckRow and LinkView/"
,,0.2108,realm-java,"Using separate interfaces for async transaction also fixes RealmQuery.distinct(), RealmResults.distinct()/Fix flaky tests related with async transaction * Background realm needs to be closed before notifying other threads in async transaction. * Latch needs to be called after Realm closed./fix 1884 listener trigger/Fix crash when closing a Realm in listener Realm.copyFromRealm()/Realm.createOrUpdateObjectFromJson() now works correctly if the RealmObject class contains a primary key/New Migration and Dynamic API. New Sort/Case enums. New RealmCache/Checking to see if a transaction is currently in progress for sync and async transaction pathways. Also adding logging. Added a test helper to assist with log assertion. Fixes Fixing typo. Removing logger after testing Removing extra line Fixing tests and adding change log message. Adding breaking change message Small cosmetic changes Adding punctuation formatting Fixing unit test./"
,,0.2076,realm-java,"Access to RealmResults based on deleted RealmList * When the original RealmList is deleted, for most methods of RealmResults should just work without crash by just treat it like an empty RealmResults. * RealmResults.where() throws IllegalStateExecption in this case. * RealmResults.isValid() returns false in this case. This is a temp fix, check for more details. Close Migration and Dynamic API. New Sort/Case enums. New RealmCache/"
,,0.1995,realm-java,"Access to RealmResults based on deleted RealmList * When the original RealmList is deleted, for most methods of RealmResults should just work without crash by just treat it like an empty RealmResults. * RealmResults.where() throws IllegalStateExecption in this case. * RealmResults.isValid() returns false in this case. This is a temp fix, check for more details. Close"
,,0.2972,realm-java,"RealmChangeListener should provide the changes object/realm/collection as well (#2705) RealmChangeListener should provide the changes object/realm/collection as well/Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Thread check for copyToRealm/copyToRealmOrUpdate/Fix the cast in proxy generator for CacheData Close realm and row as a field name of model class. This fixes"
,,0.3101,realm-java,"RealmChangeListener should provide the changes object/realm/collection as well (#2705) RealmChangeListener should provide the changes object/realm/collection as well/Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Thread check for copyToRealm/copyToRealmOrUpdate/Fix the cast in proxy generator for CacheData Close realm and row as a field name of model class. This fixes"
,,0.1931,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/"
,,0.3094,realm-java,"RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Added RealmCollection APIs/Adapt core fix for the delete RealmList Update core to 0.96.1. No more exception will be thrown when access RealmResults if the base RealmList has be deleted. Instead, it will be treated as an empty RealmResults forever./"
,,0.129,realm-java,"Adapt core fix for the delete RealmList Update core to 0.96.1. No more exception will be thrown when access RealmResults if the base RealmList has be deleted. Instead, it will be treated as an empty RealmResults forever./"
,,0.1019,realm-java,"Multi-arguments distinct(...) for Realm, DynamicRealm, RealmQuery, and RealmResults/"
,,0.2461,realm-java,"Expanding time resolution into millisecs (#2679) Expanding time resolution into milliseconds but using cores new column type Timestamp. An upgrade to core version 0.100.0 is required, and some minor updates are coming from some changes in the core in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/Integer/Long type can be null. 2. The object with nil primary key can be updated. 3. Migration checks if existing nullable type is set to be nullable in existing file. If not, throws RealmMigrationNeeded. 4. Duplicated null as PrimaryKey throws RealmPrimaryKeyConstraintException. 5. When a new empty row is added, the default value checked for duplicated is still the same empty string ("""") at Table.addEmptyRow() 6. Since there isnt equivalent term for Optional in Java 7 yet, nullable PK types are configured as following in this PR. | String PK | Number PK | Primitive PK | Table Column | Nullable | Nullable | Not Nullable |/fix the String from DynamicRealmObject.toString(). Now DynamicRealmObject.toString() shows null value as ""null"". ""class_"" prefix is removed from type name in that String. Align the format to the String from typed RealmObject./"
,,0.063,realm-java,optimize imports/
,,0.1776,realm-java,Added RealmCollection APIs/More checkings when modify RealmList Fix * New method LinkView.getTargetTable(). * Proper checking to add DynamicRealmObject to RealmList. * Disallow modifying with RealmObject belongs to another Realm instance./
,,0.2492,realm-java,"Make all methods on RealmObject and all classes in public API final (#2675) We should mark all methods that should not be overridden final. We should mark all classes that should not be inherited final./Add getPrimaryKey() method to RealmObjectSchema (#2648) Without this method it was necessary to iterator over all fields manually to find the primary key using in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/Integer/Long type can be null. 2. The object with nil primary key can be updated. 3. Migration checks if existing nullable type is set to be nullable in existing file. If not, throws RealmMigrationNeeded. 4. Duplicated null as PrimaryKey throws RealmPrimaryKeyConstraintException. 5. When a new empty row is added, the default value checked for duplicated is still the same empty string ("""") at Table.addEmptyRow() 6. Since there isnt equivalent term for Optional in Java 7 yet, nullable PK types are configured as following in this PR. | String PK | Number PK | Primitive PK | Table Column | Nullable | Nullable | Not Nullable |/Fixed wrong method name in exception Fixed wrong method name in exception/Added RealmCollection APIs/Add RealmObjectSchema.isPrimaryKey() * Add RealmObjectSchema.isPrimaryKey(). RealmObjectSchema.getPrimaryKey() is not added since it doesnt seem to be necessary. * isNullable & isRequired didnt throw which is wrong. * Add throws doc to hasIndex. Close"
,,0.3526,realm-java,"Give async related vars better names asyncQueryExecutor and pendingQuery seem to be very confusing since they are used for async transaction as well./Move all query methods to RealmQuery (#2620) Currently we have the following helper query methods on Realm/DynamicRealm: allObjects() and distinct() However we have to be mindful about the number of methods in our API and from the projects we have seen so far, these methods does not seem to have been used much. Moving all query methods to RealmQuery has two advantages: 1) It helps us to reduce our overall method count and 2) It makes our API more consistent as now all RealmQuery methods are only found on RealmQuery./Deprecated 3 field sort in Realm and RealmQuery (#2619)/Make Realm.createObject(Class,PrimaryKey) public (#2622) This method is a way to solve the problem that people might have data with a primary key that is is the default value for that type, e.g a long primary key with the value 0. Once this object is saved in Realm any calls to the normal Realm.createObject() would throw an exception as it would try to assign the default value (zero) to the object before the user could set it to something else. With this method that is no longer a problem. Internally we already use this method and it is already public in the Dynamic API. The reason for not making this public earlier was due to fear of mis-use since there is no type-safe guarantee at compile time. However since it is already public in the Dynamic API and we havent seen any indication of that being misused we feel it should be safe to make this public. Also our Query API is also semi-threadsafe so there is precedence there as well./Only throw RealmException if absolutely necessary (#2618) We should avoid wrapping lower level exceptions in RealmExceptions unless there is a good reason for it. We had multiple support issues where people were confused about the RealmException and didnt understand they had to dig through the stack trace for the original exception. This change alters the behaviour of all our JSON methods so they now only convert JSONException to RealmException in order to prevent checked exceptions to reach the user. All other exceptions should be thrown directly./Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Added RealmConfiguration.initialData() (#2602)/Remove Realm.getTable() from public API Close RealmCollection APIs/migrateRealm throws when db doesnt exsit Close ./follow lint warnings/Multi-arguments distinct(...) for Realm, DynamicRealm, RealmQuery, and RealmResults/Thread local notifactions are now triggered using the Looper instead of immediately/RealmQuery.distinctAsync(), RealmResults.distinctAsync() support./"
,,0.1561,realm-java,RealmResults and RealmObjects are no longer accidentally GCed while their Observable is still alive./Realm Observables now holds a Realm instance until unsubscribed/fixed typo/
,,0.2668,realm-java,"Merge commit ecbacf into merge-ecbacf-to-master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for inserts (#2999) Added `insert(RealmModel obj)`, `insertOrUpdate(RealmModel obj)`, `insert(Collection<RealmModel> collection)` and `insertOrUpdate(Collection<RealmModel> collection)` to perform batch inserts (#1684)./Objects not in Realm are now called unmananged everywhere. (#2828)/"
,,0.2595,realm-java,"Merge commit ecbacf into merge-ecbacf-to-master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for inserts (#2999) Added `insert(RealmModel obj)`, `insertOrUpdate(RealmModel obj)`, `insert(Collection<RealmModel> collection)` and `insertOrUpdate(Collection<RealmModel> collection)` to perform batch inserts (#1684)./Objects not in Realm are now called unmananged everywhere. (#2828)/"
,,0.1589,realm-java,Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for
,,0.1734,realm-java,"Annotation processor no longer consume annotations (#3216) This commit changes the Realm annotation processor so it no longer consumes the annotations. The only effect this has is that it is now possible to write multiple annotation processors for the same annotation. It is not possible to specify the order of annotation processors from two different libraries, so if one of the processors consumed the annotation it would be random if both ran or only one of them./"
,,0.1084,realm-java,Disable change listeners on IntentService threads (#3232)/add a null check to addChangeListener and removeChangeListener (#2805) * add a null check to addChangeListener and removeChangeListener in Realm and DynamicRealm (fixes * reflect review comments/
,,0.244,realm-java,"bulk inserts (#2999) Added `insert(RealmModel obj)`, `insertOrUpdate(RealmModel obj)`, `insert(Collection<RealmModel> collection)` and `insertOrUpdate(Collection<RealmModel> collection)` to perform batch inserts (#1684)./ PrimaryKey index rearrangement in migration revisited (#2920) This PR fixes two issues; 1) When a column with a smaller index than that of a primary key field gets removed, the primary key field index decrements, which causes a cached primary key index to point a wrong field. 2) When a primary key field is renamed, the primary key meta table is not updated accordingly./"
,,0.1761,realm-java,"bulk inserts (#2999) Added `insert(RealmModel obj)`, `insertOrUpdate(RealmModel obj)`, `insert(Collection<RealmModel> collection)` and `insertOrUpdate(Collection<RealmModel> collection)` to perform batch inserts (#1684)./"
,,0.17800000000000002,realm-java,"bulk inserts (#2999) Added `insert(RealmModel obj)`, `insertOrUpdate(RealmModel obj)`, `insert(Collection<RealmModel> collection)` and `insertOrUpdate(Collection<RealmModel> collection)` to perform batch inserts (#1684)./"
,,0.17800000000000002,realm-java,"bulk inserts (#2999) Added `insert(RealmModel obj)`, `insertOrUpdate(RealmModel obj)`, `insert(Collection<RealmModel> collection)` and `insertOrUpdate(Collection<RealmModel> collection)` to perform batch inserts (#1684)./"
,,0.2226,realm-java,"Disable change listeners on IntentService threads (#3232)/bulk inserts (#2999) Added `insert(RealmModel obj)`, `insertOrUpdate(RealmModel obj)`, `insert(Collection<RealmModel> collection)` and `insertOrUpdate(Collection<RealmModel> collection)` to perform batch inserts (#1684)./Fix async transaction problem when async query already exist. (#2780) I have rewritten how async transactions works. Before they did this: 1) commitOnBackgroundThread() post REALM_CHANGED post onSuccess runnable The problem with that approach was that the REALM_CHANGED would be swallowed if async queries existed which meant that the async transaction would call onSuccess on an old version of the Realm (making it look like it didnt work). Instead we now do this: 2) commitOnBackgroundThread post runnable that calls HandlerController.handleAsyncTransactionCompleted(runnable) The special runnable is treated as a combined REALM_CHANGED + Callback, which makes it possible for us to queue up callbacks until we are finally able to trigger all of them. Unfortunately the Handler has poor support for this so it means that we no longer can detect if such a message is in the queue. This means that it introduces a slight chance of such a event plus a real REALM_CHANGED event to be in the message queue at the same time. I considered that acceptable (since it can already happen today), and since preventing this will introduce more complexity to something that is already entirely to complex./Objects not in Realm are now called unmananged everywhere. (#2828)/"
,,0.4848,realm-java,"Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Supporting both additive and manual schema modes (#91) * Adding very thin wrappers for Object Stores ObjectSchema and Property. * Adding method for building object schema is proxy classes * Adding rudimentary support for Object Store schemas. Using ObjectStore::update_schema() to update schema for the additive mode. * Disallowing destructive schema changes in additive mode./Invalidate schema cache when the schema version of Realm is changed by other process (#3409). invalidate schema cache when the schema version of Realm is changed by other process. Now schema cache referred by Realm instance is not shared and global schema cache is introduced instead./Integrate Object Store [PART2] SharedRealm (#3031) This simplified our code base a lot. Basically all APIs we need from SharedGroup/Group are wrapped in the SharedRealm. So we can just remove those classes. But we do need a few APIs from SharedGroup which is not supplied by SharedRealm because of async queries. Currently we expose those in a friend class of ShareRealm, see realm/realm-object-store#141 We are still managing Realm caches in Java although there are mechanism in OS to do the same thing. The major reason is we have method like deleteRealm needs information from cache to check if all Realm instances are closed. The ShareRealm is actually a std::shared_ptr. We hold the pointer to the std::shared_ptr in Java. Another fundamental change is that we used to have separated SharedGroups for DynamicRealm and typed Realm in the same thread. But now they are using different SharedRealm but actually the different SharedRealms are point to the same SharedGroup. And some other code cleanup./"
,,0.4789,realm-java,"Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Supporting both additive and manual schema modes (#91) * Adding very thin wrappers for Object Stores ObjectSchema and Property. * Adding method for building object schema is proxy classes * Adding rudimentary support for Object Store schemas. Using ObjectStore::update_schema() to update schema for the additive mode. * Disallowing destructive schema changes in additive mode./Invalidate schema cache when the schema version of Realm is changed by other process (#3409). invalidate schema cache when the schema version of Realm is changed by other process. Now schema cache referred by Realm instance is not shared and global schema cache is introduced instead./Integrate Object Store [PART2] SharedRealm (#3031) This simplified our code base a lot. Basically all APIs we need from SharedGroup/Group are wrapped in the SharedRealm. So we can just remove those classes. But we do need a few APIs from SharedGroup which is not supplied by SharedRealm because of async queries. Currently we expose those in a friend class of ShareRealm, see realm/realm-object-store#141 We are still managing Realm caches in Java although there are mechanism in OS to do the same thing. The major reason is we have method like deleteRealm needs information from cache to check if all Realm instances are closed. The ShareRealm is actually a std::shared_ptr. We hold the pointer to the std::shared_ptr in Java. Another fundamental change is that we used to have separated SharedGroups for DynamicRealm and typed Realm in the same thread. But now they are using different SharedRealm but actually the different SharedRealms are point to the same SharedGroup. And some other code cleanup./"
,,0.1874,realm-java,Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by
,,0.2425,realm-java,"Introduce global init (#3457) Realm now uses a global init function instead of Context on the RealmConfiguration.Builder/Remove deprecated constructor + add directory() (#3357) This commit simplifies the RealmConfiguration constructors and also ensures that we always have an Android context. It does so by now only having the`RealmConfiguration.Builder(context)` constructor. Custom file locations are now supported through the `directory()` builder method. This also made it possible to simply `assetFile(Context, location)` to only `assetFile(location)`. Having the Context means that we are now able to access system services and other framework classes without exposing any Android functionality in any potential interface (which will be needed to support Realm on the JVM)./Wait all async tasks done before next test (#3319) This is highly related with Below things are still guaranteed by this change after commit async transaction: * When callback function called (onSuccess/onError), the background Realm is closed. * When any change listeners called, the background Realm is closed. What is true now but it is not guaranteed in the future: * Background Realm might not be closed before REALM_CHANGED sent (not received). Due to this, to avoid the flaky tests, we have to ensure all async tasks quit peacefully before start the next test. This is implemented by wait and check in the TestRealmConfigurationFactory. NOTE: Any test, if the async tasks cannot be finished peacefully in a certain time, it has to be considered as a problem and fixed. This would be needed by OS notifications since Java wont have a precise control of sending REALM_CHANGED anymore./"
,,0.0859,realm-java,Introduce global init (#3457) Realm now uses a global init function instead of Context on the RealmConfiguration.Builder/
,,0.324,realm-java,"Use CheckedRow when creating a DynamicRealm Object. (#3551) And this removes a check of UncheckedRow in some constructors of DynamicRealmObject since CheckedRow is never passed to it./Sync facade to make spliting lib possible (#116) * Sync facade to make spliting lib possible * Add class SyncObjectServerFacade which will only exist in the sync lib. * Check if SyncObjectServerFacade exists and create an singleton instance. * Empty implementations for base ObjectServerFacade. * Add RealmConfiguration.isSyncConfiguration to make the checks faster. * Other cleanups. Close both additive and manual schema modes (#91) * Adding very thin wrappers for Object Stores ObjectSchema and Property. * Adding method for building object schema is proxy classes * Adding rudimentary support for Object Store schemas. Using ObjectStore::update_schema() to update schema for the additive mode. * Disallowing destructive schema changes in additive mode./Integrate Object Store [PART2] SharedRealm (#3031) This simplified our code base a lot. Basically all APIs we need from SharedGroup/Group are wrapped in the SharedRealm. So we can just remove those classes. But we do need a few APIs from SharedGroup which is not supplied by SharedRealm because of async queries. Currently we expose those in a friend class of ShareRealm, see realm/realm-object-store#141 We are still managing Realm caches in Java although there are mechanism in OS to do the same thing. The major reason is we have method like deleteRealm needs information from cache to check if all Realm instances are closed. The ShareRealm is actually a std::shared_ptr. We hold the pointer to the std::shared_ptr in Java. Another fundamental change is that we used to have separated SharedGroups for DynamicRealm and typed Realm in the same thread. But now they are using different SharedRealm but actually the different SharedRealms are point to the same SharedGroup. And some other code cleanup./getFieldIndex returns null for non-existing field (#3295) Close"
,,0.4221,realm-java,"allow to put Realm database file on external storage. (#3591) * set the path of the directory of named pipes to fix * update CHANGELOG * add a test for issue3140 * update test * follow the chenges in object-store * skip an external storage test on the device where SELinux is not enforced * rename test * rename variable * update object-store * make SharedRealm#temporaryDirectory volatile * address findbugs error/Fixed bug in path when getting access tokens for Realms (#157)/Add cause to RealmMigrationNeededException (#3482)/Introduce global init (#3457) Realm now uses a global init function instead of Context on the RealmConfiguration.Builder/fix merge mistakes/Merge branch master into master-sync Conflicts: realm/realm-annotations-processor/src/main/java/io/realm/processor/ClassMetaData.java realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java realm/realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java realm/realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java realm/realm-annotations-processor/src/test/resources/io/realm/NullTypesRealmProxy.java realm/realm-annotations-processor/src/test/resources/io/realm/RealmDefaultModuleMediator.java realm/realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java realm/realm-library/src/main/cpp/object-store realm/realm-library/src/main/java/io/realm/Realm.java realm/realm-library/src/main/java/io/realm/RealmSchema.java realm/realm-library/src/main/java/io/realm/internal/SharedRealm.java/Supporting both additive and manual schema modes (#91) * Adding very thin wrappers for Object Stores ObjectSchema and Property. * Adding method for building object schema is proxy classes * Adding rudimentary support for Object Store schemas. Using ObjectStore::update_schema() to update schema for the additive mode. * Disallowing destructive schema changes in additive mode./Upgrade to beta-33 / 2.0.0-rc4 (#90)/Invalidate schema cache when the schema version of Realm is changed by other process (#3409). invalidate schema cache when the schema version of Realm is changed by other process. Now schema cache referred by Realm instance is not shared and global schema cache is introduced instead./Public Sync API (#73)/Integrate Object Store [PART2] SharedRealm (#3031) This simplified our code base a lot. Basically all APIs we need from SharedGroup/Group are wrapped in the SharedRealm. So we can just remove those classes. But we do need a few APIs from SharedGroup which is not supplied by SharedRealm because of async queries. Currently we expose those in a friend class of ShareRealm, see realm/realm-object-store#141 We are still managing Realm caches in Java although there are mechanism in OS to do the same thing. The major reason is we have method like deleteRealm needs information from cache to check if all Realm instances are closed. The ShareRealm is actually a std::shared_ptr. We hold the pointer to the std::shared_ptr in Java. Another fundamental change is that we used to have separated SharedGroups for DynamicRealm and typed Realm in the same thread. But now they are using different SharedRealm but actually the different SharedRealms are point to the same SharedGroup. And some other code cleanup./Wait all async tasks done before next test (#3319) This is highly related with Below things are still guaranteed by this change after commit async transaction: * When callback function called (onSuccess/onError), the background Realm is closed. * When any change listeners called, the background Realm is closed. What is true now but it is not guaranteed in the future: * Background Realm might not be closed before REALM_CHANGED sent (not received). Due to this, to avoid the flaky tests, we have to ensure all async tasks quit peacefully before start the next test. This is implemented by wait and check in the TestRealmConfigurationFactory. NOTE: Any test, if the async tasks cannot be finished peacefully in a certain time, it has to be considered as a problem and fixed. This would be needed by OS notifications since Java wont have a precise control of sending REALM_CHANGED anymore./"
,,0.0935,realm-java,"Nh/fix 3966 (#3979) Realm migration is triggered, when the primary key definition is altered (#3966)/Fixed a bug that caused unexpected MigrationNeededException in very rare case. (#3768) In sync mode, `validateTable()` must get all fields in the tabla./"
,,0.1028,realm-java,"Nh/fix 3966 (#3979) Realm migration is triggered, when the primary key definition is altered (#3966)/Fixed a bug that caused unexpected MigrationNeededException in very rare case. (#3768) In sync mode, `validateTable()` must get all fields in the tabla./"
,,0.0824,realm-java,"Nh/fix 3966 (#3979) Realm migration is triggered, when the primary key definition is altered (#3966)/Fixed a bug that caused unexpected MigrationNeededException in very rare case. (#3768) In sync mode, `validateTable()` must get all fields in the tabla./"
,,0.0639,realm-java,Implement global logout (#3642)/
,,0.2465,realm-java,"Expose schemaVersion in SyncConfig (#4058)/Disallow listeners for Results & Object on non-looper/Disallow Realm listeners on non-looper thread It is possible to have listeners for non-looper thread, and trigger them through SharedRealm.refresh(). But there are many corner cases need to be covered if we enable it. Disallow it for now to stick with current behaviour./Single daemon thread for notification (#3666) With changes in , there is only one thread will be create for listening changes for all different Realms. But an additional SharedGroup will be created in the daemon thread for determine which SharedGroup has changed since last time. That requires some changes in the java side especially the daemon thread should not be created when Realm.compactRealm called./Create capabilities for every Realm instance/Fix get DynamicRealmObject from RealmResults./Clear the memory ownership for RowNotifier/Deliver global notification through OS did_change Remove AndroidNotifier which will have a common implementation among all platforms./Back the RealmResults by collection/Experiment of Results.get()/"
,,0.24600000000000002,realm-java,"Fix lots of minor issues/Get findAllAsync and findFirstAsync back the findAllAsync got deprecated since from OS Results point of view, the query updating will run in the background by default, then there would be no difference between findAll and findAsync. Apparently the isLoad() and load() should be deprecated as well. So like cocoa, the Query will be executed immediately if user tries to access the element in the Results. But ... That was wrong because of those use cases: 1) RxJava support, in the subscription, it needs to check isLoaded() to determine the next step. And it will be fired once after the Observable created. By always returning true from isLoaded(), that means for RxJava will always run sync query at the first time. 2) Create a RealmResults and pass it to a list adapter. Since UI will always call size() which will run the query immediately and the first time query becomes synced. So, we get all async related APIs back and keep them having the same functionality like before. The behavior wont be exact the same, but from users perspective, they are the same as before./Detect if collection itarator becomes unstable Instead of checking the version of TableView which requires exposing the TableView version from OS, we simply check if the iterator is used across detach/reattach. If reattach happens, the TableView will be synced, the iterators are not stable anymore./Disallow listeners for Results & Object on non-looper/Use ObserverPair to manage collection listeners/OS Resultss first and last/Move TableOrView.NO_MATCH to Table/Lint warnings/Distinct support/Results.contains()/Results.sort()/Wrap NotificationToken/Back the RealmResults by collection/WiP start using Object Stores Results class/"
,,0.1002,realm-java,Modify Java docs and comments. (#4124) * Remove unnecessary an addtional space. * Modify Java docs and comments. * PR feedback. * PR feedback./Remove final modifier from all major classes. (#3911)/
,,0.1472,realm-java,"Wire the ""like"" predicate into RealmQuery (#3992) * Wire the ""like"" predicate into RealmQuery Fixes"
,,0.2201,realm-java,"Free the SharedRealm in phantom daemon (#4096) Treat the SharedRealm the same as other native objects. SharedRealm.close will only call Object Store Realm::close without deleting the ShareRealm pointer. Then we dont need the finalizer anymore. Fix . This is related with as well. It is possible that java close the Realm in any of the Object Stores callbacks. To avoid Object Store operating on a invalid SharedRealm pointer, binding should try to make sure after callbacks. However, it cannot be totally avoided since user could set the Realm instance to null and the instance can be GCed at any time. It is still something should be considered in the Object Store implementation./Expose schemaVersion in SyncConfig (#4058)/Init some member vars in SharedRealm constructor move initialization of RealmNotifier and Capabilities to SharedRealm constructor to make it less confusing./Use term detach/reattach for Collection snapshot Also add some comments/canceltransaction posts to reattach collections To maintain the consistency behaviour: once a collection becomes detached because of beginTransaction, it can only be reattached in the next event loop./Merge remote-tracking branch origin/master into kneth/object-store/results/Fix concurrency problem with collection list/Workaround for the Alooper and postAtFrontQueue See with snapshot to support stable iterator But something is going wrong, more like a bug in core than Object Store./Remove handler related code The event handler logic stays in OS only, see util/android/event_loop_signal.hpp All the async related logic should be platform independent in java./"
,,0.0987,realm-java,Modify Java docs and comments. (#4124) * Remove unnecessary an addtional space. * Modify Java docs and comments. * PR feedback. * PR feedback./Remove final modifier from all major classes. (#3911)/Move TableOrView.NO_MATCH to Table/
,,0.1274,realm-java,Merge remote-tracking branch origin/master into kneth/object-store/results/Expose schemaVersion in SyncConfig (#4058)/Deliver the callbacks for async transaction/Remove final modifier from all major classes. (#3911)/Remove commitTransaction(boolean)/Nh/fixes 3732 insertOrUpdate using other Realm (#3755)/
,,0.09699999999999999,realm-java,Add the underlying information on RealmFileException. (#3940) Add the underlying information on RealmFileException to help investigating Incompatible lock file issue./Nh/objectstore userstore (#3838) * Add a UserStore based on ObjectStore implementation/WiP start using Object Stores Results class/
,,0.0683,realm-java,More docs for RealmNotifier Also added one more test case for it./Only trigger realm notifier when version changed/Clear the memory ownership for RowNotifier/
,,0.1082,realm-java,Nh/objectstore userstore (#3838) * Add a UserStore based on ObjectStore implementation/WiP start using Object Stores Results class/
,,0.1036,realm-java,"Update core to 2.3.0 (#3970) Also update object-store to 99570ba6e0 . * Adapt changes from sync Client::set_error_handler is removed. Session error handler signature changed. * Session error handler called after destruction According to the doc of Session::set_error_handler, the error handler could be called after the session object is destroyed. That is a problem since the java session object can be destroyed at that time. Use a weak_ptr of JavaGlobalRef in the lambda to solve the problem. * Ignore unknown category error from sync/"
,,0.5048,realm-java,"Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/Backlinks (#4219) * Document multiple links to the same object * Fix non-object field reference bug * Load all tables before validating any * Update to gradle 3.4.1 * Fix Documentation * Fix Asynchronous UTs * Ignore, instead of throwing on, attempts to load Backlink fields w/JSON * Fix documentation and add notification unit tests * Require that backlink fields be final. * Address PR comments * Add tests for notification and distinct * Add interface methods and most of table validation * Check fields on JSON load * Fix fails in RealmTests * Respond to comments * Compile time type checking Refactor annotation handler * Improved error messages * Add Unit tests * Renamed Backlink to LinkingObjects. Added annotation processor tests. * Added annotation processor unit tests. * Add Backlink annotation/improve performance of getters and setters in proxy classes (#4206) * improve performance of getters and setters in proxy classes This change is a part of fixes of * removed unused argment * Update CHANGELOG.md/"
,,0.5016,realm-java,"Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/Backlinks (#4219) * Document multiple links to the same object * Fix non-object field reference bug * Load all tables before validating any * Update to gradle 3.4.1 * Fix Documentation * Fix Asynchronous UTs * Ignore, instead of throwing on, attempts to load Backlink fields w/JSON * Fix documentation and add notification unit tests * Require that backlink fields be final. * Address PR comments * Add tests for notification and distinct * Add interface methods and most of table validation * Check fields on JSON load * Fix fails in RealmTests * Respond to comments * Compile time type checking Refactor annotation handler * Improved error messages * Add Unit tests * Renamed Backlink to LinkingObjects. Added annotation processor tests. * Added annotation processor unit tests. * Add Backlink annotation/improve performance of getters and setters in proxy classes (#4206) * improve performance of getters and setters in proxy classes This change is a part of fixes of * removed unused argment * Update CHANGELOG.md/"
,,0.4947,realm-java,"Introduce DynamicRealmObject#linkingObjects(String srcClassName, String srcFieldName) (#4492)/Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/Backlinks (#4219) * Document multiple links to the same object * Fix non-object field reference bug * Load all tables before validating any * Update to gradle 3.4.1 * Fix Documentation * Fix Asynchronous UTs * Ignore, instead of throwing on, attempts to load Backlink fields w/JSON * Fix documentation and add notification unit tests * Require that backlink fields be final. * Address PR comments * Add tests for notification and distinct * Add interface methods and most of table validation * Check fields on JSON load * Fix fails in RealmTests * Respond to comments * Compile time type checking Refactor annotation handler * Improved error messages * Add Unit tests * Renamed Backlink to LinkingObjects. Added annotation processor tests. * Added annotation processor unit tests. * Add Backlink annotation/improve performance of getters and setters in proxy classes (#4206) * improve performance of getters and setters in proxy classes This change is a part of fixes of * removed unused argment * Update CHANGELOG.md/"
,,0.4257,realm-java,"Backlinks (#4219) * Document multiple links to the same object * Fix non-object field reference bug * Load all tables before validating any * Update to gradle 3.4.1 * Fix Documentation * Fix Asynchronous UTs * Ignore, instead of throwing on, attempts to load Backlink fields w/JSON * Fix documentation and add notification unit tests * Require that backlink fields be final. * Address PR comments * Add tests for notification and distinct * Add interface methods and most of table validation * Check fields on JSON load * Fix fails in RealmTests * Respond to comments * Compile time type checking Refactor annotation handler * Improved error messages * Add Unit tests * Renamed Backlink to LinkingObjects. Added annotation processor tests. * Added annotation processor unit tests. * Add Backlink annotation/"
,,0.4154,realm-java,"Backlinks (#4219) * Document multiple links to the same object * Fix non-object field reference bug * Load all tables before validating any * Update to gradle 3.4.1 * Fix Documentation * Fix Asynchronous UTs * Ignore, instead of throwing on, attempts to load Backlink fields w/JSON * Fix documentation and add notification unit tests * Require that backlink fields be final. * Address PR comments * Add tests for notification and distinct * Add interface methods and most of table validation * Check fields on JSON load * Fix fails in RealmTests * Respond to comments * Compile time type checking Refactor annotation handler * Improved error messages * Add Unit tests * Renamed Backlink to LinkingObjects. Added annotation processor tests. * Added annotation processor unit tests. * Add Backlink annotation/"
,,0.4154,realm-java,"Backlinks (#4219) * Document multiple links to the same object * Fix non-object field reference bug * Load all tables before validating any * Update to gradle 3.4.1 * Fix Documentation * Fix Asynchronous UTs * Ignore, instead of throwing on, attempts to load Backlink fields w/JSON * Fix documentation and add notification unit tests * Require that backlink fields be final. * Address PR comments * Add tests for notification and distinct * Add interface methods and most of table validation * Check fields on JSON load * Fix fails in RealmTests * Respond to comments * Compile time type checking Refactor annotation handler * Improved error messages * Add Unit tests * Renamed Backlink to LinkingObjects. Added annotation processor tests. * Added annotation processor unit tests. * Add Backlink annotation/"
,,0.27399999999999997,realm-java,Fine grained locks for RealmCache (#4551) Separated lock for different RealmConfiguration instead of one lock on the RealmCache class. So Opening Realm instances from different configurations wont block each other. DynamicRealm which is created during opening type Realm will not be associated to any RealmCache to avoid recursive locks and multiple times initial block. (Also make the code easier.) This is for and part of implementation of ./fix API incompatibility introduced in 3.1.0 (#4455)/Refactor Schemas into separate native and realm-based implementations (#4382) * Refactor Schemas into separate native and realm-based implementations * Fix all tests * Respond to PR comments * Temporary (git add .) kludge to fix visiblity problem/
,,0.4356,realm-java,"Introduce DynamicRealmObject#linkingObjects(String srcClassName, String srcFieldName) (#4492)/Backlinks (#4219) * Document multiple links to the same object * Fix non-object field reference bug * Load all tables before validating any * Update to gradle 3.4.1 * Fix Documentation * Fix Asynchronous UTs * Ignore, instead of throwing on, attempts to load Backlink fields w/JSON * Fix documentation and add notification unit tests * Require that backlink fields be final. * Address PR comments * Add tests for notification and distinct * Add interface methods and most of table validation * Check fields on JSON load * Fix fails in RealmTests * Respond to comments * Compile time type checking Refactor annotation handler * Improved error messages * Add Unit tests * Renamed Backlink to LinkingObjects. Added annotation processor tests. * Added annotation processor unit tests. * Add Backlink annotation/Deprecate distinctXxx methods of RealmResults (#4210)/Enable listeners on RealmList (#4216) The RealmList holds a Collection which is used for listeners. Other RealmList APIs are still calling from LinkView./Add OrderedRealmCollectionSnapshot (#4172) Introduce OrderedRealmCollectionSnapshot as another type of OrderedRealmCollection. A snapshot can be created from RealmResults or RealmList. A snapshot is backed by a snapshot of OS Results. So the snapshot itself wont be updated. The size and order stay the same forever (elements inside are still live objects.). Since the RealmResults is auto-updated all the time, snapshot will be usefull when changing the results in a simple loops. This commit also moves the common code from RealmResults to OrderedRealmCollectionImpl since those can be shared with snapshot implementation. Implement"
,,0.5246,realm-java,"Hide StandardRealmSchema class from public API. (#4444) fixes * add package private methods to RealmSchema instead of BaseRealm.getSchemaInternal()./refactor internal method name in RealmSchema (#4429)/Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/Refactor Schemas into separate native and realm-based implementations (#4382) * Refactor Schemas into separate native and realm-based implementations * Fix all tests * Respond to PR comments * Temporary (git add .) kludge to fix visiblity problem/Backlinks (#4219) * Document multiple links to the same object * Fix non-object field reference bug * Load all tables before validating any * Update to gradle 3.4.1 * Fix Documentation * Fix Asynchronous UTs * Ignore, instead of throwing on, attempts to load Backlink fields w/JSON * Fix documentation and add notification unit tests * Require that backlink fields be final. * Address PR comments * Add tests for notification and distinct * Add interface methods and most of table validation * Check fields on JSON load * Fix fails in RealmTests * Respond to comments * Compile time type checking Refactor annotation handler * Improved error messages * Add Unit tests * Renamed Backlink to LinkingObjects. Added annotation processor tests. * Added annotation processor unit tests. * Add Backlink annotation/Fix error message to show correct character limit and minor grammar fix/"
,,0.1685,realm-java,"Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/"
,,0.3851,realm-java,"Clean up SharedRealm source Remove unused methods. Fix double negatives. Use auto& to avoid creating temp objects./Rename Context to NativeContext (#4597)/Dont reset SharedRealm ptr (#4478) Keep the SharedRealm ptr valid when close it. To allow the is_closed checking could throw in the Object Store and it can be converted to a friendly Java exception. Check if SharedRealm is closed when create collection iterator. Throw an ISE if it is. Fix ./Refactor Schemas into separate native and realm-based implementations (#4382) * Refactor Schemas into separate native and realm-based implementations * Fix all tests * Respond to PR comments * Temporary (git add .) kludge to fix visiblity problem/Add detailed notification for RealmObject (#4331) See Add ObjectChangeSet & RealmObjectChangeListener. Add OsObject to wrap ObjectStores Object for notifications. No more false positive notifications for RealmObject. Use ObserverPairList in ProxyState instead of normal list to solve the potential listener removal problems which is handled well by the ObserverPairList. Fix tests./Using ObjectStore SyncManager & Session (#4214) Using ObjectStores SyncManager & Session/RealmResults is always live-to-updated This is the precondition of fine grained notifications. OS will trigger the collection notification immediately when transaction begins on the local thread to compute the change set if there is any. This conflicts with Javas original RealmResults behavior the original RealmResults would only be synced in the next event loop. Also, there are some edge cases dont work well with the original RealmResults behavior, see details in So: RealmResults becomes always up-to-date again which means it will never contains a invalid row. Behavior of iteration on a RealmResults still just works, it will just iterate on snapshot of collection. This means user can still delete elements from a RealmResults inside iteration. Deletion & Modification on RealmResults in simple-for-loop wont work as expected if the changes will impact the order/elements of the results. This could be solved by the future new Collection type RealmCollectionSnapshot. Add Collection.load() and Collection.isLoaded() to support java sync queries. Test fix. wont be an issue anymore since the RealmResults is always up to date and it wont contain any invalid rows. So remove the related tests. Failure tests caused by listener being triggred with beginTransaction() Remove realmResultsListenerAddedAfterCommit. when add listener to the OS Results after commit transaction, the OS CollectionNotifier will be created at the SharedGroup version of transaction committed. So the listener wont be called anymore since the all changes already exist in current SharedGroup./Dont remove callback in AndroidRealmNotifier We still have to ensure the async transaction callbacks delivered./"
,,0.0917,realm-java,Rename Context to NativeContext (#4597)/Use target table to create snapshot from LinkView (#4556) Fix . Remove useless confusing `LinkView.getTable()`./
,,0.5383,realm-java,"fix API incompatibility introduced in 3.1.0 (#4455)/Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/Refactor Schemas into separate native and realm-based implementations (#4382) * Refactor Schemas into separate native and realm-based implementations * Fix all tests * Respond to PR comments * Temporary (git add .) kludge to fix visiblity problem/Backlinks (#4219) * Document multiple links to the same object * Fix non-object field reference bug * Load all tables before validating any * Update to gradle 3.4.1 * Fix Documentation * Fix Asynchronous UTs * Ignore, instead of throwing on, attempts to load Backlink fields w/JSON * Fix documentation and add notification unit tests * Require that backlink fields be final. * Address PR comments * Add tests for notification and distinct * Add interface methods and most of table validation * Check fields on JSON load * Fix fails in RealmTests * Respond to comments * Compile time type checking Refactor annotation handler * Improved error messages * Add Unit tests * Renamed Backlink to LinkingObjects. Added annotation processor tests. * Added annotation processor unit tests. * Add Backlink annotation/Fix error message to show correct character limit and minor grammar fix/"
,,0.5137,realm-java,"Fine grained locks for RealmCache (#4551) Separated lock for different RealmConfiguration instead of one lock on the RealmCache class. So Opening Realm instances from different configurations wont block each other. DynamicRealm which is created during opening type Realm will not be associated to any RealmCache to avoid recursive locks and multiple times initial block. (Also make the code easier.) This is for and part of implementation of ./removed nested try-finally/address findbugs warnings/dispose OsRealmObjectSchema in OsRealmSchema.Creator/Fix OsRealmSchema leak (#4422)/refactor internal method name in RealmSchema (#4429)/Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/Refactor Schemas into separate native and realm-based implementations (#4382) * Refactor Schemas into separate native and realm-based implementations * Fix all tests * Respond to PR comments * Temporary (git add .) kludge to fix visiblity problem/Backlinks (#4219) * Document multiple links to the same object * Fix non-object field reference bug * Load all tables before validating any * Update to gradle 3.4.1 * Fix Documentation * Fix Asynchronous UTs * Ignore, instead of throwing on, attempts to load Backlink fields w/JSON * Fix documentation and add notification unit tests * Require that backlink fields be final. * Address PR comments * Add tests for notification and distinct * Add interface methods and most of table validation * Check fields on JSON load * Fix fails in RealmTests * Respond to comments * Compile time type checking Refactor annotation handler * Improved error messages * Add Unit tests * Renamed Backlink to LinkingObjects. Added annotation processor tests. * Added annotation processor unit tests. * Add Backlink annotation/Using ObjectStore SyncManager & Session (#4214) Using ObjectStores SyncManager & Session/"
,,0.0849,realm-java,KeepMember OsObject.notifyChangeListeners Fix Use release assertion when finding java method./Using ObjectStore SyncManager & Session (#4214) Using ObjectStores SyncManager & Session/
,,0.1196,realm-java,Suppress warnings in generated code. (#4779) * Suppress warnings in generated code. * Add compile time flag controlling the SuppressWarnings annotation on generated classes/
,,0.1179,realm-java,"Removed unused methods from internal Table class (#4812)/Refactor object creation into OsObject (#4632) Hide the addEmptyRow from java to support future stable ID. Add bulk insertion benchmark. This wont be the final design of internal object creation API, when integration of OS object accessor, the internal API might be changed a bit since it doesnt look nice at all 5 params for the JNI call to create an object with integer primary key/"
,,0.3914,realm-java,"Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.3976,realm-java,"Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.3727,realm-java,"Add Supports for Primitive Lists (#5031) * Extended Annotation Processor to support it in model classes * Relaxed Generic Constraints * Support in insert/insertOrUpdate * Support in copyToRealm/copyToRealmOrUpdate * Support in copyFromRealm/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.3433,realm-java,Merge remote-tracking branch origin/master into mc/os-schema-migration/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.3926,realm-java,"Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.3367,realm-java,Update realm-sync to 1.10.8 (#5129) And update object-store to 2274604de9/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.3354,realm-java,Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.3876,realm-java,"Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.3989,realm-java,"Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
