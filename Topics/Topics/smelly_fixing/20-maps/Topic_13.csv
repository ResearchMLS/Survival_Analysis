Topic_no,Keywords,Contrib,System,Text
13,"type, fix, break, error, add, case, report, update, exception, method, miss, breaking_update, table, support, long, function, request, bug, library, rename",0.0902,conscrypt,Add missing Java 9 methods for ALPN (#339) Fixes benchmarks broken by (#334) The cipher used in the benchmarks requires TLS 1.2./Support renegotiation with sockets (#321) Fixes Fixes
,,0.3211,conscrypt,"Switch from wrapping to subclassing for Java 9 methods. (#359) Older Android apps rely on OpenSSLSocketImpl being in the superclass chain of sockets, which means wrapping them can cause problems. Instead, use a subclass to add the appropriate methods. This also makes the subclass implementation quite clean, but it pollutes the Platform classes with a bunch of methods and means we have to remember not to use the constructors directly./Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes back-compat issue from recent import. (#318) Also fixing a couple of new compiler warnings./"
,,0.1694,conscrypt,Add missing Java 9 methods for ALPN (#339) Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.3383,conscrypt,"Switch from wrapping to subclassing for Java 9 methods. (#359) Older Android apps rely on OpenSSLSocketImpl being in the superclass chain of sockets, which means wrapping them can cause problems. Instead, use a subclass to add the appropriate methods. This also makes the subclass implementation quite clean, but it pollutes the Platform classes with a bunch of methods and means we have to remember not to use the constructors directly./Add missing Java 9 methods for ALPN (#339) Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes"
,,0.3198,conscrypt,"Switch from wrapping to subclassing for Java 9 methods. (#359) Older Android apps rely on OpenSSLSocketImpl being in the superclass chain of sockets, which means wrapping them can cause problems. Instead, use a subclass to add the appropriate methods. This also makes the subclass implementation quite clean, but it pollutes the Platform classes with a bunch of methods and means we have to remember not to use the constructors directly./Add missing Java 9 methods for ALPN (#339) Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes Java 6 testing to Travis for Linux (#307) Fixes back-compat issue from recent import. (#318) Also fixing a couple of new compiler warnings./"
,,0.1657,conscrypt,Add missing Java 9 methods for ALPN (#339) Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.3117,conscrypt,"Switch from wrapping to subclassing for Java 9 methods. (#359) Older Android apps rely on OpenSSLSocketImpl being in the superclass chain of sockets, which means wrapping them can cause problems. Instead, use a subclass to add the appropriate methods. This also makes the subclass implementation quite clean, but it pollutes the Platform classes with a bunch of methods and means we have to remember not to use the constructors directly./Provide the issuers when calling chooseClientAlias. (#344) I cant see any reason why the issuers shouldnt be provided, and this method hasnt been changed in at least 4 years, so I expect it was just an oversight. Fixes missing Java 9 methods for ALPN (#339) Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes"
,,0.1639,conscrypt,Add missing Java 9 methods for ALPN (#339) Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.1622,conscrypt,"Add missing Java 9 methods for ALPN (#339) Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes renegotiation with sockets (#321) Fixes Fixes send and receive close_notify alerts (#325) As part: * Dont call SSL_clear() when shutting down an SSL, because we need to be able to hand it close_notify messages still. Since both SSLEngine and SSLSocket arent reusable, this is safe. * Return SSL_ERROR_ZERO_RETURN explicitly when it happens, so that we can properly adjust our state in response to a close_notify being received. * Check if there are pending bytes to be sent when wrap() is called, even if the SSLEngine is closed./"
,,0.1769,conscrypt,Add missing Java 9 methods for ALPN (#339) Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.2183,conscrypt,"Switch from wrapping to subclassing for Java 9 methods. (#359) Older Android apps rely on OpenSSLSocketImpl being in the superclass chain of sockets, which means wrapping them can cause problems. Instead, use a subclass to add the appropriate methods. This also makes the subclass implementation quite clean, but it pollutes the Platform classes with a bunch of methods and means we have to remember not to use the constructors directly./Throw SocketException if the FD socket has had its SSL freed (#343) Under some circumstances (which are repeatable, but I havent been able to lock down), the HTTP connection reuse system in the JDK will attempt to reuse a finalized ConscryptFileDescriptorSocket. When this happens, the socket throws a NullPointerException from the native code when methods are called, because the native SSL object has been freed, which causes a lot of problems. Instead, have the socket throw SocketException instead, which everything understands and responds properly to. As best as I can tell, this is happening because the finalizer of some object thats not ours but has a strong reference to our socket adds a new strong reference, but our finalizer has already been enqueued and thus is run even though the object then can later be reused. I havent been able to find this finalizer, but everything tolerates the code as written and responds properly to the SocketException, so it seems like a good solution until we get rid of the FD socket entirely. Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes"
,,0.0697,conscrypt,Add missing Java 9 methods for ALPN (#339) Fixes renegotiation with sockets (#321) Fixes Fixes
,,0.3466,conscrypt,"Switch from wrapping to subclassing for Java 9 methods. (#359) Older Android apps rely on OpenSSLSocketImpl being in the superclass chain of sockets, which means wrapping them can cause problems. Instead, use a subclass to add the appropriate methods. This also makes the subclass implementation quite clean, but it pollutes the Platform classes with a bunch of methods and means we have to remember not to use the constructors directly./setSocketWriteTimeout(): Log more details in case of failure. (#345) In response to a previous hard-to-diagnose bug, this method logged a couple of stacktaces from the caught exception; but it didnt log the exception type (e.g. InvocationTargetException), exception message or causes. This CL expands this to also log the cause chain, providing the exception type, message, and the first two StackTraceElements for each Throwable in the chain./Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes"
,,0.0966,conscrypt,"Update OID->name mapping code (#670) Add our own class for the standard OIDs. This should eliminate our reliance on the platform data for the vast majority of cases. Catch IllegalAccessError if thrown in OpenJDK, since java.base doesnt export AlgorithmId so under JPMS we might not have access to it. Fixes"
,,0.0639,Frostwire,"[common] typo, missing fix (versioning)./"
,,0.0534,Frostwire,[android] PREF_KEY_GUI_SUPPORT_FROSTWIRE wasnt fixed all the way/
,,0.0702,Frostwire,[android] fixing conflicts./
,,0.066,Frostwire,[android] fixing conflicts./
,,0.1014,Frostwire,"Fixes broken link on Language change (#398) This is a minor issue when trying to change the Language from the flag icon at the bottom bar, the Language-Window has a link Help to translate FrostWire that was pointing the old frostwire-desktop repo. I didnt open an issue because is a tiny thing./"
,,0.0657,Frostwire,[common] more robust handling of network errors in BaseHttpDownload/
,,0.0648,Frostwire,"[desktop] avoid one more deprecation suppresion, FilePane/"
,,0.0993,Frostwire,"[android] BaseHttpDownload update On error, map out SocketTimeoutException to TransferState.ERROR_CONNETION_TIMED_OUT Show more info about failed BaseHttpDownload (BaseHttpDownload.Info::toString() implemented)/"
,,0.0588,Frostwire,[android/apollo] ImageCache optimizations and fixes/
,,0.0914,javacpp,"* Before loading the JNI library, the `Loader` now also tries to extract and load libraries listed in the preload={...})` annotation values, and to support library names with version numbers, each value has to follow the format (or to have `Builder` use it for the compiler as well), where ""version"" is the version number found in the filename as required by the native dynamic linker, usually a short sequence of digits and dots, but it can be anything (e.g.: would map to ""libmylib.so.4.2"", ""libmylib.4.2.dylib"", and ""mylib.4.2.dll"" under Linux, Mac OS X, and Windows respectively) * Stopped using `java.net.URL` as hash key in `Loader` (very bad idea)/Fixed Maven build and Mac OS X `-framework` option (issue and other minor things/"
,,0.075,javacpp,"* Disable DocLint, which prevents the build from succeeding on Java 8 (issue"
,,0.0968,javacpp,"* Add `-undefined dynamic_lookup` option to Mac OS X compiler, making its native linker behave a bit better, plus search for libraries suffixed with "".so"" too/ * Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/"
,,0.0828,javacpp,* Throw `OutOfMemoryError` on `allocateArray()` for `Pointer` of primitive types with `size > 0 && address 0`/
,,0.0828,javacpp,* Throw `OutOfMemoryError` on `allocateArray()` for `Pointer` of primitive types with `size > 0 && address 0`/
,,0.0786,javacpp,* Throw `OutOfMemoryError` on `allocateArray()` for `Pointer` of primitive types with `size > 0 && address 0`/
,,0.0849,javacpp,* Throw `OutOfMemoryError` on `allocateArray()` for `Pointer` of primitive types with `size > 0 && address 0`/
,,0.0786,javacpp,* Throw `OutOfMemoryError` on `allocateArray()` for `Pointer` of primitive types with `size > 0 && address 0`/
,,0.0828,javacpp,* Throw `OutOfMemoryError` on `allocateArray()` for `Pointer` of primitive types with `size > 0 && address 0`/
,,0.0828,javacpp,* Throw `OutOfMemoryError` on `allocateArray()` for `Pointer` of primitive types with `size > 0 && address 0`/
,,0.0828,javacpp,* Throw `OutOfMemoryError` on `allocateArray()` for `Pointer` of primitive types with `size > 0 && address 0`/
,,0.0786,javacpp,* Throw `OutOfMemoryError` on `allocateArray()` for `Pointer` of primitive types with `size > 0 && address 0`/
,,0.0786,javacpp,* Throw `OutOfMemoryError` on `allocateArray()` for `Pointer` of primitive types with `size > 0 && address 0`/
,,0.0828,javacpp,* Throw `OutOfMemoryError` on `allocateArray()` for `Pointer` of primitive types with `size > 0 && address 0`/
,,0.1163,javacpp,Throw more information when `OutOfMemoryError` occurs on `allocateArray()` for `Pointer` of primitive types/
,,0.1163,javacpp,Throw more information when `OutOfMemoryError` occurs on `allocateArray()` for `Pointer` of primitive types/
,,0.0824,javacpp,Merge pull request from vb216/master * Work around `linux-armhf` not being properly detected with OpenJDK (issue * Fix `Loader.load()` not renaming a library when previously loaded under a different name/
,,0.1142,javacpp,Throw more information when `OutOfMemoryError` occurs on `allocateArray()` for `Pointer` of primitive types/
,,0.1163,javacpp,Throw more information when `OutOfMemoryError` occurs on `allocateArray()` for `Pointer` of primitive types/
,,0.1183,javacpp,Throw more information when `OutOfMemoryError` occurs on `allocateArray()` for `Pointer` of primitive types/
,,0.1204,javacpp,Throw more information when `OutOfMemoryError` occurs on `allocateArray()` for `Pointer` of primitive types/
,,0.1142,javacpp,Throw more information when `OutOfMemoryError` occurs on `allocateArray()` for `Pointer` of primitive types/
,,0.1163,javacpp,Throw more information when `OutOfMemoryError` occurs on `allocateArray()` for `Pointer` of primitive types/
,,0.1204,javacpp,Throw more information when `OutOfMemoryError` occurs on `allocateArray()` for `Pointer` of primitive types/
,,0.1163,javacpp,Throw more information when `OutOfMemoryError` occurs on `allocateArray()` for `Pointer` of primitive types/
,,0.1183,javacpp,Throw more information when `OutOfMemoryError` occurs on `allocateArray()` for `Pointer` of primitive types/
,,0.1396,javacpp,"* Fix broken `outputDirectory` property and corresponding `-d` command line option (issue * Add `Loader.extractResources()` and `cacheResources()` methods to extract or cache all resources with given name/Update version in the `pom.xml` file to 1.3.1-SNAPSHOT * Fix potential issues with `Parser` repeating the or annotations on parameters * To support Scala singleton objects better, consider as `static` methods from objects that are not `Pointer` * Allow `Loader.extractResource()` and `cacheResource()` to extract or cache all files from a directory in a JAR file * Create version-less symbolic links to libraries in cache on those platforms where it is useful to link easily * Use `java.io.tmpdir` as fallback in `Loader.getCacheDir()`, and throw a clear exception on failure/Release version 1.2.7 * Fix `Loader` errors that could occur due to recent changes/ * Prevent `Loader` from overwriting previously extracted and renamed libraries (issue deeplearning4j/nd4j#1460)/"
,,0.0915,javacpp,* Fix `Parser` incorrectly resolving type definitions with classes of the same name in parent namespaces * Fix `Generator` compile errors for `const` template types of classes using the annotation/
,,0.0828,javacpp,* Add `Loader.loadGlobal()` to load symbols globally as often required by Python libraries (issue ContinuumIO/anaconda-issues#6401)/
,,0.174,javacpp,"* Allow suffixing library names with `:` to specify exact relative paths to libraries, ignoring any additional prefix or suffix/ * Let `Loader.load()` extract libraries suffixed with `##`, but still ignored for copying by `Builder`/ * Fix `Loader.createLibraryLink()` incorrectly truncating library versions when there is one before and another after the suffix/ * Allow prefixing library names with `:` to have `Loader` consider them as filenames with prefix and suffix already included/ * Add `Loader.loadGlobal()` to load symbols globally as often required by Python libraries (issue ContinuumIO/anaconda-issues#6401)/ * Prevent `ClassCastException` in `Loader` on illegal system properties (issue * Fix `Parser` not replacing all type names of the base class with `Info.flatten` (issue"
,,0.0645,javacpp,* Add `Generator` support for `enum` classes with `boolean` values (issue
,,0.0995,jna,"Fix for issue and JRUBY-3084. This alters the library search algorithm slightly: 1) Searches jna.library.path and any custom (per-library) paths for a matching library. 2) If that fails, tries to load the mapped library name, using dlopen/LoadLibrary. 3) If that fails, add all paths back into the search path and try to locate the library in jna.platform.library.path with all the normal fallbacks. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0758,OpenDDS,Merge pull request from objectcomputing/ipv6_changes Fix test to call set_address with the proper arguments for IPV6 addreÖ/Fix test to call set_address with the proper arguments for IPV6 addresses./Refactor open_dual_stack_socket into one function to open the appropriate type of socket for the configuration. Fix issues with IPV6 builds in the transport tests to use correct sockets and address types./
,,0.075,OpenDDS,Merge pull request from mitza-oci/master Removed workarounds for GCC 3.3.x bugs./Removed workarounds for GCC 3.3.x bugs./
,,0.0556,OpenDDS,Merge pull request from objectcomputing/ts_api_updates_redmine_2334 Fix SampleInfo initializer in java test/Fix SampleInfo initializer in java test/
,,0.078,OpenDDS,Merge pull request from simpsont-oci/fixing_ooo_data_and_fragment_issues Fixing Out-of-Order / Missing Data and Fragment Handling Issues/fixing duplicate fragment range insertion issue in TransportReassembly::insert/
,,0.0681,pljava,Fixes to some problems reported by Filip Hrbek/
,,0.075,pljava,Fixed ArrayIndexOutOfBounds exception reported by Petr Michalek/Fixed bug# 1218/
,,0.066,pljava,Fixed portal clean-up./
,,0.1044,pljava,Fixed bug Jar owner in the sqlj.jar_repository table changed type from oid to name./
,,0.0966,pljava,Fixed memory leak that occured during recursive calls to function returning sets/Fixed bug Jar owner in the sqlj.jar_repository table changed type from oid to name./
,,0.0762,pljava,Fixed memory leak that occured during recursive calls to function returning sets/Fixed support for parameters of type RECORD./
,,0.0692,pljava,Fixed some backward compatibility issues Added explicit coercion capability/
,,0.0828,pljava,Fixed some backward compatibility issues Added explicit coercion capability/
,,0.0669,pljava,Fixed stack backtrace on failure to load class/Improved exception handling/Fixed typo/
,,0.1806,pljava,"When doing batch execution with batches that have different types, the server crashes because it did not replan the query for the new types. Save the type information for each batch and compare it with the previous values to see if we need to replan. Bug execution of PreparedStatements failed because addBatch was only saving off the parameter values while it ignored the parameter types. Save both the types and values. Reported by Lucas Madar Bug"
,,0.0778,pljava,Bugfix: 1010971 SPIConnection.getMetaData() is incorrectly documented It is now correctly documented./
,,0.0807,pljava,Bug 1011119: Let Postgres bool java.sql.Types.BOOLEAN match Javas java.sql.Types.BOOLEAN Postgres bool./
,,0.2937,pljava,"Merge pull request from jcflack/workaround/master/javac7 Workaround breakage seen with Java 7/Workaround the problem reported in The annotation processor in javac runs in multiple rounds, as long as generated source files keep appearing, and one final round after they dont. This code used to save some mapping of Class objects to the javax.lang.model objects (TypeElement/TypeMirror) until the final round, which worked in Java 6, but as of 7 one gets back different model objects in different rounds, for the same types, and they dont match, so type mapping breaks. This workaround moves all those lookups to before or during round 1, when a consistent set of model objects can be looked up. So, it will work as long as all the source files that might contain pljava annotations will be found in round 1. That should always be the case unless someone is using a very fancy build with _other_ annotation processors generating new source files with pljava annotations that have to be processed in additional rounds. For now, that wont work, because their types wont seem to match what was computed in round 1. So dont do that. might refer to this problem, and promises a fix in Java 9, for what its worth./"
,,0.1091,pljava,"Merge pull request from jcflack/bug/master/issue21 Pass all Unicode codepoints transparently (issue threadlock ops in string conversion. The Java methods related to charset encoding/decoding may be called repeatedly, and they dont require the threadlock to be released and reacquired. I dont measure much difference in timing (I dont really have a good ""average text"" corpus to test on; the test case for this bug is worst case because it uses all of the biggest characters.) Even without a compelling timing difference, the Java charset encoders/ decoders arent thread safe, so I feel just that much better holding on to the lock./Make String.c use Javas charset en/decoders. In this commit, all the conversions in String.c except String_createJavaString(text*) which can have a bug fixed first./Merge pull request from jcflack/bug/master/issue54 Only ignore the expected exception in method lookup./Only ignore the expected exception in method lookup. That way other exceptions (like a problem in a class initializer, or out of memory) will not be hidden from view. Closes pull request from kenolson/bug/master/msvc_build Fix to allow building pljava with Microsoft Visual C/Fix to allow building pljava with Microsoft Visual C Code changes to allow compilation and linking with Microsoft Visual C. Maven build process conditionalized to to detect Visual C and adjust options appropriately. See msvc-build-notes.txt for full details. Property names updated for clarity/"
,,0.1166,pljava,"Zap a few more conversion (not sign-) warnings. count|how 2 | fixed with obvious cast lacking in PG macro (e.g. PGUNSIXBIT) 5 | fixed using `size_t/Size` not `int`, locally verifiable 1 | cast to member defined by others, static `AssertVariableIsOfType` 1 | fixed with width suffix on literal/"
,,0.326,pljava,"Improve message in strange javac error case. Earlier in the week I saw truly perplexing errors that stemmed from a simple missing or misspelled import, but javac, instead of reporting the error, would supply DDRProcessor with an instance of an internal Error class where the unresolvable value should have been. So now, at least recognize that Error class and produce a more helpful message. Now, of course, I am unable to test the change, because javac (same version same machine) is now doing the right thing every time. At least with this change, if the right conditions are ever hit again for javac to misbehave as it was earlier, the message should be more helpful./Conform to BaseUDT rename, add MappedUDT. Supporting MappedUDT is much simpler. It emits a CREATE TYPE foo AS ( ... structure ... ) if a structure is provided, or not, if it isnt, followed by a SELECT sqlj.add_type_mapping( ... ), and thats it. Much javadoc also added. This commit ends with pure renames of the Point and ComplexTuple examples in preparation to make them annotation examples ... breaking compilation until they are fixed up in the next commit, but git can see where they went./Add a class annotation to make a base/scalar UDT. Add the annotation, have DDRProcessor recognize it. Check the annotated class for the required properties and members. The snippets map formerly allowed only one type of annotation on a given element. That happened to work, but not now when a class could have both a UDT and a SQLAction annotation, for example. Adapt the map to key by element and snippet class, so snippets of different classes can be hung on an element and selectively retrieved. An old comment in populateAnnotationImpl suggested it would reduce boilerplate setter code if, failing to find a setter method, the field itself could be reflectively looked up and stored. Thats done now, so setter methods are needed only when something more special has to be done. Function declarations will be synthesized automagically for the four mandatory (in, out, recv, send) methods, but to allow their properties to be individually adjusted, they can still accept Function annotations. Thats done by hanging a new subclass of FunctionImpl on those elements, that generates the right special form of declaration, and has setters that refuse changes to certain properties where that wouldnt make sense. Treat the default implementor-tag (PostgreSQL if not changed with new ddr.implementor command line property) specially. Now that everything is getting wrapped with an implementor tag by default, the implied requires=""implementor-tag"" was holding everything back until released by the cycle-breaker, sometimes in puzzling order. The implementor tag that happens to be the default one should /not/ be treated as a pending requirement. Move ComplexScalar to annotation subpackage, in preparation for revamping it as an annotation example. So git wont lose track of it, this is a breaking change, to be fixed in the next commit with edits corresponding to the move./"
,,0.1992,pljava,"Work around symbols MSVC cant link to. The long pgsql-hackers thread in 2014 discovering that MSVC could silently link global variables to the wrong stuff if not properly decorated in PGs .h files documents how the problem of silently succeeding was solved by making such cases fail instead. Thats great, only now they fail. These patches make the pessimistic assumption that no working way to access the global variables will be found. That might not be the case, because theres a recent new pgsql-hackers thread that has rekindled some interest in finding a better solution to the problem. Anyway, until that day, these workarounds should achieve the correct behavior under MSVC./Add a GUC option for libjvm location. The linker used to embed a dependency for libjvm into the pljava shared object, which required using one of several system-specific ways to get the systems library loader (not PostgreSQLs) to be able to find libjvm, or loading pljava would simply fail. By omitting the linked-in dependency on libjvm, pljava can now successfully load and then use PostgreSQLs own dlopen wrapper to find libjvm using the pljava.libjvm_location option, or give a helpful error report. The history of PGDLLEXPORT through the years has been somewhat bewildering, and it begins to seem tidier to cleanly define a PLJAVADLLEXPORT that is used only here and doesnt change its meaning across PG releases./"
,,0.3025,pljava,"Use PG 8.3 find_coercion_pathway API. Ok, this compiles and doesnt break any tests (and will give errors for unhandled return cases, or a warning when disregarding domain constraints). The reason it went unnoticed so long is that Type_getCoerce{In,Out} are really very seldom called. They are almost dead code--fairly contrived function declarations are needed even to force them to be called for test purposes. That seems to be mostly because Type_getCoerce{In,Out} wont be called if Type_canReplaceType returns true, which it very often does, because (a) Type_fromOid silently replaces domains with their base types, and (b) Function builds the method signature by mapping the SQL return type to a Java type and looking for a matching method, failing if none is found, rather than looking for a method by its name and parameter signature only, then validating its return type. So, essentially by construction, coercion of the return type cant ever turn out to be necessary. It could, however, if the AS string gives the Java return type explicitly, and it requires coercion to the (base type of the) SQL type. SQL/JRT has no syntax to specify the Java return type, but as an extension it seems PL/Java does: ""Function mapping"" in the wiki gives an example where it precedes class.method, separated by a space. Only the example doesnt work. Thats because the getAS code accepts the syntax only when the return type is purely alphanumeric (no dots, so non-package-qualified). Not a recent change, has been that way since 2006. An is also accepted, though, even after a package-qualified return type. The example works if retried with an SQL/JRT, it seems to me, specifies the other approach to method resolution, that is, find the method by name and parameter signature, then work out what to do with its return type, but that would be a change to current PL/Java behavior. The unimplemented warning for RELABELTYPE to a domain type essentially cant be triggered, because of the way any domain is replaced by its base type before consulting canReplaceType. Thats harmless for IN parameters. For the return type, its a type-safety hole: a PL/Java function can return a value that isnt valid for its declared result domain. Fixing that should be possible, but beyond the scope of this issue. The not-implemented errors for COERCEVIAIO and ARRAYCOERCE can be triggered, just by constructing exactly the sort of function declarations where you would expect those things to happen. They would still be arguably contrived cases, where the AS string specifies a method with different types than would naturally correspond to the SQL ones. Nevertheless, the ""Function mappping"" wiki page says ""PL/Java will use a standard PostgreSQL explicit cast when the SQL type of the parameter or return value does not correspond..."" and thats not completely true at the moment, as long as some features available in standard PostgreSQL explicit casts, like array or I/O coercion, arent yet implemented. Again, beyond the scope of issue 65. At least those cases now give clear errors, instead of crashes or Krueger numbers as I just confirmed in a build without this change, so this does in fact fix a latent bug. Note that the single-row result set writers used for functions that return composite or set-of-composite results have their own coercion logic completely unrelated to this, and implemented in SPIConnection.java. There are more moving parts here than I had hoped..../Merge pull request from tada/bug/master/coerceout Type_getCoerceOut correct statement order. Calling this one obvious enough to be uncontroversial./Type_getCoerceOut correct statement order. Ken Olson pointed this out as a case of dead code, but in fact it was live use of an unassigned variable just before the function call that was going to assign it. Had to be an editing mixup, has been that way a very long time, and has probably not caused more problems only because its statistically rare for a random stack location to be exactly equal to InvalidOid. Scratches the surface of A full solution for that issue will have to come later, but this much was an obvious Heisenbug with an obvious fix./"
,,0.4849,pljava,"Merge branch chore/master/java7ify Bump the minimum Java to 7 and begin adopting Java 7 features in places where the fruit hangs low./Merge branch feature/REL1_5_STABLE/typmodprep into REL1_5_STABLE Not a full implementation of type modifiers (which were requested in feature request 1011140), which would be too much to hold 1.5.0 for, but just enough to avoid releasing a version that gets in the way later: the SQL generator had better at least emit the three-argument forms for input and receive function declarations, or they would later have to be dropped and replaced, a cascading disruption. Non-default values in the extra arguments are not yet supported; theyll just cause unsupported feature ereports. As it turns out, only rare corners of PostgreSQL need that support; most application of typmods is done with the three-argument cast, which is already expressible in PL/Java. So, unexpectedly, mostly-usable typmod support is already here, and a new example illustrates it./Lay groundwork for typmod support. To fully support type modifiers, including the three-argument forms of input/receive functions, will take more thought than 1.5.0 can wait for. But to release 1.5.0 with the SQL generator emitting the one-argument forms would invite headaches later, because CREATE OR REPLACE FUNCTION cant change the parameter list, and DROP/reCREATE would cause cascading disruption. So, make sure the generator already emits the three-argument form, and just be sure to fail if a non-default typmod is in fact passed, with more complete support to be added later. By happy chance, it seems that PostgreSQL only very rarely passes non- default typmods to the input/receive functions--possibly only during COPY operations. (Those were the only way I was able to test this change.) In most other cases where a typmod is used, PostgreSQL relies on a typmod application cast in a separate step, not on passing the typmod to input/receive. PL/Java is already usable to implement typmodin, typmodout, and cast functions, so in limited testing it seems possible already to do types with typmods, maybe as long as COPY operations on them are not needed. Therefore, add an example that illustrates it./Merge issue fix. Certain later-detected annotation errors were being output with no source location info, probably because of that javac (new with 7? see also habit of throwing away symbol tables between rounds. Merge branch workaround/REL1_5_STABLE-BASE/sourcelocs/Merge issue fix. Certain later-detected annotation errors were being output with no source location info, probably because of that javac (new with 7? see also habit of throwing away symbol tables between rounds. Merge branch workaround/REL1_5_STABLE-BASE/sourcelocs into REL1_5_STABLE./Catch compiler-caused classcast confusion. When the compiler hasnt made sense of an annotated element because of some error in the source, it may pass the annotation processor an element of an unexpected type. The right response seems to be to silently return (before anything that risks a class cast exception), as the compiler will produce its own messages about what the true problem was./Call getSQLType earlier for errors sake. Unmappable types can be discovered when building the deployStrings for a function, which normally happens too late for good error messages if javac throws stuff away between rounds. So, just make the messages, if any, happen early, by having FunctionImpl call its deployStrings from characterize./Invoke characterize methods earlier. When this step was done as part of generateDescriptor (which only runs once in the final round), any errors reported by characterize() were being shown with no source location info ... apparently because javac (since 7?) throws symbol tables away between rounds./Merge branch bug/REL1_5_STABLE-BASE/issue92 into REL1_5_STABLE/Merge branch bug/REL1_5_STABLE-BASE/issue92/Now passes issue 92 test./Merge pull request from tada/workaround/master/modelerrors Improve message in strange javac error case./Cover other possible javac-error case. Another case was possible that wouldnt have created a message. I still cant test this now, because javac wont mess up when it knows Im looking./"
,,0.3681,pljava,"Merge branch bug/REL1_5_STABLE/tupdescleak into REL1_5_STABLE Eliminate TupleDesc reference leak warnings at uses of composite UDTs; also commit a test class from an old pgFoundry bug report 1010962 different issue, but also TupleDesc reference leak warnings, and it runs without any now, so in it goes as a regression test./Plug composite UDT TupleDesc leak. In the composite case, UDT was keeping a reference to the types TupleDesc, causing PostgreSQLs reference counter to report a leak. Not a growing, memory leak: only one TupleDesc for each type would be kept. Of more concern would be how to invalidate it if the underlying type is altered. More convincing to just grab it from the type cache whenever needed. More at: branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and for base UDT if no other type mapping found. Addresses issue The strategy of registering base UDTs on the first call to their input/output/send/recv functions breaks down if the first reference in a session to such a type is one that doesnt involve calling those functions (for example, an existing table has a column of that type, and a query wants to pass it to a Java function accepting that type; PostgreSQL has no reason to think it should call an I/O function in that case). This change adds one more step to the rules in Type_fromOid. If no previous step succeeded, and just before punting to String, take a close look at the type to see if it could be a Base UDT. Thats a tedious check that involves following the types input/ output/receive/send Oids via prolang back to their language Oids, and (one could stop here by assuming the language will always be named java or javaU, but if not) from there to the languages call handler C function and its dynamic library path, which should match PL/Javas. A future optimization could cache language Oids that are found to refer to PL/Java, but it might not be needed often enough to matter./"
,,0.3664,pljava,"Merge pull request from TwentyOneSolutions/REL1_5_STABLE Clarifies init-sequence error hint about JVM library file name, which can be somewhat different between platforms./Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and for base UDT if no other type mapping found. Addresses issue The strategy of registering base UDTs on the first call to their input/output/send/recv functions breaks down if the first reference in a session to such a type is one that doesnt involve calling those functions (for example, an existing table has a column of that type, and a query wants to pass it to a Java function accepting that type; PostgreSQL has no reason to think it should call an I/O function in that case). This change adds one more step to the rules in Type_fromOid. If no previous step succeeded, and just before punting to String, take a close look at the type to see if it could be a Base UDT. Thats a tedious check that involves following the types input/ output/receive/send Oids via prolang back to their language Oids, and (one could stop here by assuming the language will always be named java or javaU, but if not) from there to the languages call handler C function and its dynamic library path, which should match PL/Javas. A future optimization could cache language Oids that are found to refer to PL/Java, but it might not be needed often enough to matter./Accommodate Windowsish printf format differences. Windows sets int long int32, int64 ""long long"". jni_md.h on Windows defines jint as long, jlong as long long. The gcc printf format checker in mingw notices these things. To keep it quiet, cast to known types and use corresponding formats. The debug messages are elogs, not ereports, hence not candidates for localization, so the format macro can be used directly. If localization were needed, the formats would need %s with the number-to-string conversion done in a separate step./Merge pull request from tada/chore/master/debuglevels Make DEBUG1 quieter. Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the initial load message that identifies PL/Java and JVM versions. (This is NOTICE if PL/Java is explicitly LOADed, so its seen by default, but in other cases you can now see it by enabling DEBUG1, and not mixed in with a lot of other stuff.)/Make DEBUG1 quieter. Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the initial load message that identifies PL/Java and JVM versions. (This is NOTICE if PL/Java is explicitly LOADed, so its seen by default, but in other cases you can now see it by enabling DEBUG1, and not mixed in with a lot of other stuff.)/"
,,0.1155,pljava,"Merge pull request from tada/chore/REL1_5_STABLE/debuglevels Keep making DEBUG1 quieter./Keep making DEBUG1 quieter. These sites were missed in commit 1eb3bd8, trying to get the PL/Java-loaded-versions announcement to be the only thing at DEBUG1./"
,,0.4244,pljava,"Merge pull request from tada/bug/REL1_5_STABLE/loapi Do away with never-documented, long-broken LargeObject code./Do away with never-documented LargeObject code. In the run-up to releasing 1.5.0, the code to do with large objects was looked over in a very conservative and cautious way, as fits code that was never documented or presented as API and didnt have any test coverage, with little way of knowing whether some client code somewhere in the wild might have been developed around it. So, it got carefully updated to 64-bit offsets, and even had a vulnerability reported because it hadnt been updated to honor the object access controls added in 9.0. What all that very conservative analysis failed to notice was, thanks to a change made back in 77bfc34, coupled with the absence of test coverage, it has been about eleven years since the last chance anyone ever had of doing anything useful with a LargeObject instance. That makes the decision to do away with it much easier. In all the PostgreSQL versions PL/Java currently supports, all the functions needed to manipulate large objects are already exposed in SQL and usable through the JDBC/SPI, without any specific effort needed in PL/Java. For programming convenience, some later version (after Java 7 becomes the minimum requirement) could add a simple utility method to turn an integer LO fd from lo_open into a SeekableByteChannel that could then be used without further trips through SPI, but even that would be about optimization and convenience, not functionality./"
,,0.1102,pljava,"Merge pull request from tada/chore/REL1_5_STABLE/debuglevels Keep making DEBUG1 quieter./Keep making DEBUG1 quieter. These sites were missed in commit 1eb3bd8, trying to get the PL/Java-loaded-versions announcement to be the only thing at DEBUG1./"
,,0.4244,pljava,"Merge pull request from tada/bug/REL1_5_STABLE/loapi Do away with never-documented, long-broken LargeObject code./Do away with never-documented LargeObject code. In the run-up to releasing 1.5.0, the code to do with large objects was looked over in a very conservative and cautious way, as fits code that was never documented or presented as API and didnt have any test coverage, with little way of knowing whether some client code somewhere in the wild might have been developed around it. So, it got carefully updated to 64-bit offsets, and even had a vulnerability reported because it hadnt been updated to honor the object access controls added in 9.0. What all that very conservative analysis failed to notice was, thanks to a change made back in 77bfc34, coupled with the absence of test coverage, it has been about eleven years since the last chance anyone ever had of doing anything useful with a LargeObject instance. That makes the decision to do away with it much easier. In all the PostgreSQL versions PL/Java currently supports, all the functions needed to manipulate large objects are already exposed in SQL and usable through the JDBC/SPI, without any specific effort needed in PL/Java. For programming convenience, some later version (after Java 7 becomes the minimum requirement) could add a simple utility method to turn an integer LO fd from lo_open into a SeekableByteChannel that could then be used without further trips through SPI, but even that would be about optimization and convenience, not functionality./"
,,0.4262,pljava,"Merge pull request from tada/bug/REL1_5_STABLE/loapi Do away with never-documented, long-broken LargeObject code./Do away with never-documented LargeObject code. In the run-up to releasing 1.5.0, the code to do with large objects was looked over in a very conservative and cautious way, as fits code that was never documented or presented as API and didnt have any test coverage, with little way of knowing whether some client code somewhere in the wild might have been developed around it. So, it got carefully updated to 64-bit offsets, and even had a vulnerability reported because it hadnt been updated to honor the object access controls added in 9.0. What all that very conservative analysis failed to notice was, thanks to a change made back in 77bfc34, coupled with the absence of test coverage, it has been about eleven years since the last chance anyone ever had of doing anything useful with a LargeObject instance. That makes the decision to do away with it much easier. In all the PostgreSQL versions PL/Java currently supports, all the functions needed to manipulate large objects are already exposed in SQL and usable through the JDBC/SPI, without any specific effort needed in PL/Java. For programming convenience, some later version (after Java 7 becomes the minimum requirement) could add a simple utility method to turn an integer LO fd from lo_open into a SeekableByteChannel that could then be used without further trips through SPI, but even that would be about optimization and convenience, not functionality./"
,,0.0772,pljava,Merge pull request from tada/bug/REL1_5_STABLE/pg_upgrade Address and document upgrade procedures./
,,0.2387,pljava,"Annotate Connection methods and add more comments. Add to the methods in SPIConnection that are specified by the Connection API (to make it easier to spot the ones that arent). For those added in JDBC 4.1, the annotation is commented out, as PL/Java 1.5 still strives to be buildable with Java 6. Once the back-compatibility horizon is Java 7 or later, those can be uncommented. It would also be fair to say this has added annotations (or commented-out annotations) through JDBC 4.2, as it didnt add any new Connection methods. The PL/Java-specific and internal methods are now easier to pick out (theyre the ones without annotations), and have some more extensive comments about what theyre doing there. Also moved one method to be nearer the stuff it pertains to. No code changes (except to add the specified generic signature on getTypeMap/setTypeMap). Indentation adjusted in a couple contiguous areas./Merge pull request from pmichalek/bug/REL1_5_STABLE/issue136 PL/Javas internal JDBC driver was forked from pgjdbc a long time ago, and theres a lot wrong with the nativeSQL method. It gives a meaning to backslash that isnt from the SQL or JDBC standards, it has no knowledge of standard JDBC escapes, or the difference between standard-conforming and e-quoted strings, or Unicode strings, or dollar-quoted strings, or continuation of string literals. Bringing it all to spec would be far too much change for a minor PL/Java release. All that being said, this particular quoting issue is a simple, obvious bug among bugs, and has been reported, so it is clearly in somebodys way, so no objection to fixing it here, though it leaves nativeSQL() for now only slightly less wrong./Fix SPIConnection prepareStatement doesnt recognize all parameters when SQL combines single and double quotes/"
,,0.4795,pljava,"Dont repeat yourself with UDT mappings. It was never satisfying to define a UDT in Java through annotations and still have the DDR generator give ""no mapping to an SQL type"" errors for functions accepting or returning that type. It was easy enough (if tedious) to work around by adding explicit type= or annotations, but the DDR generator had all the necessary information to figure that out without such manual help. Now it does, eliminating the tedium illustrated in To accommodate mappings added from the source being compiled, the protoMappings collection is now of TypeMirror instances rather than of Class instances. Still future work: also add implied ordering dependencies for uses of the new type (such as functions that have it as parameter or return types and have to follow the type declaration, as illustrated in or that are named in it as, for example, typmod in/out functions, and have to precede it)./Merge pull request bug/REL1_5_STABLE/issue157 Fix failure of the compile-time SQL generator to recognize bytea as the SQL type corresponding to Javas byte[]. Also eliminates a longstanding warning message./This fixes a problem but not the problem. The name passed to getTypeElement is expected to be a canonical name, but that isnt what Class.getName() returns (or there wouldnt be a Class.getCanonicalName()). However, the problem seems to be deeper; arrays are not listed among the things TypeElements exist to represent. It may be necessary to drill down to the component type and then construct the TypeMirror using getArrayType()./Let annotations give row-type parameters defaults. The annotation can now supply an array of strings as defaultValue for a parameter that has a row type (either the RECORD type, whose structure is unknown, or a named row type). In the case of RECORD, the only default that will be accepted is {} (the array of no strings). While a bit limiting, that is still just the ticket when a RECORD-typed parameter is being used to supply a function with an optional, arbitrary sequence of named, typed parameters. In the case of a named row type, the default should be an array of as many strings as the components of the type, and the strings should be castable to the corresponding component types. The DDR generator has no way to check that at compile time, but PostgreSQL will report the error at jar install time if there is a mismatch./"
,,0.2865,pljava,"Merge pull request from trackjdbc/REL1_5_STABLE/udttypename Supplies one of the short-term improvements suggested in issue getSQLTypeName, and add a test. Provide one of the short-term solutions suggested in issue As the current PreparedStatement implementation does not get the inferred parameter types from PostgreSQL (which became possible with SPI only as recently as PostgreSQL 9.0), its setObject method must make a best effort to map in the other direction, finding the PostgreSQL type that corresponds to the Java parameter value. In one case, this is easily made much more reliable: when the Java parameter value is an SQLData instance (a UDT), and therefore has a getSQLTypeName method, unused until now. Add a test method (in the ComplexTuple UDT example) to confirm that the type is properly mapped when passed as a parameter to a PreparedStatement./"
,,0.2971,pljava,"SQLXML in/out of PreparedStatements / ResultSets. For PreparedStatement.setObject(col, x, Types.SQLXML) to work, its sufficient to mention the type in Oid.c. Getting the type back from the ResultSet already works, thanks to the Type_registerType() already done in SQLXMLImpl.c. However, the test in the getObject(col, SQLXML.class) needed fixing, as it was testing exact class equality, not whether it got an implementation of the desired interface. (In passing, reorder those methods to make clearer what JDBC revision brought them in.) The setObject overload without the explicit Types.SQLXML will not work yet, and simply adding addType(SQLXML.class,Types.SQLXML) in SPIConnection is not sufficient ... because that uses a hash table and therefore also depends on exact class equality; the full grody names of the implementing classes would have to be added. Or the mechanism would have to be fixed. Wondering why the out.updateObject(col, x) works, without giving an explicit type? That result set is already typed (by the column definition list you have to include in the query calling this RECORD-typed function). That method succeeding is /almost/ enough to make a subsequent ps.setObject(col, x) work right (because in succeeding, it primed the s_class2typeId cache in Oid); how would that be for spooky action at a distance? But that doesnt quite happen, because that cache is also a strict-class-equality hash map. At this point, implementing the various (get,set,update}SQLXML methods will be an easy formality, as they can be implemented in terms of the methods taking explicit types, which now work. Alas, this current behavior wont do for a 1.5.x release, because it would actually start producing SQLXML objects by default where old code may be expecting String. Before merging, this will need a way to suppress that automatic mapping but still allow the explicit kind. A subsequent major release can then go the rest of the way./Sort implemented from unimplemented JDBC4 methods. Move those that have some JDBC-allowed behavior (other than throwing a not-supported exception) into the implemented category, even when the JDBC-allowed behavior is to do nothing special. Leave in the unimplemented category just the methods that ought to do something else, but currently throw the not-supported exception. In passing, just provide the natural implementation for isWrapperFor and unwrap; its no more trouble than throwing the exception For ResultSetMetaData, pull up their implementations into AbstractResultSetMetaData, so they dont have to be duplicated in SPIResultSetMetaData and SyntheticResultSetMetaData. Some indentation normalized, only in areas touched./"
,,0.2922,pljava,"Merge pull request from trackjdbc/REL1_5_STABLE/udttypename Supplies one of the short-term improvements suggested in issue getSQLTypeName, and add a test. Provide one of the short-term solutions suggested in issue As the current PreparedStatement implementation does not get the inferred parameter types from PostgreSQL (which became possible with SPI only as recently as PostgreSQL 9.0), its setObject method must make a best effort to map in the other direction, finding the PostgreSQL type that corresponds to the Java parameter value. In one case, this is easily made much more reliable: when the Java parameter value is an SQLData instance (a UDT), and therefore has a getSQLTypeName method, unused until now. Add a test method (in the ComplexTuple UDT example) to confirm that the type is properly mapped when passed as a parameter to a PreparedStatement./"
,,0.3404,pljava,"Dont repeat yourself with UDT mappings. It was never satisfying to define a UDT in Java through annotations and still have the DDR generator give ""no mapping to an SQL type"" errors for functions accepting or returning that type. It was easy enough (if tedious) to work around by adding explicit type= or annotations, but the DDR generator had all the necessary information to figure that out without such manual help. Now it does, eliminating the tedium illustrated in To accommodate mappings added from the source being compiled, the protoMappings collection is now of TypeMirror instances rather than of Class instances. Still future work: also add implied ordering dependencies for uses of the new type (such as functions that have it as parameter or return types and have to follow the type declaration, as illustrated in or that are named in it as, for example, typmod in/out functions, and have to precede it)./"
,,0.0926,realm-java,Tracking latest error handling improvements in core library/
,,0.1576,realm-java,"Tracking latest error handling improvements in core library/Changes due to improved error handling in core library. Group no longer has an is_valid() method. From now on, Group instances are always valid./Fixes due to changed Group and SharedGroup constructors in core library/Fixed create of Group(byte[]). Enabled all GroupTest tests and added new test./"
,,0.0813,realm-java,Added testcases for Mixed float and double/
,,0.0778,realm-java,Exception File::OpenError renamed to File::AccessError/
,,0.0818,realm-java,Exception File::OpenError renamed to File::AccessError/
,,0.0765,realm-java,DOS line endings eliminated. Pelase avoid reintroducing them./
,,0.14300000000000002,realm-java,"Now throws exception when calling a method on a closed Group() Updated tutorial and showcase a bit./A config step has been introduced into the build procedure. The main reason is that it allows reliable uninstallation, but there are several other benefits too. Also, support for running in debug mode has been improved./DOS line endings eliminated. Pelase avoid reintroducing them./Bugfix: mem-leak removed/"
,,0.0786,realm-java,DOS line endings eliminated. Pelase avoid reintroducing them./
,,0.1458,realm-java,"Fixes for: A config step has been introduced into the build procedure./A config step has been introduced into the build procedure. The main reason is that it allows reliable uninstallation, but there are several other benefits too. Also, support for running in debug mode has been improved./DOS line endings eliminated. Pelase avoid reintroducing them./"
,,0.2456,realm-java,merge conflicts fixed/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java2 into Breaking-updates/Merge branch develop of github.com:Tightdb/tightdb_java2 into Breaking-updates Conflicts: tightdb-java-test/src/test/java/com/tightdb/JNICloseTest.java tightdb-java-test/src/test/java/com/tightdb/JNIQueryTest.java tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java tightdb-java-test/src/test/java/com/tightdb/JNITableInsertTest.java tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSearchTest.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSortTest.java tightdb-java-test/src/test/java/com/tightdb/experiment/SetIndexTest.java tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java tightdb_jni/src/com_tightdb_Group.cpp tightdb_jni/src/com_tightdb_table.cpp/Merge pull request from Tightdb/develop-exceptions Exceptions handling added/Exception handling added for SharedGroup (untested)/
,,0.4384,realm-java,merge conflicts fixed/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java2 into Breaking-updates/Merge branch develop of github.com:Tightdb/tightdb_java2 into Breaking-updates Conflicts: tightdb-java-test/src/test/java/com/tightdb/JNICloseTest.java tightdb-java-test/src/test/java/com/tightdb/JNIQueryTest.java tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java tightdb-java-test/src/test/java/com/tightdb/JNITableInsertTest.java tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSearchTest.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSortTest.java tightdb-java-test/src/test/java/com/tightdb/experiment/SetIndexTest.java tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java tightdb_jni/src/com_tightdb_Group.cpp tightdb_jni/src/com_tightdb_table.cpp/Merge branch develop of github.com:Tightdb/tightdb_java2 into Breaking-updates Conflicts: tightdb-java-test/src/test/java/com/tightdb/JNICloseTest.java tightdb-java-test/src/test/java/com/tightdb/JNIQueryTest.java tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java tightdb-java-test/src/test/java/com/tightdb/JNITableInsertTest.java tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSearchTest.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSortTest.java tightdb-java-test/src/test/java/com/tightdb/experiment/SetIndexTest.java tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java tightdb_jni/src/com_tightdb_Group.cpp tightdb_jni/src/com_tightdb_table.cpp/Merge pull request from Tightdb/dev-equals Added com.tightdb.Table.equals() and fixed com.tightdb.Group.equals(/Merge pull request from hovoere/file_exceptions File exceptions/Updated group exceptions to be RuntimeExceptions/Merge pull request from Tightdb/develop-exceptions Exceptions handling added/Fixed SubTableDefinition to check for wrong columnIndex and exceptions. And some refactoring. Changed OutOfMemory Exception til com.tightdb.OutOfMemory/Added test cases for all Exceptions that native interface can throw./Added exception handling for Group (untested)/Merge branch develop into Breaking-updates/Added parameter checks to all Table methods. (lacking testcases) Changed Exception for invalid Table form IllegalArgumentException to InvalidStateException./
,,0.2198,realm-java,merge conflicts fixed/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java2 into Breaking-updates/Merge branch develop of github.com:Tightdb/tightdb_java2 into Breaking-updates Conflicts: tightdb-java-test/src/test/java/com/tightdb/JNICloseTest.java tightdb-java-test/src/test/java/com/tightdb/JNIQueryTest.java tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java tightdb-java-test/src/test/java/com/tightdb/JNITableInsertTest.java tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSearchTest.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSortTest.java tightdb-java-test/src/test/java/com/tightdb/experiment/SetIndexTest.java tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java tightdb_jni/src/com_tightdb_Group.cpp tightdb_jni/src/com_tightdb_table.cpp/Merge pull request from Tightdb/develop-exceptions Exceptions handling added/Exception handling for Table (not tested)/
,,0.4564,realm-java,"merge conflicts fixed/Merge remote-tracking branch Tightdb/Breaking-updates into Breaking-updates Conflicts: .JNI-h-file-generation.launch/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java into breaking-updates Conflicts: doc/ref/data/group_ref.yaml/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java2 into Breaking-updates/Merge branch develop of github.com:Tightdb/tightdb_java2 into Breaking-updates Conflicts: tightdb-java-test/src/test/java/com/tightdb/JNICloseTest.java tightdb-java-test/src/test/java/com/tightdb/JNIQueryTest.java tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java tightdb-java-test/src/test/java/com/tightdb/JNITableInsertTest.java tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSearchTest.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSortTest.java tightdb-java-test/src/test/java/com/tightdb/experiment/SetIndexTest.java tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java tightdb_jni/src/com_tightdb_Group.cpp tightdb_jni/src/com_tightdb_table.cpp/Merge pull request from Tightdb/dev-equals Added com.tightdb.Table.equals() and fixed com.tightdb.Group.equals(/Fixed bug in Group.equals(). Added Table.equals and tests./Merge pull request from Tightdb/develop-exceptions Exceptions handling added/Fixed merge bug./Added exception handling for Group (untested)/Merge branch develop into Breaking-updates/Fixed leak in group.writeToFile. The string for the filename was leaked./ BREAKING CHANGE: Group() now takes a new OpenMode parameter and not a boolean. It now supports multiple ways to open a group. (ReadOnly, ReadWrite, WriteNoCreate) + Added Group.Commit()/"
,,0.3013,realm-java,merge conflicts fixed/Merge remote-tracking branch Tightdb/Breaking-updates into Breaking-updates Conflicts: pom.xml/Fixed merge conflicts/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java into breaking-updates/Merge pull request from Tightdb/breaking2 Breaking2 in Breaking-updates/Merge branch breaking2 of github.com:Tightdb/tightdb_java into breaking2/
,,0.2875,realm-java,"merge conflicts fixed/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java into breaking-updates Conflicts: doc/ref/data/group_ref.yaml/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java2 into Breaking-updates/Merge pull request from mekjaer/master Merging changes from develop into Breaking-updates + ref doc setup. Many changes, please review/Example Util changed to ExampleHelper to avoid conflict with internal.Util/"
,,0.2684,realm-java,"Merge branch Breaking-updates of github.com:Tightdb/tightdb_java into breaking-updates Conflicts: doc/ref/data/group_ref.yaml/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java2 into Breaking-updates/Merge pull request from mekjaer/master Merging changes from develop into Breaking-updates + ref doc setup. Many changes, please review/Example Util changed to ExampleHelper to avoid conflict with internal.Util/"
,,0.2684,realm-java,"Merge branch Breaking-updates of github.com:Tightdb/tightdb_java into breaking-updates Conflicts: doc/ref/data/group_ref.yaml/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java2 into Breaking-updates/Merge pull request from mekjaer/master Merging changes from develop into Breaking-updates + ref doc setup. Many changes, please review/Example Util changed to ExampleHelper to avoid conflict with internal.Util/"
,,0.2424,realm-java,"Merge branch Breaking-updates of github.com:Tightdb/tightdb_java into breaking-updates Conflicts: doc/ref/data/group_ref.yaml/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java2 into Breaking-updates/Merge remote-tracking branch Tightdb/Breaking-updates into Breaking-updates Conflicts: doc/changes.txt/Merge pull request from mekjaer/master Merging changes from develop into Breaking-updates + ref doc setup. Many changes, please review/minor fixes./"
,,0.3524,realm-java,"renamed exception/add exception. Throw it when wrong type is acessed from Mixed type/merge conflicts fixed/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java into breaking-updates Conflicts: doc/ref/data/group_ref.yaml/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java2 into Breaking-updates/Merge branch develop of github.com:Tightdb/tightdb_java2 into Breaking-updates Conflicts: tightdb-java-test/src/test/java/com/tightdb/JNICloseTest.java tightdb-java-test/src/test/java/com/tightdb/JNIQueryTest.java tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java tightdb-java-test/src/test/java/com/tightdb/JNITableInsertTest.java tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSearchTest.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSortTest.java tightdb-java-test/src/test/java/com/tightdb/experiment/SetIndexTest.java tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java tightdb_jni/src/com_tightdb_Group.cpp tightdb_jni/src/com_tightdb_table.cpp/Merge pull request from Tightdb/dev-fixleak Fixed leak in Query/Query could leak./Table.close() now private (added private_debug_close() instead. Added better support for detecting valid View and Query after close of table. Still not completely tested, also missing core-support./"
,,0.445,realm-java,"merge conflicts fixed/Merge remote-tracking branch Tightdb/Breaking-updates into Breaking-updates Conflicts: pom.xml/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java into breaking-updates Conflicts: doc/ref/data/group_ref.yaml/Merge pull request from mekjaer/ref-doc-breaking Ref doc breaking + group.isEmpty() added/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java2 into Breaking-updates/Merge branch develop of github.com:Tightdb/tightdb_java2 into Breaking-updates Conflicts: tightdb-java-test/src/test/java/com/tightdb/JNICloseTest.java tightdb-java-test/src/test/java/com/tightdb/JNIQueryTest.java tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java tightdb-java-test/src/test/java/com/tightdb/JNITableInsertTest.java tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSearchTest.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSortTest.java tightdb-java-test/src/test/java/com/tightdb/experiment/SetIndexTest.java tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java tightdb_jni/src/com_tightdb_Group.cpp tightdb_jni/src/com_tightdb_table.cpp/Merge branch develop of github.com:Tightdb/tightdb_java2 into Breaking-updates Conflicts: tightdb-java-test/src/test/java/com/tightdb/JNICloseTest.java tightdb-java-test/src/test/java/com/tightdb/JNIQueryTest.java tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java tightdb-java-test/src/test/java/com/tightdb/JNITableInsertTest.java tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSearchTest.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSortTest.java tightdb-java-test/src/test/java/com/tightdb/experiment/SetIndexTest.java tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java tightdb_jni/src/com_tightdb_Group.cpp tightdb_jni/src/com_tightdb_table.cpp/Merge pull request from Tightdb/dev-equals Added com.tightdb.Table.equals() and fixed com.tightdb.Group.equals(/fix Group.equals()/Fixed bug in Group.equals(). Added Table.equals and tests./ BREAKING CHANGE: Group() now takes a new OpenMode parameter and not a boolean. It now supports multiple ways to open a group. (ReadOnly, ReadWrite, WriteNoCreate) + Added Group.Commit()/Added exception for getTable(null) and getTable(""""). Updated an example to use new addColumn() methods./"
,,0.5733,realm-java,"merge conflicts fixed/Merge remote-tracking branch Tightdb/Breaking-updates into Breaking-updates Conflicts: .JNI-h-file-generation.launch/Merge remote-tracking branch Tightdb/Breaking-updates into Breaking-updates Conflicts: pom.xml/merged breaking-updates and resolved conflicts/merge conflict fixed/Merge pull request from hovoere/query_fixes Updated query examples and added exception to subtable.. Also updated some aggregates in the examples/Fixed merge conflicts/Updated query examples and added exception to subtable/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java into breaking-updates/Merge pull request from Tightdb/breaking2 Breaking2 in Breaking-updates/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java into breaking-updates Conflicts: doc/ref/data/group_ref.yaml/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java2 into Breaking-updates/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java2 into Breaking-updates Conflicts: .gitignore tightdb-java-test/src/test/java/com/tightdb/JNITableTest.java tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java/Merge branch develop of github.com:Tightdb/tightdb_java2 into Breaking-updates Conflicts: tightdb-java-test/src/test/java/com/tightdb/JNICloseTest.java tightdb-java-test/src/test/java/com/tightdb/JNIQueryTest.java tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java tightdb-java-test/src/test/java/com/tightdb/JNITableInsertTest.java tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSearchTest.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSortTest.java tightdb-java-test/src/test/java/com/tightdb/experiment/SetIndexTest.java tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java tightdb_jni/src/com_tightdb_Group.cpp tightdb_jni/src/com_tightdb_table.cpp/Merge pull request from Tightdb/dev-fixleak Fixed leak in Query/Query could leak./Merge pull request from mekjaer/mekjaer-dev Merging changes from develop into Breaking-updates + Showcase example now uses built-in toString()/Merge pull request from mekjaer/master Merging changes from develop into Breaking-updates + ref doc setup. Many changes, please review/"
,,0.5888,realm-java,"merge conflicts fixed/Merge pull request from mekjaer/master_new lookup reimplemented and fixed test cases for column type/lookup reimplemented and fixed test cases for column type/Added where() to TableOrView interface and updated testcase/Merge remote-tracking branch Tightdb/Breaking-updates into Breaking-updates Conflicts: .JNI-h-file-generation.launch/Merge remote-tracking branch Tightdb/Breaking-updates into Breaking-updates Conflicts: pom.xml/Merge pull request from mekjaer/Breaking-updates Master merged into Breaking-updates + SharedGroup examples/Merge branch master of github.com:Tightdb/tightdb_java into Breaking-updates Conflicts: tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java tightdb-java-test/src/test/java/com/tightdb/JNIViewTest.java/Merge pull request from hovoere/dev_into_breaking Merged develop into Breaking/Merged develop into Breaking/Fixed merge conflicts/Fixed merge conflicts/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java into breaking-updates/Merge pull request from Tightdb/breaking2 Breaking2 in Breaking-updates/Merge branch breaking2 of github.com:Tightdb/tightdb_java into breaking2/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java into breaking-updates Conflicts: doc/ref/data/group_ref.yaml/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java2 into Breaking-updates/Merge pull request from mekjaer/Breaking-updates Breaking updates lookup outcommented in table and tableview + fixes in quick benchmark tests/Merge branch develop of github.com:Tightdb/tightdb_java2 into Breaking-updates Conflicts: tightdb-java-test/src/test/java/com/tightdb/JNICloseTest.java tightdb-java-test/src/test/java/com/tightdb/JNIQueryTest.java tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java tightdb-java-test/src/test/java/com/tightdb/JNITableInsertTest.java tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSearchTest.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSortTest.java tightdb-java-test/src/test/java/com/tightdb/experiment/SetIndexTest.java tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java tightdb_jni/src/com_tightdb_Group.cpp tightdb_jni/src/com_tightdb_table.cpp/Merge pull request from Tightdb/dev-fixleak Fixed leak in Query/Merge remote-tracking branch Tightdb/develop into dev-fixleak/Query could leak./Merge pull request from mekjaer/master prevent crash when providing null as byte[] in typed and avoid NullPointerException in exception in dyn and sort in read trans/fixed the immutable on sorting/Merge pull request from mekjaer/mekjaer-dev Merging changes from develop into Breaking-updates + Showcase example now uses built-in toString()/Merge remote-tracking branch Tightdb/Breaking-updates into Breaking-updates Conflicts: doc/changes.txt/Merge branch develop into Breaking-updates Conflicts: tightdb-java-core/src/main/java/com/tightdb/Table.java tightdb-java-test/src/test/java/com/tightdb/experiment/GroupToStringTest.java/Merge pull request from mekjaer/master Merging changes from develop into Breaking-updates + ref doc setup. Many changes, please review/Renaming to adjustColumnValues. Added exception thrown in JNI/Merge branch develop into Breaking-updates/"
,,0.6211,realm-java,"Lookup reenabled on typed table. Test case added, Check for null otherwise core crash/merge conflicts fixed/Merge pull request from mekjaer/master_new lookup reimplemented and fixed test cases for column type/lookup reimplemented and fixed test cases for column type/Added where() to TableOrView interface and updated testcase/Fixed testcase bug in date-test/debugging datebug fixed one/Merge remote-tracking branch Tightdb/Breaking-updates into Breaking-updates Conflicts: .JNI-h-file-generation.launch/Merge remote-tracking branch Tightdb/Breaking-updates into Breaking-updates Conflicts: pom.xml/Merge pull request from hovoere/dev_into_breaking Merged develop into Breaking/Merged develop into Breaking/Fixed merge conflicts/Fixed merge conflicts/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java into breaking-updates/Merge pull request from Tightdb/breaking2 Breaking2 in Breaking-updates/Merge branch breaking2 of github.com:Tightdb/tightdb_java into breaking2/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java into breaking-updates Conflicts: doc/ref/data/group_ref.yaml/merged develop into breaking/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java2 into Breaking-updates/Merge pull request from mekjaer/Breaking-updates Breaking updates lookup outcommented in table and tableview + fixes in quick benchmark tests/Merge branch develop of github.com:Tightdb/tightdb_java2 into Breaking-updates Conflicts: tightdb-java-test/src/test/java/com/tightdb/JNICloseTest.java tightdb-java-test/src/test/java/com/tightdb/JNIQueryTest.java tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java tightdb-java-test/src/test/java/com/tightdb/JNITableInsertTest.java tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSearchTest.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSortTest.java tightdb-java-test/src/test/java/com/tightdb/experiment/SetIndexTest.java tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java tightdb_jni/src/com_tightdb_Group.cpp tightdb_jni/src/com_tightdb_table.cpp/Merge branch develop of github.com:Tightdb/tightdb_java2 into Breaking-updates Conflicts: tightdb-java-test/src/test/java/com/tightdb/JNICloseTest.java tightdb-java-test/src/test/java/com/tightdb/JNIQueryTest.java tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java tightdb-java-test/src/test/java/com/tightdb/JNITableInsertTest.java tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSearchTest.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSortTest.java tightdb-java-test/src/test/java/com/tightdb/experiment/SetIndexTest.java tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java tightdb_jni/src/com_tightdb_Group.cpp tightdb_jni/src/com_tightdb_table.cpp/Merge pull request from Tightdb/dev-equals Added com.tightdb.Table.equals() and fixed com.tightdb.Group.equals(/Fixed bug in Group.equals(). Added Table.equals and tests./Merge pull request from Tightdb/dev-fixleak Fixed leak in Query/Merge remote-tracking branch Tightdb/develop into dev-fixleak/Query could leak./Merge branch develop of github.com:Tightdb/tightdb_java2 into Breaking-updates Conflicts: .gitignore doc/changes.txt tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java/Merge remote-tracking branch Tightdb/develop into develop-exceptions Conflicts: tightdb_jni/src/com_tightdb_table.cpp/Fixed type errors/Merge pull request from mekjaer/master prevent crash when providing null as byte[] in typed and avoid NullPointerException in exception in dyn and sort in read trans/fixed the immutable on sorting/line breaks/exception handling when insert null as byte[]. Dyn and typed/merge fixes/Merge pull request from mekjaer/mekjaer-dev Merging changes from develop into Breaking-updates + Showcase example now uses built-in toString()/line break/Table.close() now private (added private_debug_close() instead. Added better support for detecting valid View and Query after close of table. Still not completely tested, also missing core-support./Merge remote-tracking branch Tightdb/Breaking-updates into Breaking-updates Conflicts: doc/changes.txt/Merge branch develop into Breaking-updates Conflicts: tightdb-java-core/src/main/java/com/tightdb/Table.java tightdb-java-test/src/test/java/com/tightdb/experiment/GroupToStringTest.java/Enabled and fixed testcases for column type tests./Renaming to adjustColumnValues. Added exception thrown in JNI/Merge branch develop into Breaking-updates/"
,,0.2397,realm-java,"Merge branch Breaking-updates of github.com:Tightdb/tightdb_java2 into Breaking-updates/Merge pull request from mekjaer/master Merging changes from develop into Breaking-updates + ref doc setup. Many changes, please review/Merge branch develop into Breaking-updates/Merge branch develop of github.com:Tightdb/tightdb_java2 into Breaking-updates/Fixed initialisation to be threadsafe. Updated load of library file for Windows (must look into this again later created Asana task)./"
,,0.0618,realm-java,merge conflicts fixed/
,,0.2633,realm-java,"merge conflicts fixed/Merge branch Breaking-updates of github.com:Tightdb/tightdb_java2 into Breaking-updates/Merge pull request from mekjaer/master Merging changes from develop into Breaking-updates + ref doc setup. Many changes, please review/Merged develop into breaking updates and updated test case correspondingly/"
,,0.1535,realm-java,"Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/Merge pull request from mekjaer/lock-sharedgroup Checking for missing db, if lock file exist, and throws corresponding exception. Test case for that/BUG fixed: crash could occur when a Group was garbage collected and Tables was still in use./"
,,0.1715,realm-java,"Eliminate warnings relating to `MAX_JLONG`. First warning was eliminated by add suffix `LL` to the constant. This is necessary becuase `long long` is the smallest and only type that ANSI guarantees is 64 bits. Likewise, `MAX_JINT` must have an `L` suffix, because `long` is the smallest type that ANSI guarantees is 32 bits. The second and last warning was removed by using `util::int_less_than_or_equal()` (a utility function created precisely for this purpose)./Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/"
,,0.2361,realm-java,Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/more lines breaks/subtable sort test case added + try fail added more places/Merge pull request from mekjaer/doc-fixes Doc fixes/Merge pull request from mekjaer/mixed-runtime-exc add exception. Throw it when wrong type is acessed from Mixed type/
,,0.1451,realm-java,Error message in constant/moved check to java and changed to illegalArgument exception/Merge pull request from mekjaer/gc-issue indent issue/indent issue/Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/Merge branch master of github.com:Tightdb/tightdb_java into group-readonly-bug/
,,0.1034,realm-java,"Changed NullPointerException to IllegalArgumentException when its an argument thats wrong./Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/Merge branch master of github.com:Tightdb/tightdb_java into group-readonly-bug/debug added. Removed class reference in jni TR output, just the pointer now/"
,,0.2545,realm-java,"Changed NullPointerException to IllegalArgumentException when its an argument thats wrong./Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/Merge branch master of github.com:Tightdb/tightdb_java into group-readonly-bug/debug added. Removed class reference in jni TR output, just the pointer now/cleanup + tighter testcase/fixed constructor issue in test case/fixed merge conflicts/Merge pull request from mekjaer/set-string-null throw exception when setting null on string + test cases/throw exception when setting null on string + test cases/enabled test for table.lookup. Throws more specific exceptions. Non-breaking as they are subclasses of RuntimeException/BUG fixed: crash could occur when a Group was garbage collected and Tables was still in use./fixed merge-conflicts/"
,,0.0744,realm-java,fixed some conflicts/Fixed wrong usage of ViewHolder pattern. Fixed bad practise when inflating views./
,,0.198,realm-java,"in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/"
,,0.1909,realm-java,"in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/"
,,0.1927,realm-java,"in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/"
,,0.1855,realm-java,"in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/"
,,0.3163,realm-java,"Handle PK when calling RealmSchemas remove/rename (#2663) * Handle PK when calling RealmSchemas remove/rename * RealmSchema.remove() should remove the field from PK table. * RealmSchema.rename() should change the corresponding row in the PK table. Fix in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/Integer/Long type can be null. 2. The object with nil primary key can be updated. 3. Migration checks if existing nullable type is set to be nullable in existing file. If not, throws RealmMigrationNeeded. 4. Duplicated null as PrimaryKey throws RealmPrimaryKeyConstraintException. 5. When a new empty row is added, the default value checked for duplicated is still the same empty string ("""") at Table.addEmptyRow() 6. Since there isnt equivalent term for Optional in Java 7 yet, nullable PK types are configured as following in this PR. | String PK | Number PK | Primitive PK | Table Column | Nullable | Nullable | Not Nullable |/Merge pull request from realm/lk/fix-doc Fix javadoc/Fix javadoc/Merge pull request from micronax/patch-1 Fixed wrong method name in exception/Fixed wrong method name in exception Fixed wrong method name in exception/Merge pull request from realm/mc/bug/2368 Correct checking in DynamicRealmObject.setList/Correct checking in DynamicRealmObject.setList * Fix * Check equality of Realm in DynamicRealmObject setters to avoid risks mentioned 2) in"
,,0.2337,realm-java,"Optimistic opening of a Realm file (#3013) We have anecdotal evidence that multiple processes might be open for the same app. We have not been able to verify this, but the result matches the ""IncompatibleLockFile"" errors reported in This happens if the two processes have two versions of Realm (e.g. during app upgrades). This PR is based on our assumption that such an overlap is not intentional and only happens because one process is started before the previous was completely shut down. So this PR introduces an optimistic opening scheme where we retry for 3 second before crashing as before./"
,,0.2215,realm-java,"JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./"
,,0.341,realm-java,"Optimistic opening of a Realm file (#3013) We have anecdotal evidence that multiple processes might be open for the same app. We have not been able to verify this, but the result matches the ""IncompatibleLockFile"" errors reported in This happens if the two processes have two versions of Realm (e.g. during app upgrades). This PR is based on our assumption that such an overlap is not intentional and only happens because one process is started before the previous was completely shut down. So this PR introduces an optimistic opening scheme where we retry for 3 second before crashing as before./JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./"
,,0.3498,realm-java,"Optimistic opening of a Realm file (#3013) We have anecdotal evidence that multiple processes might be open for the same app. We have not been able to verify this, but the result matches the ""IncompatibleLockFile"" errors reported in This happens if the two processes have two versions of Realm (e.g. during app upgrades). This PR is based on our assumption that such an overlap is not intentional and only happens because one process is started before the previous was completely shut down. So this PR introduces an optimistic opening scheme where we retry for 3 second before crashing as before./JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./Print path info of File::AccessError (#2768)/"
,,0.2148,realm-java,"Optimistic opening of a Realm file (#3013) We have anecdotal evidence that multiple processes might be open for the same app. We have not been able to verify this, but the result matches the ""IncompatibleLockFile"" errors reported in This happens if the two processes have two versions of Realm (e.g. during app upgrades). This PR is based on our assumption that such an overlap is not intentional and only happens because one process is started before the previous was completely shut down. So this PR introduces an optimistic opening scheme where we retry for 3 second before crashing as before./"
,,0.2259,realm-java,"JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./"
,,0.0795,realm-java,Update core to 2.0.0-rc4 (#3384) * And with some code cleanup. * Throw an runtime exception when input java bytes array cannot be read. * Update Object Store to solve the breaking change caused failure. See * Use instead since it seems a gcc bug hangs encryption releated tests with enabled in JNI build./Merge pull request from realm/merge-78ccde-to-master Fix merge from 78ccde to master/
,,0.0754,realm-java,Update core to 2.0.0-rc4 (#3384) * And with some code cleanup. * Throw an runtime exception when input java bytes array cannot be read. * Update Object Store to solve the breaking change caused failure. See * Use instead since it seems a gcc bug hangs encryption releated tests with enabled in JNI build./
,,0.069,realm-java,Update core to 2.0.0-rc4 (#3384) * And with some code cleanup. * Throw an runtime exception when input java bytes array cannot be read. * Update Object Store to solve the breaking change caused failure. See * Use instead since it seems a gcc bug hangs encryption releated tests with enabled in JNI build./
,,0.0639,realm-java,Merge pull request from realm/merge-6d0712-to-master Fix merge from 6d0712 to master/fix warnings reported by ErrorProne (#4341)/
,,0.1192,realm-java,Support empty input to in and alwaysTrue and alwaysFalse (#5898) * Support empty input to in and two new predicates: alwaysTrue and alwaysFalse * Fix spelling mistakes in docs * Kotlin docs should match java docs/
,,0.0681,realm-java,Fix bug when using distinct() and count() (#6062)/
,,0.0609,rocksdb,fixed conflict in java/Makefile/
,,0.0903,rocksdb,Merge pull request from nbougalis/nullderef Avoid dereferencing a null field/Avoid dereferencing a null field/Merge pull request from dalgaaf/wip-da-SCA-20141001 Fix some issues from SCA/Merge pull request from dalgaaf/wip-da-SCA-20140930 Various SCA fixes/document_db.cc: fix assert Check for lhs and not twice for rhs. Fix for: [utilities/document/document_db.cc:36] [utilities/document/document_db.cc:36]: (style) Same expression on both sides of &&. Signed-off-by: Danny Al-Gaaf memory leak during index creation/
,,0.1329,rocksdb,Merge pull request from dalgaaf/wip-da-SCA-20140930 Various SCA fixes/in_table_factory.cc: use correct format specifier Use %zu instead of %zd since size_t and uint32_t are unsigned. Fix for: [table/plain_table_factory.cc:55]: (warning) %zd in format string (no. 1) requires ssize_t but the argument type is size_t {aka unsigned long}. [table/plain_table_factory.cc:58]: (warning) %zd in format string (no. 1) requires ssize_t but the argument type is size_t {aka unsigned long}. Signed-off-by: Danny Al-Gaaf
,,0.4007,rocksdb,"Fix build Summary: Build broken by Test Plan: make all Reviewers: sdong Subscribers: dhruba, leveldb Differential Revision: pull request from charsyam/feature/type-1 fix typos/fix typos/rocksdb: Fixed Dead assignment and Dead initialization scan-build warnings Summary: This diff contains trivial fixes for 6 scan-build warnings: **db/c_test.c** `db` variable is never read. Removed assignment. scan-build report: **db/db_iter.cc** `skipping` local variable is assigned to false. Then in the next switch block the only ""non return"" case assign `skipping` to true, the rest cases dont use it and all do return. scan-build report: **db/log_reader.cc** In `bool Reader::SkipToInitialBlock()` `offset_in_block` local variable is assigned to 0 `if (offset_in_block > kBlockSize 6)` and then never used. Removed the assignment and renamed it to `initial_offset_in_block` to avoid confusion. scan-build report: In `bool Reader::ReadRecord(Slice* record, std::string* scratch)` local variable `in_fragmented_record` in switch case `kFullType` block is assigned to false and then does `return` without use. In the other switch case `kFirstType` block the same `in_fragmented_record` is assigned to false, but later assigned to true without prior use. Removed assignment for both cases. scan-build reprots: **table/plain_table_key_coding.cc** Local variable `user_key_size` is assigned when declared. But then in both places where it is used assigned to `static_cast<uint32_t>(key.size() 8)`. Changed to initialize the variable to the proper value in declaration. scan-build report: **tools/db_stress.cc** Missing `break` in switch case block. This seems to be a bug. Added missing `break`. Test Plan: Make sure all tests are passing and scan-build does not report Dead assignment and Dead initialization bugs. ```lang=bash % make check % make analyze ``` Reviewers: meyering, igor, kradhakrishnan, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.0639,rocksdb,Merge pull request from charsyam/feature/type-1 fix typos/fix typos/
,,0.2032,rocksdb,"Merge pull request from charsyam/feature/type-1 fix typos/fix typos/rocksdb: Fix scan-build memory warning in table/block_based_table_reader.cc Summary: scan-build is reporting two memory leak bugs in `table/block_based_table_reader.cc`. They are both false positives. In both cases we allocate memory in `ReadBlockFromFile` if `s.ok()`. Then after the function `ReadBlockFromFile` returns we check for the same variable if `s.ok()` and then use the memory that was allocated. The bugs reported by scan-build is if `ReadBlockFromFile` allocates memory and returns, but for some reason status `s` is not the same and `s.ok() true`. In this case scan-build is concerned that memory owner transfer is not explicit. I modified `ReadBlockFromFile` to accept `std::unique_ptr<Block>*` as a parameter, instead of raw pointer. scan-build reports: Test Plan: Make sure scan-build does not report these bugs and all tests are passing. ```lang=bash % make check % make analyze ``` Reviewers: sdong, lgalanis, meyering, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.3391,rocksdb,"Avoid naming conflict of EntryType Summary: Fix build break on travis build: $ OPT=-DTRAVIS V=1 make unity && make clean && OPT=-DTRAVIS V=1 make db_test && ./db_test ...... In file included from unity.cc:65:0: ./table/plain_table_key_coding.cc: In member function ërocksdb::Status rocksdb::PlainTableKeyDecoder::NextPrefixEncodingKey(const char*, const char*, rocksdb::ParsedInternalKey*, rocksdb::Slice*, size_t*, bool*)í: ./table/plain_table_key_coding.cc:224:3: error: reference to ëEntryTypeí is ambiguous EntryType entry_type; ^ In file included from ./db/table_properties_collector.h:9:0, from ./db/builder.h:11, from ./db/builder.cc:10, from unity.cc:1: ./include/rocksdb/table_properties.h:81:6: note: candidates are: enum rocksdb::EntryType enum EntryType { ^ In file included from unity.cc:65:0: ./table/plain_table_key_coding.cc:16:6: note: enum rocksdb::{anonymous}::EntryType enum EntryType : unsigned char { ^ ./table/plain_table_key_coding.cc:231:51: error: ëentry_typeí was not declared in this scope const char* pos DecodeSize(key_ptr, limit, &entry_type, &size); ^ make: *** [unity.o] Error 1 Test Plan: OPT=-DTRAVIS V=1 make unity And make sure it doesnt break anymore. Reviewers: yhchiang, kradhakrishnan, igor Reviewed By: igor Subscribers: leveldb, dhruba Differential Revision: Fixed Dead assignment and Dead initialization scan-build warnings Summary: This diff contains trivial fixes for 6 scan-build warnings: **db/c_test.c** `db` variable is never read. Removed assignment. scan-build report: **db/db_iter.cc** `skipping` local variable is assigned to false. Then in the next switch block the only ""non return"" case assign `skipping` to true, the rest cases dont use it and all do return. scan-build report: **db/log_reader.cc** In `bool Reader::SkipToInitialBlock()` `offset_in_block` local variable is assigned to 0 `if (offset_in_block > kBlockSize 6)` and then never used. Removed the assignment and renamed it to `initial_offset_in_block` to avoid confusion. scan-build report: In `bool Reader::ReadRecord(Slice* record, std::string* scratch)` local variable `in_fragmented_record` in switch case `kFullType` block is assigned to false and then does `return` without use. In the other switch case `kFirstType` block the same `in_fragmented_record` is assigned to false, but later assigned to true without prior use. Removed assignment for both cases. scan-build reprots: **table/plain_table_key_coding.cc** Local variable `user_key_size` is assigned when declared. But then in both places where it is used assigned to `static_cast<uint32_t>(key.size() 8)`. Changed to initialize the variable to the proper value in declaration. scan-build report: **tools/db_stress.cc** Missing `break` in switch case block. This seems to be a bug. Added missing `break`. Test Plan: Make sure all tests are passing and scan-build does not report Dead assignment and Dead initialization bugs. ```lang=bash % make check % make analyze ``` Reviewers: meyering, igor, kradhakrishnan, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision: remove always-true assertions Summary: Remove some always-true assertions. They provoke these compilation failures: table/plain_table_key_coding.cc:279:20: error: comparison of unsigned expression >= 0 is always true [-Werror=type-limits] db/version_set.cc:336:15: error: comparison of unsigned expression >= 0 is always true [-Werror=type-limits] * table/plain_table_key_coding.cc (rocksdb): Remove assertion that unsigned type variable is >= 0. * db/version_set.cc (DoGenerateLevelFilesBrief): Likewise. Test Plan: Run ""make EXTRA_CXXFLAGS=-W and see fewer errors. Reviewers: ljin, sdong, igor.sugak, igor Reviewed By: igor Subscribers: dhruba Differential Revision:"
,,0.4156,rocksdb,"rocksdb: Fixed Dead assignment and Dead initialization scan-build warnings Summary: This diff contains trivial fixes for 6 scan-build warnings: **db/c_test.c** `db` variable is never read. Removed assignment. scan-build report: **db/db_iter.cc** `skipping` local variable is assigned to false. Then in the next switch block the only ""non return"" case assign `skipping` to true, the rest cases dont use it and all do return. scan-build report: **db/log_reader.cc** In `bool Reader::SkipToInitialBlock()` `offset_in_block` local variable is assigned to 0 `if (offset_in_block > kBlockSize 6)` and then never used. Removed the assignment and renamed it to `initial_offset_in_block` to avoid confusion. scan-build report: In `bool Reader::ReadRecord(Slice* record, std::string* scratch)` local variable `in_fragmented_record` in switch case `kFullType` block is assigned to false and then does `return` without use. In the other switch case `kFirstType` block the same `in_fragmented_record` is assigned to false, but later assigned to true without prior use. Removed assignment for both cases. scan-build reprots: **table/plain_table_key_coding.cc** Local variable `user_key_size` is assigned when declared. But then in both places where it is used assigned to `static_cast<uint32_t>(key.size() 8)`. Changed to initialize the variable to the proper value in declaration. scan-build report: **tools/db_stress.cc** Missing `break` in switch case block. This seems to be a bug. Added missing `break`. Test Plan: Make sure all tests are passing and scan-build does not report Dead assignment and Dead initialization bugs. ```lang=bash % make check % make analyze ``` Reviewers: meyering, igor, kradhakrishnan, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.0945,rocksdb,Merge pull request from zhangyybuaa/fix_hdfs_error Fix build error with hdfs/fix ToString() not declared error/
,,0.1214,rocksdb,"table/block_based_table_builder.cc: intentional fallthrough comment to match gcc pattern Summary: The gcc-7 code for parsing comments (libcpp/lex.c) didnt match the intentional fallthough in this comment. table/block_based_table_builder.cc: In member function void rocksdb::BlockBasedTableBuilder::WriteRawBlock(const rocksdb::Slice&, rocksdb::CompressionType, rocksdb::BlockHandle*): table/block_based_table_builder.cc:754:22: error: this statement may fall through [-Werror=implicit-fallthrough=] assert(false); ^ table/block_based_table_builder.cc:756:7: note: here case kCRC32c: { ^~~~ cc1plus: all warnings being treated as errors Closes Differential Revision: D4318817 Pulled By: yiwu-arbug fbshipit-source-id: e67d171/"
,,0.128,rocksdb,"Promote CompactionFilter* accessors to ColumnFamilyOptionsInterface (#3461) Summary: When adding CompactionFilter and CompactionFilterFactory settings to the Java layer, ColumnFamilyOptions was modified directly instead of ColumnFamilyOptionsInterface. This meant that the old-stye Options monolith was left behind. This patch fixes that, by: promoting the CompactionFilter + CompactionFilterFactory setters from ColumnFamilyOptions ColumnFamilyOptionsInterface adding getters in ColumnFamilyOptionsInterface implementing setters in Options implementing getters in both ColumnFamilyOptions and Options adding testcases reusing a test CompactionFilterFactory by moving it to a common location Pull Request resolved: Differential Revision: D13278788 Pulled By: sagar0 fbshipit-source-id: 72602c6eb97dc80734e718abb5e2e9958d3c753b/"
,,0.1199,rocksdb,"Promote CompactionFilter* accessors to ColumnFamilyOptionsInterface (#3461) Summary: When adding CompactionFilter and CompactionFilterFactory settings to the Java layer, ColumnFamilyOptions was modified directly instead of ColumnFamilyOptionsInterface. This meant that the old-stye Options monolith was left behind. This patch fixes that, by: promoting the CompactionFilter + CompactionFilterFactory setters from ColumnFamilyOptions ColumnFamilyOptionsInterface adding getters in ColumnFamilyOptionsInterface implementing setters in Options implementing getters in both ColumnFamilyOptions and Options adding testcases reusing a test CompactionFilterFactory by moving it to a common location Pull Request resolved: Differential Revision: D13278788 Pulled By: sagar0 fbshipit-source-id: 72602c6eb97dc80734e718abb5e2e9958d3c753b/"
,,0.1285,rocksdb,"Document the interaction between disableWAL and BackupEngine (#5071) Summary: BackupEngine relies on write-ahead logs to back up the memtable. Disabling write-ahead logs can result in backups failing to preserve unflushed keys. This PR updates the documentation to specify this behavior, and suggest always flushing the memtable when write-ahead logs are disabled. Pull Request resolved: Differential Revision: D14524124 Pulled By: miasantreble fbshipit-source-id: 635f855f8a42ad60273b5efd226139b511e3e5d5/"
,,0.1299,rocksdb,"Document the interaction between disableWAL and BackupEngine (#5071) Summary: BackupEngine relies on write-ahead logs to back up the memtable. Disabling write-ahead logs can result in backups failing to preserve unflushed keys. This PR updates the documentation to specify this behavior, and suggest always flushing the memtable when write-ahead logs are disabled. Pull Request resolved: Differential Revision: D14524124 Pulled By: miasantreble fbshipit-source-id: 635f855f8a42ad60273b5efd226139b511e3e5d5/"
