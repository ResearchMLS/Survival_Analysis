Topic_no,Keywords,Contrib,System,Text
9,"call, close, failure, buffer, error, handle, file, include, read, implement, datum, open, crash, clean, return, avoid, case, empty, backup, thing",0.0717,conscrypt,Stop allocating empty arrays. Bug: 3166662 Change-Id: I151de373b2bf53786d19824336fa434c02b0b0e8/
,,0.1931,conscrypt,"Mark env as intentionally unused. (#420) When CHECK_ERROR_QUEUE_ON_RETURN is disabled, we need to inform the compiler that we intended not to use env./Add compile option for checking error queue. (#416) We need to ensure that the BoringSSL error stack is clear when returning from native functions, otherwise a later function might inspect the error stack and interpret it incorrectly. Adds the compile option CONSCRYPT_CHECK_ERROR_QUEUE which enables the macro CHECK_ERROR_QUEUE_ON_RETURN. That macro, when enabled, creates a class that checks the error queue is empty in its destructor. The macro has been added to almost every native method called from Java, enforcing that the error queue is empty when we return from native code back to Java code. Adds the gradle property checkErrorQueue to enable the code and adds it to the Travis config. Also fixes a couple places found by this checking that we were failing to clear the error queue after handling errors./Clean up exception throwing in native code. (#417) Change throwExceptionIfNecessary to throwExceptionFromBoringSSLError. The definition changes from throwing an exception if theres an error on the stack to having a precondition of having an error on the stack. This makes its behavior and the expected usage more clear (it always results in an exception pending). This also should let us know if were encountering return-failure-but-dont-stack-an-error situations that we didnt know about. Normalize function names to throwFooException. Ensure that we always return immediately after throwing an exception. Some call sites allowed the exception-throwing branch to fall through to the return statement from a non-throwing branch, which is unclear, since that return statement is useless, and runs the risk of additional code being inserted after the exception. Fixes"
,,0.1234,conscrypt,"Add logging macros that work on all platforms. (#462) This adds CONSCRYPT_LOG_X macros that redirect to either ALOG on Android or fprintf(stderr) on non-Android. In the future, we could use these to allow users to register a logging callback and send the logs to a destination of their choice (via java.util.Logger or log4j or what have you), but for now well keep it simple. Fixes"
,,0.1332,conscrypt,"Add logging macros that work on all platforms. (#462) This adds CONSCRYPT_LOG_X macros that redirect to either ALOG on Android or fprintf(stderr) on non-Android. In the future, we could use these to allow users to register a logging callback and send the logs to a destination of their choice (via java.util.Logger or log4j or what have you), but for now well keep it simple. Fixes"
,,0.2643,conscrypt,"Add a function to force an engine read. (#453) The SSLEngine implementation sometimes need to prompt BoringSSL to process any incoming TLS data in order to determine whether there is enough data to produce plaintext. We previously were reading into a zero-byte buffer to do this, but that causes ambiguity in return values because a return of 0 from SSL_read() could mean a failure (generally EOF) or could mean a successful read of 0 bytes (which would be expected when reading into a zero-byte array). Instead, use SSL_peek. Fixes some variable as const. (#469) Im not sure why we made SSL_get0_peer_certificates return non-const pointer. In preparation for fixing that, tag the field as const in Conscrypt./Avoid reaching into BoringSSL internals. (#464) Ideally Conscrypt wouldnt be trying to access bits of SSL_SESSION anyway (bug but use the accessor in the meantime. The accessor is new, so its protected by BORINGSSL_API_VERSION for the time being./Add logging macros that work on all platforms. (#462) This adds CONSCRYPT_LOG_X macros that redirect to either ALOG on Android or fprintf(stderr) on non-Android. In the future, we could use these to allow users to register a logging callback and send the logs to a destination of their choice (via java.util.Logger or log4j or what have you), but for now well keep it simple. Fixes size_t to avoid sign-compare warnings (#451)/Parse ASN1_TIME structures in constructors. (#446) The legacy OpenSSL APIs in BoringSSL dont parse ASN1_TIME values until theyre used, which means that the existing code could explode in the middle of X509Certificate.getNotAfter() and similar Date-returning calls, and those calls arent declared to throw anything. Instead, read and cache the values in the constructor, where we can throw a relevant exception if necessary. We have to clone the Date values when returning them because Date is mutable./"
,,0.3171,conscrypt,"Update short buffer handling. (#440) This fixes a number of problems in Conscrypts ciphers when they are given an output buffer that is too small for the output. We didnt specifically handle CIPHER_R_BUFFER_TOO_SMALL errors from BoringSSL, so we threw RuntimeException on encountering them. We should be throwing ShortBufferException. Raw ChaCha20 didnt check for a short buffer at all, so it just passed the arrays down to native code, which could cause crashes or other weird behavior. EVP_AEAD ciphers used update() to only record data that needed to be encrypted and then did the actual encrypting in doFinal(). This combined with our implementation that implements doFinal() as a combination of updateInternal() + doFinalInternal() led to a situation where if the buffer passed to doFinal() was too small, the data would get added to the buffer to be encrypted in updateInternal() and then doFinalInternal() call would fail, which would mean a future call to doFinal() with the same data would end up encrypting that data twice. This call pattern is used by some internal CipherSpi methods from OpenJDK, so you could see it in practice even if the caller did nothing wrong. Also add tests around short buffer handling./"
,,0.2179,conscrypt,"Add a function to force an engine read. (#453) The SSLEngine implementation sometimes need to prompt BoringSSL to process any incoming TLS data in order to determine whether there is enough data to produce plaintext. We previously were reading into a zero-byte buffer to do this, but that causes ambiguity in return values because a return of 0 from SSL_read() could mean a failure (generally EOF) or could mean a successful read of 0 bytes (which would be expected when reading into a zero-byte array). Instead, use SSL_peek. Fixes SSLEngine bug with multiple heap buffer inputs. (#485) When the SSLEngine overload that accepts an array of ByteBuffers is called with heap buffers for both the source and destination, those heap buffers are converted to direct buffers for passing to JNI by way of copying them to a single temporary direct buffer. A bug in the reading of the encrypted data out of BoringSSL resulted in the data being placed at the wrong offset of the temporary buffer, meaning that the output data was prefixed in the worst case by the plaintext. Fixes CVE-2017-13309./Remove exception throwing on bad hostnames. (#478) Testing on Android has indicated that there are too many things that rely on passing whatever string has been passed to them to setHostname() and arent prepared to get an exception (including IP addresses, single-element hostnames, and whatnot) for it to be reasonable to throw an exception here. Settle for documenting what the behavior of passing an invalid hostname is./"
,,0.3886,conscrypt,"Add a function to force an engine read. (#453) The SSLEngine implementation sometimes need to prompt BoringSSL to process any incoming TLS data in order to determine whether there is enough data to produce plaintext. We previously were reading into a zero-byte buffer to do this, but that causes ambiguity in return values because a return of 0 from SSL_read() could mean a failure (generally EOF) or could mean a successful read of 0 bytes (which would be expected when reading into a zero-byte array). Instead, use SSL_peek. Fixes ASN1_TIME structures in constructors. (#446) The legacy OpenSSL APIs in BoringSSL dont parse ASN1_TIME values until theyre used, which means that the existing code could explode in the middle of X509Certificate.getNotAfter() and similar Date-returning calls, and those calls arent declared to throw anything. Instead, read and cache the values in the constructor, where we can throw a relevant exception if necessary. We have to clone the Date values when returning them because Date is mutable./Update short buffer handling. (#440) This fixes a number of problems in Conscrypts ciphers when they are given an output buffer that is too small for the output. We didnt specifically handle CIPHER_R_BUFFER_TOO_SMALL errors from BoringSSL, so we threw RuntimeException on encountering them. We should be throwing ShortBufferException. Raw ChaCha20 didnt check for a short buffer at all, so it just passed the arrays down to native code, which could cause crashes or other weird behavior. EVP_AEAD ciphers used update() to only record data that needed to be encrypted and then did the actual encrypting in doFinal(). This combined with our implementation that implements doFinal() as a combination of updateInternal() + doFinalInternal() led to a situation where if the buffer passed to doFinal() was too small, the data would get added to the buffer to be encrypted in updateInternal() and then doFinalInternal() call would fail, which would mean a future call to doFinal() with the same data would end up encrypting that data twice. This call pattern is used by some internal CipherSpi methods from OpenJDK, so you could see it in practice even if the caller did nothing wrong. Also add tests around short buffer handling./"
,,0.3227,conscrypt,"Update short buffer handling. (#440) This fixes a number of problems in Conscrypts ciphers when they are given an output buffer that is too small for the output. We didnt specifically handle CIPHER_R_BUFFER_TOO_SMALL errors from BoringSSL, so we threw RuntimeException on encountering them. We should be throwing ShortBufferException. Raw ChaCha20 didnt check for a short buffer at all, so it just passed the arrays down to native code, which could cause crashes or other weird behavior. EVP_AEAD ciphers used update() to only record data that needed to be encrypted and then did the actual encrypting in doFinal(). This combined with our implementation that implements doFinal() as a combination of updateInternal() + doFinalInternal() led to a situation where if the buffer passed to doFinal() was too small, the data would get added to the buffer to be encrypted in updateInternal() and then doFinalInternal() call would fail, which would mean a future call to doFinal() with the same data would end up encrypting that data twice. This call pattern is used by some internal CipherSpi methods from OpenJDK, so you could see it in practice even if the caller did nothing wrong. Also add tests around short buffer handling./"
,,0.4016,conscrypt,"Update handling of empty error queue (#555) Some BoringSSL functions dont make any guarantees about the state of the error queue if they return an error, and in most cases we dont actually care what error occurred. Instead of throwing AssertionError when we encounter an error with no entry in the error queue, throw the default exception type (which is usually RuntimeException). Also removes NativeCrypto.ERR_peek_last_error(), which was only used in tests. We now have the CHECK_ERROR_QUEUE_ON_RETURN macro that serves the same purpose but does it more comprehensively. Fixes TLS 1.3 (#524) Enables support for negotiating TLS 1.3. TLS 1.3 is not enabled unless SSLContext.TLSv1.3 is requested or setEnabledProtocols() is called with a set of values that includes TLSv1.3. Detailed changes: Adds protocol constants for TLS 1.3, and provides SSLContext.TLSv1.3, which has TLS 1.3 enabled by default. Adjusts cipher suite code for TLS 1.3 suites. When enabled, all TLS 1.3 cipher suites are always returned from supportedCipherSuites() and enabledCipherSuites(). Attempts to customize TLS 1.3 cipher suites in setEnabledCipherSuites() are ignored. Splits {SSLEngine,SSLSocket}Test into version-dependent and version-independent tests. The latter remain in {SSLEngine,SSLSocket}Test and the former move into new files {SSLEngine,SSLSocket}VersionCompatibilityTest, which are parameterized to test all combinations of client and server on TLS 1.2 and TLS 1.3. Remove a pile of RI-specific TLS-related expectation declarations from StandardNames. We dont actually verify the behavior of the RI at any point, so it was just making the code more confusing. Fixes"
,,0.3541,conscrypt,"Support TLS 1.3 (#524) Enables support for negotiating TLS 1.3. TLS 1.3 is not enabled unless SSLContext.TLSv1.3 is requested or setEnabledProtocols() is called with a set of values that includes TLSv1.3. Detailed changes: Adds protocol constants for TLS 1.3, and provides SSLContext.TLSv1.3, which has TLS 1.3 enabled by default. Adjusts cipher suite code for TLS 1.3 suites. When enabled, all TLS 1.3 cipher suites are always returned from supportedCipherSuites() and enabledCipherSuites(). Attempts to customize TLS 1.3 cipher suites in setEnabledCipherSuites() are ignored. Splits {SSLEngine,SSLSocket}Test into version-dependent and version-independent tests. The latter remain in {SSLEngine,SSLSocket}Test and the former move into new files {SSLEngine,SSLSocket}VersionCompatibilityTest, which are parameterized to test all combinations of client and server on TLS 1.2 and TLS 1.3. Remove a pile of RI-specific TLS-related expectation declarations from StandardNames. We dont actually verify the behavior of the RI at any point, so it was just making the code more confusing. Fixes"
,,0.18,conscrypt,"Fix X509_verify exceptions (#537) Unexpectedly, X509_verify does not set an entry in the error queue when the signature algorithm in a certificates info doesnt match the algorithm in the signature block, it just returns 0. This trips an AssertionError in throwExceptionFromBoringSSLError, so check for that condition explicitly. Also default to throwing CertificateException instead of RuntimeException when X509_verify encounters an error that we havent explicitly handled. I dont know if there are any such errors in practice, but itll be more correct if there are./"
,,0.4387,conscrypt,"Update handling of empty error queue (#555) Some BoringSSL functions dont make any guarantees about the state of the error queue if they return an error, and in most cases we dont actually care what error occurred. Instead of throwing AssertionError when we encounter an error with no entry in the error queue, throw the default exception type (which is usually RuntimeException). Also removes NativeCrypto.ERR_peek_last_error(), which was only used in tests. We now have the CHECK_ERROR_QUEUE_ON_RETURN macro that serves the same purpose but does it more comprehensively. Fixes d2i_X509_bio and friends to not set an error (#552) BoringSSL recently changed so that d2i_X509_bio doesnt set an error in the error queue when it receives certain garbage inputs. We dont actually care what error is set in the queue (we just end up catching whatever is thrown and throwing CertificateException), so change to tolerate having no error in the queue./Fix X509_verify exceptions (#537) Unexpectedly, X509_verify does not set an entry in the error queue when the signature algorithm in a certificates info doesnt match the algorithm in the signature block, it just returns 0. This trips an AssertionError in throwExceptionFromBoringSSLError, so check for that condition explicitly. Also default to throwing CertificateException instead of RuntimeException when X509_verify encounters an error that we havent explicitly handled. I dont know if there are any such errors in practice, but itll be more correct if there are./Support TLS 1.3 (#524) Enables support for negotiating TLS 1.3. TLS 1.3 is not enabled unless SSLContext.TLSv1.3 is requested or setEnabledProtocols() is called with a set of values that includes TLSv1.3. Detailed changes: Adds protocol constants for TLS 1.3, and provides SSLContext.TLSv1.3, which has TLS 1.3 enabled by default. Adjusts cipher suite code for TLS 1.3 suites. When enabled, all TLS 1.3 cipher suites are always returned from supportedCipherSuites() and enabledCipherSuites(). Attempts to customize TLS 1.3 cipher suites in setEnabledCipherSuites() are ignored. Splits {SSLEngine,SSLSocket}Test into version-dependent and version-independent tests. The latter remain in {SSLEngine,SSLSocket}Test and the former move into new files {SSLEngine,SSLSocket}VersionCompatibilityTest, which are parameterized to test all combinations of client and server on TLS 1.2 and TLS 1.3. Remove a pile of RI-specific TLS-related expectation declarations from StandardNames. We dont actually verify the behavior of the RI at any point, so it was just making the code more confusing. Fixes"
,,0.3541,conscrypt,"Support TLS 1.3 (#524) Enables support for negotiating TLS 1.3. TLS 1.3 is not enabled unless SSLContext.TLSv1.3 is requested or setEnabledProtocols() is called with a set of values that includes TLSv1.3. Detailed changes: Adds protocol constants for TLS 1.3, and provides SSLContext.TLSv1.3, which has TLS 1.3 enabled by default. Adjusts cipher suite code for TLS 1.3 suites. When enabled, all TLS 1.3 cipher suites are always returned from supportedCipherSuites() and enabledCipherSuites(). Attempts to customize TLS 1.3 cipher suites in setEnabledCipherSuites() are ignored. Splits {SSLEngine,SSLSocket}Test into version-dependent and version-independent tests. The latter remain in {SSLEngine,SSLSocket}Test and the former move into new files {SSLEngine,SSLSocket}VersionCompatibilityTest, which are parameterized to test all combinations of client and server on TLS 1.2 and TLS 1.3. Remove a pile of RI-specific TLS-related expectation declarations from StandardNames. We dont actually verify the behavior of the RI at any point, so it was just making the code more confusing. Fixes"
,,0.3797,conscrypt,"Update handling of empty error queue (#555) Some BoringSSL functions dont make any guarantees about the state of the error queue if they return an error, and in most cases we dont actually care what error occurred. Instead of throwing AssertionError when we encounter an error with no entry in the error queue, throw the default exception type (which is usually RuntimeException). Also removes NativeCrypto.ERR_peek_last_error(), which was only used in tests. We now have the CHECK_ERROR_QUEUE_ON_RETURN macro that serves the same purpose but does it more comprehensively. Fixes HAS_AES_HARDWARE inside a loadError check (#567) If loadError null, then the native methods wont link, so we need to ensure we dont call any. The static initializer blocks check this but this inline initialization expression was missed. Fixes TLS 1.3 (#524) Enables support for negotiating TLS 1.3. TLS 1.3 is not enabled unless SSLContext.TLSv1.3 is requested or setEnabledProtocols() is called with a set of values that includes TLSv1.3. Detailed changes: Adds protocol constants for TLS 1.3, and provides SSLContext.TLSv1.3, which has TLS 1.3 enabled by default. Adjusts cipher suite code for TLS 1.3 suites. When enabled, all TLS 1.3 cipher suites are always returned from supportedCipherSuites() and enabledCipherSuites(). Attempts to customize TLS 1.3 cipher suites in setEnabledCipherSuites() are ignored. Splits {SSLEngine,SSLSocket}Test into version-dependent and version-independent tests. The latter remain in {SSLEngine,SSLSocket}Test and the former move into new files {SSLEngine,SSLSocket}VersionCompatibilityTest, which are parameterized to test all combinations of client and server on TLS 1.2 and TLS 1.3. Remove a pile of RI-specific TLS-related expectation declarations from StandardNames. We dont actually verify the behavior of the RI at any point, so it was just making the code more confusing. Fixes"
,,0.2844,conscrypt,"General cleanup (#579) Deal with some new ErrorProne warnings: unnecessary parentheses and importing classes named Builder. Add new cert failure logging to the test logging file so it doesnt pollute the test output./Fix typo in assumption (#578) The tests that relied on this were being skipped in all cases, rather than just when 1.3 would be negotiated./Move libcore.tlswire to org.conscrypt.tlswire (#568) The TLS wire protocol stuff isnt actually used anywhere except in Conscrypt, so move it to our package with the plan to delete it from libcore once this goes into AOSP. Also refactor two identical sets of methods into a single new TlsTester class./Support TLS 1.3 (#524) Enables support for negotiating TLS 1.3. TLS 1.3 is not enabled unless SSLContext.TLSv1.3 is requested or setEnabledProtocols() is called with a set of values that includes TLSv1.3. Detailed changes: Adds protocol constants for TLS 1.3, and provides SSLContext.TLSv1.3, which has TLS 1.3 enabled by default. Adjusts cipher suite code for TLS 1.3 suites. When enabled, all TLS 1.3 cipher suites are always returned from supportedCipherSuites() and enabledCipherSuites(). Attempts to customize TLS 1.3 cipher suites in setEnabledCipherSuites() are ignored. Splits {SSLEngine,SSLSocket}Test into version-dependent and version-independent tests. The latter remain in {SSLEngine,SSLSocket}Test and the former move into new files {SSLEngine,SSLSocket}VersionCompatibilityTest, which are parameterized to test all combinations of client and server on TLS 1.2 and TLS 1.3. Remove a pile of RI-specific TLS-related expectation declarations from StandardNames. We dont actually verify the behavior of the RI at any point, so it was just making the code more confusing. Fixes"
,,0.2251,conscrypt,"Fix ConscryptEngine state machine (#687) The SSLEngine state machine is slightly more complicated than our previous code presumed. After closeInbound() or closeOutbound() are called, isInboundDone() and isOutboundDone() shouldnt immediately return true. Rather, closeInbound() and closeOutbound() indicate the callers intention to never supply any more input data in the given direction, but isInboundDone() and isOutboundDone() indicate that no more output data in the given direction will be produced. This means those methods need to be adjusted to take into account the state of internal plaintext/ciphertext buffers. This simplifies and corrects some of the other code as well. In particular, we no longer have to stash exceptions that are thrown during the handshake, because the caller is expected to see those exceptions and drain the outgoing buffer (which previously they had no way of doing). Fixes"
,,0.1132,conscrypt,"Fixes for issues found by lgtm.com (#706) * KeyManagerFactoryImpl: close opened file stream lgtm.com found an issue where FileInputStream was not closed when setting up a KeyManagerFactoryImpl. * FileClientSessionCache: use IoUtils.closeQuietly lgtm.com found a useless null check because FileInputStream never returns null. However, we can just use our utility function IoUtils.closeQuietly to achieve the same thing that was intended here./"
,,0.2599,conscrypt,"Fix engine socket tests (#707) The engine test system property was being overwritten, which resulted in the engine socket test not actually being executed with the engine socket. This fixes that problem, so :testEngineSocket now actually runs with the engine socket. This revealed several test failures that were all due to the engine and engine socket closing behavior. In particular, the engine wouldnt mark itself as closed when an SSLException was thrown, which it is supposed to per the documentation. This meant that when the engine socket attempted to flush the outgoing buffer, it would just trigger whatever exception had originally caused the problem again, the outgoing buffer wouldnt get flushed, and alerts wouldnt reach the peer. Closing the engine whenever an exception propagates out fixes this problem, along with tolerating a CLOSED status return in the engine socket./Fix ConscryptEngine state machine (#687) The SSLEngine state machine is slightly more complicated than our previous code presumed. After closeInbound() or closeOutbound() are called, isInboundDone() and isOutboundDone() shouldnt immediately return true. Rather, closeInbound() and closeOutbound() indicate the callers intention to never supply any more input data in the given direction, but isInboundDone() and isOutboundDone() indicate that no more output data in the given direction will be produced. This means those methods need to be adjusted to take into account the state of internal plaintext/ciphertext buffers. This simplifies and corrects some of the other code as well. In particular, we no longer have to stash exceptions that are thrown during the handshake, because the caller is expected to see those exceptions and drain the outgoing buffer (which previously they had no way of doing). Fixes"
,,0.0881,Frostwire,"[android] Avoid IndexOutOfBoundsException on BrowsePeerFragment.onLoadFinished() If the BrowsePeerFragment manager *for some reason* returns a null list or an empty list for a given file type, the FileListAdapters visualList will have 0 elements. When AbstractListAdapter.getItem() is triggered it crashes with an IndexOutOfBoundsException. This might be happening between refreshes, as getItem() is often seen asking high indices when the underlying visualList has 0 elements./[android] Fixes"
,,0.075,Frostwire,"[common] removed excess logging, it can hangs the app (specially in Windows)/"
,,0.0731,Frostwire,"[common] removed excess logging, it can hangs the app (specially in Windows)/[common] Bitsnoop/torcache/magnet fix/"
,,0.0648,Frostwire,[desktop] fixed SystemUtilities internal GetJavaWindowHandle for Windows x64/
,,0.0694,Frostwire,[desktop] avoid use of private AWT api in MPlayerOverlayControls/
,,0.0681,Frostwire,[desktop] avoid direct use of eawt FullScreenUtilities class/
,,0.0618,Frostwire,[desktop] fix macOS handling of open files/
,,0.0841,Frostwire,"[common/android] crash fix due to libtorrent.generate_fingerprint param intake the last int tag parameter has to be a number between 0-19, otherwise the string returned contains a character that makes androids crash due to incompatible UTF being generated by libtorrent/"
,,0.0795,javacpp,"Update version in the `pom.xml` file to 0.11-SNAPSHOT * Provide `UByteIndexer` and `UShortIndexer`, treating array and buffer data as unsigned integers, for ease of use * Clean up Windows `java.io.tmpdir` even when program messes with `java.class.path` (issue"
,,0.0806,javacpp,"Merge pull request from mabruce/tempfile-deleter * Clean up Windows `java.io.tmpdir` even when program messes with `java.class.path` (issue javacpp.jar path to temp file deleter Get OS-localized file path to jar file enclosing Loader class, and feed this path to the temp file deleter on Windows instead of java.class.path. If the java program is launched through a dedicated classpath loader, java.class.path may not contain the javacpp jar. By locating the correct jar, this circumstance should be avoided./"
,,0.0761,javacpp,"* Log when `Pointer.deallocator` gets registered, garbage collected, or deallocated manually, if `Logger.isDebugEnabled()` (redirectable to SLF4J) * Make `Pointer implements AutoCloseable` to let us try-with-resources, thus bumping requirements to Java SE 7 and Android 4.0/"
,,0.0792,javacpp,Merge pull request from georgekankava/staging/nested-blocks-of-code-should-not-be-left-empty-fix-1 Do at least something for exceptions we swallow but do not expect/ * Fix swallowed `InterruptedException` (issue bytedeco/javacv#315)/
,,0.0757,javacpp,* Deallocate native memory in a dedicated thread to reduce lock contention (issue
,,0.4524,jna,"Fix wchar_t* return when null Allow Pointer[] as function argument Fix window utils test on osx to avoid os-cast shadows git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix failing argument marshal test git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Start on issue Main thing I wanted to do was get the second parameter to ToNativeConverter.toNative() in there so we dont have future API breakage by adding it later. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Implement (most of) the fixes from issue git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Clean up varargs Add per-field Structure read/write Avoid automatic writes to volatile structure fields Read/wrap function pointers in Structure fields Disallow Memory/Function as declared Structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.244,jna,Fix UnsatisfiedLinkError calling toString on a Library interface git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Clean up varargs Add per-field Structure read/write Avoid automatic writes to volatile structure fields Read/wrap function pointers in Structure fields Disallow Memory/Function as declared Structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1101,jna,"Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.4017,jna,"Dont keep a strong reference to the library proxy Keep a mapping for the proxy on calls to loadLibrary Dont fail if no alpha on shaped window demo Clean up a few comments git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Clean up temp files on w32 Avoid empty paths in search list Add canonical out-of-date jar Clean up ant build script targets git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/library suffix required on w32 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/extract integer type with platform-specific size remove temporary file suffix altogether git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix string decoding bug, add tests git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Native.loadLibrary() no longer requires interface classes to extend Library. If this breaks anything, blame Charles Nutter :-) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Clean up varargs Add per-field Structure read/write Avoid automatic writes to volatile structure fields Read/wrap function pointers in Structure fields Disallow Memory/Function as declared Structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Copy issue fix from v3 branch git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.2332,jna,Fix class cast exception read all TYPE_MAPPERs regardless of access git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow arbitrary callback method names Allow specification of callback type mapper with TYPE_MAPPER Allow write with uninitialized boxed primitives in Structure Fix memory leak with callbacks called from native threads w/no java context Fix Structure derived classes to allow setting TypeMapper git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.3547,jna,"fix indexOf return value git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow Pointer[] as field in Structure Clean up error messages when Structure size calculation fails git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.4333,jna,"Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow Pointer[] as field in Structure Clean up error messages when Structure size calculation fails git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Clean up varargs Add per-field Structure read/write Avoid automatic writes to volatile structure fields Read/wrap function pointers in Structure fields Disallow Memory/Function as declared Structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.2315,jna,Fix class cast exception read all TYPE_MAPPERs regardless of access git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix pointer field read bug git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow arbitrary callback method names Allow specification of callback type mapper with TYPE_MAPPER Allow write with uninitialized boxed primitives in Structure Fix memory leak with callbacks called from native threads w/no java context Fix Structure derived classes to allow setting TypeMapper git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0926,jna,"Fix stdcall callbacks catch all exceptions when invoking callback git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allocate executable memory for callbacks on w32 Synchronize on java callback allocation methods to avoid more complex native synchronization git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/64bit fixes, and add local queue.h for solaris builds git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.3224,jna,"fix indexOf return value git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix solaris build git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Unbreak 64bit sparc support git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/64bit fixes, and add local queue.h for solaris builds git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Remove superfluous exception checks, enable peer access on OSX git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.4393,jna,"Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix wchar_t* return when null Allow Pointer[] as function argument Fix window utils test on osx to avoid os-cast shadows git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/64bit fixes, and add local queue.h for solaris builds git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix int32 definition for 64bit arches git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Clean up varargs Add per-field Structure read/write Avoid automatic writes to volatile structure fields Read/wrap function pointers in Structure fields Disallow Memory/Function as declared Structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1162,jna,Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0686,jna,Fix X11 mappings for 64-bit git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0874,jna,Fix window alpha compositing on X11 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0957,jna,Fix cursor tracking on alpha-masked windows git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0717,jna,fix failure messages in demo git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1532,jna,"Fix X11 keyboard test (XQueryKeymap result is not documented) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0813,jna,Fix window alpha compositing on X11 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1022,jna,"avoid more content dragging on OSX, or warn git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.2285,jna,"Fix javadoc error git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Show drop shadow on OSX BalloonManager Fix NPE on OSX BalloonManager git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Throw UnsupportedOperationException when alpha not available and explain why, if possible git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1578,jna,Fix X11 mappings for 64-bit git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix OSX window transparency for 1.5+/Leopard git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Avoid creating too many windows when setting window mask git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0852,jna,fix bug where struct is incorrectly passed by value instead of by reference git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix window alpha compositing on X11 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1462,jna,"avoid more content dragging on OSX, or warn git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix cursor tracking on alpha-masked windows git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Work around OSX transparent window dragging bug git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0686,jna,Fix X11 mappings for 64-bit git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.3537,jna,"Fix wchar_t* return when null Allow Pointer[] as function argument Fix window utils test on osx to avoid os-cast shadows git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Implement (most of) the fixes from issue git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.3719,jna,"Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0883,jna,Fix arg/result handling for callback values in callbacks git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2262,jna,Allow arbitrary callback method names Allow specification of callback type mapper with TYPE_MAPPER Allow write with uninitialized boxed primitives in Structure Fix memory leak with callbacks called from native threads w/no java context Fix Structure derived classes to allow setting TypeMapper git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1236,jna,Implement (most of) the fixes from issue git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1705,jna,"Fix wchar_t* return when null Allow Pointer[] as function argument Fix window utils test on osx to avoid os-cast shadows git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix swing threading violation in test git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0751,jna,Fix window alpha compositing on X11 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.3785,jna,"Clean up temp files on w32 Avoid empty paths in search list Add canonical out-of-date jar Clean up ant build script targets git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Copy fix for issue from v3 branch git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.3349,jna,Fix stdcall callbacks catch all exceptions when invoking callback git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allocate executable memory for callbacks on w32 Synchronize on java callback allocation methods to avoid more complex native synchronization git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Start on issue Main thing I wanted to do was get the second parameter to ToNativeConverter.toNative() in there so we dont have future API breakage by adding it later. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Implement (most of) the fixes from issue git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Clean up varargs Add per-field Structure read/write Avoid automatic writes to volatile structure fields Read/wrap function pointers in Structure fields Disallow Memory/Function as declared Structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2245,jna,add small struct return by value test Fix issue git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow arbitrary callback method names Allow specification of callback type mapper with TYPE_MAPPER Allow write with uninitialized boxed primitives in Structure Fix memory leak with callbacks called from native threads w/no java context Fix Structure derived classes to allow setting TypeMapper git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2389,jna,Allow arbitrary callback method names Allow specification of callback type mapper with TYPE_MAPPER Allow write with uninitialized boxed primitives in Structure Fix memory leak with callbacks called from native threads w/no java context Fix Structure derived classes to allow setting TypeMapper git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0597,OpenDDS,Properly open ErrorDialog in UI thread./
,,0.0809,pljava,Added plug for bug votes on the jar file specification bug./
,,0.073,pljava,Fixed some issues with Meta-data/
,,0.0751,pljava,Fixed some issues with Meta-data/
,,0.1145,pljava,"For a multi-threaded pljava function we need to adjust stack_base_ptr before calling into the backend to avoid stack depth limit exceeded errors. Previously this was done only on query execution, but we need to do it on iteration of the ResultSet as well. In general it seems that anything operating inside of synchronized(Backend.THREADLOCK) might need to adjust the stack unless its certain the work its doing is trivial and wont invoke check_stack_depth. Unfortunately I dont know enough about when pg calls check_stack_depth to know offhand what is/is not safe. A more thorough audit is required here. Per report from Alexander Wˆhrer./"
,,0.1192,pljava,"When executing a statement, we want to make sure any previous state was cleaned up, so the code was calling close(). This additionally set a closed flag which would throw exceptions later saying that you cant call various methods because the Statement is closed. Its not actually closed, so split the internal cleanup routine to clear() and make close() something that only a user should call./"
,,0.0621,pljava,Fix ambiguity when compiling with Java 6./
,,0.1598,pljava,"Merge pull request from jcflack/bug/master/ddrorder Run deployment descriptors in correct order./Run deployment descriptors in correct order. Previously determined the order of multiple deployment descriptors in a single jar according to the order of those entries as stored in the jar (used in that order for install, and that order reversed for remove). But that wasnt correct. I got my hands on 2003 and 2006 drafts of the SQL/JRT spec and they both clearly say it is the order _as the entries are listed in the manifest_ that matters (again, in that order for install, and the reverse for remove). This should be a welcome improvement, because I had noted back in commit 0edc9e5f that maven doesnt always put things in a jar in the same order, and that was causing the pljava-examples jar to be broken about half the time (for autodeployment anyway). But the manifest is a static file listing the ddrs in the right order, so as long as maven doesnt reorder it while putting it in the jar, that behavior should now be stable./"
,,0.0694,pljava,Merge pull request from jcflack/workaround/master/javac7 Workaround breakage seen with Java 7/
,,0.1137,pljava,"Handle the widening of FuncCallContexts call_cntr. This one is a bit stickier, because the value is passed to Java code that implements ResultSetProvider, an interface in pljava-api. The signature for assignRowValues cant just be changed. Instead, for now, a ResultSetProvider is limited to returning INT_MAX rows, but the limit is checked to ensure a predictable failure. For the future, in the Java 8 world, the ResultSetProvider interface could grow a default method largeAssignRowValues that takes a long row number; the Java 8 default implementation would just signal the same error, and classes implementing the old interface wont break. Alas, PL/Java isnt committed to supporting only Java 8 yet. In fact, the same thing could be done on the quiet: PL/Java could check whether the class implementing ResultSetProvider happens to have a largeAssignRowValues method with the right signature, and use it if present. It would simply have to be covered in documentation, and not formally declared in the interface until the Java support bar moves to Java 8. All of that is future work this change merely checks and enforces an INT_MAX limit./"
,,0.0661,realm-java,Fixes due to some core header files having been moved into subdir /util//
,,0.1817,realm-java,Add quotes around terms in exceptions message (#3221) Close pull request from realm/merge-ecbacf-to-master Fix merge from ecbacf to master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for
,,0.1802,realm-java,Add quotes around terms in exceptions message (#3221) Close pull request from realm/merge-ecbacf-to-master Fix merge from ecbacf to master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for
,,0.1849,realm-java,Add quotes around terms in exceptions message (#3221) Close pull request from realm/merge-ecbacf-to-master Fix merge from ecbacf to master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for
,,0.1754,realm-java,Merge pull request from realm/merge-ecbacf-to-master Fix merge from ecbacf to master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for pull request from realm/lk/fix-typo Fix typo and rename a test./Fix typo and rename a test./
,,0.0898,realm-java,"Work around the memmove bug on Samsung device (#4402) There was a bug for memmove on some Samsung devices. The functions returns ""dest + n"" instead of ""dest"". This has been identified earlier by QT. See: The relevant android bug: This fix try to test if the device have this issue first, if yes, switch to a own implementation of memmove. This fix works for most cases, but since the memmove bug existing in the system, there would be other lib/system call the buggy version of memmove which could still corrupt the memory which means there are still some possibilities that app gets crashed on those devices./Merge pull request from realm/merge-dc09d5-to-master Fix merge from dc09d5 to master/"
,,0.20199999999999999,rocksdb,"BackupableDBTest thread-safe Summary: We need to lock accesses to some TestEnv variables. Otherwise we get failures like Test Plan: make check Reviewers: dhruba, haobo, sdong Reviewed By: haobo CC: leveldb Differential Revision: s/us fixes/DeleteLogFiles in FailOverwritingBackups/More bug fixed introduced by code cleanup/Some fixes to BackupableDB Summary: (1) Report corruption if backup meta file has tailing data that was not read. This should fix: (also, reported similar issue) (2) Dont use OS buffer when copying file to backup directory. We dont need the file in cache since we wont be reading it twice (3) Dont delete newer backups when somebody tries to backup the diverged DB (restore from older backup, add new data, try to backup). Rather, just fail the new backup. Test Plan: backupable_db_test Reviewers: ljin, dhruba, sdong Reviewed By: ljin CC: leveldb, sdong Differential Revision:"
,,0.0534,rocksdb,Merge pull request from EugenePig/java8 suppress JDK8 errors for JDK8 errors for
,,0.1369,rocksdb,"Merge pull request from fyrz/RocksJava-Fix-NativeLibraryLoader [RocksJava] Fix native library loader/[RocksJava] Fix native library loader Summary: Prior to this the native library loader instance didn`t care about a state. So if library loading was called multiple times, multiple copies of the shared object were put into the tmp folder and loaded into the JVM. This changed within this commit to the following behavior: library loading is now synchronized library is loaded within the first call if loading was successful the library loaded sets a flag every subsequent call checks for a boolean flag indicating if there was already a successful attempt Test Plan: Execute example and watch tmp folder while the example is running After this patch only one shared object will be in the tmp folder Usual tests: make rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, ankgup87, yhchiang Subscribers: dhruba Differential Revision: JavaDoc corrections Java8 This commit solves build problems in Java8 due to wrong JavaDoc./Merge pull request from adamretter/bugfix-native-library-loader Use correct classloader in Java NativeLibraryLoader/"
,,0.0985,rocksdb,Merge pull request from fyrz/RocksJava-Test-Fix [RocksJava] Fix JTest issues with enabled assertions. Closes DefaultColumnFamily Memory Fix In the current implementation DefaultColumnFamily will not disown the native handle. As the database handles the lease on the native handle this should be the case./
,,0.0903,rocksdb,Merge pull request from fyrz/RocksJava-NativeLibraryLoader [RocksJava] Fix NativeLibraryLoader/[RocksJava] Fix NativeLibraryLoader Resolve problem while using a temporary data folder Fix test/
,,0.5348,rocksdb,"Refactor to support file_reader_writer on Windows. Summary. A change Has attempted to move common functionality out of platform dependent code to a new facility called file_reader_writer. This includes: perf counters Buffering RateLimiting However, the change did not attempt to refactor Windows code. To mitigate, we introduce new quering interfaces such as UseOSBuffer(), GetRequiredBufferAlignment() and ReaderWriterForward() for pure forwarding where required. Introduce WritableFile got a new method Truncate(). This is to communicate to the file as to how much data it has on close. When space is pre-allocated on Linux it is filled with zeros implicitly, no such thing exist on Windows so we must truncate file on close. When operating in unbuffered mode the last page is filled with zeros but we still want to truncate. Previously, Close() would take care of it but now buffer management is shifted to the wrappers and the file has no idea about the file true size. This means that Close() on the wrapper level must always include Truncate() as well as wrapper __dtor should call Close() and against double Close(). Move buffered/unbuffered write logic to the wrapper. Utilize Aligned buffer class. Adjust tests and implement Truncate() where necessary. Come up with reasonable defaults for new virtual interfaces. Forward calls for RandomAccessReadAhead class to avoid double buffering and locking (double locking in unbuffered mode on WIndows)./"
,,0.537,rocksdb,"Refactor to support file_reader_writer on Windows. Summary. A change Has attempted to move common functionality out of platform dependent code to a new facility called file_reader_writer. This includes: perf counters Buffering RateLimiting However, the change did not attempt to refactor Windows code. To mitigate, we introduce new quering interfaces such as UseOSBuffer(), GetRequiredBufferAlignment() and ReaderWriterForward() for pure forwarding where required. Introduce WritableFile got a new method Truncate(). This is to communicate to the file as to how much data it has on close. When space is pre-allocated on Linux it is filled with zeros implicitly, no such thing exist on Windows so we must truncate file on close. When operating in unbuffered mode the last page is filled with zeros but we still want to truncate. Previously, Close() would take care of it but now buffer management is shifted to the wrappers and the file has no idea about the file true size. This means that Close() on the wrapper level must always include Truncate() as well as wrapper __dtor should call Close() and against double Close(). Move buffered/unbuffered write logic to the wrapper. Utilize Aligned buffer class. Adjust tests and implement Truncate() where necessary. Come up with reasonable defaults for new virtual interfaces. Forward calls for RandomAccessReadAhead class to avoid double buffering and locking (double locking in unbuffered mode on WIndows)./"
,,0.4153,rocksdb,"Avoid some includes in io_posix.h Summary: IO Posix depends on too many .h files. Move most of them to .cc files. Test Plan: make all Reviewers: anthony, rven, IslamAbdelRahman, yhchiang, kradhakrishnan, igor Reviewed By: igor Subscribers: leveldb, dhruba Differential Revision: iOS build Summary: We dont yet have a CI build for iOS, so our iOS compile gets broken sometimes. Most of the errors are from assumption that size_t is 64-bit, while its actually 32-bit on some (all?) iOS platforms. This diff fixes the compile. Test Plan: TARGET_OS=IOS make static_lib Observe there are no warnings Reviewers: sdong, anthony, IslamAbdelRahman, kradhakrishnan, yhchiang Reviewed By: yhchiang Subscribers: dhruba, leveldb Differential Revision: add ReuseWritableFile Add an environment method to reuse an existing file. Provide a generic implementation that does a simple rename + open (writeable), and also a posix variant that is more careful about error handling (if we fail to open, do not rename, etc.). Signed-off-by: Sage Weil users to disable some kill points in db_stress Summary: Give a name for every kill point, and allow users to disable some kill points based on prefixes. The kill points can be passed by db_stress through a command line paramter. This provides a way for users to boost the chance of triggering low frequency kill points This allow follow up changes in crash test scripts to improve crash test coverage. Test Plan: Manually run db_stress with variable values of and Like this: Reviewers: igor, kradhakrishnan, rven, IslamAbdelRahman, yhchiang Reviewed By: yhchiang Subscribers: leveldb, dhruba Differential Revision: compile error on platforms without fallocate() Summary: If a platform doesnt have ROCKSDB_FALLOCATE_PRESENT, then compiler complains: util/env_posix.cc:354:8: error: private field allow_fallocate_ is not used [-Werror,-Wunused-private-field] This was caught by travis. Test Plan: compiles with ROCKSDB_FALLOCATE_PRESENT. Reviewers: sdong Subscribers: dhruba, leveldb Differential Revision: boolean variable to guard fallocate() calls Summary: Added boolean variable to guard fallocate() calls. Set to false to prevent space leaks when tests fail. Test Plan: Compliles Set to false and ran log device tests Reviewers: sdong, lovro, igor Reviewed By: igor Subscribers: dhruba Differential Revision: unused variable of type Status, fixed indentation/Refactor to support file_reader_writer on Windows. Summary. A change Has attempted to move common functionality out of platform dependent code to a new facility called file_reader_writer. This includes: perf counters Buffering RateLimiting However, the change did not attempt to refactor Windows code. To mitigate, we introduce new quering interfaces such as UseOSBuffer(), GetRequiredBufferAlignment() and ReaderWriterForward() for pure forwarding where required. Introduce WritableFile got a new method Truncate(). This is to communicate to the file as to how much data it has on close. When space is pre-allocated on Linux it is filled with zeros implicitly, no such thing exist on Windows so we must truncate file on close. When operating in unbuffered mode the last page is filled with zeros but we still want to truncate. Previously, Close() would take care of it but now buffer management is shifted to the wrappers and the file has no idea about the file true size. This means that Close() on the wrapper level must always include Truncate() as well as wrapper __dtor should call Close() and against double Close(). Move buffered/unbuffered write logic to the wrapper. Utilize Aligned buffer class. Adjust tests and implement Truncate() where necessary. Come up with reasonable defaults for new virtual interfaces. Forward calls for RandomAccessReadAhead class to avoid double buffering and locking (double locking in unbuffered mode on WIndows)./Mmap reads should not return error if reading past file Summary: Currently, mmap returns IOError when user tries to read data past the end of the file. This diff changes the behavior. Now, we return just the bytes that we can, and report the size we returned via a Slice result. This is consistent with non-mmap behavior and also pread() system call. This diff is taken out of D45123. Test Plan: make check Reviewers: sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.1647,rocksdb,"Merge pull request from yuslepukhin/fix_mocktable_id Fix MockTable ID storage/Fix MockTable ID storage On Windows two tests fail that use MockTable: flush_job_test and compaction_job_test with the following message: compaction_job_test_je.exe : Assertion failed: result.size() 4, file c:\dev\rocksdb\rocksdb\table\mock_table.cc, line 110 Investigation reveals that this failure occurs when a 4 byte ID written to a beginning of the physically open file (main contents remains in a in-memory map) can not be read back. The reason for the failure is that the ID is written directly to a WritableFile bypassing WritableFileWriter. The side effect of that is that pending_sync_ never becomes true so the file is never flushed, however, the direct cause of the failure is that the filesize_ member of the WritableFileWriter remains zero. At Close() the file is truncated to that size and the file becomes empty so the ID can not be read back./"
,,0.4683,rocksdb,"Allow users to disable some kill points in db_stress Summary: Give a name for every kill point, and allow users to disable some kill points based on prefixes. The kill points can be passed by db_stress through a command line paramter. This provides a way for users to boost the chance of triggering low frequency kill points This allow follow up changes in crash test scripts to improve crash test coverage. Test Plan: Manually run db_stress with variable values of and Like this: Reviewers: igor, kradhakrishnan, rven, IslamAbdelRahman, yhchiang Reviewed By: yhchiang Subscribers: leveldb, dhruba Differential Revision: pull request from yuslepukhin/return_noerror Mmap reads should not return error if reading past file/Mmap reads should not return error if reading past file Summary: This mirrors Currently, mmap returns IOError when user tries to read data past the end of the file. This diff changes the behavior. Now, we return just the bytes that we can, and report the size we returned via a Slice result. This is consistent with non-mmap behavior and also pread() system call./Address code review comments both GH and internal Fix compilation issues on GCC/CLANG Address Windows Release test build issues due to Sync/Refactor to support file_reader_writer on Windows. Summary. A change Has attempted to move common functionality out of platform dependent code to a new facility called file_reader_writer. This includes: perf counters Buffering RateLimiting However, the change did not attempt to refactor Windows code. To mitigate, we introduce new quering interfaces such as UseOSBuffer(), GetRequiredBufferAlignment() and ReaderWriterForward() for pure forwarding where required. Introduce WritableFile got a new method Truncate(). This is to communicate to the file as to how much data it has on close. When space is pre-allocated on Linux it is filled with zeros implicitly, no such thing exist on Windows so we must truncate file on close. When operating in unbuffered mode the last page is filled with zeros but we still want to truncate. Previously, Close() would take care of it but now buffer management is shifted to the wrappers and the file has no idea about the file true size. This means that Close() on the wrapper level must always include Truncate() as well as wrapper __dtor should call Close() and against double Close(). Move buffered/unbuffered write logic to the wrapper. Utilize Aligned buffer class. Adjust tests and implement Truncate() where necessary. Come up with reasonable defaults for new virtual interfaces. Forward calls for RandomAccessReadAhead class to avoid double buffering and locking (double locking in unbuffered mode on WIndows)./Make WinEnv::NowMicros return system time Previous change for the function made use of the QueryPerformanceCounter to return microseconds values that do not repeat as std::chrono::system_clock returned values that made auto_roll_logger_test fail. The interface documentation does not state that we need to return system time describing the return value as a number of microsecs since some moment in time. However, because on Linux it is implemented using gettimeofday various pieces of code (such as GenericRateLimiter) took advantage of that and make use of NowMicros() as a system timestamp. Thus the previous change broke rate_limiter_test on Windows. In addition, the interface name NowMicros() suggests that it is actually a timestamp so people use it as such. This change makes use of the new system call on Windows that returns system time with required precision. This change preserves the fix for auto_roll_logger_test and fixes rate_limiter_test. Note that DBTest.RateLimitingTest still fails due to a separately reported issue./"
,,0.0819,rocksdb,fixes 1228: rockdbjni loadLibraryFromJarToTemp fails when file is already present (#1232) overriding existing library in tmp folder/
,,0.0737,rocksdb,Add Status to RocksDBException so that meaningful function result Status from the C++ API isnt lost (#1273)/
,,0.1583,rocksdb,"Fix backupable db test Summary: started using SizeFileBytes(), so our dummy log file implementation should stop asserting that this function isnt called. Closes Differential Revision: D4376055 Pulled By: ajkr fbshipit-source-id: 2854d89/Fail BackupEngine::Open upon meta-file read error Summary: We used to treat any failure to read a backups meta-file as if the backup were corrupted; however, we should distinguish corruption errors from errors in the backup Env. This fixes an issue where callers would get inconsistent results from GetBackupInfo() if they called it on an engine that encountered Env error during initialization. Now we fail Initialize() in this case so callers cannot invoke GetBackupInfo() on such engines. Closes Differential Revision: D4318573 Pulled By: ajkr fbshipit-source-id: f7a7c54/"
,,0.0966,rocksdb,add direct_io and compaction_readahead_size in db_stress Summary: add direct_io and compaction_readahead_size in db_stress test direct_io under db_stress with compaction_readahead_size enabled to capture bugs found in production. `./db_stress Closes Differential Revision: D4604514 Pulled By: IslamAbdelRahman fbshipit-source-id: ebbf0ee/
,,0.1934,rocksdb,"Reunite checkpoint and backup core logic Summary: These code paths forked when checkpoint was introduced by copy/pasting the core backup logic. Over time they diverged and bug fixes were sometimes applied to one but not the other (like fix to include all relevant WALs for 2PC), or it required extra effort to fix both (like fix to forge CURRENT file). This diff reunites the code paths by extracting the core logic into a function, CreateCustomCheckpoint(), that is customizable via callbacks to implement both checkpoint and backup. Related changes: flush_before_backup is now forcibly enabled when 2PC is enabled Extracted CheckpointImpl class definition into a header file. This is so the function, CreateCustomCheckpoint(), can be called by internal rocksdb code but not exposed to users. Implemented more functions in DummyDB/DummyLogFile (in backupable_db_test.cc) that are used by CreateCustomCheckpoint(). Closes Differential Revision: D4622986 Pulled By: ajkr fbshipit-source-id: 157723884236ee3999a682673b64f7457a7a0d87/backup garbage collect shared_checksum tmp files Summary: previously we only cleaned up .tmp files under ""shared/"" and ""private/"" directories in case the previous backup failed. we need to do the same for ""shared_checksum/""; otherwise, the subsequent backup will fail if it tries to backup at least one of the same files. Closes Differential Revision: D4805599 Pulled By: ajkr fbshipit-source-id: eaa6088/"
,,0.3872,rocksdb,"Add a Close() method to DB to return status when closing a db Summary: Currently, the only way to close an open DB is to destroy the DB object. There is no way for the caller to know the status. In one instance, the destructor encountered an error due to failure to close a log file on HDFS. In order to prevent silent failures, we add DB::Close() that calls CloseImpl() which must be implemented by its descendants. The main failure point in the destructor is closing the log file. This patch also adds a Close() entry point to Logger in order to get status. When DBOptions::info_log is allocated and owned by the DBImpl, it is explicitly closed by DBImpl::CloseImpl(). Closes Differential Revision: D6698158 Pulled By: anand1976 fbshipit-source-id: 9468e2892553eb09c4c41b8723f590c0dbd8ab7d/"
,,0.3185,rocksdb,"Handle error return from WriteBuffer() Summary: There are a couple of places where we swallow any error from WriteBuffer() in SwitchMemtable() and DBImpl::CloseImpl(). Propagate the error up in those cases rather than ignoring it. Closes Differential Revision: D6879954 Pulled By: anand1976 fbshipit-source-id: 2ef88b554be5286b0a8bad7384ba17a105395bdb/Fix WriteBatch rep_ format for RangeDeletion records Summary: This is a small amount of general cleanup I made while experimenting with Closes Differential Revision: D6788365 Pulled By: yiwu-arbug fbshipit-source-id: 2716e5aabd5424a4dfdaa954361a62c8eb721ae2/Add a Close() method to DB to return status when closing a db Summary: Currently, the only way to close an open DB is to destroy the DB object. There is no way for the caller to know the status. In one instance, the destructor encountered an error due to failure to close a log file on HDFS. In order to prevent silent failures, we add DB::Close() that calls CloseImpl() which must be implemented by its descendants. The main failure point in the destructor is closing the log file. This patch also adds a Close() entry point to Logger in order to get status. When DBOptions::info_log is allocated and owned by the DBImpl, it is explicitly closed by DBImpl::CloseImpl(). Closes Differential Revision: D6698158 Pulled By: anand1976 fbshipit-source-id: 9468e2892553eb09c4c41b8723f590c0dbd8ab7d/WritePrepared Txn: fix bug with Rollback seq Summary: The sequence number was not properly advanced after a rollback marker. The patch extends the existing unit tests to detect the bug and also fixes it. Closes Differential Revision: D6304291 Pulled By: maysamyabandeh fbshipit-source-id: 1b519c44a5371b802da49c9e32bd00087a8da401/"
,,0.3929,rocksdb,"Add a Close() method to DB to return status when closing a db Summary: Currently, the only way to close an open DB is to destroy the DB object. There is no way for the caller to know the status. In one instance, the destructor encountered an error due to failure to close a log file on HDFS. In order to prevent silent failures, we add DB::Close() that calls CloseImpl() which must be implemented by its descendants. The main failure point in the destructor is closing the log file. This patch also adds a Close() entry point to Logger in order to get status. When DBOptions::info_log is allocated and owned by the DBImpl, it is explicitly closed by DBImpl::CloseImpl(). Closes Differential Revision: D6698158 Pulled By: anand1976 fbshipit-source-id: 9468e2892553eb09c4c41b8723f590c0dbd8ab7d/"
,,0.2699,rocksdb,"log flush reason for better debugging experience Summary: Its always a mystery from the logs why flush was triggered user triggered it manually, WriteBufferManager triggered it, logs were full, write buffer was full, etc. This PR logs Flush reason whenever a flush is scheduled. Closes Differential Revision: D6788142 Pulled By: miasantreble fbshipit-source-id: a867e54d493c06adf5172bd36a180fb3faae3511/Handle error return from WriteBuffer() Summary: There are a couple of places where we swallow any error from WriteBuffer() in SwitchMemtable() and DBImpl::CloseImpl(). Propagate the error up in those cases rather than ignoring it. Closes Differential Revision: D6879954 Pulled By: anand1976 fbshipit-source-id: 2ef88b554be5286b0a8bad7384ba17a105395bdb/DB::DumpSupportInfo should log all supported compression types Summary: DB::DumpSupportInfo should log all supported compression types. Closes Closes Differential Revision: D6777019 Pulled By: yiwu-arbug fbshipit-source-id: 5b17f1ffb2d71224e52f7d9c045434746c789fb0/fix live WALs purged while file deletions disabled Summary: When calling `DisableFileDeletions` followed by `GetSortedWalFiles`, we guarantee the files returned by the latter call wont be deleted until after file deletions are re-enabled. However, `GetSortedWalFiles` didnt omit files already planned for deletion via `PurgeObsoleteFiles`, so the guarantee could be broken. We fix it by making `GetSortedWalFiles` wait for the number of pending purges to hit zero if file deletions are disabled. This condition is eventually met since `PurgeObsoleteFiles` is guaranteed to be called for the existing pending purges, and new purges cannot be scheduled while file deletions are disabled. Once the condition is met, `GetSortedWalFiles` simply returns the content of DB and archive directories, which nobody can delete (except for deletion scheduler, for which I plan to fix this bug later) until deletions are re-enabled. Closes Differential Revision: D6681131 Pulled By: ajkr fbshipit-source-id: 90b1e2f2362ea9ef715623841c0826611a817634/Add a Close() method to DB to return status when closing a db Summary: Currently, the only way to close an open DB is to destroy the DB object. There is no way for the caller to know the status. In one instance, the destructor encountered an error due to failure to close a log file on HDFS. In order to prevent silent failures, we add DB::Close() that calls CloseImpl() which must be implemented by its descendants. The main failure point in the destructor is closing the log file. This patch also adds a Close() entry point to Logger in order to get status. When DBOptions::info_log is allocated and owned by the DBImpl, it is explicitly closed by DBImpl::CloseImpl(). Closes Differential Revision: D6698158 Pulled By: anand1976 fbshipit-source-id: 9468e2892553eb09c4c41b8723f590c0dbd8ab7d/Fix memleak when DB::DeleteFile() Summary: Because the corresponding read_first_record_cache_ item wasnt erased, memory leaked. Closes Differential Revision: D4363654 Pulled By: ajkr fbshipit-source-id: 7da1adcfc8c380e4ffe05b8769fc2221ad17a225/WritePrepared Txn: Return NotSupported on iterator refresh Summary: A proper implementation of Iterator::Refresh() for WritePreparedTxnDB would require release and acquire another snapshot. Since MyRocks dont make use of Iterator::Refresh(), we just simply mark it as not supported. Closes Differential Revision: D6599931 Pulled By: yiwu-arbug fbshipit-source-id: 4e1632d967316431424f6e458254ecf9a97567cf/BlobDB: Remove the need to get sequence number per write Summary: Previously we store sequence number range of each blob files, and use the sequence number range to check if the file can be possibly visible by a snapshot. But it adds complexity to the code, since the sequence number is only available after a write. (The current implementation get sequence number by calling GetLatestSequenceNumber(), which is wrong.) With the patch, we are not storing sequence number range, and check if snapshot_sequence obsolete_sequence to decide if the file is visible by a snapshot (previously we check if first_sequence snapshot_sequence obsolete_sequence). Closes Differential Revision: D6571497 Pulled By: yiwu-arbug fbshipit-source-id: ca06479dc1fcd8782f6525b62b7762cd47d61909/Preserve overlapping file endpoint invariant Summary: Fix for In `DeleteFilesInRange`, use `GetCleanInputsWithinInterval` instead of `GetOverlappingInputs` to make sure we get a clean cut set of files to delete. In `GetCleanInputsWithinInterval`, support nullptr as `begin_key` or `end_key`. In `GetOverlappingInputsRangeBinarySearch`, move the assertion for non-empty range away from `ExtendFileRangeWithinInterval`, which should be allowed to return an empty range (via `end_index begin_index`). Closes Differential Revision: D5772387 Pulled By: ajkr fbshipit-source-id: e554e8461823c6be82b21a9262a2da02b3957881/"
,,0.2392,rocksdb,"Explictly fail writes if key or value is not smaller than 4GB Summary: Right now, users will encounter unexpected bahavior if they use key or value larger than 4GB. We should explicitly fail the queriers. Closes Differential Revision: D6953895 Pulled By: siying fbshipit-source-id: b60491e1af064fc5d52971956661f6c18ceac24f/Fix DBTest::SoftLimit TSAN failure Summary: Fix data race found by TSAN around WriteStallListener: Closes Differential Revision: D6762167 Pulled By: yiwu-arbug fbshipit-source-id: cd3a5c9f806de390bd1af6077ea6dbbc8bcaec09/fix DBTest.AutomaticConflictsWithManualCompaction Summary: After af92d4ad112f192693f6017f24f9ae1b00e1f053, only exclusive manual compaction can have conflict. dc360df81ec48e56a5d9cee4adb7f11ef0ca82ac updated the conflict-checking test case accordingly. But we missed the point that exclusive manual compaction can only conflict with automatic compactions scheduled after it, since it waits on pending automatic compactions before it begins running. This PR updates the test case to ensure the automatic compactions are scheduled after the manual compaction starts but before it finishes, thus ensuring a conflict. I also cleaned up the test case to use less space as I saw it cause out-of-space error on travis. Closes Differential Revision: D6735162 Pulled By: ajkr fbshipit-source-id: 020530a4e150a4786792dce7cec5d66b420cb884/Fix multiple build failures Summary: * Fix DBTest.CompactRangeWithEmptyBottomLevel lite build failure * Fix DBTest.AutomaticConflictsWithManualCompaction failure introduce by * Fix BlockBasedTableTest::IndexUncompressed should be disabled if snappy is disabled * Fix ASAN failure with DBBasicTest::DBClose test Closes Differential Revision: D6732313 Pulled By: yiwu-arbug fbshipit-source-id: 1eb9b9d9a8d795f56188fa9770db9353f6fdedc5/Add a Close() method to DB to return status when closing a db Summary: Currently, the only way to close an open DB is to destroy the DB object. There is no way for the caller to know the status. In one instance, the destructor encountered an error due to failure to close a log file on HDFS. In order to prevent silent failures, we add DB::Close() that calls CloseImpl() which must be implemented by its descendants. The main failure point in the destructor is closing the log file. This patch also adds a Close() entry point to Logger in order to get status. When DBOptions::info_log is allocated and owned by the DBImpl, it is explicitly closed by DBImpl::CloseImpl(). Closes Differential Revision: D6698158 Pulled By: anand1976 fbshipit-source-id: 9468e2892553eb09c4c41b8723f590c0dbd8ab7d/replace DBTest.HugeNumbersOfLevel with a more targeted test case Summary: This test often causes out-of-space error when run on travis. We dont want such stress tests in our unit test suite. The bug in which this test intends to expose, can be reprod as long as the bottommost level(s) are empty when CompactRange is called. I rewrote the test to cover this simple case without writing a lot of data. Closes Differential Revision: D6710417 Pulled By: ajkr fbshipit-source-id: 9a1ec85e738c813ac2fee29f1d5302065ecb54c5/fix ThreadStatus for bottom-pri compaction threads Summary: added `ThreadType::BOTTOM_PRIORITY` which is used in the `ThreadStatus` object to indicate the thread is used for bottom-pri compactions. Previously there was a bug where we mislabeled such threads as `ThreadType::LOW_PRIORITY`. Closes Differential Revision: D6559428 Pulled By: ajkr fbshipit-source-id: 96b1a50a9c19492b1a5fd1b77cf7061a6f9f1d1c/exclude DynamicUniversalCompactionOptions from ROCKSDB_LITE Summary: since [SetOptions]( is not supported in ROCKSDB_LITE Right now unit test under lite is broken Closes Differential Revision: D6539428 Pulled By: miasantreble fbshipit-source-id: 13172b8ecbd75682330726498ea198969bc3e637/"
,,0.1396,rocksdb,"fix handling of empty string as checkpoint directory Summary: made `CreateCheckpoint` properly return `InvalidArgument` when called with an empty directory. Previously it triggered an assertion failure due to a bug in the logic. made `ldb` set empty `checkpoint_dir` if thats what the user specifies, so that we can use it to properly test `CreateCheckpoint` in the future. Differential Revision: D6874562 fbshipit-source-id: dcc1bd41768261d9338987fa7711444289707ed7/"
,,0.3885,rocksdb,"Fix db_stress memory leak ASAN error Summary: In case `--expected_values_path` is unset, we allocate a buffer internally to hold the expected DB state. This PR makes sure it is freed. Closes Differential Revision: D7874694 Pulled By: ajkr fbshipit-source-id: a8f7655e009507c4e639ceebfc3525d69c856e3b/Adjust pread/pwrite to return Status Summary: Returning bytes_read causes the caller to call GetLastError() to report failure but the lasterror may be overwritten by then so we lose the error code. Fix up CMake file to include xpress source code only when needed. Fix warning for the uninitialized var. Closes Differential Revision: D7832935 Pulled By: anand1976 fbshipit-source-id: 4be21affb9b85d361b96244f4ef459f492b7cb2b/Second attempt at db_stress crash-recovery verification Summary: Original commit: a4fb1f8c049ee9d61a9da8cf23b64d2c7d36a33f Revert commit (we reverted as a quick fix to get crash tests passing): 6afe22db2e667799d8c903db61750d676bffe152 This PR includes the contents of the original commit plus two bug fixes, which are: In whitebox crash test, only set `--expected_values_path` for `db_stress` runs in the first half of the crash tests duration. In the second half, a fresh DB is created for each `db_stress` run, so we cannot maintain expected state across `db_stress` runs. Made `Exists()` return true for `UNKNOWN_SENTINEL` values. I previously had an assert in `Exists()` that value was not `UNKNOWN_SENTINEL`. But it is possible for post-crash-recovery expected values to be `UNKNOWN_SENTINEL` (i.e., if the crash happens in the middle of an update), in which case this assertion would be tripped. The effect of returning true in this case is there may be cases where a `SingleDelete` deletes no data. But if we had returned false, the effect would be calling `SingleDelete` on a key with multiple older versions, which is not supported. Closes Differential Revision: D7811671 Pulled By: ajkr fbshipit-source-id: 67e0295bfb1695ff9674837f2e05bb29c50efc30/revert db_stress crash-recovery verification Summary: crash-recovery verification is failing in the whitebox testing, which may or may not be a valid correctness issue need more time to investigate. In the meantime, reverting so we dont mask other failures. Closes Differential Revision: D7794516 Pulled By: ajkr fbshipit-source-id: 28ccdfdb9ec9b3b0fb08c15cbf9d2e282201ff33/Allow options file in db_stress and db_crashtest Summary: When options file is provided to db_stress, take supported options from the file instead of from flags Call `BuildOptionsTable` after `Open` so it can use `options_` once it has been populated either from flags or from file Allow options filename to be passed via `db_crashtest.py` Closes Differential Revision: D7755331 Pulled By: ajkr fbshipit-source-id: 5205cc5deb0d74d677b9832174153812bab9a60a/Add crash-recovery correctness check to db_stress Summary: Previously, our `db_stress` tool held the expected state of the DB in-memory, so after crash-recovery, there was no way to verify data correctness. This PR adds an option, `--expected_values_file`, which specifies a file holding the expected values. In black-box testing, the `db_stress` process can be killed arbitrarily, so updates to the `--expected_values_file` must be atomic. We achieve this by `mmap`ing the file and relying on `std::atomic<uint32_t>` for atomicity. Actually this doesnt provide a total guarantee on what we want as `std::atomic<uint32_t>` could, in theory, be translated into multiple stores surrounded by a mutex. We can verify our assumption by looking at `std::atomic::is_always_lock_free`. For the `mmap`d file, we didnt have an existing way to expose its contents as a raw memory buffer. This PR adds it in the `Env::NewMemoryMappedFileBuffer` function, and `MemoryMappedFileBuffer` class. `db_crashtest.py` is updated to use an expected values file for black-box testing. On the first iteration (when the DB is created), an empty file is provided as `db_stress` will populate it when it runs. On subsequent iterations, that same filename is provided so `db_stress` can check the data is as expected on startup. Closes Differential Revision: D7463144 Pulled By: ajkr fbshipit-source-id: c8f3e82c93e045a90055e2468316be155633bd8b/fix compilation error: implicit conversion loses integer precision Summary: Fix compilation error with clang: > tools/db_stress.cc:2598:21: error: implicit conversion loses integer precision: gflags::uint64 (aka unsigned long) to uint32_t (aka unsigned int) [-Werror,-Wshorten-64-to-32] Random rand(FLAGS_seed); ~~~~ ^~~~~~~~~~ Closes Differential Revision: D7703209 Pulled By: miasantreble fbshipit-source-id: 18c56a5138a2f308e4213594bc82e8e64bc21570/Improve db_stress with transactions Summary: db_stress was already capable running transactions by setting use_txn. Running it under stress showed a couple of problems fixed in this patch. The uncommitted transaction must be either rolled back or commit after recovery. Current implementation of WritePrepared transaction cannot handle cf drop before crash. Clarified that in the comments and added safety checks. When running with use_txn, clear_column_family_one_in must be set to 0. Closes Differential Revision: D7654419 Pulled By: maysamyabandeh fbshipit-source-id: a024bad80a9dc99677398c00d29ff17d4436b7f3/use delete[] to dealloc an array Summary: fix a bug in `db_stress` where an int array was incorrectly deallocated using delete instead of delete[] Closes Differential Revision: D7634749 Pulled By: miasantreble fbshipit-source-id: 489b776f5f4c03de1824edac5495787ec19cc910/fix memory leak in two_level_iterator Summary: this PR fixes a few failed contbuild: 1. ASAN memory leak in Block::NewIterator (table/block.cc:429). the proper destruction of first_level_iter_ and second_level_iter_ of two_level_iterator.cc is missing from the code after the refactoring in 2. various unused param errors introduced by 3. updated comment for `ForceReleaseCachedEntry` to emphasize the use of `force_erase` flag. Closes Reviewed By: maysamyabandeh Differential Revision: D7621192 Pulled By: miasantreble fbshipit-source-id: 476c94264083a0730ded957c29de7807e4f5b146/Implemented Knuth shuffle to construct permutation for selecting no_oÖ Summary: Överwrite_keys. Also changed each no_overwrite_key set to an unordered set, otherwise Knuth shuffle only gets you 2x time improvement, because insertion (and subsequent internal sorting) into an ordered set is the bottleneck. With this change, each iteration of permutation construction and prefix selection takes around 40 secs, as opposed to 360 secs previously. However, this still means that with the default 10 CF per blackbox test case, the test is going to time out given the default interval of 200 secs. Also, there is currently an assertion error affecting all blackbox tests in db_crashtest.py; this assertion error will be fixed in a future PR. Closes Differential Revision: D7624616 Pulled By: amytai fbshipit-source-id: ea64fbe83407ff96c1c0ecabbc6c830576939393/Fix some typos in comments and docs. Summary: Closes Differential Revision: D7170953 Pulled By: siying fbshipit-source-id: 9cfb8dd88b7266da920c0e0c1e10fb2c5af0641c/Fix a leak in prepared_section_completed_ Summary: The zeroed entries were not removed from prepared_section_completed_ map. This patch adds a unit test to show the problem and fixes that by refactoring the code. The new code is more efficient since i) it uses two separate mutex to avoid contention between commit and prepare threads, ii) it uses a sorted vector for maintaining uniq log entires with prepare which avoids a very large heap with many duplicate entries. Closes Differential Revision: D7106071 Pulled By: maysamyabandeh fbshipit-source-id: b3ae17cb6cd37ef10b6b35e0086c15c758768a48/"
,,0.1816,rocksdb,"Disallow compactions if there isnt enough free space Summary: This diff handles cases where compaction causes an ENOSPC error. This does not handle corner cases where another background job is started while compaction is running, and the other background job triggers ENOSPC, although we do allow the user to provision for these background jobs with SstFileManager::SetCompactionBufferSize. It also does not handle the case where compaction has finished and some other background job independently triggers ENOSPC. Usage: Functionality is inside SstFileManager. In particular, users should set SstFileManager::SetMaxAllowedSpaceUsage, which is the reference highwatermark for determining whether to cancel compactions. Closes Differential Revision: D7016941 Pulled By: amytai fbshipit-source-id: 8965ab8dd8b00972e771637a41b4e6c645450445/"
,,0.5091,rocksdb,"Second attempt at db_stress crash-recovery verification Summary: Original commit: a4fb1f8c049ee9d61a9da8cf23b64d2c7d36a33f Revert commit (we reverted as a quick fix to get crash tests passing): 6afe22db2e667799d8c903db61750d676bffe152 This PR includes the contents of the original commit plus two bug fixes, which are: In whitebox crash test, only set `--expected_values_path` for `db_stress` runs in the first half of the crash tests duration. In the second half, a fresh DB is created for each `db_stress` run, so we cannot maintain expected state across `db_stress` runs. Made `Exists()` return true for `UNKNOWN_SENTINEL` values. I previously had an assert in `Exists()` that value was not `UNKNOWN_SENTINEL`. But it is possible for post-crash-recovery expected values to be `UNKNOWN_SENTINEL` (i.e., if the crash happens in the middle of an update), in which case this assertion would be tripped. The effect of returning true in this case is there may be cases where a `SingleDelete` deletes no data. But if we had returned false, the effect would be calling `SingleDelete` on a key with multiple older versions, which is not supported. Closes Differential Revision: D7811671 Pulled By: ajkr fbshipit-source-id: 67e0295bfb1695ff9674837f2e05bb29c50efc30/revert db_stress crash-recovery verification Summary: crash-recovery verification is failing in the whitebox testing, which may or may not be a valid correctness issue need more time to investigate. In the meantime, reverting so we dont mask other failures. Closes Differential Revision: D7794516 Pulled By: ajkr fbshipit-source-id: 28ccdfdb9ec9b3b0fb08c15cbf9d2e282201ff33/Add crash-recovery correctness check to db_stress Summary: Previously, our `db_stress` tool held the expected state of the DB in-memory, so after crash-recovery, there was no way to verify data correctness. This PR adds an option, `--expected_values_file`, which specifies a file holding the expected values. In black-box testing, the `db_stress` process can be killed arbitrarily, so updates to the `--expected_values_file` must be atomic. We achieve this by `mmap`ing the file and relying on `std::atomic<uint32_t>` for atomicity. Actually this doesnt provide a total guarantee on what we want as `std::atomic<uint32_t>` could, in theory, be translated into multiple stores surrounded by a mutex. We can verify our assumption by looking at `std::atomic::is_always_lock_free`. For the `mmap`d file, we didnt have an existing way to expose its contents as a raw memory buffer. This PR adds it in the `Env::NewMemoryMappedFileBuffer` function, and `MemoryMappedFileBuffer` class. `db_crashtest.py` is updated to use an expected values file for black-box testing. On the first iteration (when the DB is created), an empty file is provided as `db_stress` will populate it when it runs. On subsequent iterations, that same filename is provided so `db_stress` can check the data is as expected on startup. Closes Differential Revision: D7463144 Pulled By: ajkr fbshipit-source-id: c8f3e82c93e045a90055e2468316be155633bd8b/Support lowering CPU priority of background threads Summary: Background activities like compaction can negatively affect latency of higher-priority tasks like request processing. To avoid this, rocksdb already lowers the IO priority of background threads on Linux systems. While this takes care of typical IO-bound systems, it does not help much when CPU (temporarily) becomes the bottleneck. This is especially likely when using more expensive compression settings. This patch adds an API to allow for lowering the CPU priority of background threads, modeled on the IO priority API. Benchmarks (see below) show significant latency and throughput improvements when CPU bound. As a result, workloads with some CPU usage bursts should benefit from lower latencies at a given utilization, or should be able to push utilization higher at a given request latency target. A useful side effect is that compaction CPU usage is now easily visible in common tools, allowing for an easier estimation of the contribution of compaction vs. request processing threads. As with IO priority, the implementation is limited to Linux, degrading to a no-op on other systems. Closes Differential Revision: D7740096 Pulled By: gwicke fbshipit-source-id: e5d32373e8dc403a7b0c2227023f9ce4f22b413c/Fix some typos in comments and docs. Summary: Closes Differential Revision: D7170953 Pulled By: siying fbshipit-source-id: 9cfb8dd88b7266da920c0e0c1e10fb2c5af0641c/Use nullptr instead of NULL / 0 more consistently. Summary: Closes Differential Revision: D7170968 Pulled By: yiwu-arbug fbshipit-source-id: 308a6b7dd358a04fd9a7de3d927bfd8abd57d348/Windows cumulative patch Summary: This patch addressed several issues. Portability including db_test std::thread port::Thread Cc: and %z to ROCKSDB portable macro. Cc: maysamyabandeh Implement Env::AreFilesSame Make the implementation of file unique number more robust Get rid of C-runtime and go directly to Windows API when dealing with file primitives. Implement GetSectorSize() and aling unbuffered read on the value if available. Adjust Windows Logger for the new interface, implement CloseImpl() Cc: anand1976 Fix test running script issue where $status var was of incorrect scope so the failures were swallowed and not reported. DestroyDB() creates a logger and opens a LOG file in the directory being cleaned up. This holds a lock on the folder and the cleanup is prevented. This fails one of the checkpoin tests. We observe the same in production. We close the log file in this change. Fix DBTest2.ReadAmpBitmapLiveInCacheAfterDBClose failure where the test attempts to open a directory with NewRandomAccessFile which does not work on Windows. Fix DBTest.SoftLimit as it is dependent on thread timing. CC: yiwu-arbug Closes Differential Revision: D7156304 Pulled By: siying fbshipit-source-id: 43db0a757f1dfceffeb2b7988043156639173f5b/Fix the Logger::Close() and DBImpl::Close() design pattern Summary: The recent Logger::Close() and DBImpl::Close() implementation rely on calling the CloseImpl() virtual function from the destructor, which will not work. Refactor the implementation to have a private close helper function in derived classes that can be called by both CloseImpl() and the destructor. Closes Reviewed By: gfosco Differential Revision: D7049303 Pulled By: anand1976 fbshipit-source-id: 76a64cbf403209216dfe4864ecf96b5d7f3db9f4/"
,,0.4663,rocksdb,"Second attempt at db_stress crash-recovery verification Summary: Original commit: a4fb1f8c049ee9d61a9da8cf23b64d2c7d36a33f Revert commit (we reverted as a quick fix to get crash tests passing): 6afe22db2e667799d8c903db61750d676bffe152 This PR includes the contents of the original commit plus two bug fixes, which are: In whitebox crash test, only set `--expected_values_path` for `db_stress` runs in the first half of the crash tests duration. In the second half, a fresh DB is created for each `db_stress` run, so we cannot maintain expected state across `db_stress` runs. Made `Exists()` return true for `UNKNOWN_SENTINEL` values. I previously had an assert in `Exists()` that value was not `UNKNOWN_SENTINEL`. But it is possible for post-crash-recovery expected values to be `UNKNOWN_SENTINEL` (i.e., if the crash happens in the middle of an update), in which case this assertion would be tripped. The effect of returning true in this case is there may be cases where a `SingleDelete` deletes no data. But if we had returned false, the effect would be calling `SingleDelete` on a key with multiple older versions, which is not supported. Closes Differential Revision: D7811671 Pulled By: ajkr fbshipit-source-id: 67e0295bfb1695ff9674837f2e05bb29c50efc30/revert db_stress crash-recovery verification Summary: crash-recovery verification is failing in the whitebox testing, which may or may not be a valid correctness issue need more time to investigate. In the meantime, reverting so we dont mask other failures. Closes Differential Revision: D7794516 Pulled By: ajkr fbshipit-source-id: 28ccdfdb9ec9b3b0fb08c15cbf9d2e282201ff33/Add crash-recovery correctness check to db_stress Summary: Previously, our `db_stress` tool held the expected state of the DB in-memory, so after crash-recovery, there was no way to verify data correctness. This PR adds an option, `--expected_values_file`, which specifies a file holding the expected values. In black-box testing, the `db_stress` process can be killed arbitrarily, so updates to the `--expected_values_file` must be atomic. We achieve this by `mmap`ing the file and relying on `std::atomic<uint32_t>` for atomicity. Actually this doesnt provide a total guarantee on what we want as `std::atomic<uint32_t>` could, in theory, be translated into multiple stores surrounded by a mutex. We can verify our assumption by looking at `std::atomic::is_always_lock_free`. For the `mmap`d file, we didnt have an existing way to expose its contents as a raw memory buffer. This PR adds it in the `Env::NewMemoryMappedFileBuffer` function, and `MemoryMappedFileBuffer` class. `db_crashtest.py` is updated to use an expected values file for black-box testing. On the first iteration (when the DB is created), an empty file is provided as `db_stress` will populate it when it runs. On subsequent iterations, that same filename is provided so `db_stress` can check the data is as expected on startup. Closes Differential Revision: D7463144 Pulled By: ajkr fbshipit-source-id: c8f3e82c93e045a90055e2468316be155633bd8b/fix memory leak in two_level_iterator Summary: this PR fixes a few failed contbuild: 1. ASAN memory leak in Block::NewIterator (table/block.cc:429). the proper destruction of first_level_iter_ and second_level_iter_ of two_level_iterator.cc is missing from the code after the refactoring in 2. various unused param errors introduced by 3. updated comment for `ForceReleaseCachedEntry` to emphasize the use of `force_erase` flag. Closes Reviewed By: maysamyabandeh Differential Revision: D7621192 Pulled By: miasantreble fbshipit-source-id: 476c94264083a0730ded957c29de7807e4f5b146/"
,,0.3108,rocksdb,"Disallow compactions if there isnt enough free space Summary: This diff handles cases where compaction causes an ENOSPC error. This does not handle corner cases where another background job is started while compaction is running, and the other background job triggers ENOSPC, although we do allow the user to provision for these background jobs with SstFileManager::SetCompactionBufferSize. It also does not handle the case where compaction has finished and some other background job independently triggers ENOSPC. Usage: Functionality is inside SstFileManager. In particular, users should set SstFileManager::SetMaxAllowedSpaceUsage, which is the reference highwatermark for determining whether to cancel compactions. Closes Differential Revision: D7016941 Pulled By: amytai fbshipit-source-id: 8965ab8dd8b00972e771637a41b4e6c645450445/Fix the Logger::Close() and DBImpl::Close() design pattern Summary: The recent Logger::Close() and DBImpl::Close() implementation rely on calling the CloseImpl() virtual function from the destructor, which will not work. Refactor the implementation to have a private close helper function in derived classes that can be called by both CloseImpl() and the destructor. Closes Reviewed By: gfosco Differential Revision: D7049303 Pulled By: anand1976 fbshipit-source-id: 76a64cbf403209216dfe4864ecf96b5d7f3db9f4/"
,,0.1544,rocksdb,fix memory leak in two_level_iterator Summary: this PR fixes a few failed contbuild: 1. ASAN memory leak in Block::NewIterator (table/block.cc:429). the proper destruction of first_level_iter_ and second_level_iter_ of two_level_iterator.cc is missing from the code after the refactoring in 2. various unused param errors introduced by 3. updated comment for `ForceReleaseCachedEntry` to emphasize the use of `force_erase` flag. Closes Reviewed By: maysamyabandeh Differential Revision: D7621192 Pulled By: miasantreble fbshipit-source-id: 476c94264083a0730ded957c29de7807e4f5b146/
,,0.1658,rocksdb,fix memory leak in two_level_iterator Summary: this PR fixes a few failed contbuild: 1. ASAN memory leak in Block::NewIterator (table/block.cc:429). the proper destruction of first_level_iter_ and second_level_iter_ of two_level_iterator.cc is missing from the code after the refactoring in 2. various unused param errors introduced by 3. updated comment for `ForceReleaseCachedEntry` to emphasize the use of `force_erase` flag. Closes Reviewed By: maysamyabandeh Differential Revision: D7621192 Pulled By: miasantreble fbshipit-source-id: 476c94264083a0730ded957c29de7807e4f5b146/
,,0.3212,rocksdb,"Avoid directory renames in BackupEngine Summary: We used to name private directories like ""1.tmp"" while BackupEngine populated them, and then rename without the "".tmp"" suffix (i.e., rename ""1.tmp"" to ""1"") after all files were copied. On glusterfs, directory renames like this require operations across many hosts, and partial failures have caused operational problems. Fortunately we dont need to rename private directories. We already have a meta-file that uses the tempfile-rename pattern to commit a backup atomically after all its files have been successfully copied. So we can copy private files directly to their final location, so now theres no directory rename. Closes Differential Revision: D7705610 Pulled By: ajkr fbshipit-source-id: fd724a28dd2bf993ce323a5f2cb7e7d6980cc346/fix memory leak in two_level_iterator Summary: this PR fixes a few failed contbuild: 1. ASAN memory leak in Block::NewIterator (table/block.cc:429). the proper destruction of first_level_iter_ and second_level_iter_ of two_level_iterator.cc is missing from the code after the refactoring in 2. various unused param errors introduced by 3. updated comment for `ForceReleaseCachedEntry` to emphasize the use of `force_erase` flag. Closes Reviewed By: maysamyabandeh Differential Revision: D7621192 Pulled By: miasantreble fbshipit-source-id: 476c94264083a0730ded957c29de7807e4f5b146/Disallow compactions if there isnt enough free space Summary: This diff handles cases where compaction causes an ENOSPC error. This does not handle corner cases where another background job is started while compaction is running, and the other background job triggers ENOSPC, although we do allow the user to provision for these background jobs with SstFileManager::SetCompactionBufferSize. It also does not handle the case where compaction has finished and some other background job independently triggers ENOSPC. Usage: Functionality is inside SstFileManager. In particular, users should set SstFileManager::SetMaxAllowedSpaceUsage, which is the reference highwatermark for determining whether to cancel compactions. Closes Differential Revision: D7016941 Pulled By: amytai fbshipit-source-id: 8965ab8dd8b00972e771637a41b4e6c645450445/BackupEngine gluster-friendly file naming convention Summary: Use the rsync tempfile naming convention in our `BackupEngine`. The temp file follows the format, `.<filename>.<suffix>`, which is later renamed to `<filename>`. We fix `tmp` as the `<suffix>` as we dont need to use random bytes for now. The benefit is gluster treats this tempfile naming convention specially and applies hashing only to `<filename>`, so the file wont need to be linked or moved when its renamed. Our gluster team suggested this will make things operationally easier. Closes Differential Revision: D6893333 Pulled By: ajkr fbshipit-source-id: fd7622978f4b2487fce33cde40dd3124f16bcaa8/"
,,0.1577,rocksdb,fix memory leak in two_level_iterator Summary: this PR fixes a few failed contbuild: 1. ASAN memory leak in Block::NewIterator (table/block.cc:429). the proper destruction of first_level_iter_ and second_level_iter_ of two_level_iterator.cc is missing from the code after the refactoring in 2. various unused param errors introduced by 3. updated comment for `ForceReleaseCachedEntry` to emphasize the use of `force_erase` flag. Closes Reviewed By: maysamyabandeh Differential Revision: D7621192 Pulled By: miasantreble fbshipit-source-id: 476c94264083a0730ded957c29de7807e4f5b146/
,,0.3351,rocksdb,"Skip deleted WALs during recovery Summary: This patch record min log number to keep to the manifest while flushing SST files to ignore them and any WAL older than them during recovery. This is to avoid scenarios when we have a gap between the WAL files are fed to the recovery procedure. The gap could happen by for example out-of-order WAL deletion. Such gap could cause problems in 2PC recovery where the prepared and commit entry are placed into two separate WAL and gap in the WALs could result into not processing the WAL with the commit entry and hence breaking the 2PC recovery logic. Before the commit, for 2PC case, we determined which log number to keep in FindObsoleteFiles(). We looked at the earliest logs with outstanding prepare entries, or prepare entries whose respective commit or abort are in memtable. With the commit, the same calculation is done while we apply the SST flush. Just before installing the flush file, we precompute the earliest log file to keep after the flush finishes using the same logic (but skipping the memtables just flushed), record this information to the manifest entry for this new flushed SST file. This pre-computed value is also remembered in memory, and will later be used to determine whether a log file can be deleted. This value is unlikely to change until next flush because the commit entry will stay in memtable. (In WritePrepared, we could have removed the older log files as soon as all prepared entries are committed. Its not yet done anyway. Even if we do it, the only thing we loss with this new approach is earlier log deletion between two flushes, which does not guarantee to happen anyway because the obsolete file clean-up function is only executed after flush or compaction) This min log number to keep is stored in the manifest using the safely-ignore customized field of AddFile entry, in order to guarantee that the DB generated using newer release can be opened by previous releases no older than 4.2. Closes Differential Revision: D7747618 Pulled By: siying fbshipit-source-id: d00c92105b4f83852e9754a1b70d6b64cb590729/WritePrepared Txn: smallest_prepare optimization Summary: The is an optimization to reduce lookup in the CommitCache when querying IsInSnapshot. The optimization takes the smallest uncommitted data at the time that the snapshot was taken and if the sequence number of the read data is lower than that number it assumes the data as committed. To implement this optimization two changes are required: i) The AddPrepared function must be called sequentially to avoid out of order insertion in the PrepareHeap (otherwise the top of the heap does not indicate the smallest prepare in future too), ii) non-2PC transactions also call AddPrepared if they do not commit in one step. Closes Differential Revision: D7388630 Pulled By: maysamyabandeh fbshipit-source-id: b79506238c17467d590763582960d4d90181c600/Fix race condition causing double deletion of ssts Summary: Possible interleaved execution of background compaction thread calling `FindObsoleteFiles (no full scan) / PurgeObsoleteFiles` and user thread calling `FindObsoleteFiles (full scan) / PurgeObsoleteFiles` can lead to race condition on which RocksDB attempts to delete a file twice. The second attempt will fail and return `IO error`. This may occur to other files, but this PR targets sst. Also add a unit test to verify that this PR fixes the issue. The newly added unit test `obsolete_files_test` has a test case for this scenario, implemented in `ObsoleteFilesTest#RaceForObsoleteFileDeletion`. `TestSyncPoint`s are used to coordinate the interleaving the `user_thread` and background compaction thread. They execute as follows ``` timeline user_thread background_compaction thread t1 | FindObsoleteFiles(full_scan=false) t2 | FindObsoleteFiles(full_scan=true) t3 | PurgeObsoleteFiles t4 | PurgeObsoleteFiles V ``` When `user_thread` invokes `FindObsoleteFiles` with full scan, it collects ALL files in RocksDB directory, including the ones that background compaction thread have collected in its job context. Then `user_thread` will see an IO error when trying to delete these files in `PurgeObsoleteFiles` because background compaction thread has already deleted the file in `PurgeObsoleteFiles`. To fix this, we make RocksDB remember which (SST) files have been found by threads after calling `FindObsoleteFiles` (see `DBImpl#files_grabbed_for_purge_`). Therefore, when another thread calls `FindObsoleteFiles` with full scan, it will not collect such files. ajkr could you take a look and comment? Thanks Closes Differential Revision: D7384372 Pulled By: riversand963 fbshipit-source-id: 01489516d60012e722ee65a80e1449e589ce26d3/Fix race condition via concurrent FlushWAL Summary: Currently log_writer->AddRecord in WriteImpl is protected from concurrent calls via FlushWAL only if two_write_queues_ option is set. The patch fixes the problem by i) skip log_writer->AddRecord in FlushWAL if manual_wal_flush is not set, ii) protects log_writer->AddRecord in WriteImpl via log_write_mutex_ if manual_wal_flush_ is set but two_write_queues_ is not. Fixes Closes Differential Revision: D7405608 Pulled By: maysamyabandeh fbshipit-source-id: d6cc265051c77ae49c7c6df4f427350baaf46934/WritePrepared Txn: AddPrepared for all sub-batches Summary: Currently AddPrepared is performed only on the first sub-batch if there are duplicate keys in the write batch. This could cause a problem if the transaction takes too long to commit and the seq number of the first sub-patch moved to old_prepared_ but not the seq of the later ones. The patch fixes this by calling AddPrepared for all sub-patches. Closes Differential Revision: D7388635 Pulled By: maysamyabandeh fbshipit-source-id: 0ccd80c150d9bc42fe955e49ddb9d7ca353067b4/FlushReason improvement Summary: Right now flush reason ""SuperVersion Change"" covers a few different scenarios which is a bit vague. For example, the following db_bench job should trigger ""Write Buffer Full"" > $ TEST_TMPDIR=/dev/shm ./db_bench $ grep flush_reason /dev/shm/dbbench/LOG ... 2018/03/06-17:30:42.543638 7f2773b99700 EVENT_LOG_v1 {""time_micros"": 1520386242543634, ""job"": 192, ""event"": ""flush_started"", ""num_memtables"": 1, ""num_entries"": 7006, ""num_deletes"": 0, ""memory_usage"": 1018024, ""flush_reason"": ""SuperVersion Change""} 2018/03/06-17:30:42.569541 7f2773b99700 EVENT_LOG_v1 {""time_micros"": 1520386242569536, ""job"": 193, ""event"": ""flush_started"", ""num_memtables"": 1, ""num_entries"": 7006, ""num_deletes"": 0, ""memory_usage"": 1018104, ""flush_reason"": ""SuperVersion Change""} 2018/03/06-17:30:42.596396 7f2773b99700 EVENT_LOG_v1 {""time_micros"": 1520386242596392, ""job"": 194, ""event"": ""flush_started"", ""num_memtables"": 1, ""num_entries"": 7008, ""num_deletes"": 0, ""memory_usage"": 1018048, ""flush_reason"": ""SuperVersion Change""} 2018/03/06-17:30:42.622444 7f2773b99700 EVENT_LOG_v1 {""time_micros"": 1520386242622440, ""job"": 195, ""event"": ""flush_started"", ""num_memtables"": 1, ""num_entries"": 7006, ""num_deletes"": 0, ""memory_usage"": 1018104, ""flush_reason"": ""SuperVersion Change""} With the fix: > 2018/03/19-14:40:02.341451 7f11dc257700 EVENT_LOG_v1 {""time_micros"": 1521495602341444, ""job"": 98, ""event"": ""flush_started"", ""num_memtables"": 1, ""num_entries"": 7009, ""num_deletes"": 0, ""memory_usage"": 1018008, ""flush_reason"": ""Write Buffer Full""} 2018/03/19-14:40:02.379655 7f11dc257700 EVENT_LOG_v1 {""time_micros"": 1521495602379642, ""job"": 100, ""event"": ""flush_started"", ""num_memtables"": 1, ""num_entries"": 7006, ""num_deletes"": 0, ""memory_usage"": 1018016, ""flush_reason"": ""Write Buffer Full""} 2018/03/19-14:40:02.418479 7f11dc257700 EVENT_LOG_v1 {""time_micros"": 1521495602418474, ""job"": 101, ""event"": ""flush_started"", ""num_memtables"": 1, ""num_entries"": 7009, ""num_deletes"": 0, ""memory_usage"": 1018104, ""flush_reason"": ""Write Buffer Full""} 2018/03/19-14:40:02.455084 7f11dc257700 EVENT_LOG_v1 {""time_micros"": 1521495602455079, ""job"": 102, ""event"": ""flush_started"", ""num_memtables"": 1, ""num_entries"": 7009, ""num_deletes"": 0, ""memory_usage"": 1018048, ""flush_reason"": ""Write Buffer Full""} 2018/03/19-14:40:02.492293 7f11dc257700 EVENT_LOG_v1 {""time_micros"": 1521495602492288, ""job"": 104, ""event"": ""flush_started"", ""num_memtables"": 1, ""num_entries"": 7007, ""num_deletes"": 0, ""memory_usage"": 1018056, ""flush_reason"": ""Write Buffer Full""} 2018/03/19-14:40:02.528720 7f11dc257700 EVENT_LOG_v1 {""time_micros"": 1521495602528715, ""job"": 105, ""event"": ""flush_started"", ""num_memtables"": 1, ""num_entries"": 7006, ""num_deletes"": 0, ""memory_usage"": 1018104, ""flush_reason"": ""Write Buffer Full""} 2018/03/19-14:40:02.566255 7f11dc257700 EVENT_LOG_v1 {""time_micros"": 1521495602566238, ""job"": 107, ""event"": ""flush_started"", ""num_memtables"": 1, ""num_entries"": 7009, ""num_deletes"": 0, ""memory_usage"": 1018112, ""flush_reason"": ""Write Buffer Full""} Closes Differential Revision: D7328772 Pulled By: miasantreble fbshipit-source-id: 67c94065fbdd36930f09930aad0aaa6d2c152bb8/Disallow compactions if there isnt enough free space Summary: This diff handles cases where compaction causes an ENOSPC error. This does not handle corner cases where another background job is started while compaction is running, and the other background job triggers ENOSPC, although we do allow the user to provision for these background jobs with SstFileManager::SetCompactionBufferSize. It also does not handle the case where compaction has finished and some other background job independently triggers ENOSPC. Usage: Functionality is inside SstFileManager. In particular, users should set SstFileManager::SetMaxAllowedSpaceUsage, which is the reference highwatermark for determining whether to cancel compactions. Closes Differential Revision: D7016941 Pulled By: amytai fbshipit-source-id: 8965ab8dd8b00972e771637a41b4e6c645450445/Windows cumulative patch Summary: This patch addressed several issues. Portability including db_test std::thread port::Thread Cc: and %z to ROCKSDB portable macro. Cc: maysamyabandeh Implement Env::AreFilesSame Make the implementation of file unique number more robust Get rid of C-runtime and go directly to Windows API when dealing with file primitives. Implement GetSectorSize() and aling unbuffered read on the value if available. Adjust Windows Logger for the new interface, implement CloseImpl() Cc: anand1976 Fix test running script issue where $status var was of incorrect scope so the failures were swallowed and not reported. DestroyDB() creates a logger and opens a LOG file in the directory being cleaned up. This holds a lock on the folder and the cleanup is prevented. This fails one of the checkpoin tests. We observe the same in production. We close the log file in this change. Fix DBTest2.ReadAmpBitmapLiveInCacheAfterDBClose failure where the test attempts to open a directory with NewRandomAccessFile which does not work on Windows. Fix DBTest.SoftLimit as it is dependent on thread timing. CC: yiwu-arbug Closes Differential Revision: D7156304 Pulled By: siying fbshipit-source-id: 43db0a757f1dfceffeb2b7988043156639173f5b/Fix the Logger::Close() and DBImpl::Close() design pattern Summary: The recent Logger::Close() and DBImpl::Close() implementation rely on calling the CloseImpl() virtual function from the destructor, which will not work. Refactor the implementation to have a private close helper function in derived classes that can be called by both CloseImpl() and the destructor. Closes Reviewed By: gfosco Differential Revision: D7049303 Pulled By: anand1976 fbshipit-source-id: 76a64cbf403209216dfe4864ecf96b5d7f3db9f4/Add delay before flush in CompactRange to avoid write stalling Summary: Refactored logic for checking write stall condition to a helper function: `GetWriteStallConditionAndCause`. Now it is decoupled from the logic for updating WriteController / stats in `RecalculateWriteStallConditions`, so we can reuse it for predicting whether write stall will occur. Updated `CompactRange` to first check whether the one additional immutable memtable / L0 file would cause stalling before it flushes. If so, it waits until that is no longer true. Updated `bg_cv_` to be signaled on `SetOptions` calls. The stall conditions `CompactRange` cares about can change when (1) flush finishes, (2) compaction finishes, or (3) options dynamically change. The cv was already signaled for (1) and (2) but not yet for (3). Closes Differential Revision: D6754983 Pulled By: ajkr fbshipit-source-id: 5613e03f1524df7192dc6ae885d40fd8f091d972/"
,,0.4494,rocksdb,"Windows cumulative patch Summary: This patch addressed several issues. Portability including db_test std::thread port::Thread Cc: and %z to ROCKSDB portable macro. Cc: maysamyabandeh Implement Env::AreFilesSame Make the implementation of file unique number more robust Get rid of C-runtime and go directly to Windows API when dealing with file primitives. Implement GetSectorSize() and aling unbuffered read on the value if available. Adjust Windows Logger for the new interface, implement CloseImpl() Cc: anand1976 Fix test running script issue where $status var was of incorrect scope so the failures were swallowed and not reported. DestroyDB() creates a logger and opens a LOG file in the directory being cleaned up. This holds a lock on the folder and the cleanup is prevented. This fails one of the checkpoin tests. We observe the same in production. We close the log file in this change. Fix DBTest2.ReadAmpBitmapLiveInCacheAfterDBClose failure where the test attempts to open a directory with NewRandomAccessFile which does not work on Windows. Fix DBTest.SoftLimit as it is dependent on thread timing. CC: yiwu-arbug Closes Differential Revision: D7156304 Pulled By: siying fbshipit-source-id: 43db0a757f1dfceffeb2b7988043156639173f5b/"
,,0.3854,rocksdb,"Fix race condition via concurrent FlushWAL Summary: Currently log_writer->AddRecord in WriteImpl is protected from concurrent calls via FlushWAL only if two_write_queues_ option is set. The patch fixes the problem by i) skip log_writer->AddRecord in FlushWAL if manual_wal_flush is not set, ii) protects log_writer->AddRecord in WriteImpl via log_write_mutex_ if manual_wal_flush_ is set but two_write_queues_ is not. Fixes Closes Differential Revision: D7405608 Pulled By: maysamyabandeh fbshipit-source-id: d6cc265051c77ae49c7c6df4f427350baaf46934/Windows cumulative patch Summary: This patch addressed several issues. Portability including db_test std::thread port::Thread Cc: and %z to ROCKSDB portable macro. Cc: maysamyabandeh Implement Env::AreFilesSame Make the implementation of file unique number more robust Get rid of C-runtime and go directly to Windows API when dealing with file primitives. Implement GetSectorSize() and aling unbuffered read on the value if available. Adjust Windows Logger for the new interface, implement CloseImpl() Cc: anand1976 Fix test running script issue where $status var was of incorrect scope so the failures were swallowed and not reported. DestroyDB() creates a logger and opens a LOG file in the directory being cleaned up. This holds a lock on the folder and the cleanup is prevented. This fails one of the checkpoin tests. We observe the same in production. We close the log file in this change. Fix DBTest2.ReadAmpBitmapLiveInCacheAfterDBClose failure where the test attempts to open a directory with NewRandomAccessFile which does not work on Windows. Fix DBTest.SoftLimit as it is dependent on thread timing. CC: yiwu-arbug Closes Differential Revision: D7156304 Pulled By: siying fbshipit-source-id: 43db0a757f1dfceffeb2b7988043156639173f5b/Fix deadlock in ColumnFamilyData::InstallSuperVersion() Summary: Deadlock: a memtable flush holds DB::mutex_ and calls ThreadLocalPtr::Scrape(), which locks ThreadLocalPtr mutex; meanwhile, a thread exit handler locks ThreadLocalPtr mutex and calls SuperVersionUnrefHandle, which tries to lock DB::mutex_. This deadlock is hit all the time on our workload. It blocks our release. In general, the problem is that ThreadLocalPtr takes an arbitrary callback and calls it while holding a lock on a global mutex. The same global mutex is (at least in some cases) locked by almost all ThreadLocalPtr methods, on any instance of ThreadLocalPtr. So, therell be a deadlock if the callback tries to do anything to any instance of ThreadLocalPtr, or waits for another thread to do so. So, probably the only safe way to use ThreadLocalPtr callbacks is to do only do simple and lock-free things in them. This PR fixes the deadlock by making sure that local_sv_ never holds the last reference to a SuperVersion, and therefore SuperVersionUnrefHandle never has to do any nontrivial cleanup. I also searched for other uses of ThreadLocalPtr to see if they may have similar bugs. Theres only one other use, in transaction_lock_mgr.cc, and it looks fine. Closes Reviewed By: sagar0 Differential Revision: D7005346 Pulled By: al13n321 fbshipit-source-id: 37575591b84f07a891d6659e87e784660fde815f/"
,,0.0926,rocksdb,"fix some text in comments. Summary: 1. Remove redundant text. 2. Make terminology consistent across all comments and doc of RocksDB. Also do our best to conform to conventions. Specifically, use callback instead of call-back [wikipedia]( Closes Differential Revision: D7560396 Pulled By: riversand963 fbshipit-source-id: ba8c251c487f4e7d1872a1a8dc680f9e35a6ffb8/"
,,0.1577,rocksdb,fix memory leak in two_level_iterator Summary: this PR fixes a few failed contbuild: 1. ASAN memory leak in Block::NewIterator (table/block.cc:429). the proper destruction of first_level_iter_ and second_level_iter_ of two_level_iterator.cc is missing from the code after the refactoring in 2. various unused param errors introduced by 3. updated comment for `ForceReleaseCachedEntry` to emphasize the use of `force_erase` flag. Closes Reviewed By: maysamyabandeh Differential Revision: D7621192 Pulled By: miasantreble fbshipit-source-id: 476c94264083a0730ded957c29de7807e4f5b146/
,,0.4769,rocksdb,"Adjust pread/pwrite to return Status Summary: Returning bytes_read causes the caller to call GetLastError() to report failure but the lasterror may be overwritten by then so we lose the error code. Fix up CMake file to include xpress source code only when needed. Fix warning for the uninitialized var. Closes Differential Revision: D7832935 Pulled By: anand1976 fbshipit-source-id: 4be21affb9b85d361b96244f4ef459f492b7cb2b/Windows cumulative patch Summary: This patch addressed several issues. Portability including db_test std::thread port::Thread Cc: and %z to ROCKSDB portable macro. Cc: maysamyabandeh Implement Env::AreFilesSame Make the implementation of file unique number more robust Get rid of C-runtime and go directly to Windows API when dealing with file primitives. Implement GetSectorSize() and aling unbuffered read on the value if available. Adjust Windows Logger for the new interface, implement CloseImpl() Cc: anand1976 Fix test running script issue where $status var was of incorrect scope so the failures were swallowed and not reported. DestroyDB() creates a logger and opens a LOG file in the directory being cleaned up. This holds a lock on the folder and the cleanup is prevented. This fails one of the checkpoin tests. We observe the same in production. We close the log file in this change. Fix DBTest2.ReadAmpBitmapLiveInCacheAfterDBClose failure where the test attempts to open a directory with NewRandomAccessFile which does not work on Windows. Fix DBTest.SoftLimit as it is dependent on thread timing. CC: yiwu-arbug Closes Differential Revision: D7156304 Pulled By: siying fbshipit-source-id: 43db0a757f1dfceffeb2b7988043156639173f5b/"
,,0.1005,rocksdb,Catchup with posix features Summary: Catch up with Posix features NewWritableRWFile must fail when file does not exists Implement Env::Truncate() Adjust Env options optimization functions Implement MemoryMappedBuffer on Windows. Closes Differential Revision: D8053610 Pulled By: ajkr fbshipit-source-id: ccd0d46c29648a9f6f496873bc1c9d6c5547487e/
,,0.107,rocksdb,"fix assert error while db.getDefaultColumnFamily().getDescriptor() (#6006) Summary: Threw assert error at assert(isOwningHandle()) in ColumnFamilyHandle.getDescriptor(), because default CF dont own a handle, due to [RocksDB.getDefaultColumnFamily()]( called cfHandle.disOwnNativeHandle(). Pull Request resolved: Differential Revision: D19031448 fbshipit-source-id: 2420c45e835bda0e552e919b1b63708472b91538/"
