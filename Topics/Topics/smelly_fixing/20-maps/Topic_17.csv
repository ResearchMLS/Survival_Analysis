Topic_no,Keywords,Contrib,System,Text
17,"fix, realm, add, test, check, close, update, issue, change, realmresult, throw, remove, transaction, cleanup, merge_pull, comment, exception, bug_improving, loading_using, pull_request",0.0891,conscrypt,"Move Netty-specific things to the benchmark dir Netty is not in the Android tree, so adding dependencies on it breaks the build. Since we currently dont run the SslEngineBenchmark, stick the methods that it needs there. Nothing else currently uses those methods. Additionally nothing is left that uses the NettyServer class as well./"
,,0.0665,Frostwire,[android] mute clicks on fake spacer header item in lists in ArtistAlbumFragment to avoid NPE (#269)/
,,0.0798,Frostwire,[android/crash] fixes index out of bounds crash/
,,0.0744,Frostwire,"[desktop] UpdateMessage reader, make sure conection is closed even if exception is thrown/"
,,0.0804,Frostwire,[android] at least print exceptions in DragSortListView/[android] DragSortListView. abort disptachDraw if parent fails/
,,0.0718,Frostwire,[android] EngineThreadPool disables task queue size verification when the debugger is connected. Renamed .isEnable to .isEnabled (English grammar fix)/
,,0.0786,Frostwire,[desktop] MacOSXUtils update removed old multi architecture build of libMacOSXUtilsLeopard.jnilib Added debug messages to libMacOSXUtils.jnilib to show when app is added/removed from apps in macOS startup list libMacOSXUtilsLeopard libMacOSXUtils Dont attempt to invoke native function to add app to startup list when running from source/
,,0.0577,Frostwire,[desktop] more cleanups and fixes/
,,0.125,pljava,"Merge pull request from feature/REL1_5_STABLE/constrainttrigger Constraint triggers can be declared and are usable (the runtime will deliver them; a trigger method should throw an exception to report that a constraint would be violated); however, the TriggerData interface has not been extended to expose any of the new contraint-trigger-specific information to the called method./Adjust per earlier discussion. Now has enum Constraint with only the constraint-related values; its actual omission is what indicates a non-constraint trigger. The name fromSchema is kept (it has no analog in the PG syntax), but fromTable is now simply from, to match the PG syntax. Semantic errors are checked. Also some whitespace tweaks. An example/test is still needed./"
,,0.1202,pljava,"Merge pull request from feature/REL1_5_STABLE/constrainttrigger Constraint triggers can be declared and are usable (the runtime will deliver them; a trigger method should throw an exception to report that a constraint would be violated); however, the TriggerData interface has not been extended to expose any of the new contraint-trigger-specific information to the called method./Merge pull request from tada/bug/REL1_5_STABLE/issue142 Enable row triggers to suppress operations./Add a constraint-trigger example. A more interesting test would be to actually try to insert 44, and verify that the exception happens. (Oh, for the chance to use pgTAP...)./Enable row triggers to suppress operations. Adds to TriggerData the suppress() method suggested in issue pull request from tada/bug/REL1_5_STABLE/issue134 Accomodate upstream SPI_push/pop API changes (issue (lack of) issue regression test. An obvious place to put it, in examples/Triggers.java, wont really help, because those all run with SPI already connected and would not catch the bug. This is more of a note to the future, to make such a test when there is more of a regression test infrastructure to run tests from outside PL/Java itself./"
,,0.2899,pljava,"Sort implemented from unimplemented JDBC4 methods. Move those that have some JDBC-allowed behavior (other than throwing a not-supported exception) into the implemented category, even when the JDBC-allowed behavior is to do nothing special. Leave in the unimplemented category just the methods that ought to do something else, but currently throw the not-supported exception. In passing, just provide the natural implementation for isWrapperFor and unwrap; its no more trouble than throwing the exception For ResultSetMetaData, pull up their implementations into AbstractResultSetMetaData, so they dont have to be duplicated in SPIResultSetMetaData and SyntheticResultSetMetaData. Some indentation normalized, only in areas touched./"
,,0.2999,pljava,"Sort implemented from unimplemented JDBC4 methods. Move those that have some JDBC-allowed behavior (other than throwing a not-supported exception) into the implemented category, even when the JDBC-allowed behavior is to do nothing special. Leave in the unimplemented category just the methods that ought to do something else, but currently throw the not-supported exception. In passing, just provide the natural implementation for isWrapperFor and unwrap; its no more trouble than throwing the exception For ResultSetMetaData, pull up their implementations into AbstractResultSetMetaData, so they dont have to be duplicated in SPIResultSetMetaData and SyntheticResultSetMetaData. Some indentation normalized, only in areas touched./"
,,0.3056,pljava,"Sort implemented from unimplemented JDBC4 methods. Move those that have some JDBC-allowed behavior (other than throwing a not-supported exception) into the implemented category, even when the JDBC-allowed behavior is to do nothing special. Leave in the unimplemented category just the methods that ought to do something else, but currently throw the not-supported exception. In passing, just provide the natural implementation for isWrapperFor and unwrap; its no more trouble than throwing the exception For ResultSetMetaData, pull up their implementations into AbstractResultSetMetaData, so they dont have to be duplicated in SPIResultSetMetaData and SyntheticResultSetMetaData. Some indentation normalized, only in areas touched./"
,,0.2984,pljava,"Sort implemented from unimplemented JDBC4 methods. Move those that have some JDBC-allowed behavior (other than throwing a not-supported exception) into the implemented category, even when the JDBC-allowed behavior is to do nothing special. Leave in the unimplemented category just the methods that ought to do something else, but currently throw the not-supported exception. In passing, just provide the natural implementation for isWrapperFor and unwrap; its no more trouble than throwing the exception For ResultSetMetaData, pull up their implementations into AbstractResultSetMetaData, so they dont have to be duplicated in SPIResultSetMetaData and SyntheticResultSetMetaData. Some indentation normalized, only in areas touched./"
,,0.2805,pljava,"Restore javadoc buildability with Java 8+ Fix a few recently-touched javadoc comments that do not prevent doc building in Java 7, but do under the stricter rules introduced in javadoc in Java 8./Sort implemented from unimplemented JDBC4 methods. Move those that have some JDBC-allowed behavior (other than throwing a not-supported exception) into the implemented category, even when the JDBC-allowed behavior is to do nothing special. Leave in the unimplemented category just the methods that ought to do something else, but currently throw the not-supported exception. In passing, just provide the natural implementation for isWrapperFor and unwrap; its no more trouble than throwing the exception For ResultSetMetaData, pull up their implementations into AbstractResultSetMetaData, so they dont have to be duplicated in SPIResultSetMetaData and SyntheticResultSetMetaData. Some indentation normalized, only in areas touched./"
,,0.0697,realm-java,Fixes for: Support for transactions and replication added/
,,0.1285,realm-java,"Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/debug added. Removed class reference in jni TR output, just the pointer now/cleanup + tighter testcase/Merge pull request from mekjaer/read-trans-testcase check for if group is closed when closing transactions + test case/removed line break/check for if group is closed when closing transactions + test case Will crash core if not detected/"
,,0.063,realm-java,Doc fixes and spelling/
,,0.1909,realm-java,"Merge branch master into WIP-update-checker * master: (25 commits) Add migration example template to distribution folder Removed old files. Fix distribution script Removed Guava dependency Add migration example to the distribution folder Added some comments Add License headers animal capitalization finish migration code/add versioned realm file migration bug fix Cache column indices disable realm file with missing version migration bug fix bug fixes Some fixes Introduce the RealmMigrationNeededException Disable the table check until we have a better solution migration example Check link and link list tables Verify the name of the table of link and link list targets ... Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java/Modified code generation to use static column indices. Since the Java VM keeps the fields in a different order than the java compiler, I had to introduce proxy based table generation. removed setter/getter method for row no RealmObject. row is now accessed directly. Proxy class suffix has been changed to _PROXY* has been changed to RealmProxy./performance test runs without fail./"
,,0.2137,realm-java,Style fixes./Merge branch master into cm-file-permission-error Conflicts: changelog.txt realm/src/androidTest/java/io/realm/RealmTest.java/Merge pull request from realm/cm-doc-gettersetters Missing accessors no longer crash annotation compiler/Missing accessors no longer results in NullPointerException./Fix merge mistake + style fixes./Merge branch master of github.com:realm/realm-java into kg-utf-more-debug/Merge branch master into cm-bug-close Conflicts: changelog.txt/Updated JavaDoc and error messages./Cleanup + fixed merge mistake./Added unit tests and fixes bug found on the way/
,,0.1141,realm-java,fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/
,,0.1121,realm-java,fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/
,,0.1101,realm-java,fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/
,,0.1141,realm-java,fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/
,,0.5426,realm-java,Merge pull request from realm/kg-utf-more-debug More debug info when converting a string from to Java fails./Printing location of error/Merge branch master of github.com:realm/realm-java into kg-utf-more-debug/Merge branch master into cm-bug-close Conflicts: changelog.txt/Merge pull request from realm/tg-exception-bloat Cut down on the size of the library a bit/Move C++ Java exception mapping to a function/More debug info when converting a string from to Java fails./Doc fixes for: Lenient UTF-8 UTF-16 transcoding (insert replacement characters)/Fix for: Lenient UTF-8 UTF-16 transcoding (insert replacement characters)/Fix for: Lenient UTF-8 UTF-16 transcoding (insert replacement characters)/Fix for: Lenient UTF-8 UTF-16 transcoding (insert replacement characters)/Fix for: Lenient UTF-8 UTF-16 transcoding (insert replacement characters)/Fix for: Lenient UTF-8 UTF-16 transcoding (insert replacement characters)/Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Catching standard exceptions./Adding better error messages when converting to Java string/Merge pull request from realm/kg-bugfix-nonlatin-chars Use to_jstring() everywhere at the JNI layer/
,,0.1441,realm-java,Merge pull request from realm/cm-file-permission-error Better error reporting opening Realms/Error handling now uses exception thrown from core where it makes sense./fixed conflicts from merging with master/fixed some conflicts/Merge pull request from realm/kg-bugfix-nonlatin-chars Use to_jstring() everywhere at the JNI layer/
,,0.1043,realm-java,fixed conflicts from merging with master/fixed some conflicts/Merge pull request from realm/kg-bugfix-nonlatin-chars Use to_jstring() everywhere at the JNI layer/
,,0.1406,realm-java,Merge branch master of github.com:realm/realm-java into kg-utf-more-debug/Merge branch master into cm-bug-close Conflicts: changelog.txt/Merge pull request from realm/tg-exception-bloat Cut down on the size of the library a bit/Merge branch master into kg-bugfix-sort Conflicts: changelog.txt realm/src/androidTest/java/io/realm/RealmResultsTest.java/Fixed bug in equalTo() for date. Updated testcases/
,,0.574,realm-java,"Merge branch master into cm-file-permission-error Conflicts: changelog.txt/Grammar and small fixes./Grammar fixes./Grammar fixes./Merge branch master into cm-bug-sort-breaks-query-chaining Conflicts: changelog.txt/Adding an error message./Throw NoSuchMethodError when RealmResults.indexOf() is called as the method is not implemented./Merge pull request from realm/cm-bug-sort-childobject Improve error message for sorting by child object/Refactored sort so using a null fieldname always throw an exception./Improved error message for child object sorting./Merge pull request from realm/kg-bugfix-sort Changing sort()/In sort() throw exception if field name does not exist./Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master into cm-utf8-test * master: (34 commits) Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Added copyright Added Realm.close(). Cleanup unit tests. Fixed unit test. Fix minor issues Added Realm.close() to all examples. Streamlined activity and app names. Revert ""Update SimpleRealmProxy.java"" Update SimpleRealmProxy.java Update changelog.txt Fix annotation processor test Updated changelog. Modify the unit tests to comply to Realm.close() Fixed merge mistake. Align ListIterator with standard Java behaviour. Fix RealmTest for Realm.close() Added support for remove in RealmResults iterators. Additional unit tests for their usage. ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge pull request from realm/ez-file-size Mitigate the file size growing problem/Mitigate the file size growing problem This change does the following: * disables the caching of Realm instances in threads without an event loop * makes the Realm class implement Closable * does reference counting for closing Realm instances * checks if the Realm instance has not been closed before any operation/Fixed spelling mistake + missing constructor exception./Fixed exceptions being thrown on next/previous iterator methods./Merge pull request from realm/kg-bugfix-maxdate maxDate was not correct./"
,,0.1815,realm-java,Merge branch master into cm-bug-asyncloaders Conflicts: changelog.txt/Fixed issue with Realm cache not being cleared during a RealmMigrationNeededException + Added unit test./Merge remote-tracking branch origin/master into ez-fail-write/Merge pull request from realm/cm-rotation-crash Handlers for closed Realms are now properly removed/spelling fixed/Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/
,,0.5552,realm-java,"Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master into cm-utf8-test * master: (34 commits) Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Added copyright Added Realm.close(). Cleanup unit tests. Fixed unit test. Fix minor issues Added Realm.close() to all examples. Streamlined activity and app names. Revert ""Update SimpleRealmProxy.java"" Update SimpleRealmProxy.java Update changelog.txt Fix annotation processor test Updated changelog. Modify the unit tests to comply to Realm.close() Fixed merge mistake. Align ListIterator with standard Java behaviour. Fix RealmTest for Realm.close() Added support for remove in RealmResults iterators. Additional unit tests for their usage. ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master of github.com:realm/realm-java into kg-bugfix-removefromrealm Conflicts: changelog.txt/Merge pull request from realm/kg-bugfix-incorrect-cast Subquerying RealmResults/Querying RealmResults with where() returns a query object but resolving field name to column index throwed an exception since it didnt cast correctly./"
,,0.2073,realm-java,"Style fixes./Fix merge mistake + style fixes./Merge branch master of github.com:realm/realm-java into kg-utf-more-debug/Merge branch master into cm-bug-close Conflicts: changelog.txt/fixed conflicts from merging with master/Merge pull request from realm/ez-fail-write Add a unit test about editing a RealmObject outside of a transaction/It is no longer possible to manually set 0 or """" in primary key fields. Refactored error checking so it is more maintainable./"
,,0.5579999999999999,realm-java,"Fix broken unit tests./Style fixes./Fix merge mistake + style fixes./fixed conflicts from merging with master/Merge pull request from realm/ez-fail-write Add a unit test about editing a RealmObject outside of a transaction/Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master into cm-utf8-test * master: (34 commits) Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Added copyright Added Realm.close(). Cleanup unit tests. Fixed unit test. Fix minor issues Added Realm.close() to all examples. Streamlined activity and app names. Revert ""Update SimpleRealmProxy.java"" Update SimpleRealmProxy.java Update changelog.txt Fix annotation processor test Updated changelog. Modify the unit tests to comply to Realm.close() Fixed merge mistake. Align ListIterator with standard Java behaviour. Fix RealmTest for Realm.close() Added support for remove in RealmResults iterators. Additional unit tests for their usage. ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge pull request from realm/kg-bugfix-removefromrealm Extending removeFromRealm() to be able to remove last object/Merge branch master of github.com:realm/realm-java into kg-bugfix-removefromrealm Conflicts: changelog.txt/Merge pull request from realm/kg-bugfix-incorrect-cast Subquerying RealmResults/fixed some conflicts/Fixed unit test./It is no longer possible to manually set 0 or """" in primary key fields. Refactored error checking so it is more maintainable./"
,,0.4807,realm-java,Merge pull request from realm/cm-file-permission-error Better error reporting opening Realms/Unit test style fixes. IOError now being thrown instead of OutOfMemory when opening Realms fail./Better error reporting for error cases when creating a Realm using the File constructors./fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/Merge pull request from realm/cm-rotation-crash Handlers for closed Realms are now properly removed/Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge pull request from realm/ez-file-size Mitigate the file size growing problem/Mitigate the file size growing problem This change does the following: * disables the caching of Realm instances in threads without an event loop * makes the Realm class implement Closable * does reference counting for closing Realm instances * checks if the Realm instance has not been closed before any operation/
,,0.1468,realm-java,"Fixed Date and byte[] being updated by mistake when updating from Json/Merge pull request from realm/cm-bug-createorupdatefromjson Realm.copyOrUpdateFromJson shouldnt update unset properties/Merge pull request from realm/cm-bug-json-long-null Fix support for Json NULL values/Merge branch master into cm-bug-json-long-null Conflicts: changelog.txt realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java/Merge branch master into cm-bug-realmlist-remove Conflicts: changelog.txt/Fixed issues with Null when using JSONObject./Fixed issue in annotation processor with field names called ""name""./"
,,0.1137,realm-java,JavaDoc fixes./Document fixes and styling./More use of boolean flag as error more consistent. Cleanup/Added description to annotation processor + additional error check/Updated error message./
,,0.12300000000000001,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Merge pull request from realm/cm-better-table-error Annotation processor now fails if a RealmObject contains no fields./Fixed unit test./
,,0.0865,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.0849,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master of github.com:realm/realm-java into cm-bug-compactfile/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.0844,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.0865,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.1675,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Merge pull request from realm/cm-bug-wrong-errormsg Improved error message for unknown tables/Improved error message when trying to access unknown tables outside a transaction./
,,0.0657,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master of github.com:realm/realm-java into cm-bug-compactfile/fixed minor spacing style/
,,0.0844,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.2155,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Merge branch master into cm-bug-migration Conflicts: changelog.txt/Merge pull request from realm/cm-bug-copytorealm-primarykey Fixed bug in Realm.copyToRealm() with primary key values/Minor style fix for better readability./fixed comment/Fixed bug where copyToRealm() crashed when copying objects with primary key data./
,,0.1305,realm-java,"Merge branch master into cm-bug-null-primarykey Conflicts: changelog.txt/Merge pull request from realm/cm-realmpath RealmMigrationNeededException can now return the path to the Realm/Adds RealmPath to RealmMigrationNeedException/Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge pull request from realm/cm-bug-compactfile Made Realm.compactRealmFile() more failure resilient./Compacting encrypted Realms fail on some devices, and it is disabled temporarily./Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/"
,,0.0958,realm-java,Handle null value for String in Json when updating Fix Update the objects String field to empty string when the corresponding field in Json is null./Merge pull request from realm/kg-bug-migrate-linkview Tighter check when validating tables with links/Better error messages/Merge branch master into cm-bug-clear/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/
,,0.1083,realm-java,Merge pull request from realm/kg-bug-migrate-linkview Tighter check when validating tables with links/Better error messages/Merge branch master into cm-bug-clear/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/
,,0.1919,realm-java,"Avoid wildcard imports and execute in the background/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Support search indexing for column int, bool, date 1. Enable the search index annotation on byte, short, int, long, boolean, and Date. 2. Enable add/remove search index in java. 3. Annotation processor test to support better detailed test cases. 4. Modify JNI test cases. 5. Update doc. 6. Add AnnotationIndexTypes to avoid polluting other test cases. This is the first PR for Implicit index to int primary keys will be handled in another PR./Merge branch master into cm-bug-attached-check Conflicts: changelog.txt/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from realm/kg-bug-missing-generic-type Checking for missing generic type during annotation processing/Merge branch master into cm-bug-clear/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/"
,,0.1455,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/minor tweaks to the concurrency example (fix possible Liveness issue)/
,,0.1437,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/minor tweaks to the concurrency example (fix possible Liveness issue)/
,,0.1473,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/minor tweaks to the concurrency example (fix possible Liveness issue)/
,,0.073,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.071,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.0772,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.1533,realm-java,Merge pull request from realm/kg-bug-throw-error Introducing RealmError/using std::unique_ptr for handover + remove unnecessary begin_read in a spearate JNI call + latest fixes from fsa_handover_demo (untyped query etc.)/Unspecified exception (std::exception) should be a RealmError/Support UnreachableVersionException from Core/Realm will now throw a RealmError when Realm Core enters an unrecoverable error condition./
,,0.0738,realm-java,"using std::unique_ptr for handover + remove unnecessary begin_read in a spearate JNI call + latest fixes from fsa_handover_demo (untyped query etc.)/Changing logic to handover the query from caller to background thread, handle different failure points (begin_read, import_handover), update UnitTests/Support UnreachableVersionException from Core/"
,,0.1085,realm-java,"Documenting that RealmResults.{first,last} throw exception if result is empty./Merge pull request from realm/ez-findbugs-hunt Add support for Findbugs and fix the issues found/Add support for Findbugs and fix the issues found/"
,,0.2216,realm-java,Merge pull request from realm/kg-bug-throw-error Introducing RealmError/Unspecified exception (std::exception) should be a RealmError/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/Merge pull request from realm/nh-1169-unchecked_cast Fixes unchecked cast/Merge pull request from realm/ez-findbugs-hunt Add support for Findbugs and fix the issues found/Add support for Findbugs and fix the issues found/Improved error message for objects not part of the schema./
,,0.0981,realm-java,"Merge pull request from realm/kg-bug-multiple-queries Querying RealmResults can crash/Prevent GC release TableView and Query Parsed native backtrace can be found at . 1. Add references to TableView and TableQuery in order to prevent premature garbage collection. 2. Add test helper function to trigger GC. 3. Add relevant test case./Changing logic to handover the query from caller to background thread, handle different failure points (begin_read, import_handover), update UnitTests/"
,,0.091,realm-java,Merge pull request from realm/kg-bug-multiple-queries Querying RealmResults can crash/Prevent GC release TableView and Query Parsed native backtrace can be found at . 1. Add references to TableView and TableQuery in order to prevent premature garbage collection. 2. Add test helper function to trigger GC. 3. Add relevant test case./
,,0.18100000000000002,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master into cm-bug-attached-check Conflicts: changelog.txt/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/
,,0.3021,realm-java,"Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master into cm-bug-attached-check Conflicts: changelog.txt/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from realm/kg-bug-findfirst-null-values Added a check for null values in io.realm.internal.Table.findFirst{String,Date}()./Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/Merge pull request from realm/ez-findbugs-hunt Add support for Findbugs and fix the issues found/Add support for Findbugs and fix the issues found/Merge pull request from realm/ez-table-lint-warnings Fix a few lint warning reported by the Android Linter/Fix a few lint warning reported by the Android Linter/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/Merge pull request from realm/cm-bug-clear RealmList methods now fail if not within a write transaction/"
,,0.1259,realm-java,"Merge pull request from realm/mc-bug-1328 Fix dead lock might happen in shutdown hook./Remove broken shutdown hook. To fix When System.exit(0) called, shutdown hook will be run. There is no guarantee in this case GC will collect everything. So a dead lock will happen here. Remove this part of code since the core side can ensure the integrity of db file when other resource is not released./Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from realm/ez-findbugs-hunt Add support for Findbugs and fix the issues found/Add support for Findbugs and fix the issues found/"
,,0.075,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from PavelSynek/logger-bug Fixes loggers/
,,0.1759,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/PR comment fixes./Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/Merge pull request from realm/cm-bug-clear RealmList methods now fail if not within a write transaction/
,,0.1835,realm-java,"Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master into cm-bug-attached-check Conflicts: changelog.txt/Changing logic to handover the query from caller to background thread, handle different failure points (begin_read, import_handover), update UnitTests/Merge branch master into cm-bug-clear/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/"
,,0.2142,realm-java,Merge pull request from realm/my/isNull-nested-query-for-link-field throws IllegalArgumentException if isNull/isNotNull is called for unsupported field./throws IllegalArgumentException instead of RealmError if isNull/isNotNull is called for linked field and the last element is a link./Merge branch master into cm/bug/migrate-open-realm/Merge pull request from realm/nh/post-async-codestyle fix code style/fix code style/small code style fix/Merge pull request from realm/kg/bugfix-binary-isnotnull Bugfix binary isnotnull/Fixing a bug in RealmQuery.isNotNull() for binary data/now throwing Exception if we try to add/remove listener for unmanaged RealmObject/RealmResults/deleting a handover TableView to avoid memory leaks/fix tests/
,,0.1479,realm-java,"Fix generic, update Javadoc & error messages/now throwing Exception if we try to add/remove listener for unmanaged RealmObject/RealmResults/now RealmQuery throw exception if reused for another async query/Add RealmQuery.isValid(), RealmResults#isValid() and RealmList#isValid(). fixes javadoc, revert getByIndex to Realm.get, remove ArgumentsHolder fron public package/"
,,0.0669,realm-java,fix tests/Merge pull request from realm/mc-enc-not-supported Add RealmEncryptionNotSupportedException/Update core to v0.89.8 Add RealmEncryptionNotSupportedException/
,,0.1485,realm-java,Fixed a bug in RealmQuery.isNull() and RealmQuery.isNotNull() which validated the query prematurely./Merge branch master of github.com:realm/realm-java into kg/bugfix-binary-isnotnull/
,,0.2615,realm-java,"Merge pull request from realm/my-fix-crash-of-RealmList Fix native crash and wrong exception in RealmList./Fix native crash or wrong exception in RealmList. This commit fixes Methods listed below in RealmList now throws IllegalStateException if parent object has been removed or the Realm instance has been closed. * add(int,RealmOject) * add(RealmObject) * set(int,RealmObject) * move(int,int) * clear() * remove(int) * remove(int) * remove(RealmObject) * removeAll(Collection) * get(int) * first() * last() * size() * where() RealmList#toString() now returns if container object has been removed or Realm instance has been closed./"
,,0.2195,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from maciejwitowski/mw-fix-comment-in-example Fix comment in gridViewExample/Fix comment in gridViewExample/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1349,realm-java,Merge pull request from realm/nh/fixes_2130_exception_in_transac Using separate interfaces for async transaction also fixes separate interfaces for async transaction also fixes branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1204,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.2492,realm-java,More fixes for the AP/Fix the AP unit tests/Fix the unit tests of the annotations processor. Also remove one unit test which makes no sense now that users can write model classes in any way they like./Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.2461,realm-java,More fixes for the AP/Fix the AP unit tests/Fix the unit tests of the annotations processor. Also remove one unit test which makes no sense now that users can write model classes in any way they like./Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.2002,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/cm/bug/copyorupdate-primarykey copyObjectFromJson now works correctly with PrimaryKey/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.1791,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.18100000000000002,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.7063,realm-java,"Fixed bug when multiple RealmResults.distinct() to return wrong results/Merge pull request from realm/mc/bug/1945 Access to RealmResults based on deleted RealmList/Access to RealmResults based on deleted RealmList * When the original RealmList is deleted, for most methods of RealmResults should just work without crash by just treat it like an empty RealmResults. * RealmResults.where() throws IllegalStateExecption in this case. * RealmResults.isValid() returns false in this case. This is a temp fix, check for more details. Close pull request from realm/mc/bug/2057 Better exception message when sort on sub object/Better exception message when sort on sub object Close pull request from realm/lk/fix-pmd-nested-if Fix PMD error/Fix PMD error. Nested if/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Merge branch master into kg/bug/improving-so-loading-using-relinker/Adding jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/fix_1894_changelistener_not_called Nh/fix 1894 changelistener not called/fix 1894 changelistener not called/Merge pull request from realm/nh/fix-1884-listener-trigger Nh/fix 1884 listener trigger/fix 1884 listener trigger/Fixed unit tests/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/"
,,0.3327,realm-java,"Merge pull request from realm/mc/bug/1945 Access to RealmResults based on deleted RealmList/Access to RealmResults based on deleted RealmList * When the original RealmList is deleted, for most methods of RealmResults should just work without crash by just treat it like an empty RealmResults. * RealmResults.where() throws IllegalStateExecption in this case. * RealmResults.isValid() returns false in this case. This is a temp fix, check for more details. Close pull request from realm/kg/bug/improving-so-loading-using-relinker Improving .so loading by using the ReLinker library/Merge branch kg/bug/improving-so-loading-using-relinker of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/"
,,0.1855,realm-java,Merge pull request from realm/kg/bug/improving-so-loading-using-relinker Improving .so loading by using the ReLinker library/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.3417,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk/fix-realmquery-isnotempty Fix RealmQuery.isNotEmpty() correctly./Fix RealmQuery.isNotEmpty(). It is fix for Fix the native method + Renaming./Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/fix-1851-async-badversion-crash fix1851 async badversion crash/add batch update for async queries to fix branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.6582,realm-java,"Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Adding jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/"
,,0.1836,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.6607,realm-java,"Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Adding jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/kk-typo Fix typo in documentation comment: (ndex index)/Fix typo in documentation comment: (ndex index)/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/"
,,0.1917,realm-java,Merge pull request from realm/kg/bug/improving-so-loading-using-relinker Improving .so loading by using the ReLinker library/Merge branch kg/bug/improving-so-loading-using-relinker of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.259,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/mc-linkview-leak Release LinkView native pointers/Release LinkView native pointers Fix * Add abstract method to NativeObjectReference for native resource releasing. * Implement NativeObjectReference.cleanup for UncheckRow and LinkView/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.1303,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.2574,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/mc-linkview-leak Release LinkView native pointers/Release LinkView native pointers Fix * Add abstract method to NativeObjectReference for native resource releasing. * Implement NativeObjectReference.cleanup for UncheckRow and LinkView/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.1204,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1263,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.6619,realm-java,"Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Adding jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/mc-linkview-leak Release LinkView native pointers/Release LinkView native pointers Fix * Add abstract method to NativeObjectReference for native resource releasing. * Implement NativeObjectReference.cleanup for UncheckRow and LinkView/Merge pull request from realm/lk-fix-javadoc Fix javadocs/"
,,0.2792,realm-java,Merge pull request from realm/ez/fix-findbugs Fix a couple of Findbugs issues/Fix a couple of Findbugs issues/Merge pull request from realm/kg/bug/improving-so-loading-using-relinker Improving .so loading by using the ReLinker library/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Merge pull request from realm/mc/bug/close-in-object-query Always close shared group first before async msg/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.5137,realm-java,"Merge pull request from realm/nh/fixes_2130_exception_in_transac Using separate interfaces for async transaction also fixes separate interfaces for async transaction also fixes pull request from realm/mc/bug/flaky-test-fix Fix flaky tests related with async transaction/Fix flaky tests related with async transaction * Background realm needs to be closed before notifying other threads in async transaction. * Latch needs to be called after Realm closed./Merge pull request from realm/cm/bug/copyfromrealm-dynamicrealmobject IllegalArgumentException when calling copyFromRealm(dynamicRealmObject)/IllegalArgumentException now being thrown when calling copyFromRealm(dynamicRealmObject)/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Adding declarations to javadocs for BaseRealm, Realm and DynamicRealm Applying changes from review. Adding updated javadoc Removing RuntimeException declaration and adding grammar fix./Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/fix-1884-listener-trigger Nh/fix 1884 listener trigger/fix 1884 listener trigger/Merge pull request from realm/mc/bug/close-in-listener Fix crash when close Realm in listener/Fix crash when closing a Realm in listener branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/cm/bug/copyorupdate-primarykey copyObjectFromJson now works correctly with PrimaryKey/Merge pull request from realm/nh/listener-strong-ref fix RealmChangeListener are strong reference now./Checking to see if a transaction is currently in progress for sync and async transaction pathways. Also adding logging. Added a test helper to assist with log assertion. Fixes Fixing typo. Removing logger after testing Removing extra line Fixing tests and adding change log message. Adding breaking change message Small cosmetic changes Adding punctuation formatting Fixing unit test./Merge pull request from realm/lk-fix-javadoc Fix javadocs/"
,,0.3806,realm-java,"Merge pull request from realm/kg/enhancement/surrogates String setters will throw IllegalArgumentException/String setters will throw IllegalArgumentException/Merge pull request from realm/my/fix_data_usage_of_StringData Fix wrong usages of StringData.data()./Fix wrong usages of StringData.data(). `StringData.data()` does not guarantee the null termination of returned char array. We must use `size()` information to properly handle the char array in the StringData such as `std::string(str.data(), str.size())`./Merge pull request from realm/mc/bug/1945 Access to RealmResults based on deleted RealmList/Access to RealmResults based on deleted RealmList * When the original RealmList is deleted, for most methods of RealmResults should just work without crash by just treat it like an empty RealmResults. * RealmResults.where() throws IllegalStateExecption in this case. * RealmResults.isValid() returns false in this case. This is a temp fix, check for more details. Close pull request from realm/my/fix_concat_StringData_and_C_string Fix field name in the message of IllegalArgumentException throw by the accessors of DynamicRealmObject/Fix field name in the message of IllegalArgumentException throw by the accessors of DynamicRealmObject/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/fix-1851-async-badversion-crash fix1851 async badversion crash/add batch update for async queries to fix branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/"
,,0.2677,realm-java,"Merge pull request from realm/mc/bug/1945 Access to RealmResults based on deleted RealmList/Access to RealmResults based on deleted RealmList * When the original RealmList is deleted, for most methods of RealmResults should just work without crash by just treat it like an empty RealmResults. * RealmResults.where() throws IllegalStateExecption in this case. * RealmResults.isValid() returns false in this case. This is a temp fix, check for more details. Close branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/"
,,0.1183,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1204,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1204,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.2467,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/"
,,0.2304,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/"
,,0.52,realm-java,"RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/cm/bug/badversionexception Fix BadVersionException/Fixed race condition causing BadVersionException/Merge pull request from realm/mc/bug/1990 Only load RealmObservableFactory when RxJava exist/Only load RealmObservableFactory when RxJava exist Close * Check RxJava existence only once. * Dont load RealmObservableFactory if RxJava doesnt exist. NOTE: When reflection called on the RealmObject/RealmResults, crash will still happen because of Observable doesnt exist in the class path. In such a case, a dummy rx.Observable is still needed as a workaround./Merge pull request from realm/mc/bug/deleted-linkview-release-branch Adapt core fix for the delete RealmList/Adapt core fix for the delete RealmList Update core to 0.96.1. No more exception will be thrown when access RealmResults if the base RealmList has be deleted. Instead, it will be treated as an empty RealmResults forever./"
,,0.3138,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/mc/bug/deleted-linkview-release-branch Adapt core fix for the delete RealmList/Adapt core fix for the delete RealmList Update core to 0.96.1. No more exception will be thrown when access RealmResults if the base RealmList has be deleted. Instead, it will be treated as an empty RealmResults forever./"
,,0.4108,realm-java,"RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/Merge pull request from realm/lk/fix-doc Fix javadoc/Fix javadoc/"
,,0.3354,realm-java,"RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/Integer/Long type can be null. 2. The object with nil primary key can be updated. 3. Migration checks if existing nullable type is set to be nullable in existing file. If not, throws RealmMigrationNeeded. 4. Duplicated null as PrimaryKey throws RealmPrimaryKeyConstraintException. 5. When a new empty row is added, the default value checked for duplicated is still the same empty string ("""") at Table.addEmptyRow() 6. Since there isnt equivalent term for Optional in Java 7 yet, nullable PK types are configured as following in this PR. | String PK | Number PK | Primitive PK | Table Column | Nullable | Nullable | Not Nullable |/Merge pull request from realm/lk/fix-doc Fix javadoc/Fix javadoc/Merge pull request from realm/my/fix_2439 Fix the String from DynamicRealmObject.toString()./fix the String from DynamicRealmObject.toString(). Now DynamicRealmObject.toString() shows null value as ""null"". ""class_"" prefix is removed from type name in that String. Align the format to the String from typed RealmObject./"
,,0.0915,realm-java,"Use ReLinker of JCenter instead of including the dependency ourselves. There was the problem that se Realm were forced to tell users to add the jitpack repo manually, so we have decided to include the dependency ourselves (#2415). ReLinker is on JCenter now. We can use Relinker of JCenter instead. It will resolve a local copy of ReLinker The problem is that libraries that use Realm were forced to tell users to add the jitpack repo manually, which is inconvenient./"
,,0.3933,realm-java,"Finalizer optimization: Replace hashmap Problems we had by using hashmap: 1. Hashmap is not thread save and we access the same hashmap in finalizer thread and caller thread of Rows constructor. 2. Removing reference from the hashmap is a little bit slower when there are many references waited to be GCed. Refactor the NativeObjectReference, make it as a final class and calling native resources deallocation directly inside the class. This is needed for further optimization, like batch delete native pointers to avoid multiple JNI calls. Some benchmark comparison using the array solution vs hashmap solution: (Benchmark running on Genymotion Nexus 6 5.1.0) (hashmap) Creating 200000 rows in avg 10000 rows takes 65ms (array) Creating 200000 rows in avg 10000 rows takes 67ms (hashmap) Deleting 200000 rows in avg 10000 rows takes 8ms (array) Deleting 200000 rows in avg 10000 rows takes 4ms (hashmap) Creating 2000000 rows in avg 10000 rows takes 30ms (array) Creating 2000000 rows in avg 10000 rows takes 28ms (hashmap) Deleting 200000 rows in avg 10000 rows takes 95ms (array) Deleting 200000 rows in avg 10000 rows takes 46ms (hashmap) Creating 10000000 rows in avg 10000 rows takes 33ms (array) Creating 10000000 rows in avg 10000 rows takes 28ms (hashmap) Deleting 1000000 rows in avg 10000 rows takes 62ms (array) Deleting 1000000 rows in avg 10000 rows takes 23ms/Merge pull request from realm/mc/bug/2381 More checkings when modify RealmList/More checkings when modify RealmList Fix * New method LinkView.getTargetTable(). * Proper checking to add DynamicRealmObject to RealmList. * Disallow modifying with RealmObject belongs to another Realm instance./"
,,0.4439,realm-java,"Nh/fix listener generics (#2726) * Fix generics when attaching RealmChangeListener for Realm & DynamicRealm/Add to realmObjects when addChangeListener called (#2723) * Only add the RealmObject to HandlerController.realmObjects when addChangeListener called. This will avoid we have too many objects in the map. * addToRealmObjects missed reference queue which would lead to the map grows always without cleaning. Close potentially a fix to ./Make Realm.createObject(Class,PrimaryKey) public (#2622) This method is a way to solve the problem that people might have data with a primary key that is is the default value for that type, e.g a long primary key with the value 0. Once this object is saved in Realm any calls to the normal Realm.createObject() would throw an exception as it would try to assign the default value (zero) to the object before the user could set it to something else. With this method that is no longer a problem. Internally we already use this method and it is already public in the Dynamic API. The reason for not making this public earlier was due to fear of mis-use since there is no type-safe guarantee at compile time. However since it is already public in the Dynamic API and we havent seen any indication of that being misused we feel it should be safe to make this public. Also our Query API is also semi-threadsafe so there is precedence there as well./Only throw RealmException if absolutely necessary (#2618) We should avoid wrapping lower level exceptions in RealmExceptions unless there is a good reason for it. We had multiple support issues where people were confused about the RealmException and didnt understand they had to dig through the stack trace for the original exception. This change alters the behaviour of all our JSON methods so they now only convert JSONException to RealmException in order to prevent checked exceptions to reach the user. All other exceptions should be thrown directly./RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/aAInitial dataset for a Realm (#2602) * Support creating an initial dataset for a Realm * PR fixes for initial data set/Merge pull request from realm/lk/fix-doc Fix javadoc/Fix javadoc/Merge pull request from realm/mc/bug/threading-check-copy-to-realm Thread check for copyToRealm/copyToRealmOrUpdate/Merge pull request from realm/mc/bug/2316 migrateRealm throws when db doesnt exsit/Merge pull request from realm/mc/bug/deprecate-getInstance Deprecate Realm.getInstance(Context)/"
,,0.369,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/cm/bug/oberservable-gc RealmResults/Objects are no longer accidentially GCed/Merge pull request from realm/cm/rxjava-close-bug Realm Observables now holds a Realm instance reference/Merge pull request from realm/mc/bug/1990 Only load RealmObservableFactory when RxJava exist/Only load RealmObservableFactory when RxJava exist Close * Check RxJava existence only once. * Dont load RealmObservableFactory if RxJava doesnt exist. NOTE: When reflection called on the RealmObject/RealmResults, crash will still happen because of Observable doesnt exist in the class path. In such a case, a dummy rx.Observable is still needed as a workaround./Merge pull request from marukami/rx-typo fixed typo/fixed typo/"
,,0.1211,realm-java,"Merge pull request from realm/mc/bug/deleted-linkview-release-branch Adapt core fix for the delete RealmList/Adapt core fix for the delete RealmList Update core to 0.96.1. No more exception will be thrown when access RealmResults if the base RealmList has be deleted. Instead, it will be treated as an empty RealmResults forever./"
,,0.1157,realm-java,"Merge pull request from realm/mc/bug/deleted-linkview-release-branch Adapt core fix for the delete RealmList/Adapt core fix for the delete RealmList Update core to 0.96.1. No more exception will be thrown when access RealmResults if the base RealmList has be deleted. Instead, it will be treated as an empty RealmResults forever./"
,,0.1843,realm-java,Examples should use transaction blocks (#2800) * Moving examples over to execute transaction * Updating comments to use executeTransaction * Use partial mocks for Realm#executeTransaction(...) and create additional tests to illustrate mock verification of Realm#executeTransaction(...). Had to do this because of a problem with Powermock:
,,0.1692,realm-java,Removed all deprecated methods and fixed examples./Examples should use transaction blocks (#2800) * Moving examples over to execute transaction * Updating comments to use executeTransaction * Use partial mocks for Realm#executeTransaction(...) and create additional tests to illustrate mock verification of Realm#executeTransaction(...). Had to do this because of a problem with Powermock:
,,0.3305,realm-java,Merge pull request from realm/merge-f3b025-to-master * Check transaction state for buld insertion (#3228) * Throws if they are not called in a transaction. * Test cases for buld insertion thread checking. * Lint warnings fix. Close * Clarify how insertOrUpdate behave for objects with primary keys. (#3241) * Missing transaction in threading example (#3245) Close * insert(): Correctly detect multiple objects with the same primary key (#3239) * Fix isLoaded JavaDoc (#3240)/Removed all deprecated methods and fixed examples./Examples should use transaction blocks (#2800) * Moving examples over to execute transaction * Updating comments to use executeTransaction * Use partial mocks for Realm#executeTransaction(...) and create additional tests to illustrate mock verification of Realm#executeTransaction(...). Had to do this because of a problem with Powermock:
,,0.1776,realm-java,Removed all deprecated methods and fixed examples./Examples should use transaction blocks (#2800) * Moving examples over to execute transaction * Updating comments to use executeTransaction * Use partial mocks for Realm#executeTransaction(...) and create additional tests to illustrate mock verification of Realm#executeTransaction(...). Had to do this because of a problem with Powermock:
,,0.4389,realm-java,"Fix listeners can exposing unsynchronized RealmResults (Async queries) (#2951) When async queries are updated, they call listeners in a specific order. Before this commit this had a very subtle bug, so accessing synchronous RealmResults from inside a async RealmResult listener might hit a detached row accessor. Reason being is that the Realm is advanced, then all listeners called in order, but RealmResults are not synchronised until just before listener is called. This commit fixes this so all RealmResults are now synced before the listener is called./Remove optional APIs if dependencies dont meet (#2727) * Add to mark a method as optional with dependencies. * New bytecode transformer to remove an optional API if it doesnt have enough dependencies. * Modify gradle plugin. * Mark the rx.Observable related APIs as optional. * Add integration-tests module. This is not the perfect solution since the RxObservableFactory is still in the final result. But it is good enough for us to work around the issue with Jackson and other lib which needs to do reflection on the RealmObject./RealmResults.isLoaded description fix (#2896) The Javadoc of RealmResults.isLoaded() is revised for the correct status according to a return value./Fixed grammar in exception message (#2827)/add a null check to addChangeListener and removeChangeListener (#2805) * add a null check to addChangeListener and removeChangeListener in Realm and DynamicRealm (fixes * reflect review comments/Removed all deprecated methods and fixed examples./Examples should use transaction blocks (#2800) * Moving examples over to execute transaction * Updating comments to use executeTransaction * Use partial mocks for Realm#executeTransaction(...) and create additional tests to illustrate mock verification of Realm#executeTransaction(...). Had to do this because of a problem with Powermock: for using Realm with ObservedOn() & SubscribedOn() (#2787) It is recommended to use Realm.where().find*Async() instead of the combination of ObservedOn()/SubscribedOn() to avoid Realm being accessed from different threads./"
,,0.2739,realm-java,"JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./Remove optional APIs if dependencies dont meet (#2727) * Add to mark a method as optional with dependencies. * New bytecode transformer to remove an optional API if it doesnt have enough dependencies. * Modify gradle plugin. * Mark the rx.Observable related APIs as optional. * Add integration-tests module. This is not the perfect solution since the RxObservableFactory is still in the final result. But it is good enough for us to work around the issue with Jackson and other lib which needs to do reflection on the RealmObject./Minor fix of using StringBuilder/Avoid Table.nativeToString/nativeRowToString (#2884) Table::row_to_string Table::to_string are for debugging purpose only, it calls string::substr which might truncate an UTF-8 string at any char. Thus a crash could happend in JNI when converting to UTF-16. This will only happen when user attach a debugger and the debugger is trying to call Table.toString. Close"
,,0.2703,realm-java,Merge pull request from realm/merge-f3b025-to-master * Check transaction state for buld insertion (#3228) * Throws if they are not called in a transaction. * Test cases for buld insertion thread checking. * Lint warnings fix. Close * Clarify how insertOrUpdate behave for objects with primary keys. (#3241) * Missing transaction in threading example (#3245) Close * insert(): Correctly detect multiple objects with the same primary key (#3239) * Fix isLoaded JavaDoc (#3240)/Fix isLoaded JavaDoc (#3240)/
,,0.2956,realm-java,"Merge pull request from realm/merge-f3b025-to-master * Check transaction state for buld insertion (#3228) * Throws if they are not called in a transaction. * Test cases for buld insertion thread checking. * Lint warnings fix. Close * Clarify how insertOrUpdate behave for objects with primary keys. (#3241) * Missing transaction in threading example (#3245) Close * insert(): Correctly detect multiple objects with the same primary key (#3239) * Fix isLoaded JavaDoc (#3240)/ PrimaryKey index rearrangement in migration revisited (#2920) This PR fixes two issues; 1) When a column with a smaller index than that of a primary key field gets removed, the primary key field index decrements, which causes a cached primary key index to point a wrong field. 2) When a primary key field is renamed, the primary key meta table is not updated accordingly./Table.toString() shows PK detail (#2903) To enhance toString() message for including PK information to debug Table./Avoid Table.nativeToString/nativeRowToString (#2884) Table::row_to_string Table::to_string are for debugging purpose only, it calls string::substr which might truncate an UTF-8 string at any char. Thus a crash could happend in JNI when converting to UTF-16. This will only happen when user attach a debugger and the debugger is trying to call Table.toString. Close"
,,0.5023,realm-java,"Merge pull request from realm/merge-f3b025-to-master * Check transaction state for buld insertion (#3228) * Throws if they are not called in a transaction. * Test cases for buld insertion thread checking. * Lint warnings fix. Close * Clarify how insertOrUpdate behave for objects with primary keys. (#3241) * Missing transaction in threading example (#3245) Close * insert(): Correctly detect multiple objects with the same primary key (#3239) * Fix isLoaded JavaDoc (#3240)/Check transaction state for buld insertion (#3228) * Throws if they are not called in a transaction. * Test cases for buld insertion thread checking. * Lint warnings fix. Close empty collection to insert/insertOrUpdate(Collection) (#3106) * added tests to reproduce * Fixed a crash when an empty `Collection` is passed to `insert()`/`insertOrUpdate()` (#3103). * update the implementation * update javadoc comment/Merge pull request from realm/merge-ecbacf-to-master Fix merge from ecbacf to master/Fix async transaction problem when async query already exist. (#2780) I have rewritten how async transactions works. Before they did this: 1) commitOnBackgroundThread() post REALM_CHANGED post onSuccess runnable The problem with that approach was that the REALM_CHANGED would be swallowed if async queries existed which meant that the async transaction would call onSuccess on an old version of the Realm (making it look like it didnt work). Instead we now do this: 2) commitOnBackgroundThread post runnable that calls HandlerController.handleAsyncTransactionCompleted(runnable) The special runnable is treated as a combined REALM_CHANGED + Callback, which makes it possible for us to queue up callbacks until we are finally able to trigger all of them. Unfortunately the Handler has poor support for this so it means that we no longer can detect if such a message is in the queue. This means that it introduces a slight chance of such a event plus a real REALM_CHANGED event to be in the message queue at the same time. I considered that acceptable (since it can already happen today), and since preventing this will introduce more complexity to something that is already entirely to complex./Remove optional APIs if dependencies dont meet (#2727) * Add to mark a method as optional with dependencies. * New bytecode transformer to remove an optional API if it doesnt have enough dependencies. * Modify gradle plugin. * Mark the rx.Observable related APIs as optional. * Add integration-tests module. This is not the perfect solution since the RxObservableFactory is still in the final result. But it is good enough for us to work around the issue with Jackson and other lib which needs to do reflection on the RealmObject./add a null check to addChangeListener and removeChangeListener (#2805) * add a null check to addChangeListener and removeChangeListener in Realm and DynamicRealm (fixes * reflect review comments/Fixed unit tests./Removed all deprecated methods and fixed examples./Examples should use transaction blocks (#2800) * Moving examples over to execute transaction * Updating comments to use executeTransaction * Use partial mocks for Realm#executeTransaction(...) and create additional tests to illustrate mock verification of Realm#executeTransaction(...). Had to do this because of a problem with Powermock:"
,,0.2798,realm-java,"Wait all async tasks done before next test (#3319) This is highly related with Below things are still guaranteed by this change after commit async transaction: * When callback function called (onSuccess/onError), the background Realm is closed. * When any change listeners called, the background Realm is closed. What is true now but it is not guaranteed in the future: * Background Realm might not be closed before REALM_CHANGED sent (not received). Due to this, to avoid the flaky tests, we have to ensure all async tasks quit peacefully before start the next test. This is implemented by wait and check in the TestRealmConfigurationFactory. NOTE: Any test, if the async tasks cannot be finished peacefully in a certain time, it has to be considered as a problem and fixed. This would be needed by OS notifications since Java wont have a precise control of sending REALM_CHANGED anymore./"
,,0.1893,realm-java,"Java doc, comments & exception message fix/Fix various minor issues/Fix lots of minor issues/Use RealmNotifier for RealmObject listener Ideally we should use the object notifications from object store, but since it is still in progress and the KVO notifications is not generic enough for us to use (there are some logic issues), we simply use the RealmNotifier to trigger the RealmObject listeners. There will be false positive notifications with this implementation since we are only checking the Rows table version. But this problem exists even before this commit./Merge pull request from realm/merge-5d1d1f-to-master Fix merge from 5d1d1f to master/Workaround for the Alooper and postAtFrontQueue See get DynamicRealmObject from RealmResults./Nh/fixes 3732 insertOrUpdate using other Realm (#3755)/"
,,0.1347,realm-java,Fix RealmCollection.contains not respecting custom equal methods (#4111)/Fix lots of minor issues/Fix test contains_realmObjectFromOtherRealm/RealmResults.distinct() returns a new RealmResults Doing distinct on the original results creates lots of problems: It is not supported by OS. It wont play well with fine grained notifications. It has a different behaviour compared with RealmResults.sort()./Fix get DynamicRealmObject from RealmResults./Remove useless code and fix one missed findAllxxx function./Fix contains & deleteAll/Handling Results exceptions. Adding support for contains/index_of/
,,0.1065,realm-java,"Fix various minor issues/Wire the ""like"" predicate into RealmQuery (#3992) * Wire the ""like"" predicate into RealmQuery Fixes pull request from realm/merge-a8d647-to-master Fix merge from a8d647 to master/"
,,0.0686,realm-java,Fix get DynamicRealmObject from RealmResults./Merge pull request from realm/merge-a8d647-to-master Fix merge from a8d647 to master/
,,0.1066,realm-java,Use getTargetTable to build query on linkview otherwise RealmQueryTests.findFirst() will fail because it compares the row with the tables name first./Merge pull request from realm/merge-a8d647-to-master Fix merge from a8d647 to master/
,,0.1521,realm-java,"Java doc, comments & exception message fix/fix transaction error of synced Realm./Merge pull request from realm/merge-ed0f18-to-master Fix merge from ed0f18 to master/Nh/fixes 3732 insertOrUpdate using other Realm (#3755)/"
,,0.3282,realm-java,"Clean up SharedRealm source Remove unused methods. Fix double negatives. Use auto& to avoid creating temp objects./Dont reset SharedRealm ptr (#4478) Keep the SharedRealm ptr valid when close it. To allow the is_closed checking could throw in the Object Store and it can be converted to a friendly Java exception. Check if SharedRealm is closed when create collection iterator. Throw an ISE if it is. Fix ./Refactor Schemas into separate native and realm-based implementations (#4382) * Refactor Schemas into separate native and realm-based implementations * Fix all tests * Respond to PR comments * Temporary (git add .) kludge to fix visiblity problem/Add detailed notification for RealmObject (#4331) See Add ObjectChangeSet & RealmObjectChangeListener. Add OsObject to wrap ObjectStores Object for notifications. No more false positive notifications for RealmObject. Use ObserverPairList in ProxyState instead of normal list to solve the potential listener removal problems which is handled well by the ObserverPairList. Fix tests./RealmResults is always live-to-updated This is the precondition of fine grained notifications. OS will trigger the collection notification immediately when transaction begins on the local thread to compute the change set if there is any. This conflicts with Javas original RealmResults behavior the original RealmResults would only be synced in the next event loop. Also, there are some edge cases dont work well with the original RealmResults behavior, see details in So: RealmResults becomes always up-to-date again which means it will never contains a invalid row. Behavior of iteration on a RealmResults still just works, it will just iterate on snapshot of collection. This means user can still delete elements from a RealmResults inside iteration. Deletion & Modification on RealmResults in simple-for-loop wont work as expected if the changes will impact the order/elements of the results. This could be solved by the future new Collection type RealmCollectionSnapshot. Add Collection.load() and Collection.isLoaded() to support java sync queries. Test fix. wont be an issue anymore since the RealmResults is always up to date and it wont contain any invalid rows. So remove the related tests. Failure tests caused by listener being triggred with beginTransaction() Remove realmResultsListenerAddedAfterCommit. when add listener to the OS Results after commit transaction, the OS CollectionNotifier will be created at the SharedGroup version of transaction committed. So the listener wont be called anymore since the all changes already exist in current SharedGroup./"
,,0.0872,realm-java,Use target table to create snapshot from LinkView (#4556) Fix . Remove useless confusing `LinkView.getTable()`./
,,0.1416,realm-java,Add detailed notification for RealmObject (#4331) See Add ObjectChangeSet & RealmObjectChangeListener. Add OsObject to wrap ObjectStores Object for notifications. No more false positive notifications for RealmObject. Use ObserverPairList in ProxyState instead of normal list to solve the potential listener removal problems which is handled well by the ObserverPairList. Fix tests./Merge pull request from realm/merge-dc09d5-to-master Fix merge from dc09d5 to master/Print path for RealmFileException/
,,0.1043,realm-java,Merge pull request from realm/merge-196ee5-to-master Fix merge from 196ee5 to master/Merge remote-tracking branch origin/releases into my/fix_memory_leaking/KeepMember OsObject.notifyChangeListeners Fix Use release assertion when finding java method./
,,0.0708,realm-java,"Convert exception on sync client to java exception (#4707) update object-store to 1e3cbb1789 Convert exception on sync client to java exception This will give us some better information when excpetion happens on the sync client thread. Update sync to 1.10.1, core to 2.8.4/"
,,0.247,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.0871,realm-java,"Sign release apk for examples Close . without siging, monkeyRelease will fail with INSTALL_PARSE_FAILED_NO_CERTIFICATES Enable proguard for all most all examples, both debug & release. This will give us a chance to see proguard issues as early as possible. Fix a ""realm was closed"" crash for thread example./"
,,0.1089,realm-java,"Merge pull request from realm/merge-daac89-to-master Fix merge from daac89 to master/Add realm.ignoreKotlinNullability To disable treating kotlin non-null types as From v3.6.0, all the kotlin RealmModels non-null field will be set as required in the schema. However it is a breaking change for the kotlin project which has a Realm file created before 3.6.0. To disable this behaviour introduced in 3.6.0, add below things to the projects build.gradle: kapt { arguments { arg(""realm.ignoreKotlinNullability"", true) } } Close"
,,0.0923,realm-java,"Better exception message if non model class is provided (#5796)/Revert ""Better exception message if non model class is provided as function argument"" This reverts commit 3aa2608bd712bcb844ffaa0ed296dbb5cb2b3e1d./Better exception message if non model class is provided as function argument/"
,,0.0665,realm-java,Fix various lifecycle issues with tests. Work-around for logs not being saved. (#6141)/
,,0.0778,realm-java,Fix initial listener not triggering for query-based listeners (#6236)/
,,0.3639,rocksdb,"A number of fixes: Replace raw slice comparison with a call to user comparator. Added test for custom comparators. Fix end of namespace comments. Fixed bug in picking inputs for a level-0 compaction. When finding overlapping files, the covered range may expand as files are added to the input set. We now correctly expand the range when this happens instead of continuing to use the old range. For example, suppose L0 contains files with the following ranges: F1: a .. d F2: c .. g F3: f .. j and the initial compaction target is F3. We used to search for range f..j which yielded {F2,F3}. However we now expand the range as soon as another file is added. In this case, when F2 is added, we expand the range to c..j and restart the search. That picks up file F1 as well. This change fixes a bug related to deleted keys showing up incorrectly after a compaction as described in Issue 44. (Sync with upstream"
,,0.3602,rocksdb,"A number of fixes: Replace raw slice comparison with a call to user comparator. Added test for custom comparators. Fix end of namespace comments. Fixed bug in picking inputs for a level-0 compaction. When finding overlapping files, the covered range may expand as files are added to the input set. We now correctly expand the range when this happens instead of continuing to use the old range. For example, suppose L0 contains files with the following ranges: F1: a .. d F2: c .. g F3: f .. j and the initial compaction target is F3. We used to search for range f..j which yielded {F2,F3}. However we now expand the range as soon as another file is added. In this case, when F2 is added, we expand the range to c..j and restart the search. That picks up file F1 as well. This change fixes a bug related to deleted keys showing up incorrectly after a compaction as described in Issue 44. (Sync with upstream"
,,0.3652,rocksdb,"A number of fixes: Replace raw slice comparison with a call to user comparator. Added test for custom comparators. Fix end of namespace comments. Fixed bug in picking inputs for a level-0 compaction. When finding overlapping files, the covered range may expand as files are added to the input set. We now correctly expand the range when this happens instead of continuing to use the old range. For example, suppose L0 contains files with the following ranges: F1: a .. d F2: c .. g F3: f .. j and the initial compaction target is F3. We used to search for range f..j which yielded {F2,F3}. However we now expand the range as soon as another file is added. In this case, when F2 is added, we expand the range to c..j and restart the search. That picks up file F1 as well. This change fixes a bug related to deleted keys showing up incorrectly after a compaction as described in Issue 44. (Sync with upstream"
,,0.3514,rocksdb,"A number of fixes: Replace raw slice comparison with a call to user comparator. Added test for custom comparators. Fix end of namespace comments. Fixed bug in picking inputs for a level-0 compaction. When finding overlapping files, the covered range may expand as files are added to the input set. We now correctly expand the range when this happens instead of continuing to use the old range. For example, suppose L0 contains files with the following ranges: F1: a .. d F2: c .. g F3: f .. j and the initial compaction target is F3. We used to search for range f..j which yielded {F2,F3}. However we now expand the range as soon as another file is added. In this case, when F2 is added, we expand the range to c..j and restart the search. That picks up file F1 as well. This change fixes a bug related to deleted keys showing up incorrectly after a compaction as described in Issue 44. (Sync with upstream"
,,0.3184,rocksdb,"A number of fixes: Replace raw slice comparison with a call to user comparator. Added test for custom comparators. Fix end of namespace comments. Fixed bug in picking inputs for a level-0 compaction. When finding overlapping files, the covered range may expand as files are added to the input set. We now correctly expand the range when this happens instead of continuing to use the old range. For example, suppose L0 contains files with the following ranges: F1: a .. d F2: c .. g F3: f .. j and the initial compaction target is F3. We used to search for range f..j which yielded {F2,F3}. However we now expand the range as soon as another file is added. In this case, when F2 is added, we expand the range to c..j and restart the search. That picks up file F1 as well. This change fixes a bug related to deleted keys showing up incorrectly after a compaction as described in Issue 44. (Sync with upstream number of bugfixes: Added DB::CompactRange() method. Changed manual compaction code so it breaks up compactions of big ranges into smaller compactions. Changed the code that pushes the output of memtable compactions to higher levels to obey the grandparent constraint: i.e., we must never have a single file in level L that overlaps too much data in level L+1 (to avoid very expensive L-1 compactions). Added code to pretty-print internal keys. Fixed bug where we would not detect overlap with files in level-0 because we were incorrectly using binary search on an array of files with overlapping ranges. Added ""leveldb.sstables"" property that can be used to dump all of the sstables and ranges that make up the db state. Removing post_write_snapshot support. Email to leveldb mailing list brought up no users, just confusion from one person about what it meant. Fixing static_cast char to unsigned on BIG_ENDIAN platforms. Fixes Issue 35 and Issue 36. Comment clarification to address leveldb Issue 37. Change license in posix_logger.h to match other files. A build problem where uint32 was used instead of uint32_t. Sync with upstream"
,,0.3602,rocksdb,"A number of fixes: Replace raw slice comparison with a call to user comparator. Added test for custom comparators. Fix end of namespace comments. Fixed bug in picking inputs for a level-0 compaction. When finding overlapping files, the covered range may expand as files are added to the input set. We now correctly expand the range when this happens instead of continuing to use the old range. For example, suppose L0 contains files with the following ranges: F1: a .. d F2: c .. g F3: f .. j and the initial compaction target is F3. We used to search for range f..j which yielded {F2,F3}. However we now expand the range as soon as another file is added. In this case, when F2 is added, we expand the range to c..j and restart the search. That picks up file F1 as well. This change fixes a bug related to deleted keys showing up incorrectly after a compaction as described in Issue 44. (Sync with upstream"
,,0.3577,rocksdb,"A number of fixes: Replace raw slice comparison with a call to user comparator. Added test for custom comparators. Fix end of namespace comments. Fixed bug in picking inputs for a level-0 compaction. When finding overlapping files, the covered range may expand as files are added to the input set. We now correctly expand the range when this happens instead of continuing to use the old range. For example, suppose L0 contains files with the following ranges: F1: a .. d F2: c .. g F3: f .. j and the initial compaction target is F3. We used to search for range f..j which yielded {F2,F3}. However we now expand the range as soon as another file is added. In this case, when F2 is added, we expand the range to c..j and restart the search. That picks up file F1 as well. This change fixes a bug related to deleted keys showing up incorrectly after a compaction as described in Issue 44. (Sync with upstream"
,,0.3627,rocksdb,"A number of fixes: Replace raw slice comparison with a call to user comparator. Added test for custom comparators. Fix end of namespace comments. Fixed bug in picking inputs for a level-0 compaction. When finding overlapping files, the covered range may expand as files are added to the input set. We now correctly expand the range when this happens instead of continuing to use the old range. For example, suppose L0 contains files with the following ranges: F1: a .. d F2: c .. g F3: f .. j and the initial compaction target is F3. We used to search for range f..j which yielded {F2,F3}. However we now expand the range as soon as another file is added. In this case, when F2 is added, we expand the range to c..j and restart the search. That picks up file F1 as well. This change fixes a bug related to deleted keys showing up incorrectly after a compaction as described in Issue 44. (Sync with upstream"
,,0.3589,rocksdb,"A number of fixes: Replace raw slice comparison with a call to user comparator. Added test for custom comparators. Fix end of namespace comments. Fixed bug in picking inputs for a level-0 compaction. When finding overlapping files, the covered range may expand as files are added to the input set. We now correctly expand the range when this happens instead of continuing to use the old range. For example, suppose L0 contains files with the following ranges: F1: a .. d F2: c .. g F3: f .. j and the initial compaction target is F3. We used to search for range f..j which yielded {F2,F3}. However we now expand the range as soon as another file is added. In this case, when F2 is added, we expand the range to c..j and restart the search. That picks up file F1 as well. This change fixes a bug related to deleted keys showing up incorrectly after a compaction as described in Issue 44. (Sync with upstream"
