Topic_no,Keywords,Contrib,System,Text
12,"main_file, cacert, readseq_micro, src_main, files_cacert, create, cacerts_luni, cleanup, remove_parameter, output, realm_instance, change, test, column_indice, merge_operator, operand, merge, side, bug, load",0.8424,conscrypt,"am 347b2a60: Avoid loading all CA certs into Zygote memory, lazily load instead (2 of 3) * commit 347b2a604114602da9bc4ae040278f74d11c2f51: Avoid loading all CA certs into Zygote memory, lazily load instead (2 of 3)/Avoid loading all CA certs into Zygote memory, lazily load instead (2 of 3) Previously the CA certs stored in the BKS KeyStore at /system/etc/security/cacerts.bks was loaded in the Zygote. As the the number of CAs are started to increase, this is causing more and more memory to be used for rarely used CAs. The new AndroidCAStore KeyStore implementation reads the CAs as needed out of individual PEM certificate files. The files can be efficiently found because they are named based on a hash CAs subject name, similar to OpenSSL. Bug: 1109242 Details: build Removing old cacerts.bks from GRANDFATHERED_ALL_PREBUILT and adding new cacerts directory to core PRODUCT_PACKAGES core/legacy_prebuilts.mk target/product/core.mk libcore cacerts build changes. Move cacerts prebuilt logic to new CaCerts.mk from NativeCode.mk where it didnt make sense. Updated Android.mks dalvik-host target to install new cacerts files. Android.mk CaCerts.mk NativeCode.mk Remove old cacerts.bks and add remove certimport.sh script used to generate it. Preserved the useful comments from certimport.sh in the new README.cacerts luni/src/main/files/cacerts.bks luni/src/main/files/certimport.sh luni/src/main/files/README.cacerts Recanonicalize cacerts files using updated vendor/google/tools/cacerts/certimport.py (See below discussion of certimport.py changes for details) luni/src/main/files/cacerts/00673b5b.0 luni/src/main/files/cacerts/03e16f6c.0 luni/src/main/files/cacerts/08aef7bb.0 luni/src/main/files/cacerts/0d188d89.0 luni/src/main/files/cacerts/10531352.0 luni/src/main/files/cacerts/111e6273.0 luni/src/main/files/cacerts/1155c94b.0 luni/src/main/files/cacerts/119afc2e.0 luni/src/main/files/cacerts/11a09b38.0 luni/src/main/files/cacerts/12d55845.0 luni/src/main/files/cacerts/17b51fe6.0 luni/src/main/files/cacerts/1920cacb.0 luni/src/main/files/cacerts/1dac3003.0 luni/src/main/files/cacerts/1dbdda5b.0 luni/src/main/files/cacerts/1dcd6f4c.0 luni/src/main/files/cacerts/1df5ec47.0 luni/src/main/files/cacerts/1e8e7201.0 luni/src/main/files/cacerts/1eb37bdf.0 luni/src/main/files/cacerts/219d9499.0 luni/src/main/files/cacerts/23f4c490.0 luni/src/main/files/cacerts/27af790d.0 luni/src/main/files/cacerts/2afc57aa.0 luni/src/main/files/cacerts/2e8714cb.0 luni/src/main/files/cacerts/2fa87019.0 luni/src/main/files/cacerts/2fb1850a.0 luni/src/main/files/cacerts/33815e15.0 luni/src/main/files/cacerts/343eb6cb.0 luni/src/main/files/cacerts/399e7759.0 luni/src/main/files/cacerts/3a3b02ce.0 luni/src/main/files/cacerts/3ad48a91.0 luni/src/main/files/cacerts/3c58f906.0 luni/src/main/files/cacerts/3c860d51.0 luni/src/main/files/cacerts/3d441de8.0 luni/src/main/files/cacerts/3e7271e8.0 luni/src/main/files/cacerts/418595b9.0 luni/src/main/files/cacerts/455f1b52.0 luni/src/main/files/cacerts/46b2fd3b.0 luni/src/main/files/cacerts/48478734.0 luni/src/main/files/cacerts/4d654d1d.0 luni/src/main/files/cacerts/4e18c148.0 luni/src/main/files/cacerts/4fbd6bfa.0 luni/src/main/files/cacerts/5021a0a2.0 luni/src/main/files/cacerts/5046c355.0 luni/src/main/files/cacerts/524d9b43.0 luni/src/main/files/cacerts/56b8a0b6.0 luni/src/main/files/cacerts/57692373.0 luni/src/main/files/cacerts/58a44af1.0 luni/src/main/files/cacerts/594f1775.0 luni/src/main/files/cacerts/5a3f0ff8.0 luni/src/main/files/cacerts/5a5372fc.0 luni/src/main/files/cacerts/5cf9d536.0 luni/src/main/files/cacerts/5e4e69e7.0 luni/src/main/files/cacerts/60afe812.0 luni/src/main/files/cacerts/635ccfd5.0 luni/src/main/files/cacerts/67495436.0 luni/src/main/files/cacerts/69105f4f.0 luni/src/main/files/cacerts/6adf0799.0 luni/src/main/files/cacerts/6e8bf996.0 luni/src/main/files/cacerts/6fcc125d.0 luni/src/main/files/cacerts/72f369af.0 luni/src/main/files/cacerts/72fa7371.0 luni/src/main/files/cacerts/74c26bd0.0 luni/src/main/files/cacerts/75680d2e.0 luni/src/main/files/cacerts/7651b327.0 luni/src/main/files/cacerts/76579174.0 luni/src/main/files/cacerts/7999be0d.0 luni/src/main/files/cacerts/7a481e66.0 luni/src/main/files/cacerts/7a819ef2.0 luni/src/main/files/cacerts/7d3cd826.0 luni/src/main/files/cacerts/7d453d8f.0 luni/src/main/files/cacerts/81b9768f.0 luni/src/main/files/cacerts/8470719d.0 luni/src/main/files/cacerts/84cba82f.0 luni/src/main/files/cacerts/85cde254.0 luni/src/main/files/cacerts/86212b19.0 luni/src/main/files/cacerts/87753b0d.0 luni/src/main/files/cacerts/882de061.0 luni/src/main/files/cacerts/895cad1a.0 luni/src/main/files/cacerts/89c02a45.0 luni/src/main/files/cacerts/8f7b96c4.0 luni/src/main/files/cacerts/9339512a.0 luni/src/main/files/cacerts/9685a493.0 luni/src/main/files/cacerts/9772ca32.0 luni/src/main/files/cacerts/9d6523ce.0 luni/src/main/files/cacerts/9dbefe7b.0 luni/src/main/files/cacerts/9f533518.0 luni/src/main/files/cacerts/a0bc6fbb.0 luni/src/main/files/cacerts/a15b3b6b.0 luni/src/main/files/cacerts/a3896b44.0 luni/src/main/files/cacerts/a7605362.0 luni/src/main/files/cacerts/a7d2cf64.0 luni/src/main/files/cacerts/ab5346f4.0 luni/src/main/files/cacerts/add67345.0 luni/src/main/files/cacerts/b0f3e76e.0 luni/src/main/files/cacerts/bc3f2570.0 luni/src/main/files/cacerts/bcdd5959.0 luni/src/main/files/cacerts/bda4cc84.0 luni/src/main/files/cacerts/bdacca6f.0 luni/src/main/files/cacerts/bf64f35b.0 luni/src/main/files/cacerts/c0cafbd2.0 luni/src/main/files/cacerts/c215bc69.0 luni/src/main/files/cacerts/c33a80d4.0 luni/src/main/files/cacerts/c527e4ab.0 luni/src/main/files/cacerts/c7e2a638.0 luni/src/main/files/cacerts/c8763593.0 luni/src/main/files/cacerts/ccc52f49.0 luni/src/main/files/cacerts/cdaebb72.0 luni/src/main/files/cacerts/cf701eeb.0 luni/src/main/files/cacerts/d16a5865.0 luni/src/main/files/cacerts/d537fba6.0 luni/src/main/files/cacerts/d64f06f3.0 luni/src/main/files/cacerts/d777342d.0 luni/src/main/files/cacerts/d8274e24.0 luni/src/main/files/cacerts/dbc54cab.0 luni/src/main/files/cacerts/ddc328ff.0 luni/src/main/files/cacerts/e48193cf.0 luni/src/main/files/cacerts/e60bf0c0.0 luni/src/main/files/cacerts/e775ed2d.0 luni/src/main/files/cacerts/e7b8d656.0 luni/src/main/files/cacerts/e8651083.0 luni/src/main/files/cacerts/ea169617.0 luni/src/main/files/cacerts/eb375c3e.0 luni/src/main/files/cacerts/ed049835.0 luni/src/main/files/cacerts/ed524cf5.0 luni/src/main/files/cacerts/ee7cd6fb.0 luni/src/main/files/cacerts/f4996e82.0 luni/src/main/files/cacerts/f58a60fe.0 luni/src/main/files/cacerts/f61bff45.0 luni/src/main/files/cacerts/f80cc7f6.0 luni/src/main/files/cacerts/fac084d7.0 luni/src/main/files/cacerts/facacbc6.0 luni/src/main/files/cacerts/fde84897.0 luni/src/main/files/cacerts/ff783690.0 Change IntegralToString.intToHexString to take width argument to allow for leading zero padding. Updated existing callers to specify 0 padding desired. Add testing of new padding functionality. luni/src/main/java/java/lang/Character.java luni/src/main/java/java/lang/Integer.java luni/src/main/java/java/lang/IntegralToString.java luni/src/test/java/libcore/java/lang/IntegralToStringTest.java Improved to throw Exceptions with proper causes luni/src/main/java/java/security/KeyStore.java luni/src/main/java/java/security/Policy.java luni/src/main/java/java/security/cert/CertificateFactory.java luni/src/main/java/javax/crypto/Cipher.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSignature.java Indentation fixes luni/src/main/java/java/security/SecureRandom.java Fix X509CRLSelector.getIssuerNames to clone result and added test to cover this. luni/src/main/java/java/security/cert/X509CRLSelector.java luni/src/test/java/libcore/java/security/cert/X509CRLSelectorTest.java Fixed bug where we created an X500Principal via a String representation instead of from its original encoded bytes. This led to a difficult to track down bug where CA 418595b9.0 where the NativeCode.X509_NAME_hash of a Harmony (but not BouncyCastle) X509Certificate would not hash to the expected value because the encoded form used an ASN.1 PrintableString instead of the UTF8String form found in the original certificate. luni/src/main/java/org/apache/harmony/security/x501/Name.java Add a new RootKeyStoreSpi and register it as the AndroidCAStore. This new read-only KeyStore implementation that looks for certificates in $ANDROID_ROOT/etc/security/cacerts/ directory, which is /system/etc/security/cacerts/ on devices. The files are stored in the directory based on the older md5 based OpenSSL X509_NAME_hash function (now referred to as X509_NAME_hash_old in OpenSSL 1.0) luni/src/main/java/org/apache/harmony/xnet/provider/jsse/RootKeyStoreSpi.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/JSSEProvider.java Added OpenSSL compatible X509_NAME_hash and X509_NAME_hash_old functions for producting an int hash value from an X500Principal. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java Changed TrustManagerFactoryImpl to use AndroidCAStore for its default KeyStore luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerFactoryImpl.java Changed TrustManagerImpl to be AndroidCAStore aware. If it detects an AndroidCAStore, it avoids generating the acceptedIssuers array at constructions, since doing so would force us to parse all certificates in the store and the value is only typically used by SSLServerSockets when requesting a client certifcate. Because we dont load all the trusted CAs into the IndexedPKIXParameters at startup in the case of AndroidCAStore, we now check for new CAs when examining the cert chain for unnecessary TrustAnchors and for a newly discovered issuer at the end of the chain before validation. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java Updated KeyStoreTest to cope with read only KeyStore. Update test_cacerts_bks (now renamed test_cacerts) to use the AndroidCAStore for validating system CA certificate validity. Register AndroidCAStore as an expected KeyStore type with StandardNames. luni/src/test/java/libcore/java/security/KeyStoreTest.java support/src/test/java/libcore/java/security/StandardNames.java Added test of X500Principal serialization while investigating Name encoding issue. However, the actual Name bug was found and verified by the new test_cacerts test. luni/src/test/java/libcore/javax/security/auth/x500/X500PrincipalTest.java vendor/google Change canonical format for checked in cacerts to have PEM certificate at the top, as required by Harmonys X.509 CertificateFactory. tools/cacerts/certimport.py Change-Id: If0c9de430f13babb07f96a1177897c536f3db08d/"
,,0.0795,conscrypt,"Fix more FindBugs warnings: BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS. ""The equals(Object o) method shouldnt make any assumptions about the type of o. It should simply return false if o is not the same type as this."" Change-Id: Ib16eb57e8876ec117634b4c9b069a4dccc61c657/"
,,0.8329,conscrypt,"am 347b2a60: Avoid loading all CA certs into Zygote memory, lazily load instead (2 of 3) * commit 347b2a604114602da9bc4ae040278f74d11c2f51: Avoid loading all CA certs into Zygote memory, lazily load instead (2 of 3)/Avoid loading all CA certs into Zygote memory, lazily load instead (2 of 3) Previously the CA certs stored in the BKS KeyStore at /system/etc/security/cacerts.bks was loaded in the Zygote. As the the number of CAs are started to increase, this is causing more and more memory to be used for rarely used CAs. The new AndroidCAStore KeyStore implementation reads the CAs as needed out of individual PEM certificate files. The files can be efficiently found because they are named based on a hash CAs subject name, similar to OpenSSL. Bug: 1109242 Details: build Removing old cacerts.bks from GRANDFATHERED_ALL_PREBUILT and adding new cacerts directory to core PRODUCT_PACKAGES core/legacy_prebuilts.mk target/product/core.mk libcore cacerts build changes. Move cacerts prebuilt logic to new CaCerts.mk from NativeCode.mk where it didnt make sense. Updated Android.mks dalvik-host target to install new cacerts files. Android.mk CaCerts.mk NativeCode.mk Remove old cacerts.bks and add remove certimport.sh script used to generate it. Preserved the useful comments from certimport.sh in the new README.cacerts luni/src/main/files/cacerts.bks luni/src/main/files/certimport.sh luni/src/main/files/README.cacerts Recanonicalize cacerts files using updated vendor/google/tools/cacerts/certimport.py (See below discussion of certimport.py changes for details) luni/src/main/files/cacerts/00673b5b.0 luni/src/main/files/cacerts/03e16f6c.0 luni/src/main/files/cacerts/08aef7bb.0 luni/src/main/files/cacerts/0d188d89.0 luni/src/main/files/cacerts/10531352.0 luni/src/main/files/cacerts/111e6273.0 luni/src/main/files/cacerts/1155c94b.0 luni/src/main/files/cacerts/119afc2e.0 luni/src/main/files/cacerts/11a09b38.0 luni/src/main/files/cacerts/12d55845.0 luni/src/main/files/cacerts/17b51fe6.0 luni/src/main/files/cacerts/1920cacb.0 luni/src/main/files/cacerts/1dac3003.0 luni/src/main/files/cacerts/1dbdda5b.0 luni/src/main/files/cacerts/1dcd6f4c.0 luni/src/main/files/cacerts/1df5ec47.0 luni/src/main/files/cacerts/1e8e7201.0 luni/src/main/files/cacerts/1eb37bdf.0 luni/src/main/files/cacerts/219d9499.0 luni/src/main/files/cacerts/23f4c490.0 luni/src/main/files/cacerts/27af790d.0 luni/src/main/files/cacerts/2afc57aa.0 luni/src/main/files/cacerts/2e8714cb.0 luni/src/main/files/cacerts/2fa87019.0 luni/src/main/files/cacerts/2fb1850a.0 luni/src/main/files/cacerts/33815e15.0 luni/src/main/files/cacerts/343eb6cb.0 luni/src/main/files/cacerts/399e7759.0 luni/src/main/files/cacerts/3a3b02ce.0 luni/src/main/files/cacerts/3ad48a91.0 luni/src/main/files/cacerts/3c58f906.0 luni/src/main/files/cacerts/3c860d51.0 luni/src/main/files/cacerts/3d441de8.0 luni/src/main/files/cacerts/3e7271e8.0 luni/src/main/files/cacerts/418595b9.0 luni/src/main/files/cacerts/455f1b52.0 luni/src/main/files/cacerts/46b2fd3b.0 luni/src/main/files/cacerts/48478734.0 luni/src/main/files/cacerts/4d654d1d.0 luni/src/main/files/cacerts/4e18c148.0 luni/src/main/files/cacerts/4fbd6bfa.0 luni/src/main/files/cacerts/5021a0a2.0 luni/src/main/files/cacerts/5046c355.0 luni/src/main/files/cacerts/524d9b43.0 luni/src/main/files/cacerts/56b8a0b6.0 luni/src/main/files/cacerts/57692373.0 luni/src/main/files/cacerts/58a44af1.0 luni/src/main/files/cacerts/594f1775.0 luni/src/main/files/cacerts/5a3f0ff8.0 luni/src/main/files/cacerts/5a5372fc.0 luni/src/main/files/cacerts/5cf9d536.0 luni/src/main/files/cacerts/5e4e69e7.0 luni/src/main/files/cacerts/60afe812.0 luni/src/main/files/cacerts/635ccfd5.0 luni/src/main/files/cacerts/67495436.0 luni/src/main/files/cacerts/69105f4f.0 luni/src/main/files/cacerts/6adf0799.0 luni/src/main/files/cacerts/6e8bf996.0 luni/src/main/files/cacerts/6fcc125d.0 luni/src/main/files/cacerts/72f369af.0 luni/src/main/files/cacerts/72fa7371.0 luni/src/main/files/cacerts/74c26bd0.0 luni/src/main/files/cacerts/75680d2e.0 luni/src/main/files/cacerts/7651b327.0 luni/src/main/files/cacerts/76579174.0 luni/src/main/files/cacerts/7999be0d.0 luni/src/main/files/cacerts/7a481e66.0 luni/src/main/files/cacerts/7a819ef2.0 luni/src/main/files/cacerts/7d3cd826.0 luni/src/main/files/cacerts/7d453d8f.0 luni/src/main/files/cacerts/81b9768f.0 luni/src/main/files/cacerts/8470719d.0 luni/src/main/files/cacerts/84cba82f.0 luni/src/main/files/cacerts/85cde254.0 luni/src/main/files/cacerts/86212b19.0 luni/src/main/files/cacerts/87753b0d.0 luni/src/main/files/cacerts/882de061.0 luni/src/main/files/cacerts/895cad1a.0 luni/src/main/files/cacerts/89c02a45.0 luni/src/main/files/cacerts/8f7b96c4.0 luni/src/main/files/cacerts/9339512a.0 luni/src/main/files/cacerts/9685a493.0 luni/src/main/files/cacerts/9772ca32.0 luni/src/main/files/cacerts/9d6523ce.0 luni/src/main/files/cacerts/9dbefe7b.0 luni/src/main/files/cacerts/9f533518.0 luni/src/main/files/cacerts/a0bc6fbb.0 luni/src/main/files/cacerts/a15b3b6b.0 luni/src/main/files/cacerts/a3896b44.0 luni/src/main/files/cacerts/a7605362.0 luni/src/main/files/cacerts/a7d2cf64.0 luni/src/main/files/cacerts/ab5346f4.0 luni/src/main/files/cacerts/add67345.0 luni/src/main/files/cacerts/b0f3e76e.0 luni/src/main/files/cacerts/bc3f2570.0 luni/src/main/files/cacerts/bcdd5959.0 luni/src/main/files/cacerts/bda4cc84.0 luni/src/main/files/cacerts/bdacca6f.0 luni/src/main/files/cacerts/bf64f35b.0 luni/src/main/files/cacerts/c0cafbd2.0 luni/src/main/files/cacerts/c215bc69.0 luni/src/main/files/cacerts/c33a80d4.0 luni/src/main/files/cacerts/c527e4ab.0 luni/src/main/files/cacerts/c7e2a638.0 luni/src/main/files/cacerts/c8763593.0 luni/src/main/files/cacerts/ccc52f49.0 luni/src/main/files/cacerts/cdaebb72.0 luni/src/main/files/cacerts/cf701eeb.0 luni/src/main/files/cacerts/d16a5865.0 luni/src/main/files/cacerts/d537fba6.0 luni/src/main/files/cacerts/d64f06f3.0 luni/src/main/files/cacerts/d777342d.0 luni/src/main/files/cacerts/d8274e24.0 luni/src/main/files/cacerts/dbc54cab.0 luni/src/main/files/cacerts/ddc328ff.0 luni/src/main/files/cacerts/e48193cf.0 luni/src/main/files/cacerts/e60bf0c0.0 luni/src/main/files/cacerts/e775ed2d.0 luni/src/main/files/cacerts/e7b8d656.0 luni/src/main/files/cacerts/e8651083.0 luni/src/main/files/cacerts/ea169617.0 luni/src/main/files/cacerts/eb375c3e.0 luni/src/main/files/cacerts/ed049835.0 luni/src/main/files/cacerts/ed524cf5.0 luni/src/main/files/cacerts/ee7cd6fb.0 luni/src/main/files/cacerts/f4996e82.0 luni/src/main/files/cacerts/f58a60fe.0 luni/src/main/files/cacerts/f61bff45.0 luni/src/main/files/cacerts/f80cc7f6.0 luni/src/main/files/cacerts/fac084d7.0 luni/src/main/files/cacerts/facacbc6.0 luni/src/main/files/cacerts/fde84897.0 luni/src/main/files/cacerts/ff783690.0 Change IntegralToString.intToHexString to take width argument to allow for leading zero padding. Updated existing callers to specify 0 padding desired. Add testing of new padding functionality. luni/src/main/java/java/lang/Character.java luni/src/main/java/java/lang/Integer.java luni/src/main/java/java/lang/IntegralToString.java luni/src/test/java/libcore/java/lang/IntegralToStringTest.java Improved to throw Exceptions with proper causes luni/src/main/java/java/security/KeyStore.java luni/src/main/java/java/security/Policy.java luni/src/main/java/java/security/cert/CertificateFactory.java luni/src/main/java/javax/crypto/Cipher.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSignature.java Indentation fixes luni/src/main/java/java/security/SecureRandom.java Fix X509CRLSelector.getIssuerNames to clone result and added test to cover this. luni/src/main/java/java/security/cert/X509CRLSelector.java luni/src/test/java/libcore/java/security/cert/X509CRLSelectorTest.java Fixed bug where we created an X500Principal via a String representation instead of from its original encoded bytes. This led to a difficult to track down bug where CA 418595b9.0 where the NativeCode.X509_NAME_hash of a Harmony (but not BouncyCastle) X509Certificate would not hash to the expected value because the encoded form used an ASN.1 PrintableString instead of the UTF8String form found in the original certificate. luni/src/main/java/org/apache/harmony/security/x501/Name.java Add a new RootKeyStoreSpi and register it as the AndroidCAStore. This new read-only KeyStore implementation that looks for certificates in $ANDROID_ROOT/etc/security/cacerts/ directory, which is /system/etc/security/cacerts/ on devices. The files are stored in the directory based on the older md5 based OpenSSL X509_NAME_hash function (now referred to as X509_NAME_hash_old in OpenSSL 1.0) luni/src/main/java/org/apache/harmony/xnet/provider/jsse/RootKeyStoreSpi.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/JSSEProvider.java Added OpenSSL compatible X509_NAME_hash and X509_NAME_hash_old functions for producting an int hash value from an X500Principal. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java Changed TrustManagerFactoryImpl to use AndroidCAStore for its default KeyStore luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerFactoryImpl.java Changed TrustManagerImpl to be AndroidCAStore aware. If it detects an AndroidCAStore, it avoids generating the acceptedIssuers array at constructions, since doing so would force us to parse all certificates in the store and the value is only typically used by SSLServerSockets when requesting a client certifcate. Because we dont load all the trusted CAs into the IndexedPKIXParameters at startup in the case of AndroidCAStore, we now check for new CAs when examining the cert chain for unnecessary TrustAnchors and for a newly discovered issuer at the end of the chain before validation. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java Updated KeyStoreTest to cope with read only KeyStore. Update test_cacerts_bks (now renamed test_cacerts) to use the AndroidCAStore for validating system CA certificate validity. Register AndroidCAStore as an expected KeyStore type with StandardNames. luni/src/test/java/libcore/java/security/KeyStoreTest.java support/src/test/java/libcore/java/security/StandardNames.java Added test of X500Principal serialization while investigating Name encoding issue. However, the actual Name bug was found and verified by the new test_cacerts test. luni/src/test/java/libcore/javax/security/auth/x500/X500PrincipalTest.java vendor/google Change canonical format for checked in cacerts to have PEM certificate at the top, as required by Harmonys X.509 CertificateFactory. tools/cacerts/certimport.py Change-Id: If0c9de430f13babb07f96a1177897c536f3db08d/Dont cache the underlying Sockets underlying SocketImpls underlying FileDescriptor in OpenSSLSocketImpl. (OpenSSLSocketImpl, of course, being a Socket, not a SocketImpl.) Bug: 4192414 git cherry-pick dc33f53f38600943c84146320c748e3c46fd2e7b Change-Id: I8f481e0fe217aac782ad9d9e9053681ad69e62ef/Dont cache the underlying Sockets underlying SocketImpls underlying FileDescriptor in OpenSSLSocketImpl. (OpenSSLSocketImpl, of course, being a Socket, not a SocketImpl.) Bug: 4192414 Change-Id: I3c7d0fed70b1b98dc8fcc73f35b3feb0e1eeb2f9/Fix NativeCrypto FindBugs warnings. Change-Id: I102367575b1257582bb20c659223e3f02650fda4/"
,,0.843,conscrypt,"am 347b2a60: Avoid loading all CA certs into Zygote memory, lazily load instead (2 of 3) * commit 347b2a604114602da9bc4ae040278f74d11c2f51: Avoid loading all CA certs into Zygote memory, lazily load instead (2 of 3)/Avoid loading all CA certs into Zygote memory, lazily load instead (2 of 3) Previously the CA certs stored in the BKS KeyStore at /system/etc/security/cacerts.bks was loaded in the Zygote. As the the number of CAs are started to increase, this is causing more and more memory to be used for rarely used CAs. The new AndroidCAStore KeyStore implementation reads the CAs as needed out of individual PEM certificate files. The files can be efficiently found because they are named based on a hash CAs subject name, similar to OpenSSL. Bug: 1109242 Details: build Removing old cacerts.bks from GRANDFATHERED_ALL_PREBUILT and adding new cacerts directory to core PRODUCT_PACKAGES core/legacy_prebuilts.mk target/product/core.mk libcore cacerts build changes. Move cacerts prebuilt logic to new CaCerts.mk from NativeCode.mk where it didnt make sense. Updated Android.mks dalvik-host target to install new cacerts files. Android.mk CaCerts.mk NativeCode.mk Remove old cacerts.bks and add remove certimport.sh script used to generate it. Preserved the useful comments from certimport.sh in the new README.cacerts luni/src/main/files/cacerts.bks luni/src/main/files/certimport.sh luni/src/main/files/README.cacerts Recanonicalize cacerts files using updated vendor/google/tools/cacerts/certimport.py (See below discussion of certimport.py changes for details) luni/src/main/files/cacerts/00673b5b.0 luni/src/main/files/cacerts/03e16f6c.0 luni/src/main/files/cacerts/08aef7bb.0 luni/src/main/files/cacerts/0d188d89.0 luni/src/main/files/cacerts/10531352.0 luni/src/main/files/cacerts/111e6273.0 luni/src/main/files/cacerts/1155c94b.0 luni/src/main/files/cacerts/119afc2e.0 luni/src/main/files/cacerts/11a09b38.0 luni/src/main/files/cacerts/12d55845.0 luni/src/main/files/cacerts/17b51fe6.0 luni/src/main/files/cacerts/1920cacb.0 luni/src/main/files/cacerts/1dac3003.0 luni/src/main/files/cacerts/1dbdda5b.0 luni/src/main/files/cacerts/1dcd6f4c.0 luni/src/main/files/cacerts/1df5ec47.0 luni/src/main/files/cacerts/1e8e7201.0 luni/src/main/files/cacerts/1eb37bdf.0 luni/src/main/files/cacerts/219d9499.0 luni/src/main/files/cacerts/23f4c490.0 luni/src/main/files/cacerts/27af790d.0 luni/src/main/files/cacerts/2afc57aa.0 luni/src/main/files/cacerts/2e8714cb.0 luni/src/main/files/cacerts/2fa87019.0 luni/src/main/files/cacerts/2fb1850a.0 luni/src/main/files/cacerts/33815e15.0 luni/src/main/files/cacerts/343eb6cb.0 luni/src/main/files/cacerts/399e7759.0 luni/src/main/files/cacerts/3a3b02ce.0 luni/src/main/files/cacerts/3ad48a91.0 luni/src/main/files/cacerts/3c58f906.0 luni/src/main/files/cacerts/3c860d51.0 luni/src/main/files/cacerts/3d441de8.0 luni/src/main/files/cacerts/3e7271e8.0 luni/src/main/files/cacerts/418595b9.0 luni/src/main/files/cacerts/455f1b52.0 luni/src/main/files/cacerts/46b2fd3b.0 luni/src/main/files/cacerts/48478734.0 luni/src/main/files/cacerts/4d654d1d.0 luni/src/main/files/cacerts/4e18c148.0 luni/src/main/files/cacerts/4fbd6bfa.0 luni/src/main/files/cacerts/5021a0a2.0 luni/src/main/files/cacerts/5046c355.0 luni/src/main/files/cacerts/524d9b43.0 luni/src/main/files/cacerts/56b8a0b6.0 luni/src/main/files/cacerts/57692373.0 luni/src/main/files/cacerts/58a44af1.0 luni/src/main/files/cacerts/594f1775.0 luni/src/main/files/cacerts/5a3f0ff8.0 luni/src/main/files/cacerts/5a5372fc.0 luni/src/main/files/cacerts/5cf9d536.0 luni/src/main/files/cacerts/5e4e69e7.0 luni/src/main/files/cacerts/60afe812.0 luni/src/main/files/cacerts/635ccfd5.0 luni/src/main/files/cacerts/67495436.0 luni/src/main/files/cacerts/69105f4f.0 luni/src/main/files/cacerts/6adf0799.0 luni/src/main/files/cacerts/6e8bf996.0 luni/src/main/files/cacerts/6fcc125d.0 luni/src/main/files/cacerts/72f369af.0 luni/src/main/files/cacerts/72fa7371.0 luni/src/main/files/cacerts/74c26bd0.0 luni/src/main/files/cacerts/75680d2e.0 luni/src/main/files/cacerts/7651b327.0 luni/src/main/files/cacerts/76579174.0 luni/src/main/files/cacerts/7999be0d.0 luni/src/main/files/cacerts/7a481e66.0 luni/src/main/files/cacerts/7a819ef2.0 luni/src/main/files/cacerts/7d3cd826.0 luni/src/main/files/cacerts/7d453d8f.0 luni/src/main/files/cacerts/81b9768f.0 luni/src/main/files/cacerts/8470719d.0 luni/src/main/files/cacerts/84cba82f.0 luni/src/main/files/cacerts/85cde254.0 luni/src/main/files/cacerts/86212b19.0 luni/src/main/files/cacerts/87753b0d.0 luni/src/main/files/cacerts/882de061.0 luni/src/main/files/cacerts/895cad1a.0 luni/src/main/files/cacerts/89c02a45.0 luni/src/main/files/cacerts/8f7b96c4.0 luni/src/main/files/cacerts/9339512a.0 luni/src/main/files/cacerts/9685a493.0 luni/src/main/files/cacerts/9772ca32.0 luni/src/main/files/cacerts/9d6523ce.0 luni/src/main/files/cacerts/9dbefe7b.0 luni/src/main/files/cacerts/9f533518.0 luni/src/main/files/cacerts/a0bc6fbb.0 luni/src/main/files/cacerts/a15b3b6b.0 luni/src/main/files/cacerts/a3896b44.0 luni/src/main/files/cacerts/a7605362.0 luni/src/main/files/cacerts/a7d2cf64.0 luni/src/main/files/cacerts/ab5346f4.0 luni/src/main/files/cacerts/add67345.0 luni/src/main/files/cacerts/b0f3e76e.0 luni/src/main/files/cacerts/bc3f2570.0 luni/src/main/files/cacerts/bcdd5959.0 luni/src/main/files/cacerts/bda4cc84.0 luni/src/main/files/cacerts/bdacca6f.0 luni/src/main/files/cacerts/bf64f35b.0 luni/src/main/files/cacerts/c0cafbd2.0 luni/src/main/files/cacerts/c215bc69.0 luni/src/main/files/cacerts/c33a80d4.0 luni/src/main/files/cacerts/c527e4ab.0 luni/src/main/files/cacerts/c7e2a638.0 luni/src/main/files/cacerts/c8763593.0 luni/src/main/files/cacerts/ccc52f49.0 luni/src/main/files/cacerts/cdaebb72.0 luni/src/main/files/cacerts/cf701eeb.0 luni/src/main/files/cacerts/d16a5865.0 luni/src/main/files/cacerts/d537fba6.0 luni/src/main/files/cacerts/d64f06f3.0 luni/src/main/files/cacerts/d777342d.0 luni/src/main/files/cacerts/d8274e24.0 luni/src/main/files/cacerts/dbc54cab.0 luni/src/main/files/cacerts/ddc328ff.0 luni/src/main/files/cacerts/e48193cf.0 luni/src/main/files/cacerts/e60bf0c0.0 luni/src/main/files/cacerts/e775ed2d.0 luni/src/main/files/cacerts/e7b8d656.0 luni/src/main/files/cacerts/e8651083.0 luni/src/main/files/cacerts/ea169617.0 luni/src/main/files/cacerts/eb375c3e.0 luni/src/main/files/cacerts/ed049835.0 luni/src/main/files/cacerts/ed524cf5.0 luni/src/main/files/cacerts/ee7cd6fb.0 luni/src/main/files/cacerts/f4996e82.0 luni/src/main/files/cacerts/f58a60fe.0 luni/src/main/files/cacerts/f61bff45.0 luni/src/main/files/cacerts/f80cc7f6.0 luni/src/main/files/cacerts/fac084d7.0 luni/src/main/files/cacerts/facacbc6.0 luni/src/main/files/cacerts/fde84897.0 luni/src/main/files/cacerts/ff783690.0 Change IntegralToString.intToHexString to take width argument to allow for leading zero padding. Updated existing callers to specify 0 padding desired. Add testing of new padding functionality. luni/src/main/java/java/lang/Character.java luni/src/main/java/java/lang/Integer.java luni/src/main/java/java/lang/IntegralToString.java luni/src/test/java/libcore/java/lang/IntegralToStringTest.java Improved to throw Exceptions with proper causes luni/src/main/java/java/security/KeyStore.java luni/src/main/java/java/security/Policy.java luni/src/main/java/java/security/cert/CertificateFactory.java luni/src/main/java/javax/crypto/Cipher.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSignature.java Indentation fixes luni/src/main/java/java/security/SecureRandom.java Fix X509CRLSelector.getIssuerNames to clone result and added test to cover this. luni/src/main/java/java/security/cert/X509CRLSelector.java luni/src/test/java/libcore/java/security/cert/X509CRLSelectorTest.java Fixed bug where we created an X500Principal via a String representation instead of from its original encoded bytes. This led to a difficult to track down bug where CA 418595b9.0 where the NativeCode.X509_NAME_hash of a Harmony (but not BouncyCastle) X509Certificate would not hash to the expected value because the encoded form used an ASN.1 PrintableString instead of the UTF8String form found in the original certificate. luni/src/main/java/org/apache/harmony/security/x501/Name.java Add a new RootKeyStoreSpi and register it as the AndroidCAStore. This new read-only KeyStore implementation that looks for certificates in $ANDROID_ROOT/etc/security/cacerts/ directory, which is /system/etc/security/cacerts/ on devices. The files are stored in the directory based on the older md5 based OpenSSL X509_NAME_hash function (now referred to as X509_NAME_hash_old in OpenSSL 1.0) luni/src/main/java/org/apache/harmony/xnet/provider/jsse/RootKeyStoreSpi.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/JSSEProvider.java Added OpenSSL compatible X509_NAME_hash and X509_NAME_hash_old functions for producting an int hash value from an X500Principal. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java Changed TrustManagerFactoryImpl to use AndroidCAStore for its default KeyStore luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerFactoryImpl.java Changed TrustManagerImpl to be AndroidCAStore aware. If it detects an AndroidCAStore, it avoids generating the acceptedIssuers array at constructions, since doing so would force us to parse all certificates in the store and the value is only typically used by SSLServerSockets when requesting a client certifcate. Because we dont load all the trusted CAs into the IndexedPKIXParameters at startup in the case of AndroidCAStore, we now check for new CAs when examining the cert chain for unnecessary TrustAnchors and for a newly discovered issuer at the end of the chain before validation. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java Updated KeyStoreTest to cope with read only KeyStore. Update test_cacerts_bks (now renamed test_cacerts) to use the AndroidCAStore for validating system CA certificate validity. Register AndroidCAStore as an expected KeyStore type with StandardNames. luni/src/test/java/libcore/java/security/KeyStoreTest.java support/src/test/java/libcore/java/security/StandardNames.java Added test of X500Principal serialization while investigating Name encoding issue. However, the actual Name bug was found and verified by the new test_cacerts test. luni/src/test/java/libcore/javax/security/auth/x500/X500PrincipalTest.java vendor/google Change canonical format for checked in cacerts to have PEM certificate at the top, as required by Harmonys X.509 CertificateFactory. tools/cacerts/certimport.py Change-Id: If0c9de430f13babb07f96a1177897c536f3db08d/"
,,0.1087,conscrypt,Do not include bogus certs in final chain output (cherry-picked from 2cdf54071e7c62ceca7d40d7f6c704b91aad2a9f) Bug: 8313312 Bug: Change-Id: Ie9f58c1bdc676471eaaf3073a78b0b00c5d9a833/Do not include bogus certs in final chain output Bug: 8313312 Bug: Change-Id: I1fa31335de9c9ee002c25869dbaa2574c70f48cf/
,,0.1,conscrypt,Remove unnecessary throws CertificateException from isUserAddedCertificate. Change-Id: If825391c86f7b03fbea42dd6da7700c752d156d7/Support user-installed CA certs for cert pinning. Additionally expose new isUserAddedCertificate() so clients can set policy for user-installed CA certs. Bug: 11257762 Change-Id: If45cd452ab76f393660b34594dcae464af0c0696/
,,0.0599,conscrypt,Expose CT through libcore NetworkSecurityPolicy Bug: 28746284 Change-Id: I6549a997823b38dc256911a66ac558c90bf6f762/
,,0.0751,Frostwire,[desktop] fix width of search tools panel/
,,0.0751,Frostwire,[desktop] fix width of search tools panel/
,,0.0689,Frostwire,[android] commented code fix. renamed settings_search.xml settings_search_engines.xml/
,,0.0596,Frostwire,[android] fix update path security issue for Nougat/
,,0.1222,Frostwire,[android] bug fix on song fragments clicking on a song that was already being played would not open the music player screen. other cleanups/
,,0.1158,Frostwire,[android] avoid possible IndexOutOfBoundsExceptions on playlist drops/[android] bug fix on song fragments clicking on a song that was already being played would not open the music player screen. other cleanups/
,,0.1283,Frostwire,[android] bug fix on song fragments clicking on a song that was already being played would not open the music player screen. other cleanups/
,,0.1263,Frostwire,[android] bug fix on song fragments clicking on a song that was already being played would not open the music player screen. other cleanups/
,,0.1222,Frostwire,[android] bug fix on song fragments clicking on a song that was already being played would not open the music player screen. other cleanups/
,,0.1222,Frostwire,[android] bug fix on song fragments clicking on a song that was already being played would not open the music player screen. other cleanups/
,,0.1303,Frostwire,[android] bug fix on song fragments clicking on a song that was already being played would not open the music player screen. other cleanups/
,,0.1242,Frostwire,[android] bug fix on song fragments clicking on a song that was already being played would not open the music player screen. other cleanups/
,,0.1263,Frostwire,[android] bug fix on song fragments clicking on a song that was already being played would not open the music player screen. other cleanups/
,,0.1283,Frostwire,[android] bug fix on song fragments clicking on a song that was already being played would not open the music player screen. other cleanups/
,,0.1598,javacpp,"Update version in the `pom.xml` file to 1.3.2-SNAPSHOT * Make `Pointer.asBuffer()` thread-safe (issue version in the `pom.xml` file to 1.3-SNAPSHOT * Print memory sizes in a human-readable format with `Pointer.formatBytes()` * Map standard `malloc()`, `calloc()`, `realloc()`, and `free()` functions (issue"
,,0.1731,javacpp,"Update version in the `pom.xml` file to 1.3-SNAPSHOT * Print memory sizes in a human-readable format with `Pointer.formatBytes()` * Map standard `malloc()`, `calloc()`, `realloc()`, and `free()` functions (issue"
,,0.1769,javacpp,"Update version in the `pom.xml` file to 1.3-SNAPSHOT * Print memory sizes in a human-readable format with `Pointer.formatBytes()` * Map standard `malloc()`, `calloc()`, `realloc()`, and `free()` functions (issue"
,,0.1787,javacpp,"Update version in the `pom.xml` file to 1.3-SNAPSHOT * Print memory sizes in a human-readable format with `Pointer.formatBytes()` * Map standard `malloc()`, `calloc()`, `realloc()`, and `free()` functions (issue"
,,0.175,javacpp,"Update version in the `pom.xml` file to 1.3-SNAPSHOT * Print memory sizes in a human-readable format with `Pointer.formatBytes()` * Map standard `malloc()`, `calloc()`, `realloc()`, and `free()` functions (issue"
,,0.175,javacpp,"Update version in the `pom.xml` file to 1.3-SNAPSHOT * Print memory sizes in a human-readable format with `Pointer.formatBytes()` * Map standard `malloc()`, `calloc()`, `realloc()`, and `free()` functions (issue"
,,0.175,javacpp,"Update version in the `pom.xml` file to 1.3-SNAPSHOT * Print memory sizes in a human-readable format with `Pointer.formatBytes()` * Map standard `malloc()`, `calloc()`, `realloc()`, and `free()` functions (issue"
,,0.1787,javacpp,"Update version in the `pom.xml` file to 1.3-SNAPSHOT * Print memory sizes in a human-readable format with `Pointer.formatBytes()` * Map standard `malloc()`, `calloc()`, `realloc()`, and `free()` functions (issue"
,,0.1769,javacpp,"Update version in the `pom.xml` file to 1.3-SNAPSHOT * Print memory sizes in a human-readable format with `Pointer.formatBytes()` * Map standard `malloc()`, `calloc()`, `realloc()`, and `free()` functions (issue"
,,0.175,javacpp,"Update version in the `pom.xml` file to 1.3-SNAPSHOT * Print memory sizes in a human-readable format with `Pointer.formatBytes()` * Map standard `malloc()`, `calloc()`, `realloc()`, and `free()` functions (issue"
,,0.175,javacpp,"Update version in the `pom.xml` file to 1.3-SNAPSHOT * Print memory sizes in a human-readable format with `Pointer.formatBytes()` * Map standard `malloc()`, `calloc()`, `realloc()`, and `free()` functions (issue"
,,0.1787,javacpp,"Update version in the `pom.xml` file to 1.3-SNAPSHOT * Print memory sizes in a human-readable format with `Pointer.formatBytes()` * Map standard `malloc()`, `calloc()`, `realloc()`, and `free()` functions (issue"
,,0.0763,OpenDDS,i2jrt_TAOObject.cpp: Workaround for Android This call was causing a ClassNotFoundException because the class loader didnt have TAOObject in its dexpath (classpath) the during the finalize call. The workaround appears to be not to use the our findClass() function and just use jni->FindClass()./
,,0.1446,realm-java,Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./Merge pull request from zaki50/fix_typo fix typos/fix typos/Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./fix tests/
,,0.1325,realm-java,Merge pull request from realm/lk-primary-key-constraint-exception Add RealmPrimaryKeyConstraintException./Add RealmPrimaryKeyConstraintException. Closes core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./Merge pull request from zaki50/fix_typo fix typos/fix typos/Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./
,,0.142,realm-java,Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./fix tests/Merge pull request from realm/cm-bug-handler Cleanup SharedGroup.java and Group.java/
,,0.434,realm-java,"Merge pull request from realm/merge-9f4f55-to-master Fix merge from 9f4f55 to master/Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close some performance issues when initializing the Schema (#5404)/Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.4373,realm-java,"Merge pull request from realm/merge-9f4f55-to-master Fix merge from 9f4f55 to master/Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close some performance issues when initializing the Schema (#5404)/Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.35,realm-java,"Merge pull request from realm/merge-9f4f55-to-master Fix merge from 9f4f55 to master/Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close some performance issues when initializing the Schema (#5404)/Setting own list back on an object accidentially cleared it (#5396) * Add unit test showing setting own list does not work. * Do not clear own list if given as input. * Clear in the correct place * Add test for copyToRealmOrUpdate * Unit test for insertOrUpdate * Add test for insertOrUpdate bulk and non-bulk * Fix wrong comparison * Wrong spelling * Update changelog * Fix mistakes. Move check out of proxy classes. * Dont always check for managed objects * Always check for managed state. * Better changelog * Correct check for unmanaged objects. Optimized loops. * Optimize `insert` loops * More loop optimizations/Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.4085,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.4936,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/"
,,0.3807,realm-java,"Update to latest OS (#5166) * Fixing compile issue with OS * Fix build issues with new Results API Remove indexOf(targetRowIndex) Results::index_of takes a RowExpr now/Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.2671,realm-java,Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.235,realm-java,4.0 API breaking changes (#5314) * Refactored deprecated `Callback` * SyncUser: renamed `getAccessToken` + method is no longer public/Client reset fixes (#5159) * Exposing a `SyncConfiguration` that allows a user to open the backup Realm after the client reset (#4759)./Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.4971,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/"
,,0.2042,realm-java,Setting own list back on an object accidentially cleared it (#5396) * Add unit test showing setting own list does not work. * Do not clear own list if given as input. * Clear in the correct place * Add test for copyToRealmOrUpdate * Unit test for insertOrUpdate * Add test for insertOrUpdate bulk and non-bulk * Fix wrong comparison * Wrong spelling * Update changelog * Fix mistakes. Move check out of proxy classes. * Dont always check for managed objects * Always check for managed state. * Better changelog * Correct check for unmanaged objects. Optimized loops. * Optimize `insert` loops * More loop optimizations/Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2561,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2561,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.3882,realm-java,"Fix some performance issues when initializing the Schema (#5404)/Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.2578,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.4589,realm-java,"Client reset fixes (#5159) * Exposing a `SyncConfiguration` that allows a user to open the backup Realm after the client reset (#4759)./Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Merge pull request from realm/merge-f782c5-to-master-4.0 Fix merge from f782c5 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/"
,,0.2915,realm-java,Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Update to latest OS (#5166) * Fixing compile issue with OS * Fix build issues with new Results API Remove indexOf(targetRowIndex) Results::index_of takes a RowExpr now/Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.4085,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.2868,realm-java,Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.5177,realm-java,"Merge pull request from realm/merge-9f4f55-to-master Fix merge from 9f4f55 to master/Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/"
,,0.2561,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.1101,realm-java,Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./
,,0.2917,realm-java,Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.1182,realm-java,Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./
,,0.3975,realm-java,"Fix some performance issues when initializing the Schema (#5404)/Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.1182,realm-java,Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./
,,0.2561,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.243,realm-java,Merge pull request from realm/merge-d409e3-to-master Fix merge from d409e3 to master/Fix class name in exception message (#5098) * add a change log entry * fix comment * peerClassName linkedClassName/Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2543,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2561,realm-java,Merge pull request from realm/merge-c9206c-to-master-4.0 Fix merge from c9206c to master-4.0/Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.4058,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.5,realm-java,"Merge pull request from realm/merge-9f4f55-to-master Fix merge from 9f4f55 to master/Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/"
,,0.185,realm-java,IncompatibleSyncedFileException only for sync/java_class_global_def for global class loading Add JavaClassGlobalDef to handle global jclass loading. Move common types classes loading to JavaClassGlobalDef. Load SharedRealm$$SchemaChangeCallback & RealmNotifier in JNI_OnLoad to fix . Code clean up. NOTE: Currently the JavaClassGlobalDef::initialize() takes about 0.3 ms on a lowend armv7 device. So keeping less classes loaded at the beginning will still be a good idea since the Realm.init() will be usually called on the UI thread when start./Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./
,,0.1164,realm-java,java_class_global_def for global class loading Add JavaClassGlobalDef to handle global jclass loading. Move common types classes loading to JavaClassGlobalDef. Load SharedRealm$$SchemaChangeCallback & RealmNotifier in JNI_OnLoad to fix . Code clean up. NOTE: Currently the JavaClassGlobalDef::initialize() takes about 0.3 ms on a lowend armv7 device. So keeping less classes loaded at the beginning will still be a good idea since the Realm.init() will be usually called on the UI thread when start./
,,0.1239,realm-java,java_class_global_def for global class loading Add JavaClassGlobalDef to handle global jclass loading. Move common types classes loading to JavaClassGlobalDef. Load SharedRealm$$SchemaChangeCallback & RealmNotifier in JNI_OnLoad to fix . Code clean up. NOTE: Currently the JavaClassGlobalDef::initialize() takes about 0.3 ms on a lowend armv7 device. So keeping less classes loaded at the beginning will still be a good idea since the Realm.init() will be usually called on the UI thread when start./
,,0.4025,realm-java,"Report class missing correctly in assertion (#5196)/Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.0954,realm-java,Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/
,,0.46299999999999997,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.461,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.461,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.4505,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/Ensure stable classes order in generated mediators (#5567) Fixes"
,,0.451,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.46299999999999997,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/Better exception message for addField() (#5610) * Better exception message for addField() Close"
,,0.47,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.1,rocksdb,Merge pull request from fyrz/RocksJava-Deprecate-SkipLogError [RocksJava] Deprecate setSkipLogErrorOnRecovery/[RocksJava] Deprecate setSkipLogErrorOnRecovery see: 62ad0a9b19f0be4cefa70b6b32876e764b7f3c11/Merge pull request from fyrz/RocksJava-Sigsegv-MergeOperatorName [RocksJava] Fixes in MergeOperatorByName/[RocksJava] Sigsegv fix for MergerOperatorByName/
,,0.0982,rocksdb,Merge pull request from fyrz/RocksJava-Deprecate-SkipLogError [RocksJava] Deprecate setSkipLogErrorOnRecovery/[RocksJava] Deprecate setSkipLogErrorOnRecovery see: 62ad0a9b19f0be4cefa70b6b32876e764b7f3c11/
,,0.3875,rocksdb,"Fix db_stress failure (pass merge_operator even if not used) Summary: db_stress test is now failing because of this scenario run db_stress with merge_operator enabled (now we have a db with merge operands) run db_stress with merge_operator disabled (now when we fail to open the db) the solution is to pass the merge_operator to the DB even if we are not going to do any merge operations Test Plan: Check the failure Reviewers: andrewkr, yiwu, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: shouldnt assert file size 0 if file creation fails Summary: OnTableFileCreated() now is also called when the file creaion fails. In that case, we shouldnt assert the file size is not 0. Test Plan: Run crash test Reviewers: yiwu, andrewkr, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: IslamAbdelRahman, leveldb, andrewkr, dhruba Differential Revision: FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.4788,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.4831,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.4873,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.4884,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.4289,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision: mutex unlock issue between scheduled compaction and ReleaseCompactionFiles() Summary: NotifyOnCompactionCompleted can unlock the mutex. That mean that we can schedule a background compaction that will start before we ReleaseCompactionFiles(). Test Plan: added unittest existing unittest Reviewers: yhchiang, sdong Reviewed By: sdong Subscribers: yoshinorim, andrewkr, dhruba Differential Revision:"
,,0.4548,rocksdb,"UniversalCompaction should ignore sorted runs being compacted (when compacting for file num) Summary: If we have total number of sorted runs greater than level0_file_num_compaction_trigger, Universal compaction will always issue a compaction even if the number of sorted runs that are not being compacted is less than level0_file_num_compaction_trigger. This diff changes this behaviour to relay on the `number of sorted runs not being compacted` instead of `total number of sorted runs` Test Plan: New unit test Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.4884,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.2644,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision: Statistics to track Compression/Decompression (#1197) * Added new statistics and refactored to allow ioptions to be passed around as required to access environment and statistics pointers (and, as a convenient side effect, info_log pointer). * Prevent incrementing compression counter when compression is turned off in options. * Prevent incrementing compression counter when compression is turned off in options. * Added two more supported compression types to test code in db_test.cc * Prevent incrementing compression counter when compression is turned off in options. * Added new StatsLevel that excludes compression timing. * Fixed casting error in coding.h * Fixed CompressionStatsTest for new StatsLevel. * Removed unused variable that was breaking the Linux build/DBTest.DynamicLevelCompressionPerLevel: Tune Threshold Summary: Each SSTs file size increases after we add more table properties. Threshold in DBTest.DynamicLevelCompressionPerLevel need to adjust accordingly to avoid occasional failures. Test Plan: Run the test Reviewers: andrewkr, yiwu Subscribers: leveldb, andrewkr, dhruba Differential Revision: IO failure test to separate file Summary: This is a part of effort to reduce the size of db_test.cc. We move the following tests to a separate file `db_io_failure_test.cc`: * DropWrites * DropWritesFlush * NoSpaceCompactRange * NonWritableFileSystem * ManifestWriteError * PutFailsParanoid Test Plan: Run `make check` to see if the tests are working properly. Reviewers: sdong, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: andrewkr, dhruba Differential Revision: make more options dynamic Summary: make more ColumnFamilyOptions dynamic: compression soft_pending_compaction_bytes_limit hard_pending_compaction_bytes_limit min_partial_merge_operands report_bg_io_stats paranoid_file_checks Test Plan: Add sanity check in `db_test.cc` for all above options except for soft_pending_compaction_bytes_limit and hard_pending_compaction_bytes_limit. All passed. Reviewers: andrewkr, sdong, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.2873,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision: Statistics to track Compression/Decompression (#1197) * Added new statistics and refactored to allow ioptions to be passed around as required to access environment and statistics pointers (and, as a convenient side effect, info_log pointer). * Prevent incrementing compression counter when compression is turned off in options. * Prevent incrementing compression counter when compression is turned off in options. * Added two more supported compression types to test code in db_test.cc * Prevent incrementing compression counter when compression is turned off in options. * Added new StatsLevel that excludes compression timing. * Fixed casting error in coding.h * Fixed CompressionStatsTest for new StatsLevel. * Removed unused variable that was breaking the Linux build/Fix clang analyzer errors Summary: Fixing erros reported by clang static analyzer. * Removing some unused variables. * Adding assertions to fix false positives reported by clang analyzer. * Adding `__clang_analyzer__` macro to suppress false positive warnings. Test Plan: USE_CLANG=1 OPT=-g make analyze Reviewers: andrewkr, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision: release build for MyRocks by using debug-only code only in debug builds Summary: MyRocks release integration build breaks because we treat warnings caused by unused variables as errors. Variable `edit` is only used in debug builds. Therefore we need to guard it using `#ifndef NDEBUG` check. Test Plan: `[p]arc diff for the default validation. Verify that release build fails before this fix and passes after applying it. Reviewers: andrewkr, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: multiple batch of flush into one manifest file (one call to LogAndApply) Summary: Currently, if several flush outputs are committed together, we issue each manifest write per batch (1 batch 1 flush 1 sst file 1+ continuous memtables). Each manifest write requires one fsync and one fsync to parent directory. In some cases, it becomes the bottleneck of write. We should batch them and write in one manifest write when possible. Test Plan: ` ./db_bench **Before** ``` Initializing RocksDB Options from the specified file Initializing RocksDB Options from command-line flags RocksDB: version 4.9 Date: Fri Jul 1 15:38:17 2016 CPU: 32 * Intel(R) Xeon(R) CPU E5-2660 0 2.20GHz CPUCache: 20480 KB Keys: 16 bytes each Values: 100 bytes each (50 bytes after compression) Entries: 1000000 Prefix: 0 bytes Keys per prefix: 0 RawSize: 110.6 MB (estimated) FileSize: 62.9 MB (estimated) Write rate: 0 bytes/second Compression: Snappy Memtablerep: skip_list Perf Level: 1 WARNING: Assertions are enabled; benchmarks unnecessarily slow Initializing RocksDB Options from the specified file Initializing RocksDB Options from command-line flags DB path: [/tmp/rocksdbtest-112628/dbbench] fillseq : 166.277 micros/op 6014 ops/sec; 0.7 MB/s ``` **After** ``` Initializing RocksDB Options from the specified file Initializing RocksDB Options from command-line flags RocksDB: version 4.9 Date: Fri Jul 1 15:35:05 2016 CPU: 32 * Intel(R) Xeon(R) CPU E5-2660 0 2.20GHz CPUCache: 20480 KB Keys: 16 bytes each Values: 100 bytes each (50 bytes after compression) Entries: 1000000 Prefix: 0 bytes Keys per prefix: 0 RawSize: 110.6 MB (estimated) FileSize: 62.9 MB (estimated) Write rate: 0 bytes/second Compression: Snappy Memtablerep: skip_list Perf Level: 1 WARNING: Assertions are enabled; benchmarks unnecessarily slow Initializing RocksDB Options from the specified file Initializing RocksDB Options from command-line flags DB path: [/tmp/rocksdbtest-112628/dbbench] fillseq : 52.328 micros/op 19110 ops/sec; 2.1 MB/s ``` Reviewers: andrewkr, IslamAbdelRahman, yhchiang, sdong Reviewed By: sdong Subscribers: igor, andrewkr, dhruba, leveldb Differential Revision:"
,,0.0767,rocksdb,"Allow upgrades from nullptr to some merge operator Summary: Currently, RocksDB does not allow reopening a preexisting DB with no merge operator defined, with a merge operator defined. This means that if a DB ever want to add a merge operator, theres no way to do so currently. Fix this by adding a new verification type `kByNameAllowFromNull` which will allow old values to be nullptr, and new values to be non-nullptr. Closes Differential Revision: D5961131 Pulled By: lth fbshipit-source-id: 06179bebd0d90db3d43690b5eb7345e2d5bab1eb/"
,,0.1059,rocksdb,Java: Add copy constructors for various option classes Summary: Add Java-side copy constructors for: Options DBOptions ColumnFamilyOptions WriteOptions along with unit tests to assert the copy worked. NOTE: Unit tests are failing in travis but it looks like a global timeout issue. These tests pass. Closes Differential Revision: D6874425 Pulled By: sagar0 fbshipit-source-id: 5bde68ea5b5225e071faea2628bf8bbf10bd65ab/
,,0.1104,rocksdb,Java: Add copy constructors for various option classes Summary: Add Java-side copy constructors for: Options DBOptions ColumnFamilyOptions WriteOptions along with unit tests to assert the copy worked. NOTE: Unit tests are failing in travis but it looks like a global timeout issue. These tests pass. Closes Differential Revision: D6874425 Pulled By: sagar0 fbshipit-source-id: 5bde68ea5b5225e071faea2628bf8bbf10bd65ab/
,,0.1074,rocksdb,Java: Add copy constructors for various option classes Summary: Add Java-side copy constructors for: Options DBOptions ColumnFamilyOptions WriteOptions along with unit tests to assert the copy worked. NOTE: Unit tests are failing in travis but it looks like a global timeout issue. These tests pass. Closes Differential Revision: D6874425 Pulled By: sagar0 fbshipit-source-id: 5bde68ea5b5225e071faea2628bf8bbf10bd65ab/
,,0.0911,rocksdb,"WriteBufferManager JNI fixes (#4579) Summary: 1. `WriteBufferManager` should have a reference alive in Java side through `Options`/`DBOptions` otherwise, if its GCed at java side, native side can seg fault. 2. native method `setWriteBufferManager()` in `DBOptions.java` doesnt have its jni method invocation in rocksdbjni which is added in this PR 3. `DBOptionsTest.java` is referencing object of `Options`. Instead it should be testing against `DBOptions`. Seems like a copy paste error. 4. Add a getter for WriteBufferManager. Pull Request resolved: Differential Revision: D10561150 Pulled By: sagar0 fbshipit-source-id: 139a15c7f051a9f77b4200215b88267b48fbc487/"
,,0.0852,rocksdb,"WriteBufferManager JNI fixes (#4579) Summary: 1. `WriteBufferManager` should have a reference alive in Java side through `Options`/`DBOptions` otherwise, if its GCed at java side, native side can seg fault. 2. native method `setWriteBufferManager()` in `DBOptions.java` doesnt have its jni method invocation in rocksdbjni which is added in this PR 3. `DBOptionsTest.java` is referencing object of `Options`. Instead it should be testing against `DBOptions`. Seems like a copy paste error. 4. Add a getter for WriteBufferManager. Pull Request resolved: Differential Revision: D10561150 Pulled By: sagar0 fbshipit-source-id: 139a15c7f051a9f77b4200215b88267b48fbc487/"
