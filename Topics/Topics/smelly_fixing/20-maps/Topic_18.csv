Topic_no,Keywords,Contrib,System,Text
18,"android, issue, remove, fix, crash, start, avoid, stop, refactor, shutdown, thread, logic, play, destroy, recent, view, show, network, music, save",0.0599,conscrypt,Tracking openssl-1.0.1 Bug: 6168278 Change-Id: I240d2cbc91f616fd486efc5203e2221c9896d90f/
,,0.0669,Frostwire,[common] Should fix Monova search. Issue (tested only on desktop)/
,,0.3684,Frostwire,"[android/apollo] Bug fix. Now a playlist can be created out of More by artist songs./[android] build 242 Fixes refresh issues adding/removing playlists. Refactors, cleanup./[android] fixed scrolling issue on profile adapters./[android] dont call refresh() inside restartLoader. minor optimizations. hunting for bug on favoritefragment./[android] multiple fixes and cleanup. Back arrow on top bar and back button behave the same goBack(). If user is inside an album view, it goes back to the artist profile, otherwise it finishes the task. When an album is removed list of albums is refreshed and songs are removed from recent./[android] fixes issue where last added favorite wasnt displaying. other refresh issues remain./[android] fixes on playlist handling./[android] fix display of recents, refactor on albumLoader./[android] fixes crash on long pressing special playlists./[android] fixes on favorite fragment, adding to favorites./[android] almost ready to merge, cleaning up, fixes./[android] mistery solved, several fixes, lots of logging to find it./[android] next batch of fragment refactors and fixes./"
,,0.1205,Frostwire,"[android] build 242 Fixes refresh issues adding/removing playlists. Refactors, cleanup./[android] fixes on playlist handling./[android] almost ready to merge, cleaning up, fixes./"
,,0.2633,Frostwire,"[android] multiple fixes and cleanup. Back arrow on top bar and back button behave the same goBack(). If user is inside an album view, it goes back to the artist profile, otherwise it finishes the task. When an album is removed list of albums is refreshed and songs are removed from recent./[android] fixes on playlist handling./[android] almost ready to merge, cleaning up, fixes./"
,,0.1121,Frostwire,"[android] fix display of recents, refactor on albumLoader./"
,,0.191,Frostwire,"[android] fixes issue with adapters adding null extra element at the end/[android] Fixes issue creating playlist off of artist./[android] fixed scrolling issue on profile adapters./[android] almost ready to merge, cleaning up, fixes./[android] mistery solved, several fixes, lots of logging to find it./"
,,0.1484,Frostwire,"[android] last fixes on create/rename playlist dialog./[android] build 242 Fixes refresh issues adding/removing playlists. Refactors, cleanup./"
,,0.3249,Frostwire,"[android] Fixed show cover on lockscreen is stopped not show is paused from notification show is close notification not show is paused from foreground not show is kill notification and paused- not show/[android] dont stop shutting down the music service if anything happens during broadcast to effect processors./[android] Avoiding NPE related to apollo/[android] Protecting from a failure in getAlbumtArt, specially a NPE while updating the remote control client/[android] Dont crash if we cant access ""content://media/external/fs_id""/[android] Dont crash if we cant get the MODIFY_PHONE_STATE permission. This is only used for remote control from the lock screen./[android] Fixed potential concurrency issue while releasing the mNextMediaPlayer/[android] NPEs are possible even after checking for non null. Fix./"
,,0.10400000000000001,Frostwire,"[android] fix display of recents, refactor on albumLoader./"
,,0.2315,Frostwire,"[android] multiple fixes and cleanup. Back arrow on top bar and back button behave the same goBack(). If user is inside an album view, it goes back to the artist profile, otherwise it finishes the task. When an album is removed list of albums is refreshed and songs are removed from recent./[android] mistery solved, several fixes, lots of logging to find it./[android] next batch of fragment refactors and fixes./"
,,0.1081,Frostwire,[android] fixed scrolling issue on profile adapters./
,,0.1101,Frostwire,[android] fixed scrolling issue on profile adapters./
,,0.1048,Frostwire,"[android] search and other torrent downloads now support partial download dialog. edge cases to fix./[android] pluggin HandpickedTorrentDialog on more use cases, got it to crash./"
,,0.2125,Frostwire,"[android] import cleanup, fixes broken build./[android] multiple fixes and cleanup. Back arrow on top bar and back button behave the same goBack(). If user is inside an album view, it goes back to the artist profile, otherwise it finishes the task. When an album is removed list of albums is refreshed and songs are removed from recent./"
,,0.0778,Frostwire,[desktop] avoid touching the UI from a background thread (that could freeze the application)/
,,0.0686,Frostwire,[desktop] possible NPE witnessed in Linux/
,,0.121,Frostwire,"[android] removed strange/unused DnD debug tracker/Merge pull request from grzesiekrzaca/moving_playlist_double_list_modification_iside_a_critical_section [android] issue repositioning songs in playlist new branch/Everyting was ""ok"" in the View. The problem lay with no listener that would change the adapter (and data in system). Problem with the adapter is that it uses a copy of the data other than the one in ArryAdaper (why? 0.o) so that copy also has to be updated./"
,,0.0704,Frostwire,[android] removed strange/unused DnD debug tracker/[android] crash fix on ApolloFragment::restartLoader/[android] Fixes Formatting./
,,0.2827,Frostwire,"[android] fixed missing remote control update logic path/[android] avoid NPE/[android] avoid NPE if user tries to play before audio service can be obtained./[android] reverted ""true"" argument in stop playback, notification was not working properly/[android] NPE fix reported in console/[android] try to stop and dismiss music faster. avoid issue of music that stopped coming back on next session./[android] fixing conflicts./[android] Using last service id for stopSelf in MusicPlaybackService/"
,,0.1023,Frostwire,[android] prevents a failed display of a currently showing applovin ad/
,,0.075,Frostwire,[android] avoid accidental swipe gesture when scrolling down with thumb./
,,0.1392,Frostwire,"[android] bug fix on dialog that wouldnt dismiss/[android] Fixes issue where seeding dialog wasnt dismissed on OK/[android] avoid crash when trying to seed a non existent file descriptor, fixes crash reported in console/[android] Since BTEngine#download is asynchronous, this findTorrent and successive torrent handle calls were causing memory issues inside libtorrent/[android] broken build/"
,,0.0673,Frostwire,[android] IllegalStageException reported in console/
,,0.2737,Frostwire,"[android] Fixes bug where app wouldnt shutdown. The isShutdown() method was always failing because it used `getIntent()`. Added a parameter to it and invoked it on the `MainActivity.onNewIntent()` method. My belief is that this bug surfaced when the MainActivity was converted to `launchMode=singleTask` When new Intents were fired on it, it wouldnt call `onCreate()`, it would go straight to `onResume()`, and even though I also tried putting the logic to check the intent there, it wouldnt work because it would be working with the original intent, not the one that was just sent./[android] fixed issue of onNewIntent with second open/[android] better handling of action view intent (minor issue left with second open)/[android] fixes bug where torrent download dialog would keep coming back./[android] fixed refresh of player notifier, build 263/[android] Fixed logic for SD permission check from MainActivity/[android] fixing conflicts./[android] Flush ux stats as early as possible during the shutdown situation (not a problem is user cancel)/"
,,0.1085,Frostwire,"[android] Dont crash on illegal state Looks like this is being called twice, or theres a timing bug. Dont choke on this as it probably happened already. java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState at android.app.FragmentManagerImpl.checkStateLoss(FragmentManager.java:1280) at android.app.FragmentManagerImpl.popBackStackImmediate(FragmentManager.java:451) at android.app.Activity.onBackPressed(Activity.java:2153) at com.frostwire.android.gui.activities.VPNStatusDetailActivity.onBackPressed(VPNStatusDetailActivity.java:159)/"
,,0.1002,Frostwire,"[android] fixed refresh of player notifier, build 263/"
,,0.0694,Frostwire,[android] NPE on IabHelper./
,,0.1255,Frostwire,[desktop] make sure the media player share button is hidden when playback stops/
,,0.0809,Frostwire,[common] fixed getProgress calculation/[common] avoid possible NPE/
,,0.1422,Frostwire,[android] More edge cases and better shutdown. MusicUtils.mService renamed to MusicUtils.musicPlaybackServices Fixed log entry on Offers.dismissAndOrShutdownIfNecessary Cleanup/
,,0.146,Frostwire,[android] More edge cases and better shutdown. MusicUtils.mService renamed to MusicUtils.musicPlaybackServices Fixed log entry on Offers.dismissAndOrShutdownIfNecessary Cleanup/
,,0.1422,Frostwire,[android] More edge cases and better shutdown. MusicUtils.mService renamed to MusicUtils.musicPlaybackServices Fixed log entry on Offers.dismissAndOrShutdownIfNecessary Cleanup/
,,0.1497,Frostwire,[android] More edge cases and better shutdown. MusicUtils.mService renamed to MusicUtils.musicPlaybackServices Fixed log entry on Offers.dismissAndOrShutdownIfNecessary Cleanup/
,,0.4524,Frostwire,"[android] fix crash on MusicPlaybackService.getQueue() when the playlist is null, import cleanup/[android] dont crash if you cant register the apollo remote control client/[android] fixes premature music service stop during music playback, refactor, much better shutdown./[android] More edge cases and better shutdown. MusicUtils.mService renamed to MusicUtils.musicPlaybackServices Fixed log entry on Offers.dismissAndOrShutdownIfNecessary Cleanup/[android] Fixes auto-restarting on exit issue. the issue was MusicPlaybackServices shutdown logic. The way this service shuts itself down is by receiving a delayed PendingIntent (this is a way to start a service at a later time even if the app isnt running) via Androids AlarmManager. This shutdown was being scheduled in 60 seconds. If the service is started normally with Context.startService() its onStartCommand() method returns START_STICKY, but if its started with the special SHUTDOWN command, it checks if theres anything playing, and if its not playing, it releases everything and returns START_NOT_STICKY./[android] test, dont go to idle when stopping. seems to stop faster and finish the audio player activity faster this way. Trying to understand why the player keeps coming back even after weve stopped it completely, might be something else entirely that brings the last song back. Trying to see if this is whats making the app restart by itself, perhaps its not the player, perhaps its the new MobFox network that keeps something in the background./"
,,0.257,Frostwire,"[android] finish or shutdown on dismiss DRY refactor All ad networks reuse logic to handle dismiss or shutdown, fixing possible case where app wouldnt be shutdown on one of the networks. Future proofing improvement on Offers.getActiveNetworks() for new network codes or configuration typos./"
,,0.2763,Frostwire,"[android] finish or shutdown on dismiss DRY refactor All ad networks reuse logic to handle dismiss or shutdown, fixing possible case where app wouldnt be shutdown on one of the networks. Future proofing improvement on Offers.getActiveNetworks() for new network codes or configuration typos./"
,,0.2615,Frostwire,"[android] finish or shutdown on dismiss DRY refactor All ad networks reuse logic to handle dismiss or shutdown, fixing possible case where app wouldnt be shutdown on one of the networks. Future proofing improvement on Offers.getActiveNetworks() for new network codes or configuration typos./"
,,0.317,Frostwire,"[android] mobfox hack not needed, issue fixed by mobfox/[android] avoid double finish/[android] finish or shutdown on dismiss DRY refactor All ad networks reuse logic to handle dismiss or shutdown, fixing possible case where app wouldnt be shutdown on one of the networks. Future proofing improvement on Offers.getActiveNetworks() for new network codes or configuration typos./"
,,0.3907,Frostwire,"[android] remove finishAffinity() call, causing crashes./[android] fixes premature music service stop during music playback, refactor, much better shutdown./[android] More edge cases and better shutdown. MusicUtils.mService renamed to MusicUtils.musicPlaybackServices Fixed log entry on Offers.dismissAndOrShutdownIfNecessary Cleanup/[android] Fixes auto-restarting on exit issue. the issue was MusicPlaybackServices shutdown logic. The way this service shuts itself down is by receiving a delayed PendingIntent (this is a way to start a service at a later time even if the app isnt running) via Androids AlarmManager. This shutdown was being scheduled in 60 seconds. If the service is started normally with Context.startService() its onStartCommand() method returns START_STICKY, but if its started with the special SHUTDOWN command, it checks if theres anything playing, and if its not playing, it releases everything and returns START_NOT_STICKY./[android] NPE fix MainActivity.onOptionsItemSelected, round 2./[android] NPE opening drawer too quickly java.lang.IllegalArgumentException: No drawer view found with gravity LEFT at android.support.v4.widget.DrawerLayout.openDrawer(DrawerLayout.java:1618) at android.support.v4.app.ActionBarDrawerToggle.onOptionsItemSelected(ActionBarDrawerToggle.java:409) at com.frostwire.android.gui.activities.MainActivity.onOptionsItemSelected(MainActivity.java:804)/[android] few more conditions. naming refactor to avoid confusions/"
,,0.3851,Frostwire,"[android] fixes premature music service stop during music playback, refactor, much better shutdown./[android] More edge cases and better shutdown. MusicUtils.mService renamed to MusicUtils.musicPlaybackServices Fixed log entry on Offers.dismissAndOrShutdownIfNecessary Cleanup/[android] Fixes auto-restarting on exit issue. the issue was MusicPlaybackServices shutdown logic. The way this service shuts itself down is by receiving a delayed PendingIntent (this is a way to start a service at a later time even if the app isnt running) via Androids AlarmManager. This shutdown was being scheduled in 60 seconds. If the service is started normally with Context.startService() its onStartCommand() method returns START_STICKY, but if its started with the special SHUTDOWN command, it checks if theres anything playing, and if its not playing, it releases everything and returns START_NOT_STICKY./"
,,0.0784,Frostwire,[DESKTOP-182] Avoiding Starred playlist to be deleted or renamed/
,,0.2351,Frostwire,"[android] fixed purchase cancelled bug, more testing needed/[android] MoPub progress Added close ad button and handling logic. Does not load the ad if user disabled ads. NPE onDestroy fixed. Refactor on AudioPlayerActivity::PlaybackStatus Avoid temporary crashes while the landscape mode isnt finished./[android] gotta fix logic to show or not. listener working/"
,,0.433,Frostwire,"Merge pull request from gubatron/issue225_ringtone_playback_enchancement [android] Issues with ringtone playback (#225, Allow simple playback of ringtones without adversly affecting the users current playback and incidental stop/play status fix for file lists (affects both ringtone and music playback): something is playing and a ringtone is to be played the current played music will be paused a ringtone is playing and music playback is resumed/started then the ringtone will be stopped one ringtone can be played at the same time. Starting new playback will stop the old one. a ringtone that is being played will stop the playback out of the fragment or changing the tab carusel will stop playback of a ringtone. (User can no longer see the stop button, so its stopped for him)/"
,,0.2784,Frostwire,"[android] InMobi/Offers maintenance after 0 impressions from InMobi Moved InMobi constant to InMobiAdNetwork UIUtils.inUIThread() new convenience method InMobi checks/flags to avoid double interstitial loading Offer checks to avoid too rapid network re-initialization Raised InMobi reload period from 20secs to 60secs InMobiInterstitialListener now implements InMobiInterstitial.InterstitialAdListener2, as InMobiInterstitial.InterstitialAdListener is now deprecated and will be phased out soon InMobi InterstitialReloader avoids double interstitial loading It seems InMobi changed account parameters, everything should be working but error says to contact partner. I believe there was a conflict between MoPub and InMobi and thats why we were getting the double loading of InMobi interstitials, most likely will remove InMobi manual integration next (while leaving the libraries for MoPub to use)/[android] no more broadcast receiver leaks, improved abstractions, brainfart refactors/"
,,0.2599,Frostwire,"[android] InMobi/Offers maintenance after 0 impressions from InMobi Moved InMobi constant to InMobiAdNetwork UIUtils.inUIThread() new convenience method InMobi checks/flags to avoid double interstitial loading Offer checks to avoid too rapid network re-initialization Raised InMobi reload period from 20secs to 60secs InMobiInterstitialListener now implements InMobiInterstitial.InterstitialAdListener2, as InMobiInterstitial.InterstitialAdListener is now deprecated and will be phased out soon InMobi InterstitialReloader avoids double interstitial loading It seems InMobi changed account parameters, everything should be working but error says to contact partner. I believe there was a conflict between MoPub and InMobi and thats why we were getting the double loading of InMobi interstitials, most likely will remove InMobi manual integration next (while leaving the libraries for MoPub to use)/"
,,0.1641,Frostwire,"[android] no more broadcast receiver leaks, improved abstractions, brainfart refactors/[android] WIP, AdNetworks abstraction refactor, starting, stopping and all common logic moved up to new AbstractAdNetwork/"
,,0.0982,Frostwire,"[android] no more broadcast receiver leaks, improved abstractions, brainfart refactors/"
,,0.4158,Frostwire,"[android] InMobi/Offers maintenance after 0 impressions from InMobi Moved InMobi constant to InMobiAdNetwork UIUtils.inUIThread() new convenience method InMobi checks/flags to avoid double interstitial loading Offer checks to avoid too rapid network re-initialization Raised InMobi reload period from 20secs to 60secs InMobiInterstitialListener now implements InMobiInterstitial.InterstitialAdListener2, as InMobiInterstitial.InterstitialAdListener is now deprecated and will be phased out soon InMobi InterstitialReloader avoids double interstitial loading It seems InMobi changed account parameters, everything should be working but error says to contact partner. I believe there was a conflict between MoPub and InMobi and thats why we were getting the double loading of InMobi interstitials, most likely will remove InMobi manual integration next (while leaving the libraries for MoPub to use)/[android] multiple fixes with promo views/adapter makes sure remove ads offer isnt shown if user removed ads ads touch to frostwire features black background title view refactors WIP: crashing for some reason on plus build/[android] no more broadcast receiver leaks, improved abstractions, brainfart refactors/[android] WIP, AdNetworks abstraction refactor, starting, stopping and all common logic moved up to new AbstractAdNetwork/[android] gotta fix logic to show or not. listener working/"
,,0.3482,Frostwire,"[android] bug fix, clean any handwritten filters before submitting search/[android] bugfix/[android] fixes glitch on scroll detection/[android] better scroll change direction detection, avoids false positives./[android] multiple fixes with promo views/adapter makes sure remove ads offer isnt shown if user removed ads ads touch to frostwire features black background title view refactors WIP: crashing for some reason on plus build/[android] no special offers in horizontal mode. fix number of slides when in landscape mode to always have an even number/"
,,0.4641,Frostwire,"Merge pull request from gubatron/small_file_list_bugs [android/#285] Small file list bugs RELOADED/[android] fix list refresh/Merge pull request from gubatron/issue225_ringtone_playback_enchancement [android] Issues with ringtone playback (#225, Allow simple playback of ringtones without adversly affecting the users current playback and incidental stop/play status fix for file lists (affects both ringtone and music playback): something is playing and a ringtone is to be played the current played music will be paused a ringtone is playing and music playback is resumed/started then the ringtone will be stopped one ringtone can be played at the same time. Starting new playback will stop the old one. a ringtone that is being played will stop the playback out of the fragment or changing the tab carusel will stop playback of a ringtone. (User can no longer see the stop button, so its stopped for him)/[android] Fix for ringtone item selection and context menu the ability to check multiple ringtones by hiding the checkboxes there are no items for the context menu dont show it menu ignores other checked files (always can play and set as ringtone)/"
,,0.1675,Frostwire,[android] feature/mobile data protection fix (#338) * [android] check if torrents should be resumed when on mobile data and mobile data saving is on * [android] seeding while on mobile data saving and no wifi/
,,0.1606,Frostwire,[android] feature/mobile data protection fix (#338) * [android] check if torrents should be resumed when on mobile data and mobile data saving is on * [android] seeding while on mobile data saving and no wifi/
,,0.3013,Frostwire,"[android] multiple fixes with promo views/adapter makes sure remove ads offer isnt shown if user removed ads ads touch to frostwire features black background title view refactors WIP: crashing for some reason on plus build/[android] fixed purchase cancelled bug, more testing needed/[android] avoids invalid argument issue on startActivityForResult()/"
,,0.1042,Frostwire,"[android] no more broadcast receiver leaks, improved abstractions, brainfart refactors/"
,,0.4625,Frostwire,"Merge pull request from gubatron/issue225_ringtone_playback_enchancement [android] Issues with ringtone playback (#225, Allow simple playback of ringtones without adversly affecting the users current playback and incidental stop/play status fix for file lists (affects both ringtone and music playback): something is playing and a ringtone is to be played the current played music will be paused a ringtone is playing and music playback is resumed/started then the ringtone will be stopped one ringtone can be played at the same time. Starting new playback will stop the old one. a ringtone that is being played will stop the playback out of the fragment or changing the tab carusel will stop playback of a ringtone. (User can no longer see the stop button, so its stopped for him)/[android] Fix for ringtone item selection and context menu the ability to check multiple ringtones by hiding the checkboxes there are no items for the context menu dont show it menu ignores other checked files (always can play and set as ringtone)/"
,,0.2131,Frostwire,"[android] New FWSeekbarPreference replaces NumberPicker2. Much better, natural experience. new styleables for FWSeekbarPreference. renamed styleable numberpicker to fwPickerPreference got rid of styeleables used by NumberPicker2, unused. removed NumberPickerPreferenceDialog.java, NumberPickerPreference2.java Now that the preference can be configured in XML, the setupNumericalPreference (renamed to setupFWSeekbarPreference) API is simplified enourmously, easier to maintain. NumberPickerPreference (old) fetching of its custom styleables refactoed after styleable rename Pending: Need help figuring out why app crashes when rotated the second time around when the preference dialog is shown. It seems it has something to do with setting target fragments correctly. Issue might be rooted in parent class AbstractPreferenceFragment.PreferenceDialogFragment/"
,,0.4662,Frostwire,"Merge pull request from gubatron/issue225_ringtone_playback_enchancement [android] Issues with ringtone playback (#225, Allow simple playback of ringtones without adversly affecting the users current playback and incidental stop/play status fix for file lists (affects both ringtone and music playback): something is playing and a ringtone is to be played the current played music will be paused a ringtone is playing and music playback is resumed/started then the ringtone will be stopped one ringtone can be played at the same time. Starting new playback will stop the old one. a ringtone that is being played will stop the playback out of the fragment or changing the tab carusel will stop playback of a ringtone. (User can no longer see the stop button, so its stopped for him)/[android] Fix for ringtone item selection and context menu the ability to check multiple ringtones by hiding the checkboxes there are no items for the context menu dont show it menu ignores other checked files (always can play and set as ringtone)/"
,,0.0869,Frostwire,"[all] fixes logic bug in update manager that made wrong (old) update message show instead of the one with the bullets/[android] do not stop btEngine, the app never assumes btEngine is stopped./"
,,0.0744,Frostwire,"[desktop] cleanup unthrown exceptions/[android] do not stop btEngine, the app never assumes btEngine is stopped./"
,,0.1628,Frostwire,"[android] refactor to avoid one more type/[android] avoid mixing v4 and native fragments, fix player orientation issue/[android] Enable icon display in toolbars overflow menu This is a refactor of a reflection hack found as a solution. See (never merged)/"
,,0.0948,Frostwire,"[android] avoid mixing v4 and native fragments, fix player orientation issue/"
,,0.1207,Frostwire,[android] refactor to avoid one more type/[android] Enable icon display in toolbars overflow menu This is a refactor of a reflection hack found as a solution. See (never merged)/
,,0.1152,Frostwire,[android] refactor to avoid one more type/[android] Enable icon display in toolbars overflow menu This is a refactor of a reflection hack found as a solution. See (never merged)/[android] fixed title header bug and NPE/
,,0.0987,Frostwire,"[android] avoid mixing v4 and native fragments, fix player orientation issue/"
,,0.1299,Frostwire,[android] dont crash if mopub couldnt load interstitial. It may happen that MoPubs network request queue cant be started because context.getCacheDir() might return null at the time of the call. See
,,0.1022,Frostwire,[android] GridView for My Files Images and Audio (Issue
,,0.0819,Frostwire,"[android] fixed myfiles title issue, removed warnings inflating headers/"
,,0.0897,Frostwire,"[android] fixed myfiles title issue, removed warnings inflating headers/[android] commented code fix. renamed settings_search.xml settings_search_engines.xml/[android] NPE on SearchFragment scroll events fixed, refactor/"
,,0.1995,Frostwire,"[android] GridView for My Files Images and Audio (Issue fixed logic of selection check box with bias towards select all/[android] MyFiles new action toolbar on selection mode (#413) Brings out action mode on long press styled ActionMode toolbar Handles visibility of menu action depending on different factors like, number of files checked, file type, SAF Bug fix: When seeding was only enabled for WiFi, the file would still be added to transfers in Finished state. Now it doesnt add the file and it stays in the same screen as it was originally./[android] fixes UI when deleting files in selection mode (#406)/[android] fixed myfiles title issue, removed warnings inflating headers/"
,,0.1181,Frostwire,[android] GridView for My Files Images and Audio (Issue
,,0.0838,Frostwire,[android] avoids possibility of getting stuck on Buy screen/
,,0.1956,Frostwire,"Player minimized (#392) * [android] adjusted the player notifier layout * [android] PlayerNotificationView and layout cleanup * [android] rename refactor PlayerNotifier MiniPlayer * [android] miniplayer controls plugged * [android] fixed miniPlayer layout * [android] miniplayer cover art logic * [android] miniplayer single line titles, ellipsis/[android] better control of toolbar custom view gravity and fixed visibility issue/"
,,0.1207,Frostwire,[android] Fixes Broadcast receiver leaked error on PreviewActivity/[android] move destroy view to onPause() is more effective at avoiding Intent receiver leak/
,,0.2056,Frostwire,"Player minimized (#392) * [android] adjusted the player notifier layout * [android] PlayerNotificationView and layout cleanup * [android] rename refactor PlayerNotifier MiniPlayer * [android] miniplayer controls plugged * [android] fixed miniPlayer layout * [android] miniplayer cover art logic * [android] miniplayer single line titles, ellipsis/"
,,0.1161,Frostwire,[android] GridView for My Files Images and Audio (Issue
,,0.1865,Frostwire,"Player minimized (#392) * [android] adjusted the player notifier layout * [android] PlayerNotificationView and layout cleanup * [android] rename refactor PlayerNotifier MiniPlayer * [android] miniplayer controls plugged * [android] fixed miniPlayer layout * [android] miniplayer cover art logic * [android] miniplayer single line titles, ellipsis/"
,,0.0689,Frostwire,[android] debug output shutting down/
,,0.0948,Frostwire,[desktop] solve issue with Cmd+A not working unless clicking twice on playlist row/[desktop] avoid UI thread violation/
,,0.0838,Frostwire,"[desktop] no need of temporary lastClickedActionsHolder, it wasnt working anyway, there is an issue in isActiveTorrentDownload/[desktop] since add torrent is async, its to early to find it right after makeTorrentAndDownload, avoid NPE/"
,,0.0673,Frostwire,[common] fix getting player id/
,,0.0906,Frostwire,[android] avoid crash getting LoaderManager when Fragment still not attached to Activity/
,,0.1043,Frostwire,[android] avoid crash getting LoaderManager when Fragment still not attached to Activity/
,,0.1798,Frostwire,"[android] fixes bug what crashed the app on deleting ëLast addedí playlist (#485) There was an issue with positioning of the playlists, and in consequence the delete option was now available on ëLast Addedí playlist. And it should not be available. In consequence deleting it crashed the app./Apollo playlist ui update (#481) * [android] set up for updated UI in playlist tab * [android] added ënew empty playlistí functionality to the playlist tab on apollo * [android] added padding to TabLayout and increased size of Toolbar text * [android] deleted unused imports * [android] fixed double rendering bug on playlist adapter, refactor/"
,,0.1271,Frostwire,[android/apollo] dont crash if you cant show photo selection dialog due to illegal state exception/[android] NPE on ProfileActivity.onActivityResult/
,,0.3454,Frostwire,"[android] avoid ANR adding to recently played/[android] avoid possible ANR by android.app.AlarmManager.cancel()/[android] NPE on MusicPlaybackService/[android] anti-ANR MusicPlaybackService refactors Addresses tickets and Operations like .openXXX() and .duration() may take a long time and cause ANRs if invoked in the main thread. The code has been refactored to use callbacks to the main thread and avoid the numerous ANR reports weve been getting in the google play console Also fixes a possible NPE on ensurePlayListCapacity/[android] possible NPE on a fast start and shutdown averted/[android] attempt to recover from IllegalStateException in MusicPlaybackService#getAlbumId/[android] mitigating another NPE in MusicPlaybackService#onDestroy (documented the possible reason of mShutdownIntent being null)/[android] mitigating another NPE in MusicPlaybackService#scheduleDelayedShutdown due to excessive (and bad) use of mutable state in player/[android] log StaleDataException error and return false in MusicPlaybackService#openFile/[android] log UnsupportedOperationException error and return false in MusicPlaybackService#openFile/[android] revert ingored exception catch/[android] MusicPlaybackService possible Runtime Exception submitting task/[android] fixed NPE in releaseServiceUiAndStop/[android] avoid ArrayIndexOutOfBoundsException at runtime in reloadQueue/[android] fixed issue if visible mini player when existing the app/[android] avoid ANR, dont lock whole service object to get audioSessionId/[android] possible NPE on RemoteControlClient::MetadataEditor.apply()/"
,,0.37799999999999995,Frostwire,"[android] one more context leak check in ImageLoader/[android] one more potential context leak fixed/[android] avoid taking closure via anonymous class to the thread pool/[android] avoid context leak in ImageViewerFragment, improved Debug#hasContext/[android] avoid leaking Picasso types in our API/[android] added Debug utility class with context leak detection/[android] necessary to use picasso 3.0.0-SNAPSHOT because of the head marker issue, using uri from MediaStore instead of internal one/[android] avoid use of picasso fit() since it delays the actual bitmap request until the image view bounds are calculated/[android] removed ImageLoader priority argument. It leaks picasso API, it does nothing if not using the internal picasso thread pool and its only useful in situations like an image stream feed, for which picasso is not good as a whole/[android] ImageViewer simplifications. ImageLoader DEBUG_ERRORS flag/[android] fixes bug loading high res images/[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.2418,Frostwire,"[android] Fixes issue where My Files SearchView was being hidden right after being shown. The culprit was a runnable sent from the ToolbarActionBar which would invoke populateOptionsMenu. This runnable was sent whenever the activitys invalidateOptionsMenu() method was called. After a search, the TransfersFragment.onTime() method was found to have a periodic call to invalidateOptionsMenu() from a recent fix on the transfers menu. The fix was making sure such invalidation only happened when the TransfersFragment was visible. 14 characters. The rest of the code changes had to do with a hard coded string and tighter checks on when to perform the filtering/[android] fix of menu logic in TransfersFragment/"
,,0.2479,Frostwire,"[android] Fixes rotation applied filters bug, thanks Build 423/[android] bug fix, filter drawer could be dragged from any other view or when no search was available/[android] 2 bugfixes in keyword suggestions One endless loop that was only twarted by throttling, thanks Keyword Detector wasnt being reset when filters were applied/[android] avoid NPE on rotations if fragments still not attached/[android] bug fix on filtered results. more on keywordtagview event handling there is still a bug when trying to change inclusion mode for a second tag, works fine with the first one only/[android] fixes issue with filter button dissapearing/[android] fixed null pointer error due to incorrect call of requestHistogramUpdateAsync on MANUAL_ENTRY feature/[android] improved documentation of last NPE fix/[android] best effort to avoid NPE due to ill timed call of showSearchView in onResume (temporary fix until refactor is done)/[android] KeywordDetector simplifications, cpu savings, animation stops when filter button clicked/[common/android] using List for histogram, better API and avoid extra memory creation/[android] Avoid any possible Context leaks when submitting results to KeywordDetector/[android] Fixes search media type tab selection bug Upon a first search, the adapter would filter results by the last searches media type however the UIs tab wouldnt be selected, also on rotation it would not remember the last tab selected and if you had previously selected a file type that didnt match your search youd think there was something wrong as youd see wrong file types in your search results or nothing at all and youd see the audio tab selected with the search result counter > 0/"
,,0.4101,Frostwire,"[android] refactored hideCheckBoxMenuItem Fixed possible null pointer. Make sure the last selected file type is considered, ringtones are not checkable since they cannot be deleted/[android] Avoid IllegalStateException, dont getResources() unless fragment attached/[android] avoid NPE on rotations if fragments still not attached/[android] avoid illegal state exception updating header on browse peer fragment/[android] avoid crash getting LoaderManager when Fragment still not attached to Activity/[android] filtering bug fix/[android] Fixes issue where My Files SearchView was being hidden right after being shown. The culprit was a runnable sent from the ToolbarActionBar which would invoke populateOptionsMenu. This runnable was sent whenever the activitys invalidateOptionsMenu() method was called. After a search, the TransfersFragment.onTime() method was found to have a periodic call to invalidateOptionsMenu() from a recent fix on the transfers menu. The fix was making sure such invalidation only happened when the TransfersFragment was visible. 14 characters. The rest of the code changes had to do with a hard coded string and tighter checks on when to perform the filtering/[android] avert crash on RejectedExecutionException/[android] ringtone/audio playback from menu issue fixed/[android] select/deselect all autocheck/uncheck bug fix/[android] fixes last tab selected issue on rotate/[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.268,Frostwire,"[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.2605,Frostwire,"[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.27699999999999997,Frostwire,"[android] avoid context leak on DeleteFileMenuAction/[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.0891,Frostwire,[android] fixed CancelMenuAction context leak background task (the first one detected with the engine thread pool)/
,,0.1271,Frostwire,[android] avoid capturing context references in startTorrentPartialDownload/[android] HandpickedTorrentDownloadDialog dialog dismiss crash fix/
,,0.3185,Frostwire,"[android] bug fix first display onResume interstitial/[android] dont crash at runtime if call to commit in MainActivity#hideFragments fails with IllegalStateException/[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.1875,Frostwire,[android] avoid IllegalState crash unregistering receivers MoPubs initialization may trigger a call to a broadcast receiver unregistration on some devices that can lead to an illegal state crash since the receiver may be already unregistered or not registered at all/[android] avoid NPE ImageViewerActivity and refactor for better API/
,,0.27699999999999997,Frostwire,"[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.1897,Frostwire,"[android] avoid possible NPE/[android] Fixes search media type tab selection bug Upon a first search, the adapter would filter results by the last searches media type however the UIs tab wouldnt be selected, also on rotation it would not remember the last tab selected and if you had previously selected a file type that didnt match your search youd think there was something wrong as youd see wrong file types in your search results or nothing at all and youd see the audio tab selected with the search result counter > 0/"
,,0.1044,Frostwire,[android] avoid possible ANRs shutting down/[android] ignoring SecurityException while canceling all notifications in EngineService#onStartCommand/
,,0.0854,Frostwire,[android] avoid possible IndexOutOfBoundsExceptions on playlist drops/
,,0.1578,Frostwire,"[android] issue fix Minimize the number of calls to the MusicService on the main thread. It was aggresively calling all the way down to the music service every 500ms to update the user interface. In many ocassions these calls would take a long time to come back thus causing thousands of ANR reports. Along the way the Debug context leak detection tool was fixed helping sort out 2 false positives. This implementation minimizes the number of static Runnables submited to just 3. Im not certain if we should be using the same thread pool for all these things. Perhaps the Engines getThreadPool() could use a parameter and internally work with multiple pools for distinct purposes. This requires a design conversation if we move forward in that direction, so that we can group threads accordingly in the minimum number of thread pools as possible./"
,,0.1169,Frostwire,"[WIP] Horizontal layout my music (#559) * [android] ititnal set up for the missing horizontal screens in my music * [android] updated headers * [android] fix for the unresponsive song list in horizontal views * [android] dont repeat layouts, use values-land/dimens.xml * [android] cleanup/"
,,0.0833,Frostwire,[android] apollos FavoriteStore and RecentStore optimizations Should avoid possible NPE in addSongId/
,,0.0818,Frostwire,[android] NPE fix on FavoritesStore.addSongId (issue apollos FavoriteStore and RecentStore optimizations Should avoid possible NPE in addSongId/
,,0.0833,Frostwire,[android] avoid possible IndexOutOfBoundsExceptions on playlist drops/
,,0.2173,Frostwire,"[android] somehow an NPE can happen right after the NPE check/[android] MusicPlaybackService.onDestroy ANR fix/[android] issue avoid ANR updating remote control client playback state/[android] avoid context leak int MuscPlaybackService#updateNotificationAsync background task/[android] avoid context leak int MuscPlaybackService#setDataSourceImpl background task/[android] possible Index out of bound exception (now that its not synchronized)/[android] MusicPlaybackService onDestroy() crash/[android] capturing only IllegalStateException and StaleDataException (partial revert of ANR/MusicPlaybackService.start fix Make sure mCurrentMediaPlayer.start() never occurs in main thread, where it can some times take too long performing isDrm() checks./[android] bug fix on song fragments clicking on a song that was already being played would not open the music player screen. other cleanups/[android] MusicPlaybackService.notifyChange() refactor/optimizations Make sure notifyChange logic always runs in background thread Avoid unnecessary database re-querying Invert string.equals() comparison to avoid possible NPEs/[android] MusicPlaybackService.openCurrentAndMaybeNext remove synchronized, avoid ANRs/[android] MusicPlaybackService.changeQueueAsync refactor. isFavorite() deadlock avoidance The change on isFavorite() to not synchronize on the whole object is to help avoid the ANR reported on issue when notifyChange() is called, which is called quite a lot. A refactor on notifyChange() is coming/[android] crash fix on MusicPlaybackService (Issue"
,,0.1316,Frostwire,[android] bugfix: resume audio playback in case interstitial takes audio focus/
,,0.1652,Frostwire,[android] using execute instead of submit to avoid unused creation of Future objects/[android] reverting mopub interstitial init back to ui thread a silent crash on the thread didnt let me see it couldnt be initialized on a thread that didnt have Looper.prepare() Will have to live with possible ANRs loading these interstitials/[android] avoid context leak on MoPubAdNetwork.loadMoPubInterstitial/
,,0.3245,Frostwire,"[android] Fix onResume interstitial display bug when app was minimized/[android] Offers, debug output update/[android] avoid back to back onResume interstitials While testing Ive left an interstitial unattended for more than the interval period to display the next one and this results in 2 or up to 4 ads being displayed in a row (including the remove-ads interstitials), therefore we refresh the lastDisplay time keeper when an ad is dismissed as well as when we display it/[android] Less interstitial ads MainActivity and Search interstitials now share the same timestamp, this way we avoid all possibility of back to back interstitials/"
,,0.1039,Frostwire,"[android] avoid picasso internal logic duplication/[android] removed not useful calculateDiskCacheSize The nature of this app is heavy use of disk, increasing or decreasing, the target shouldt change in each app start, also, the phone will more likely to fail before we reach the ~120MB max specified./"
,,0.1773,Frostwire,[android] Issue ImageViewerActivity: Swipe to the next/previous picture (#612)/Issue 590 scrollbar fix (#592) * [android] disable fast scroll on idle state prevents the user from scrolling by mistake while touching the right side of the screen while on the listview * [android] added ComposedOnScrollListener/
,,0.1336,Frostwire,"[android] Issue ImageViewerActivity: Swipe to the next/previous picture (#612)/[android] Crash fix on ImageViewerFragment opening file externally. Build 448. Dont try to open files with other apps by hand, in this case there were two bugs for reinventing the wheel. 1. The wrong file URI was being passed, after Android 7.0 file:// uris are not allowed. 2. The intent was missing a flag all this logic has been encapsulated nicely in a one liner UIUtils.openFile(...)/[android] Open Menu Action to open image with external Image Viewer (#586) * [android] Open Menu Action to open image with external Image Viewer Issue * [android] removed unncessary ëinFullScreenModeí from the ImageViewerFragment * [android] removed unnecessary characters put in by mistake/"
,,0.3702,Frostwire,"[android] SearchHeader banner reload bug fix Did not have to be so aggresive about destroying the mopub view. When destroyed, it gets rid of its internal controller. A mopub view that has a null internal controller aborts its ad loading logic. That controller can only be created when the mopub view is instantiated, this only happened onCreate(), therefore only one ad was displayed./[android] Issue revert last commit, refactor, copy list before submitting to thread/[android] DirectionDetectorScrollListener context leak fix and refactor/Issue 590 scrollbar fix (#592) * [android] disable fast scroll on idle state prevents the user from scrolling by mistake while touching the right side of the screen while on the listview * [android] added ComposedOnScrollListener/[android] SearchFragment avoid context leaks/[android] using execute instead of submit to avoid unused creation of Future objects/"
,,0.0672,Frostwire,"[android] properly fail if containerView is null design comment: isnt that the message? and also, its hard to think of CheckableImageView as a view, it is not even added to any container/"
,,0.1213,Frostwire,"[android] minor warning fixes in SoftwareUpdater/[android] avoid ANR caused by ConfigurationManager.putLong()/[android] vpn offer name fix, remote vpn offer config/"
,,0.1228,Frostwire,[android] fix context leak in UniversalScanner/[android] fix of context leak in prepareOnMediaScannerConnectedRunnable/[android] using execute instead of submit to avoid unused creation of Future objects/
,,0.0824,Frostwire,"[android] removed problematic and inconsistent seed check, now that we are using DHT in mobile networks This should match better the results in desktop./"
,,0.0665,Frostwire,[android] making inner DialogButtonClickListener inner to the DialogFragment and no static (no context leak problem here)/
,,0.2967,Frostwire,"[android] move updateNavigationMenu() call out of setupDrawer() avoid possible infinite loop/[android] MainActivity update system fixes Made BroadcastReceivers static classes with weak references to activity to avoid any possible memory leaks Persist an updateAvailable boolean state to update nav menu with upgrade icon notification. updateNavigationMenu(bool) check is also done when instantiating a new nav menu cleaned constructor of unnecessary ""this."" notation rearranged member declarations, simpler (smaller sized) types to the top/[android/bugfix] issue that showed first ad ever way too soon/[android] issue 594, shows transfer while fetching torrent (#596) Also, when transfers are removed the transfer list is now refreshed immediatly./[android] using execute instead of submit to avoid unused creation of Future objects/[android] Fix onResume interstitial display bug when app was minimized/[android] avoid back to back interstitials/[android] MainActivity.hideFragments() Issue dont crash if weaker transaction commit fails. Looking at Androids souce code it seems the IllegalStateException will occur if the BackStackRecord.mCommitted property has already been set to true. This makes me wonder if this happens because this hideFragments() call is being called concurrently as the real source of the bug/[android] Less interstitial ads MainActivity and Search interstitials now share the same timestamp, this way we avoid all possibility of back to back interstitials/"
,,0.0717,Frostwire,[android] Issue ImageViewerActivity: Swipe to the next/previous picture (#612)/
,,0.0865,Frostwire,"[android] vpn offer name fix, remote vpn offer config/"
,,0.0737,Frostwire,[android] Issue ImageViewerActivity: Swipe to the next/previous picture (#612)/
,,0.0778,Frostwire,[android] Issue ImageViewerActivity: Swipe to the next/previous picture (#612)/
,,0.1316,Frostwire,[android] bugfix: resume audio playback in case interstitial takes audio focus/
,,0.3961,Frostwire,"[android] avoid context leak in RecentFragment/[WIP] Setting up correclty strings to empty fragments (#641) * [WIP] Setting up correclty strings to empty fragments * Adding default fragment empty message with a field * Removed getString method call by suggestion. Fixing the string empty value for RecentFragment./[android/issue-637] Showing songs instead of albums in recent player tab (#638) * [android][WIP] issue 637 Showing song instead of albums in recent player tab * [WIP] Code compiles. Having problems with closing a cursor. * [WIP] Project compiles. Add songs to the Recent Fragment and plays as expected. Need more work to put song related information on screen * [WIP] Changes to save track duration correctly * [WIP] Fixes in RecentSongLoader * [WIP] Reusing existent interface to get song field names * [WIP] Adding licenses and cleaning up * [WIP] Removing unnecessary classes to save some symbols. RecentSongLoader removed, all the functionality was added to RecentLoader. RecentSongStore class removed, all funcionality was added to RecentStore * [WIP] Removed BaseSongFragment. RecentFragment inherits from ApolloFragment directly. Removed menu for View as in Recent tab * Removed getLastSongForArtist because isnt used * [WIP] Cleaning up * More cleaning. Updating docstring * [WIP] choosing a better name for last time played column. * Minor Fixes requested by * [WIP] Calling restartLoader using force equals in order to update the Recent list without reload the Fragment * [WIP] Almost there, fixing odd behavior in Recent List * [android] lambda refactor, NPE checks on SongAdapter * exec improvements. reloading data in a different thread./"
,,0.4181,Frostwire,"[android/issue-637] Showing songs instead of albums in recent player tab (#638) * [android][WIP] issue 637 Showing song instead of albums in recent player tab * [WIP] Code compiles. Having problems with closing a cursor. * [WIP] Project compiles. Add songs to the Recent Fragment and plays as expected. Need more work to put song related information on screen * [WIP] Changes to save track duration correctly * [WIP] Fixes in RecentSongLoader * [WIP] Reusing existent interface to get song field names * [WIP] Adding licenses and cleaning up * [WIP] Removing unnecessary classes to save some symbols. RecentSongLoader removed, all the functionality was added to RecentLoader. RecentSongStore class removed, all funcionality was added to RecentStore * [WIP] Removed BaseSongFragment. RecentFragment inherits from ApolloFragment directly. Removed menu for View as in Recent tab * Removed getLastSongForArtist because isnt used * [WIP] Cleaning up * More cleaning. Updating docstring * [WIP] choosing a better name for last time played column. * Minor Fixes requested by * [WIP] Calling restartLoader using force equals in order to update the Recent list without reload the Fragment * [WIP] Almost there, fixing odd behavior in Recent List * [android] lambda refactor, NPE checks on SongAdapter * exec improvements. reloading data in a different thread./"
,,0.0724,Frostwire,[android] FileUriExposedException for SDK >= 24 fixed when sharing a screenshot of music player/
,,0.3998,Frostwire,"[android] dont crash if FavoritesStore, RecentStore constructors fail on SQLiteException/[android/issue-637] Showing songs instead of albums in recent player tab (#638) * [android][WIP] issue 637 Showing song instead of albums in recent player tab * [WIP] Code compiles. Having problems with closing a cursor. * [WIP] Project compiles. Add songs to the Recent Fragment and plays as expected. Need more work to put song related information on screen * [WIP] Changes to save track duration correctly * [WIP] Fixes in RecentSongLoader * [WIP] Reusing existent interface to get song field names * [WIP] Adding licenses and cleaning up * [WIP] Removing unnecessary classes to save some symbols. RecentSongLoader removed, all the functionality was added to RecentLoader. RecentSongStore class removed, all funcionality was added to RecentStore * [WIP] Removed BaseSongFragment. RecentFragment inherits from ApolloFragment directly. Removed menu for View as in Recent tab * Removed getLastSongForArtist because isnt used * [WIP] Cleaning up * More cleaning. Updating docstring * [WIP] choosing a better name for last time played column. * Minor Fixes requested by * [WIP] Calling restartLoader using force equals in order to update the Recent list without reload the Fragment * [WIP] Almost there, fixing odd behavior in Recent List * [android] lambda refactor, NPE checks on SongAdapter * exec improvements. reloading data in a different thread./"
,,0.0863,Frostwire,"[android] dont crash if FavoritesStore, RecentStore constructors fail on SQLiteException/"
,,0.4382,Frostwire,"[android] dont crash if FavoritesStore, RecentStore constructors fail on SQLiteException/[android] MusicPlaybackService maintenance Avoid possible crash if Power Manager cant be obtained Avoid possible crash obtaining a lock on mFavoritesCache null, do not synchronize non-final objects/[android/issue-637] Showing songs instead of albums in recent player tab (#638) * [android][WIP] issue 637 Showing song instead of albums in recent player tab * [WIP] Code compiles. Having problems with closing a cursor. * [WIP] Project compiles. Add songs to the Recent Fragment and plays as expected. Need more work to put song related information on screen * [WIP] Changes to save track duration correctly * [WIP] Fixes in RecentSongLoader * [WIP] Reusing existent interface to get song field names * [WIP] Adding licenses and cleaning up * [WIP] Removing unnecessary classes to save some symbols. RecentSongLoader removed, all the functionality was added to RecentLoader. RecentSongStore class removed, all funcionality was added to RecentStore * [WIP] Removed BaseSongFragment. RecentFragment inherits from ApolloFragment directly. Removed menu for View as in Recent tab * Removed getLastSongForArtist because isnt used * [WIP] Cleaning up * More cleaning. Updating docstring * [WIP] choosing a better name for last time played column. * Minor Fixes requested by * [WIP] Calling restartLoader using force equals in order to update the Recent list without reload the Fragment * [WIP] Almost there, fixing odd behavior in Recent List * [android] lambda refactor, NPE checks on SongAdapter * exec improvements. reloading data in a different thread./"
,,0.4023,Frostwire,"[android/issue-637] Showing songs instead of albums in recent player tab (#638) * [android][WIP] issue 637 Showing song instead of albums in recent player tab * [WIP] Code compiles. Having problems with closing a cursor. * [WIP] Project compiles. Add songs to the Recent Fragment and plays as expected. Need more work to put song related information on screen * [WIP] Changes to save track duration correctly * [WIP] Fixes in RecentSongLoader * [WIP] Reusing existent interface to get song field names * [WIP] Adding licenses and cleaning up * [WIP] Removing unnecessary classes to save some symbols. RecentSongLoader removed, all the functionality was added to RecentLoader. RecentSongStore class removed, all funcionality was added to RecentStore * [WIP] Removed BaseSongFragment. RecentFragment inherits from ApolloFragment directly. Removed menu for View as in Recent tab * Removed getLastSongForArtist because isnt used * [WIP] Cleaning up * More cleaning. Updating docstring * [WIP] choosing a better name for last time played column. * Minor Fixes requested by * [WIP] Calling restartLoader using force equals in order to update the Recent list without reload the Fragment * [WIP] Almost there, fixing odd behavior in Recent List * [android] lambda refactor, NPE checks on SongAdapter * exec improvements. reloading data in a different thread./"
,,0.0724,Frostwire,[android] dont fail silently. avoid context leak on thread/
,,0.066,Frostwire,"[android] refactor of register/unregister code, avoid creation of IntentFilter on each resume/"
,,0.0639,Frostwire,"[android] minor cleanups, npe prevention, lambda refactors/"
,,0.0895,Frostwire,[android] attempt to fix the ANR caused by io.presage.receiver.NetworkChangeReceiver/
,,0.0673,Frostwire,[desktop] NPE on transfer click/
,,0.0828,Frostwire,[desktop] removed non-functional (and completely broken code) related notifications display/
,,0.1472,Frostwire,"[android] Adjustments in BTEngine.instance() and stop() Cannot set a timeout when waiting for the context. Tests with 1 minute show how this can cause breakage elsewhere. Behaves well otherwise, nothing locks the UI thread and those that need the BTEngine instance will happily wait. Only throw illegal state if you cant find a context and youre supposed to be running. Otherwise it means you never really started and you shouldnt complain about not having the context. Override stop() to make sure that all pending threads waiting for a latch can be released and shutdown happens properly WHEN were stopped prematurely. e.g. quick open and exit case./"
,,0.11199999999999999,Frostwire,"[android] avoid wrong thread exception, adapter.notifyDataSetChanged must occur in the UI thread/[android] Issue ANR on ApolloFragment.onSongItemClick fixed/"
,,0.1204,Frostwire,[android] more mopub fixes/[android] NPE on AudioPlayerActivity.onPrepareOptionsMenu/[android] Avoid possible NPE taking screenshot/[android] Apollo ImageFetcher NPE protections/
,,0.0599,Frostwire,[android] NPE on ProfileActivity onPrepareOptionsMenu/
,,0.0865,Frostwire,[android] Apollo ImageFetcher NPE protections/
,,0.1738,Frostwire,"[android] crash fix closing notification player, refactor, FIXME note/[android] Android Oreo(8) notification issues fixed/[android] Notifications work on Android 8.0 Issue apollo NotificationHelper fixes remove unused parameter remove unnecessary final keyword catch possible IllegalArgumentException exception on service.startForefound/"
,,0.2902,Frostwire,"[android] NPE on MusicPlaybackService albumArt can be null/[android] capture IllegalStateException in MusicPlaybackService#openFile/[android] bug fix, notification music player goes away when music fully stopped on miniplayer thanks Android Oreo(8) notification issues fixed/[android] NPE on MusicPlaybackService.initNextMediaPlayer/[android] NPE on MusicPlayer::playSimple/[android] apollo NotificationHelper fixes remove unused parameter remove unnecessary final keyword catch possible IllegalArgumentException exception on service.startForefound/[android] catch NPE from android/[android] build 509. VPN Page fixes One more MusicPlaybackService recentsStoreAddSongIdTask async cleanup build 509 Adjusted view_vpn_status_detail to look good all the way down to 3.7 screens removed unused old vpn strings All Wi-Fi strings are now spelled uniformly Fixed VPN copy, more concise, no etcs, brought back Privacy is a fundamental human right Renamed VPN constants to denote that they represent urls with _URL suffixes SoftwareUpdater cleanup Click listeners turned to lambdas on VPNStatusDetailActivity Updated date in license header to 2018/[android] IndexOutOfBounds exception on MusicPlaybackService.getNextPosition/[android] array out of bounds exception getting next song in shuffle mode aparently theres a possibility for mHistory to change its size during those iterations, to avoid the issue Ive made a copy of it and iterate over the copy/[android] Prevent ArrayIndexOutofBounds error on MusicPlaybackService::addToPlayList/"
,,0.35700000000000004,Frostwire,"[android] Simplifications PrebidInitializer renamed to PrebidManager PrebidManager no longer has background initialization, unnecessary as it performs expensive network IO on its internal executor PrebidManager.Placement enums created AdUnits also added to Map<Placement, AdUnit> to quickly obtain ad unit based on placement at bidding attachment time Added mock sizes to test ad units Caught Mopub error on which receiver leak warning would not allow for banner to be inflated. We attempt destroying the listener and re-inflating (still not convinced this will help, might revert soon, looking for the cause of the error)/[android] refactor prebid onBanner<Load|Failed> integration to a single liner/[android] SearchHeaderBanner listener onBannerFailed prebid logic/[android] PreBid integration on Search Header Banner Also NPE protection before inflating search header banner view/"
,,0.3183,Frostwire,"[android] Simplifications PrebidInitializer renamed to PrebidManager PrebidManager no longer has background initialization, unnecessary as it performs expensive network IO on its internal executor PrebidManager.Placement enums created AdUnits also added to Map<Placement, AdUnit> to quickly obtain ad unit based on placement at bidding attachment time Added mock sizes to test ad units Caught Mopub error on which receiver leak warning would not allow for banner to be inflated. We attempt destroying the listener and re-inflating (still not convinced this will help, might revert soon, looking for the cause of the error)/[android] Offers.forceDisabledAds optimization Only stop ad networks if you started them in the first place./"
,,0.1042,Frostwire,"[android] crash fix closing notification player, refactor, FIXME note/"
,,0.2398,Frostwire,"[android] build 509. VPN Page fixes One more MusicPlaybackService recentsStoreAddSongIdTask async cleanup build 509 Adjusted view_vpn_status_detail to look good all the way down to 3.7 screens removed unused old vpn strings All Wi-Fi strings are now spelled uniformly Fixed VPN copy, more concise, no etcs, brought back Privacy is a fundamental human right Renamed VPN constants to denote that they represent urls with _URL suffixes SoftwareUpdater cleanup Click listeners turned to lambdas on VPNStatusDetailActivity Updated date in license header to 2018/[android] SoftwareUpdater scope reduction fix No need for casts when you pass the right parameter. Reduced from Context to MainActivity, this class is only used by MainActivity. Refactored use of UIUtil yes no dialog to pass the MainActivitys FragmentManager/"
,,0.3221,Frostwire,"[android] IllegalArgument exception fix/[android] Issue When audio files are deleted from My Files theyre cleared from Recents in My Music We make sure all deletion logic occurs in a background thread, including the adapters internal collections are modified in the background AbstractListAdapters addItem(item) and deleteItem(item) methods only call notifyDataSetChanged() if on the main thread. This way we can call addItem or deleteItem from a background thread multiple times without trying to communicate with main thread and then we can invoke adapter.notifyDataSetChanged() once on the main thread when were finished License header updates Librarian.deleteFiles() uses MusicUtils.deleteTracks() if the files passed are audio files MusicUtils.deleteTracks() had a bug where it tried to delete the Recents cache using the wrong data field, I believe this is because in the past Recents would display Recent albums, not recent tracks./"
,,0.0814,Frostwire,[android] Issue Dont hog the main thread checking SD permissions on resume/
,,0.4096,Frostwire,"[android] possible NPE on Android 4.4 (MainActivity.onKeyDown)/[android] MainActivity cleanup Dice roll refactor to use UIUtils.diceRollPassesThreshold NPE warnings fixed Removed TODO/[android] IllegalStateException on MainActivity.switchContent/[android] Context leak at com.frostwire.android.gui.MainApplication.onCreateSafe(MainApplication.java:102)/[android] possible NPE on MainActivity.refreshTransfers The startActivity() call begins, but somewhere deep inside ViewGroup.java it can throw an NPE. My guess is that this can happen at a moment in time while the activity is being destroyed. Rare crash./[android] catch possible IllegalStateException showing SD permission dlg/[android] Issue When audio files are deleted from My Files theyre cleared from Recents in My Music We make sure all deletion logic occurs in a background thread, including the adapters internal collections are modified in the background AbstractListAdapters addItem(item) and deleteItem(item) methods only call notifyDataSetChanged() if on the main thread. This way we can call addItem or deleteItem from a background thread multiple times without trying to communicate with main thread and then we can invoke adapter.notifyDataSetChanged() once on the main thread when were finished License header updates Librarian.deleteFiles() uses MusicUtils.deleteTracks() if the files passed are audio files MusicUtils.deleteTracks() had a bug where it tried to delete the Recents cache using the wrong data field, I believe this is because in the past Recents would display Recent albums, not recent tracks./[android] Issue Dont hog the main thread checking SD permissions on resume/"
,,0.0819,Frostwire,[android] avoid calling async when just a post (its delayed) is used in refreshMenuRemoveAdsItem/[android] CalledFromWrongThreadException crash on NavigationMenu.refreshMenuRemoveAdsItem/
,,0.1719,Frostwire,"[android] build 509. VPN Page fixes One more MusicPlaybackService recentsStoreAddSongIdTask async cleanup build 509 Adjusted view_vpn_status_detail to look good all the way down to 3.7 screens removed unused old vpn strings All Wi-Fi strings are now spelled uniformly Fixed VPN copy, more concise, no etcs, brought back Privacy is a fundamental human right Renamed VPN constants to denote that they represent urls with _URL suffixes SoftwareUpdater cleanup Click listeners turned to lambdas on VPNStatusDetailActivity Updated date in license header to 2018/"
,,0.3269,Frostwire,"[android] Issue When audio files are deleted from My Files theyre cleared from Recents in My Music We make sure all deletion logic occurs in a background thread, including the adapters internal collections are modified in the background AbstractListAdapters addItem(item) and deleteItem(item) methods only call notifyDataSetChanged() if on the main thread. This way we can call addItem or deleteItem from a background thread multiple times without trying to communicate with main thread and then we can invoke adapter.notifyDataSetChanged() once on the main thread when were finished License header updates Librarian.deleteFiles() uses MusicUtils.deleteTracks() if the files passed are audio files MusicUtils.deleteTracks() had a bug where it tried to delete the Recents cache using the wrong data field, I believe this is because in the past Recents would display Recent albums, not recent tracks./"
,,0.345,Frostwire,"[android] Android Oreo(8) notification issues fixed/[android] Notifications work on Android 8.0 Issue EngineService async refactors, no warnings. ResumeBTEngine async refactor Component enabling async refactor Notification cancellation async refactor Permanent Notification Updates start async refactor null checks syncrhonization on local variable warning fixed/[android] compilation fix/[android] One last ANR on EngineService.onStartCommand and fixes Moved the start of the NotificationUpdateDemon to a background thread, it was the only ANR coming out of here with the last build. Since shutdownSupport is already a background thread no need to spawn more subthreads for component disable and NotificationCanceller Added some try/catch protections on all those methods to avoid unexpected crashes during startup/shutdown/[android] Cancel All Notifications refactor on EngineService When starting the app the main thread could be held gettings the notification system service, which in android 7 has the possibility of a security exception (catched already), then all notifications are asked to be cancelled. This code was repeated also when shutting down, also on the main thread This has now been moved to a background runnable to make startup and shutdown faster to the user./[android] ConfigurationManager fixes. 1. There should be only a single call to ConfigurationManager.create(Application) My theory is that ConfigurationManager.preferences was null because PreferenceManager.getDefaultSharedPreferences(Context context) was failing in the case where somehow EngineService was the one calling ConfigurationManager.create(getApplication() invalid object here) The correct place for that call is on MainApplication.onCreate(), now theres only one call 2. ConfigurationManager getter methods now throw IllegalStateException if the preferences property is null, the application simply cant work without this, dont hide errors 3. Moved BTEngineInitializer thread a bit later in case too early of an initialization was causing the NPE issue on the ConfigurationManager (doubt it but it doesnt hurt to move it after Engine.instance().onApplicationCreate/[android] typo on EngineService debug output/[android] dont stop what hasnt started Thanks ANR on EngineService components startup Issue"
,,0.1519,Frostwire,"[desktop] transfer tab fixes Transfer Tab components were not taking all vertical space available on big screens Added new Hide button on Transfer Details, will turn it into an icon based button next/[desktop] last 2 usability bugs with transfers fixed It will correctly scroll to the last selected transfer after the details component is shown It will not wait for the next refresh to update the details component the first time its shown/"
,,0.063,Frostwire,[desktop] NPE fixed on LibraryPlaylists.refresh()/
,,0.1085,Frostwire,"[desktop] transfer tab fixes Transfer Tab components were not taking all vertical space available on big screens Added new Hide button on Transfer Details, will turn it into an icon based button next/"
,,0.3177,Frostwire,"[desktop] added code to stop the refresh timer during the shutdown/[desktop] New: Send Feedback Dialog * [issue-632] Adding Send Feedback Dialog * [issue-632]Adding Send Feedback Dialog * [desktop] temp * [desktop][issue-632] Adding Send Feedback action * [desktop][issue-632] Updated endpoint * [desktop][issue-632] warning fixes * [desktop][issue-632] Adding Your Name field to SendFeedback Dialog * [desktop][issue-632] Adding validations to Dialog * [desktop][issue-632] improvements to Send Feedback Dialog * [desktop][issue-632] misc fixes & refactors * [desktop][issue-632] system info output in HTML or not * [desktop][issue-632] Feedback interval to 5 mins, make sure user can copy & paste long messages and layout doesnt break * [desktop] cleanup/"
,,0.3064,Frostwire,"[desktop] New: Send Feedback Dialog * [issue-632] Adding Send Feedback Dialog * [issue-632]Adding Send Feedback Dialog * [desktop] temp * [desktop][issue-632] Adding Send Feedback action * [desktop][issue-632] Updated endpoint * [desktop][issue-632] warning fixes * [desktop][issue-632] Adding Your Name field to SendFeedback Dialog * [desktop][issue-632] Adding validations to Dialog * [desktop][issue-632] improvements to Send Feedback Dialog * [desktop][issue-632] misc fixes & refactors * [desktop][issue-632] system info output in HTML or not * [desktop][issue-632] Feedback interval to 5 mins, make sure user can copy & paste long messages and layout doesnt break * [desktop] cleanup/"
,,0.1315,Frostwire,[android] Fix empty message for playlist detailed view (#721) * [android] Fix empty message for playlist detailed view * [android] Changing empty text for PlaylistSongFragment * [android] Cleaning up imports. Using the default constructor/
,,0.188,Frostwire,[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./[android] Fix empty message for playlist detailed view (#721) * [android] Fix empty message for playlist detailed view * [android] Changing empty text for PlaylistSongFragment * [android] Cleaning up imports. Using the default constructor/
,,0.1569,Frostwire,[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./
,,0.1589,Frostwire,[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./
,,0.4652,Frostwire,"[android] NPE on AudioPlayer.onPrepareOptionsMenu (equalizer)/[android] NPE sharing curring track fixed/[android] logic fix for plus/[android] Dont show interstitial when leaving AudioPlayerActivity Despite attempts to fix the issue with some media interstitials hijacking the audio, they still occur as I witnessed today during a run while I dismissed the audio player screen. To avoid annoying users with this no interstitials should be played if the user dismisses the screen and music is being played/[android] dont stop music playback on applovin video ads indentation also/[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/"
,,0.2869,Frostwire,"[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/"
,,0.1647,Frostwire,[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./
,,0.1772,Frostwire,[android] NPE protections/[android] Fixes Illegal arg exception on random.nextInt()/[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./
,,0.155,Frostwire,[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./
,,0.1589,Frostwire,[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./
,,0.1181,Frostwire,[android] dont stop music playback on applovin video ads indentation also/
,,0.1161,Frostwire,[android] dont stop music playback on applovin video ads indentation also/
,,0.3134,Frostwire,"[android] MoPub initialization Add a starting state to avoid redundant calls to MopPub.initializeSdk Dont try to initialize if you received a null activity. There are still issues with MoPub 5.2.0 initialization, a lot of times that initialization just never finishes./[android] dont stop music playback on applovin video ads indentation also/[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/"
,,0.11199999999999999,Frostwire,"[android] using internal PrebidManager application context in calls to attachBids. It happens that although not documented, the context in attachBids is used in multiple places internally, and a context leak is possible if its not an application context./"
,,0.2369,Frostwire,"[android] fixed compilation issue/[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/"
,,0.228,Frostwire,"[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/"
,,0.0951,Frostwire,"[android] fixed connection type string in peers details/[desktop/android] crash fix getting peer client name, thanks compilation fix/[desktop/android] crash fix getting peer client name, thanks compilation fix/"
,,0.2793,Frostwire,"[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/[android] fixed context leak related to mopub view destroy in MainActivity/"
,,0.2197,Frostwire,"[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/"
,,0.1118,Frostwire,"[android] Fixes Illegal arg exception on random.nextInt()/[android] LocalSearchEngine.instance() refactor A refactor to avoid a rare NPE getting the instance, also should slightly improve app startup time. Removes LocalSearchEngine.onCreate() LocalSearchEngine.instance() should never return null, uses synchronization only once in most cases and in the rare event it will somehow be called at the same time during startup. The bug probably existed because instance() was somehow being called before MainApplication.onCreate()/"
,,0.2668,Frostwire,"[android] avoid crash on KitKat showing mopub banner/[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/"
,,0.2264,Frostwire,"[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/"
,,0.2247,Frostwire,"[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/"
,,0.08,Frostwire,[android] avoid display of BuyActivity with no data from local Play Store cache/
,,0.3083,Frostwire,"[android] Fixes freeze loading GDPR consent dialog cleanup, formatting/[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/[android] fixed context leak related to mopub view destroy in MainActivity/"
,,0.2164,Frostwire,"[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/"
,,0.0865,Frostwire,[android] NPE protections/
,,0.122,Frostwire,[android] dont stop music playback on applovin video ads indentation also/
,,0.0765,Frostwire,[desktop] NPE fix on search result click/
,,0.233,Frostwire,"[android] ANR fix on loadMopubInterstitial/[android] AdMob loading fixed/[android] simplification, cleanup, no need to stop ad-network No need to stop ad-network when interstitial has been marked for shutdown upon dismissed. for one, we no longer show interstitials on the way out, and second, we should do the network shutdown logic on MainActivity.shutdown() and thats not to be the case anymore/[android] hack to workaround the use of AsyncTask.SERIAL_EXECUTOR inside MoPub initialization/"
,,0.3316,Frostwire,"[android] Prebid instantiation can fail, protect MoPub banner dispatchers found: 08-07 15:56:37.631 29218 29218 I PrebidManager: Creating PrebidManager singleton 08-07 15:56:37.632 29218 29218 I Prebid : Initializing with a list of AdUnits 08-07 15:56:37.634 29218 29218 W System.err: org.prebid.mobile.core.PrebidException: Unable to instantiating the adapter. 08-07 15:56:37.636 29218 29218 W System.err: at org.prebid.mobile.core.Prebid.init(Prebid.java:141) 08-07 15:56:37.636 29218 29218 W System.err: at com.frostwire.android.offers.PrebidManager.initializePrebid(PrebidManager.java:186) 08-07 15:56:37.636 29218 29218 W System.err: at com.frostwire.android.offers.PrebidManager.<init>(PrebidManager.java:107) 08-07 15:56:37.636 29218 29218 W System.err: at com.frostwire.android.offers.PrebidManager.getInstance(PrebidManager.java:84) 08-07 15:56:37.636 29218 29218 W System.err: at com.frostwire.android.offers.Offers.initAdNetworks(Offers.java:79) 08-07 15:56:37.636 29218 29218 W System.err: at com.frostwire.android.gui.activities.MainActivity.onResume(MainActivity.java:355) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.Instrumentation.callActivityOnResume(Instrumentation.java:1361) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.Activity.performResume(Activity.java:7344) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.performResumeActivity(ActivityThread.java:3763) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.handleResumeActivity(ActivityThread.java:3828) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3036) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.-wrap11(Unknown Source:0) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.handleMessage(ActivityThread.java:1696) 08-07 15:56:37.636 29218 29218 W System.err: at android.os.Handler.dispatchMessage(Handler.java:105) 08-07 15:56:37.636 29218 29218 W System.err: at android.os.Looper.loop(Looper.java:164) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.main(ActivityThread.java:6938) 08-07 15:56:37.636 29218 29218 W System.err: at java.lang.reflect.Method.invoke(Native Method) 08-07 15:56:37.636 29218 29218 W System.err: at com.android.internal.os.Zygote.run(Zygote.java:327) 08-07 15:56:37.636 29218 29218 W System.err: at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1374)/"
,,0.4216,Frostwire,"[android] note after onBannerFailed manual reload experiment/[android] MopubBannerView repairs Avoid ANRs, dont perform banner load on main thread Support for fallback banner loaded/dismissed listeners Dont use the banner onLoadListener after you load the fallback banner Do not destroy the banner onLoadFailed otherwise further banners cannot be loaded No need to keep reloading the fallback banner over and over onDismissBannerOnClickListener refactor and use of possibly given banner and fallback banner dismissed listeners used/[android] Prebid instantiation can fail, protect MoPub banner dispatchers found: 08-07 15:56:37.631 29218 29218 I PrebidManager: Creating PrebidManager singleton 08-07 15:56:37.632 29218 29218 I Prebid : Initializing with a list of AdUnits 08-07 15:56:37.634 29218 29218 W System.err: org.prebid.mobile.core.PrebidException: Unable to instantiating the adapter. 08-07 15:56:37.636 29218 29218 W System.err: at org.prebid.mobile.core.Prebid.init(Prebid.java:141) 08-07 15:56:37.636 29218 29218 W System.err: at com.frostwire.android.offers.PrebidManager.initializePrebid(PrebidManager.java:186) 08-07 15:56:37.636 29218 29218 W System.err: at com.frostwire.android.offers.PrebidManager.<init>(PrebidManager.java:107) 08-07 15:56:37.636 29218 29218 W System.err: at com.frostwire.android.offers.PrebidManager.getInstance(PrebidManager.java:84) 08-07 15:56:37.636 29218 29218 W System.err: at com.frostwire.android.offers.Offers.initAdNetworks(Offers.java:79) 08-07 15:56:37.636 29218 29218 W System.err: at com.frostwire.android.gui.activities.MainActivity.onResume(MainActivity.java:355) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.Instrumentation.callActivityOnResume(Instrumentation.java:1361) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.Activity.performResume(Activity.java:7344) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.performResumeActivity(ActivityThread.java:3763) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.handleResumeActivity(ActivityThread.java:3828) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3036) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.-wrap11(Unknown Source:0) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.handleMessage(ActivityThread.java:1696) 08-07 15:56:37.636 29218 29218 W System.err: at android.os.Handler.dispatchMessage(Handler.java:105) 08-07 15:56:37.636 29218 29218 W System.err: at android.os.Looper.loop(Looper.java:164) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.main(ActivityThread.java:6938) 08-07 15:56:37.636 29218 29218 W System.err: at java.lang.reflect.Method.invoke(Native Method) 08-07 15:56:37.636 29218 29218 W System.err: at com.android.internal.os.Zygote.run(Zygote.java:327) 08-07 15:56:37.636 29218 29218 W System.err: at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1374)/"
,,0.2728,Frostwire,"[android] dont crash if adnetwork fails initialization/[android] NPE issue with FWVibrator/[android] simplification, cleanup, no need to stop ad-network No need to stop ad-network when interstitial has been marked for shutdown upon dismissed. for one, we no longer show interstitials on the way out, and second, we should do the network shutdown logic on MainActivity.shutdown() and thats not to be the case anymore/[android] possible bug: dont stop network on finish activity/"
,,0.154,Frostwire,"[android] fixes issue where transfers wouldnt appear right away The old adapter instance kept coming back with 0 transfers for about 30 seconds. On destroy lets make sure the adapter reference is removed, next time the fragment is created a new adapter is created and it works right away when restoring a session from exit. perhaps the adapter should have a way to clear its inner lists adapter.onDestroy() ?/"
,,0.1121,Frostwire,[android] NPE issue with FWVibrator/[android] try to fix context leak related to mopub promotions view destroy/
,,0.2822,Frostwire,"[android] simplification, cleanup, no need to stop ad-network No need to stop ad-network when interstitial has been marked for shutdown upon dismissed. for one, we no longer show interstitials on the way out, and second, we should do the network shutdown logic on MainActivity.shutdown() and thats not to be the case anymore/[android] try to fix context leak related to mopub promotions view destroy/"
,,0.2279,Frostwire,"[android] simplification, cleanup, no need to stop ad-network No need to stop ad-network when interstitial has been marked for shutdown upon dismissed. for one, we no longer show interstitials on the way out, and second, we should do the network shutdown logic on MainActivity.shutdown() and thats not to be the case anymore/"
,,0.08800000000000001,Frostwire,"[android] dont crash, just warn, this can happen now that its async/[android] NoSuchMethodError caught in ImageLoader.calculateDiskSize can occur in very old Android 4.2 now that weve upped the target/"
,,0.1179,Frostwire,[android] revert async mopubBannerView.loadMoPubBanner call when view was destroyed not being on the main thread would cause the app to crash/[android] fix ANR on PromotionsAdapter loading mopub view/
,,0.11599999999999999,Frostwire,[android] revert async mopubBannerView.loadMoPubBanner call when view was destroyed not being on the main thread would cause the app to crash/[android] fix ANR on PromotionsAdapter loading mopub view/
,,0.0723,Frostwire,"[desktop] more deprecation fixes, NPE catches, cleanup/"
,,0.0681,Frostwire,"[desktop] more deprecation fixes, NPE catches, cleanup/"
,,0.0702,Frostwire,"[desktop] more deprecation fixes, NPE catches, cleanup/"
,,0.0681,Frostwire,"[desktop] more deprecation fixes, NPE catches, cleanup/"
,,0.0945,Frostwire,"[android] b585. Fixes promos url parameter passing, other promo display on androdi issue/"
,,0.0717,Frostwire,"[desktop] azureus debug code cleanup/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.0872,Frostwire,"[desktop] azureus debug code cleanup/[desktop] java7 explicit types fix/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.0772,Frostwire,[android] Fixes issue fixes on EngineService startup/shutdown/
,,0.0673,Frostwire,[android] purchase flow bug on new billing sdk fixed/
,,0.0673,Frostwire,[android] fixes on EngineService startup/shutdown/
,,0.0764,Frostwire,[desktop] make sure SC.getDownloadURL() never happens on main thread other fixes for copy paste url downloads/
,,0.1424,Frostwire,"[desktop] Fixes issues w/NetworkInterfacePanelItem, startBittorrentCore fixes Code to select network interfaces and port in Initializer.startBittorrentCore() and NetworkInterfacePanelItem.applyOptions() refactored to avoid code repetition. A crash and a on NetworkInterfacePanelItem.applyOptions() prevented FrostWire from saving the preferred network interface NetworkInterfacePanelItem now shows the network interfaces that make sense. Excludes localLink addresses, loopback or other ineligible network interfaces. RouterConfigurationPaneItem port range picking refactored org.limewire.util.NetworkUtils gets new functions public static int getPortInRange(boolean useManualRange, int defaultPort0, int defaultPort1, int manualPort0, int manualPort1) public static String getLibtorrentFormattedNetworkInterface(boolean useCustomNetworkInterface, String defaultInetAddress, String customInetAddress, final int port) public static boolean isLinkLocal(Address address)/"
,,0.0784,Frostwire,[desktop] make sure SC.getDownloadURL() never happens on main thread other fixes for copy paste url downloads/
,,0.0823,Frostwire,[desktop] make sure SC.getDownloadURL() never happens on main thread other fixes for copy paste url downloads/
,,0.0954,Frostwire,[android] fixes issue where it appeared as if there were no search results The LocalSearchEngineListener would lose its SearchFragment reference and wasnt able to report results on ocassions/
,,0.4703,Frostwire,"[android] Major MusicPlaybackService overhaul The most important playback issues are gone, playback continues through playlist, repeat modes work Theres still a glitch on the very first song played, gotta hit play again, will fix Now MusicPlaybackService is supposed to receive all of its background calls, or perhaps, all calls routed through its MusicPlayerHandler Thread/Loop. If all calls are routed through this queue, there should be no need to synchronize any resource and there should be no unexpected behaviors. No more expensive synchronized blocks, no more deadlocks. synchronized is evil. Also, no more anonymous callbacks, or nested callbacks. Since everything is done on the background and it doesnt block the UI thread, all methods that used to receive callbacks now return boolean, true for sucess, false for failure, usually on success callbacks are acted upon. Some callbacks used to get boolean results, its now very functional or a la go-lang, keep it simple stupid. anonymous callbacks, dynamic runnables and lambdas are also hard to debug/trace, its perhaps a bit more verbose but its clean and easy to read in stack traces and to step through in the debugger. Still a lot more to fix: album art not loading properly in song adapter or music activity/"
,,0.0798,Frostwire,"[android] Save to playlist fixed, build 624/"
,,0.2159,Frostwire,"[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/"
,,0.6374,Frostwire,"[android] array out of bounds issue adding uiTransfer to TransferManager, mopub banner on basic home/[android] Major MusicPlaybackService overhaul The most important playback issues are gone, playback continues through playlist, repeat modes work Theres still a glitch on the very first song played, gotta hit play again, will fix Now MusicPlaybackService is supposed to receive all of its background calls, or perhaps, all calls routed through its MusicPlayerHandler Thread/Loop. If all calls are routed through this queue, there should be no need to synchronize any resource and there should be no unexpected behaviors. No more expensive synchronized blocks, no more deadlocks. synchronized is evil. Also, no more anonymous callbacks, or nested callbacks. Since everything is done on the background and it doesnt block the UI thread, all methods that used to receive callbacks now return boolean, true for sucess, false for failure, usually on success callbacks are acted upon. Some callbacks used to get boolean results, its now very functional or a la go-lang, keep it simple stupid. anonymous callbacks, dynamic runnables and lambdas are also hard to debug/trace, its perhaps a bit more verbose but its clean and easy to read in stack traces and to step through in the debugger. Still a lot more to fix: album art not loading properly in song adapter or music activity/[android] Fixes issue where player would stop at the end of a song MusicPlaybackService is now decoupled from Asyncs.async/EngineThreadPool Do not compromise the performance of search and download when using the music player. Sending all background requests to a single HandlerThread in MusicPlaybackService makes things a lot simpler, less chances for race conditions if all requests are executed in the order theyre requested given all the synchronized blocks we inherited from Apollos codebase More fine grained intervals when notifying music player changes, depending on the change being notified There are still glitches with Repeat song mode, this code is full of overcomplexities that are hard to track down. My Music / Art Albums not loading Started debugging and doing a few fixes, album art isnt loading correctly for some reason/[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/[android] NPE that could happen if mMopubBannerView wasnt created due to ad removal/[android] NPE on AudioPlayer, logic fix dont abort banner initialization if player is paused and hasnt reached the minimum seconds to load the ad, player is paused.../[android] crash only if on debug build/[android] async AudioPlayerActivity::updateLastKnown can optionally callback AudioPlayerActivity::onLastKnownUpdatePostTask when done Fixes bug on which the songs title wasnt updated accordingly/[android] fix double notification issue/"
,,0.4175,Frostwire,"[android] Fixes crash when searching within My Music/[android] avoid issues registering intent receivers Avoid issues that could prevent intent receivers from not being unregistered, in case we still have them, dont crash when you are already registered/[android] Save to playlist fixed, build 624/[android] cleanup and crashes starting music player from my music gone Tested all the way from Android 5.0 to Android 10/[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/"
,,0.3355,Frostwire,"[android] Fixes crash when searching within My Music/[android] cleanup and crashes starting music player from my music gone Tested all the way from Android 5.0 to Android 10/[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/"
,,0.456,Frostwire,"[android] Major MusicPlaybackService overhaul The most important playback issues are gone, playback continues through playlist, repeat modes work Theres still a glitch on the very first song played, gotta hit play again, will fix Now MusicPlaybackService is supposed to receive all of its background calls, or perhaps, all calls routed through its MusicPlayerHandler Thread/Loop. If all calls are routed through this queue, there should be no need to synchronize any resource and there should be no unexpected behaviors. No more expensive synchronized blocks, no more deadlocks. synchronized is evil. Also, no more anonymous callbacks, or nested callbacks. Since everything is done on the background and it doesnt block the UI thread, all methods that used to receive callbacks now return boolean, true for sucess, false for failure, usually on success callbacks are acted upon. Some callbacks used to get boolean results, its now very functional or a la go-lang, keep it simple stupid. anonymous callbacks, dynamic runnables and lambdas are also hard to debug/trace, its perhaps a bit more verbose but its clean and easy to read in stack traces and to step through in the debugger. Still a lot more to fix: album art not loading properly in song adapter or music activity/"
,,0.6729,Frostwire,"[android] add to playlist should happen in handler thread also fixes infinite loop bug/[android] avoid issues registering intent receivers Avoid issues that could prevent intent receivers from not being unregistered, in case we still have them, dont crash when you are already registered/[android] dont crash attempting to register intent receiver on MusicPlaybackService.initService java.lang.IllegalStateException: at android.os.Parcel.createException (Parcel.java:1974) at android.os.Parcel.readException (Parcel.java:1934) at android.os.Parcel.readException (Parcel.java:1884) at android.app.IActivityManager.registerReceiver (IActivityManager.java:3690) at android.app.ContextImpl.registerReceiverInternal (ContextImpl.java:1567) at android.app.ContextImpl.registerReceiver (ContextImpl.java:1528) at android.app.ContextImpl.registerReceiver (ContextImpl.java:1516) at android.content.ContextWrapper.registerReceiver (ContextWrapper.java:636) at com.andrew.apollo.MusicPlaybackService.initService (MusicPlaybackService.java:892) at com.andrew.apollo.MusicPlaybackService.lambda (Unknown Source) at com.andrew.apollo.-57443Lambda.run (Unknown Source:2) at android.os.Handler.handleCallback (Handler.java:873) at android.os.Handler.dispatchMessage (Handler.java:99) at android.os.Looper.loop (Looper.java:214)/[android] Save to playlist fixed, build 624/[android] Major MusicPlaybackService overhaul The most important playback issues are gone, playback continues through playlist, repeat modes work Theres still a glitch on the very first song played, gotta hit play again, will fix Now MusicPlaybackService is supposed to receive all of its background calls, or perhaps, all calls routed through its MusicPlayerHandler Thread/Loop. If all calls are routed through this queue, there should be no need to synchronize any resource and there should be no unexpected behaviors. No more expensive synchronized blocks, no more deadlocks. synchronized is evil. Also, no more anonymous callbacks, or nested callbacks. Since everything is done on the background and it doesnt block the UI thread, all methods that used to receive callbacks now return boolean, true for sucess, false for failure, usually on success callbacks are acted upon. Some callbacks used to get boolean results, its now very functional or a la go-lang, keep it simple stupid. anonymous callbacks, dynamic runnables and lambdas are also hard to debug/trace, its perhaps a bit more verbose but its clean and easy to read in stack traces and to step through in the debugger. Still a lot more to fix: album art not loading properly in song adapter or music activity/[android] Fixes issue where player would stop at the end of a song MusicPlaybackService is now decoupled from Asyncs.async/EngineThreadPool Do not compromise the performance of search and download when using the music player. Sending all background requests to a single HandlerThread in MusicPlaybackService makes things a lot simpler, less chances for race conditions if all requests are executed in the order theyre requested given all the synchronized blocks we inherited from Apollos codebase More fine grained intervals when notifying music player changes, depending on the change being notified There are still glitches with Repeat song mode, this code is full of overcomplexities that are hard to track down. My Music / Art Albums not loading Started debugging and doing a few fixes, album art isnt loading correctly for some reason/[android] MusicPlaybackService encapsulation fixes/[android] Fixes issue creating ephemeral playlist/[android] intent registration crash detected in some android 9s (IllegalState)/[android] fixes after crash reports from 618 relaxed syncrhonization on entire MusicPlaybackService simplifications and cleanups multiplayer got lost (null)/[android] cleanup and crashes starting music player from my music gone Tested all the way from Android 5.0 to Android 10/[android] dont crash if you cant unbind serviceconnection listener on service shutdown/[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/[android] bullet proof access to MusicPlaybackService::mPlayer (rare NPE crash fix attempt/[android] Fixes player notification bug where play/pause button wasnt refreshed on pause/[android] dont sweat Illegal State error onNotificationCreated()/[android] fix double notification issue/[android] MusicPlaybackService updates AudioManager AudioFocusRequest based integration for Android O+ Dont call Engine.foregroundServicesStartForAndroidO(this), this seems to have been broken, it wasnt sending an icon and it included no information whatever the case we cant be using that mechanism. Initialization of repeat mode and shuffle is now done in an async task. This code would make use of the ConfigurationManager.instance() which can freeze the main thread if there are IO issues mAudioManager.abandonAudioFocusRequest(AUDIO_FOCUS_REQUEST_ for Android O+ cancelShutdown async tasks throttled to be spaced at least with 1 second in between notifyChange async task submissions are now throttled. META_CHANGE to 100ms, other changes to 200ms/"
,,0.4681,Frostwire,"[android] Major MusicPlaybackService overhaul The most important playback issues are gone, playback continues through playlist, repeat modes work Theres still a glitch on the very first song played, gotta hit play again, will fix Now MusicPlaybackService is supposed to receive all of its background calls, or perhaps, all calls routed through its MusicPlayerHandler Thread/Loop. If all calls are routed through this queue, there should be no need to synchronize any resource and there should be no unexpected behaviors. No more expensive synchronized blocks, no more deadlocks. synchronized is evil. Also, no more anonymous callbacks, or nested callbacks. Since everything is done on the background and it doesnt block the UI thread, all methods that used to receive callbacks now return boolean, true for sucess, false for failure, usually on success callbacks are acted upon. Some callbacks used to get boolean results, its now very functional or a la go-lang, keep it simple stupid. anonymous callbacks, dynamic runnables and lambdas are also hard to debug/trace, its perhaps a bit more verbose but its clean and easy to read in stack traces and to step through in the debugger. Still a lot more to fix: album art not loading properly in song adapter or music activity/"
,,0.1715,Frostwire,"[android] array out of bounds issue adding uiTransfer to TransferManager, mopub banner on basic home/[android] catch more exceptions on messages sent to main looper, warnings, cleanup/[android] avoid possible crash leaving My Music/"
,,0.475,Frostwire,"[android] Fixes issue where player would stop at the end of a song MusicPlaybackService is now decoupled from Asyncs.async/EngineThreadPool Do not compromise the performance of search and download when using the music player. Sending all background requests to a single HandlerThread in MusicPlaybackService makes things a lot simpler, less chances for race conditions if all requests are executed in the order theyre requested given all the synchronized blocks we inherited from Apollos codebase More fine grained intervals when notifying music player changes, depending on the change being notified There are still glitches with Repeat song mode, this code is full of overcomplexities that are hard to track down. My Music / Art Albums not loading Started debugging and doing a few fixes, album art isnt loading correctly for some reason/[android] protect UI thread from unexpected crashes when posting to main looper if ran on development environment the crash still happens, should lower to some extent a lot of vague crashes posting messages from unknown locations to the main thread/"
,,0.4411,Frostwire,"[android] Fixes issue where player would stop at the end of a song MusicPlaybackService is now decoupled from Asyncs.async/EngineThreadPool Do not compromise the performance of search and download when using the music player. Sending all background requests to a single HandlerThread in MusicPlaybackService makes things a lot simpler, less chances for race conditions if all requests are executed in the order theyre requested given all the synchronized blocks we inherited from Apollos codebase More fine grained intervals when notifying music player changes, depending on the change being notified There are still glitches with Repeat song mode, this code is full of overcomplexities that are hard to track down. My Music / Art Albums not loading Started debugging and doing a few fixes, album art isnt loading correctly for some reason/[android] catch more exceptions on messages sent to main looper, warnings, cleanup/"
,,0.2269,Frostwire,"[android] continuation of 3b6e8383180696202c7589e960c7aeb5a9534b6d Recovers if it loses reference to fragment manager. Simple, effective but possibly risky approach of keeping a static reference to the living SearchFragment in a static variable in case the weak reference is lost. The reference is always removed and rewritten when the search fragment is destroyed, created or resumed. Gotta keep an eye for OOM errors after this hack/[android] fixes issue where it appeared as if there were no search results The LocalSearchEngineListener would lose its SearchFragment reference and wasnt able to report results on ocassions/[android/common] Fixed synchronization issues with Keyword detector Tried: Minimize synchronized block spans Dont synchronize the collection object, use an Object as the monitor instead The issue was that on one end the submission time was measured with SystemClock.elapsedRealtime, and on the other end with System.currentTimeMillis I might just remove all mentions of SystemClock.ellapsedRealtime from the code base to avoid these issues in the future Some cleanups/[android] catch more exceptions on messages sent to main looper, warnings, cleanup/"
,,0.1671,Frostwire,"[android] UIBittorrentDownload not always had a listener set Refactor: Moved UIBittorrentDownload.StatusListener to its own class UIBTDownloadListener. Made sure that the BTDownload inside the UIBittorrentDownload always has a UIBTDownloadListener to notify of important events, like finishing. Made sure we perform a finalCleanup if were not seeding after a download finishes. Theres still an issue with 1 out of N files not being scanned upon download finishing./[android/common] Fixed synchronization issues with Keyword detector Tried: Minimize synchronized block spans Dont synchronize the collection object, use an Object as the monitor instead The issue was that on one end the submission time was measured with SystemClock.elapsedRealtime, and on the other end with System.currentTimeMillis I might just remove all mentions of SystemClock.ellapsedRealtime from the code base to avoid these issues in the future Some cleanups/[android] Fixes issue where an existing partial torrent transfer could not add more items from a .torrent in My files its not working 100% of the way, trying to figure out why the uiBittorrentDownload in the Transfer Detail fragment isnt updated all the times, it works most of the times. Gets wonky if the transfer is paused sometimes, but if you try again it will add all of the specified files. Gotta come back to this/[android] cleanup and crashes starting music player from my music gone Tested all the way from Android 5.0 to Android 10/"
,,0.0786,Frostwire,[android] update dialog starts apk download on browser if apk install fails/
,,0.1134,Frostwire,"[android] UIBittorrentDownload not always had a listener set Refactor: Moved UIBittorrentDownload.StatusListener to its own class UIBTDownloadListener. Made sure that the BTDownload inside the UIBittorrentDownload always has a UIBTDownloadListener to notify of important events, like finishing. Made sure we perform a finalCleanup if were not seeding after a download finishes. Theres still an issue with 1 out of N files not being scanned upon download finishing./[android] possible NPE on transfer removal/"
,,0.1389,Frostwire,[android] fixes issue where it appeared as if there were no search results The LocalSearchEngineListener would lose its SearchFragment reference and wasnt able to report results on ocassions/[android] possible crash when searching way too fast after the app opens/
,,0.1175,Frostwire,"[android] array out of bounds issue adding uiTransfer to TransferManager, mopub banner on basic home/[android] fix buggy behavior of PromotionsAdapter, simply offer ad removal everytime/"
,,0.0786,Frostwire,[android] update dialog starts apk download on browser if apk install fails/
,,0.2651,Frostwire,"[android] protect UI thread from unexpected crashes when posting to main looper if ran on development environment the crash still happens, should lower to some extent a lot of vague crashes posting messages from unknown locations to the main thread/[android] fix crash dismissing Remove Ads interstitial, cleanup/"
,,0.3431,Frostwire,"[android] continuation of 3b6e8383180696202c7589e960c7aeb5a9534b6d Recovers if it loses reference to fragment manager. Simple, effective but possibly risky approach of keeping a static reference to the living SearchFragment in a static variable in case the weak reference is lost. The reference is always removed and rewritten when the search fragment is destroyed, created or resumed. Gotta keep an eye for OOM errors after this hack/[android] fixes after crash reports from 618 relaxed syncrhonization on entire MusicPlaybackService simplifications and cleanups multiplayer got lost (null)/[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/[android] crash: MainActivity.registerMainBroadcastReceiver/"
,,0.2091,Frostwire,"[android] protect UI thread from unexpected crashes when posting to main looper if ran on development environment the crash still happens, should lower to some extent a lot of vague crashes posting messages from unknown locations to the main thread/"
,,0.4659,Frostwire,"[android] Major MusicPlaybackService overhaul The most important playback issues are gone, playback continues through playlist, repeat modes work Theres still a glitch on the very first song played, gotta hit play again, will fix Now MusicPlaybackService is supposed to receive all of its background calls, or perhaps, all calls routed through its MusicPlayerHandler Thread/Loop. If all calls are routed through this queue, there should be no need to synchronize any resource and there should be no unexpected behaviors. No more expensive synchronized blocks, no more deadlocks. synchronized is evil. Also, no more anonymous callbacks, or nested callbacks. Since everything is done on the background and it doesnt block the UI thread, all methods that used to receive callbacks now return boolean, true for sucess, false for failure, usually on success callbacks are acted upon. Some callbacks used to get boolean results, its now very functional or a la go-lang, keep it simple stupid. anonymous callbacks, dynamic runnables and lambdas are also hard to debug/trace, its perhaps a bit more verbose but its clean and easy to read in stack traces and to step through in the debugger. Still a lot more to fix: album art not loading properly in song adapter or music activity/"
,,0.2213,Frostwire,"[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/"
,,0.0874,Frostwire,[android] crash caught on AbstractActivity.onResume()/
,,0.129,Frostwire,"[android] EngineService recovers BTEngine perfectly on exit/restart In the process: Made boolean state volatile Added thread safety mechanisms to change state. A lock and an updateState method which was used to debug what was happening Nothing was making sense because every time we talked to the service for stopping or shutting down, it seems as if we were working with a new instance of the service, so you dont really want to keep states in the service and expect it will remain, therefore the solution was to make state a static private variable for EngineService/"
,,0.0795,javacpp,* Fix `Pointer` losing its owner when mistakenly ignoring deallocators for `const` values returned from adapters/
,,0.1489,OpenDDS,"delete_contained_entities hangs when Service Participant thread is interrupted (#1206) An interrupt delievered to the Service Participant thread causes the run_reactor_event_loop function to return with an ""interrupted system call"" error. An attempt to shutdown will notify the now stopped reactor. Since the reactor isnt running, DomainParticipantImpl::handle_exception is never called. Since handle_exception is never called, the condition variable is not released and shutdown hangs. The solution is to block signals in the Service Participant thread (and other threads that are running the reactor event loop). This was already being done in the transport reactor task so it was promoted and similar classes were consolidated./Merge pull request from objectcomputing/post-1202-transport-test rtps_reliability.cpp: fixed compile error/rtps_reliability.cpp: fixed compile error/remove debug output from rtps_reliability test/fix security test issues (double association / volatile gap without info_dst / secure discovery), fix rtps transport test to associate correctly/"
,,0.1103,pljava,"Code in a TransactionListener which tried to make a backend call would crash because the Invocation context was not setup. Some simple backend calls might be safe, but we really dont want any user code calling into the backend when were at transaction end, so prevent all access./"
,,0.0792,realm-java,"Fixed bug in ""isEmpty"" method of a View./Prepared and added new methods to table/view interface (issue"
,,0.0665,realm-java,Prepared and added new methods to table/view interface (issue
,,0.0751,realm-java,Merge pull request from realm/cm-bug-gridview-example Removed excessive calls to getInstance in GridViewExample/
,,0.1325,realm-java,Fix Context leak warning in threadExample (#4580) (#4586) * fix Context leak warning in threadExample (#4580) * cancel task in onStop() * add check if the fragment is attached to the UI * add check if the fragment is attached to the UI * cancel the task if parent fragment is detached/
,,0.0823,realm-java,Fixes (#5741) * Fixes removed session network listener since its redundant with the SyncManager one/
,,0.1208,realm-java,Fix SyncSession tests (#5853)/Merge pull request from realm/merge-7930c8-to-next-major Fix merge from 7930c8 to next-major/logout logging not resuming sync (#5820) * Fixes logout/login resume syncing/
,,0.1269,realm-java,Merge pull request from realm/merge-7930c8-to-next-major Fix merge from 7930c8 to next-major/logout logging not resuming sync (#5820) * Fixes logout/login resume syncing/
,,0.0814,realm-java,Merge pull request from realm/merge-780a85-to-master Fix merge from 780a85 to master/Fixes (#6043) * Using Android Network Security Configuration to setup the test certificate for SSL tests/
,,0.0798,realm-java,Added support for stopping and starting a session (#6135)/
,,0.063,rocksdb,Merge pull request from fyrz/JavaDoc-Cleanup JavaDoc fixes & enhancements RocksJava/
,,0.0599,rocksdb,[RocksJava] Testcase improvements/
,,0.2456,rocksdb,"Adding pin_l0_filter_and_index_blocks_in_cache feature and related fixes. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. Test Plan: export TEST_TMPDIR=/dev/shm/ && DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check is OK. I didnt run the Java tests, I dont have Java set up on my devserver. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: ""Fix failing Java unit test."" This reverts commit d7ae42b0f89fd25d8aaed28703059889d145596e. This is reverted as auto buld failure. This commit itself doesnt have any problem. Reverting as it depends on the commit to revert./Fix failing Java unit test. Test Plan: sent diff to sdong, passes :) Reviewers: sdong Reviewed By: sdong Subscribers: leveldb, andrewkr, dhruba Differential Revision:"
,,0.0636,rocksdb,Fix the javadoc and the formatting of the base-classes for objects with native references/
,,0.3095,rocksdb,"PrefixTest.PrefixAndWholeKeyTest should run against a different directory from prefix_test Summary: PrefixTest.PrefixAndWholeKeyTest runs against the same directory as prefix_test, which sometimes fail parallel tests. Fix it. Test Plan: Run it in parallel and see it doesnt fail anymore. Reviewers: andrewkr Reviewed By: andrewkr Subscribers: leveldb, andrewkr, dhruba Differential Revision: pin_l0_filter_and_index_blocks_in_cache feature and related fixes. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. Test Plan: export TEST_TMPDIR=/dev/shm/ && DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check is OK. I didnt run the Java tests, I dont have Java set up on my devserver. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: ""Adding pin_l0_filter_and_index_blocks_in_cache feature."" This reverts commit 522de4f59e6314698286cf29d8a325a284d81778. It has bug of index block cleaning up./Adding pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision: ""Revert ""Fixed the bug when both whole_key_filtering and prefix_extractor are set."""" Summary: This reverts commit 73c31377bbcd300061245138dbaf782fedada9ba, which mistakenly reverts 73c31377bbcd300061245138dbaf782fedada9ba that fixes a bug when both whole_key_filtering and prefix_extractor are set Test Plan: revert the patch Reviewers: anthony, IslamAbdelRahman, rven, kradhakrishnan, sdong Reviewed By: sdong Subscribers: leveldb, dhruba Differential Revision:"
,,0.3125,rocksdb,"Fix compression dictionary clang errors Summary: There were a few narrowing conversions that clang didnt like. Test Plan: $ make clean && USE_CLANG=1 DISABLE_JEMALLOC=1 TEST_TMPDIR=/dev/shm/rocksdb OPT=-g make check Reviewers: IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: andrewkr, dhruba, leveldb Differential Revision: pin_l0_filter_and_index_blocks_in_cache feature and related fixes. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. Test Plan: export TEST_TMPDIR=/dev/shm/ && DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check is OK. I didnt run the Java tests, I dont have Java set up on my devserver. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: ""Adding pin_l0_filter_and_index_blocks_in_cache feature."" This reverts commit 522de4f59e6314698286cf29d8a325a284d81778. It has bug of index block cleaning up./Adding pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision:"
,,0.0634,rocksdb,Minor fixes to RocksJava Native Library initialization (#1287) * [bugfix] Make sure the Native Library is initialized. Closes * [bugfix] Just load the native libraries once/
,,0.0653,rocksdb,Minor fixes to RocksJava Native Library initialization (#1287) * [bugfix] Make sure the Native Library is initialized. Closes * [bugfix] Just load the native libraries once/
