Topic_no,Keywords,Contrib,System,Text
19,"fix, issue, bug, access_fixe, desktop_declaration, avoid, common, search, leak, loader, show, transfer, torrent, warning_native, made_without, checking_exception, differential_revision, standalone, build_install, memory_leak",0.0848,Frostwire,"[desktop] Fixes bug setting author on m4a from YT. Cleanup./[dekstop] Using fmp4, fixed compilation/"
,,0.0639,Frostwire,[desktop] Fixes bug opening certain YT preview URLs/
,,0.0759,Frostwire,Compilation fixes/
,,0.10400000000000001,Frostwire,[common] Fixes EZTV search (Issue
,,0.0848,Frostwire,[common] Minor regex fix/[common] Avoid channels in YT search performer/
,,0.077,Frostwire,[android] Updated to jlibtorrent 1.1.0.21 and fixed issues with common changes/
,,0.0786,Frostwire,[android] next batch of fragment refactors and fixes./
,,0.114,Frostwire,[android] Fixes issue Repeated More by artist menu entry. changelog./[android] next batch of fragment refactors and fixes./
,,0.0744,Frostwire,[android] next batch of fragment refactors and fixes./
,,0.1728,Frostwire,"[android] fixed scrolling issue on profile adapters./[android] dont call refresh() inside restartLoader. minor optimizations. hunting for bug on favoritefragment./[android] fixes issue where last added favorite wasnt displaying. other refresh issues remain./[android] fixes on favorite fragment, adding to favorites./[android] next batch of fragment refactors and fixes./"
,,0.0765,Frostwire,[android] next batch of fragment refactors and fixes./
,,0.0744,Frostwire,[android] next batch of fragment refactors and fixes./
,,0.0744,Frostwire,[android] next batch of fragment refactors and fixes./
,,0.1199,Frostwire,[android] fixes on playlist handling./[android] next batch of fragment refactors and fixes./
,,0.0786,Frostwire,[android] next batch of fragment refactors and fixes./
,,0.0895,Frostwire,"[android] mistery solved, several fixes, lots of logging to find it./"
,,0.1006,Frostwire,"[android] fixes on playlist handling./[android] mistery solved, several fixes, lots of logging to find it./"
,,0.1029,Frostwire,"[android] solves back button issue on Album fragment./[android] almost ready to merge, cleaning up, fixes./[android] next batch of fragment refactors and fixes./"
,,0.0861,Frostwire,[android] dont call refresh() inside restartLoader. minor optimizations. hunting for bug on favoritefragment./[android] fixes on playlist handling./
,,0.0989,Frostwire,"[android] fix backgrounds of MyMusic search. cleanup, refactors./[android] fixes on playlist handling./"
,,0.1838,Frostwire,"[android] fixes on favorite fragment, adding to favorites./[android] mistery solved, several fixes, lots of logging to find it./[android] next batch of fragment refactors and fixes./"
,,0.1714,Frostwire,[android] copyright fixes. DRY refactor with dlg.setStyle()/[android] cast crash fixed./[android] fix issue with thumbnail. refactored dialog and adapter out of DownloadSoundcloudFromUrlTask into separate files./[android] checkboxs work. finished breaking dependency on SearchResult for ConfirmListDialog./Making more fail safe getting the last selected item from results lists/[android] cast crash fixed./[android] fix issue with thumbnail. refactored dialog and adapter out of DownloadSoundcloudFromUrlTask into separate files./[android] checkboxs work. finished breaking dependency on SearchResult for ConfirmListDialog./Making more fail safe getting the last selected item from results lists/[android] Updated to jlibtorrent 1.1.0.21 and fixed issues with common changes/
,,0.1256,Frostwire,"[android] copyright fixes. DRY refactor with dlg.setStyle()/[android] search and other torrent downloads now support partial download dialog. edge cases to fix./[android] pluggin HandpickedTorrentDialog on more use cases, got it to crash./"
,,0.1121,Frostwire,[android] search and other torrent downloads now support partial download dialog. edge cases to fix./
,,0.1496,Frostwire,"[android] Shows descriptive error on Internet dropped (Issue Clears errored cloud transfers./[android] Not using File.renameTo, it fails in Android if mount points are different/"
,,0.2001,Frostwire,"[android] Shows descriptive error on Internet dropped (Issue Clears errored cloud transfers./[android] Not using File.renameTo, it fails in Android if mount points are different/[android] Fixed potential issue with saving pure http downloads in SD/[android] SoundCloud transfers were not reporting progress correctly due to unknown file size. Fixes Issue"
,,0.0673,Frostwire,Compilation fixes/
,,0.1503,Frostwire,[android] Shows descriptive error on Internet dropped (Issue Clears errored cloud transfers./
,,0.075,Frostwire,[android] Updated to jlibtorrent 1.1.0.21 and fixed issues with common changes/
,,0.0828,Frostwire,[android] copyright fixes. DRY refactor with dlg.setStyle()/
,,0.0849,Frostwire,[android] copyright fixes. DRY refactor with dlg.setStyle()/
,,0.0849,Frostwire,[android] copyright fixes. DRY refactor with dlg.setStyle()/
,,0.1617,Frostwire,[android] fixed Illegal state exception with FragmentManager when showing AbstractConfirmListDialog./[android] copyright fixes. DRY refactor with dlg.setStyle()/[android] search and other torrent downloads now support partial download dialog. edge cases to fix./
,,0.0849,Frostwire,[android] copyright fixes. DRY refactor with dlg.setStyle()/
,,0.1491,Frostwire,[android] checkboxs work. finished breaking dependency on SearchResult for ConfirmListDialog./[android] checkboxs work. finished breaking dependency on SearchResult for ConfirmListDialog./
,,0.0935,Frostwire,[android] fixes bug where torrent download dialog would keep coming back./[desktop] better error output when encountering invalid torrent/
,,0.1004,Frostwire,[desktop] Show update download progress on Tools menu. Fixes
,,0.1043,Frostwire,[desktop] Show update download progress on Tools menu. Fixes
,,0.115,Frostwire,"[common] Fixed NPE if downloading magnet/[android] fixing conflicts./[common] Another NPE fix due to bad timing, in need of refactor/[common] Fixed NPE but the main reason is bad timing in loading (needs refactor)/"
,,0.1139,Frostwire,[common] Fixes YT search issues/[common] fix some yt regex/[common] YT preliminary html offset finder was broken after updates./
,,0.1042,Frostwire,Merge pull request from alejandroarturom/torlock-fixes [common] Fixes Torlock Search/[common] Fixes Torlock Search/
,,0.1101,Frostwire,Merge pull request from alejandroarturom/torlock-fixes [common] Fixes Torlock Search/[common] Fixes Torlock Search/
,,0.177,Frostwire,"[android] NPE fix reported in console/[android] Multiple fixes. Respects ""Show Transfers"" preference for cloud downloads. based torrents search results work again. Shows a toast to appeace user in case torrent fetching takes a while when a torrent search result is clicked./"
,,0.1791,Frostwire,"[android] turned off ui-debug flag./[android] Multiple fixes. Respects ""Show Transfers"" preference for cloud downloads. based torrents search results work again. Shows a toast to appeace user in case torrent fetching takes a while when a torrent search result is clicked./"
,,0.0957,Frostwire,[android] fixes bug where torrent download dialog would keep coming back./
,,0.0883,Frostwire,[android] Closes more descriptive error on Connection timed out for cloud transfers./[android] fixing conflicts./
,,0.0823,Frostwire,[android] Fixes issue torrent picker sorting./
,,0.1081,Frostwire,[common/desktop] should fix issues with FW not opening .TORRENT files/
,,0.1081,Frostwire,[common/desktop] should fix issues with FW not opening .TORRENT files/
,,0.1266,Frostwire,[desktop] get TransfersTab reference from MainFrame to avoid casting issues/[desktop] fixes bug where transfers wouldnt be shown upon a download starting./
,,0.1062,Frostwire,[common/desktop] should fix issues with FW not opening .TORRENT files/
,,0.1081,Frostwire,[common/desktop] should fix issues with FW not opening .TORRENT files/
,,0.1264,Frostwire,"[common] using new jlibtorrent API for load settings (fix log setting)/[common] improved error log in BTEngine/[common/desktop] should fix issues with FW not opening .TORRENT files/[android] avoid ArrayIndexOutOfBoundsException/[common] NPE on BTEngine.download, priorities can be null/"
,,0.1435,Frostwire,Merge pull request from alejandroarturom/monova-fixed-20160609 [Common] Fixed Monova Search Results/[Common] Fixed Monova Search Results/
,,0.2161,Frostwire,[desktop] playlist handling bug fixes bugfix: dragging starred track from some playlist onto another playlist would unmark track as starred bugfix: dragging starred track from starred woudl remove from starred accepts drops on starred/
,,0.2075,Frostwire,[desktop] playlist handling bug fixes bugfix: dragging starred track from some playlist onto another playlist would unmark track as starred bugfix: dragging starred track from starred woudl remove from starred accepts drops on starred/
,,0.204,Frostwire,[desktop] playlist handling bug fixes bugfix: dragging starred track from some playlist onto another playlist would unmark track as starred bugfix: dragging starred track from starred woudl remove from starred accepts drops on starred/
,,0.2092,Frostwire,[desktop] playlist handling bug fixes bugfix: dragging starred track from some playlist onto another playlist would unmark track as starred bugfix: dragging starred track from starred woudl remove from starred accepts drops on starred/
,,0.0751,Frostwire,[desktop/issue New: All Free Downloads button/
,,0.0599,Frostwire,[common] fixed YT regex/
,,0.0833,Frostwire,[common] fixed limetorrents details regex/
,,0.0854,Frostwire,[common] fixed SC search/
,,0.1138,Frostwire,[common] fixed monova engine using the http torrent url/[common] added unit test for monova and partial fix to search (still not working)/
,,0.0778,Frostwire,[desktop] fixes issue with transfer text filter/
,,0.0673,Frostwire,[desktop] cleanup unthrown exceptions/
,,0.0652,Frostwire,[desktop] cleanup unthrown exceptions/
,,0.0673,Frostwire,[desktop] cleanup unthrown exceptions/
,,0.0673,Frostwire,[desktop] cleanup unthrown exceptions/
,,0.1011,Frostwire,[common] set stop_tracker_timeout to 0 to supress trackers communications during shutdown/[common] reset libtorrent state when in presence of ABI issues/[common] fixed issue that some settings wasnt applied in BTEngine/
,,0.0916,Frostwire,[common] fixed old issue of ThreadPool not using LinkedBlockingQueue/
,,0.1,Frostwire,[common] fixed YT player regex/[common] fixed YT/
,,0.0621,Frostwire,[common] fix SC/
,,0.0891,Frostwire,[common] TorLock search fixed/
,,0.1186,Frostwire,"[common] Monova fixed. Monova no longer provides seeds. Since seeds tend to be always out of date, Ive provided a random number between 50 and 100. Monova no longer provides .torrent urls, well have to settle for magnet uris only/"
,,0.0939,Frostwire,[common] avoid re-download of torrent is already complete/
,,0.0929,Frostwire,[common] fixed issue of thread pool for fixed maximum pool size/
,,0.063,Frostwire,[common] fixed Monova/
,,0.1269,Frostwire,[android] fixed potential context leak in SeedAction/[android] fixed issue of all transfers go to seeding/
,,0.066,Frostwire,[android] crash dismissing NewTransferDialog/
,,0.1228,Frostwire,[all] EZTV search fixed for the longest time it wasnt adding the search keywords to the search url. test code updated/
,,0.0673,Frostwire,[common] fixed SC/
,,0.1061,Frostwire,[common] fixed torlock/[all] TorLock search fixed/
,,0.1121,Frostwire,[common] using magnet url for yi-fi if torrent url fails/
,,0.3046,Frostwire,"[android] transfers selected tab on rotation bug fix/[android] issue 594, shows transfer while fetching torrent (#596) Also, when transfers are removed the transfer list is now refreshed immediatly./Issue 590 scrollbar fix (#592) * [android] disable fast scroll on idle state prevents the user from scrolling by mistake while touching the right side of the screen while on the listview * [android] added ComposedOnScrollListener/[android] Transfers > Seeding Views to encourage seeding Makes the new Seeding tab user experience a lot better when we can detect things like: is seeding disabled? or are there any transfers we should be seeding? Cleanup and fixes on TransfersFragment/[android] SeedAction can now be used to seed all finished transfers. Fixes bug where top menu seed all wouldnt show the dialogs pertinent to bittorrent off or seeding off. TransferFragment menu action now reuses SeedAction SeedAction cleanup, formatting and Context-leak avoidance maintenance/[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/"
,,0.129,Frostwire,"[android] issue 594, shows transfer while fetching torrent (#596) Also, when transfers are removed the transfer list is now refreshed immediatly./"
,,0.2201,Frostwire,"[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/"
,,0.3012,Frostwire,"[android] SeedAction can now be used to seed all finished transfers. Fixes bug where top menu seed all wouldnt show the dialogs pertinent to bittorrent off or seeding off. TransferFragment menu action now reuses SeedAction SeedAction cleanup, formatting and Context-leak avoidance maintenance/[android] Fixed context leak detected in SeedAction.onClick()/[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/"
,,0.129,Frostwire,"[android] issue 594, shows transfer while fetching torrent (#596) Also, when transfers are removed the transfer list is now refreshed immediatly./"
,,0.2615,Frostwire,"[android] issue 594, shows transfer while fetching torrent (#596) Also, when transfers are removed the transfer list is now refreshed immediatly./[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/"
,,0.1347,Frostwire,"[android] issue 594, shows transfer while fetching torrent (#596) Also, when transfers are removed the transfer list is now refreshed immediatly./"
,,0.2229,Frostwire,"[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/[android] avoid crashes with NotificationManager (SecurityExceptions Issue"
,,0.0694,Frostwire,[common] fixed SC/
,,0.0804,Frostwire,"[android] Dataflow issues, inverted methods that were always used in negation/"
,,0.0744,Frostwire,[desktop] fixed issue of both thumb to the left in range slider/
,,0.0725,Frostwire,[common] truncate long file names to 127 chars for BaseHttpDownload This error might be ocurring with other transfer types/
,,0.0954,Frostwire,[common] Zooqle search fixed/
,,0.0912,Frostwire,[common] Zooqle search fixed/
,,0.0912,Frostwire,[common] Zooqle search fixed/
,,0.0954,Frostwire,[common] Zooqle search fixed/
,,0.1142,Frostwire,[common] LimeTorrentsSearchPerformer fix/[common] Zooqle search fixed/
,,0.0933,Frostwire,[common] Zooqle search fixed/
,,0.1082,Frostwire,[common] TorrentDownloads search title matching fix. More results/[common] Zooqle search fixed/
,,0.1019,Frostwire,[common] fixed yi-fi/[common] Zooqle search fixed/
,,0.0996,Frostwire,[common] Zooqle search fixed/
,,0.0652,Frostwire,[android] DeleteDialog imageFetcher NPE protection. typo fixed/
,,0.11199999999999999,Frostwire,[android] cant replicate Zombie Torrent issue anymore It seems the ContentResolver didnt perform the physical file deletion when it came to .torrent files Also fixed NPE on UIBittorrentDownload/
,,0.1324,Frostwire,[common] eztv fixed seeds number and phantom search results/[common/desktop] Yify search fixes/
,,0.0577,Frostwire,[common/desktop] Yify search fixes/
,,0.0577,Frostwire,[common/desktop] Yify search fixes/
,,0.1238,Frostwire,"[common] fixed limetorrents regex for title issue/[common] limetorrents fix, now it needs to use magnet/"
,,0.0599,Frostwire,[common/desktop] Yify search fixes/
,,0.114,Frostwire,[common] fixed TorrentDownloads by switching to magnet/[common/desktop] Yify search fixes/
,,0.0704,Frostwire,"[common] yifi fix, back to /movie/ page/[common/desktop] Yify search fixes/"
,,0.0795,Frostwire,"[common] Archive.org, fixed stream only results and save path/"
,,0.0819,Frostwire,[android] bug fix dismissing fallback banner on music player/[android] safely register Playbackstatus broadcast receiver avoids possible IllegalStatus crash/[android] NPE issue with FWVibrator/
,,0.0891,Frostwire,[android] Transfers > Clear all finished update It will also clear errored transfers/
,,0.0912,Frostwire,[common] EZTV Search fix/
,,0.0833,Frostwire,"[android] SwitchPreference rendering issues fixed after sdk 28 min sdk bumped from 16 to 19 (android 4.4, app didnt really work on 4.1 and very little installs)/"
,,0.0833,Frostwire,[android] Transfers > Clear all finished update It will also clear errored transfers/
,,0.102,Frostwire,"[desktop] deprecation fixes, unboxing, labmda refactors/"
,,0.102,Frostwire,"[desktop] deprecation fixes, unboxing, labmda refactors/"
,,0.10400000000000001,Frostwire,"[desktop] deprecation fixes, unboxing, labmda refactors/"
,,0.1101,Frostwire,"[desktop] deprecation fixes, unboxing, labmda refactors/"
,,0.1141,Frostwire,"[desktop] deprecation fixes, unboxing, labmda refactors/"
,,0.0652,Frostwire,[common] SC fixed/
,,0.073,Frostwire,[common] archive.org http request fixes search on android/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0804,Frostwire,[desktop] fix non-atomic ops on volatile fields/[desktop] declaration access fixes/
,,0.0807,Frostwire,[desktop] javadoc issues cleanup/
,,0.1025,Frostwire,[desktop] declaration access fixes/[desktop] synchronized on non final fields warnings fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.1081,Frostwire,[common/desktop] avoid numeric overflow when dealing with large file sizes jlibtorrent needs a few fixes/
,,0.17800000000000002,Frostwire,[desktop] declaration access fixes/[common/desktop] avoid numeric overflow when dealing with large file sizes jlibtorrent needs a few fixes/
,,0.1121,Frostwire,[common/desktop] avoid numeric overflow when dealing with large file sizes jlibtorrent needs a few fixes/
,,0.0833,Frostwire,[desktop] declaration access fixes/[desktop] azureus debug code cleanup/
,,0.1723,Frostwire,[desktop] declaration access fixes/[common/desktop] avoid numeric overflow when dealing with large file sizes jlibtorrent needs a few fixes/
,,0.1141,Frostwire,[common/desktop] avoid numeric overflow when dealing with large file sizes jlibtorrent needs a few fixes/
,,0.1535,Frostwire,[desktop] Fixes Time remaining rendering bug/[common/desktop] avoid numeric overflow when dealing with large file sizes jlibtorrent needs a few fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.1121,Frostwire,[common/desktop] avoid numeric overflow when dealing with large file sizes jlibtorrent needs a few fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.1141,Frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.1121,Frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0807,Frostwire,[desktop] javadoc issues cleanup/
,,0.1162,Frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0807,Frostwire,[desktop] javadoc issues cleanup/
,,0.1141,Frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.1141,Frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.1162,Frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.1121,Frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.1121,Frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.1204,Frostwire,[desktop] declaration access fixes/[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0939,Frostwire,[desktop] declaration access fixes/[desktop] more cleanups and fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.1761,Frostwire,[desktop] declaration access fixes/[common/desktop] avoid numeric overflow when dealing with large file sizes jlibtorrent needs a few fixes/
,,0.1101,Frostwire,[common/desktop] avoid numeric overflow when dealing with large file sizes jlibtorrent needs a few fixes/
,,0.0599,Frostwire,[desktop] more cleanups and fixes/
,,0.0844,Frostwire,[desktop] declaration access fixes/
,,0.0744,Frostwire,[desktop] javadoc issues cleanup/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0599,Frostwire,[desktop] more cleanups and fixes/
,,0.1761,Frostwire,[desktop] declaration access fixes/[common/desktop] avoid numeric overflow when dealing with large file sizes jlibtorrent needs a few fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.1141,Frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.0865,Frostwire,[desktop] declaration access fixes/
,,0.1141,Frostwire,[common/desktop] avoid numeric overflow when dealing with large file sizes jlibtorrent needs a few fixes/
,,0.1101,Frostwire,[common/desktop] avoid numeric overflow when dealing with large file sizes jlibtorrent needs a few fixes/
,,0.0833,Frostwire,[common] Nyaa search fixed and optimized/
,,0.0792,Frostwire,[android] compilation issues fixed/
,,0.0833,Frostwire,[android] compilation issues fixed/
,,0.1023,Frostwire,"[common] Torrentz2 and TorLock are magnet based exclusively This will lead to less download torrent errors caused by broken links or Cloudfare errors and keep the DHT performing lots of queries and keeping the keys/buckets with the .torrents alive, the more the merrier/"
,,0.0974,Frostwire,"[common] Torrentz2 and TorLock are magnet based exclusively This will lead to less download torrent errors caused by broken links or Cloudfare errors and keep the DHT performing lots of queries and keeping the keys/buckets with the .torrents alive, the more the merrier/"
,,0.1165,Frostwire,"[android] Fixes issue where an existing partial torrent transfer could not add more items from a .torrent in My files its not working 100% of the way, trying to figure out why the uiBittorrentDownload in the Transfer Detail fragment isnt updated all the times, it works most of the times. Gets wonky if the transfer is paused sometimes, but if you try again it will add all of the specified files. Gotta come back to this/"
,,0.0751,Frostwire,[common] make sure HEAD http connections are not leaked/
,,0.1393,Frostwire,"[common] SC client_id update, fixes issue SC fixes avoid deserialization NPE when media null resolve url updated multitrack download fixes/"
,,0.0838,Frostwire,[android] possible crash on MyFilesFragment registering broadcast receiver/
,,0.0683,Frostwire,"[android] catch more exceptions on messages sent to main looper, warnings, cleanup/[android] fixes timer unsubscription issues in TransfersFragment/"
,,0.1261,Frostwire,"[android] array out of bounds issue adding uiTransfer to TransferManager, mopub banner on basic home/[android] Fixes issue where an existing partial torrent transfer could not add more items from a .torrent in My files its not working 100% of the way, trying to figure out why the uiBittorrentDownload in the Transfer Detail fragment isnt updated all the times, it works most of the times. Gets wonky if the transfer is paused sometimes, but if you try again it will add all of the specified files. Gotta come back to this/"
,,0.0833,javacpp,"* Exported `Loader.isLoadLibraries()`, which always returns true, except when the `Builder` loads the classes * Made it possible to specify a nested class (with a $ character in the name) on the command line * When `Pointer.limit 0`, the methods `put()`, `zero()`, and `asBuffer()` now assume a size of 1/Fixed a few small things/ * Fixed memory corruption when returning by value an `std::vector<>` using an adapter * Added `Pointer.zero()` method that calls `memset(0)` on the range * For easier memory management, more than one `Pointer` now allowed to share the `deallocator` when ""casting"" them/"
,,0.1319,javacpp,"* Removed call to `Arrays.copyOf()` in `Loader.findLibrary()`, which would prevent it from working on Android 2.2 (issue * Fixed `NullPointerException` in `Loader.load()` when no annotation is provided (issue * Parsing for anonymous `struct` or `union` and for `typedef void` (mapped to Pointer`) now outputs something * The `Parser` now expands preprocessor macros and outputs all unprocessed directives as comments/ * Fixed `typedef` of function pointers and a few code formatting issues with `Parser` * Supplied checks to prevent `Loader.load()` from throwing `java.lang.IllegalStateException: Cant overwrite cause`/"
,,0.1494,javacpp,"* Made `Loader.load()` work, within reason, even when all annotations and resources have been removed, for example, by ProGuard * Fixed compile error when using a `FunctionPointer` as parameter from outside its top-level enclosing class * The `Parser` now filters tokens appropriately with preprocessor directives * Improved the C++ support of the `Parser` for macros, templates, etc/"
,,0.1748,javacpp,"* Fixed a few potential issues with the hacks in `Loader` * Generalized somewhat more the compiler options used inside `linux-arm.properties` (issue javacv:418)/Fixed a Windows bug that caused immediate crash (issue In Windows, File.separator returns ""\"" which is also an escape character in Regex. This caused an exception that crashed the program immediately. Remove Regex and use / the character for clarity./ * Made `Loader.load()` work, within reason, even when all annotations and resources have been removed, for example, by ProGuard * Fixed compile error when using a `FunctionPointer` as parameter from outside its top-level enclosing class * The `Parser` now filters tokens appropriately with preprocessor directives * Improved the C++ support of the `Parser` for macros, templates, etc/"
,,0.0849,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/"
,,0.0849,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/"
,,0.0849,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/"
,,0.0849,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/"
,,0.0849,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/"
,,0.0849,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/"
,,0.0849,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/"
,,0.0849,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/"
,,0.0849,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/"
,,0.0849,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/"
,,0.0849,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/"
,,0.0807,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/"
,,0.0849,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/"
,,0.1619,javacpp,"* Prevent `Generator` from initializing classes when preloading them, which can cause problems (issue bytedeco/javacpp-presets#126)/ * Prevent `Loader` from extracting libraries more than once, which can cause problems (issue bytedeco/javacpp-presets#126) * Make `Indexer implements AutoCloseable` to let us try-with-resources/ * Add missing calls to `close()` for `InputStream` and `OutputStream` in `Loader` (issue * Remove `Piper` class no longer needed with Java SE 7/ * Add logging to `Loader.loadLibrary()` to help diagnose loading problems (issue"
,,0.0636,javacpp,* Fix `Loader.load()` error when called right after `Builder.build()` within the same process/
,,0.1073,javacpp,"* Fix `IndexerTest` potentially failing with `OutOfMemoryError` (issue bytedeco/javacpp-presets#234) * Preload libraries to work around some cases when they refuse to load once renamed (issue deeplearning4j/libnd4j#235) * Fix compilation error on some `linux-ppc64le` platforms (issue deeplearning4j/libnd4j#232)/* Fix `Loader` crashing on Android (issue bytedeco/javacv#412)/ * Fix `NullPointerException` on ""generic"" platforms/ * Fix `Loader.load()` error when called right after `Builder.build()` within the same process/"
,,0.0804,javacpp,* Add `UniquePtrAdapter` and corresponding annotation to support `unique_ptr` containers (issue bytedeco/javacpp-presets#266)/
,,0.0818,javacpp,* Prevent `Pointer` from copying array data from NIO buffers that are also direct (issue bytedeco/javacpp-presets#380)/
,,0.0818,javacpp,* Prevent `Pointer` from copying array data from NIO buffers that are also direct (issue bytedeco/javacpp-presets#380)/
,,0.1148,javacpp,"* Add new ""org.bytedeco.javacpp.cachedir.nosubdir"" system property to restore old behavior (issue * Prevent `Pointer` from copying array data from NIO buffers that are also direct (issue bytedeco/javacpp-presets#380)/ * Prevent `Loader` from loading system libraries, which causes problems on Android 7.x (issue bytedeco/javacv#617)/ * Avoid `Loader` issues with spaces, etc in paths to library files (issue deeplearning4j/nd4j#1564)/"
,,0.0818,javacpp,* Prevent `Pointer` from copying array data from NIO buffers that are also direct (issue bytedeco/javacpp-presets#380)/
,,0.0818,javacpp,* Prevent `Pointer` from copying array data from NIO buffers that are also direct (issue bytedeco/javacpp-presets#380)/
,,0.0798,javacpp,* Prevent `Pointer` from copying array data from NIO buffers that are also direct (issue bytedeco/javacpp-presets#380)/
,,0.0818,javacpp,* Prevent `Pointer` from copying array data from NIO buffers that are also direct (issue bytedeco/javacpp-presets#380)/
,,0.0818,javacpp,* Prevent `Pointer` from copying array data from NIO buffers that are also direct (issue bytedeco/javacpp-presets#380)/
,,0.1011,javacpp,* Call `malloc_trim(0)` after `System.gc()` on Linux to make sure memory gets released (issue bytedeco/javacpp-presets#423)/ * Fix potential formatting issues with `OutOfMemoryError` thrown from `Pointer`/
,,0.0854,javacpp,* Fix issue with `Loader.getCallerClass()` when a `SecurityManager` cannot be created (issue * Fix `Loader.getCallerClass()` (pull
,,0.075,javacpp,"* Fix ""Negative Buffer Capacity"" errors happening in subclasses on `Pointer.asBuffer()` (issue deeplearning4j/deeplearning4j#4061)/"
,,0.1305,javacpp,"* Fix ""Negative Buffer Capacity"" errors happening in subclasses on `Pointer.asBuffer()` (issue deeplearning4j/deeplearning4j#4061)/ * Prevent `JNI_OnLoad()` from failing when `Loader.putMemberOffset()` cannot find a class * Throw clear error message when `Loader.load()` gets called on a class not supporting current platform/ * Add annotation value to remove header files from inherited Also fix a few more issues with `Parser`/ * Fix potential race conditions and various issues with `Loader` that could prevent libraries like MKL from working properly/"
,,0.1389,javacpp,* Avoid `synchronized` on first call to `physicalBytes()` in `Pointer.deallocator()` to reduce contention (pull * Add `Info.enumerate` to let `Parser` map C++ enum classes to Java enum types (issue
,,0.1271,javacpp,* Avoid `synchronized` on first call to `physicalBytes()` in `Pointer.deallocator()` to reduce contention (pull * Make call to `Pointer.physicalBytes()` thread safe and remove lock (issue
,,0.1335,javacpp,* Prevent `Loader` from loading twice copies of the same DLL (issue deeplearning4j/deeplearning4j#4776)/ * Catch more exceptions that can occur in `Loader` when caching resources (pull
,,0.0828,javacpp,* Tweak `Pointer.formatBytes()` to increase the number of digits returned (issue
,,0.11199999999999999,javacpp,"* Tweak `Pointer.formatBytes()` to increase the number of digits returned (issue * Fix memory leak that occurs with ""org.bytedeco.javacpp.nopointergc"" (issue"
,,0.2242,javacpp,"* Clarify that `Loader.load()` can throw `UnsatisfiedLinkError` when interrupted/ * Synchronize `Loader.loadLibrary()` to fix potential race condition (pull * Fix issues with anonymous classes by calling `getEnclosingClass()` instead of `getDeclaringClass()`/ * Search in `linkpath` before `preloadpath` to avoid copying or loading unwanted libraries/ * Do not fall back on `System.loadLibrary()` when we are renaming libraries (issue deeplearning4j/deeplearning4j#5503)/Fix potential `NullPointerException` in `Loader`/ * Fall back on Android-friendly `System.loadLibrary()` in `Loader.load()` instead of ""java.library.path"" (issue bytedeco/javacv#970)/"
,,0.0751,javacpp,Add `PointerTest.testPointerPointer()` to make sure it works correctly (issue
,,0.1344,javacpp,"* Add `Loader.getLoadedLibraries()` method for debugging purposes and fix flaky `BuilderTest` (issue * Call `PointerScope.attach()` as part of `Pointer.deallocator()`, instead of `init()`, to support custom deallocators as well * Prevent `Parser` from appending annotations to setter methods of variables to satisfy the `Generator`/"
,,0.1359,javacpp,"* Add `Loader.getLoadedLibraries()` method for debugging purposes and fix flaky `BuilderTest` (issue * Call `PointerScope.attach()` as part of `Pointer.deallocator()`, instead of `init()`, to support custom deallocators as well * Prevent `Parser` from appending annotations to setter methods of variables to satisfy the `Generator`/"
,,0.1719,javacpp,"* Add `Loader.getLoadedLibraries()` method for debugging purposes and fix flaky `BuilderTest` (issue * Call `PointerScope.attach()` as part of `Pointer.deallocator()`, instead of `init()`, to support custom deallocators as well * Prevent `Parser` from appending annotations to setter methods of variables to satisfy the `Generator`/ * Let `Loader` rename JNI libraries when ""already loaded in another classloader"" (issue deeplearning4j/deeplearning4j#6166)/ * Allow `Builder` to create links for resource libraries even when no Java classes are built * Fix `Loader.cacheResource()` creating a subdirectory named ""null"" when caching a top-level file/"
,,0.1761,javacpp,* Replace calls to `Class.getResource()` with `Loader.findResource()` to work around issues with JPMS ([pull * Enhance `Loader.findResources()` with `Class.getResource()` and search among parent packages * Take shortest common package name among all user classes for the default output path of `Builder`/
,,0.2827,javacpp,* Fix potential `NullPointerException` in `Loader.findResources()` under the bootstrap class loader/Fix bug introduced in changes to `Loader.findResources()` for dealing with JPMS/ * Replace calls to `Class.getResource()` with `Loader.findResource()` to work around issues with JPMS ([pull * Enhance `Loader.findResources()` with `Class.getResource()` and search among parent packages * Take shortest common package name among all user classes for the default output path of `Builder`/ * Synchronize `Loader.cacheResources()` on `Runtime` to avoid `OverlappingFileLockException` with multiple class loaders (issue bytedeco/javacpp-presets#650)/
,,0.0982,javacpp,"* Support multiple instances of `FunctionPointer` subclasses, up to the value in (issue bytedeco/javacpp-presets#683)/"
,,0.0744,javacpp,"* Accelerate `Loader.extractResource()` for directories already cached, also preventing failures (issue * Fix `Loader.cacheResource()` with the ""jrt"" protocol as used by jlink (pull"
,,0.0789,javacpp,* Speed up `Loader.load()` by caching results returned from `Loader.findLibrary()` (issue
,,0.1038,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/
,,0.1038,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/
,,0.1255,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/ * Allow using `Charset` to avoid `UnsupportedEncodingException` from `BytePointer` (pull
,,0.1992,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/ * Prevent potential `NullPointerException` in `Loader.checkVersion()` (pull * Fix exception in `Loader` when running jlink image with JDK 13+ (pull * Speed up `Loader.load()` by caching results returned from `Loader.findLibrary()` (issue
,,0.1038,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/
,,0.1038,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/
,,0.1038,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/
,,0.1038,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/
,,0.1017,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/
,,0.1038,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/
,,0.1038,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/
,,0.1274,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/ * Allow using `Charset` to avoid `UnsupportedEncodingException` from `BytePointer` (pull
,,0.1038,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/
,,0.1038,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/
,,0.1017,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.1017,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0975,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0954,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0933,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0954,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0933,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0954,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0975,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0954,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0975,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0933,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0975,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0975,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0975,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0996,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0933,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0975,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0954,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0975,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0975,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0954,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.1017,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0975,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0975,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0996,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0975,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0975,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0933,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0975,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0954,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0996,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0996,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0996,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0954,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0975,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.0996,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.1017,jna,Pulled in libffi from gcc trunk. Fixed build and install for standalone use./
,,0.1102,jna,Show drop shadow on OSX BalloonManager Fix NPE on OSX BalloonManager git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Implement (most of) the fixes from issue git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0751,jna,Implement (most of) the fixes from issue git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1174,OpenDDS,work-in-progress on transport refactoring: adapted the rest of the DDS_no_tests workspace; fixed bugs in wait_for_acks and shutdown/
,,0.1004,OpenDDS,Merge pull request from mitza-oci/master Warnings fixes for Visual C++./Warnings fixes for Visual C++./
,,0.1023,OpenDDS,Merge pull request from mitza-oci/master Warnings fixes for Visual C++./Warnings fixes for Visual C++./
,,0.0645,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.0609,OpenDDS,Merge pull request from jwillemsen/master Minor typo and doxygen fixes/
,,0.1218,OpenDDS,Merge pull request from huangminghuang/master Third batch of memory leak fixes/Merge pull request from huangminghuang/master Several memory leak fixes/Fix memory leaks in tests/transport//
,,0.0716,OpenDDS,Merge pull request from huangminghuang/master Third batch of memory leak fixes/
,,0.0744,pljava,Fixed some gcjh compiler problems/Fixed bug occuring sporadically on re-entry./Fix of bug 915 and 916/
,,0.0636,pljava,Fixed bug causing primitive arrays to fail./
,,0.0833,pljava,Fixed bug# 1218/Fixed glitch that made GCJ compilation fail./
,,0.0702,pljava,Fixed bug bug# 1218/
,,0.1602,pljava,Dropped support for versions prior to 8.0. Fixed bug causing stack check failur when backend was called from thread other than main Fixed stability issue related to GC and MemoryContexts/
,,0.077,pljava,Fixed bug causing crash after fence rewrite when returning tuples./
,,0.1161,pljava,Reinstated Exception traces when log level >= DEBUG1 Merged Invocation and CallContext Cleanup and refactoring/
,,0.162,pljava,Dropped support for versions prior to 8.0. Fixed bug causing stack check failur when backend was called from thread other than main Fixed stability issue related to GC and MemoryContexts/
,,0.1583,pljava,Dropped support for versions prior to 8.0. Fixed bug causing stack check failur when backend was called from thread other than main Fixed stability issue related to GC and MemoryContexts/
,,0.162,pljava,Dropped support for versions prior to 8.0. Fixed bug causing stack check failur when backend was called from thread other than main Fixed stability issue related to GC and MemoryContexts/
,,0.1639,pljava,Dropped support for versions prior to 8.0. Fixed bug causing stack check failur when backend was called from thread other than main Fixed stability issue related to GC and MemoryContexts/
,,0.2247,pljava,Reinstated Exception traces when log level >= DEBUG1 Merged Invocation and CallContext Cleanup and refactoring/Dropped support for versions prior to 8.0. Fixed bug causing stack check failur when backend was called from thread other than main Fixed stability issue related to GC and MemoryContexts/
,,0.1546,pljava,Dropped support for versions prior to 8.0. Fixed bug causing stack check failur when backend was called from thread other than main Fixed stability issue related to GC and MemoryContexts/
,,0.1602,pljava,Dropped support for versions prior to 8.0. Fixed bug causing stack check failur when backend was called from thread other than main Fixed stability issue related to GC and MemoryContexts/
,,0.1161,pljava,Reinstated Exception traces when log level >= DEBUG1 Merged Invocation and CallContext Cleanup and refactoring/
,,0.1583,pljava,Dropped support for versions prior to 8.0. Fixed bug causing stack check failur when backend was called from thread other than main Fixed stability issue related to GC and MemoryContexts/
,,0.1583,pljava,Dropped support for versions prior to 8.0. Fixed bug causing stack check failur when backend was called from thread other than main Fixed stability issue related to GC and MemoryContexts/
,,0.2335,pljava,Reinstated Exception traces when log level >= DEBUG1 Merged Invocation and CallContext Cleanup and refactoring/Fixed bug causing crash after fence rewrite when returning tuples./Dropped support for versions prior to 8.0. Fixed bug causing stack check failur when backend was called from thread other than main Fixed stability issue related to GC and MemoryContexts/
,,0.235,pljava,Reinstated Exception traces when log level >= DEBUG1 Merged Invocation and CallContext Cleanup and refactoring/Fixed bug causing crash after fence rewrite when returning tuples./Dropped support for versions prior to 8.0. Fixed bug causing stack check failur when backend was called from thread other than main Fixed stability issue related to GC and MemoryContexts/
,,0.1639,pljava,Dropped support for versions prior to 8.0. Fixed bug causing stack check failur when backend was called from thread other than main Fixed stability issue related to GC and MemoryContexts/
,,0.2483,pljava,Reinstated Exception traces when log level >= DEBUG1 Merged Invocation and CallContext Cleanup and refactoring/Fixed bug causing crash after fence rewrite when returning tuples./Fixed typo/Dropped support for versions prior to 8.0. Fixed bug causing stack check failur when backend was called from thread other than main Fixed stability issue related to GC and MemoryContexts/Fixed bug that caused crash when initializing using incorrect pljava.classpath/
,,0.0828,pljava,Merge branch bug/REL1_5_STABLE-BASE/issue92 into REL1_5_STABLE/Merge branch bug/REL1_5_STABLE-BASE/issue92/Add test detecting issue 92./
,,0.0669,realm-java,Adjusted docs and examples to the refactoring (issue and issue
,,0.0648,realm-java,"WIP: Updated with float, double support. Still a crash./"
,,0.0588,realm-java,Fixes due to
,,0.0961,realm-java,"Implementation of SharedGroup::wait_for_change() method. (#2386) Goal 1. Add BaseRealm.waitForChange() which blocks until a change is available, then advance the Realm and continue without triggering RealmChangeListeners. 2. Add BaseRealm.stopWaitForChange() that makes any current waitForChange() return false immediately. 3. Deprecated BaseRealm.refresh(). Behaviors 1. waitForChange() will throw IllegalStateException within a transaction. 2. BaseRealm cannot wait in a thread with Looper. IllegalStateException will be thrown. 3. Once stopWaitForChange is called, all future calls to waitForChange will immediately return false. For detailed discussions, please refer pull request from realm/cm/bug/badversionexception Fix BadVersionException/Fixed race condition causing BadVersionException/"
,,0.0609,realm-java,Fixed unit tests./
,,0.0959,realm-java,SyncCredentials.accessToken + Integration tests (#4018) This PR adds support for SyncCredentials.accessToken() which is required for I also found a number of issues with the integration tests. They have been fixed as well./
,,0.0869,realm-java,SyncCredentials.accessToken + Integration tests (#4018) This PR adds support for SyncCredentials.accessToken() which is required for I also found a number of issues with the integration tests. They have been fixed as well./
,,0.0905,realm-java,SyncCredentials.accessToken + Integration tests (#4018) This PR adds support for SyncCredentials.accessToken() which is required for I also found a number of issues with the integration tests. They have been fixed as well./
,,0.0905,realm-java,SyncCredentials.accessToken + Integration tests (#4018) This PR adds support for SyncCredentials.accessToken() which is required for I also found a number of issues with the integration tests. They have been fixed as well./
,,0.0989,rocksdb,"Sun Studio support, and fix for test related memory fixes. LevelDB patch for Sun Studio Based on a patch submitted by Theo Schlossnagle thanks This fixes Issue 17. Fix a couple of test related memory leaks. git-svn-id: 62dab493-f737-651d-591e-8d6aee1b9529/"
,,0.0744,rocksdb,Merge pull request from pborreli/typos Fixed typos/Fixed typos/
,,0.0588,rocksdb,fixed conflict in java/Makefile/
,,0.0556,rocksdb,Merge pull request from dalgaaf/wip-da-SCA-20141001 Fix some issues from SCA/
,,0.0643,rocksdb,Fix build issues/
,,0.2484,rocksdb,"[RocksJava] 32-Bit adjustments Summary: Before this change overflowing size_t values led to a checked Exception. After that change: size_t overflows on 32-Bit architecture throw now an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly. This is especially an advantage for developers targeting 64-Bit systems because it is not necessary anymore to catch exceptions which are never thrown on a 64-Bit system. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.0957,rocksdb,[RocksJava] Raw use of parametrized class Resolved raw use of parametrized class issues./
,,0.2579,rocksdb,"[RocksJava] 32-Bit adjustments Summary: Before this change overflowing size_t values led to a checked Exception. After that change: size_t overflows on 32-Bit architecture throw now an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly. This is especially an advantage for developers targeting 64-Bit systems because it is not necessary anymore to catch exceptions which are never thrown on a 64-Bit system. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.0957,rocksdb,[RocksJava] Raw use of parametrized class Resolved raw use of parametrized class issues./
,,0.0957,rocksdb,[RocksJava] Raw use of parametrized class Resolved raw use of parametrized class issues./
,,0.2437,rocksdb,"[RocksJava] 32-Bit adjustments Summary: Before this change overflowing size_t values led to a checked Exception. After that change: size_t overflows on 32-Bit architecture throw now an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly. This is especially an advantage for developers targeting 64-Bit systems because it is not necessary anymore to catch exceptions which are never thrown on a 64-Bit system. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.308,rocksdb,"[RocksJava] Remove deprecated methods Summary: Removed deprecated ColumnFamilyDescript constructor methods Removed deprecated skipLogErrorOnRecovery methods Removed deprecated tableCacheRemoveScanCountLimit methods Test Plan: make rocksdbjava make jtest Reviewers: yhchiang, adamretter, ankgup87 Subscribers: dhruba Differential Revision: Removed deprecated skipLogErrorOnRecovery methods. As annonunced these options are not used anymore so these are removed from code./[RocksJava] 32-Bit adjustments Summary: Before this change overflowing size_t values led to a checked Exception. After that change: size_t overflows on 32-Bit architecture throw now an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly. This is especially an advantage for developers targeting 64-Bit systems because it is not necessary anymore to catch exceptions which are never thrown on a 64-Bit system. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision: Raw use of parametrized class Resolved raw use of parametrized class issues./"
,,0.2733,rocksdb,"[RocksJava] Remove deprecated methods Summary: Removed deprecated ColumnFamilyDescript constructor methods Removed deprecated skipLogErrorOnRecovery methods Removed deprecated tableCacheRemoveScanCountLimit methods Test Plan: make rocksdbjava make jtest Reviewers: yhchiang, adamretter, ankgup87 Subscribers: dhruba Differential Revision: Removed deprecated skipLogErrorOnRecovery methods. As annonunced these options are not used anymore so these are removed from code./[RocksJava] 32-Bit adjustments Summary: Before this change overflowing size_t values led to a checked Exception. After that change: size_t overflows on 32-Bit architecture throw now an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly. This is especially an advantage for developers targeting 64-Bit systems because it is not necessary anymore to catch exceptions which are never thrown on a 64-Bit system. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.25,rocksdb,"[RocksJava] 32-Bit adjustments Summary: Before this change overflowing size_t values led to a checked Exception. After that change: size_t overflows on 32-Bit architecture throw now an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly. This is especially an advantage for developers targeting 64-Bit systems because it is not necessary anymore to catch exceptions which are never thrown on a 64-Bit system. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.2405,rocksdb,"[RocksJava] 32-Bit adjustments Summary: Before this change overflowing size_t values led to a checked Exception. After that change: size_t overflows on 32-Bit architecture throw now an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly. This is especially an advantage for developers targeting 64-Bit systems because it is not necessary anymore to catch exceptions which are never thrown on a 64-Bit system. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.271,rocksdb,"[RocksJava] 32-Bit adjustments Summary: Before this change overflowing size_t values led to a checked Exception. After that change: size_t overflows on 32-Bit architecture throw now an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly. This is especially an advantage for developers targeting 64-Bit systems because it is not necessary anymore to catch exceptions which are never thrown on a 64-Bit system. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision: Raw use of parametrized class Resolved raw use of parametrized class issues./"
,,0.0919,rocksdb,"Lint everything Summary: ``` arc2 lint ``` run the linter on the whole code repo to fix exisitng lint issues Test Plan: make check Reviewers: sdong, rven, anthony, kradhakrishnan, yhchiang Reviewed By: yhchiang Subscribers: dhruba, leveldb Differential Revision:"
,,0.0899,rocksdb,"Lint everything Summary: ``` arc2 lint ``` run the linter on the whole code repo to fix exisitng lint issues Test Plan: make check Reviewers: sdong, rven, anthony, kradhakrishnan, yhchiang Reviewed By: yhchiang Subscribers: dhruba, leveldb Differential Revision:"
,,0.096,rocksdb,"Lint everything Summary: ``` arc2 lint ``` run the linter on the whole code repo to fix exisitng lint issues Test Plan: make check Reviewers: sdong, rven, anthony, kradhakrishnan, yhchiang Reviewed By: yhchiang Subscribers: dhruba, leveldb Differential Revision:"
,,0.4374,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.4336,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.4361,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.4164,rocksdb,"Fix Compilation errors when using IBM Java Summary: PR to fix this issue Closes Differential Revision: D4682411 Pulled By: siying fbshipit-source-id: a519be1/Expose DB::DeleteRange and WriteBath::DeleteRange in Java Summary: Added JNI wrapper from `DeleteRange` methods Closes Differential Revision: D4657746 Pulled By: yiwu-arbug fbshipit-source-id: 3fc7ab8/Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.3412,rocksdb,"Flink state Summary: This is to address the issue reported in The fix is simple. A typo. Closes Differential Revision: D5037149 Pulled By: siying fbshipit-source-id: 1bb585c7a753ef77c81c4b92deafbed8e21fe8ff/Fix CompactRange incorrect buffer release Summary: While running `make jtest` using IBM Java, it fails at compactRangeToLevel with the below error. ``` Run: org.rocksdb.RocksDBTest testing now compactRangeToLevel JVMJNCK056E JNI error in ReleaseByteArrayElements: Got memory 0x00003FFF94AA8908 from object 0x00000000000C7F78, releasing from 0x00000000000C7F68 JVMJNCK077E Error detected in org/rocksdb/RocksDB.compactRange0(J[BI[BIZII)V JVMJNCK024E JNI error detected. Aborting. JVMJNCK025I Use to continue running when errors are detected. Fatal error: JNI error Makefile:205: recipe for target run_test failed make[1]: *** [run_test] Error 87 make[1]: Leaving directory /home/ubuntu/rocksdb/java Makefile:1542: recipe for target jtest failed make: *** [jtest] Error 2 ``` After checking the code, it is vivid that we are messing up the `ReleaseByteArrayElements` args in `rocksdb_compactrange_helper`. ``` ................. 1959 s db->CompactRange(compact_options, &begin_slice, &end_slice); 1960 } Closes Differential Revision: D4831427 Pulled By: yiwu-arbug fbshipit-source-id: dd02037/Fix Compilation errors when using IBM Java Summary: PR to fix this issue Closes Differential Revision: D4682411 Pulled By: siying fbshipit-source-id: a519be1/Expose DB::DeleteRange and WriteBath::DeleteRange in Java Summary: Added JNI wrapper from `DeleteRange` methods Closes Differential Revision: D4657746 Pulled By: yiwu-arbug fbshipit-source-id: 3fc7ab8/Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.4387,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.4349,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.431,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.4243,rocksdb,"Expose DB::DeleteRange and WriteBath::DeleteRange in Java Summary: Added JNI wrapper from `DeleteRange` methods Closes Differential Revision: D4657746 Pulled By: yiwu-arbug fbshipit-source-id: 3fc7ab8/Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.4272,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.4413,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.4387,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.4206,rocksdb,"Expose DB::DeleteRange and WriteBath::DeleteRange in Java Summary: Added JNI wrapper from `DeleteRange` methods Closes Differential Revision: D4657746 Pulled By: yiwu-arbug fbshipit-source-id: 3fc7ab8/Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.44,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.4349,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.4336,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.4361,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.431,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.4336,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.4361,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.1302,rocksdb,Suppress lint in old files Summary: Grandfather in super old lint issues to make a clean slate for moving forward that allows us to have stronger enforcement on new issues. Reviewed By: yiwu-arbug Differential Revision: D6821806 fbshipit-source-id: 22797d31ec58e9eb0255d3b66fedfcfcb0dc127c/
,,0.1202,rocksdb,Suppress lint in old files Summary: Grandfather in super old lint issues to make a clean slate for moving forward that allows us to have stronger enforcement on new issues. Reviewed By: yiwu-arbug Differential Revision: D6821806 fbshipit-source-id: 22797d31ec58e9eb0255d3b66fedfcfcb0dc127c/
,,0.1119,rocksdb,Suppress lint in old files Summary: Grandfather in super old lint issues to make a clean slate for moving forward that allows us to have stronger enforcement on new issues. Reviewed By: yiwu-arbug Differential Revision: D6821806 fbshipit-source-id: 22797d31ec58e9eb0255d3b66fedfcfcb0dc127c/
