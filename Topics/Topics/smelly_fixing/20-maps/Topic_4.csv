Topic_no,Keywords,Contrib,System,Text
4,"block, change, table, pointer, pass, default, set, work, cache, case, property, move, index, make, cc, call, load, reference, format, global",0.0566,conscrypt,Switch EVP_CIPHER_CTX to new style Bug: 16656908 Change-Id: Id519c20474a02c70e72d362bc84d26855a74fa33/
,,0.0709,conscrypt,"Revert ""Add ExtendedSSLSession, et al."" This reverts commit 38d12ed4a7f6f7628120d0ef45ff29d472337102. This breaks the unbundled build because of OpenSSLExtendedSessionImpl. Change-Id: I73951a6f1d5cb14c70cd807c2c895bbbdc4c8e40/Revert ""Fix for OpenJdk SocketImpl."" This reverts commit da2733a716be6ef2325229dd372d17744daa6311. The OpenJdk implementation has been changed. Bug: 25805791/Fix for OpenJdk SocketImpl. OpenJdk sockets start their life with a null FileDescriptor. b/25805791 tracks fixing the SocketImpl Change-Id: Ia14afda04aa0a109f944c549719ad50bb3aeadab/"
,,0.0676,conscrypt,"Revert ""Add ExtendedSSLSession, et al."" This reverts commit 38d12ed4a7f6f7628120d0ef45ff29d472337102. This breaks the unbundled build because of OpenSSLExtendedSessionImpl. Change-Id: I73951a6f1d5cb14c70cd807c2c895bbbdc4c8e40/Pass peerHostname into checkServerTrusted Avoid using getHostname() because it can fallback to a reverse DNS lookup if peerHostname is not available. Change-Id: Id89f04103b15a02afc349fb2f28d80aa95cefe35/"
,,0.0926,conscrypt,Update more testing infrastructure. (#395) * Update testing build rules. * Move TestKeyStore to org.conscrypt. * Fix up a couple tests so they work in AOSP./
,,0.0891,conscrypt,Update more testing infrastructure. (#395) * Update testing build rules. * Move TestKeyStore to org.conscrypt. * Fix up a couple tests so they work in AOSP./
,,0.3139,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.3095,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.3066,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.3038,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.3124,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.3052,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.3066,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.0837,conscrypt,Clean up some ErrorProne warnings. (#493) * Add explicit charset to byte-to-String conversions. * Add to String.split() calls to make its behavior more intuitive. * Add a missing * Clarify an implicit int-to-byte conversion. * Switch StringBuffer to StringBuilder. * Inline an unnecessary function. * Stop depending on FileDescriptors toString./
,,0.0821,conscrypt,Clean up some ErrorProne warnings. (#493) * Add explicit charset to byte-to-String conversions. * Add to String.split() calls to make its behavior more intuitive. * Add a missing * Clarify an implicit int-to-byte conversion. * Switch StringBuffer to StringBuilder. * Inline an unnecessary function. * Stop depending on FileDescriptors toString./
,,0.1093,conscrypt,"Create ActiveSession during transitionTo() (#586) The SessionContext we should use in ActiveSession depends on whether the engine is in client or server mode, which we dont know until the handshake is started, so wait until handshake start to create it. As a bonus, this makes the comment for activeSession correct again. Also make closeInbound() the same as closeOutbound() where if you close it before the handshake starts it just closes the engine entirely. STATE_CLOSED_INBOUND is assumed to be a post-handshake state by a bunch of stuff, so we need to skip it. Fixes buffer allocators to ConscryptEngineSocket (#550) This allows users to set a buffer allocator for both the buffers used by ConscryptEngineSocket directly and the ones use by the enclosed ConscryptEngine. Fixes"
,,0.1166,conscrypt,"Update Provider installation in tests (#629) Change CertPinManagerTest and CTVerifierTest to only install the provider if its not installed already and check if the provider was installed before uninstalling. Otherwise, when running on the Android platform they will uninstall the platform copy of Conscrypt and break every following test./"
,,0.1094,conscrypt,"Add ServiceTester helper class (#661) We have a lot of tests that follow the same basic pattern of ""for all providers, for some/all algorithms of a given type, check {X, Y, Z}"". This introduces a helper object that handles the common parts (finding supported providers, matching errors to providers, etc) so the tests can focus on the test logic. This change also cleans up a bunch of minor test problems: * Test arrays with assertArraysEqual(), not assertTrue(Arrays.equal()) * Unusual formatting (extraneous blocks, etc.) * Unnecessary installing of BouncyCastleProvider in TestKeyStore/"
,,0.2475,conscrypt,"Move openjdk-integ-tests to common (#720) The tests in openjdk-integ-tests havent matched their name in a while: they test Conscrypt-specific features in places, we run them on platforms other than OpenJDK, and theyre a combination of integration, unit, and regression tests. To ease confusion, move them into common alongside other common tests. Their package names (eg, org.conscrypt.java.security) will still indicate that theyre testing the overall interface rather than Conscrypt-specific classes, but it should be more clear that theyre just part of the overall testing scheme of Conscrypt on all platforms. As part of this, remove the architecture-specific test rules in openjdk and only test on the preferred architecture. The additional test classes increase the running time of the test rule to multiple minutes, and neither the new nor the old tests are obviously architecture-sensitive. In the rare case where its desired to test on multiple architectures, we can run the test rule twice in different configurations. We also change the existing OpenJDK tests to run in a suite that installs Conscrypt before running. This works better with the new tests and makes the tests not need to manage provider installation themselves. As part of this, also remove calls to TestUtils methods that need the Conscrypt provider to be installed during static initialization; during static initialization, the provider isnt installed and having those calls makes TLS tests fail on OpenJDK 11./"
,,0.2537,conscrypt,"Move openjdk-integ-tests to common (#720) The tests in openjdk-integ-tests havent matched their name in a while: they test Conscrypt-specific features in places, we run them on platforms other than OpenJDK, and theyre a combination of integration, unit, and regression tests. To ease confusion, move them into common alongside other common tests. Their package names (eg, org.conscrypt.java.security) will still indicate that theyre testing the overall interface rather than Conscrypt-specific classes, but it should be more clear that theyre just part of the overall testing scheme of Conscrypt on all platforms. As part of this, remove the architecture-specific test rules in openjdk and only test on the preferred architecture. The additional test classes increase the running time of the test rule to multiple minutes, and neither the new nor the old tests are obviously architecture-sensitive. In the rare case where its desired to test on multiple architectures, we can run the test rule twice in different configurations. We also change the existing OpenJDK tests to run in a suite that installs Conscrypt before running. This works better with the new tests and makes the tests not need to manage provider installation themselves. As part of this, also remove calls to TestUtils methods that need the Conscrypt provider to be installed during static initialization; during static initialization, the provider isnt installed and having those calls makes TLS tests fail on OpenJDK 11./"
,,0.0661,Frostwire,[android] Avoid load of non existent resources for colors (no more warning log from android)/
,,0.0751,Frostwire,[android] rare NPE on BaseActivity/
,,0.0636,Frostwire,[android] ANR fix. Dont scan files on main thread/
,,0.0657,Frostwire,[android] possible Index out of bound exception (now that its not synchronized)/
,,0.0599,Frostwire,[common] fix YT prefix offset index/
,,0.066,Frostwire,[android] avoid static leak on ImageCache.flush()/
,,0.0643,Frostwire,[android] avert crash on MoPub interstitial destruction/
,,0.0701,javacpp,* Fixed `Pointer.equals(null)` throwing `NullPointerException` (issue * would erroneously prevent `sizeof()` operations from getting generated/
,,0.0846,javacpp,"* Added `public long Pointer.address()` getter method, useful when one needs to subtract two pointers * Removed old NetBeans project files that cause a conflict when trying to open as a Maven project (issue javacv:210)/"
,,0.1437,javacpp,"* Added a `platform.library.path` property, such as ""lib/armeabi/"" in the case of the ""android-arm"" platform, to be used instead of ""package/platform"" (issue javacv:427) * Generalized references to the path of the Android NDK * Improved a few small things in the set of `Pointer` classes`/"
,,0.1437,javacpp,"* Added a `platform.library.path` property, such as ""lib/armeabi/"" in the case of the ""android-arm"" platform, to be used instead of ""package/platform"" (issue javacv:427) * Generalized references to the path of the Android NDK * Improved a few small things in the set of `Pointer` classes`/"
,,0.1402,javacpp,"* Added a `platform.library.path` property, such as ""lib/armeabi/"" in the case of the ""android-arm"" platform, to be used instead of ""package/platform"" (issue javacv:427) * Generalized references to the path of the Android NDK * Improved a few small things in the set of `Pointer` classes`/"
,,0.1437,javacpp,"* Added a `platform.library.path` property, such as ""lib/armeabi/"" in the case of the ""android-arm"" platform, to be used instead of ""package/platform"" (issue javacv:427) * Generalized references to the path of the Android NDK * Improved a few small things in the set of `Pointer` classes`/"
,,0.142,javacpp,"* Added a `platform.library.path` property, such as ""lib/armeabi/"" in the case of the ""android-arm"" platform, to be used instead of ""package/platform"" (issue javacv:427) * Generalized references to the path of the Android NDK * Improved a few small things in the set of `Pointer` classes`/"
,,0.1437,javacpp,"* Added a `platform.library.path` property, such as ""lib/armeabi/"" in the case of the ""android-arm"" platform, to be used instead of ""package/platform"" (issue javacv:427) * Generalized references to the path of the Android NDK * Improved a few small things in the set of `Pointer` classes`/"
,,0.1455,javacpp,"* Added a `platform.library.path` property, such as ""lib/armeabi/"" in the case of the ""android-arm"" platform, to be used instead of ""package/platform"" (issue javacv:427) * Generalized references to the path of the Android NDK * Improved a few small things in the set of `Pointer` classes`/"
,,0.1473,javacpp,"* Added a `platform.library.path` property, such as ""lib/armeabi/"" in the case of the ""android-arm"" platform, to be used instead of ""package/platform"" (issue javacv:427) * Generalized references to the path of the Android NDK * Improved a few small things in the set of `Pointer` classes`/"
,,0.1455,javacpp,"* Added a `platform.library.path` property, such as ""lib/armeabi/"" in the case of the ""android-arm"" platform, to be used instead of ""package/platform"" (issue javacv:427) * Generalized references to the path of the Android NDK * Improved a few small things in the set of `Pointer` classes`/"
,,0.1278,javacpp,"* Added a `platform.library.path` property, such as ""lib/armeabi/"" in the case of the ""android-arm"" platform, to be used instead of ""package/platform"" (issue javacv:427) * Generalized references to the path of the Android NDK * Improved a few small things in the set of `Pointer` classes`/ * Annotations such as or are no longer ignored on parameters of getters or setters annotated with * Fixed some other corner cases in `Generator` * Added for convenience to `PointerPointer` a generic parameter `<P extends Pointer>` and the associated `get(Class<P> ...)` getters, as well as `String` getters and setters * Passing a `Class` object as first argument to a native method that returns a `Pointer` now determines the runtime type of that returned object/"
,,0.1473,javacpp,"* Added a `platform.library.path` property, such as ""lib/armeabi/"" in the case of the ""android-arm"" platform, to be used instead of ""package/platform"" (issue javacv:427) * Generalized references to the path of the Android NDK * Improved a few small things in the set of `Pointer` classes`/"
,,0.1437,javacpp,"* Added a `platform.library.path` property, such as ""lib/armeabi/"" in the case of the ""android-arm"" platform, to be used instead of ""package/platform"" (issue javacv:427) * Generalized references to the path of the Android NDK * Improved a few small things in the set of `Pointer` classes`/"
,,0.0692,javacpp,"* Log when `Pointer.deallocator` gets registered, garbage collected, or deallocated manually, if `Logger.isDebugEnabled()` (redirectable to SLF4J) * Make `Pointer implements AutoCloseable` to let us try-with-resources, thus bumping requirements to Java SE 7 and Android 4.0/"
,,0.073,javacpp,* Take into account `Buffer.arrayOffset()` when creating a `Pointer` from a buffer backed by an array (issue bytedeco/javacv#190)/
,,0.1065,javacpp,"* Take into account `Buffer.arrayOffset()` when creating a `Pointer` from a buffer backed by an array (issue bytedeco/javacv#190)/ * Adjust `BytePointer`, `CharPointer`, `IntPointer`, and `StringAdapter` to work with data strings that are not null-terminated (issue"
,,0.0751,javacpp,* Take into account `Buffer.arrayOffset()` when creating a `Pointer` from a buffer backed by an array (issue bytedeco/javacv#190)/
,,0.11199999999999999,javacpp,"* Take into account `Buffer.arrayOffset()` when creating a `Pointer` from a buffer backed by an array (issue bytedeco/javacv#190)/ * Adjust `BytePointer`, `CharPointer`, `IntPointer`, and `StringAdapter` to work with data strings that are not null-terminated (issue"
,,0.1139,javacpp,"* Take into account `Buffer.arrayOffset()` when creating a `Pointer` from a buffer backed by an array (issue bytedeco/javacv#190)/ * Adjust `BytePointer`, `CharPointer`, `IntPointer`, and `StringAdapter` to work with data strings that are not null-terminated (issue"
,,0.0772,javacpp,* Take into account `Buffer.arrayOffset()` when creating a `Pointer` from a buffer backed by an array (issue bytedeco/javacv#190)/
,,0.0833,javacpp,* Take into account `Buffer.arrayOffset()` when creating a `Pointer` from a buffer backed by an array (issue bytedeco/javacv#190)/
,,0.1261,javacpp,"* Accelerate call to `Pointer.physicalBytes()` on Linux (issue * Add ""org.bytedeco.javacpp.maxphysicalbytes"" system property to force calls to `System.gc()` based on `Pointer.physicalBytes()` * Allow strings ending with ""t"", ""g"", ""m"", etc to specify the number of bytes in system properties (issue synchronization of memory allocation to avoid `OutOfMemoryError` when low on memory/ * Synchronize memory allocation in `Pointer` when low on memory to avoid `OutOfMemoryError`/"
,,0.0823,javacpp,* Let `Pointer` log debug messages when forced to call `System.gc()`/
,,0.0636,jna,fix bug where struct is incorrectly passed by value instead of by reference git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix NPE git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0597,OpenDDS,Merge pull request from simpsont-oci/fix_multi_transport_messenger_test Fix multi-transport Messenger test/
,,0.0804,pljava,Fixed bug that caused crash when initializing using incorrect pljava.classpath/
,,0.1156,pljava,"Changes are required because of move of GETSTRUCT() and timeout handling framework changes done in PG 9.3. Along with that I fixes minor issue in DDRProcessor.java that is causing ""illegal start of expression"" error. Maven did not worked for me to build it and hang endlessly while building c source code (pljava-so). As a workaround I temporarily fixed makefiles to test PG9.3 related fix that seems worked and generated pljava.jar and pljava.so files and their basic sanity seems working fine./"
,,0.1448,pljava,"Workaround Windows creating_extension visibility. Should now detect (in most cases?) when an extension is being created, even in versions where creating_extension isnt visible in Windows. Test depends on seeing the command in ActivePortal; I am not sure what contexts could be contrived where that wouldnt work right, but ordinary foreseeable cases seem to work. Got rid of pljavaInExtension: the idea that two cases have to be distinguished (loading PL/Java itself as an extension, or using it in the creation of some other extension) was sound, but the second case isnt something that can be checked once at load time; it needs a backend function that sqlj.install_jar can invoke whenever needed./"
,,0.066,pljava,"Merge pull request from tada/chore/master/javadoc8 Could as well have been called a bug, because javadoc 8 lint _stops_ `mvn site`./"
,,0.066,pljava,"Merge pull request from tada/chore/master/javadoc8 Could as well have been called a bug, because javadoc 8 lint _stops_ `mvn site`./"
,,0.1137,pljava,"Dont leave SET ROLE broken after DDR execution. Comments in miscinit.c suggest the PostgreSQL team considers {Get,Set}UserIdAndContext to be obsolete API kept around only for PL/Java, with {Get,Set}UserIdAndSecContext being the preferred newer API. Something for another day..../"
,,0.0681,pljava,"Merge pull request from tada/chore/master/javadoc8 Could as well have been called a bug, because javadoc 8 lint _stops_ `mvn site`./"
,,0.0681,pljava,"Merge pull request from tada/chore/master/javadoc8 Could as well have been called a bug, because javadoc 8 lint _stops_ `mvn site`./"
,,0.7093,pljava,"Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and but serviceable way to set byte order. Addresses issue There really hasnt been a document that just lays out in detail how PL/Javas data coercions are chosen and especially how the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered, while documenting that, the reason Point was showing bogus values (noted in pull request comments) ... byte order ... leading to a last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing byte order to be selected. (It has to be selectable, not just fixed, in case PL/Java gets updated at a site that has a bunch of data stored under the old byte order. A switch allows dumping with the old order, then reloading with the new. In fact, by choosing a different byte order for each conversion direction, it is possible ... carefully ... to update in place.) A flag is passed to SQLInputFromChunk_create and SQLOutputFromChunk_create to indicate whether the type is a java-based scalar (otherwise, it is a non-composite mirror), and this allows byte order to be specified separately for scalars and mirrors: historically, it was always bigendian regardless of architecture. Presumably that has never mattered much for java-based scalars (because PostgreSQL itself doesnt have any independent way of seeing into them, so no inconsistency was visible), but for a mirror type it is definitely broken if the hardware is not bigendian, with PostgreSQL and Java not seeing the values the same way. Therefore, this change leaves the scalar default (for 1.5.0 at least) at bigendian, in case some sites may have used Java-based scalars in the past and have tables that contain them. Also, the current UDT implementation gives every scalar type a binary send/receive/COPY format that cant (yet) be decoupled from its internal stored form, and the PostgreSQL docs specify big-endian for those binary transfer formats, so it would be premature to change the scalar byte-order default before it is also possible to have a separate transfer format. For mirror types, on the other hand, the default is here immediately changed to native ... it is less likely that sites were heavily using mirror UDTs if they were seeing bogus values, and this will make them work right by default. Java properties are used (set with in the pljava.vmoptions GUC): org.postgresql.pljava.udt.byteorder to set everything the same, org.postgresql.pljava.udt.byteorder.scalar org.postgresql.pljava.udt.byteorder.mirror to set them separately. The allowable values for each property are big_endian, little_endian, and native. Even finer-grained control is available with: org.postgresql.pljava.udt.byteorder.scalar.p2j org.postgresql.pljava.udt.byteorder.scalar.j2p org.postgresql.pljava.udt.byteorder.mirror.p2j org.postgresql.pljava.udt.byteorder.mirror.j2p for a very special purpose, should someone wish to attempt an UPDATE where within a session, a column with values written in one order gets rewritten in another, a fiddly and somewhat unnerving process that turns out to actually work, and has a full new page documenting it now./"
,,0.6586,pljava,"Merge branch chore/master/java7ify Bump the minimum Java to 7 and begin adopting Java 7 features in places where the fruit hangs low./No more standard charset lookups by name. Rethink use of java.util.Scanner to slurp data ... its very convenient, but part of the reason is it swallows IOExceptions. If you add the extra lines of code to hang onto the reference and call its ioException() method to see if something went wrong, the brevity advantage slips away./Merge branch doc/REL1_5_STABLE/clarify into REL1_5_STABLE Clarifies permissions needed for self-extractor, and the CREATE-EXTENSION-failed-because-new-session-needed message, as Daniel Blanch Bataller suggested./Make create-extension-didnt message clearer. The only error message resulting from a CREATE EXTENSION attempt that failed (because the library had been loaded before in the session, therefore LOAD was a no-op) is one about a table that already exists. But the name of the table appears in the error message, so the table may as well be named ""see doc: do CREATE EXTENSION PLJAVA in new session"" which may serve to get the point across./Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and but serviceable way to set byte order. Addresses issue There really hasnt been a document that just lays out in detail how PL/Javas data coercions are chosen and especially how the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered, while documenting that, the reason Point was showing bogus values (noted in pull request comments) ... byte order ... leading to a last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing byte order to be selected. (It has to be selectable, not just fixed, in case PL/Java gets updated at a site that has a bunch of data stored under the old byte order. A switch allows dumping with the old order, then reloading with the new. In fact, by choosing a different byte order for each conversion direction, it is possible ... carefully ... to update in place.) A flag is passed to SQLInputFromChunk_create and SQLOutputFromChunk_create to indicate whether the type is a java-based scalar (otherwise, it is a non-composite mirror), and this allows byte order to be specified separately for scalars and mirrors: historically, it was always bigendian regardless of architecture. Presumably that has never mattered much for java-based scalars (because PostgreSQL itself doesnt have any independent way of seeing into them, so no inconsistency was visible), but for a mirror type it is definitely broken if the hardware is not bigendian, with PostgreSQL and Java not seeing the values the same way. Therefore, this change leaves the scalar default (for 1.5.0 at least) at bigendian, in case some sites may have used Java-based scalars in the past and have tables that contain them. Also, the current UDT implementation gives every scalar type a binary send/receive/COPY format that cant (yet) be decoupled from its internal stored form, and the PostgreSQL docs specify big-endian for those binary transfer formats, so it would be premature to change the scalar byte-order default before it is also possible to have a separate transfer format. For mirror types, on the other hand, the default is here immediately changed to native ... it is less likely that sites were heavily using mirror UDTs if they were seeing bogus values, and this will make them work right by default. Java properties are used (set with in the pljava.vmoptions GUC): org.postgresql.pljava.udt.byteorder to set everything the same, org.postgresql.pljava.udt.byteorder.scalar org.postgresql.pljava.udt.byteorder.mirror to set them separately. The allowable values for each property are big_endian, little_endian, and native. Even finer-grained control is available with: org.postgresql.pljava.udt.byteorder.scalar.p2j org.postgresql.pljava.udt.byteorder.scalar.j2p org.postgresql.pljava.udt.byteorder.mirror.p2j org.postgresql.pljava.udt.byteorder.mirror.j2p for a very special purpose, should someone wish to attempt an UPDATE where within a session, a column with values written in one order gets rewritten in another, a fiddly and somewhat unnerving process that turns out to actually work, and has a full new page documenting it now./Rework extension wrappers slightly. Instead of different ad-hoc ways of detecting the already-LOADed no-op issue for different CREATE EXTENSION cases, have the LOAD- invoked code always drop the loadpath table, so all extension scripts can use the same approach to force an error if it didnt happen./Change default USAGE grant for java. Ok, it seems that another change to the PostgreSQL large object APIs happened in PG 9.0: large objects got ACLs. Before that, anybody could access them. In PL/Java, anybody still can. :( The ideal accommodation on PL/Javas side will be to retarget PL/Javas LargeObject code from the PG inv_api.c layer to the be-fsstubs.c layer (if something doesnt make that prohibitively difficult), because thats where the 9.0+ access checks happen. Otherwise, the checking code needs to be duplicated in PL/Java. The fsstubs layer has only-good-within-one-transaction semantics. Happily, thats all thats expected for the JDBC *LOB interfaces, which presumably are the public API this stuff should ultimately have. Too involved for 1.5.0. However, this is a good argument for a least- privilege, no-public-by-default installation of the java language, documenting how GRANT USAGE can then be used to allow specific users/roles to make PL/Java functions. Moral: this wasnt a problem before 9.0, when everybody knew LOBs had no access controls. It became a problem when PG added access controls for them, and PL/Java didnt follow suit. Whats a trusted language today could need adjustments tomorrow, so no-public-usage-by-default really seems like the best posture; the user/installer should always be encouraged to follow the least privilege principle./"
,,0.1017,pljava,Merge branch chore/master/java7ify Bump the minimum Java to 7 and begin adopting Java 7 features in places where the fruit hangs low./
,,0.1017,pljava,Merge branch chore/master/java7ify Bump the minimum Java to 7 and begin adopting Java 7 features in places where the fruit hangs low./
,,0.7215,pljava,"Merge branch chore/master/java7ify Bump the minimum Java to 7 and begin adopting Java 7 features in places where the fruit hangs low./No more standard charset lookups by name. Rethink use of java.util.Scanner to slurp data ... its very convenient, but part of the reason is it swallows IOExceptions. If you add the extra lines of code to hang onto the reference and call its ioException() method to see if something went wrong, the brevity advantage slips away./Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and but serviceable way to set byte order. Addresses issue There really hasnt been a document that just lays out in detail how PL/Javas data coercions are chosen and especially how the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered, while documenting that, the reason Point was showing bogus values (noted in pull request comments) ... byte order ... leading to a last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing byte order to be selected. (It has to be selectable, not just fixed, in case PL/Java gets updated at a site that has a bunch of data stored under the old byte order. A switch allows dumping with the old order, then reloading with the new. In fact, by choosing a different byte order for each conversion direction, it is possible ... carefully ... to update in place.) A flag is passed to SQLInputFromChunk_create and SQLOutputFromChunk_create to indicate whether the type is a java-based scalar (otherwise, it is a non-composite mirror), and this allows byte order to be specified separately for scalars and mirrors: historically, it was always bigendian regardless of architecture. Presumably that has never mattered much for java-based scalars (because PostgreSQL itself doesnt have any independent way of seeing into them, so no inconsistency was visible), but for a mirror type it is definitely broken if the hardware is not bigendian, with PostgreSQL and Java not seeing the values the same way. Therefore, this change leaves the scalar default (for 1.5.0 at least) at bigendian, in case some sites may have used Java-based scalars in the past and have tables that contain them. Also, the current UDT implementation gives every scalar type a binary send/receive/COPY format that cant (yet) be decoupled from its internal stored form, and the PostgreSQL docs specify big-endian for those binary transfer formats, so it would be premature to change the scalar byte-order default before it is also possible to have a separate transfer format. For mirror types, on the other hand, the default is here immediately changed to native ... it is less likely that sites were heavily using mirror UDTs if they were seeing bogus values, and this will make them work right by default. Java properties are used (set with in the pljava.vmoptions GUC): org.postgresql.pljava.udt.byteorder to set everything the same, org.postgresql.pljava.udt.byteorder.scalar org.postgresql.pljava.udt.byteorder.mirror to set them separately. The allowable values for each property are big_endian, little_endian, and native. Even finer-grained control is available with: org.postgresql.pljava.udt.byteorder.scalar.p2j org.postgresql.pljava.udt.byteorder.scalar.j2p org.postgresql.pljava.udt.byteorder.mirror.p2j org.postgresql.pljava.udt.byteorder.mirror.j2p for a very special purpose, should someone wish to attempt an UPDATE where within a session, a column with values written in one order gets rewritten in another, a fiddly and somewhat unnerving process that turns out to actually work, and has a full new page documenting it now./"
,,0.7205,pljava,"Merge branch chore/master/java7ify Bump the minimum Java to 7 and begin adopting Java 7 features in places where the fruit hangs low./No more standard charset lookups by name. Rethink use of java.util.Scanner to slurp data ... its very convenient, but part of the reason is it swallows IOExceptions. If you add the extra lines of code to hang onto the reference and call its ioException() method to see if something went wrong, the brevity advantage slips away./Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and but serviceable way to set byte order. Addresses issue There really hasnt been a document that just lays out in detail how PL/Javas data coercions are chosen and especially how the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered, while documenting that, the reason Point was showing bogus values (noted in pull request comments) ... byte order ... leading to a last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing byte order to be selected. (It has to be selectable, not just fixed, in case PL/Java gets updated at a site that has a bunch of data stored under the old byte order. A switch allows dumping with the old order, then reloading with the new. In fact, by choosing a different byte order for each conversion direction, it is possible ... carefully ... to update in place.) A flag is passed to SQLInputFromChunk_create and SQLOutputFromChunk_create to indicate whether the type is a java-based scalar (otherwise, it is a non-composite mirror), and this allows byte order to be specified separately for scalars and mirrors: historically, it was always bigendian regardless of architecture. Presumably that has never mattered much for java-based scalars (because PostgreSQL itself doesnt have any independent way of seeing into them, so no inconsistency was visible), but for a mirror type it is definitely broken if the hardware is not bigendian, with PostgreSQL and Java not seeing the values the same way. Therefore, this change leaves the scalar default (for 1.5.0 at least) at bigendian, in case some sites may have used Java-based scalars in the past and have tables that contain them. Also, the current UDT implementation gives every scalar type a binary send/receive/COPY format that cant (yet) be decoupled from its internal stored form, and the PostgreSQL docs specify big-endian for those binary transfer formats, so it would be premature to change the scalar byte-order default before it is also possible to have a separate transfer format. For mirror types, on the other hand, the default is here immediately changed to native ... it is less likely that sites were heavily using mirror UDTs if they were seeing bogus values, and this will make them work right by default. Java properties are used (set with in the pljava.vmoptions GUC): org.postgresql.pljava.udt.byteorder to set everything the same, org.postgresql.pljava.udt.byteorder.scalar org.postgresql.pljava.udt.byteorder.mirror to set them separately. The allowable values for each property are big_endian, little_endian, and native. Even finer-grained control is available with: org.postgresql.pljava.udt.byteorder.scalar.p2j org.postgresql.pljava.udt.byteorder.scalar.j2p org.postgresql.pljava.udt.byteorder.mirror.p2j org.postgresql.pljava.udt.byteorder.mirror.j2p for a very special purpose, should someone wish to attempt an UPDATE where within a session, a column with values written in one order gets rewritten in another, a fiddly and somewhat unnerving process that turns out to actually work, and has a full new page documenting it now./"
,,0.0792,pljava,"Handle widening of portalPos and demise of posOverflow. No need for version conditionals around isPosOverflow: it isnt in an API class, and nothing in this code base uses it, so out it goes. This eliminates the other compile-time error that was blocking compilation for PG 9.6, but its not the last thing to have had its width changed./"
,,0.1501,pljava,"Initialize more lazily in background workers. In a background worker (in particular, one running ParallelWorkerMain), PL/Javas _PG_init can get called even if the parallel query being executed makes no reference to PL/Java functions. Thats because ParallelWorkerMain makes sure the same libraries are loaded that were present in the lead process, so if it had loaded PL/Java at any time, it gets loaded in the background worker ... quite early, and _PG_init gets called before much of the state it wants to look at has been set up. Detect that case and bail from the initsequencer as soon as possible (right after defining the custom GUCs), leaving all the rest to be completed when (if) any actual call arrives at the call handler. This prevents a baffling failure in parallel queries that make no use of PL/Java; even better, it also avoids starting JVMs unnecessarily in parallel queries that arent going to use them./"
,,0.0645,realm-java,"Used the ""short"" low-level methods by appropriate methods (issue"
,,0.0599,realm-java,Merge pull request from kneth/master Use java.io.IOException/Use java.io.IOException./
,,0.0648,realm-java,Merge pull request from rmekdma/patch-1 Fix migration example description/
,,0.1802,rocksdb,"Fix UnmarkEOF for partial blocks Summary: Blocks in the transaction log are a fixed size, but the last block in the transaction log file is usually a partial block. When a new record is added after the reader hit the end of the file, a new physical record will be appended to the last block. ReadPhysicalRecord can only read full blocks and assumes that the file position indicator is aligned to the start of a block. If the reader is forced to read further by simply clearing the EOF flag, ReadPhysicalRecord will read a full block starting from somewhere in the middle of a real block, causing it to lose alignment and to have a partial physical record at the end of the read buffer. This will result in length mismatches and checksum failures. When the log file is tailed for replication this will cause the log iterator to become invalid, necessitating the creation of a new iterator which will have to read the log file from scratch. This diff fixes this issue by reading the remaining portion of the last block we read from. This is done when the reader is forced to read further (UnmarkEOF is called). Test Plan: Added unit tests Stress test (with replication). Check dbdir/LOG file for corruptions. Test on test tier Reviewers: emayanke, haobo, dhruba Reviewed By: haobo CC: vamsi, sheki, dhruba, kailiu, igor Differential Revision:"
,,0.1397,rocksdb,"Enhance partial merge to support multiple arguments Summary: * PartialMerge api now takes a list of operands instead of two operands. * Add min_pertial_merge_operands to Options, indicating the minimum number of operands to trigger partial merge. * This diff is based on Schalks previous diff (D14601), but it also includes necessary changes such as updating the pure C api for partial merge. Test Plan: * make check all * develop tests for cases where partial merge takes more than two operands. TODOs (from Schalk): * Add test with min_partial_merge_operands > 2. * Perform benchmarks to measure the performance improvements (can probably use results of task * Add description of problem to doc/index.html. * Change wiki pages to reflect the interface changes. Reviewers: haobo, igor, vamsi Reviewed By: haobo CC: leveldb, dhruba Differential Revision:"
,,0.1487,rocksdb,"Enhance partial merge to support multiple arguments Summary: * PartialMerge api now takes a list of operands instead of two operands. * Add min_pertial_merge_operands to Options, indicating the minimum number of operands to trigger partial merge. * This diff is based on Schalks previous diff (D14601), but it also includes necessary changes such as updating the pure C api for partial merge. Test Plan: * make check all * develop tests for cases where partial merge takes more than two operands. TODOs (from Schalk): * Add test with min_partial_merge_operands > 2. * Perform benchmarks to measure the performance improvements (can probably use results of task * Add description of problem to doc/index.html. * Change wiki pages to reflect the interface changes. Reviewers: haobo, igor, vamsi Reviewed By: haobo CC: leveldb, dhruba Differential Revision:"
,,0.0789,rocksdb,"Materialize the hash index Summary: Materialize the hash index to avoid the soaring cpu/flash usage when initializing the database. Test Plan: existing unit tests passed Reviewers: sdong, haobo Reviewed By: sdong CC: leveldb Differential Revision:"
,,0.077,rocksdb,"Materialize the hash index Summary: Materialize the hash index to avoid the soaring cpu/flash usage when initializing the database. Test Plan: existing unit tests passed Reviewers: sdong, haobo Reviewed By: sdong CC: leveldb Differential Revision:"
,,0.0965,rocksdb,"[RocksJava] ColumnFamily name JNI correction Summary: Previous to this commit there was a problem with unterminated String usage as jByteArrays are not zero terminated. Test Plan: make rocksdbjava make jtest mvn rocksjni.pom package Reviewers: yhchiang, adamretter, ankgup87 Subscribers: dhruba Differential Revision: ColumnFamily name JNI correction Previous to this commit there was a problem with unterminated String usage as jByteArrays are not zero terminated./"
,,0.369,rocksdb,"Fixed a dependency issue of ThreadLocalPtr Summary: When a child thread that uses ThreadLocalPtr, ThreadLocalPtr::OnThreadExit will be called when that child thread is destroyed. However, OnThreadExit will try to access a static singleton of ThreadLocalPtr, which will be destroyed when the main thread exit. As a result, when a child thread that uses ThreadLocalPtr exits AFTER the main thread exits, illegal memory access will occur. This diff includes a test that reproduce this legacy bug. AddressSanitizer: heap-use-after-free on address 0x608000007fa0 at pc 0x959b79 bp 0x7f5fa7426b60 sp 0x7f5fa7426b58 READ of size 8 at 0x608000007fa0 thread T1 This patch fix this issue by having the thread local mutex never be deleted (but will leak small piece of memory at the end.) The patch also describe a better solution (thread_local) in the comment that requires gcc 4.8.1 and in latest clang as a future work once we agree to move toward gcc 4.8. Test Plan: COMPILE_WITH_ASAN=1 make thread_local_test ./thread_local_test Reviewers: anthony, hermanlee4, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision: the destruction order of PosixEnv and ThreadLocalPtr Summary: By default, RocksDB initializes the singletons of ThreadLocalPtr first, then initializes PosixEnv via static initializer. Destructor terminates objects in reverse order, so terminating PosixEnv (calling pthread_mutex_lock), then ThreadLocal (calling pthread_mutex_destroy). However, in certain case, application might initialize PosixEnv first, then ThreadLocalPtr. This will cause core dump at the end of the program (eg. This patch fix this issue by ensuring the destruction order by moving the global static singletons to function static singletons. Since function static singletons are initialized when the function is first called, this property allows us invoke to enforce the construction of the static PosixEnv and the singletons of ThreadLocalPtr by calling the function where the ThreadLocalPtr singletons belongs right before we initialize the static PosixEnv. Test Plan: Verified in the MyRocks. Reviewers: yoshinorim, IslamAbdelRahman, rven, kradhakrishnan, anthony, sdong, MarkCallaghan Reviewed By: anthony Subscribers: dhruba, leveldb Differential Revision:"
,,0.0704,rocksdb,"Merge pull request from warrenfalk/capi_full_bloom Fix for Support creation of ""full"" format bloom filter from C API/"
,,0.1889,rocksdb,"ldb load, prefer ifsteam(/dev/stdin) to std::cin (#1207) getline on std::cin can be very inefficient when ldb is loading large values, with high CPU usage in libc _IO_(un)getc, this is because of the performance penalty that comes from synchronizing stdio and iostream buffers. See the reproducers and tests in . If an ifstream on /dev/stdin is used (when available) then using ldb to load large values can be much more efficient. I thought for ldb load, that this approach is preferable to using or std::ios_base::sync_with_stdio(false). I couldnt think of a use case where ldb load would need to support reading unbuffered input, an alternative approach would be to add support for passing I have a CLA in place, thanks. The CI tests were failing at the time of so this change and PR will supersede it./LDBCommand::SelectCommand to use a struct as the parameter Summary: The function wrapper for LDBCommand::SelectCommand is too long so that Windows build fails with warning ""decorated name length exceeded, name was truncated"". Shrink the length by using a struct. Test Plan: Build on both of Linux and Windows and make sure the warning doesnt show in either platform. Reviewers: andrewkr, adsharma, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: leveldb, andrewkr, dhruba Differential Revision: to move from template to function wrapper Summary: Build failure with some compiler setting with tools/reduce_levels_test.cc:97: undefined reference to `rocksdb::LDBCommand* rocksdb::LDBCommand::InitFromCmdLineArgs<rocksdb::LDBCommand* (*)(std::string const&, std::vector<std::string, std::allocator<std::string> > const&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&, std::vector<std::string, std::allocator<std::string> > const&)>(std::vector<std::string, std::allocator<std::string> > const&, rocksdb::Options const&, rocksdb::LDBOptions const&, std::vector<rocksdb::ColumnFamilyDescriptor, std::allocator<rocksdb::ColumnFamilyDescriptor> > const*, rocksdb::LDBCommand* (*)(std::string const&, std::vector<std::string, std::allocator<std::string> > const&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&, std::vector<std::string, std::allocator<std::string> > const&)) Fix it by changing to function pointer instead Test Plan: Run all existing tests Reviewers: andrewkr, kradhakrishnan, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: adsharma, lightmark, yiwu, leveldb, andrewkr, dhruba Differential Revision:"
,,0.2691,rocksdb,"util: Fix coverity issues Summary: util/concurrent_arena.h: CID 1396145 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member free_begin_ is not initialized in this constructor nor in any functions that it calls. 94 Shard() : allocated_and_unused_(0) {} util/dynamic_bloom.cc: 1. Condition hash_func NULL, taking true branch. CID 1322821 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 3. uninit_member: Non-static class member data_ is not initialized in this constructor nor in any functions that it calls. 47 hash_func_(hash_func nullptr ? &BloomHash : hash_func) {} 48 util/file_reader_writer.h: 204 private: 205 AlignedBuffer buffer_; member_not_init_in_gen_ctor: The compiler-generated constructor for this class does not initialize buffer_offset_. 206 uint64_t buffer_offset_; CID 1418246 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) member_not_init_in_gen_ctor: The compiler-generated constructor for this class does not initialize buffer_len_. 207 size_t buffer_len_; 208}; util/thread_local.cc: 341#endif CID 1322795 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 3. uninit_member: Non-static class member pthread_key_ is not initialized in this constructor nor in any functions that it calls. 342} 40struct ThreadData { 2. uninit_member: Non-static class member next is not initialized in this constructor nor in any functions that it calls. CID 1400668 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 4. uninit_member: Non-static class member prev is not initialized in this constructor nor in any functions that it calls. 41 explicit ThreadData(ThreadLocalPtr::StaticMeta* _inst) : entries(), inst(_inst) {} 42 std::vector<Entry> entries; 1. member_decl: Class member declaration for next. 43 ThreadData* next; 3. member_decl: Class member declaration for prev. 44 ThreadData* prev; 45 ThreadLocalPtr::StaticMeta* inst; 46}; Closes Differential Revision: D6233566 Pulled By: sagar0 fbshipit-source-id: aa2068790ea69787a0035c0db39d59b0c25108db/Enable MSVC W4 with a few exceptions. Fix warnings and bugs Summary: Closes Differential Revision: D6079011 Pulled By: yiwu-arbug fbshipit-source-id: 988a721e7e7617967859dba71d660fc69f4dff57/"
,,0.2123,rocksdb,"Fix for when block.cache_handle is nullptr Summary: When using with compressed cache it is possible that the status is ok but the block is not actually added to the block cache. The patch takes this case into account. Closes Differential Revision: D5937613 Pulled By: maysamyabandeh fbshipit-source-id: 5428cf1115e5046b3d01ab78d26cb181122af4c6/prevent nullptr dereference in table reader error case Summary: A user encountered segfault on the call to `CacheDependencies()`, probably because `NewIndexIterator()` failed before populating `*index_entry`. Lets avoid the call in that case. Closes Differential Revision: D5928611 Pulled By: ajkr fbshipit-source-id: 484be453dbb00e5e160e9c6a1bc933df7d80f574/fix clang bug in block-based table reader Summary: This is the warning that clang considers a bug and has been causing it to fail: ``` table/block_based_table_reader.cc:240:27: warning: Potential leak of memory pointed to by block.value for (; biter.Valid(); biter.Next()) { ^~~~~ ``` Actually clang just doesnt have enough knowledge to statically determine its safe. We can teach it using an assert. Closes Differential Revision: D5691225 Pulled By: ajkr fbshipit-source-id: 3f0d545bf44636953b30ee5243c63239e8f16d8e/Preload l0 index partitions Summary: This fixes the existing logic for pinning l0 index partitions. The patch preloads the partitions into block cache and pin them if they belong to level 0 and pin_l0 is set. The drawback is that it does many small IOs when preloading all the partitions into the cache is direct io is enabled. Working for a solution for that. Closes Differential Revision: D5554010 Pulled By: maysamyabandeh fbshipit-source-id: 1e6f32a3524d71355c77d4138516dcfb601ca7b2/"
,,0.192,rocksdb,Preload l0 index partitions Summary: This fixes the existing logic for pinning l0 index partitions. The patch preloads the partitions into block cache and pin them if they belong to level 0 and pin_l0 is set. The drawback is that it does many small IOs when preloading all the partitions into the cache is direct io is enabled. Working for a solution for that. Closes Differential Revision: D5554010 Pulled By: maysamyabandeh fbshipit-source-id: 1e6f32a3524d71355c77d4138516dcfb601ca7b2/
,,0.5162,rocksdb,"NUMBER_BLOCK_COMPRESSED, etc, shouldnt be treated as timer counter Summary: NUMBER_BLOCK_DECOMPRESSED and NUMBER_BLOCK_COMPRESSED are not reported unless the stats level contain detailed timers, which is wrong. They are normal counters. Fix it. Closes Differential Revision: D6552519 Pulled By: siying fbshipit-source-id: 40899ccea7b2856bb39752616657c0bfd432f6f9/table: Fix coverity issues Summary: table/block.cc: 420 } CID 1396127 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 7. uninit_member: Non-static class member restart_offset_ is not initialized in this constructor nor in any functions that it calls. 421} table/block_based_table_builder.cc: CID 1418259 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 7. uninit_member: Non-static class member compressed_cache_key_prefix_size is not initialized in this constructor nor in any functions that it calls. table/block_based_table_reader.h: 3. uninit_member: Non-static class member index_type is not initialized in this constructor nor in any functions that it calls. CID 1396147 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 5. uninit_member: Non-static class member hash_index_allow_collision is not initialized in this constructor nor in any functions that it calls. 413 global_seqno(kDisableGlobalSequenceNumber) {} 414 table/cuckoo_table_reader.cc: 55 if (hash_funs user_props.end()) { 56 status_ Status::Corruption(""Number of hash functions not found""); 5. uninit_member: Non-static class member is_last_level_ is not initialized in this constructor nor in any functions that it calls. 7. uninit_member: Non-static class member identity_as_first_hash_ is not initialized in this constructor nor in any functions that it calls. 9. uninit_member: Non-static class member use_module_hash_ is not initialized in this constructor nor in any functions that it calls. 11. uninit_member: Non-static class member num_hash_func_ is not initialized in this constructor nor in any functions that it calls. 13. uninit_member: Non-static class member key_length_ is not initialized in this constructor nor in any functions that it calls. 15. uninit_member: Non-static class member user_key_length_ is not initialized in this constructor nor in any functions that it calls. 17. uninit_member: Non-static class member value_length_ is not initialized in this constructor nor in any functions that it calls. 19. uninit_member: Non-static class member bucket_length_ is not initialized in this constructor nor in any functions that it calls. 21. uninit_member: Non-static class member cuckoo_block_size_ is not initialized in this constructor nor in any functions that it calls. 23. uninit_member: Non-static class member cuckoo_block_bytes_minus_one_ is not initialized in this constructor nor in any functions that it calls. CID 1322785 (#2 of 2): Uninitialized scalar field (UNINIT_CTOR) 25. uninit_member: Non-static class member table_size_ is not initialized in this constructor nor in any functions that it calls. 57 return; table/plain_table_index.h: 2. uninit_member: Non-static class member index_size_ is not initialized in this constructor nor in any functions that it calls. CID 1322801 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 4. uninit_member: Non-static class member sub_index_size_ is not initialized in this constructor nor in any functions that it calls. 128 huge_page_tlb_size_(huge_page_tlb_size) {} 129 Closes Differential Revision: D6505719 Pulled By: yiwu-arbug fbshipit-source-id: 38f44d8f9dfefb4c2e25d83b8df25a5201c75618/Revert ""No need for Restart Interval for meta blocks"" Summary: See [issue 3169]( for more information This reverts commit 593d3de37171d99a761ce2ab34ffa12654acd055. Closes Differential Revision: D6379271 Pulled By: miasantreble fbshipit-source-id: 88f9ed67ba52237ad9b6f7251db83672b62d7537/Fix calculating filter partition target size Summary: block_size_deviation is in percentage while the partition size is in bytes. The current code fails to take that into account resulting into very large target size for filter partitions. Closes Differential Revision: D6376069 Pulled By: maysamyabandeh fbshipit-source-id: 276546fc68f50e0da32c462abb46f6cf676db9b2/"
,,0.6205,rocksdb,"table: Fix coverity issues Summary: table/block.cc: 420 } CID 1396127 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 7. uninit_member: Non-static class member restart_offset_ is not initialized in this constructor nor in any functions that it calls. 421} table/block_based_table_builder.cc: CID 1418259 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 7. uninit_member: Non-static class member compressed_cache_key_prefix_size is not initialized in this constructor nor in any functions that it calls. table/block_based_table_reader.h: 3. uninit_member: Non-static class member index_type is not initialized in this constructor nor in any functions that it calls. CID 1396147 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 5. uninit_member: Non-static class member hash_index_allow_collision is not initialized in this constructor nor in any functions that it calls. 413 global_seqno(kDisableGlobalSequenceNumber) {} 414 table/cuckoo_table_reader.cc: 55 if (hash_funs user_props.end()) { 56 status_ Status::Corruption(""Number of hash functions not found""); 5. uninit_member: Non-static class member is_last_level_ is not initialized in this constructor nor in any functions that it calls. 7. uninit_member: Non-static class member identity_as_first_hash_ is not initialized in this constructor nor in any functions that it calls. 9. uninit_member: Non-static class member use_module_hash_ is not initialized in this constructor nor in any functions that it calls. 11. uninit_member: Non-static class member num_hash_func_ is not initialized in this constructor nor in any functions that it calls. 13. uninit_member: Non-static class member key_length_ is not initialized in this constructor nor in any functions that it calls. 15. uninit_member: Non-static class member user_key_length_ is not initialized in this constructor nor in any functions that it calls. 17. uninit_member: Non-static class member value_length_ is not initialized in this constructor nor in any functions that it calls. 19. uninit_member: Non-static class member bucket_length_ is not initialized in this constructor nor in any functions that it calls. 21. uninit_member: Non-static class member cuckoo_block_size_ is not initialized in this constructor nor in any functions that it calls. 23. uninit_member: Non-static class member cuckoo_block_bytes_minus_one_ is not initialized in this constructor nor in any functions that it calls. CID 1322785 (#2 of 2): Uninitialized scalar field (UNINIT_CTOR) 25. uninit_member: Non-static class member table_size_ is not initialized in this constructor nor in any functions that it calls. 57 return; table/plain_table_index.h: 2. uninit_member: Non-static class member index_size_ is not initialized in this constructor nor in any functions that it calls. CID 1322801 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 4. uninit_member: Non-static class member sub_index_size_ is not initialized in this constructor nor in any functions that it calls. 128 huge_page_tlb_size_(huge_page_tlb_size) {} 129 Closes Differential Revision: D6505719 Pulled By: yiwu-arbug fbshipit-source-id: 38f44d8f9dfefb4c2e25d83b8df25a5201c75618/"
,,0.215,rocksdb,"Fix coverity issues version, write_batch Summary: db/version_builder.cc: 117 base_vstorage_->InternalComparator(); CID 1351713 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member field level_zero_cmp_.internal_comparator is not initialized in this constructor nor in any functions that it calls. db/version_edit.h: 145 FdWithKeyRange() 146 : fd(), 147 smallest_key(), 148 largest_key() { CID 1418254 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member file_metadata is not initialized in this constructor nor in any functions that it calls. 149 } db/version_set.cc: 120 } CID 1322789 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 4. uninit_member: Non-static class member curr_file_level_ is not initialized in this constructor nor in any functions that it calls. 121 } db/write_batch.cc: 939 assert(cf_mems_); CID 1419862 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 3. uninit_member: Non-static class member rebuilding_trx_seq_ is not initialized in this constructor nor in any functions that it calls. 940 } Closes Differential Revision: D6505666 Pulled By: yiwu-arbug fbshipit-source-id: fd2c68948a0280772691a419d72ac7e190951d86/Preserve overlapping file endpoint invariant Summary: Fix for In `DeleteFilesInRange`, use `GetCleanInputsWithinInterval` instead of `GetOverlappingInputs` to make sure we get a clean cut set of files to delete. In `GetCleanInputsWithinInterval`, support nullptr as `begin_key` or `end_key`. In `GetOverlappingInputsRangeBinarySearch`, move the assertion for non-empty range away from `ExtendFileRangeWithinInterval`, which should be allowed to return an empty range (via `end_index begin_index`). Closes Differential Revision: D5772387 Pulled By: ajkr fbshipit-source-id: e554e8461823c6be82b21a9262a2da02b3957881/"
,,0.2375,rocksdb,"Align SST file data blocks to avoid spanning multiple pages Summary: Provide a block_align option in BlockBasedTableOptions to allow alignment of SST file data blocks. This will avoid higher IOPS/throughput load due to 4KB data blocks spanning 2 4KB pages. When this option is set to true, the block alignment is set to lower of block size and 4KB. Closes Differential Revision: D7400897 Pulled By: anand1976 fbshipit-source-id: 04cc3bd144e88e3431a4f97604e63ad7a0f06d44/Several small ""fixes"" Summary: removed a few unneeded variables fused some variable declarations and their assignments fixed right-trimming code in string_util.cc to not underflow simplifed an assertion move non-nullptr check assertion before dereferencing of that pointer pass an std::string function parameter by const reference instead of by value (avoiding potential copy) Closes Differential Revision: D7004679 Pulled By: sagar0 fbshipit-source-id: 52944952d9b56dfcac3bea3cd7878e315bb563c4/"
,,0.161,rocksdb,"Several small ""fixes"" Summary: removed a few unneeded variables fused some variable declarations and their assignments fixed right-trimming code in string_util.cc to not underflow simplifed an assertion move non-nullptr check assertion before dereferencing of that pointer pass an std::string function parameter by const reference instead of by value (avoiding potential copy) Closes Differential Revision: D7004679 Pulled By: sagar0 fbshipit-source-id: 52944952d9b56dfcac3bea3cd7878e315bb563c4/"
,,0.2256,rocksdb,"Fix the memory leak with pinned partitioned filters Summary: The existing unit test did not set the level so the check for pinned partitioned filter/index being properly released from the block cache was not properly exercised as they only take effect in level 0. As a result a memory leak in pinned partitioned filters was hidden. The patch fix the test as well as the bug. Closes Differential Revision: D7559763 Pulled By: maysamyabandeh fbshipit-source-id: 55eff274945838af983c764a7d71e8daff092e4a/Align SST file data blocks to avoid spanning multiple pages Summary: Provide a block_align option in BlockBasedTableOptions to allow alignment of SST file data blocks. This will avoid higher IOPS/throughput load due to 4KB data blocks spanning 2 4KB pages. When this option is set to true, the block alignment is set to lower of block size and 4KB. Closes Differential Revision: D7400897 Pulled By: anand1976 fbshipit-source-id: 04cc3bd144e88e3431a4f97604e63ad7a0f06d44/"
,,0.154,rocksdb,"Several small ""fixes"" Summary: removed a few unneeded variables fused some variable declarations and their assignments fixed right-trimming code in string_util.cc to not underflow simplifed an assertion move non-nullptr check assertion before dereferencing of that pointer pass an std::string function parameter by const reference instead of by value (avoiding potential copy) Closes Differential Revision: D7004679 Pulled By: sagar0 fbshipit-source-id: 52944952d9b56dfcac3bea3cd7878e315bb563c4/"
,,0.1919,rocksdb,Pin top-level index on partitioned index/filter blocks (#4037) Summary: Top-level index in partitioned index/filter blocks are small and could be pinned in memory. So far we use that by cache_index_and_filter_blocks to false. This however make it difficult to keep account of the total memory usage. This patch introduces pin_top_level_index_and_filter which in combination with cache_index_and_filter_blocks=true keeps the top-level index in cache and yet pinned them to avoid cache misses and also cache lookup overhead. Closes Differential Revision: D8596218 Pulled By: maysamyabandeh fbshipit-source-id: 3a5f7f9ca6b4b525b03ff6bd82354881ae974ad2/
