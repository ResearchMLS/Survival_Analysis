Topic_no,Keywords,Contrib,System,Text
6,"test, support, object, make, field, version, class, platform, run_ct, remove, git_svn, create, default_value, avoid, move, bug, change, model, method, load",0.0817,conscrypt,Replace NativeCrypto.verifySignature with OpenSSLSignature Bug: Bug: 5037994 Change-Id: Ie9521df80b3b50e69b5cf9e6f8eb861845b4d30e/Add ExceptionCheck after all places we setCallbackState Also remove byte versions of SSL_read and SSL_write matching rest of libcore to avoid making the change in even more places. Note that testing this change required improving SSL_renegotiate which is only used for testing. Change-Id: If425764da3a36508a6c65d90eb3d36c5a018fd18/
,,0.0843,conscrypt,Add support for TLS_FALLBACK_SCSV (cherry picked from commit 8d7e23e117da591a8d48e6bcda9ed6f58ff1a375) Bug: 17750026 Change-Id: Iaf437ce2bc2b0ae86bb90a67e6e5378b25ae0a81/Add support for TLS_FALLBACK_SCSV Bug: 17750026 Change-Id: I1c2ecbeb914db645f440d58e7f7daa86d880ad6f/
,,0.1438,conscrypt,Fix static analysis findings am: ee3b1694a2 am: f2b103a611 am: dee8b5219a * commit dee8b5219ab1d862a8688d8139981fc517bfc1e3: Fix static analysis findings Change-Id: I80b2be8dc827a127aa6ea24eb5bfe18307866941/Fix static analysis findings am: ee3b1694a2 am: f2b103a611 * commit f2b103a6116d87b3996b158b6b38079328dbb29d: Fix static analysis findings Change-Id: Ie3bd3ad86d5d5c461711f576d60411b7cb04c8ad/Fix static analysis findings am: ee3b1694a2 * commit ee3b1694a206350e87a70cc83dd35a1ec2053fd6: Fix static analysis findings Change-Id: If45ad8d307b61162749a390741566ea95e680f57/Fix static analysis findings Add annotations where we intentionally left out and a brief explanation. Add synchronized keyword where needed by overriding methods so they match the parent class. Change-Id: I55591a5902530f1c2fb8cc89260c3df09648ec8e/
,,0.114,conscrypt,"Remove BoringSSL conditionals OpenSSL is no longer supported, so this will always take the BoringSSL path. Test: lunch aosp_bullhead-userdebug; make Change-Id: Iee7e0a11ae40bfc8649aed7d5c11768ba06cd726/"
,,0.2065,conscrypt,"Use built-in key debugging mechanism am: 599c8fe853 am: b3a7930bfc am: 9462bb74c0 Change-Id: Ib73580f61a5159e04654ef9b7586fc7f3b05466b/Use built-in key debugging mechanism am: 599c8fe853 am: b3a7930bfc Change-Id: I6d5094f0bfcb5fe45e686c37c51820802f47c5da/Use built-in key debugging mechanism am: 599c8fe853 Change-Id: I48b78672b8e8e5aad31e05c552218c6baddb0aa9/Use built-in key debugging mechanism When debugging a network flow its useful to log the negotiated keys to see what is happening inside the session. Previously this was implemented in Conscrypt, but BoringSSL has this capability built-in now. Documentation at Test: vogar host \ out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack \ out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack \ libcore/luni/src/test/java/libcore/javax/net/ssl/*Test.java Change-Id: I50a5b315d302492667a28926161836e34b9dd357/Dont use X509_up_refs return value. OpenSSL 1.1.0 is also adding FOO_up_ref functions, but theirs return int rather than the type. In preparation for making BoringSSL match, stop using the return value. (Our up_ref functions never fail, so theres no need to check the return value. Its just there for source compatibility with OpenSSL.) Change-Id: If92b3a967a31dbaf2e1a4176961ee66179cae8bf/Remove BoringSSL conditionals OpenSSL is no longer supported, so this will always take the BoringSSL path. Test: lunch aosp_bullhead-userdebug; make Change-Id: Iee7e0a11ae40bfc8649aed7d5c11768ba06cd726/Fix JNI_TRACE debugging am: b8bff45abd am: 5df1619256 am: 65fd24c7ad Change-Id: Ia83a9c4d66033ae055d7f4635c40329fb5a315af/Fix JNI_TRACE debugging am: b8bff45abd am: 5df1619256 Change-Id: Idd3a8bbbfe9f8f6c1aabb262df5115ef47162440/Fix JNI_TRACE debugging am: b8bff45abd Change-Id: I2fb619300f702fe59a82e7c0ca7d3fce74c5aa96/Fix JNI_TRACE debugging A change to a variable type broke the printing of debug information. Fix that so it doesnt cause a compiler error. Change-Id: I82d4287e5f59954f808709372a140b5ec4151098/Faster evpUpdate for small region of large byte[]. This improves the speed of computing a digest, a MAC, or a signature over a small region of a large byte[] on OpenJDK based VMs. Conscrypts code prior to this CL obtained the reference to the native bytes by indexing into the result of JNI GetByteArrayElements. On ART/Davlik this avoids creating copies (for 12 kB and larger arrays) whereas on OpenJDK based VMs this always creates a copy of all the elements of the array, which is not efficient and leads to noticeable slowdowns when processing small fractions of the byte array as input. This commit makes Conscrypts evpUpdate choose a strategy ( GetByteArrayElements vs GetByteArrayRegion) based on whether the VMs GetByteArrayElements is expected to create a copy of the array. This guess is hard-coded for each target: platform, compat, and OpenJDK. Bug: 27461702 Change-Id: I4ac1013b29e3d166a3f13fffebf662b02351684f/Fix misc-macro-parentheses warnings in conscrypt. am: 792eec0172 am: dade10e084 am: 51c9ba35f7 Change-Id: If92c3ad2daacf3c631b3a9b1527591510ef56e00/Fix misc-macro-parentheses warnings in conscrypt. am: 792eec0172 am: dade10e084 Change-Id: I7f82dce8e6452876b6c09cb5b766bcadd038832e/Fix misc-macro-parentheses warnings in conscrypt. am: 792eec0172 Change-Id: I9e5fccceb1c58cef535b604ab38ab998d0b1b96a/Fix misc-macro-parentheses warnings in conscrypt. Add parentheses around macro arguments used beside operators. Bug: 28705665 Change-Id: Ifb34004969a344eeeb5350256b7f5888ca21665f/"
,,0.1197,conscrypt,"Remove BoringSSL conditionals OpenSSL is no longer supported, so this will always take the BoringSSL path. Test: lunch aosp_bullhead-userdebug; make Change-Id: Iee7e0a11ae40bfc8649aed7d5c11768ba06cd726/"
,,0.1287,conscrypt,Remove unused imports left over from removing OpenSSL code Test: lunch aosp_bullhead-userdebug; make Change-Id: I5b8cdcfbe45a866005209ed2e6f365a1378d46d5/
,,0.11900000000000001,conscrypt,"Substitute NULL for nullptr Since we dont actually rely on a STL, we dont have to get NULL from, but since were compiling C++11 we get nullptr for free. This also fixes builds against MacOS SDK since it doesnt have available when you explicitly opt out of an STL in the Android.mk module. Test: mmma external/conscrypt; make PRODUCT-sdk_phone_armv7-sdk Change-Id: I54929c7e5c05ec271925f5f3d1896df1661e9b59/"
,,0.1504,conscrypt,Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/
,,0.1542,conscrypt,Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/
,,0.16,conscrypt,Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/
,,0.1561,conscrypt,Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/
,,0.1578,conscrypt,Remove legacy certificate pinning code This removes the old CertPinManager code and moves CertPinManager to being an interface that the platform can use to have certificate pinning for the network security config done as part of chain building instead of after a valid chain has been found. Bug: 30829862 Bug: 22666360 Test: Ran CertPinManagerTest Change-Id: Ib4f5100096f7eead3a51533cff44f68093034bb1/Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/
,,0.2961,conscrypt,"Strip out SSLv3 from enabled protocols for app compat HttpsURLConnection on Android before Marshmallow tried to setEnabledProtocols with just ""SSLv3"" without checking if it was a supported protocol. Instead of throwing IllegalArgumentException when the unsupported protocol is encountered, strip it out and later throw an SSLHandshakeException if no protocols are enabled. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Bug: 32053327 Bug: 30977793 Change-Id: I2f2008d85fcc5b5fbdc71722a3d6e0a9c22bfbc2/Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/"
,,0.4365,conscrypt,"NativeCryptoTest: make SCT test data look more legitimate The SCT test data used to be unchecked by BoringSSL, but now there is some shallow parsing done to make sure its not empty. Add some length prefixes to the data to pass the parsing. Test: †mmma external/conscrypt && vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/conscrypt-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/conscrypt-tests-hostdex_intermediates/classes.jack com.android.org.conscrypt.NativeCryptoTest Bug: 33101752 Change-Id: I6bdf6a8e7062a13a5ea98b6239663c279e0d46c0/Improve performance of OpenSSLEngine Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I947bd3701e90bd65104f8f5c07ba218c4e051944/Convert NullPointerException tests to more JUnit4-like am: 4f6364860a am: 767f667a5f am: a7986062c1 Change-Id: Ie1b269171d0b189a6aaf418f5448671bd15b924b/Convert NullPointerException tests to more JUnit4-like am: 4f6364860a am: 767f667a5f Change-Id: Ic37f70ef45da8ff8d2b20c42da72bacad82a05e0/Convert NullPointerException tests to more JUnit4-like am: 4f6364860a Change-Id: I0e18f60814471db19e797f6cb39cef3dac33b905/Merge changes I3af9fbc3,Icb6aedc3 * changes: Convert NullPointerException tests to more JUnit4-like Convert NativeCryptoTest to JUnit4/Convert NullPointerException tests to more JUnit4-like Be a bit more explicit and cut down on the fail-or-catch-expected-exception mistake possibilities. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a com.android.org.conscrypt.NativeCryptoTest Change-Id: I3af9fbc3b1fda5f01a05965b288f69dcd0eda9a9/Convert NativeCryptoTest to JUnit4 This is basically a regex substitution change with minimnal renames just to convert to JUnit4. Further JUnit4-isms will come in subsequent changes. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: Icb6aedc3acee31d62750132bbe8eeaf9150bd3c0/Update NativeCryptoTest ciphers The removal of RC4 caused some tests to fail because the other cipher listed appears to have not existed for a while. Update the regular cipher to something that will be supported a while longer. Test: make && make cts && adb reboot-bootloader && fastboot flashall Test: cts-tradefed run cts CtsLibcoreTestCases com.android.org.conscrypt.NativeCryptoTest Bug: 30977793 Change-Id: I3ba576afcfe7c4abf36054ac625fd6d00dab3c7c/Remove NPN support NPN is deprecated and clients should use ALPN instead for now. In the interest of removing support for it in BoringSSL, we will remove NPN support from Conscrypt as well. For now keep around the NPN setters and getters in OpenSSLSocketImpl and OpenSSLEngineImpl to help with backward compatibility for users that may be using reflection. Test: make && make cts && cts-tradefed run cts CtsLibcoreTestCases Change-Id: Ia4edb21412d9c4b2440291ae0a8a97d2217bf5b5/Drop RC4 cipher suite support from TLS Bug: 30977793 Test: libcore/run-libcore-tests libcore/luni/src/test/java/libcore/javax/net/ssl/* and running NativeCryptoTest. Change-Id: I04b91a6d3bf75a757d2c74bd1a39aea2709a9199/Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/"
,,0.2422,conscrypt,"TrustManagerImpl: fix misnaming of ctPolicy arg am: a2b5cc43f5 Change-Id: Ib59afa5061d65b416b3c70a3c09cf4ae899810df/TrustManagerImpl: fix misnaming of ctPolicy arg ErrorProne pointed out that ""this.ctPolicy ctPolicy;"" was self-assignment which led to the discover of the argument being named ""policy"" instead of the intended ""ctPolicy"". Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: If07feeb3ad216b243648ad334804520f6c6e9f13/Merge ""Fix missing CTPolicy argument to TrustManagerImpl()"" am: d2aba51b7d Change-Id: Icad7d88943141214c93cdf156b809e472909c1aa/Merge ""Fix missing CTPolicy argument to TrustManagerImpl()""/Fix missing CTPolicy argument to TrustManagerImpl() Incorrect merge resolution on my part dropped the constructor argument. Test: run OpenSSLSocketImplTest Change-Id: I9b71782050a59558d49223d398c3ad22847e89a5/Merge ""Fix CertPinManagerTest"" am: b0ef629af3 am: 2561cb4194 am: 455331d90c Change-Id: Ibc2276cc669ad2a3e8d15f5481844bdee2d6cdc6/Merge ""Fix CertPinManagerTest"" am: b0ef629af3 am: 2561cb4194 Change-Id: If6c8196d8d64df0a2dc6b872b0581d31b669067c/Merge ""Fix CertPinManagerTest"" am: b0ef629af3 Change-Id: Ic963b67de1f3238f1c8120771ff7d3c9b2f3a867/Merge ""Fix CertPinManagerTest""/Fix CertPinManagerTest The rebase of the CT change mistakenly removed setting this.pinManager in TrustManagerImpls constructor. Bug: 31958917 Test: run CertPinManagerTest Change-Id: I94f10392c56bd8ba10e5ac6b4e82cf6a83ea34c6/Remove legacy certificate pinning code This removes the old CertPinManager code and moves CertPinManager to being an interface that the platform can use to have certificate pinning for the network security config done as part of chain building instead of after a valid chain has been found. Bug: 30829862 Bug: 22666360 Test: Ran CertPinManagerTest Change-Id: Ib4f5100096f7eead3a51533cff44f68093034bb1/TrustManagerImpl: fallback for missing revocation checker Only newer implementations of the CertPathValidatorSpi will have the PKIXRevocationChecker stuff available, so make sure we dont explode when its not supported. Its not totally necessary. Bug: 31611933 Test: make build-art-host vogar && vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java Change-Id: I5dd354a494e94aeb2788be8a502b114dd525cbaa/Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/"
,,0.1561,conscrypt,Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/
,,0.1173,conscrypt,"Substitute NULL for nullptr Since we dont actually rely on a STL, we dont have to get NULL from, but since were compiling C++11 we get nullptr for free. This also fixes builds against MacOS SDK since it doesnt have available when you explicitly opt out of an STL in the Android.mk module. Test: mmma external/conscrypt; make PRODUCT-sdk_phone_armv7-sdk Change-Id: I54929c7e5c05ec271925f5f3d1896df1661e9b59/"
,,0.2299,conscrypt,Improve performance of OpenSSLEngine Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I947bd3701e90bd65104f8f5c07ba218c4e051944/Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/
,,0.2894,conscrypt,"Remove NPN support NPN is deprecated and clients should use ALPN instead for now. In the interest of removing support for it in BoringSSL, we will remove NPN support from Conscrypt as well. For now keep around the NPN setters and getters in OpenSSLSocketImpl and OpenSSLEngineImpl to help with backward compatibility for users that may be using reflection. Test: make && make cts && cts-tradefed run cts CtsLibcoreTestCases Change-Id: Ia4edb21412d9c4b2440291ae0a8a97d2217bf5b5/Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/"
,,0.1504,conscrypt,Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/
,,0.2971,conscrypt,"Remove NPN support NPN is deprecated and clients should use ALPN instead for now. In the interest of removing support for it in BoringSSL, we will remove NPN support from Conscrypt as well. For now keep around the NPN setters and getters in OpenSSLSocketImpl and OpenSSLEngineImpl to help with backward compatibility for users that may be using reflection. Test: make && make cts && cts-tradefed run cts CtsLibcoreTestCases Change-Id: Ia4edb21412d9c4b2440291ae0a8a97d2217bf5b5/Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/"
,,0.4046,conscrypt,"Improve performance of OpenSSLEngine Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I947bd3701e90bd65104f8f5c07ba218c4e051944/Dont use asn1t.h to parse PKIPATH. The structure is purely a SEQUENCE of certificates. Parse it with CBS. This removes a dependency on asn1t.h, so BoringSSL may unexport it someday and reimplement parsers for in-library types with a higher quality ASN.1 stack. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: Iaa74c832b333d1eb4906fb309c8715e627aa97a1/Set group on wrapped EC private keys BoringSSL wants to know what group the private keys are in for TLS, so set that when wrapping Java keys to avoid crashing when EC_KEY_get0_group is called on it later. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I01897c58c1c3026df0ebde66830f7b9959e4b2e2/Revise TLS signing algorithm preferences In order to match the change in we are rearranging our signing algorithm preferences. This also appears to work around a bug in iOS 8 where SSL_SIGN_RSA_PKCS1_SHA384 is advertised but the handshake fails when its used. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Bug: 29973214 Change-Id: I9dad16c59f83e815133aea60ed626c7b2556e304/Fix leak in NativeCrypto_SSL_get_peer_cert_chain. am: 91292722c9 Change-Id: Iff5d4830a6afee87684cbca3bb903d23a90f2e00/Fix leak in NativeCrypto_SSL_get_peer_cert_chain. SSL_get_peer_certificate returns a reference. (But SSL_get_peer_cert_chain does not, because OpenSSLs API is confusing like that.) Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: Id33169c98264cd41e7d7bc25e9bb6a5482eb8a64/Fix some leaks on sk_push error. am: 8eaad4ede1 Change-Id: Ia097679349b5d097be844e6795eb38d7e8f70efe/Fix reference counting. am: fb70e2c7b0 Change-Id: Iad0c97d843356e801db399f3241a673fd638300f/Fix some leaks on sk_push error. sk_push only takes ownership of the pointer on success, so the pattern needs to be slightly different. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: Ic1b10b9aae5addf20bf770c334ada9bc461c97b8/Switch from client_cert_cb to cert_cb. cert_cb is the newer, less confusing one. The way Conscrypt uses these callbacks aligns better with cert_cb anyway since Conscrypt expects to call SSL_use_certificate, etc., itself. Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I68a677e88924d7c3c70a810f21e52abf943cdb1a/Fix reference counting. SSL_use_certificate and friends were leaking and client_cert_cb was failing to give refcounts for objects it returns. The two cancelled each other out. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I9e9e75902054f59be12f68fb14cf9f3f75a7a46e/Throw IllegalBlockSize when data too large for RSA Tests are written that expect to get IllegalBlockSize instead of BadPaddingException when the data is too large for the given RSA modulus. Test: cts-tradefed run cts CtsKeystoreTestCases arm64-v8a Change-Id: I04b51ec64b66f4339ce45c19cef57ee470d85634/Restrict TLS signing to non-RSA-PSS algorithms A recent change in BoringSSL allowed connections to use RSA-PSS as the signing algorithm for TLSv1.2 connections. However, the CryptoUpcalls interface is not ready for this and it cannot currently make the upcall correctly to have these signed. Temporarily disable RSA-PSS signatures with TLS by explicitly setting the list of signature algorithms. Test:†cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test:†cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Bug: 31714503 Change-Id: Ie1c23b7231b5673816946a6c06030e1e25752415/Fix various post-submit comments am: f5d5953b62 Change-Id: Idfaf05bab9b68c75ab066899eb190e30e120c779/Fix various post-submit comments These are various suggestions made after TreeHugger already auto-submitted changes. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I88af938fa46f8cd925526709ac4db20d66b8d608/Remove ""unused"" markers Since the change of the debug logging code to use constexpr, we do not have as many unused parameters in function signatures since they are being used in the debug parts that are compiled out. Remove the unnecessary __attribute__ ((unused)) markers next to them. Test: No warnings or errors from mmma external/conscrypt Change-Id: I920f11e0a3c0ade1f98cc489de40b7bdfc948842/conscrypt: Replace cutils/log.h with android/log.h Test: compile Bug: 26552300 Bug: 31289077 Change-Id: Ic2e2d84c2e70ee79f6ee0a8acd7d0b3f08f0b0d8/NativeCrypto: add debugging format checking when debug off am: e6edfeb754 am: ad1a04b89c am: 662d7c8d98 Change-Id: I40ddbde609a496eb85c9fa9a060d1477756ea5aa/NativeCrypto: fix up debug statements for EVP_AEAD am: abada5b295 am: c5cad79482 am: 7645d8f889 Change-Id: Iaa7791812da87420d15f301cc8b45d0c88fb73dc/NativeCrypto: add debugging format checking when debug off am: e6edfeb754 am: ad1a04b89c Change-Id: I640dafdf7b1731b1ef627058dc50306ada1c42d5/NativeCrypto: fix up debug statements for EVP_AEAD am: abada5b295 am: c5cad79482 Change-Id: I6b8e11edbee269339b53028271483fd51da153d0/NativeCrypto: add debugging format checking when debug off am: e6edfeb754 Change-Id: I2f6266735a1fab539edf960d0a742e929b0bd723/NativeCrypto: fix up debug statements for EVP_AEAD am: abada5b295 Change-Id: I3712d68ce17eeb00604f84e67f1e8c72eb1114ee/NativeCrypto: add debugging format checking when debug off Before if you enabled WITH_JNI_TRACE you might get some formatting errors because format is not checked when debugging is enabled. Switch to constexpr to enable debugging and rely on Dead Code Elimination pass in the compiler to remove all the debug code when its not in use. This allows the compiler to properly check printf-style formatting for debug statements instead of the preprocessor removing the code. Test: compile with kWithJniTrace true and run vogar tests Change-Id: Ief3fe1c099a38d802db32deb7ffa91e4c8d4a572/NativeCrypto: fix up debug statements for EVP_AEAD A recent rewrite of EVP_AEAD calls made this deug code go stale. Test: define WITH_JNI_DEBUG and mmma external/conscrypt Change-Id: Ief7461c91c44f99b34cbf2737c833ec142611092/No need to call ERR_remove_thread_state. In BoringSSL, error data is maintained in thread-locals and automatically released via thread-local destructors. ERR_remove_thread_state just calls ERR_clear_error now anyway. Change-Id: Ie4b54ec0573f58076eba3102079f773425debcdc Test: mma/OpenSSLSignature: always throw on setting context Most of the EVP_PKEY_CTX_ctrl error codes are not handled by Conscrypt so make sure we have a default exception in case something goes awry during setup. Test: vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/mockito-api-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/java/security/SignatureTest.java Change-Id: I1f5a753242b6bc31cca9feb96486bbc86ad8af54/Remove NPN support NPN is deprecated and clients should use ALPN instead for now. In the interest of removing support for it in BoringSSL, we will remove NPN support from Conscrypt as well. For now keep around the NPN setters and getters in OpenSSLSocketImpl and OpenSSLEngineImpl to help with backward compatibility for users that may be using reflection. Test: make && make cts && cts-tradefed run cts CtsLibcoreTestCases Change-Id: Ia4edb21412d9c4b2440291ae0a8a97d2217bf5b5/Fix typo in name of des-ede mapping am: 0af37f8ed6 am: a31bc9eed5 am: 74fe0c16fe Change-Id: I5b714850306362bbbf1750d89fa398f1ac033ad6/Fix typo in name of des-ede mapping am: 0af37f8ed6 am: a31bc9eed5 Change-Id: Ieabf25289af85daeb7d6cdec0e67910eeb3a6d12/Fix typo in name of des-ede mapping am: 0af37f8ed6 Change-Id: I1c2ca17759368d1c2203833fc539c713a7344f67/Fix typo in name of des-ede mapping am: 3209baf397 Change-Id: Id3cf860a111e2d404037d154498d65e0a3a58e01/Stop using malloc in native code am: b14d575175 am: f540393d17 am: 99191daf61 Change-Id: I4f19fecf0cf3a218e9ad48f3abea66e8cd500d4b/Stop using malloc in native code am: b14d575175 am: f540393d17 Change-Id: Ia3884eeaabb964d3e58876d17973c50b6fb8bf79/Stop using malloc in native code am: b14d575175 Change-Id: I732328ba619359680d5c76dac3f3d35f082d842b/Fix typo in name of des-ede mapping This was mapping 2-key 3DES to regular DES thus resulting in all encryption using 2-key 3DES having the wrong answers. (cherry picked from commit 55caed999846897bcf949828e6e367bf8d7d9909) Bug: 31081987 Change-Id: I44ba12dcf51d57952cf3ba501381d144d271a2a6/Fix typo in name of des-ede mapping This was mapping 2-key 3DES to regular DES thus resulting in all encryption using 2-key 3DES having the wrong answers. (cherry picked from commit 55caed999846897bcf949828e6e367bf8d7d9909) Bug: 31081987 Change-Id: I44ba12dcf51d57952cf3ba501381d144d271a2a6/Stop using malloc in native code Switch the last few stragglers to new/delete since malloc needs casting. Test: mmma external/conscrypt && make build-art-host vogar && vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/javax/crypto/CipherTest.java libcore/luni/src/test/java/libcore/javax/crypto/MacTest.java Change-Id: I30fb126c5c7a110ae2654ec7f558427d55f0405a/Remove SSL_CTX_set_tmp_ecdh call This now has the undesired effect of making a client only support this curve for ECDHE. This used to be needed to allow a server to handshake with ECDHE, but is now unnecessary for BoringSSL. The client doesnt want this call and the server no longer needs this call, so delete it. (cherry picked from commit 1ba6bcf113085c493ccd4574ed685cd0efad4aeb) Test: mmma external/conscrypt && make build-art-host vogar && vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java Bug: 31393711 Change-Id: Ib7afdcc3ea7ee3d2222a262f3c57abd065a4b4e1/Substitute NULL for nullptr Since we dont actually rely on a STL, we dont have to get NULL from, but since were compiling C++11 we get nullptr for free. This also fixes builds against MacOS SDK since it doesnt have available when you explicitly opt out of an STL in the Android.mk module. Test: mmma external/conscrypt; make PRODUCT-sdk_phone_armv7-sdk Change-Id: I54929c7e5c05ec271925f5f3d1896df1661e9b59/Fix typo in name of des-ede mapping am: 93838326de Change-Id: I83e7972190b7bdf33477fe84a85e9de66d2126bd/Fix typo in name of des-ede mapping am: 55caed9998 am: d8a2454005 am: 74ef0c0052 Change-Id: Ic8bc4d1c3da3d143e0bef2948a557217f9210847/Fix typo in name of des-ede mapping am: 55caed9998 am: d8a2454005 Change-Id: I4ac6345ba44f152fc86270a35fd674447d76cbda/Fix typo in name of des-ede mapping am: 55caed9998 Change-Id: I295541c59a001f5c42fc1b9354e861190e0ffcb9/Fix typo in name of des-ede mapping This was mapping 2-key 3DES to regular DES thus resulting in all encryption using 2-key 3DES having the wrong answers. Bug: 31081987 (cherry picked from commit 55caed999846897bcf949828e6e367bf8d7d9909) Change-Id: Id06d6c5b5a81142a06451f8ab8bf1c608bff7b6f/Fix typo in name of des-ede mapping This was mapping 2-key 3DES to regular DES thus resulting in all encryption using 2-key 3DES having the wrong answers. Bug: 31081987 Change-Id: I44ba12dcf51d57952cf3ba501381d144d271a2a6/"
,,0.1459,conscrypt,Fix various post-submit comments am: f5d5953b62 Change-Id: Idfaf05bab9b68c75ab066899eb190e30e120c779/Fix various post-submit comments These are various suggestions made after TreeHugger already auto-submitted changes. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I88af938fa46f8cd925526709ac4db20d66b8d608/OpenSSLCipherRSA: add OAEP implementation This adds an RSA OAEP implementation for encryption of secrets using the RSA algorithm and the OAEP padding method as described by RFC 2437 section 7.1. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: Ifcdeee408b1ab1ce7903152167de9d40acd2efa2/
,,0.2197,conscrypt,Move MGF1 algorithm name and OID to EvpMdRef Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: Ia3bbceb2a6022ebfbbd7ce1b4c2bb8d8c5ca956b/EvpMdRef: rename SIZE to SIZE_BYTES This should end confusion about whether EVP_MD_size is measured in bits or bytes. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: Iae3dab037dd0bc37313f7cdde643cb140545ccaa/Move JCA names and OIDs to constants Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2fb67d6e9aa812b3b2ea26e14d18fbe752c70fc3/Use EvpMdRef for size calculation Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I9c909e401d6224f626b69dae3ac21e16a7a9b03c/Move digest name resolution to EvpMdRef Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: Iba6c993fd6721f3fc97e0ccc968e2f9f6ffc22a2/Consolidate EVP_MD references to one place There were several places where EVP_get_digestbyname was being called for the same data. Consolidate these all down to one place so there is no need to call it several times in the same program. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: Ib3f8b678c775e74eb5edaabde42f042d7b4eac95/OpenSSLSignature: always throw on setting context Most of the EVP_PKEY_CTX_ctrl error codes are not handled by Conscrypt so make sure we have a default exception in case something goes awry during setup. Test: vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/mockito-api-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/java/security/SignatureTest.java Change-Id: I1f5a753242b6bc31cca9feb96486bbc86ad8af54/
,,0.2333,conscrypt,Improve performance of OpenSSLEngine Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I947bd3701e90bd65104f8f5c07ba218c4e051944/Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/
,,0.1523,conscrypt,Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/
,,0.3977,conscrypt,"Improve performance of OpenSSLEngine Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I947bd3701e90bd65104f8f5c07ba218c4e051944/Strip out SSLv3 from enabled protocols for app compat HttpsURLConnection on Android before Marshmallow tried to setEnabledProtocols with just ""SSLv3"" without checking if it was a supported protocol. Instead of throwing IllegalArgumentException when the unsupported protocol is encountered, strip it out and later throw an SSLHandshakeException if no protocols are enabled. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Bug: 32053327 Bug: 30977793 Change-Id: I2f2008d85fcc5b5fbdc71722a3d6e0a9c22bfbc2/Blacklisting TLS 1.3 ciphersuites from Android TLS 1.3 adds a new set of AEAD-only ciphers, which will be exposed by BoringSSLs draft TLS 1.3 implementation. Were not ready to ship TLS 1.3 in Conscrypt yet, but get_cipher_names returns the new ciphers by default (cipher/version filtering happens much later). Suppress those ciphers for now. Test: cts-tradefed run cts CtsLibcoreTestCases CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I14421aec8dceb4b0eb7347b8ebf88a87a10ba856/Drop SSLv3 support Bug: 30977793 Test: libcore/run-libcore-tests libcore/luni/src/test/java/libcore/javax/net/ssl/* Change-Id: Ic88ff61bb16017e213a017ecdb16a1ac5b9baa48/OpenSSLSignature: always throw on setting context Most of the EVP_PKEY_CTX_ctrl error codes are not handled by Conscrypt so make sure we have a default exception in case something goes awry during setup. Test: vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/mockito-api-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/java/security/SignatureTest.java Change-Id: I1f5a753242b6bc31cca9feb96486bbc86ad8af54/Remove NPN support NPN is deprecated and clients should use ALPN instead for now. In the interest of removing support for it in BoringSSL, we will remove NPN support from Conscrypt as well. For now keep around the NPN setters and getters in OpenSSLSocketImpl and OpenSSLEngineImpl to help with backward compatibility for users that may be using reflection. Test: make && make cts && cts-tradefed run cts CtsLibcoreTestCases Change-Id: Ia4edb21412d9c4b2440291ae0a8a97d2217bf5b5/Drop RC4 cipher suite support from TLS Bug: 30977793 Test: libcore/run-libcore-tests libcore/luni/src/test/java/libcore/javax/net/ssl/* and running NativeCryptoTest. Change-Id: I04b91a6d3bf75a757d2c74bd1a39aea2709a9199/"
,,0.2557,conscrypt,"OpenSSLCipher: try to prevent key and nonce reuse in GCM Cache the previously used key and IV to try and prevent re-use. This will not stop people determined to reuse the same key and IV, but it should help accidentally doing this or doing it out of ignorance Test: wycheproof tests Test: make build-art-host vogar && vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/javax/crypto/CipherTest.java Bug: 30231101 Change-Id: I4619f9216d490eceb8d14727ce2b5b141877d2b7/Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/"
,,0.3052,conscrypt,"Partial revert of ""Fix static analysis findings"" am: 0a94f01997 am: 1775b34aa9 am: 7859000d51 Change-Id: I8d7270b8ac5e35701167b038a7b77f7f3b8405d7/Partial revert of ""Fix static analysis findings"" am: 0a94f01997 am: 1775b34aa9 Change-Id: Iccb82c44eb83ac95f5b430c78e1d0e2a00277733/Partial revert of ""Fix static analysis findings"" am: 0a94f01997 Change-Id: Ifb3950135033c352af6ee576ffe9898c82521e3c/Partial revert of ""Fix static analysis findings"" This reverts commit ee3b1694a206350e87a70cc83dd35a1ec2053fd6. This causes deadlocks for wrapped sockets. Bug: 31449904 Test: make build-art-host vogar && vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java Change-Id: Iedf2244ae4ed8bd79dae996406c7668ebadc832e/"
,,0.3412,conscrypt,"Improve performance of OpenSSLEngine Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I947bd3701e90bd65104f8f5c07ba218c4e051944/OpenSSLEngineImpl: throw ISE if client/server mode not set According to SSLEngine documentation, IllegalStateException will be thrown if or is called before setting the client/server mode. When OpenSSLEngineImpl was written, it was written against the existing tests which did not fail in this scenario due to a missing fail() call in the try/catch. The existing test calls with a 10 byte buffer which immediatly hits the BUFFER_OVERFLOW condition. To avoid this the ByteBuffer check was moved below the state check which means calling with a too-small buffer without starting the handshake first will fail on the buffer size check only after the first call. This should not affect callers as they have to handle this condition during the normal operation of the SSLEngine anyway. Test: vogar host out/target/common/obj/JAVA_LIBRARIES/bouncycastle_intermediates/classes.jack out/target/common/obj/JAVA_LIBRARIES/bouncycastle-ocsp_intermediates/classes.jack out/target/common/obj/JAVA_LIBRARIES/bouncycastle-bcpkix_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack libcore/harmony-tests/src/test/java/org/apache/harmony/tests/javax/net/ssl/SSLEngineTest.java Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Bug: 31301555 Change-Id: I6f4c36d5abcc71e020ce40c7f61df2ed01b1a53e/Remove NPN support NPN is deprecated and clients should use ALPN instead for now. In the interest of removing support for it in BoringSSL, we will remove NPN support from Conscrypt as well. For now keep around the NPN setters and getters in OpenSSLSocketImpl and OpenSSLEngineImpl to help with backward compatibility for users that may be using reflection. Test: make && make cts && cts-tradefed run cts CtsLibcoreTestCases Change-Id: Ia4edb21412d9c4b2440291ae0a8a97d2217bf5b5/"
,,0.474,conscrypt,"Improve performance of OpenSSLEngine Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I947bd3701e90bd65104f8f5c07ba218c4e051944/Partial revert of ""Fix static analysis findings"" am: 0a94f01997 am: 1775b34aa9 am: 7859000d51 Change-Id: I8d7270b8ac5e35701167b038a7b77f7f3b8405d7/Partial revert of ""Fix static analysis findings"" am: 0a94f01997 am: 1775b34aa9 Change-Id: Iccb82c44eb83ac95f5b430c78e1d0e2a00277733/Partial revert of ""Fix static analysis findings"" am: 0a94f01997 Change-Id: Ifb3950135033c352af6ee576ffe9898c82521e3c/Partial revert of ""Fix static analysis findings"" This reverts commit ee3b1694a206350e87a70cc83dd35a1ec2053fd6. This causes deadlocks for wrapped sockets. Bug: 31449904 Test: make build-art-host vogar && vogar host out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack libcore/luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java Change-Id: Iedf2244ae4ed8bd79dae996406c7668ebadc832e/Remove NPN support NPN is deprecated and clients should use ALPN instead for now. In the interest of removing support for it in BoringSSL, we will remove NPN support from Conscrypt as well. For now keep around the NPN setters and getters in OpenSSLSocketImpl and OpenSSLEngineImpl to help with backward compatibility for users that may be using reflection. Test: make && make cts && cts-tradefed run cts CtsLibcoreTestCases Change-Id: Ia4edb21412d9c4b2440291ae0a8a97d2217bf5b5/Fix imports globally am: d0687b8c0d am: 967b0b11a3 am: be78c56078 Change-Id: Id8c38445063db7effaaacd3671a9c43eb4b3271a/Fix imports globally am: d0687b8c0d am: 967b0b11a3 Change-Id: I0ec9a42c2209792fd28913ee8eb7890091a4d444/Fix imports globally am: d0687b8c0d Change-Id: I2680d85a6655bbe2ada4c34fa6ff6d1bda332856/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/"
,,0.1161,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1161,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1025,conscrypt,Fix test imports Apparently these out-of-order and unused imports snuck in to the Android tree. Fix them up. Test: mmma external/conscrypt Change-Id: Ibd1abc5ce672609bf483f10fe5f3c697e0d51a05/
,,0.1447,conscrypt,"Configure OCSP and SCTs on the SSL, not SSL_CTX. As Conscrypt is currently set up, one SSL_CTX (owned, ultimately, by the SSLContext) may correspond to multiple SSLParameters which, in the Java API, are configured on the SSLSocket or SSLEngine directly. Thus we should use the SSL versions of the APIs which now exist. This avoids mutating an SSL_CTX which may be shared by multiple SSLs with different configurations. Change-Id: I19485c316087004c6050d85520b0169f2ca0d493/Fix renegotiation-based tests BoringSSL no longer supports on-demand renegotiation, so tests that are based on that cannot pass. Change one test to confirm that, and remove the other./Conscrypt: Fix renegotiation-based tests BoringSSL no longer supports on-demand renegotiation, so tests that are based on that cannot pass. Change one test to confirm that, and remove the other. Bug: 21876068 Bug: 21875889 Test: cts CtsLibcoreTestCases com.android.org.conscrypt.NativeCryptoTest Change-Id: Ia7596e773e855edf38a4e0b94dbef7f11795ad87/"
,,0.1519,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes test imports Apparently these out-of-order and unused imports snuck in to the Android tree. Fix them up. Test: mmma external/conscrypt Change-Id: Ibd1abc5ce672609bf483f10fe5f3c697e0d51a05/"
,,0.1161,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1514,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes Java 8 style SNI hostname to OpenSSLEngineImpl (#155) The SNIHostName, et al., support was lacking from OpenSSLEngineImpl causing endpoint protocol identification to fail in Netty tests./"
,,0.1161,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1161,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1667,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/"
,,0.1101,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.1281,conscrypt,"Benchmark fixes and various cleanup. (#188)/Add Java 8 style SNI hostname to OpenSSLEngineImpl (#155) The SNIHostName, et al., support was lacking from OpenSSLEngineImpl causing endpoint protocol identification to fail in Netty tests./Add error-prone and fix all the errors (#146)/"
,,0.1141,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.1101,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.1081,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.1141,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.2065,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/Fixing various javadoc issues. (#124) Also locking down access to a couple utility classes./"
,,0.2114,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/Fixing various javadoc issues. (#124) Also locking down access to a couple utility classes./"
,,0.1161,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1213,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes Error-Prone warnings These warnings are not useful here, so suppress them./"
,,0.21600000000000003,conscrypt,"Adding all factory methods for engine socket. (#192) Also properly throwing SSLHandshakeException in some cases. Fixes down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/Add handshake listener to engine. (#136) Fixes various javadoc issues. (#124) Also locking down access to a couple utility classes./"
,,0.2637,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes OCSP and SCTs on the SSL, not SSL_CTX. As Conscrypt is currently set up, one SSL_CTX (owned, ultimately, by the SSLContext) may correspond to multiple SSLParameters which, in the Java API, are configured on the SSLSocket or SSLEngine directly. Thus we should use the SSL versions of the APIs which now exist. This avoids mutating an SSL_CTX which may be shared by multiple SSLs with different configurations. Change-Id: I19485c316087004c6050d85520b0169f2ca0d493/Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/Fixing various javadoc issues. (#124) Also locking down access to a couple utility classes./"
,,0.2172,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes AEADBadTagException throwing to method This is not available on all Android versions, so we access it via reflection here. Extract it to its own method so we can suppress the Error-Prone warning more precisely./Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/Fixing various javadoc issues. (#124) Also locking down access to a couple utility classes./"
,,0.1474,conscrypt,"Adding all factory methods for engine socket. (#192) Also properly throwing SSLHandshakeException in some cases. Fixes down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes Error-Prone warnings These warnings are not useful here, so suppress them./"
,,0.1161,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1648,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/"
,,0.1161,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1161,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1902,conscrypt,"Adding all factory methods for engine socket. (#192) Also properly throwing SSLHandshakeException in some cases. Fixes unwrap bug for large messages. (#189) If you write a record and dont have enough destination buffer space to read all the plaintext, the plaintext gets left in the plaintext buffer and the next record you write ends up in the ciphertext buffer (and you read the leftover plaintext from the last record), and you continue to have a record sitting in the ciphertext buffer until you get two records that dont fit in the buffer together, at which point you get the short write and subsequent exception. Also added a test to verify the bug./Add Java 8 style SNI hostname to OpenSSLEngineImpl (#155) The SNIHostName, et al., support was lacking from OpenSSLEngineImpl causing endpoint protocol identification to fail in Netty tests./Add error-prone and fix all the errors (#146)/Throw SSLHandshakeException for bad certs. (#147) Also expanding some of the test coverage in OpenSSLEngineImplTest./Configure OCSP and SCTs on the SSL, not SSL_CTX. As Conscrypt is currently set up, one SSL_CTX (owned, ultimately, by the SSLContext) may correspond to multiple SSLParameters which, in the Java API, are configured on the SSLSocket or SSLEngine directly. Thus we should use the SSL versions of the APIs which now exist. This avoids mutating an SSL_CTX which may be shared by multiple SSLs with different configurations. Change-Id: I19485c316087004c6050d85520b0169f2ca0d493/Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/Add handshake listener to engine. (#136) Fixes restrictive output buffer size in wrap() (#114) We currently require that the output buffer be >= MAX_PACKET_SIZE. This is needlessly strict and causes the Netty tests to fail, since they only use 2k buffers. This PR copies over some of the recent changes from Netty to handle this properly./"
,,0.2625,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes OCSP and SCTs on the SSL, not SSL_CTX. As Conscrypt is currently set up, one SSL_CTX (owned, ultimately, by the SSLContext) may correspond to multiple SSLParameters which, in the Java API, are configured on the SSLSocket or SSLEngine directly. Thus we should use the SSL versions of the APIs which now exist. This avoids mutating an SSL_CTX which may be shared by multiple SSLs with different configurations. Change-Id: I19485c316087004c6050d85520b0169f2ca0d493/Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/Fixing various javadoc issues. (#124) Also locking down access to a couple utility classes./"
,,0.1275,conscrypt,"Add Java 8 style SNI hostname to OpenSSLEngineImpl (#155) The SNIHostName, et al., support was lacking from OpenSSLEngineImpl causing endpoint protocol identification to fail in Netty tests./Suppress Error-Prone warnings These warnings are not useful here, so suppress them./Use getDeclaredConstructor().newInstance() This allows some compile-time checks to be performed by the compiler. In this instance we dont do anything with the failure. See for more info./"
,,0.1121,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.1182,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.2619,conscrypt,"Move TrustManagerImpl to common. (#503) This is the first step in making the TrustManager implementation available on OpenJDK, which is necessary for TLS 1.3 because the TrustManager implementations in OpenJDK throw an exception when they encounter an SSLSocket or SSLEngine that reports a protocol not in their enumerated lists. It moves the code and tests over so they compile on OpenJDK, but doesnt yet change anything about the provider, so the code isnt used. There are a few changes necessary: Extract an interface for TrustedCertificateStore, which is still platform-only due to its reliance on specific directories to find certs and other details of the Android platform. Extract an interface for CertBlacklist, for the same reason. Adjust TrustManagerImpl to get implementations of the add-on functionality (CertBlacklist, CTLogStore, and CTPolicy) from the Platform class instead of constructing them itself and tolerate nulls for those classes. The Platform classes for non-platform builds return null for those classes, but we might want to change that in the future. Make a few minor changes while moving things over (JDK 6 source compatibility, adjust tests for JUnit4, etc.)./"
,,0.2449,conscrypt,"Reduce warning spam (#522) A significant number of log statements from this Platform method were due to bad file descriptors, so check for those and throw SocketException, which mirrors what sockets do when they have a bad file descriptor in other situations./Move TrustManagerImpl to common. (#503) This is the first step in making the TrustManager implementation available on OpenJDK, which is necessary for TLS 1.3 because the TrustManager implementations in OpenJDK throw an exception when they encounter an SSLSocket or SSLEngine that reports a protocol not in their enumerated lists. It moves the code and tests over so they compile on OpenJDK, but doesnt yet change anything about the provider, so the code isnt used. There are a few changes necessary: Extract an interface for TrustedCertificateStore, which is still platform-only due to its reliance on specific directories to find certs and other details of the Android platform. Extract an interface for CertBlacklist, for the same reason. Adjust TrustManagerImpl to get implementations of the add-on functionality (CertBlacklist, CTLogStore, and CTPolicy) from the Platform class instead of constructing them itself and tolerate nulls for those classes. The Platform classes for non-platform builds return null for those classes, but we might want to change that in the future. Make a few minor changes while moving things over (JDK 6 source compatibility, adjust tests for JUnit4, etc.)./"
,,0.24,conscrypt,"Dont init cipher suites if native code didnt load (#517) The try/catch and setting of loadError prevents the first static initializer in NativeCrypto from rendering the class unloadable, but the second static initializer still does, which means that users tend to get NoClassDefFoundErrors when they try to use Conscrypt instead of a more useful UnsatisfiedLinkError that points to the root cause./Move TrustManagerImpl to common. (#503) This is the first step in making the TrustManager implementation available on OpenJDK, which is necessary for TLS 1.3 because the TrustManager implementations in OpenJDK throw an exception when they encounter an SSLSocket or SSLEngine that reports a protocol not in their enumerated lists. It moves the code and tests over so they compile on OpenJDK, but doesnt yet change anything about the provider, so the code isnt used. There are a few changes necessary: Extract an interface for TrustedCertificateStore, which is still platform-only due to its reliance on specific directories to find certs and other details of the Android platform. Extract an interface for CertBlacklist, for the same reason. Adjust TrustManagerImpl to get implementations of the add-on functionality (CertBlacklist, CTLogStore, and CTPolicy) from the Platform class instead of constructing them itself and tolerate nulls for those classes. The Platform classes for non-platform builds return null for those classes, but we might want to change that in the future. Make a few minor changes while moving things over (JDK 6 source compatibility, adjust tests for JUnit4, etc.)./Stop using set_options to set protocol support. (#500) The *_set_min_protocol_version and *_set_max_protocol_version functions were introduced to be explicit about setting supported versions. Use those functions instead of SSL_set_options with disabling constants. There arent any higher-level tests because this is already covered by tests like SSLSocket.test_SSLSocket_setEnabledProtocols, SSLSocket.test_SSLSocket_noncontiguousProtocols_useLower, etc./"
,,0.2369,conscrypt,"Reduce warning spam (#522) A significant number of log statements from this Platform method were due to bad file descriptors, so check for those and throw SocketException, which mirrors what sockets do when they have a bad file descriptor in other situations./Move TrustManagerImpl to common. (#503) This is the first step in making the TrustManager implementation available on OpenJDK, which is necessary for TLS 1.3 because the TrustManager implementations in OpenJDK throw an exception when they encounter an SSLSocket or SSLEngine that reports a protocol not in their enumerated lists. It moves the code and tests over so they compile on OpenJDK, but doesnt yet change anything about the provider, so the code isnt used. There are a few changes necessary: Extract an interface for TrustedCertificateStore, which is still platform-only due to its reliance on specific directories to find certs and other details of the Android platform. Extract an interface for CertBlacklist, for the same reason. Adjust TrustManagerImpl to get implementations of the add-on functionality (CertBlacklist, CTLogStore, and CTPolicy) from the Platform class instead of constructing them itself and tolerate nulls for those classes. The Platform classes for non-platform builds return null for those classes, but we might want to change that in the future. Make a few minor changes while moving things over (JDK 6 source compatibility, adjust tests for JUnit4, etc.)./"
,,0.1239,conscrypt,General cleanup (#579) Deal with some new ErrorProne warnings: unnecessary parentheses and importing classes named Builder. Add new cert failure logging to the test logging file so it doesnt pollute the test output./
,,0.1239,conscrypt,General cleanup (#579) Deal with some new ErrorProne warnings: unnecessary parentheses and importing classes named Builder. Add new cert failure logging to the test logging file so it doesnt pollute the test output./
,,0.1308,conscrypt,General cleanup (#579) Deal with some new ErrorProne warnings: unnecessary parentheses and importing classes named Builder. Add new cert failure logging to the test logging file so it doesnt pollute the test output./
,,0.1274,conscrypt,General cleanup (#579) Deal with some new ErrorProne warnings: unnecessary parentheses and importing classes named Builder. Add new cert failure logging to the test logging file so it doesnt pollute the test output./
,,0.3426,conscrypt,"Move libcore testing classes into testing (#607) When conscrypt was first separated from AOSP some of the AOSP libcore classes were copied into libcore-stub which is compiled against for both the openjdk and platform builds but only used at runtime by the openjdk builds. Unfortunately, those classes clash with internal classes provided by the Android runtime which will cause problems in future releases. This change moves those libcore-stub classes that are only used for testing from their libcore.... package into a org.conscrypt.... package to prevent clashes. It also moves them out of the libcore-stub module and into the testing module so they will be used on both platform and openjdk builds./"
,,0.0648,conscrypt,"Remove CompatibilityCloseMonitor (#613) This is only used on Android and we dont believe its necessary. The ART team has asked that we remove it since the unbundled Android build reaches into libjavacore.so and explicitly references compiled symbol names, which is unreliable and could break in a future release./"
,,0.3253,conscrypt,"Move libcore testing classes into testing (#607) When conscrypt was first separated from AOSP some of the AOSP libcore classes were copied into libcore-stub which is compiled against for both the openjdk and platform builds but only used at runtime by the openjdk builds. Unfortunately, those classes clash with internal classes provided by the Android runtime which will cause problems in future releases. This change moves those libcore-stub classes that are only used for testing from their libcore.... package into a org.conscrypt.... package to prevent clashes. It also moves them out of the libcore-stub module and into the testing module so they will be used on both platform and openjdk builds./"
,,0.255,conscrypt,"Dont send TLS_FALLBACK_SCSV if max version is >= 1.2 (#651) TLS_FALLBACK_SCSV protects against downgrade attacks when clients implement a version fallback independent of TLS version negotiation, but if its set on a non-fallback connection attempt, it will prevent an otherwise-safe connection if the server supports a version higher than the client does. Because the default OpenJDK TLS implementation doesnt support TLS_FALLBACK_SCSV, some developers mistakenly enable it on every connection due to thinking its a normal cipher suite, which is starting to cause issues when servers upgrade to TLS 1.3. We can obviously omit it on connections with a max version of 1.3, since thats Conscrypts max version, so it cant be a version fallback. As far as connections with a max version of 1.2 are concerned, this type of fallback is generally not needed any longer, since TLS 1.3-supporting servers should all perform version negotiation properly. (Chrome and Firefox have both disabled version fallback entirely.) Thus TLS_FALLBACK_SCSVs presence in connections with a max version of 1.2 is significantly more likely to be a misconfiguration than a true fallback indication. We continue to include the cipher suite for connections with a max version of 1.1 or lower. First, flaws in pre-1.2 versions are more likely to exist than flaws in 1.2, so the benefit of flagging downgrades to those versions are higher. As well, fallback is most likely to be useful when dealing with buggy TLS 1.2 servers. Fixes"
,,0.0977,conscrypt,Add Conscrypt-specific hostname verifier (#636) This allows users to set hostname verifiers either Conscrypt-wide or on an individual trust manager without polluting the default HostnameVerifier of HttpsURLConnection. Fixes
,,0.0995,conscrypt,Add Conscrypt-specific hostname verifier (#636) This allows users to set hostname verifiers either Conscrypt-wide or on an individual trust manager without polluting the default HostnameVerifier of HttpsURLConnection. Fixes
,,0.245,conscrypt,"Dont send TLS_FALLBACK_SCSV if max version is >= 1.2 (#651) TLS_FALLBACK_SCSV protects against downgrade attacks when clients implement a version fallback independent of TLS version negotiation, but if its set on a non-fallback connection attempt, it will prevent an otherwise-safe connection if the server supports a version higher than the client does. Because the default OpenJDK TLS implementation doesnt support TLS_FALLBACK_SCSV, some developers mistakenly enable it on every connection due to thinking its a normal cipher suite, which is starting to cause issues when servers upgrade to TLS 1.3. We can obviously omit it on connections with a max version of 1.3, since thats Conscrypts max version, so it cant be a version fallback. As far as connections with a max version of 1.2 are concerned, this type of fallback is generally not needed any longer, since TLS 1.3-supporting servers should all perform version negotiation properly. (Chrome and Firefox have both disabled version fallback entirely.) Thus TLS_FALLBACK_SCSVs presence in connections with a max version of 1.2 is significantly more likely to be a misconfiguration than a true fallback indication. We continue to include the cipher suite for connections with a max version of 1.1 or lower. First, flaws in pre-1.2 versions are more likely to exist than flaws in 1.2, so the benefit of flagging downgrades to those versions are higher. As well, fallback is most likely to be useful when dealing with buggy TLS 1.2 servers. Fixes"
,,0.0616,Frostwire,"[android] SwipeLayout, dont crash if super.dispatchTouchEvent cant dispatch, just return as unhandled event/"
,,0.0647,Frostwire,[android] Changing itemsOffset parameter in SongFragment to avoid blank row creating at the end of the list/
,,0.1044,Frostwire,"[desktop/mac] .dylibs signed libosx_jdk8.dylib contains native dispatch functions for macOS, this needs to be rebuilt to pass new mac notarization process the new .dylib will only contain Dispatch.m symbols as the rest are not used, memory savings yay. Source here: libJMPlayer.dylib needs to be rebuilt as well with newer MacOS SDK to pass notarization, this will be a bitch but it might help fix a few bugs of the MPlayer on macOS/"
,,0.0771,javacpp,"* Exported `Loader.isLoadLibraries()`, which always returns true, except when the `Builder` loads the classes * Made it possible to specify a nested class (with a $ character in the name) on the command line * When `Pointer.limit 0`, the methods `put()`, `zero()`, and `asBuffer()` now assume a size of 1/"
,,0.0763,javacpp,"* Fixed duplicate code getting generated when both specifying the output filename with ""-o and using wildcards on packages containing nested classes/"
,,0.0815,javacpp,* Consider `Pointer` values `maxBytes` or `maxPhysicalBytes` suffixed with `%` as relative to `Runtime.maxMemory()` (pull IndexerTest and PointerTest on 32-bit platforms (issue
,,0.1013,javacpp,Fix call to `parseBytes()` to be relative to `Runtime.maxMemory()` also for `maxPhysicalBytes`/ * Consider `Pointer` values `maxBytes` or `maxPhysicalBytes` suffixed with `%` as relative to `Runtime.maxMemory()` (pull
,,0.4068,jna,"Improve error messages when illegal argument/return types are used git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix bug in stdcall function mapping when using struct by value Defer size_t/off_t definition, for now git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate Structure.ByReference reads Cache native library options as well as alignments/type mappers Ensure library options are passed to callbacks Add protection around remaining Pointer read/write calls Consolidate wide character reads/writes Avoid stack overflow reading self-referential structures or loops More prettification of Structure.toString Add size_t/off_t standard types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0843,jna,avoid reallocating Integer objects git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.27399999999999997,jna,Consolidate Structure.ByReference reads Cache native library options as well as alignments/type mappers Ensure library options are passed to callbacks Add protection around remaining Pointer read/write calls Consolidate wide character reads/writes Avoid stack overflow reading self-referential structures or loops More prettification of Structure.toString Add size_t/off_t standard types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2624,jna,Consolidate Structure.ByReference reads Cache native library options as well as alignments/type mappers Ensure library options are passed to callbacks Add protection around remaining Pointer read/write calls Consolidate wide character reads/writes Avoid stack overflow reading self-referential structures or loops More prettification of Structure.toString Add size_t/off_t standard types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix Memory ctor signature git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.5609,jna,"Fix javadoc warnings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Improve error messages when illegal argument/return types are used git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix bug in callback proxy.equals (wolfgang.roekelein) Clean up some javadoc git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix JNLP class loader method lookup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix bug in stdcall function mapping when using struct by value Defer size_t/off_t definition, for now git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate Structure.ByReference reads Cache native library options as well as alignments/type mappers Ensure library options are passed to callbacks Add protection around remaining Pointer read/write calls Consolidate wide character reads/writes Avoid stack overflow reading self-referential structures or loops More prettification of Structure.toString Add size_t/off_t standard types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/reinstate w32 JAWT workaround; tests work without it, but demo code doesnt git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate structure ffi type info initialization and avoid premature GC Enable union by-value by using largest fields type info Explicitly throw IllegalArgument on bad type info Throw IllegalState on missing type info Explicitly write version/md5 info into Makefile from ant (to avoid platform-specific variances in sed) Make Structure.ByValue/ByReference public to allow client code comparisons Consolidate Structure field get/set operations Avoid extra Pointer peer lookup from native code (wmeissner) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/defer AWT toolkit initialization until actual JAWT use Make w32 dynamically load JAWT to avoid forcing toolkit init on JNA load git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Use simpler workaround for loading AWT/JAWT on X11-based platforms git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.3543,jna,Consolidate structure ffi type info initialization and avoid premature GC Enable union by-value by using largest fields type info Explicitly throw IllegalArgument on bad type info Throw IllegalState on missing type info Explicitly write version/md5 info into Makefile from ant (to avoid platform-specific variances in sed) Make Structure.ByValue/ByReference public to allow client code comparisons Consolidate Structure field get/set operations Avoid extra Pointer peer lookup from native code (wmeissner) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.5313,jna,"Fix bug in STructure.toArray w/nested struct arrays git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix bug in nested struct array read/write git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Improve error messages when illegal argument/return types are used git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix bug in stdcall function mapping when using struct by value Defer size_t/off_t definition, for now git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate Structure.ByReference reads Cache native library options as well as alignments/type mappers Ensure library options are passed to callbacks Add protection around remaining Pointer read/write calls Consolidate wide character reads/writes Avoid stack overflow reading self-referential structures or loops More prettification of Structure.toString Add size_t/off_t standard types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix NPE when sizing struct with a struct array field git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix VM crash running test under linux-amd64 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix arg/result handling for callback values in callbacks git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate structure ffi type info initialization and avoid premature GC Enable union by-value by using largest fields type info Explicitly throw IllegalArgument on bad type info Throw IllegalState on missing type info Explicitly write version/md5 info into Makefile from ant (to avoid platform-specific variances in sed) Make Structure.ByValue/ByReference public to allow client code comparisons Consolidate Structure field get/set operations Avoid extra Pointer peer lookup from native code (wmeissner) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0945,jna,Fix bug in ByValue structs using NativeMapped git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix NPE when using NativeMapped within Structure ( git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.08800000000000001,jna,Fix division by zero on OSX/ppc calculating struct size Fix overwriting of already-initialized NativeMapped field in struct when calculating struct size git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.5598,jna,"update project files (netbeans/eclipse) use setjmp/longjmp to recover from w32 faults instead of simply setting SP embed version resource information in w32 dll dont update last error if ffi_call faults git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix bug in Pointer.setChar git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix bug in stdcall function mapping when using struct by value Defer size_t/off_t definition, for now git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate Structure.ByReference reads Cache native library options as well as alignments/type mappers Ensure library options are passed to callbacks Add protection around remaining Pointer read/write calls Consolidate wide character reads/writes Avoid stack overflow reading self-referential structures or loops More prettification of Structure.toString Add size_t/off_t standard types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate structure ffi type info initialization and avoid premature GC Enable union by-value by using largest fields type info Explicitly throw IllegalArgument on bad type info Throw IllegalState on missing type info Explicitly write version/md5 info into Makefile from ant (to avoid platform-specific variances in sed) Make Structure.ByValue/ByReference public to allow client code comparisons Consolidate Structure field get/set operations Avoid extra Pointer peer lookup from native code (wmeissner) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/defer AWT toolkit initialization until actual JAWT use Make w32 dynamically load JAWT to avoid forcing toolkit init on JNA load git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Avoid error loading JAWT when running headless Use primary colors in window shape test (Dan) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Use simpler workaround for loading AWT/JAWT on X11-based platforms git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.373,jna,"Improve error messages when illegal argument/return types are used git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix bug in stdcall function mapping when using struct by value Defer size_t/off_t definition, for now git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix arg/result handling for callback values in callbacks git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/defer AWT toolkit initialization until actual JAWT use Make w32 dynamically load JAWT to avoid forcing toolkit init on JNA load git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1103,jna,Dont keep a strong reference to the library proxy Keep a mapping for the proxy on calls to loadLibrary Dont fail if no alpha on shaped window demo Clean up a few comments git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix failure messages in demo git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.3598,jna,Consolidate structure ffi type info initialization and avoid premature GC Enable union by-value by using largest fields type info Explicitly throw IllegalArgument on bad type info Throw IllegalState on missing type info Explicitly write version/md5 info into Makefile from ant (to avoid platform-specific variances in sed) Make Structure.ByValue/ByReference public to allow client code comparisons Consolidate Structure field get/set operations Avoid extra Pointer peer lookup from native code (wmeissner) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0838,jna,Improve error messages when illegal argument/return types are used git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.3825,jna,Improve error messages when illegal argument/return types are used git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate structure ffi type info initialization and avoid premature GC Enable union by-value by using largest fields type info Explicitly throw IllegalArgument on bad type info Throw IllegalState on missing type info Explicitly write version/md5 info into Makefile from ant (to avoid platform-specific variances in sed) Make Structure.ByValue/ByReference public to allow client code comparisons Consolidate Structure field get/set operations Avoid extra Pointer peer lookup from native code (wmeissner) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1934,jna,Avoid creating too many windows when setting window mask git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/defer AWT toolkit initialization until actual JAWT use Make w32 dynamically load JAWT to avoid forcing toolkit init on JNA load git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Avoid error loading JAWT when running headless Use primary colors in window shape test (Dan) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2332,jna,Fix linux library name mapping (sans regexp) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1064,jna,"Fix 32/64-bit library lookup where both arch versions exist Try lib prefix on w32 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Apply xylos library load patch, fix versioned name checking tests git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.3842,jna,Fix bug in callback proxy.equals (wolfgang.roekelein) Clean up some javadoc git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate Structure.ByReference reads Cache native library options as well as alignments/type mappers Ensure library options are passed to callbacks Add protection around remaining Pointer read/write calls Consolidate wide character reads/writes Avoid stack overflow reading self-referential structures or loops More prettification of Structure.toString Add size_t/off_t standard types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix arg/result handling for callback values in callbacks git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0784,jna,avoid reallocating Integer objects git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0724,jna,fix w32 api type mapper bug exposed by last round of changes git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0998,jna,"Fix bug in stdcall function mapping when using struct by value Defer size_t/off_t definition, for now git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.3679,jna,Consolidate structure ffi type info initialization and avoid premature GC Enable union by-value by using largest fields type info Explicitly throw IllegalArgument on bad type info Throw IllegalState on missing type info Explicitly write version/md5 info into Makefile from ant (to avoid platform-specific variances in sed) Make Structure.ByValue/ByReference public to allow client code comparisons Consolidate Structure field get/set operations Avoid extra Pointer peer lookup from native code (wmeissner) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0792,jna,Fix NPE in NativeMappedConverter git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix NPE when using NativeMapped within Structure ( git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1971,jna,"Fix non-w32 compilation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/update project files (netbeans/eclipse) use setjmp/longjmp to recover from w32 faults instead of simply setting SP embed version resource information in w32 dll dont update last error if ffi_call faults git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix bug in stdcall function mapping when using struct by value Defer size_t/off_t definition, for now git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0778,jna,Fix bug checking IntegerType limits git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0765,jna,Fix NPE when using NativeMapped within Structure ( git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0723,OpenDDS,Fixed dissector bugs./
,,0.0724,OpenDDS,"Initial support for Wireshark 2.x, see TODO comments proto_tree_add* still needs to be handled as this has a large breaking change in wireshark/"
,,0.324,OpenDDS,"Dissector: Handle invalid ITLs, mark missing ITLs Handle Segfaults in sample dissectors from invalid ITLs. This wouldnt detect if an ITL is valid, just check if a pointer is definitely invalid during the payload dissection, inform the user via the GUI that the error is most likely caused by an invalid ITL file and exit as gracefully as possible (exit()). Ideally it would just mark the packets as malformed and recover, but that code is less than ideal (using set long jump from the SIGSEGV handler). Also in this commit is using Wiresharks expert info to inform the user in the GUI that it couldnt dissect a sample payload for other reasons: No Topic to Track or No Dissector could be found for the Type./Dissector: Basic Payload Dissection in WS2 This is the basic framework for payload dissection in wireshark2. Involves adding a hf vector to the Sample_Manager Singleton, adding fields as they encountered in Sample_Dissector, and merging them with the constant DCPS fields and passing the result to wireshark when DCPS is registered. Sample Fields are left with a int that is the wireshark field id (hf_). During packet dissect, Sample_Fields are passed the wireshark field id and using that they can add data corresponding to their field. Payload type is now set on opendds.sample.payload and payload contents are added in a tree under that. Work left as of writing this is: to fix/complete registration of non string fields, involve composite types (seq, union, etc), clean up Sample_Manager usage, check/stop possible leak of dynamically generated field names and get working with tests other than Messenger./Dissector: Fixed switched labels on opendds.length/Dissector: Fixed ""double"" DCPS packet info In the packet tree, OpenDDS packet infomation would be added twice to the packet information tree, at least in Wireshark 2.4.1 for the Messager tests. This appears to resolve that by removing a dissection call for TCP packets./DCPS Dissector now running on Wireshark 2.4.1 Added ""ws"" prefix to remaining calls to proto_tree_add and tvb_length./"
,,0.2073,OpenDDS,"Merge pull request from iguessthislldo/wireshark2 Wireshark 2 Dissector: Fixes for Windows and Scoreboard/Dissector: Changes for Scoreboard, and others Also: Print ITL files and types found Fixed Bug where every field was a struct/Dissector: Adjustments for WS compatibility Made some changes to README Sample Dissection enabled for Wireshark 1.x. Attempted to make compatible with the next release, 2.5/2.6, but it has an assertion error on start up. 1.10 and before segfaults. Tested successfully with 1.12, 2.0, 2.2, and 2.4 on Linux./Dissector: Various Smaller Tasks Completely Removed ws_proto_tree_add_text(). Mark Packet if a determinable error occurs during sample dissection./"
,,0.24,OpenDDS,"Merge pull request from iguessthislldo/wireshark_improvements dissector: Fixed Type Support and expert changes/dissector: Fixed Type Support and expert changes Added support for dissection for OpenDDS fixed-point numbers which are converted to doubles for numerical functions. If ACE_CDR::Fixed is missing, a message will be displayed that this is so. Also started marking some packets with a warning instead of marking it as malformed. For example, when an individual field fails for some reason or non essential information is unavailable, like the dissector ITL file./Merge pull request from iguessthislldo/wireshark2 Wireshark 2 Dissector: Fixes for Windows and Scoreboard/Dissector: Changes for Scoreboard, and others Also: Print ITL files and types found Fixed Bug where every field was a struct/Dissector: %s %C ACE_DEBUG/Dissector: Fixed Content Filter Display/Dissector: READ and error handling fix/Dissector: Adjustments for WS compatibility Made some changes to README Sample Dissection enabled for Wireshark 1.x. Attempted to make compatible with the next release, 2.5/2.6, but it has an assertion error on start up. 1.10 and before segfaults. Tested successfully with 1.12, 2.0, 2.2, and 2.4 on Linux./Dissector: Fixs for PR Addressing Adams inital comments, Codacy, the Merge Conflict and a few things I found along the way./Dissector: Various Smaller Tasks Completely Removed ws_proto_tree_add_text(). Mark Packet if a determinable error occurs during sample dissection./Dissector: Serializer Refactor: Compiles, but broken/Dissector: Namespace Resolution and Union Bug Added Sample_Base as a Parent Class to Sample_Field and Sample_Dissector. Sample_Base holds wireshark namespace and field for every context that its child class is used in. Tweaked Array and Sequence Labels and Namespace. For now using ""_e"" (for element) to access an element of the sequence or array. Removed namespace debug messages. Fixed bug in Union length calculation that caused String Key Test to hang on dissection./"
,,0.1225,OpenDDS,Dissector: Refctr SD with RCH (Compiles but broken)/Various Improvements to the Dissector Made small changes to make it more complaint with what Wireshark is expecting. Some Formatting fixes and more comments Fixed a malformed packet error where multiple samples causes a boundary error of some kind./
,,0.0856,OpenDDS,"Dissector: Removed RCH, Fixed Warnings Using Reference Count Handles was not working out as well as I liked, so I have removed them, but left the double tree pass initialization so that something similar (along the lines of the Proxy pattern) might be able to be done in the future maybe. Also got rid of proto_tree_add_*_format() warnings by inserting ""%s"" in the parameters./"
,,0.0994,pljava,"Add large object truncate and 64-bit offsets. PG 8.3 introduced inv_truncate, and 9.3 made offsets/lengths 64 bit. Whats nice is that the Java and JNI method signatures have always been 64-bit ready; now just stop downcasting to 32 on 9.3+ PostgreSQLs where 64 bit offsets are really accepted./"
,,0.0901,realm-java,"Moved the Table annotation into ""com.tightdb"" package (issue "".generated"" suffix in generated sources packages (issue and adjusted examples due to the model changes (issue"
,,0.0765,realm-java,DOS line endings eliminated. Pelase avoid reintroducing them./
,,0.0786,realm-java,DOS line endings eliminated. Pelase avoid reintroducing them./
,,0.0744,realm-java,DOS line endings eliminated. Pelase avoid reintroducing them./
,,0.0765,realm-java,DOS line endings eliminated. Pelase avoid reintroducing them./
,,0.0765,realm-java,DOS line endings eliminated. Pelase avoid reintroducing them./
,,0.0765,realm-java,DOS line endings eliminated. Pelase avoid reintroducing them./
,,0.0725,realm-java,Supports new Version API (so far undocumented). Changed tableview->is_valid() to is_attached() Updated *.h files they must be autogenerated and not fixed by hand./
,,0.0938,realm-java,Merge pull request from ClaudiuBele/patch-1 Fixed RealmResults javadoc issues/Fixed javadoc issues tags have been corrected in RealmResults.java/
,,0.0714,realm-java,Handle null value for String in Json when updating Fix Update the objects String field to empty string when the corresponding field in Json is null./Merge pull request from realm/cm-bug-updatejson-date Fix Date and byte[] being reset when using createOrUpdateFromJson/
,,0.1407,realm-java,"Merge pull request from realm/my/fix-1644 fix RealmProxy code generator to avoid warnings/Removed update() method from generated proxy class corresponding to un-updatable model. fixes useless cast and raw type warnings in generated proxy classes. This warnings are reported when `-Xlint:all` is added to the compilar args. Example configuration of `build.gradle` is: ``` allprojects { gradle.projectsEvaluated { tasks.withType(JavaCompile) { options.compilerArgs options.compilerArgs } } } ```/Merge pull request from realm/my/field-indices-cache-for-each-Realm fix for for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./"
,,0.1366,realm-java,"Merge pull request from realm/my/fix-1644 fix RealmProxy code generator to avoid warnings/Removed update() method from generated proxy class corresponding to un-updatable model. fixes useless cast and raw type warnings in generated proxy classes. This warnings are reported when `-Xlint:all` is added to the compilar args. Example configuration of `build.gradle` is: ``` allprojects { gradle.projectsEvaluated { tasks.withType(JavaCompile) { options.compilerArgs options.compilerArgs } } } ```/Merge pull request from realm/my/field-indices-cache-for-each-Realm fix for for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./"
,,0.0556,realm-java,fix tests/
,,0.0774,realm-java,REAL_NOEXCEPT was removed from core/enabling encryption exception again/REAL_NOEXCEPT was removed from core/fix tests/Merge pull request from realm/mc-enc-not-supported Add RealmEncryptionNotSupportedException/Update core to v0.89.8 Add RealmEncryptionNotSupportedException/
,,0.0968,realm-java,addPrimaryKey() on RealmObjectSchema misses Index addition. (#2832) RealmObjectSchema.addPrimaryKey() is supposed to add a search index to its primary key field but it is currently missing. This is to fix the addition and removal of a search index related to primary key methods in RealmObjectSchema./
,,0.4781,realm-java,"add default value instruction support (#3462) * add default value support to Table class * Table#isNull() and TableView#isNull() * use default value feature * added a test to check if nullified link can be overwritten by default value * removed duplicate thread check when constructing proxy objects (and small bugfix in setter of the list). * added thread check * reflect review comments * reflect comment in JNI code/Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by a lint error in proxy classes when the minSdkVersion of users project is smaller than 11. (#3364) fixes 3105 (#3306) * Fixing issue with Cyclic dependency insert or the existing copyToRealm, adding support for managed RealmObject/"
,,0.4879,realm-java,"add default value instruction support (#3462) * add default value support to Table class * Table#isNull() and TableView#isNull() * use default value feature * added a test to check if nullified link can be overwritten by default value * removed duplicate thread check when constructing proxy objects (and small bugfix in setter of the list). * added thread check * reflect review comments * reflect comment in JNI code/Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by a lint error in proxy classes when the minSdkVersion of users project is smaller than 11. (#3364) fixes 3105 (#3306) * Fixing issue with Cyclic dependency insert or the existing copyToRealm, adding support for managed RealmObject/"
,,0.5022,realm-java,"Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by"
,,0.4302,realm-java,"Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/"
,,0.0708,realm-java,Add cause to RealmMigrationNeededException (#3482)/Merge pull request from realm/mc/realm-file-excpetion Add RealmFileException/Add RealmFileException to replace RealmIOException and IncompatibleLockFileException. Also it is mapped to the same name exception in ObjectStore to give user a detailed kind of file exception./
,,0.2538,realm-java,"Refactor RealmLog (#3643) The motivation: * The previous implementaion for JNI log needs calls like: JNI Java JNI. It is not quite effecient for the most common case log in JNI and sync. * The previous log levels are bit confusing. * util.cpp gets messy. * The Logger class in Java gets confusing with the Logger from core/sync. So this commit makes below changes: * Adds RealmLogger to replace Logger. Creates a adaptor to ensure the subclass of Logger can still be used by the new system before we remove the Logger class. * Adds cpp namespace jni_impl and jni_util, and make log relevant code belong to these two namepsaces. * Moves the RealmLog to JNI. * Implenment a default Android logger in native code. * Add tag support for realm-java Logger. Java side is using tag ""REALM_JAVA"", JNI side is using tag ""REALM_JNI"" and sync is using tag ""REALM_CORE"". * All tags share the same log level. * Some cleanups. * Fix When there is existing java logger, calling log after ThrowNew will crash in native code because of a pending Java exception. It should be avoided. * Deprecate AndroidLogger./"
,,0.1308,realm-java,add default value instruction support (#3462) * add default value support to Table class * Table#isNull() and TableView#isNull() * use default value feature * added a test to check if nullified link can be overwritten by default value * removed duplicate thread check when constructing proxy objects (and small bugfix in setter of the list). * added thread check * reflect review comments * reflect comment in JNI code/
,,0.2649,realm-java,add default value instruction support (#3462) * add default value support to Table class * Table#isNull() and TableView#isNull() * use default value feature * added a test to check if nullified link can be overwritten by default value * removed duplicate thread check when constructing proxy objects (and small bugfix in setter of the list). * added thread check * reflect review comments * reflect comment in JNI code/Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by
,,0.0556,realm-java,Minor grammar fixes (#3722)/Merge pull request from realm/merge-1e5e15-to-master Fix merge from 1e5e15 to master/Fix native crash in DynamicRealmObject#setList() (#3550)/
,,0.4449,realm-java,"Removing FIXMEs and create them as Github issues. (#130)/Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Merge pull request from realm/merge-e62d11-to-master Fix merge from e62d11 to master/"
,,0.3213,realm-java,"Refactor RealmLog (#3643) The motivation: * The previous implementaion for JNI log needs calls like: JNI Java JNI. It is not quite effecient for the most common case log in JNI and sync. * The previous log levels are bit confusing. * util.cpp gets messy. * The Logger class in Java gets confusing with the Logger from core/sync. So this commit makes below changes: * Adds RealmLogger to replace Logger. Creates a adaptor to ensure the subclass of Logger can still be used by the new system before we remove the Logger class. * Adds cpp namespace jni_impl and jni_util, and make log relevant code belong to these two namepsaces. * Moves the RealmLog to JNI. * Implenment a default Android logger in native code. * Add tag support for realm-java Logger. Java side is using tag ""REALM_JAVA"", JNI side is using tag ""REALM_JNI"" and sync is using tag ""REALM_CORE"". * All tags share the same log level. * Some cleanups. * Fix When there is existing java logger, calling log after ThrowNew will crash in native code because of a pending Java exception. It should be avoided. * Deprecate AndroidLogger./fix temp directory name (#3653)/allow to put Realm database file on external storage. (#3591) * set the path of the directory of named pipes to fix * update CHANGELOG * add a test for issue3140 * update test * follow the chenges in object-store * skip an external storage test on the device where SELinux is not enforced * rename test * rename variable * update object-store * make SharedRealm#temporaryDirectory volatile * address findbugs error/Fixed bug in path when getting access tokens for Realms (#157)/Add cause to RealmMigrationNeededException (#3482)/add default value instruction support (#3462) * add default value support to Table class * Table#isNull() and TableView#isNull() * use default value feature * added a test to check if nullified link can be overwritten by default value * removed duplicate thread check when constructing proxy objects (and small bugfix in setter of the list). * added thread check * reflect review comments * reflect comment in JNI code/Make RealmAsyncTask into an interface (#133) * Make RealmAsyncTask into an interface and move the implementation into internal package. Then we can create the async task in different internal packages without exposing the constructor to outside. Part of fix for pull request from realm/merge-d73611-to-master Fix merge from d73611 to master/fix merge mistakes/Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by Object Store [PART4] OS notifications (#3370) * Use OSs notification mechanism to notify threads. * Create RealmNotificer interface for decouple Android related handler logic. * Create AndroidNotifier for the handler notifications. The major change of this PR is about the timing. The notifications are not sent immediately after transaction committed. Instead, there is a dedicated thread monitoring changes and notify others when changes happen. The known problem is for every RealmConfiguration, a monitor thread will be created which is not ideal for app which is using multiple RealmConfiguration. There are different implementations for the monitoring thread in OS. For Android, we can choose from generic which is based on the cores wait_for_change() and android which is used by dotnet based on the named pipe. To align with dotnet, we are using the named pipe for now which also enables notifications between realm-java and realm-dotnet./Merge pull request from realm/mc/realm-file-excpetion Add RealmFileException/Add RealmFileException to replace RealmIOException and IncompatibleLockFileException. Also it is mapped to the same name exception in ObjectStore to give user a detailed kind of file exception./Wait all async tasks done before next test (#3319) This is highly related with Below things are still guaranteed by this change after commit async transaction: * When callback function called (onSuccess/onError), the background Realm is closed. * When any change listeners called, the background Realm is closed. What is true now but it is not guaranteed in the future: * Background Realm might not be closed before REALM_CHANGED sent (not received). Due to this, to avoid the flaky tests, we have to ensure all async tasks quit peacefully before start the next test. This is implemented by wait and check in the TestRealmConfigurationFactory. NOTE: Any test, if the async tasks cannot be finished peacefully in a certain time, it has to be considered as a problem and fixed. This would be needed by OS notifications since Java wont have a precise control of sending REALM_CHANGED anymore./Merge pull request from realm/merge-78ccde-to-master Fix merge from 78ccde to master/Nh/fixing 3105 (#3306) * Fixing issue with Cyclic dependency insert or the existing copyToRealm, adding support for managed RealmObject/"
,,0.0873,realm-java,"Nh/fix 3966 (#3979) Realm migration is triggered, when the primary key definition is altered (#3966)/Java lint warnings with proxy class (#3948) Fix a bug that caused unexpected MigrationNeededException in very rare case. (#3768) In sync mode, `validateTable()` must get all fields in the tabla./"
,,0.0855,realm-java,"Nh/fix 3966 (#3979) Realm migration is triggered, when the primary key definition is altered (#3966)/Java lint warnings with proxy class (#3948) Fix a bug that caused unexpected MigrationNeededException in very rare case. (#3768) In sync mode, `validateTable()` must get all fields in the tabla./"
,,0.0795,realm-java,"Nh/fix 3966 (#3979) Realm migration is triggered, when the primary key definition is altered (#3966)/Java lint warnings with proxy class (#3948) Fix pull request from realm/merge-a8d647-to-master Fix merge from a8d647 to master/Fixed a bug that caused unexpected MigrationNeededException in very rare case. (#3768) In sync mode, `validateTable()` must get all fields in the tabla./"
,,0.1523,realm-java,Fix tests and remove unnecessary imports and fields. (#4125) * Fix tests. * Remove unnecessary imports and fields./
,,0.1446,realm-java,Fix tests and remove unnecessary imports and fields. (#4125) * Fix tests. * Remove unnecessary imports and fields./
,,0.1427,realm-java,Fix tests and remove unnecessary imports and fields. (#4125) * Fix tests. * Remove unnecessary imports and fields./
,,0.5182,realm-java,"Verify schema for backlinks by OS Add computed properties in the proxys expected schema info, so the schema validation in Object Store will check for linking objects. Throw IllegalStateException if the backlink schema validation fails. ISE is more suitable here since backlink does not exist in the schema. Normally the way to handle this issue is not by adding a migration block, instead, just changing the declaration in the model class. Rewrite and enable the tests which are related to the linking objects schema validation by mocking the expected schema info./Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./Merge pull request from realm/merge-ea02c9-to-master Fix merge from ea02c9 to master/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.536,realm-java,"Verify schema for backlinks by OS Add computed properties in the proxys expected schema info, so the schema validation in Object Store will check for linking objects. Throw IllegalStateException if the backlink schema validation fails. ISE is more suitable here since backlink does not exist in the schema. Normally the way to handle this issue is not by adding a migration block, instead, just changing the declaration in the model class. Rewrite and enable the tests which are related to the linking objects schema validation by mocking the expected schema info./Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./Merge pull request from realm/merge-ea02c9-to-master Fix merge from ea02c9 to master/Merge pull request from realm/merge-8d3e17-to-master Fix merge from 8d3e17 to master/Make the proxy toString methods reveal themselves (#4623) * Make the proxy toString methods reveal themselves * Fix preprocessor UTs * Address PR comments/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.5003,realm-java,"copyToRealmOrUpdate cause dup values in list field (#5023) Close We are using HashMap to maintain a cache of added managed RealmObject when doing copyOrUpdate. But if the given object graph contains objects which have same PK but are different java object, cache missing will happen. That caused the object got set multiple times. For non-list fields, it is not a problem since it will eventually has the expected value if users objects graph is consistent. For list, that results the elements in the list are added multiple times since we dont clear the RealmList in copy()./Verify schema for backlinks by OS Add computed properties in the proxys expected schema info, so the schema validation in Object Store will check for linking objects. Throw IllegalStateException if the backlink schema validation fails. ISE is more suitable here since backlink does not exist in the schema. Normally the way to handle this issue is not by adding a migration block, instead, just changing the declaration in the model class. Rewrite and enable the tests which are related to the linking objects schema validation by mocking the expected schema info./Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./Merge pull request from realm/merge-ea02c9-to-master Fix merge from ea02c9 to master/Merge pull request from realm/merge-8d3e17-to-master Fix merge from 8d3e17 to master/Make the proxy toString methods reveal themselves (#4623) * Make the proxy toString methods reveal themselves * Fix preprocessor UTs * Address PR comments/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.0618,realm-java,Explicitly specify Locale for String.format() in our annotation processor (#4853) * add Locale on formatting strings in our annotation processor. * fix formatting/Merge pull request from realm/merge-e0e891-to-master Fix merge from e0e891 to master/
,,0.365,realm-java,Merge pull request from realm/merge-7fbccc-to-master-4.0 Fix merge from 7fbccc to master-4.0/fix TestHelper.generateRandomString(int)/Merge pull request from realm/merge-ea02c9-to-master Fix merge from ea02c9 to master/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.4269,realm-java,"Add CompactOnLaunch. (#4857) * Implement CompactOnLaunch. This commit adds RealmConfiguration.compactOnLaunch and RealmConfiguration.Builder.compactOnLaunch(CompactOnLaunchCallback). It makes a Realm determines if it should be compacted. * Throw an exception if it is read-only Realm. * Add readOnly_compactOnLaunch_throws * Fix a wrong signature. * Add tests to check compactOnLaunch. * Fix tests. * Add Javadoc. * Updated CHANGELOG>md * Fix a typo * PR feedback. * PR feedback: Improve tests. * PR feedback. * Improve Javadocs sentences. * Support Proguard. * Rename more accurate. * PR feedback. * Fix Proguard. * Fix JNI code. * PR feedback: Remove 2 createConfiguration. * PR feedback * Add RealmConfiguration.Builder.compactOnLaunch(). * Fix a bug of JNI code. * Add more tests. * Improve Javadoc. * PR feedback: Add a test to check a bug. * add a test to check a bug where compactOnLaunch is called each time a Realm is opened on a new thread. * PR feedback * Imporve Javadoc. * Fix a test (Thread). * PR: fix a test./Fix ErrorProne warnings/Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./Fix test case with missing linking object schema Those tests pass with current schema implementation since currently it will create extra object schemas which are not in the module. This behaviour is not right and will fail those tests in the future schema refactor. So always define all the needed object schemas in the module./"
,,0.0686,realm-java,Fix ErrorProne warnings/
,,0.4191,realm-java,"Fix ErrorProne warnings/Merge pull request from realm/merge-ea02c9-to-master Fix merge from ea02c9 to master/Split createTable & getTable (#4689) To support Stable IDs, the primary key has to be created while the table is created. This will require a new internal API createTableWithPK in the future. The previous getTable behaviour would be quite confusing to support that. getTable will only return the table if it exists. createTable is the one to be used to create tables. Add JavaExceptionDef to have all common Java exception names in a single place. Remove useless tests./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.0686,realm-java,Fix ErrorProne warnings/
,,0.198,realm-java,Add CompactOnLaunch. (#4857) * Implement CompactOnLaunch. This commit adds RealmConfiguration.compactOnLaunch and RealmConfiguration.Builder.compactOnLaunch(CompactOnLaunchCallback). It makes a Realm determines if it should be compacted. * Throw an exception if it is read-only Realm. * Add readOnly_compactOnLaunch_throws * Fix a wrong signature. * Add tests to check compactOnLaunch. * Fix tests. * Add Javadoc. * Updated CHANGELOG>md * Fix a typo * PR feedback. * PR feedback: Improve tests. * PR feedback. * Improve Javadocs sentences. * Support Proguard. * Rename more accurate. * PR feedback. * Fix Proguard. * Fix JNI code. * PR feedback: Remove 2 createConfiguration. * PR feedback * Add RealmConfiguration.Builder.compactOnLaunch(). * Fix a bug of JNI code. * Add more tests. * Improve Javadoc. * PR feedback: Add a test to check a bug. * add a test to check a bug where compactOnLaunch is called each time a Realm is opened on a new thread. * PR feedback * Imporve Javadoc. * Fix a test (Thread). * PR: fix a test./
,,0.3859,realm-java,"Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./Add RealmObject.getRealm() and DynamicRealmObject.getDynamicRealm(). (#4778) * Add RealmObject.getConfiguration(RealmModel) (#4720). * revert a change in Realm.java * check exception message * Now RealmObject.getConfiguration(RealmModel) returns null if the model is unmanaged * add RealmObject.getConfiguration() * implement RealmObject#getRealm() and DynamicRealmObject#getDynamicRealm() * fix markup * remove empty tests * fix tests/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.5275,realm-java,"Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.4257,realm-java,Backlink queries (#4704) * Fixing unit tests for backlink queries. * Reintroducing of a native implementation of isNotEmpty(). * Moving inverse relationships out of beta stage./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.5026,realm-java,"Add CompactOnLaunch. (#4857) * Implement CompactOnLaunch. This commit adds RealmConfiguration.compactOnLaunch and RealmConfiguration.Builder.compactOnLaunch(CompactOnLaunchCallback). It makes a Realm determines if it should be compacted. * Throw an exception if it is read-only Realm. * Add readOnly_compactOnLaunch_throws * Fix a wrong signature. * Add tests to check compactOnLaunch. * Fix tests. * Add Javadoc. * Updated CHANGELOG>md * Fix a typo * PR feedback. * PR feedback: Improve tests. * PR feedback. * Improve Javadocs sentences. * Support Proguard. * Rename more accurate. * PR feedback. * Fix Proguard. * Fix JNI code. * PR feedback: Remove 2 createConfiguration. * PR feedback * Add RealmConfiguration.Builder.compactOnLaunch(). * Fix a bug of JNI code. * Add more tests. * Improve Javadoc. * PR feedback: Add a test to check a bug. * add a test to check a bug where compactOnLaunch is called each time a Realm is opened on a new thread. * PR feedback * Imporve Javadoc. * Fix a test (Thread). * PR: fix a test./Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./Split createTable & getTable (#4689) To support Stable IDs, the primary key has to be created while the table is created. This will require a new internal API createTableWithPK in the future. The previous getTable behaviour would be quite confusing to support that. getTable will only return the table if it exists. createTable is the one to be used to create tables. Add JavaExceptionDef to have all common Java exception names in a single place. Remove useless tests./Nh/android support ssl (#4591) * Expose two new SyncConfiguration options to 1: Disable TLS verification. 2: provide the trusted root CA to validate the RealmObjectServer TLS connection (since OpenSSL doesnt have access to Android keystore) fixes queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.3872,realm-java,"Merge pull request from realm/merge-7fbccc-to-master-4.0 Fix merge from 7fbccc to master-4.0/Fix class name length check (#5019) * fix class name length check * fix the value of TABLE_NAME_MAX_LENGTH * fix failed tests * fix failed tests * fix failed tests/add Nullable annotation to methods that can return null (#4999) * add Nullable annotation to methods that can return null * add changelog entry for introfucinf annotation. * fix Kotlin example * fix Kotlin test/Update sync 2.0.0-rc12 (#4928) There are some breaking changes from sync/core in this release: Object ID column name has been renamed from __OID to OID Instead of hardcoding it in java, we read it from sync if it is built with sync. Otherwise hardcode it in JNI. Since core started using cmake, the openssl objects are not a part of core release anymore. Instead, it will be released to s3 independently. Update ROS to 2.0.0-rc2-285/Merge pull request from realm/merge-ea02c9-to-master Fix merge from ea02c9 to master/Converting nullable PK fields with null values (#4798) RealmObjectSchema.setRequired() will throw if the PK field has null values stored. Call set_xxx_unique when converting nullability on a PK field. Remove useless check in the proxy generator which caused inconsistency exception. Add relevant test cases./Split createTable & getTable (#4689) To support Stable IDs, the primary key has to be created while the table is created. This will require a new internal API createTableWithPK in the future. The previous getTable behaviour would be quite confusing to support that. getTable will only return the table if it exists. createTable is the one to be used to create tables. Add JavaExceptionDef to have all common Java exception names in a single place. Remove useless tests./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.4317,realm-java,add Nullable annotation to methods that can return null (#4999) * add Nullable annotation to methods that can return null * add changelog entry for introfucinf annotation. * fix Kotlin example * fix Kotlin test/Backlink queries (#4704) * Fixing unit tests for backlink queries. * Reintroducing of a native implementation of isNotEmpty(). * Moving inverse relationships out of beta stage./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.5326,realm-java,"Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.3611,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3763,realm-java,add Nullable annotation to methods that can return null (#4999) * add Nullable annotation to methods that can return null * add changelog entry for introfucinf annotation. * fix Kotlin example * fix Kotlin test/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.4896,realm-java,"Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./add Nullable annotation to methods that can return null (#4999) * add Nullable annotation to methods that can return null * add changelog entry for introfucinf annotation. * fix Kotlin example * fix Kotlin test/Fix findbugs/Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./Merge pull request from realm/merge-ea02c9-to-master Fix merge from ea02c9 to master/Merge pull request from realm/merge-5ab06b-to-master Fix merge from 5ab06b to master/Merge pull request from realm/merge-6a01b2-to-master Fix merge from 6a01b2 to master/Fix queries not working on proguarded Realms model classes (#4690)/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.071,realm-java,Fix list.move for unmanaged lists. (#5872)/
,,0.0577,rocksdb,Fix compile of compact_file_example/
,,0.0609,rocksdb,Fix a memory leak of Slice objects from org.rocksdb.WBWIRocksIterator#entry1/
,,0.0636,rocksdb,Fix the javadoc and the formatting of the base-classes for objects with native references/
,,0.0717,rocksdb,Fix formatting identified by `arc lint`/Fix the javadoc and the formatting of the base-classes for objects with native references/
