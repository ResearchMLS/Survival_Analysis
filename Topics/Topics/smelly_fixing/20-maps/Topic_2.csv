Topic_no,Keywords,Contrib,System,Text
2,"throw, key, error, support, provide, exception, signature, thrpt_op, change, commit, mutex_thrpt, build, java, type, boringssl, ad, cherry_picked, cipher, catch, ops_put",0.1462,conscrypt,"Throw exceptions on wrong key type in Signature Our engine can handle both RSA and DSA, but we need to throw an error if the wrong key type is supplied after weve initialized to emulate other providers. Also, apparently OpenSSL is really flexible, because calling EVP_SignInit had the same effect as EVP_VerifyInit. Change this to be correct even though the underlying implementation in OpenSSL doesnt care. Change-Id: If9223d17909fcf86437b9669c204fc544e6d12ff/Ensure faster OpenSSLSignature is used when possible by doing proper case insensitive comparison Bug: 5934554 Change-Id: I640cd54c227df2bf662d484cb2af95ece4d13421/"
,,0.0731,conscrypt,Signature.verify should not throw if called twice Bug: Bug: 6870225 (cherry-picked from 52ec5bcc7d5d042d7ba6d0244d98ee72007a95e4) Change-Id: I29ee6feb4df9505b1691418a9213fe69f840e1ea/Signature.verify should not throw if called twice Bug: Change-Id: Iad18e46729dcd283f4cecd65994ac7b741bd3036/
,,0.4002,conscrypt,"Add OpenSSLEngineImpl Add support for SSLEngine via OpenSSL APIs. Currently this supports just the basic SSLEngine functionality. It can be improved in efficiency and performance, but it appears not to leak anything and be correct according to our test suites. Change-Id: Iea2dc3922e7c30e26daca38361877bd2f88ae668/DO NOT MERGE NativeCrypto: Handle 0-byte bignum arrays Some DSA tests were calling with bignum arrays that had the high bit set indicating a negative number. Also an empty array was being passed as another part of the test. This was working, but it was reading one byte past the end of the buffer. (cherry picked from commit 5b1934c717914323ddb0395f549ae11075a587da) Bug: 13789608 Change-Id: Ibd5a0dce61703ea569fd483f8acf66fd149703f8/ALPN: change socket calls to SSL_set_alpn_protos Calling SSL_CTX_set_alpn_protos appears to be detrimental to thread safety since the implementation of it resets the values. Its not idempotent to call it multiple times like SSL_CTX_enable_npn. Bug: Change-Id: I09ed9e75d08528300b86201c3e847b26702d4284/Use the new endpointVerificationAlgorithm API Use the new X509ExtendedTrustManager and use the new getEndpointVerificationAlgorithm to check the hostname during the handshake. Bug: 13103812 Change-Id: Id0a74d4ef21a7d7c90357a111f99b09971e535d0/am 652ff53b: Fix up concurrent use of APIs * commit 652ff53bd48ed61389337a42d8e50cdb7ace0fec: Fix up concurrent use of APIs/am fe959f9a: am 652ff53b: Fix up concurrent use of APIs * commit fe959f9a94cd0d09038401b509a637cc3caf152f: Fix up concurrent use of APIs/am 652ff53b: Fix up concurrent use of APIs * commit 652ff53bd48ed61389337a42d8e50cdb7ace0fec: Fix up concurrent use of APIs/Fix up concurrent use of APIs Code that is incorrectly using MessageDigest, Signature, or Mac in multiple threads simultaneously could cause a SEGV if OpenSSL is clearing out the MD_CTX at the same time another thread is trying to write to it. Make sure we initialize a new MD_CTX after each run to avoid crashing. The program using the instances concurrently is still wrong and will most likely get inconsistent results. Switch to using a context object instance to make sure we can hold a reference to the object during the native call. Bug: 8787753 Change-Id: I2518613a47cf03c811a29d17040804fc708394dd/Harden (EC)DSA signatures against weak nonces. Private key information is leaked by (EC)DSA signatures when nonces are produced by a weak RNG. This CL enables a mitigation provided by OpenSSL: mix in private key and message being signed into randomly generated nonce. Provided private key was generated by strong RNG, this should mitigate the weakness. NOTE: This mitigation is not implemented for signatures which use hardware-backed private keys (AndroidKeyStore). Change-Id: I60dbf57bff3cfcdcbbeb18be5d9dfba523cc6bb8/"
,,0.3998,conscrypt,"Changes to support asynchronous close interruption This change contains fixes to conscrypt from libcore change I37de3e7d1a005a73821221e6156d10b95c595d7a Bug: 13927110 Change-Id: Ied42e930e32013f93415625968372d3b997bd539/Make AppData creation symmetric AppData was being created in SSL_do_handshake, but freed in SSL_free. Make it symmetric by creating AppData in SSL_new instead. The SSLEngine may call do_handshake multiple times to complete a handshake, but this was creating an AppData each time it entered. Creating in SSL_new avoids the problem of checking whether it was already created on each entry into SSL_do_handshake calls. Bug: 14247219 Change-Id: I825486798250998a4d4141201bda68a4dffe13a4/Add OpenSSLEngineImpl Add support for SSLEngine via OpenSSL APIs. Currently this supports just the basic SSLEngine functionality. It can be improved in efficiency and performance, but it appears not to leak anything and be correct according to our test suites. Change-Id: Iea2dc3922e7c30e26daca38361877bd2f88ae668/DO NOT MERGE NativeCrypto: Handle 0-byte bignum arrays Some DSA tests were calling with bignum arrays that had the high bit set indicating a negative number. Also an empty array was being passed as another part of the test. This was working, but it was reading one byte past the end of the buffer. (cherry picked from commit 5b1934c717914323ddb0395f549ae11075a587da) Bug: 13789608 Change-Id: Ibd5a0dce61703ea569fd483f8acf66fd149703f8/DO NOT MERGE BIGNUM convert to Java BigInteger Java BigInteger is in twos complement, so it needs conversion for negative numbers. We were mishandling it before and the previous change just hacked around it. Actually convert to twos complement instead. (cherry picked from commit 1744cf2b54cc7183ff83a3a2eab3a92a8d95ff55) Bug: 13789608 Change-Id: I6bfe9577f0936678476193b55433b7d7dbc04400/ALPN: change socket calls to SSL_set_alpn_protos Calling SSL_CTX_set_alpn_protos appears to be detrimental to thread safety since the implementation of it resets the values. Its not idempotent to call it multiple times like SSL_CTX_enable_npn. Bug: Change-Id: I09ed9e75d08528300b86201c3e847b26702d4284/am 88eb6c92: am a0c196d7: Throw SSLHandshakeException for errors during handshake * commit 88eb6c927cc0b7e0d03ca21d581ad248030bfa9f: Throw SSLHandshakeException for errors during handshake/am a0c196d7: Throw SSLHandshakeException for errors during handshake * commit a0c196d76f1ed4fddeb94873b9aef47e50059cf2: Throw SSLHandshakeException for errors during handshake/Add JNI_TRACE_MD to cut down on noise During start-up of vogar, it does thousands of digests on the input class files which makes the output really noisy. Since debugging MD stuff is uncommon, just hide it behind another debug flag. Change-Id: I972a1b61c6ffe2d4cc345b089f0be10751ea32e4/Throw SSLHandshakeException for errors during handshake This is a subclass of SSLHandshake, so its not technically any different, but more sophisticated clients use this to differentiate between a failure during handshake and a general SSL failure. Bug: 13130968 Change-Id: Ifad026c9af6748c1f7cb6a75f8f49aa3e75deea8/Use the new endpointVerificationAlgorithm API Use the new X509ExtendedTrustManager and use the new getEndpointVerificationAlgorithm to check the hostname during the handshake. Bug: 13103812 Change-Id: Id0a74d4ef21a7d7c90357a111f99b09971e535d0/am a8d4e027: am eb6d87ee: Merge ""Allow verification failures to send SSL alert"" * commit a8d4e02750cf20b92e5ff2895d9f8b2d2e974245: Allow verification failures to send SSL alert/am eb6d87ee: Merge ""Allow verification failures to send SSL alert"" * commit eb6d87ee2d1939aa81e914dc0d4a3bc625ea10dd: Allow verification failures to send SSL alert/am eb6d87ee: Merge ""Allow verification failures to send SSL alert"" * commit eb6d87ee2d1939aa81e914dc0d4a3bc625ea10dd: Allow verification failures to send SSL alert/Merge ""Allow verification failures to send SSL alert""/Allow verification failures to send SSL alert Before we were relying on our pending exception to abort the SSL handshake, but the SSL alert was not sent to the server. This enables peer verification in the OpenSSL to send the alerts and cut the handshake off earlier. In OpenSSL, the ssl/s3_clnt.c had code that only sent an alert if verify mode was not SSL_VERIFY_NONE. Since were handling all the verification during the callback, we can special case anything we want to do for anonymous ciphers in the callback. Change-Id: I6c8fd0d0c6402e29ef3cb5fc5156eef2f4191ff0/am 88758d46: Fix LP64 builds * commit 88758d462641e4d2e72d26e55c270bfac97f3b08: Fix LP64 builds/am 652ff53b: Fix up concurrent use of APIs * commit 652ff53bd48ed61389337a42d8e50cdb7ace0fec: Fix up concurrent use of APIs/am ca852134: Throw ArrayIndexOutOfBoundsException instead of generic * commit ca8521342b2b2269fb2cd31b3c81cf3d49c3f6ba: Throw ArrayIndexOutOfBoundsException instead of generic/Return SSL_TLSEXT_ERR_NOACK with no NPN/ALPN We were returning SSL_TLSEXT_ERR_OK even if we did not select any NPN/ALPN support. Bug: Change-Id: I79ea821512f03f1391247d3bcfc7ac7d042ecb41/am 3bcae05d: Add extra debug statement in NativeCrypto * commit 3bcae05d3e7d33e19f0e506ce6310570e44f63d5: Add extra debug statement in NativeCrypto/am a64f5de7: am 88758d46: Fix LP64 builds * commit a64f5de77feb9f795a09e5649d2b2fa961634856: Fix LP64 builds/am 88758d46: Fix LP64 builds * commit 88758d462641e4d2e72d26e55c270bfac97f3b08: Fix LP64 builds/Fix LP64 builds The last parameter to EVP_DigestUpdate is a size_t which on LP64 platforms doesnt have the same size as unsigned int. Fix the type of the update_func function pointer accordingly. Change-Id: Idd3b544e479e05055bffb0470a4ef370fad984fe Signed-off-by: KÃˆvin PETIT fe959f9a: am 652ff53b: Fix up concurrent use of APIs * commit fe959f9a94cd0d09038401b509a637cc3caf152f: Fix up concurrent use of APIs/am 652ff53b: Fix up concurrent use of APIs * commit 652ff53bd48ed61389337a42d8e50cdb7ace0fec: Fix up concurrent use of APIs/Fix up concurrent use of APIs Code that is incorrectly using MessageDigest, Signature, or Mac in multiple threads simultaneously could cause a SEGV if OpenSSL is clearing out the MD_CTX at the same time another thread is trying to write to it. Make sure we initialize a new MD_CTX after each run to avoid crashing. The program using the instances concurrently is still wrong and will most likely get inconsistent results. Switch to using a context object instance to make sure we can hold a reference to the object during the native call. Bug: 8787753 Change-Id: I2518613a47cf03c811a29d17040804fc708394dd/am c0ec2406: am ca852134: Throw ArrayIndexOutOfBoundsException instead of generic * commit c0ec24066db8121613cdd51604e177e266e5d484: Throw ArrayIndexOutOfBoundsException instead of generic/am ca852134: Throw ArrayIndexOutOfBoundsException instead of generic * commit ca8521342b2b2269fb2cd31b3c81cf3d49c3f6ba: Throw ArrayIndexOutOfBoundsException instead of generic/Throw ArrayIndexOutOfBoundsException instead of generic This exception is specifically for arrays which is what were dealing with here. Change-Id: I11be2c75019844701b305240152815d7c610fbef/Harden (EC)DSA signatures against weak nonces. Private key information is leaked by (EC)DSA signatures when nonces are produced by a weak RNG. This CL enables a mitigation provided by OpenSSL: mix in private key and message being signed into randomly generated nonce. Provided private key was generated by strong RNG, this should mitigate the weakness. NOTE: This mitigation is not implemented for signatures which use hardware-backed private keys (AndroidKeyStore). Change-Id: I60dbf57bff3cfcdcbbeb18be5d9dfba523cc6bb8/am f694798c: am 3bcae05d: Add extra debug statement in NativeCrypto * commit f694798cfd850d4158ee454ab10dc3fdc0ca5454: Add extra debug statement in NativeCrypto/am 3bcae05d: Add extra debug statement in NativeCrypto * commit 3bcae05d3e7d33e19f0e506ce6310570e44f63d5: Add extra debug statement in NativeCrypto/Add extra debug statement in NativeCrypto Need to track the output of X509_get_pubkey Change-Id: I2196edbe935c32eabce840556958af67abfc1980/"
,,0.2641,conscrypt,"Use the new endpointVerificationAlgorithm API Use the new X509ExtendedTrustManager and use the new getEndpointVerificationAlgorithm to check the hostname during the handshake. Bug: 13103812 Change-Id: Id0a74d4ef21a7d7c90357a111f99b09971e535d0/am a8d4d7cc: am af672dd9: Avoid NullPointerException when no client cert key provided. * commit a8d4d7ccb89c31545f2de9ebda33d6b8a094c038: Avoid NullPointerException when no client cert key provided./am af672dd9: Avoid NullPointerException when no client cert key provided. * commit af672dd97643a721f2b038660c8a9e105a23576a: Avoid NullPointerException when no client cert key provided./am af672dd9: Avoid NullPointerException when no client cert key provided. * commit af672dd97643a721f2b038660c8a9e105a23576a: Avoid NullPointerException when no client cert key provided./Avoid NullPointerException when no client cert key provided. When the user of a client-mode SSLEngine provides a client certificate but provides no key, the current implementation blows up with a NullPointerException. This CL makes the behavior aligned with RI. It does not blow up, but rather proceeds without sending a certificate_verify message to the server. Normally, this then leads to the server terminating the handshake. Change-Id: Ib8d3f7e4b4b7fdd9f4ec4acd42513c781a703f96/Support TLS/SSL without X509TrustManager or X509KeyManager. This makes TLS/SSL primitives operate as expected when no X509TrustManager or X509KeyManager is provided. Instead of blowing up with KeyManagementException or NullPointerException (or similar) when X509TrustManager or X509KeyManager is not provided, this CL makes SSLContext.init accept such setup, and makes SSLSocket and SSLEngine reject certificate chains, select no private keys/aliases, and accept no certificate issuers. Bug: 13563574 Change-Id: I8de58377a09025258357dd4da9f6cb1b6f2dab80/"
,,0.3973,conscrypt,"am 652ff53b: Fix up concurrent use of APIs * commit 652ff53bd48ed61389337a42d8e50cdb7ace0fec: Fix up concurrent use of APIs/am fe959f9a: am 652ff53b: Fix up concurrent use of APIs * commit fe959f9a94cd0d09038401b509a637cc3caf152f: Fix up concurrent use of APIs/am 652ff53b: Fix up concurrent use of APIs * commit 652ff53bd48ed61389337a42d8e50cdb7ace0fec: Fix up concurrent use of APIs/Fix up concurrent use of APIs Code that is incorrectly using MessageDigest, Signature, or Mac in multiple threads simultaneously could cause a SEGV if OpenSSL is clearing out the MD_CTX at the same time another thread is trying to write to it. Make sure we initialize a new MD_CTX after each run to avoid crashing. The program using the instances concurrently is still wrong and will most likely get inconsistent results. Switch to using a context object instance to make sure we can hold a reference to the object during the native call. Bug: 8787753 Change-Id: I2518613a47cf03c811a29d17040804fc708394dd/Harden (EC)DSA signatures against weak nonces. Private key information is leaked by (EC)DSA signatures when nonces are produced by a weak RNG. This CL enables a mitigation provided by OpenSSL: mix in private key and message being signed into randomly generated nonce. Provided private key was generated by strong RNG, this should mitigate the weakness. NOTE: This mitigation is not implemented for signatures which use hardware-backed private keys (AndroidKeyStore). Change-Id: I60dbf57bff3cfcdcbbeb18be5d9dfba523cc6bb8/"
,,0.4539,conscrypt,"am f76b17dd: Merge ""SSLEngine: fix some behaviors"" * commit f76b17dd896cac185bfec0b980a68a232f948c6a: SSLEngine: fix some behaviors/Merge ""SSLEngine: fix some behaviors""/SSLEngine: fix some behaviors * We were not checking buffer lengths. * wrap/unwrap should start a handshake. Change-Id: I35fbd8bf5eb699923f4712e7590bce7e7e13e529/SSLEngine: fix some behaviors * We were not checking buffer lengths. * wrap/unwrap should start a handshake. Change-Id: I35fbd8bf5eb699923f4712e7590bce7e7e13e529/Add OpenSSLEngineImpl Add support for SSLEngine via OpenSSL APIs. Currently this supports just the basic SSLEngine functionality. It can be improved in efficiency and performance, but it appears not to leak anything and be correct according to our test suites. Change-Id: Iea2dc3922e7c30e26daca38361877bd2f88ae668/ALPN: change socket calls to SSL_set_alpn_protos Calling SSL_CTX_set_alpn_protos appears to be detrimental to thread safety since the implementation of it resets the values. Its not idempotent to call it multiple times like SSL_CTX_enable_npn. Bug: Change-Id: I09ed9e75d08528300b86201c3e847b26702d4284/Use the new endpointVerificationAlgorithm API Use the new X509ExtendedTrustManager and use the new getEndpointVerificationAlgorithm to check the hostname during the handshake. Bug: 13103812 Change-Id: Id0a74d4ef21a7d7c90357a111f99b09971e535d0/am 652ff53b: Fix up concurrent use of APIs * commit 652ff53bd48ed61389337a42d8e50cdb7ace0fec: Fix up concurrent use of APIs/am 7c3263f1: OpenSSLX509Certificate: only catch BadPaddingException * commit 7c3263f16bae0f1b2125de2c3c1c683303e768ce: OpenSSLX509Certificate: only catch BadPaddingException/am fe959f9a: am 652ff53b: Fix up concurrent use of APIs * commit fe959f9a94cd0d09038401b509a637cc3caf152f: Fix up concurrent use of APIs/am 652ff53b: Fix up concurrent use of APIs * commit 652ff53bd48ed61389337a42d8e50cdb7ace0fec: Fix up concurrent use of APIs/Fix up concurrent use of APIs Code that is incorrectly using MessageDigest, Signature, or Mac in multiple threads simultaneously could cause a SEGV if OpenSSL is clearing out the MD_CTX at the same time another thread is trying to write to it. Make sure we initialize a new MD_CTX after each run to avoid crashing. The program using the instances concurrently is still wrong and will most likely get inconsistent results. Switch to using a context object instance to make sure we can hold a reference to the object during the native call. Bug: 8787753 Change-Id: I2518613a47cf03c811a29d17040804fc708394dd/Harden (EC)DSA signatures against weak nonces. Private key information is leaked by (EC)DSA signatures when nonces are produced by a weak RNG. This CL enables a mitigation provided by OpenSSL: mix in private key and message being signed into randomly generated nonce. Provided private key was generated by strong RNG, this should mitigate the weakness. NOTE: This mitigation is not implemented for signatures which use hardware-backed private keys (AndroidKeyStore). Change-Id: I60dbf57bff3cfcdcbbeb18be5d9dfba523cc6bb8/am 95369a99: am 7c3263f1: OpenSSLX509Certificate: only catch BadPaddingException * commit 95369a993991b7a1a7bd8060e988d3acacdb4c43: OpenSSLX509Certificate: only catch BadPaddingException/am 7c3263f1: OpenSSLX509Certificate: only catch BadPaddingException * commit 7c3263f16bae0f1b2125de2c3c1c683303e768ce: OpenSSLX509Certificate: only catch BadPaddingException/OpenSSLX509Certificate: only catch BadPaddingException We only need to catch BadPaddingException right now. Let the other non-RuntimeException exceptions pass. Change-Id: I5b6878250d428b1ee953092967b7418003ee9216/"
,,0.345,conscrypt,"Add OpenSSLEngineImpl Add support for SSLEngine via OpenSSL APIs. Currently this supports just the basic SSLEngine functionality. It can be improved in efficiency and performance, but it appears not to leak anything and be correct according to our test suites. Change-Id: Iea2dc3922e7c30e26daca38361877bd2f88ae668/ALPN: change socket calls to SSL_set_alpn_protos Calling SSL_CTX_set_alpn_protos appears to be detrimental to thread safety since the implementation of it resets the values. Its not idempotent to call it multiple times like SSL_CTX_enable_npn. Bug: Change-Id: I09ed9e75d08528300b86201c3e847b26702d4284/Use the new endpointVerificationAlgorithm API Use the new X509ExtendedTrustManager and use the new getEndpointVerificationAlgorithm to check the hostname during the handshake. Bug: 13103812 Change-Id: Id0a74d4ef21a7d7c90357a111f99b09971e535d0/am a8d4e027: am eb6d87ee: Merge ""Allow verification failures to send SSL alert"" * commit a8d4e02750cf20b92e5ff2895d9f8b2d2e974245: Allow verification failures to send SSL alert/am eb6d87ee: Merge ""Allow verification failures to send SSL alert"" * commit eb6d87ee2d1939aa81e914dc0d4a3bc625ea10dd: Allow verification failures to send SSL alert/am eb6d87ee: Merge ""Allow verification failures to send SSL alert"" * commit eb6d87ee2d1939aa81e914dc0d4a3bc625ea10dd: Allow verification failures to send SSL alert/Merge ""Allow verification failures to send SSL alert""/Allow verification failures to send SSL alert Before we were relying on our pending exception to abort the SSL handshake, but the SSL alert was not sent to the server. This enables peer verification in the OpenSSL to send the alerts and cut the handshake off earlier. In OpenSSL, the ssl/s3_clnt.c had code that only sent an alert if verify mode was not SSL_VERIFY_NONE. Since were handling all the verification during the callback, we can special case anything we want to do for anonymous ciphers in the callback. Change-Id: I6c8fd0d0c6402e29ef3cb5fc5156eef2f4191ff0/Support TLS/SSL without X509TrustManager or X509KeyManager. This makes TLS/SSL primitives operate as expected when no X509TrustManager or X509KeyManager is provided. Instead of blowing up with KeyManagementException or NullPointerException (or similar) when X509TrustManager or X509KeyManager is not provided, this CL makes SSLContext.init accept such setup, and makes SSLSocket and SSLEngine reject certificate chains, select no private keys/aliases, and accept no certificate issuers. Bug: 13563574 Change-Id: I8de58377a09025258357dd4da9f6cb1b6f2dab80/"
,,0.1299,conscrypt,Remove direct reference to PROVIDER_NAME Its unnecessary and this is the only code that does it like this. It casuses problems with unbundling since the PROVIDER_NAME can change when used unbundled. Bug: 15771893 Change-Id: I1450cf7033b0629e7b79616c3660ec12b8afb8d6/Remove direct reference to PROVIDER_NAME Its unnecessary and this is the only code that does it like this. It casuses problems with unbundling since the PROVIDER_NAME can change when used unbundled. (cherry-picked from commit c59af1c17b96618de24aa2d6bc682bac5ea6cf24) Bug: 15771893 Change-Id: I1450cf7033b0629e7b79616c3660ec12b8afb8d6/
,,0.1582,conscrypt,am f427ec90: Fix the ENGINE_finish/ENGINE_free mixup * commit f427ec902fa84d8df4f6dfc2822005a215023dde: Fix the ENGINE_finish/ENGINE_free mixup/am 532488fd: am 9a4f1dfb: Fix the ENGINE_finish/ENGINE_free mixup * commit 532488fdcaecc1fb5b3bfe3f31aa3fd0164fd3c6: Fix the ENGINE_finish/ENGINE_free mixup/am 9a4f1dfb: Fix the ENGINE_finish/ENGINE_free mixup * commit 9a4f1dfbeea80ec52c0d551afceb68435798c1a8: Fix the ENGINE_finish/ENGINE_free mixup/am 984b7ec6: Fix the ENGINE_finish/ENGINE_free mixup * commit 984b7ec6f5aab314117949a48e448ff4f6b65f16: Fix the ENGINE_finish/ENGINE_free mixup/Fix the ENGINE_finish/ENGINE_free mixup The tests were calling finish when it meant free. This caused tests to segmentation fault next time the ENGINE was looked up in the dynamic engine list. (cherry picked from commit 984b7ec6f5aab314117949a48e448ff4f6b65f16) Bug: 14994037 Change-Id: If7379fee26f7e79fa0b43104ac9d13b4ffb62ba8/Fix the ENGINE_finish/ENGINE_free mixup The tests were calling finish when it meant free. This caused tests to segmentation fault next time the ENGINE was looked up in the dynamic engine list. (cherry picked from commit 984b7ec6f5aab314117949a48e448ff4f6b65f16) Bug: 14994037 Change-Id: If7379fee26f7e79fa0b43104ac9d13b4ffb62ba8/Fix the ENGINE_finish/ENGINE_free mixup The tests were calling finish when it meant free. This caused tests to segmentation fault next time the ENGINE was looked up in the dynamic engine list. Bug: 14994037 Change-Id: If7379fee26f7e79fa0b43104ac9d13b4ffb62ba8/
,,0.578,conscrypt,"Enable any opaque private keys to be used with TLS/SSL stack. Prior to this CL, opaque private keys those that do not expose/export their key material were not supported by Conscrypts SSLSocket, SSLServerSocket and SSLEngine implementations if the keys were backed by other providers. This CL fixes this issue. Conscrypts TLS/SSL stack now works with arbitrary opaque private keys provided that: * for EC private key: an installed implementation of NONEwithECDSA Signature accepts the key for signing; and * for RSA private key: an installed implementation of NONEwithRSA Signature accepts the key for signing and an installed implementation of RSA/ECB/PKCS1Padding Cipher accepts the key for decryption. This normally requires that the JCA Provider which produced the PrivateKey instance expose the above Cipher transformation and Signature algorithms. HOW THIS WORKS The underlying OpenSSL TLS/SSL stack uses the provided private keys only to decrypt and sign. For opaque private keys these requests are delegated (same as before, via CryptoUpcalls) to corresponding Cipher (RSA/ECB/PKCS1Padding) and Signature (NONEwithRSA or NONEwithECDSA) implementations. Even when signing and decryption is outsourced, OpenSSL still needs the modulus (for RSA) and order (for EC), supposedly to estimate output size of signing or decryption operations. This information is not available via the PrivateKey interface. However, an opaque private key may still implement the RSAKey or ECKey interface which provides access to modulus or order but does not provide access to key material. Moreover, in all use cases of private keys with Conscrypts TLS/SSL stack the modulus or order can be obtained and provided to OpenSSL. In the case of private keys used for client or server authentication, the public key of the certificate is used as the source of the information. In the case of TLS Channel ID, the order is currently fixed and known (only NIST P-256 is supported). Bug: 19284418 Change-Id: I8fea2492f9cf48cfc29c3e7d2ee99a68e84e82ec/"
,,0.1733,conscrypt,"external/conscrypt: add NativeConstants. NativeConstants.java is generated by a C program and thus the values will automatically be kept in sync with the contents of the OpenSSL headers. Bug: 20521989 Change-Id: Ib5a97bf6ace05988e3eef4a9c8e02d0f707d46ad/am ba57c056: am 796ed069: conscrypt: throw exception for null references in NativeCrypto * commit ba57c05662c226fc0ef315ab025454dc10248010: conscrypt: throw exception for null references in NativeCrypto/am 796ed069: conscrypt: throw exception for null references in NativeCrypto * commit 796ed069bc90d1de9f45ea1f746edaeec8081ed3: conscrypt: throw exception for null references in NativeCrypto/conscrypt: throw exception for null references in NativeCrypto Adapted tests to use ""null"" instead of an Object with a null context, as null contexts are now rejected by constructors. bug: 19657430 Change-Id: I47ebfde7170e1818afd64a75a8e4bc1e1d588aea/"
,,0.5649,conscrypt,"am 066b2017: am 8d18c8a7: external/conscrypt: fix WITH_JNI_TRACE in light of BoringSSL update. * commit 066b2017250f6e880b8d9011cdf8618157d3d129: external/conscrypt: fix WITH_JNI_TRACE in light of BoringSSL update./am c1967b3c: am 7c0a4c86: Fix OpenSSL build for new AEAD changes * commit c1967b3cf71a1f4a2a277b7185ea7c6baf8e1106: Fix OpenSSL build for new AEAD changes/am 9d84edba: am 09b021a5: conscrypt: guard some error values that will be removed in BoringSSL. * commit 9d84edba7fe8109810f98d7af9fff56970b97ef7: conscrypt: guard some error values that will be removed in BoringSSL./Update to latest Conscrypt This includes AES/GCM/NoPadding support, changes for the latest BoringSSL revision, and some fixes while compiling with debugging flags fixes. Bug: 21085702 Change-Id: I0de7b15a32f532e625d74729fc6ff20809af6c78/am 066b2017: am 8d18c8a7: external/conscrypt: fix WITH_JNI_TRACE in light of BoringSSL update. * commit 066b2017250f6e880b8d9011cdf8618157d3d129: external/conscrypt: fix WITH_JNI_TRACE in light of BoringSSL update./am c1967b3c: am 7c0a4c86: Fix OpenSSL build for new AEAD changes * commit c1967b3cf71a1f4a2a277b7185ea7c6baf8e1106: Fix OpenSSL build for new AEAD changes/am 8d18c8a7: external/conscrypt: fix WITH_JNI_TRACE in light of BoringSSL update. * commit 8d18c8a7764a2f07f91db7340a3faab6e8242b5c: external/conscrypt: fix WITH_JNI_TRACE in light of BoringSSL update./am 7c0a4c86: Fix OpenSSL build for new AEAD changes * commit 7c0a4c86e6292b5bce675b4c6db2b8c6d2608be7: Fix OpenSSL build for new AEAD changes/Silence unused result warnings in conscrypt. So we can turn on _FORTIFY_SOURCE=2 for the host. Bug: Change-Id: Ie2b3eb7efb69a3def64be2c35bd8cc5fe3a8d85e/external/conscrypt: fix WITH_JNI_TRACE in light of BoringSSL update. These values in BoringSSL are now uint32_ts, which upsets the compiler when printing them as longs. This change casts the values to longs so that it continues to work with OpenSSL. Change-Id: I35af51d765d67b3c8c30e55b80eac24dda420a88/Fix OpenSSL build for new AEAD changes Change-Id: I06304121d29d6fdcc7dab7a2c8e9d208a394e0a8/OpenSSLCipher: add AEAD cipher This allows us to provide an implementation of AES-GCM using the new EVP_AEAD interface in BoringSSL. It simply buffers up the input until doFinal(...) is called which makes it much safer than any streaming interfaces, because the caller cant use the plaintext until its authenticated by the GHASH (or whatever other AEAD you happen to use). Bug: 20636336 Change-Id: I6e4b063a8137a16102b1f6ac15687a38ddfe1691/am 9d84edba: am 09b021a5: conscrypt: guard some error values that will be removed in BoringSSL. * commit 9d84edba7fe8109810f98d7af9fff56970b97ef7: conscrypt: guard some error values that will be removed in BoringSSL./am 09b021a5: conscrypt: guard some error values that will be removed in BoringSSL. * commit 09b021a5906c5a8ffa81a8709a029baa3576fbb5: conscrypt: guard some error values that will be removed in BoringSSL./conscrypt: guard some error values that will be removed in BoringSSL. The next BoringSSL update will further prune the error reasons that it defines. This change allows Conscrypt to continue to compile. Change-Id: I0d8681578c6635daedccdb11177d2b3a5e88485d/Disable RSA blinding for BoringSSL with no public exponent Switch to using the RSA_FLAG_NO_BLINDING for both OpenSSL and BoringSSL. The RSAPrivateKey constructor in the Java language only takes the modulus and private exponent, so we have to support no blinding. (cherry picked from commit fbb754fc646d109d9c0d42d94a7dced5eaa6b5d7) Bug: 20563652 Change-Id: I6264ffce428bf9847eb83dafb9119ccfe184d7f5/Disable RSA blinding for BoringSSL with no public exponent Switch to using the RSA_FLAG_NO_BLINDING for both OpenSSL and BoringSSL. The RSAPrivateKey constructor in the Java language only takes the modulus and private exponent, so we have to support no blinding. Bug: 20563652 Change-Id: I3ccd600d0e4f12ff154f816ab5efb0da38123e39/am f327f460: am dc77a71e: Fix method by which the EC curve type is determined * commit f327f4607c67c4d399abcbf00545a06605a44e4c: Fix method by which the EC curve type is determined/am dc77a71e: Fix method by which the EC curve type is determined * commit dc77a71ed6ce02fe2b4e78982825ec467598dbd7: Fix method by which the EC curve type is determined/Fix method by which the EC curve type is determined The way the curve type was determined was fragile when moving between processor types. Change it to a more explicit curve type check. Change-Id: I3fe1d6c38bd0e360ba3ec4f688b44485b5a1c7ab/external/conscrypt: ask OpenSSL for supported cipher suites. Rather than enumerate the list of supported cipher suites in conscrypt, ask OpenSSL for the list and just maintain a mapping from OpenSSLs names to the standard, external name. (The mapping could also be removed with BoringSSL since it can return the standard name for an SSL_CIPHER*. But in order to keep OpenSSL compat this change doesnt depend on that.) (cherry picked from commit d9a68f656782ee2fa0ca918e00522cdd25d33fdf) Bug: 20531880 Change-Id: Ib541c9787093e7b900052fdf12dd2a2029b4b020/external/conscrypt: ask OpenSSL for supported cipher suites. Rather than enumerate the list of supported cipher suites in conscrypt, ask OpenSSL for the list and just maintain a mapping from OpenSSLs names to the standard, external name. (The mapping could also be removed with BoringSSL since it can return the standard name for an SSL_CIPHER*. But in order to keep OpenSSL compat this change doesnt depend on that.) Bug: 20531880 Change-Id: Ib541c9787093e7b900052fdf12dd2a2029b4b020/am cad5f50c: am d12c5671: Throw InvalidKeyException when keystore key malformed * commit cad5f50cc98225895e149adffa551b3a7f5bedae: Throw InvalidKeyException when keystore key malformed/am 9ce87ac7: am 48d7b0a9: NativeCrypto: allow default exceptions * commit 9ce87ac75ebd3b250b5e17a3e51c13faacd381c8: NativeCrypto: allow default exceptions/am d12c5671: Throw InvalidKeyException when keystore key malformed * commit d12c56715e2c8fa8d5da69b5892eeab7373d1773: Throw InvalidKeyException when keystore key malformed/am 48d7b0a9: NativeCrypto: allow default exceptions * commit 48d7b0a992fc4c4556bf753932fc4098c9c4ca71: NativeCrypto: allow default exceptions/Throw InvalidKeyException when keystore key malformed When a keystore implementation cant decode a key for some reason, throw InvalidKeyException instead of RuntimeException. This will allow applications to handle the error instead of crashing. Bug: 20488918 Change-Id: I89215b5bc728ad1c266031bead940268025018a8 (cherry picked from commit 4415aa6cf61ea5443f88301c9ad921f8c840a4ad)/NativeCrypto: allow default exceptions Re-arrange the exception-throwing code to allow functions to pass in a default exception type instead of always throwing RuntimeException when a reason code doesnt match exactly with an exception type. (cherry picked from commit f2d30c9a2f73a21225728e4ba39467275dfddc01) Bug: 20488918 Change-Id: I557def7bbcfb164d2c781e0303431ff7a7793086/Throw InvalidKeyException when keystore key malformed When a keystore implementation cant decode a key for some reason, throw InvalidKeyException instead of RuntimeException. This will allow applications to handle the error instead of crashing. Bug: 20488918 Change-Id: I89215b5bc728ad1c266031bead940268025018a8/NativeCrypto: allow default exceptions Re-arrange the exception-throwing code to allow functions to pass in a default exception type instead of always throwing RuntimeException when a reason code doesnt match exactly with an exception type. Bug: 20488918 Change-Id: I557def7bbcfb164d2c781e0303431ff7a7793086/NativeCrypto: compatibility with OpenSSL OpenSSL has different definitions for the ECDSA functions which causes compilation errors when were being strict. Sprinkle in some more to allow compilation for both. Change-Id: Iafe3799289980fdf7862a861b2aee4517dbd869a/RI: cast to char* for JNI registration The RI has a different type that causing compilation errors if you dont do this cast. Change-Id: I5961d79c88bef6cba2dc0de9c81e310005e4712c/NativeCrypto: not finding a key is not fatal If we dont find a key in the keystore, we should just return null reference. The only time we should throw exceptions is when the key decoding failed or something else like that. Bug: 20488918 (cherry picked from commit 8098cbbc7fbf2d22402da487465a153734f9f9b6) Change-Id: I621b39257bc98d888f7ad390fb8648326c67dfc4/NativeCrypto: not finding a key is not fatal If we dont find a key in the keystore, we should just return null reference. The only time we should throw exceptions is when the key decoding failed or something else like that. Bug: 20488918 Change-Id: I85408615a9c7a63242178908f309f93a2972033c/am 5f20896e: am cac31e4e: am 8a77c208: NativeCrypto: do not discard pending exceptions * commit 5f20896e0106ac2e9784490effcec08a8c51c681: NativeCrypto: do not discard pending exceptions/external/conscrypt: add SSL_CIPHER_get_kx_name This will be used by a future change to avoid needing to know the OpenSSL-internal SSL_aRSA (etc) constants. Bug: 20521989 Change-Id: I99d83005530f81956d102426fe28beeaed058cea/am cac31e4e: am 8a77c208: NativeCrypto: do not discard pending exceptions * commit cac31e4e4af4c72617cec0fc0373814492f3fb0e: NativeCrypto: do not discard pending exceptions/am 8a77c208: NativeCrypto: do not discard pending exceptions * commit 8a77c20803591434b49dc1fb81414b9ce1f4083f: NativeCrypto: do not discard pending exceptions/NativeCrypto: do not discard pending exceptions The switch to native reference objects left some duplicate NullPointerException creation that led to some JNI warnings. Simply get rid of the redundant NullPointerException throws. Bug: 19657430 Change-Id: I7e6bcb74154078cf019bfdea5d2721f6e6cb8524/external/conscrypt: recognise des-ede-cbc as an alias for des-cbc. Bug: 20518919 Change-Id: I2b697529420a5c3fd9f96887a11977d261b3d1aa/OpenSSLEngine: do not try to load ENGINE for BoringSSL Since BoringSSL doesnt use ENGINE instances, we should not fail when the native code returns the equivalent of a NULL instance. This change propagates the knowledge of whether were using BoringSSL or OpenSSL up to the Java layer. Change-Id: Ib8c2224a909564ae6f0c6d5984020c44517f6c29/external/conscrypt: dont throw in native code if missing cipher. The calling Java code throws a more helpful exception which will aid in debugging. Bug: 20451412 Change-Id: I7dde46d5f0d5903ba2994d92bf22d78ee2e799a3/external/conscrypt: align registered modes with BoringSSL. Some of the more obscure modes BoringSSL doesnt support anymore, so just let Bouncycastle implement them. Bug: 20451412 Change-Id: I966e08493b1df741ffc114d3189b301456011a4e/am ba57c056: am 796ed069: conscrypt: throw exception for null references in NativeCrypto * commit ba57c05662c226fc0ef315ab025454dc10248010: conscrypt: throw exception for null references in NativeCrypto/am 796ed069: conscrypt: throw exception for null references in NativeCrypto * commit 796ed069bc90d1de9f45ea1f746edaeec8081ed3: conscrypt: throw exception for null references in NativeCrypto/conscrypt: throw exception for null references in NativeCrypto Adapted tests to use ""null"" instead of an Object with a null context, as null contexts are now rejected by constructors. bug: 19657430 Change-Id: I47ebfde7170e1818afd64a75a8e4bc1e1d588aea/Enable any opaque private keys to be used with TLS/SSL stack. Prior to this CL, opaque private keys those that do not expose/export their key material were not supported by Conscrypts SSLSocket, SSLServerSocket and SSLEngine implementations if the keys were backed by other providers. This CL fixes this issue. Conscrypts TLS/SSL stack now works with arbitrary opaque private keys provided that: * for EC private key: an installed implementation of NONEwithECDSA Signature accepts the key for signing; and * for RSA private key: an installed implementation of NONEwithRSA Signature accepts the key for signing and an installed implementation of RSA/ECB/PKCS1Padding Cipher accepts the key for decryption. This normally requires that the JCA Provider which produced the PrivateKey instance expose the above Cipher transformation and Signature algorithms. HOW THIS WORKS The underlying OpenSSL TLS/SSL stack uses the provided private keys only to decrypt and sign. For opaque private keys these requests are delegated (same as before, via CryptoUpcalls) to corresponding Cipher (RSA/ECB/PKCS1Padding) and Signature (NONEwithRSA or NONEwithECDSA) implementations. Even when signing and decryption is outsourced, OpenSSL still needs the modulus (for RSA) and order (for EC), supposedly to estimate output size of signing or decryption operations. This information is not available via the PrivateKey interface. However, an opaque private key may still implement the RSAKey or ECKey interface which provides access to modulus or order but does not provide access to key material. Moreover, in all use cases of private keys with Conscrypts TLS/SSL stack the modulus or order can be obtained and provided to OpenSSL. In the case of private keys used for client or server authentication, the public key of the certificate is used as the source of the information. In the case of TLS Channel ID, the order is currently fixed and known (only NIST P-256 is supported). Bug: 19284418 Change-Id: I8fea2492f9cf48cfc29c3e7d2ee99a68e84e82ec/Add back d2i_PKCS7_bio and PEM_read_bio_PKCS7. For the moment, the BoringSSL version is going to be broken until I get the needed changes into BoringSSL to support this. Change-Id: Id2c3f179c6f9fc4f4385d2274884e69530fabff0/am eb322309: am 0ccc17a0: external/conscrypt: a couple more BoringSSL build fixes. * commit eb32230947680c9aa461dc496904f4c8fd66ab39: external/conscrypt: a couple more BoringSSL build fixes./am 0ccc17a0: external/conscrypt: a couple more BoringSSL build fixes. * commit 0ccc17a0c3d05be22a357849ddc5f93bf431d4ec: external/conscrypt: a couple more BoringSSL build fixes./external/conscrypt: a couple more BoringSSL build fixes. I had these in my local client and didnt notice until now. Change-Id: I9c61447691d358acbaadb9b9a2f068b4106d266c/"
,,0.105,conscrypt,OpenSSLCipherRSA: reset bufferOffset on init Repeatedly using the Cipher instance caused failures since the offset is not reset the same time that a new buffer is allocated. Change-Id: Iadc4905a61b5909b911c48c29c11fb0bc52f78c6/external/conscrypt: add NativeConstants. NativeConstants.java is generated by a C program and thus the values will automatically be kept in sync with the contents of the OpenSSL headers. Bug: 20521989 Change-Id: Ib5a97bf6ace05988e3eef4a9c8e02d0f707d46ad/
,,0.0939,conscrypt,external/conscrypt: add NativeConstants. NativeConstants.java is generated by a C program and thus the values will automatically be kept in sync with the contents of the OpenSSL headers. Bug: 20521989 Change-Id: Ib5a97bf6ace05988e3eef4a9c8e02d0f707d46ad/
,,0.588,conscrypt,"Update to latest Conscrypt This includes AES/GCM/NoPadding support, changes for the latest BoringSSL revision, and some fixes while compiling with debugging flags fixes. Bug: 21085702 Change-Id: I0de7b15a32f532e625d74729fc6ff20809af6c78/OpenSSLCipher: add AEAD cipher This allows us to provide an implementation of AES-GCM using the new EVP_AEAD interface in BoringSSL. It simply buffers up the input until doFinal(...) is called which makes it much safer than any streaming interfaces, because the caller cant use the plaintext until its authenticated by the GHASH (or whatever other AEAD you happen to use). Bug: 20636336 Change-Id: I6e4b063a8137a16102b1f6ac15687a38ddfe1691/external/conscrypt: ask OpenSSL for supported cipher suites. Rather than enumerate the list of supported cipher suites in conscrypt, ask OpenSSL for the list and just maintain a mapping from OpenSSLs names to the standard, external name. (The mapping could also be removed with BoringSSL since it can return the standard name for an SSL_CIPHER*. But in order to keep OpenSSL compat this change doesnt depend on that.) (cherry picked from commit d9a68f656782ee2fa0ca918e00522cdd25d33fdf) Bug: 20531880 Change-Id: Ib541c9787093e7b900052fdf12dd2a2029b4b020/external/conscrypt: ask OpenSSL for supported cipher suites. Rather than enumerate the list of supported cipher suites in conscrypt, ask OpenSSL for the list and just maintain a mapping from OpenSSLs names to the standard, external name. (The mapping could also be removed with BoringSSL since it can return the standard name for an SSL_CIPHER*. But in order to keep OpenSSL compat this change doesnt depend on that.) Bug: 20531880 Change-Id: Ib541c9787093e7b900052fdf12dd2a2029b4b020/am cad5f50c: am d12c5671: Throw InvalidKeyException when keystore key malformed * commit cad5f50cc98225895e149adffa551b3a7f5bedae: Throw InvalidKeyException when keystore key malformed/am d12c5671: Throw InvalidKeyException when keystore key malformed * commit d12c56715e2c8fa8d5da69b5892eeab7373d1773: Throw InvalidKeyException when keystore key malformed/Throw InvalidKeyException when keystore key malformed When a keystore implementation cant decode a key for some reason, throw InvalidKeyException instead of RuntimeException. This will allow applications to handle the error instead of crashing. Bug: 20488918 Change-Id: I89215b5bc728ad1c266031bead940268025018a8 (cherry picked from commit 4415aa6cf61ea5443f88301c9ad921f8c840a4ad)/Throw InvalidKeyException when keystore key malformed When a keystore implementation cant decode a key for some reason, throw InvalidKeyException instead of RuntimeException. This will allow applications to handle the error instead of crashing. Bug: 20488918 Change-Id: I89215b5bc728ad1c266031bead940268025018a8/external/conscrypt: switch NativeCrypto itself to use NativeConstants. Now that other users of the constants in NativeCrypto have been switched over, those constants can be removed. Bug: 20521989 Change-Id: I276a1c8daeb3501b6924ff68cf9f1e9f6fbd63a9/external/conscrypt: add SSL_CIPHER_get_kx_name This will be used by a future change to avoid needing to know the OpenSSL-internal SSL_aRSA (etc) constants. Bug: 20521989 Change-Id: I99d83005530f81956d102426fe28beeaed058cea/OpenSSLEngine: do not try to load ENGINE for BoringSSL Since BoringSSL doesnt use ENGINE instances, we should not fail when the native code returns the equivalent of a NULL instance. This change propagates the knowledge of whether were using BoringSSL or OpenSSL up to the Java layer. Change-Id: Ib8c2224a909564ae6f0c6d5984020c44517f6c29/Enable any opaque private keys to be used with TLS/SSL stack. Prior to this CL, opaque private keys those that do not expose/export their key material were not supported by Conscrypts SSLSocket, SSLServerSocket and SSLEngine implementations if the keys were backed by other providers. This CL fixes this issue. Conscrypts TLS/SSL stack now works with arbitrary opaque private keys provided that: * for EC private key: an installed implementation of NONEwithECDSA Signature accepts the key for signing; and * for RSA private key: an installed implementation of NONEwithRSA Signature accepts the key for signing and an installed implementation of RSA/ECB/PKCS1Padding Cipher accepts the key for decryption. This normally requires that the JCA Provider which produced the PrivateKey instance expose the above Cipher transformation and Signature algorithms. HOW THIS WORKS The underlying OpenSSL TLS/SSL stack uses the provided private keys only to decrypt and sign. For opaque private keys these requests are delegated (same as before, via CryptoUpcalls) to corresponding Cipher (RSA/ECB/PKCS1Padding) and Signature (NONEwithRSA or NONEwithECDSA) implementations. Even when signing and decryption is outsourced, OpenSSL still needs the modulus (for RSA) and order (for EC), supposedly to estimate output size of signing or decryption operations. This information is not available via the PrivateKey interface. However, an opaque private key may still implement the RSAKey or ECKey interface which provides access to modulus or order but does not provide access to key material. Moreover, in all use cases of private keys with Conscrypts TLS/SSL stack the modulus or order can be obtained and provided to OpenSSL. In the case of private keys used for client or server authentication, the public key of the certificate is used as the source of the information. In the case of TLS Channel ID, the order is currently fixed and known (only NIST P-256 is supported). Bug: 19284418 Change-Id: I8fea2492f9cf48cfc29c3e7d2ee99a68e84e82ec/"
,,0.2322,conscrypt,"OpenSSLCipher: add AEAD cipher This allows us to provide an implementation of AES-GCM using the new EVP_AEAD interface in BoringSSL. It simply buffers up the input until doFinal(...) is called which makes it much safer than any streaming interfaces, because the caller cant use the plaintext until its authenticated by the GHASH (or whatever other AEAD you happen to use). Bug: 20636336 Change-Id: I6e4b063a8137a16102b1f6ac15687a38ddfe1691/OpenSSLCipher: refactor in preparation for AEAD BoringSSL uses a different interface for AEAD that is much simplier called EVP_AEAD. Separate out the EVP_CIPHER usage so that we can have another subclass with the EVP_AEAD usage. Bug: 20636336 Change-Id: I661d92bd449f2fcc3c4a6e511155490917ecef0c/am 1f186d47: am c2290a4b: am d4cca77f: OpenSSLCipher: exception when IV not specified * commit 1f186d47db651c2c8bdbd27d7c8c7eb12ee00868: OpenSSLCipher: exception when IV not specified/am c2290a4b: am d4cca77f: OpenSSLCipher: exception when IV not specified * commit c2290a4ba90b080cce06c93cad292f39e6049a9c: OpenSSLCipher: exception when IV not specified/am d4cca77f: OpenSSLCipher: exception when IV not specified * commit d4cca77f58721f32082a06b4c16631a3730844ca: OpenSSLCipher: exception when IV not specified/OpenSSLCipher: exception when IV not specified If youre decrypting with a mode that requires an IV, init should throw an exception indicating as much. Add the checks to make sure this happens. Bug: 19201819 Change-Id: I2d3481da4f63bffb340dc1197f6b5cb29360fbff/external/conscrypt: align registered modes with BoringSSL. Some of the more obscure modes BoringSSL doesnt support anymore, so just let Bouncycastle implement them. Bug: 20451412 Change-Id: I966e08493b1df741ffc114d3189b301456011a4e/"
,,0.0899,conscrypt,external/conscrypt: add NativeConstants. NativeConstants.java is generated by a C program and thus the values will automatically be kept in sync with the contents of the OpenSSL headers. Bug: 20521989 Change-Id: Ib5a97bf6ace05988e3eef4a9c8e02d0f707d46ad/
,,0.0939,conscrypt,external/conscrypt: add NativeConstants. NativeConstants.java is generated by a C program and thus the values will automatically be kept in sync with the contents of the OpenSSL headers. Bug: 20521989 Change-Id: Ib5a97bf6ace05988e3eef4a9c8e02d0f707d46ad/
,,0.578,conscrypt,"Rename Arrays to ArrayUtils To avoid conflict with the java.util.Arrays class, rename our own internal compatibility class to ArrayUtils. Change-Id: Iae79a4d37749e16e62712f3bb5038d870b78d999/external/conscrypt: add NativeConstants. NativeConstants.java is generated by a C program and thus the values will automatically be kept in sync with the contents of the OpenSSL headers. Bug: 20521989 Change-Id: Ib5a97bf6ace05988e3eef4a9c8e02d0f707d46ad/Enable any opaque private keys to be used with TLS/SSL stack. Prior to this CL, opaque private keys those that do not expose/export their key material were not supported by Conscrypts SSLSocket, SSLServerSocket and SSLEngine implementations if the keys were backed by other providers. This CL fixes this issue. Conscrypts TLS/SSL stack now works with arbitrary opaque private keys provided that: * for EC private key: an installed implementation of NONEwithECDSA Signature accepts the key for signing; and * for RSA private key: an installed implementation of NONEwithRSA Signature accepts the key for signing and an installed implementation of RSA/ECB/PKCS1Padding Cipher accepts the key for decryption. This normally requires that the JCA Provider which produced the PrivateKey instance expose the above Cipher transformation and Signature algorithms. HOW THIS WORKS The underlying OpenSSL TLS/SSL stack uses the provided private keys only to decrypt and sign. For opaque private keys these requests are delegated (same as before, via CryptoUpcalls) to corresponding Cipher (RSA/ECB/PKCS1Padding) and Signature (NONEwithRSA or NONEwithECDSA) implementations. Even when signing and decryption is outsourced, OpenSSL still needs the modulus (for RSA) and order (for EC), supposedly to estimate output size of signing or decryption operations. This information is not available via the PrivateKey interface. However, an opaque private key may still implement the RSAKey or ECKey interface which provides access to modulus or order but does not provide access to key material. Moreover, in all use cases of private keys with Conscrypts TLS/SSL stack the modulus or order can be obtained and provided to OpenSSL. In the case of private keys used for client or server authentication, the public key of the certificate is used as the source of the information. In the case of TLS Channel ID, the order is currently fixed and known (only NIST P-256 is supported). Bug: 19284418 Change-Id: I8fea2492f9cf48cfc29c3e7d2ee99a68e84e82ec/"
,,0.0731,conscrypt,"GCM: return the correct AlgorithmParameters Instead of the correct AlgorithmParameters of type ""GCM,"" we were returning the generic ""AES"" version that basically only converts to an IvParameterSpec. Bug: 22319986 Change-Id: Ib42905c3ad31e44b72e8066192bd26981c8351ba/"
,,0.2052,conscrypt,"Update NativeCryptoTest Test both client and server. Also we expect a SSLHandshakeException instead of an SSLProtocolException in one case. Bug: 21207627 (cherry picked from commit 5429f72d9c1e7bc6379e917e9b9116f1b0292b28) Change-Id: If895b03e2cece3a1a8d2f074a557c68f55a7021e/Update NativeCryptoTest Test both client and server. Also we expect a SSLHandshakeException instead of an SSLProtocolException in one case. Bug: 21207627 Change-Id: I717c88fe61e784f3cbfe983d6cbd52ab1e5f1631/am f7ab43f5: Merge ""external/conscrypt: remove assertion SSL_OP_NO_SSLv2 is set"" into mnc-dev * commit f7ab43f5e5861ddcc2549eae1fcb38c4a7eed54f: external/conscrypt: remove assertion SSL_OP_NO_SSLv2 is set/Merge ""external/conscrypt: remove assertion SSL_OP_NO_SSLv2 is set"" into mnc-dev/external/conscrypt: remove assertion SSL_OP_NO_SSLv2 is set SSL_OP_NO_SSLv2 is not a flag anymore (defined as 0 in ssh.h) Bug: 21875962 (cherry picked from commit 97e54bdde00eae7ffe4eb382e3f2702af4a2197b) Change-Id: I52004b893768b087577c078dcd1ba0ae1bdea911/am 2eb52794: am 97e54bdd: external/conscrypt: remove assertion SSL_OP_NO_SSLv2 is set * commit 2eb527946991afab9da5b87c2329c60f23042b88: external/conscrypt: remove assertion SSL_OP_NO_SSLv2 is set/am 97e54bdd: external/conscrypt: remove assertion SSL_OP_NO_SSLv2 is set * commit 97e54bdde00eae7ffe4eb382e3f2702af4a2197b: external/conscrypt: remove assertion SSL_OP_NO_SSLv2 is set/external/conscrypt: remove assertion SSL_OP_NO_SSLv2 is set SSL_OP_NO_SSLv2 is not a flag anymore (defined as 0 in ssh.h) Bug: 21875962 Change-Id: Ib8c2512c93f3aeb578bf49c8983e9467083b44df/conscrypt: change test of SSL_set_cipher_lists NativeCrypto.SSL_set_cipher_lists can accept the empty list as per c/154191 Bug: 21816861 (cherry picked from commit c0010ca585f9cdc1f09846e2d75a0a8f82420476) Change-Id: I6cf7563417d8b6fb9edbeade0947726275a76c18/conscrypt: change test of SSL_set_cipher_lists NativeCrypto.SSL_set_cipher_lists can accept the empty list as per c/154191 Bug: 21816861 Change-Id: I96f6d2f7733c5316179bc26a63c9fd3b28451b26/Add isFinite flag to OpenSSLBIOInputStream. The BIO created by OpenSSLBIOInputStream currently returns and sets the retry flag when read() returns zero on the underlying InputStream. This is correct for Ã¬infiniteÃ® streams (like a socket), but isnt correct for streams that have a definitive EOF. This change adds a flag to OpenSSLBIOInputStream so that cases where the input is finite (i.e. when parsing a PKCS#7 or X.509 block) can correctly return 0 at EOF from |BIO_read|. (cherry picked from commit 66537ee0121bdd14737191d14927da223f0809ee) Bug: 21396526 Bug: 21209493 Change-Id: Iaad5845621ab8b89b42d5d3ca8e67e297278ca55/Add isFinite flag to OpenSSLBIOInputStream. The BIO created by OpenSSLBIOInputStream currently returns and sets the retry flag when read() returns zero on the underlying InputStream. This is correct for Ã¬infiniteÃ® streams (like a socket), but isnt correct for streams that have a definitive EOF. This change adds a flag to OpenSSLBIOInputStream so that cases where the input is finite (i.e. when parsing a PKCS#7 or X.509 block) can correctly return 0 at EOF from |BIO_read|. Bug: 21396526 Bug: 21209493 Change-Id: Iaad5845621ab8b89b42d5d3ca8e67e297278ca55/"
,,0.075,conscrypt,"GCM: return the correct AlgorithmParameters Instead of the correct AlgorithmParameters of type ""GCM,"" we were returning the generic ""AES"" version that basically only converts to an IvParameterSpec. Bug: 22319986 Change-Id: Ib42905c3ad31e44b72e8066192bd26981c8351ba/"
,,0.6065,conscrypt,"Adjust Signature interface for BoringSSL BoringSSL will push the BAD_SIGNATURE error onto the stack for every signature error. In Java it just returns false from the Signature#verify call when the signature is incorrect. However, we still want to throw an exception for raw RSA when the number of signature bytes is larger than the modulus can express. Bug: 21209646 (cherry picked from commit 089b401856a4da378875e94108fe742d1cdf0db2) Change-Id: I96ada8762817a99df11da2f7e7b7310bb31d5cba/Adjust Signature interface for BoringSSL BoringSSL will push the BAD_SIGNATURE error onto the stack for every signature error. In Java it just returns false from the Signature#verify call when the signature is incorrect. However, we still want to throw an exception for raw RSA when the number of signature bytes is larger than the modulus can express. Bug: 21209646 Change-Id: Ie29eba8b12bb8d3220b7b29146c45b8dd416e338/Consistently use ARRAY_OFFSET_*INVALID macros. Not all the ad-hoc ones check for integer overflow correctly. Consistently use the same check everywhere. Change-Id: I913b7de792406d9819a6830cc21ec500ddceff6e/am 199a1346: Fix compilation with OpenSSL * commit 199a134656110b0d75c4ead3606051a7d16b808b: Fix compilation with OpenSSL/am d7f7dd22: am d9a48aa4: Fix compilation with OpenSSL * commit d7f7dd221ec7c3bb5ffc14227a31f18bb89fa134: Fix compilation with OpenSSL/am d9a48aa4: Fix compilation with OpenSSL * commit d9a48aa43efd90926bf3457e3fd6efde9804f9c5: Fix compilation with OpenSSL/am f071d985: am 79f05f46: Fix error conditions in certificate/PKCS#7 reading * commit f071d985494081013f9f3fe8498fa630a1d656f5: Fix error conditions in certificate/PKCS#7 reading/Fix compilation with OpenSSL (cherry picked from commit d9a48aa43efd90926bf3457e3fd6efde9804f9c5) Bug: 21034231 Change-Id: I1efd062a6608111e6ab468f4e362291895dd166d/am 79f05f46: Fix error conditions in certificate/PKCS#7 reading * commit 79f05f46c8fb2f19c8d11564ef93ef332f79fdc9: Fix error conditions in certificate/PKCS#7 reading/Fix compilation with OpenSSL Bug: 21034231 Change-Id: I1efd062a6608111e6ab468f4e362291895dd166d/am ccb8225a: Fix error conditions in certificate/PKCS#7 reading * commit ccb8225a5c0c8a1d08b9a76a33857e853317a8f5: Fix error conditions in certificate/PKCS#7 reading/Fix error conditions in certificate/PKCS#7 reading When an error condition is encountered in BoringSSL, sometimes it deliberately does not put something on the ERR stack to prevent abuse of that knowledge. Instead we need to throw an exception explicitly when no error is pushed onto the stack. (cherry picked from commit 79f05f46c8fb2f19c8d11564ef93ef332f79fdc9) Bug: 21034231 Change-Id: Ia06347c5653672c982ecff2c26be9b091d03009f/Fix error conditions in certificate/PKCS#7 reading When an error condition is encountered in BoringSSL, sometimes it deliberately does not put something on the ERR stack to prevent abuse of that knowledge. Instead we need to throw an exception explicitly when no error is pushed onto the stack. Bug: 21034231 Change-Id: Ia06347c5653672c982ecff2c26be9b091d03009f/am d6828c47: Merge ""Fix up JNI_TRACE for AEAD"" into mnc-dev * commit d6828c474d70cae8a3390523f2f75994fef7bb73: Fix up JNI_TRACE for AEAD/Merge ""Fix up JNI_TRACE for AEAD"" into mnc-dev/Fix up JNI_TRACE for AEAD (cherry picked from commit edc4f273c9c1c862119cdce3e4c9ca15110b2e1f) Bug: 21762837 Change-Id: I11042be8fe1e046ac96759b4554ce9229e1cf6f3/OpenSSLCipher: adjust expected length with padding in decrypt mode Consider the |final| buffer when computing the expected length Should not expect an extra block when using padding in decrypting mode Bug: 19186852 Change-Id: I8c51b309ca98030ab1eda5b2a0201a97a5758072 (cherry-pick from 8fa4acdcf1e47a2745940694179fa34e95825a24)/am 7e63460a: am edc4f273: Fix up JNI_TRACE for AEAD * commit 7e63460ae75b371fcfa97f29b3be7eaafd1ff673: Fix up JNI_TRACE for AEAD/am edc4f273: Fix up JNI_TRACE for AEAD * commit edc4f273c9c1c862119cdce3e4c9ca15110b2e1f: Fix up JNI_TRACE for AEAD/am e90640d7: Merge ""Fix RSA upcalls from TLS/SSL into JCA."" into mnc-dev * commit e90640d772b9c123b8f1ed2cbf30be4d693a30e7: Fix RSA upcalls from TLS/SSL into JCA./am 9bca53ce: Fix ECDSA upcalls from TLS/SSL into JCA. * commit 9bca53ce2dc30a2a4d4575b70ed39c81a35352d0: Fix ECDSA upcalls from TLS/SSL into JCA./Merge ""Fix RSA upcalls from TLS/SSL into JCA."" into mnc-dev/Fix ECDSA upcalls from TLS/SSL into JCA. When BoringSSL/OpenSSL TLS/SSL stack operates on opaque private keys (those that dont expose their key material) it upcalls (via Conscrypts NativeCrypto) into corresponding JCA Signature and Cipher primitives. This fixes a crash in the ECDSA upcall when Conscrypt is used with BoringSSL. (cherry-picked from commit 61c66eb9842dd689dea2701124147c4197c95c90) Bug: 21738458 Change-Id: I6def1bce62f20b2ec39fe88251975458e8813362/Fix RSA upcalls from TLS/SSL into JCA. When BoringSSL/OpenSSL TLS/SSL stack operates on opaque private keys (those that dont expose their key material) it upcalls (via Conscrypts NativeCrypto) into corresponding JCA Signature and Cipher primitives. This CL fixes two issues with RSA-related upcalls, which prevented the use of opaque RSA private keys for TLS/SSL with Conscrypt backed by BoringSSL: * RSA sign was upcalled into RSA Cipher decrypt using private key. In JCA, the correct upcall is RSA Signature sign. This is now invoked instead of RSA Cipher decrypt. * RSA decrypt was not implemented. Its now implemented. As part of implementing RSA decrypt upcall from BoringSSL, it transpired that BoringSSL requests no padding as opposed to OpenSSL which requests PKCS#1 padding. As a result, this CL modifies the decrypt upcall to take a padding parameter. The implementation of the upcall (see CryptoUpcalls.java) now supports PKCS#1 padding scheme, OAEP padding scheme, and no padding. This CL also drops the encrypt/decrypt flag from the RSA encrypt/decrypt upcall and simplies it into an RSA decrypt upcall. RSA encrypt upcall is not needed at all. (cherry-picked from commit 279e98451390d0a90c5fc04eac7ddd4045180465) Bug: 21738458 Change-Id: I075aa74e4cd89dd3ceab99f728ce371c7bc89cf0/am 79a9e89f: am 279e9845: Fix RSA upcalls from TLS/SSL into JCA. * commit 79a9e89fa34f1ea96be9dc4bf742ca2884eaf858: Fix RSA upcalls from TLS/SSL into JCA./am ffae81d4: am 61c66eb9: Fix ECDSA upcalls from TLS/SSL into JCA. * commit ffae81d439b0f5f8835862bcdfc9c0e8710889da: Fix ECDSA upcalls from TLS/SSL into JCA./Fix up JNI_TRACE for AEAD Bug: 21762837 Change-Id: I11042be8fe1e046ac96759b4554ce9229e1cf6f3/am 279e9845: Fix RSA upcalls from TLS/SSL into JCA. * commit 279e98451390d0a90c5fc04eac7ddd4045180465: Fix RSA upcalls from TLS/SSL into JCA./am 61c66eb9: Fix ECDSA upcalls from TLS/SSL into JCA. * commit 61c66eb9842dd689dea2701124147c4197c95c90: Fix ECDSA upcalls from TLS/SSL into JCA./Fix RSA upcalls from TLS/SSL into JCA. When BoringSSL/OpenSSL TLS/SSL stack operates on opaque private keys (those that dont expose their key material) it upcalls (via Conscrypts NativeCrypto) into corresponding JCA Signature and Cipher primitives. This CL fixes two issues with RSA-related upcalls, which prevented the use of opaque RSA private keys for TLS/SSL with Conscrypt backed by BoringSSL: * RSA sign was upcalled into RSA Cipher decrypt using private key. In JCA, the correct upcall is RSA Signature sign. This is now invoked instead of RSA Cipher decrypt. * RSA decrypt was not implemented. Its now implemented. As part of implementing RSA decrypt upcall from BoringSSL, it transpired that BoringSSL requests no padding as opposed to OpenSSL which requests PKCS#1 padding. As a result, this CL modifies the decrypt upcall to take a padding parameter. The implementation of the upcall (see CryptoUpcalls.java) now supports PKCS#1 padding scheme, OAEP padding scheme, and no padding. This CL also drops the encrypt/decrypt flag from the RSA encrypt/decrypt upcall and simplies it into an RSA decrypt upcall. RSA encrypt upcall is not needed at all. Bug: 21738458 Change-Id: I2a4610890ea1ed1a2e99eb1d5c34348fbf406e54/Fix ECDSA upcalls from TLS/SSL into JCA. When BoringSSL/OpenSSL TLS/SSL stack operates on opaque private keys (those that dont expose their key material) it upcalls (via Conscrypts NativeCrypto) into corresponding JCA Signature and Cipher primitives. This fixes a crash in the ECDSA upcall when Conscrypt is used with BoringSSL. Bug: 21738458 Change-Id: I51645bd93f965fe7fcabe45e87276d533513b378/NativeCrypto: special case for empty cipher list For the Java language, setting an empty cipher list is not an error but its an error in OpenSSL. However, the underlying API actually updates the cipher list to an empty string as intended. So we need to handle this special case by clearing the error stack and making sure that our expectation is satisfied. (cherry picked from commit 5b6a5ecc98d1798d806024160fe97738527980d1) Bug: 21195269 Change-Id: Id21792215513f4e0d6e051160f69e5f830d39015/NativeCrypto: special case for empty cipher list For the Java language, setting an empty cipher list is not an error but its an error in OpenSSL. However, the underlying API actually updates the cipher list to an empty string as intended. So we need to handle this special case by clearing the error stack and making sure that our expectation is satisfied. Bug: 21195269 Change-Id: Id21792215513f4e0d6e051160f69e5f830d39015/OpenSSLCipher: adjust expected length with padding in decrypt mode Consider the |final| buffer when computing the expected length Should not expect an extra block when using padding in decrypting mode Bug: 19186852 Change-Id: I206442d45c4cf68363201738ba9d0b035f19c436/am 497e87d4: Merge ""NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal"" into mnc-dev * commit 497e87d447e201ccb142a603c194d6dfb2a33d75: NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal/Merge ""NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal"" into mnc-dev/am c8d75747: am 49854878: NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal * commit c8d7574776a9b4a6b23372494ef1e520c18fa9e1: NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal/am 49854878: NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal * commit 49854878b83114e3e15c7ad3ca030352b786b5df: NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal/NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal We need to check the ERR stack on a return code of 0. Previously there was a comment indicating the weird behavior about DSA keys throwing after a check for a return value of but this API is never supposed to return anything other than 1 for success or 0 for failure. (cherry picked from commit 49854878b83114e3e15c7ad3ca030352b786b5df) Bug: 18869265 Change-Id: Ic871c63b6d65949053819950ed8053f47501bd60/NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal We need to check the ERR stack on a return code of 0. Previously there was a comment indicating the weird behavior about DSA keys throwing after a check for a return value of but this API is never supposed to return anything other than 1 for success or 0 for failure. Bug: 18869265 Change-Id: Ic871c63b6d65949053819950ed8053f47501bd60/am d5d7063d: NativeCrypto: throw exception on RSA op failure * commit d5d7063db8a1f087e07121da667152929daba261: NativeCrypto: throw exception on RSA op failure/am a6aaa7d8: am 6a1e7070: NativeCrypto: throw exception on RSA op failure * commit a6aaa7d8de93f0b9dc0f6eec03d5613074eb6727: NativeCrypto: throw exception on RSA op failure/am 6a1e7070: NativeCrypto: throw exception on RSA op failure * commit 6a1e7070c1cdf23cbce46a8be7b974141028c29a: NativeCrypto: throw exception on RSA op failure/NativeCrypto: throw exception on RSA op failure A error code should have an error on the stack that explains what the problem was, but if we call through to an ENGINE that fails we seem to end up with no error on the stack. Ensure we throw BadPaddingException in that case. (cherry picked from commit 6a1e7070c1cdf23cbce46a8be7b974141028c29a) Bug: 19863798 Change-Id: Idecd9072c1e6636351bc90f16037852bdc55e4a0/NativeCrypto: throw exception on RSA op failure A error code should have an error on the stack that explains what the problem was, but if we call through to an ENGINE that fails we seem to end up with no error on the stack. Ensure we throw BadPaddingException in that case. Bug: 19863798 Change-Id: Idecd9072c1e6636351bc90f16037852bdc55e4a0/Use |BIO_read_asn1| when parsing PKCS#7. Previously the code read the whole of the BIO and parsed any PKCS#7 blobs that were found. However, X509CertificateTest specifically tests that trailing data is retained when parsing PKCS#7 so this change makes it so. This depends on (cherry picked from commit 0f84dc6107927c2c5ba15ce5254c93f122837602) Bug: 21396526 Bug: 21209493 Change-Id: I4e07cebf599f52aedbea9b0a3f66d9a052c86aaa/Add isFinite flag to OpenSSLBIOInputStream. The BIO created by OpenSSLBIOInputStream currently returns and sets the retry flag when read() returns zero on the underlying InputStream. This is correct for Ã¬infiniteÃ® streams (like a socket), but isnt correct for streams that have a definitive EOF. This change adds a flag to OpenSSLBIOInputStream so that cases where the input is finite (i.e. when parsing a PKCS#7 or X.509 block) can correctly return 0 at EOF from |BIO_read|. (cherry picked from commit 66537ee0121bdd14737191d14927da223f0809ee) Bug: 21396526 Bug: 21209493 Change-Id: Iaad5845621ab8b89b42d5d3ca8e67e297278ca55/Use |BIO_read_asn1| when parsing PKCS#7. Previously the code read the whole of the BIO and parsed any PKCS#7 blobs that were found. However, X509CertificateTest specifically tests that trailing data is retained when parsing PKCS#7 so this change makes it so. This depends on Bug: 21396526 Bug: 21209493 Change-Id: I4e07cebf599f52aedbea9b0a3f66d9a052c86aaa/Add isFinite flag to OpenSSLBIOInputStream. The BIO created by OpenSSLBIOInputStream currently returns and sets the retry flag when read() returns zero on the underlying InputStream. This is correct for Ã¬infiniteÃ® streams (like a socket), but isnt correct for streams that have a definitive EOF. This change adds a flag to OpenSSLBIOInputStream so that cases where the input is finite (i.e. when parsing a PKCS#7 or X.509 block) can correctly return 0 at EOF from |BIO_read|. Bug: 21396526 Bug: 21209493 Change-Id: Iaad5845621ab8b89b42d5d3ca8e67e297278ca55/am 14a85a16: am bcb2285a: Merge ""Throw InvalidKeyException from ECDH_compute_key"" * commit 14a85a16372ccee423bf28000812b6a8e641f9d8: Throw InvalidKeyException from ECDH_compute_key/am bcb2285a: Merge ""Throw InvalidKeyException from ECDH_compute_key"" * commit bcb2285aa86e7b479f8f224e57a0cb16cfec74d7: Throw InvalidKeyException from ECDH_compute_key/Merge ""Throw InvalidKeyException from ECDH_compute_key""/Throw InvalidKeyException from ECDH_compute_key Instead of throwing RuntimeException for ECDH_compute_key failures just throw an InvalidKeyException since the higher-level API declares that as a checked exception. Bug: 21277055 Change-Id: Ieed26ad4f6cb76a49a7edb77bb3b1da7ae88043b/am 1eec6164: am 7c5b76c9: Stop printing out private key parameters * commit 1eec6164e015c1b25897007d967e3a5adaae1ffa: Stop printing out private key parameters/am 7c5b76c9: Stop printing out private key parameters * commit 7c5b76c986eb699e57c2018b3f86541333a3d2cb: Stop printing out private key parameters/Stop printing out private key parameters This could lead to an inadvertent leak of the private key parameters and is only useful for debugging, so just remove it. Bug: 21277110 Change-Id: Id7bfa376935e610cc58e8c7882d4634cfda8f7ce/"
,,0.2695,conscrypt,"am 497e87d4: Merge ""NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal"" into mnc-dev * commit 497e87d447e201ccb142a603c194d6dfb2a33d75: NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal/Merge ""NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal"" into mnc-dev/am c8d75747: am 49854878: NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal * commit c8d7574776a9b4a6b23372494ef1e520c18fa9e1: NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal/am 49854878: NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal * commit 49854878b83114e3e15c7ad3ca030352b786b5df: NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal/NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal We need to check the ERR stack on a return code of 0. Previously there was a comment indicating the weird behavior about DSA keys throwing after a check for a return value of but this API is never supposed to return anything other than 1 for success or 0 for failure. (cherry picked from commit 49854878b83114e3e15c7ad3ca030352b786b5df) Bug: 18869265 Change-Id: Ic871c63b6d65949053819950ed8053f47501bd60/NativeCrypto: return of 0 is error for EVP_Sign/VerifyFinal We need to check the ERR stack on a return code of 0. Previously there was a comment indicating the weird behavior about DSA keys throwing after a check for a return value of but this API is never supposed to return anything other than 1 for success or 0 for failure. Bug: 18869265 Change-Id: Ic871c63b6d65949053819950ed8053f47501bd60/"
,,0.3999,conscrypt,"am 6fd6f862: am 05b39385: Merge changes I960960c3,Ifc556ba6,I34b9d839 * commit 6fd6f8620f883387f2b24c9654dfbabf76c3c591: Update CryptoUpcalls documentation Documentation fixes OpenSSLCipher: remove unused variable/am 05b39385: Merge changes I960960c3,Ifc556ba6,I34b9d839 * commit 05b393852f1f6f5529ee454503dfd2c795e64330: Update CryptoUpcalls documentation Documentation fixes OpenSSLCipher: remove unused variable/Merge changes I960960c3,Ifc556ba6,I34b9d839 * changes: Update CryptoUpcalls documentation Documentation fixes OpenSSLCipher: remove unused variable/Documentation fixes Although we dont currently publish this to javadoc, we should keep javadoc conventions by inserting paragraph separators here. Change-Id: Ifc556ba6da74f32dafe3e4891ce3a34eccb59ae6/OpenSSLCipher: adjust expected length with padding in decrypt mode Consider the |final| buffer when computing the expected length Should not expect an extra block when using padding in decrypting mode Bug: 19186852 Change-Id: I8c51b309ca98030ab1eda5b2a0201a97a5758072 (cherry-pick from 8fa4acdcf1e47a2745940694179fa34e95825a24)/OpenSSLCipher: adjust expected length with padding in decrypt mode Consider the |final| buffer when computing the expected length Should not expect an extra block when using padding in decrypting mode Bug: 19186852 Change-Id: I206442d45c4cf68363201738ba9d0b035f19c436/Add isFinite flag to OpenSSLBIOInputStream. The BIO created by OpenSSLBIOInputStream currently returns and sets the retry flag when read() returns zero on the underlying InputStream. This is correct for Ã¬infiniteÃ® streams (like a socket), but isnt correct for streams that have a definitive EOF. This change adds a flag to OpenSSLBIOInputStream so that cases where the input is finite (i.e. when parsing a PKCS#7 or X.509 block) can correctly return 0 at EOF from |BIO_read|. (cherry picked from commit 66537ee0121bdd14737191d14927da223f0809ee) Bug: 21396526 Bug: 21209493 Change-Id: Iaad5845621ab8b89b42d5d3ca8e67e297278ca55/Add isFinite flag to OpenSSLBIOInputStream. The BIO created by OpenSSLBIOInputStream currently returns and sets the retry flag when read() returns zero on the underlying InputStream. This is correct for Ã¬infiniteÃ® streams (like a socket), but isnt correct for streams that have a definitive EOF. This change adds a flag to OpenSSLBIOInputStream so that cases where the input is finite (i.e. when parsing a PKCS#7 or X.509 block) can correctly return 0 at EOF from |BIO_read|. Bug: 21396526 Bug: 21209493 Change-Id: Iaad5845621ab8b89b42d5d3ca8e67e297278ca55/am 14a85a16: am bcb2285a: Merge ""Throw InvalidKeyException from ECDH_compute_key"" * commit 14a85a16372ccee423bf28000812b6a8e641f9d8: Throw InvalidKeyException from ECDH_compute_key/am bcb2285a: Merge ""Throw InvalidKeyException from ECDH_compute_key"" * commit bcb2285aa86e7b479f8f224e57a0cb16cfec74d7: Throw InvalidKeyException from ECDH_compute_key/Merge ""Throw InvalidKeyException from ECDH_compute_key""/Throw InvalidKeyException from ECDH_compute_key Instead of throwing RuntimeException for ECDH_compute_key failures just throw an InvalidKeyException since the higher-level API declares that as a checked exception. Bug: 21277055 Change-Id: Ieed26ad4f6cb76a49a7edb77bb3b1da7ae88043b/am 1eec6164: am 7c5b76c9: Stop printing out private key parameters * commit 1eec6164e015c1b25897007d967e3a5adaae1ffa: Stop printing out private key parameters/am 7c5b76c9: Stop printing out private key parameters * commit 7c5b76c986eb699e57c2018b3f86541333a3d2cb: Stop printing out private key parameters/Stop printing out private key parameters This could lead to an inadvertent leak of the private key parameters and is only useful for debugging, so just remove it. Bug: 21277110 Change-Id: Id7bfa376935e610cc58e8c7882d4634cfda8f7ce/"
,,0.2629,conscrypt,"GCM: set default tag size to 12 bytes According to RFC 5084, the default value of the GCM tag should be 12 octets (bytes). Change the default tag length from 0 to 12 to honor this. Bug: 22855843 Change-Id: I1ed16df24d0cfa9fff2593a3402c97faf913e05e/GCM: return the correct AlgorithmParameters Instead of the correct AlgorithmParameters of type ""GCM,"" we were returning the generic ""AES"" version that basically only converts to an IvParameterSpec. Bug: 22319986 Change-Id: Ib42905c3ad31e44b72e8066192bd26981c8351ba/am 6fd6f862: am 05b39385: Merge changes I960960c3,Ifc556ba6,I34b9d839 * commit 6fd6f8620f883387f2b24c9654dfbabf76c3c591: Update CryptoUpcalls documentation Documentation fixes OpenSSLCipher: remove unused variable/am 05b39385: Merge changes I960960c3,Ifc556ba6,I34b9d839 * commit 05b393852f1f6f5529ee454503dfd2c795e64330: Update CryptoUpcalls documentation Documentation fixes OpenSSLCipher: remove unused variable/Merge changes I960960c3,Ifc556ba6,I34b9d839 * changes: Update CryptoUpcalls documentation Documentation fixes OpenSSLCipher: remove unused variable/OpenSSLCipher: adjust expected length with padding in decrypt mode Consider the |final| buffer when computing the expected length Should not expect an extra block when using padding in decrypting mode Bug: 19186852 Change-Id: I8c51b309ca98030ab1eda5b2a0201a97a5758072 (cherry-pick from 8fa4acdcf1e47a2745940694179fa34e95825a24)/OpenSSLCipher: adjust expected length with padding in decrypt mode Consider the |final| buffer when computing the expected length Should not expect an extra block when using padding in decrypting mode Bug: 19186852 Change-Id: I206442d45c4cf68363201738ba9d0b035f19c436/OpenSSLCipher: adjust expected length with padding in decrypt mode Should not expect an extra block when using padding in decrypting mode Bug: 19186852 Change-Id: Ife346931e4ba2c8e3a99e066caee91267b1d138f/"
,,0.1996,conscrypt,"Adjust Signature interface for BoringSSL BoringSSL will push the BAD_SIGNATURE error onto the stack for every signature error. In Java it just returns false from the Signature#verify call when the signature is incorrect. However, we still want to throw an exception for raw RSA when the number of signature bytes is larger than the modulus can express. Bug: 21209646 (cherry picked from commit 089b401856a4da378875e94108fe742d1cdf0db2) Change-Id: I96ada8762817a99df11da2f7e7b7310bb31d5cba/Adjust Signature interface for BoringSSL BoringSSL will push the BAD_SIGNATURE error onto the stack for every signature error. In Java it just returns false from the Signature#verify call when the signature is incorrect. However, we still want to throw an exception for raw RSA when the number of signature bytes is larger than the modulus can express. Bug: 21209646 Change-Id: Ie29eba8b12bb8d3220b7b29146c45b8dd416e338/"
,,0.0933,conscrypt,"TrustManagerImplTest: instantiate TrustManagerImpl directly instead of using factory The TrustManagerFactory is returning a RootTrustManager now instead of a TrustManagerImpl, thus breaking the test. Bug: 25992791 Change-Id: I5924b684a9c3f8c49818ceefb038886035a17f68/Remove java.lang.IntegralToString usage. java.lang.IntegralToString is going away, replaced its usage by small helper class, Hex. + Fixes the ""Illegal class access"" exception from TrustedCertificateStoreTest & TrustManagerImplTest. (cherry-picked from 61e984f441b9194f0ae907e6fc28502858df6852 + 61e984f441b9194f0ae907e6fc28502858df6852) Bug: 24932279 (cherry picked from commit e279a9854d15d20a0b3807fe96f0805b43cd4dae) Change-Id: Id48cd9c2dfade328f01c669afa20fe2e7a630fc2/Remove java.lang.IntegralToString usage. java.lang.IntegralToString is going away, replaced its usage by small helper class, Hex. + Fixes the ""Illegal class access"" exception from TrustedCertificateStoreTest & TrustManagerImplTest. (cherry-picked from 61e984f441b9194f0ae907e6fc28502858df6852 + 61e984f441b9194f0ae907e6fc28502858df6852) Bug: 24932279 Change-Id: I83bc9543e44e3d1026fa5b0a31b8097bb3838ab3/"
,,0.3989,conscrypt,"Make OpenSSLX509Certificate.hashCode match the RI Use super.hashCode to make sure that hashCode matches the RI. Since the underlying certificate (and therefore the hashcode) is immutable the value is cached after the first call to avoid needlessly recomputing the hash. Bug:26386620 Change-Id: Ic480b48e57144ac730a33dcc313cdff57fe71157/Fix unneccessary access of BoringSSL SSL structs. am: 883eeb452d am: 3907bf0602 * commit 3907bf06025a27856f83fa377f57c28f60738e45: Fix unneccessary access of BoringSSL SSL structs./Fix unneccessary access of BoringSSL SSL structs. am: 883eeb452d * commit 883eeb452dc0aa01f74a426e8084e2af66daaad4: Fix unneccessary access of BoringSSL SSL structs./Fix unneccessary access of BoringSSL SSL structs. get_SSL_CIPHER_algorithm_mkey and get_SSL_CIPHER_algorithm_auth are never used. There are also some struct accesses that have public API variants. Finally, requiring ssl->server be set to 0 before SSL_set1_tls_channel_id was a bug that has been fixed in BoringSSL. (See Change-Id: If68efce2901f3ef89bdf5bb47cbc7d5fddaa6ef6/Fix Signature.sign broken on x86_64. am: 273e944b63 * commit 273e944b63ee54f13fd96322313e7c98a9c375d2: Fix Signature.sign broken on x86_64./Fix compilation with JNI_TRACE_** am: 4d1b7f23cb * commit 4d1b7f23cb6b1480efd31de731e92363d86329f0: Fix compilation with JNI_TRACE_**/Unbreak Conscrypt when it\s built against OpenSSL. am: 179e1d5f63 * commit 179e1d5f63fdc69f35e755d3fe34f9e93168a71f: Unbreak Conscrypt when its built against OpenSSL./Clear BoringSSL error queue in NativeCrypto.EVP_DigestVerifyFinal. am: 881c0953d7 * commit 881c0953d7166a5020ba2ec2b6f8c39371a6ded6: Clear BoringSSL error queue in NativeCrypto.EVP_DigestVerifyFinal./Merge ""Speed up digesting by avoiding unnecessary operations."" am: 22324dd963 * commit 22324dd9635b9a7fa0b0e524a9313bba524db3ad: Speed up digesting by avoiding unnecessary operations./Fix Signature.sign broken on x86_64. am: 273e944b63 * commit 273e944b63ee54f13fd96322313e7c98a9c375d2: Fix Signature.sign broken on x86_64./Fix Signature.sign broken on x86_64. Conscrypts Signature impls sign() method invoked EVP_DigestSignFinal with an uninitialized length of the output buffer. I misread the methods documentation and assumed that the output buffer length does not need to be initialized because its an output-only parameter. However, the parameter is an in-out parameter. This change fixes the issue by initializing the parameter to the correct value. Change-Id: Id5e205f185b9edf7189c26d0dd2f5a7c84e7c1c1/Fix compilation with JNI_TRACE_** am: 4d1b7f23cb * commit 4d1b7f23cb6b1480efd31de731e92363d86329f0: Fix compilation with JNI_TRACE_**/Fix compilation with JNI_TRACE_** Change-Id: I8417daea4b10f8c02642fe6c9be170312461139c/Remove remnants of DH key support. 7a1929018f423157f9e85dbf368e0b30561c5915 removed most of it, but remnants in NativeCrypto remained with no callers. Although the APIs are still present in BoringSSL, they always fail. Change-Id: Iaff8a142774095e24f08a512956e05272b681b70/Basic implementation of RSASSA-PSS Signature. This makes Conscrypt provide RSASSA-PSS Signature implementations. These implementations currently do not support changing their parameters (e.g., via Signature.setParameter(PSSParameterSpec)) and returning their current parameters (e.g., via Signature.getParameters()). This will be added in a follow-up change. Bug: 25794302 Change-Id: I1488e0e9592f92a9e15365131c76ce2902ad4607/"
,,0.3353,conscrypt,"Merge ""Fix sanity checks around direct ByteBuffer memory access."" am: 4a41ff4a4e * commit 4a41ff4a4e7d07be60fcf2357a3df6ce8f2f3724: Fix sanity checks around direct ByteBuffer memory access./Merge ""Speed up digesting by avoiding unnecessary operations."" am: 22324dd963 * commit 22324dd9635b9a7fa0b0e524a9313bba524db3ad: Speed up digesting by avoiding unnecessary operations./Merge ""Fix sanity checks around direct ByteBuffer memory access."" am: 4a41ff4a4e * commit 4a41ff4a4e7d07be60fcf2357a3df6ce8f2f3724: Fix sanity checks around direct ByteBuffer memory access./Merge ""Fix sanity checks around direct ByteBuffer memory access.""/Fix sanity checks around direct ByteBuffer memory access. This fixes the sanity checks around access to memory backing direct BytBuffer instances. The previous checks wouldve erronously failed if pointers crossed the 2^63 boundary. There is no need for check for pointer overflow. Bug: 24674857 Change-Id: Ic8b5a651418c401d32eb0c8053217988963cd326/Support for PSS Signature configuration via PSSParameterSpec. This adds support for configuring the PSS Signature implementation via java.security.spec.PSSParameterSpec. This also makes the signature implementation return its current configuration as AlgorithmParameters of algorithm ""PSS"" from which a PSSParameterSpec can be obtained. Bug: 25794302 Change-Id: Ib7e087cdc75a6b02898afafdfc4308802d6eb5d5/Basic implementation of RSASSA-PSS Signature. This makes Conscrypt provide RSASSA-PSS Signature implementations. These implementations currently do not support changing their parameters (e.g., via Signature.setParameter(PSSParameterSpec)) and returning their current parameters (e.g., via Signature.getParameters()). This will be added in a follow-up change. Bug: 25794302 Change-Id: I1488e0e9592f92a9e15365131c76ce2902ad4607/"
,,0.3829,conscrypt,"Make OpenSSLX509Certificate.hashCode match the RI Use super.hashCode to make sure that hashCode matches the RI. Since the underlying certificate (and therefore the hashcode) is immutable the value is cached after the first call to avoid needlessly recomputing the hash. Bug:26386620 Change-Id: Ic480b48e57144ac730a33dcc313cdff57fe71157/Fix unneccessary access of BoringSSL SSL structs. am: 883eeb452d am: 3907bf0602 * commit 3907bf06025a27856f83fa377f57c28f60738e45: Fix unneccessary access of BoringSSL SSL structs./Fix unneccessary access of BoringSSL SSL structs. am: 883eeb452d * commit 883eeb452dc0aa01f74a426e8084e2af66daaad4: Fix unneccessary access of BoringSSL SSL structs./Fix unneccessary access of BoringSSL SSL structs. get_SSL_CIPHER_algorithm_mkey and get_SSL_CIPHER_algorithm_auth are never used. There are also some struct accesses that have public API variants. Finally, requiring ssl->server be set to 0 before SSL_set1_tls_channel_id was a bug that has been fixed in BoringSSL. (See Change-Id: If68efce2901f3ef89bdf5bb47cbc7d5fddaa6ef6/Merge ""Speed up digesting by avoiding unnecessary operations."" am: 22324dd963 * commit 22324dd9635b9a7fa0b0e524a9313bba524db3ad: Speed up digesting by avoiding unnecessary operations./Remove remnants of DH key support. 7a1929018f423157f9e85dbf368e0b30561c5915 removed most of it, but remnants in NativeCrypto remained with no callers. Although the APIs are still present in BoringSSL, they always fail. Change-Id: Iaff8a142774095e24f08a512956e05272b681b70/Basic implementation of RSASSA-PSS Signature. This makes Conscrypt provide RSASSA-PSS Signature implementations. These implementations currently do not support changing their parameters (e.g., via Signature.setParameter(PSSParameterSpec)) and returning their current parameters (e.g., via Signature.getParameters()). This will be added in a follow-up change. Bug: 25794302 Change-Id: I1488e0e9592f92a9e15365131c76ce2902ad4607/"
,,0.1296,conscrypt,"Make sure we get the right strerror_r. am: d649eeefe7 am: c6a0cd20a1 am: baec13c047 Change-Id: I9d3381e7af94ca29406d84c4d4895c247c68ea2c/Make sure we get the right strerror_r. am: d649eeefe7 am: c6a0cd20a1 Change-Id: Ia32056d81cce3537aac88d2c83d2bd0669d9827a/Make sure we get the right strerror_r. am: d649eeefe7 Change-Id: I27fa8a494326d64a9069880aa04b0acc1c0a6f61/Make sure we get the right strerror_r. We want the XSI-compliant strerror_r, not the GNU one. We havent actually defined _GNU_SOURCE ourselves, but the compiler adds it automatically when building C++. This has been fine so far because the NDK headers dont have strerror_r. With updated headers, this is needed. Test: mma Change-Id: I0461ce24e5cf85f20dc087c3712f3fc579941192/"
,,0.0599,conscrypt,Expose CT through libcore NetworkSecurityPolicy Bug: 28746284 Change-Id: I6549a997823b38dc256911a66ac558c90bf6f762/
,,0.2741,conscrypt,"Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.4468,conscrypt,"Customize default provider name based on platform (#314) Fixes InetAddress originalHostName (if present) for getHostnameOrIP (#303) * Use InetAddress originalHostName (is present) for getHostnameOrIP Test: CtsLibcoreTestCases Bug: 35942385 Bug: 31028374 Change-Id: Ie1acc2dd23fadbbc48de1a5845146e9a5953e9cf * Fix lint problems and remove class introduced in API 19./Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes fixes for the engine-based socket. (#202) This allows the SSLSocketTest to pass with the engine-based socket enabled. Also restructuring the inheritance hierarchy so that the FD and engine sockets both behave the same way (both either wrappers or not). The restructure involves the following: AbstractConscryptSocket: New base class for both sockets. It handles the wrap/no-wrap logic. OpenSSLSocketImplWrapper: deleted and replaced by AbstractConscryptSocket. OpenSSLSocketImpl: reduced to a public shim class between AbstractConscryptSocket and the implementations. For backward-compat only. ConscryptFileDescriptorSocket: Renamed from OpenSSLSocketImpl. The old FD socket./Various fixes to the Conscrypt engine. (#201)/"
,,0.3341,conscrypt,Conformance fixes for the engine-based socket. (#202) This allows the SSLSocketTest to pass with the engine-based socket enabled. Also restructuring the inheritance hierarchy so that the FD and engine sockets both behave the same way (both either wrappers or not). The restructure involves the following: AbstractConscryptSocket: New base class for both sockets. It handles the wrap/no-wrap logic. OpenSSLSocketImplWrapper: deleted and replaced by AbstractConscryptSocket. OpenSSLSocketImpl: reduced to a public shim class between AbstractConscryptSocket and the implementations. For backward-compat only. ConscryptFileDescriptorSocket: Renamed from OpenSSLSocketImpl. The old FD socket./
,,0.2878,conscrypt,"Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes Java logging consistently (#294) There are many places in the code that print to System.out/err. We should use the standard Java logging facilities. Fixes to SSL_get0_peer_certificates. This works towards issue So the exception can be routed out properly, this moves the SSL_get0_peer_certificates call to after doHandshake completes in ConscryptFileDescriptorSocket. Although, due to False Start (the ""cut-through"" logic in that class), the handshake may not be fully complete at the time, BoringSSLs API is such that the certificates and other properties will be available once SSL_do_handshake first completes./Cleaning up JNI exceptions (#252) There were a bunch of exceptions that are being thrown from JNI methods that arent currently declared. Also removed a few unused JNI methods and duplicate constants, preferring those from NativeConstants./Avoid reprocessing the local certificates. (#250) We were needlessly querying the SSL for the local certificates during the handshake. Avoiding this shows a minor bump in handshake performance See Java OpenSSL name mapping. (#227) As of [0], BoringSSL supports the standard cipher suite names. The Java names are the same, with the exception of TLS_RSA_WITH_3DES_EDE_CBC_SHA/SSL_RSA_WITH_3DES_EDE_CBC_SHA for historical reasons. Add code to map between that exception but otherwise rely on the native support. [0] remnants of broken SSL_renegotiate tests. (#229) See issue These dont work anymore and will need to be rewritten, probably against a test implementation./Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.185,conscrypt,"User-friendly errors when native library fails to load (#295) Currently, we throw in static initialization of NativeCryptoJni, which leads to ClassNotFoundException whenever we try to access the native code at runtime. The user has no way of knowing that the library failed to load, or why. This PR attempts to make it more clear as to what went wrong, by doing the following: Log each load error, in the order attempted. Select the ""best"" load error to be thrown Dont throw from the NativeCrypto static initializer. Rather, save the best error and throw when attempting to access top-level conscrypt classes./"
,,0.4351,conscrypt,"Customize default provider name based on platform (#314) Fixes InetAddress originalHostName (if present) for getHostnameOrIP (#303) * Use InetAddress originalHostName (is present) for getHostnameOrIP Test: CtsLibcoreTestCases Bug: 35942385 Bug: 31028374 Change-Id: Ie1acc2dd23fadbbc48de1a5845146e9a5953e9cf * Fix lint problems and remove class introduced in API 19./User-friendly errors when native library fails to load (#295) Currently, we throw in static initialization of NativeCryptoJni, which leads to ClassNotFoundException whenever we try to access the native code at runtime. The user has no way of knowing that the library failed to load, or why. This PR attempts to make it more clear as to what went wrong, by doing the following: Log each load error, in the order attempted. Select the ""best"" load error to be thrown Dont throw from the NativeCrypto static initializer. Rather, save the best error and throw when attempting to access top-level conscrypt classes./Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes fixes for the engine-based socket. (#202) This allows the SSLSocketTest to pass with the engine-based socket enabled. Also restructuring the inheritance hierarchy so that the FD and engine sockets both behave the same way (both either wrappers or not). The restructure involves the following: AbstractConscryptSocket: New base class for both sockets. It handles the wrap/no-wrap logic. OpenSSLSocketImplWrapper: deleted and replaced by AbstractConscryptSocket. OpenSSLSocketImpl: reduced to a public shim class between AbstractConscryptSocket and the implementations. For backward-compat only. ConscryptFileDescriptorSocket: Renamed from OpenSSLSocketImpl. The old FD socket./Various fixes to the Conscrypt engine. (#201)/"
,,0.121,conscrypt,"Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes"
,,0.2741,conscrypt,"Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.1984,conscrypt,"Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes up JNI exceptions (#252) There were a bunch of exceptions that are being thrown from JNI methods that arent currently declared. Also removed a few unused JNI methods and duplicate constants, preferring those from NativeConstants./Only allow the use of the proper key in RSA with OAEP. (#222) BoringSSL only supports using public keys for encryption and private keys for decryption (which are the proper combinations) in the interface we use for RSA with OAEP. Throw an exception on initialization instead of waiting until the crypto operation fails inside BoringSSL./"
,,0.1228,conscrypt,"Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes"
,,0.3266,conscrypt,Conformance fixes for the engine-based socket. (#202) This allows the SSLSocketTest to pass with the engine-based socket enabled. Also restructuring the inheritance hierarchy so that the FD and engine sockets both behave the same way (both either wrappers or not). The restructure involves the following: AbstractConscryptSocket: New base class for both sockets. It handles the wrap/no-wrap logic. OpenSSLSocketImplWrapper: deleted and replaced by AbstractConscryptSocket. OpenSSLSocketImpl: reduced to a public shim class between AbstractConscryptSocket and the implementations. For backward-compat only. ConscryptFileDescriptorSocket: Renamed from OpenSSLSocketImpl. The old FD socket./Various fixes to the Conscrypt engine. (#201)/
,,0.3311,conscrypt,"User-friendly errors when native library fails to load (#295) Currently, we throw in static initialization of NativeCryptoJni, which leads to ClassNotFoundException whenever we try to access the native code at runtime. The user has no way of knowing that the library failed to load, or why. This PR attempts to make it more clear as to what went wrong, by doing the following: Log each load error, in the order attempted. Select the ""best"" load error to be thrown Dont throw from the NativeCrypto static initializer. Rather, save the best error and throw when attempting to access top-level conscrypt classes./Switch to SSL_get0_peer_certificates. This works towards issue So the exception can be routed out properly, this moves the SSL_get0_peer_certificates call to after doHandshake completes in ConscryptFileDescriptorSocket. Although, due to False Start (the ""cut-through"" logic in that class), the handshake may not be fully complete at the time, BoringSSLs API is such that the certificates and other properties will be available once SSL_do_handshake first completes./Cleaning up JNI exceptions (#252) There were a bunch of exceptions that are being thrown from JNI methods that arent currently declared. Also removed a few unused JNI methods and duplicate constants, preferring those from NativeConstants./Avoid reprocessing the local certificates. (#250) We were needlessly querying the SSL for the local certificates during the handshake. Avoiding this shows a minor bump in handshake performance See IvParameters and ECParameters to Conscrypt. (#251) IvParameters is used as the AlgorithmParameters implementation for AES and DESEDE. ECParameters only supports named curves, since BoringSSL provides functions for marshalling curve names but not arbitrary curves and generally discourages the use of arbitrary curves (eg, ec.h says ""Avoid using arbitrary curves and use EC_GROUP_new_by_curve_name instead."")/Implement AlgorithmParameters.OAEP in Conscrypt. (#240) * Implement AlgorithmParameters.OAEP in Conscrypt. * Use JNI_TRUE and JNI_FALSE as return values, and clarify some exception messages./Remove Java OpenSSL name mapping. (#227) As of [0], BoringSSL supports the standard cipher suite names. The Java names are the same, with the exception of TLS_RSA_WITH_3DES_EDE_CBC_SHA/SSL_RSA_WITH_3DES_EDE_CBC_SHA for historical reasons. Add code to map between that exception but otherwise rely on the native support. [0] AlgorithmParameters.GCM in Conscrypt. (#217) * Implement AlgorithmParameters.GCM in Conscrypt. In order to handle the ASN.1 encoding, exposes a subset of the ASN.1 encoding API from BoringSSL in NativeCrypto. * Rename {write,read}_integer to {write,read}_uint64. Add a UniquePtr to ensure exceptions dont cause a memory leak./Some parsing and serializing fixes. (#219) This fixes a memory leak in NativeCrypto_i2d_PKCS7. It never frees derBytes. Also removing a dependency on the legacy ASN.1 stack./Remove remnants of broken SSL_renegotiate tests. (#229) See issue These dont work anymore and will need to be rewritten, probably against a test implementation./Add availability checks (#216) Fixes session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes fixes to the Conscrypt engine. (#201)/"
,,0.1192,conscrypt,"Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes"
,,0.2202,conscrypt,"Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes should consider update() as well as doFinal() (#288) Fixes IvParameters and ECParameters to Conscrypt. (#251) IvParameters is used as the AlgorithmParameters implementation for AES and DESEDE. ECParameters only supports named curves, since BoringSSL provides functions for marshalling curve names but not arbitrary curves and generally discourages the use of arbitrary curves (eg, ec.h says ""Avoid using arbitrary curves and use EC_GROUP_new_by_curve_name instead."")/"
,,0.3281,conscrypt,Conformance fixes for the engine-based socket. (#202) This allows the SSLSocketTest to pass with the engine-based socket enabled. Also restructuring the inheritance hierarchy so that the FD and engine sockets both behave the same way (both either wrappers or not). The restructure involves the following: AbstractConscryptSocket: New base class for both sockets. It handles the wrap/no-wrap logic. OpenSSLSocketImplWrapper: deleted and replaced by AbstractConscryptSocket. OpenSSLSocketImpl: reduced to a public shim class between AbstractConscryptSocket and the implementations. For backward-compat only. ConscryptFileDescriptorSocket: Renamed from OpenSSLSocketImpl. The old FD socket./Various fixes to the Conscrypt engine. (#201)/
,,0.4026,conscrypt,"Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes closer to the old test version The original test never called shutdownInput() since the Javadoc indicates it will make the socket behave in a different manner than expected in this test. Also assert that were not using the type of socket that we expect to return if we get a SocketException. This will indicate when this difference is fixed and the test can be changed to reflect the expectation./Conformance fixes for the engine-based socket. (#202) This allows the SSLSocketTest to pass with the engine-based socket enabled. Also restructuring the inheritance hierarchy so that the FD and engine sockets both behave the same way (both either wrappers or not). The restructure involves the following: AbstractConscryptSocket: New base class for both sockets. It handles the wrap/no-wrap logic. OpenSSLSocketImplWrapper: deleted and replaced by AbstractConscryptSocket. OpenSSLSocketImpl: reduced to a public shim class between AbstractConscryptSocket and the implementations. For backward-compat only. ConscryptFileDescriptorSocket: Renamed from OpenSSLSocketImpl. The old FD socket./Various fixes to the Conscrypt engine. (#201)/"
,,0.1156,conscrypt,"Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes"
,,0.4458,conscrypt,"Customize default provider name based on platform (#314) Fixes InetAddress originalHostName (if present) for getHostnameOrIP (#303) * Use InetAddress originalHostName (is present) for getHostnameOrIP Test: CtsLibcoreTestCases Bug: 35942385 Bug: 31028374 Change-Id: Ie1acc2dd23fadbbc48de1a5845146e9a5953e9cf * Fix lint problems and remove class introduced in API 19./Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes fixes for the engine-based socket. (#202) This allows the SSLSocketTest to pass with the engine-based socket enabled. Also restructuring the inheritance hierarchy so that the FD and engine sockets both behave the same way (both either wrappers or not). The restructure involves the following: AbstractConscryptSocket: New base class for both sockets. It handles the wrap/no-wrap logic. OpenSSLSocketImplWrapper: deleted and replaced by AbstractConscryptSocket. OpenSSLSocketImpl: reduced to a public shim class between AbstractConscryptSocket and the implementations. For backward-compat only. ConscryptFileDescriptorSocket: Renamed from OpenSSLSocketImpl. The old FD socket./Various fixes to the Conscrypt engine. (#201)/"
,,0.3387,conscrypt,Conformance fixes for the engine-based socket. (#202) This allows the SSLSocketTest to pass with the engine-based socket enabled. Also restructuring the inheritance hierarchy so that the FD and engine sockets both behave the same way (both either wrappers or not). The restructure involves the following: AbstractConscryptSocket: New base class for both sockets. It handles the wrap/no-wrap logic. OpenSSLSocketImplWrapper: deleted and replaced by AbstractConscryptSocket. OpenSSLSocketImpl: reduced to a public shim class between AbstractConscryptSocket and the implementations. For backward-compat only. ConscryptFileDescriptorSocket: Renamed from OpenSSLSocketImpl. The old FD socket./
,,0.3295,conscrypt,Conformance fixes for the engine-based socket. (#202) This allows the SSLSocketTest to pass with the engine-based socket enabled. Also restructuring the inheritance hierarchy so that the FD and engine sockets both behave the same way (both either wrappers or not). The restructure involves the following: AbstractConscryptSocket: New base class for both sockets. It handles the wrap/no-wrap logic. OpenSSLSocketImplWrapper: deleted and replaced by AbstractConscryptSocket. OpenSSLSocketImpl: reduced to a public shim class between AbstractConscryptSocket and the implementations. For backward-compat only. ConscryptFileDescriptorSocket: Renamed from OpenSSLSocketImpl. The old FD socket./
,,0.1921,conscrypt,"Switch R_RSA_DATA_TOO_LARGE{,_FOR_MODULUS} exception (#328) These error codes can be generated by the methods used in both raw RSA signatures and RSA ciphers, but the Java API for Cipher and Signature has disjoint declared exceptions. Luckily, in our Signature implementations we catch any Exception and wrap it in a SignatureException, so we can safely turn these into the appropriate exceptions for Cipher and theyll be thrown as SignatureException from Signature anyway./"
,,0.1103,conscrypt,"Implement engineGetKeySize() in Ciphers. (#327) * Implement engineGetKeySize() in Ciphers. This method is only called when the unlimited strength policy files arent installed, and thus the JDK needs to check whether the key sizes being used are allowed, but it causes an UnsupportedOperationException if its missing in that situation. Fixes * Simplify chained if statements./"
,,0.099,conscrypt,"Implement engineGetKeySize() in Ciphers. (#327) * Implement engineGetKeySize() in Ciphers. This method is only called when the unlimited strength policy files arent installed, and thus the JDK needs to check whether the key sizes being used are allowed, but it causes an UnsupportedOperationException if its missing in that situation. Fixes * Simplify chained if statements./"
,,0.1783,conscrypt,"Clean up exception throwing in native code. (#417) Change throwExceptionIfNecessary to throwExceptionFromBoringSSLError. The definition changes from throwing an exception if theres an error on the stack to having a precondition of having an error on the stack. This makes its behavior and the expected usage more clear (it always results in an exception pending). This also should let us know if were encountering return-failure-but-dont-stack-an-error situations that we didnt know about. Normalize function names to throwFooException. Ensure that we always return immediately after throwing an exception. Some call sites allowed the exception-throwing branch to fall through to the return statement from a non-throwing branch, which is unclear, since that return statement is useless, and runs the risk of additional code being inserted after the exception. Fixes if an exception is pending before throwing another one. (#386) This can occur if a BoringSSL call results in a socket read from a Java socket which throws an exception. Since throwing an exception when another exception is pending causes the process to crash, just let the other exception propagate out of the function./"
,,0.0905,conscrypt,"A few small fixes in prep for adding tests. (#402) Add ARC4 KeyGenerator. Upcoming tests assume that every cipher also has a KeyGenerator available, so provide one. Add support for PKCS7PADDING constant and remove ISO10126PADDING. We never use the latter, and the former is used in an alias. When a user requests an alias, OpenJDK provides the alias name in the engineSetPadding call, whereas Android provides the concrete name, so make sure we can handle either. Fix a problem where engineSetPadding would never recognize OAEPPadding when passed to OpenSSLCipherRSA./"
,,0.1019,conscrypt,"A few small fixes in prep for adding tests. (#402) Add ARC4 KeyGenerator. Upcoming tests assume that every cipher also has a KeyGenerator available, so provide one. Add support for PKCS7PADDING constant and remove ISO10126PADDING. We never use the latter, and the former is used in an alias. When a user requests an alias, OpenJDK provides the alias name in the engineSetPadding call, whereas Android provides the concrete name, so make sure we can handle either. Fix a problem where engineSetPadding would never recognize OAEPPadding when passed to OpenSSLCipherRSA./"
,,0.1047,conscrypt,"A few small fixes in prep for adding tests. (#402) Add ARC4 KeyGenerator. Upcoming tests assume that every cipher also has a KeyGenerator available, so provide one. Add support for PKCS7PADDING constant and remove ISO10126PADDING. We never use the latter, and the former is used in an alias. When a user requests an alias, OpenJDK provides the alias name in the engineSetPadding call, whereas Android provides the concrete name, so make sure we can handle either. Fix a problem where engineSetPadding would never recognize OAEPPadding when passed to OpenSSLCipherRSA./"
,,0.1534,conscrypt,"Support opaque keys with RSA-PSS signatures. (#513) TLS 1.3 only uses RSA-PSS signatures (rather than RSA-PKCS#1), so we need to support these. Implement it by switching to Cipher.RSA/ECB/NoPadding instead of using Signature.RSA. Fix the opaque key tests so they actually work properly./Stop using set_options to set protocol support. (#500) The *_set_min_protocol_version and *_set_max_protocol_version functions were introduced to be explicit about setting supported versions. Use those functions instead of SSL_set_options with disabling constants. There arent any higher-level tests because this is already covered by tests like SSLSocket.test_SSLSocket_setEnabledProtocols, SSLSocket.test_SSLSocket_noncontiguousProtocols_useLower, etc./"
,,0.1796,conscrypt,"Provide TrustManagerFactory (#516) This is necessary for users who want to enable TLS 1.3, since the TrustManagerFactory implementation shipped with OpenJDK throws an exception if it encounters an SSLSocket or SSLEngine thats negotiated TLS 1.3. Use our TrustManager in tests. Also adds a HostnameVerifier in the tests that does the simplest thing, because our TrustManager verifies hostnames by default, whereas the OpenJDK one doesnt, and the bundled HostnameVerifier on OpenJDK just fails to verify anything./Support opaque keys with RSA-PSS signatures. (#513) TLS 1.3 only uses RSA-PSS signatures (rather than RSA-PKCS#1), so we need to support these. Implement it by switching to Cipher.RSA/ECB/NoPadding instead of using Signature.RSA. Fix the opaque key tests so they actually work properly./"
,,0.3004,conscrypt,"Minor cleanup (#688) Clean up some unused variable and method ErrorProne warnings. Eliminate debug logging from NativeLibraryLoader in tests./Ignore RuntimeExceptions thrown in CryptoUpcalls (#684) Signatures provider selection code ignores RuntimeExceptions thrown during init and continues to test providers to see if a lower priority provider will be successful, whereas we previously allowed RuntimeExceptions to propagate out of our provider selection code. Follow Signatures lead and catch RuntimeExceptions. The motivation for this change is a problem on Android versions up to L where Android Keystore opaque keys are used in signing operations. They appear to be valid EC keys, but throw UnsupportedOperationException when their key material is accessed, which causes Conscrypts delegate selection code to explode. Instead now we will catch the RuntimeException and continue to test providers until one is found that can use the key. As part of this, move OpaqueProvider to testing infrastructure and add a BrokenProvider that just explodes on everything. Fixes"
,,0.2965,conscrypt,"Ignore RuntimeExceptions thrown in CryptoUpcalls (#684) Signatures provider selection code ignores RuntimeExceptions thrown during init and continues to test providers to see if a lower priority provider will be successful, whereas we previously allowed RuntimeExceptions to propagate out of our provider selection code. Follow Signatures lead and catch RuntimeExceptions. The motivation for this change is a problem on Android versions up to L where Android Keystore opaque keys are used in signing operations. They appear to be valid EC keys, but throw UnsupportedOperationException when their key material is accessed, which causes Conscrypts delegate selection code to explode. Instead now we will catch the RuntimeException and continue to test providers until one is found that can use the key. As part of this, move OpaqueProvider to testing infrastructure and add a BrokenProvider that just explodes on everything. Fixes"
,,0.0588,Frostwire,"[common] NPE check, cleanup on BTDownload.java/"
,,0.0673,Frostwire,[common] Allow natural flow of exceptions in http client save/
,,0.0605,Frostwire,[android] NPE fix when no external drives cant be found/[android] fixing conflicts./
,,0.0628,Frostwire,[common] more fixes in YT signature detection/
,,0.0723,Frostwire,[android] bugfix where music playback and audio ad could play simultaneously/
,,0.2299,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2333,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2282,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.209,javacpp,"* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/ * To help diagnose `UnsatisfiedLinkError` thrown by `Loader.load()`, they have been augmented with a potential cause originating from the ""preloading"" of libraries, whose premature deletion has also been fixed/ * Provided new annotation value to let users specify the name of the native library used by both `Builder` and `Loader`, where different classes with the same name get built together, which also works on nested classes (issue"
,,0.2265,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2231,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2282,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2265,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2282,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2265,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2265,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2282,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2299,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.099,javacpp,Merge pull request from osialr/staging/pointer-close-throws-runtime * Remove `throws Exception` from `Pointer.close()`/Remove throws Exception from Pointer::close Pointer throws a RuntimeException on close. Removing the throws allows the users try-with-resource blocks not require a catch(Exception)/Merge pull request from georgekankava/staging/nested-blocks-of-code-should-not-be-left-empty-fix-1 Do at least something for exceptions we swallow but do not expect/Fix up functionality for `Info.flatten`/
,,0.066,OpenDDS,Fixed another warning in FaceTSS./
,,0.0792,pljava,"From now getWarning throws an exception on a closed statement, according to JDBC specification/"
,,0.1182,realm-java,Change C++ header suffix from .h to .hpp since this selects the correct syntax highlighting mode in editors as well as in code browsers such as GitHub/
,,0.1829,realm-java,Merge remote-tracking branch Tightdb/move_last_over Conflicts: tightdb-java-core/src/main/java/com/tightdb/typed/AbstractTable.java Contains BUG FIX: GetBinaryData() could throw when empty BinaryData. AFTER Merge: Contains new move_last_over method (currently disabled) Removed the graph example./Fixing memory leak in: Correct transcoding from UTF-16 to UTF-8/bugfix: wrong error in GetBinaryData() could occur when len=0/Change C++ header suffix from .h to .hpp since this selects the correct syntax highlighting mode in editors as well as in code browsers such as GitHub/
,,0.1138,realm-java,Change C++ header suffix from .h to .hpp since this selects the correct syntax highlighting mode in editors as well as in code browsers such as GitHub/String conversion in both directions is complete except for an important FIXME in to_jstring() in util.h/
,,0.1023,realm-java,Change C++ header suffix from .h to .hpp since this selects the correct syntax highlighting mode in editors as well as in code browsers such as GitHub/String conversion in both directions is complete except for an important FIXME in to_jstring() in util.h/Fix due to core lib change: Group::get_table_count() Group::size()/
,,0.1202,realm-java,Change C++ header suffix from .h to .hpp since this selects the correct syntax highlighting mode in editors as well as in code browsers such as GitHub/
,,0.1599,realm-java,"Merge remote-tracking branch Tightdb/move_last_over Conflicts: tightdb-java-core/src/main/java/com/tightdb/typed/AbstractTable.java Contains BUG FIX: GetBinaryData() could throw when empty BinaryData. AFTER Merge: Contains new move_last_over method (currently disabled) Removed the graph example./Fixes for: Merge branch master into explicit_string_size/Change C++ header suffix from .h to .hpp since this selects the correct syntax highlighting mode in editors as well as in code browsers such as GitHub/String conversion in both directions is complete except for an important FIXME in to_jstring() in util.h/WIP: Updated with float, double support. Still a crash./"
,,0.1242,realm-java,Change C++ header suffix from .h to .hpp since this selects the correct syntax highlighting mode in editors as well as in code browsers such as GitHub/
,,0.1158,realm-java,"Change C++ header suffix from .h to .hpp since this selects the correct syntax highlighting mode in editors as well as in code browsers such as GitHub/WIP: Updated with float, double support. Still a crash./"
,,0.1004,realm-java,Merge remote-tracking branch Tightdb/move_last_over Conflicts: tightdb-java-core/src/main/java/com/tightdb/typed/AbstractTable.java Contains BUG FIX: GetBinaryData() could throw when empty BinaryData. AFTER Merge: Contains new move_last_over method (currently disabled) Removed the graph example./
,,0.1011,realm-java,"Merge remote-tracking branch Tightdb/move_last_over Conflicts: tightdb-java-core/src/main/java/com/tightdb/typed/AbstractTable.java Contains BUG FIX: GetBinaryData() could throw when empty BinaryData. AFTER Merge: Contains new move_last_over method (currently disabled) Removed the graph example./WIP: Updated with float, double support. Still a crash./"
,,0.1029,realm-java,"Merge remote-tracking branch Tightdb/move_last_over Conflicts: tightdb-java-core/src/main/java/com/tightdb/typed/AbstractTable.java Contains BUG FIX: GetBinaryData() could throw when empty BinaryData. AFTER Merge: Contains new move_last_over method (currently disabled) Removed the graph example./WIP: Updated with float, double support. Still a crash./"
,,0.0984,realm-java,Merge remote-tracking branch Tightdb/move_last_over Conflicts: tightdb-java-core/src/main/java/com/tightdb/typed/AbstractTable.java Contains BUG FIX: GetBinaryData() could throw when empty BinaryData. AFTER Merge: Contains new move_last_over method (currently disabled) Removed the graph example./
,,0.066,realm-java,Fix memory leak when unsubscribing from RxJava observables. (#3678)/
,,0.063,realm-java,Proper RealmMigrationNeededException is now thrown. (#4304)/
,,0.0737,realm-java,Helper class for throwing java exception from JNI (#4636)/
,,0.0534,rocksdb,Merge pull request from adamretter/bugfix-native-library-loader Use correct classloader in Java NativeLibraryLoader/
,,0.0616,rocksdb,[RocksJava] Comparator tests for CF Added AbstractComparatorTest. Fixed a bug in the JNI Part about Java comparators/Merge pull request from fyrz/RocksJava-Sigsegv-MergeOperatorName [RocksJava] Fixes in MergeOperatorByName/[RocksJava] Sigsegv fix for MergerOperatorByName/
,,0.2405,rocksdb,"[Fix java build] Stop using non standard std::make_unique Summary: std::make_unique is not standard and not always available, remove it Test Plan: Run ""make clean jclean rocksdbjava jtest on my mac Reviewers: yhchiang, yiwu, sdong, andrewkr Reviewed By: andrewkr Subscribers: andrewkr, dhruba Differential Revision: 1220: rocksjni build fails on Windows due to variable-size array declaration (#1223) * fixes 1220: rocksjni build fails on Windows due to variable-size array declaration using new keyword to create variable-size arrays in order to satisfy most of the compilers * fixes 1220: rocksjni build fails on Windows due to variable-size array declaration using unique_ptr keyword to create variable-size arrays in order to satisfy most of the compilers/"
,,0.2364,rocksdb,"[Fix java build] Stop using non standard std::make_unique Summary: std::make_unique is not standard and not always available, remove it Test Plan: Run ""make clean jclean rocksdbjava jtest on my mac Reviewers: yhchiang, yiwu, sdong, andrewkr Reviewed By: andrewkr Subscribers: andrewkr, dhruba Differential Revision: 1220: rocksjni build fails on Windows due to variable-size array declaration (#1223) * fixes 1220: rocksjni build fails on Windows due to variable-size array declaration using new keyword to create variable-size arrays in order to satisfy most of the compilers * fixes 1220: rocksjni build fails on Windows due to variable-size array declaration using unique_ptr keyword to create variable-size arrays in order to satisfy most of the compilers/"
,,0.2121,rocksdb,"[Fix java build] Stop using non standard std::make_unique Summary: std::make_unique is not standard and not always available, remove it Test Plan: Run ""make clean jclean rocksdbjava jtest on my mac Reviewers: yhchiang, yiwu, sdong, andrewkr Reviewed By: andrewkr Subscribers: andrewkr, dhruba Differential Revision: 1220: rocksjni build fails on Windows due to variable-size array declaration (#1223) * fixes 1220: rocksjni build fails on Windows due to variable-size array declaration using new keyword to create variable-size arrays in order to satisfy most of the compilers * fixes 1220: rocksjni build fails on Windows due to variable-size array declaration using unique_ptr keyword to create variable-size arrays in order to satisfy most of the compilers/Java API Bugfix for native linking of Compaction Filter (#1099)/"
,,0.1235,rocksdb,"Suppress valgrind ""unimplemented functionality"" error Summary: Add ROCKSDB_VALGRIND_RUN macro and suppress false-positive ""unimplemented functionality"" throw by valgrind for steam hints. Another approach would be add a valgrind suppress file. Valgrind is suppose to print the suppression when given ""--gen-suppressions=all"" param, which is suppose to be the content for the suppression file. But it doesnt print. Closes Differential Revision: D6338786 Pulled By: yiwu-arbug fbshipit-source-id: 3559efa5f3b92d40d09ad6ac82bc7b59f86c75aa/"
,,0.1539,rocksdb,"Fix swallowing of exception in Java RocksDB when loading native library (#4728) Summary: This PR fixes When an exception is caught and thrown as a different exception, then the original exception should be inserted as a cause of the new exception. This bug in RocksDB was swallowing the underlying exception from `NativeLibraryLoader` and throwing the following exception ``` ... Caused by: java.lang.RuntimeException: Unable to load the RocksDB shared libraryjava.nio.channels.ClosedByInterruptException at org.rocksdb.RocksDB.loadLibrary(RocksDB.java:67) at org.rocksdb.RocksDB.<clinit>(RocksDB.java:35) ... 73 more ``` The fix is simple and self-explanatory. Pull Request resolved: Differential Revision: D13418371 Pulled By: sagar0 fbshipit-source-id: d76c25af2a83a0f8ba62cc8d7b721bfddc85fdf1/Fix issues with RocksJava dropColumnFamily (#4770) Summary: Closes Pull Request resolved: Differential Revision: D13416802 Pulled By: ajkr fbshipit-source-id: 8a351e9b80dc9eeb6073467fbc67cd2f544917b0/Expose underlying Read/Write APIs for avoiding unnecessary memory copy (#2303) Summary: adamretter As you already mentioned at . Pull Request resolved: Differential Revision: D10209001 Pulled By: sagar0 fbshipit-source-id: bcbce004112c2edeaff116968d79c6f90aab4b6c/"
,,0.6064,rocksdb,"Improve RocksJava Comparator (#6252) Summary: This is a redesign of the API for RocksJava comparators with the aim of improving performance. It also simplifies the class hierarchy. **NOTE**: This breaks backwards compatibility for existing 3rd party Comparators implemented in Java... so we need to consider carefully which release branches this goes into. Previously when implementing a comparator in Java the developer had a choice of subclassing either `DirectComparator` or `Comparator` which would use direct and non-direct byte-buffers resepectively (via `DirectSlice` and `Slice`). In this redesign there we have eliminated the overhead of using the Java Slice classes, and just use `ByteBuffer`s. The `ComparatorOptions` supplied when constructing a Comparator allow you to choose between direct and non-direct byte buffers by setting `useDirect`. In addition, the `ComparatorOptions` now allow you to choose whether a ByteBuffer is reused over multiple comparator calls, by setting `maxReusedBufferSize > 0`. When buffers are reused, ComparatorOptions provides a choice of mutex type by setting `useAdaptiveMutex`. [JMH benchmarks previously indicated]( that the difference between C++ and Java for implementing a comparator was ~7x slowdown in Java. With these changes, when reusing buffers and guarding access to them via mutexes the slowdown is approximately the same. However, these changes offer a new facility to not reuse mutextes, which reduces the slowdown to ~5.5x in Java. We also offer a `thread_local` mechanism for reusing buffers, which reduces slowdown to ~5.2x in Java (closes These changes also form a good base for further optimisation work such as further JNI lookup caching, and JNI critical. These numbers were captured without jemalloc. With jemalloc, the performance improves for all tests, and the Java slowdown reduces to between 4.8x and 5.x. ``` ComparatorBenchmarks.put native_bytewise thrpt 25 124483.795 Â± 2032.443 ops/s ComparatorBenchmarks.put native_reverse_bytewise thrpt 25 114414.536 Â± 3486.156 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 17228.250 Â± 1288.546 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 16035.865 Â± 1248.099 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_thread-local thrpt 25 21571.500 Â± 871.521 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_adaptive-mutex thrpt 25 23613.773 Â± 8465.660 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 16768.172 Â± 5618.489 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_thread-local thrpt 25 23921.164 Â± 8734.742 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_no-reuse thrpt 25 17899.684 Â± 839.679 ops/s ComparatorBenchmarks.put java_bytewise_direct_no-reuse thrpt 25 22148.316 Â± 1215.527 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 11311.126 Â± 820.602 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 11421.311 Â± 807.210 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_thread-local thrpt 25 11554.005 Â± 960.556 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_adaptive-mutex thrpt 25 22960.523 Â± 1673.421 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 18293.317 Â± 1434.601 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_thread-local thrpt 25 24479.361 Â± 2157.306 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_no-reuse thrpt 25 7942.286 Â± 626.170 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_no-reuse thrpt 25 11781.955 Â± 1019.843 ops/s ``` Pull Request resolved: Differential Revision: D19331064 Pulled By: pdillinger fbshipit-source-id: 1f3b794e6a14162b2c3ffb943e8c0e64a0c03738/"
,,0.6021,rocksdb,"Improve RocksJava Comparator (#6252) Summary: This is a redesign of the API for RocksJava comparators with the aim of improving performance. It also simplifies the class hierarchy. **NOTE**: This breaks backwards compatibility for existing 3rd party Comparators implemented in Java... so we need to consider carefully which release branches this goes into. Previously when implementing a comparator in Java the developer had a choice of subclassing either `DirectComparator` or `Comparator` which would use direct and non-direct byte-buffers resepectively (via `DirectSlice` and `Slice`). In this redesign there we have eliminated the overhead of using the Java Slice classes, and just use `ByteBuffer`s. The `ComparatorOptions` supplied when constructing a Comparator allow you to choose between direct and non-direct byte buffers by setting `useDirect`. In addition, the `ComparatorOptions` now allow you to choose whether a ByteBuffer is reused over multiple comparator calls, by setting `maxReusedBufferSize > 0`. When buffers are reused, ComparatorOptions provides a choice of mutex type by setting `useAdaptiveMutex`. [JMH benchmarks previously indicated]( that the difference between C++ and Java for implementing a comparator was ~7x slowdown in Java. With these changes, when reusing buffers and guarding access to them via mutexes the slowdown is approximately the same. However, these changes offer a new facility to not reuse mutextes, which reduces the slowdown to ~5.5x in Java. We also offer a `thread_local` mechanism for reusing buffers, which reduces slowdown to ~5.2x in Java (closes These changes also form a good base for further optimisation work such as further JNI lookup caching, and JNI critical. These numbers were captured without jemalloc. With jemalloc, the performance improves for all tests, and the Java slowdown reduces to between 4.8x and 5.x. ``` ComparatorBenchmarks.put native_bytewise thrpt 25 124483.795 Â± 2032.443 ops/s ComparatorBenchmarks.put native_reverse_bytewise thrpt 25 114414.536 Â± 3486.156 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 17228.250 Â± 1288.546 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 16035.865 Â± 1248.099 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_thread-local thrpt 25 21571.500 Â± 871.521 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_adaptive-mutex thrpt 25 23613.773 Â± 8465.660 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 16768.172 Â± 5618.489 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_thread-local thrpt 25 23921.164 Â± 8734.742 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_no-reuse thrpt 25 17899.684 Â± 839.679 ops/s ComparatorBenchmarks.put java_bytewise_direct_no-reuse thrpt 25 22148.316 Â± 1215.527 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 11311.126 Â± 820.602 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 11421.311 Â± 807.210 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_thread-local thrpt 25 11554.005 Â± 960.556 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_adaptive-mutex thrpt 25 22960.523 Â± 1673.421 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 18293.317 Â± 1434.601 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_thread-local thrpt 25 24479.361 Â± 2157.306 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_no-reuse thrpt 25 7942.286 Â± 626.170 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_no-reuse thrpt 25 11781.955 Â± 1019.843 ops/s ``` Pull Request resolved: Differential Revision: D19331064 Pulled By: pdillinger fbshipit-source-id: 1f3b794e6a14162b2c3ffb943e8c0e64a0c03738/"
,,0.6047,rocksdb,"Improve RocksJava Comparator (#6252) Summary: This is a redesign of the API for RocksJava comparators with the aim of improving performance. It also simplifies the class hierarchy. **NOTE**: This breaks backwards compatibility for existing 3rd party Comparators implemented in Java... so we need to consider carefully which release branches this goes into. Previously when implementing a comparator in Java the developer had a choice of subclassing either `DirectComparator` or `Comparator` which would use direct and non-direct byte-buffers resepectively (via `DirectSlice` and `Slice`). In this redesign there we have eliminated the overhead of using the Java Slice classes, and just use `ByteBuffer`s. The `ComparatorOptions` supplied when constructing a Comparator allow you to choose between direct and non-direct byte buffers by setting `useDirect`. In addition, the `ComparatorOptions` now allow you to choose whether a ByteBuffer is reused over multiple comparator calls, by setting `maxReusedBufferSize > 0`. When buffers are reused, ComparatorOptions provides a choice of mutex type by setting `useAdaptiveMutex`. [JMH benchmarks previously indicated]( that the difference between C++ and Java for implementing a comparator was ~7x slowdown in Java. With these changes, when reusing buffers and guarding access to them via mutexes the slowdown is approximately the same. However, these changes offer a new facility to not reuse mutextes, which reduces the slowdown to ~5.5x in Java. We also offer a `thread_local` mechanism for reusing buffers, which reduces slowdown to ~5.2x in Java (closes These changes also form a good base for further optimisation work such as further JNI lookup caching, and JNI critical. These numbers were captured without jemalloc. With jemalloc, the performance improves for all tests, and the Java slowdown reduces to between 4.8x and 5.x. ``` ComparatorBenchmarks.put native_bytewise thrpt 25 124483.795 Â± 2032.443 ops/s ComparatorBenchmarks.put native_reverse_bytewise thrpt 25 114414.536 Â± 3486.156 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 17228.250 Â± 1288.546 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 16035.865 Â± 1248.099 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_thread-local thrpt 25 21571.500 Â± 871.521 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_adaptive-mutex thrpt 25 23613.773 Â± 8465.660 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 16768.172 Â± 5618.489 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_thread-local thrpt 25 23921.164 Â± 8734.742 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_no-reuse thrpt 25 17899.684 Â± 839.679 ops/s ComparatorBenchmarks.put java_bytewise_direct_no-reuse thrpt 25 22148.316 Â± 1215.527 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 11311.126 Â± 820.602 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 11421.311 Â± 807.210 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_thread-local thrpt 25 11554.005 Â± 960.556 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_adaptive-mutex thrpt 25 22960.523 Â± 1673.421 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 18293.317 Â± 1434.601 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_thread-local thrpt 25 24479.361 Â± 2157.306 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_no-reuse thrpt 25 7942.286 Â± 626.170 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_no-reuse thrpt 25 11781.955 Â± 1019.843 ops/s ``` Pull Request resolved: Differential Revision: D19331064 Pulled By: pdillinger fbshipit-source-id: 1f3b794e6a14162b2c3ffb943e8c0e64a0c03738/"
,,0.6013,rocksdb,"Improve RocksJava Comparator (#6252) Summary: This is a redesign of the API for RocksJava comparators with the aim of improving performance. It also simplifies the class hierarchy. **NOTE**: This breaks backwards compatibility for existing 3rd party Comparators implemented in Java... so we need to consider carefully which release branches this goes into. Previously when implementing a comparator in Java the developer had a choice of subclassing either `DirectComparator` or `Comparator` which would use direct and non-direct byte-buffers resepectively (via `DirectSlice` and `Slice`). In this redesign there we have eliminated the overhead of using the Java Slice classes, and just use `ByteBuffer`s. The `ComparatorOptions` supplied when constructing a Comparator allow you to choose between direct and non-direct byte buffers by setting `useDirect`. In addition, the `ComparatorOptions` now allow you to choose whether a ByteBuffer is reused over multiple comparator calls, by setting `maxReusedBufferSize > 0`. When buffers are reused, ComparatorOptions provides a choice of mutex type by setting `useAdaptiveMutex`. [JMH benchmarks previously indicated]( that the difference between C++ and Java for implementing a comparator was ~7x slowdown in Java. With these changes, when reusing buffers and guarding access to them via mutexes the slowdown is approximately the same. However, these changes offer a new facility to not reuse mutextes, which reduces the slowdown to ~5.5x in Java. We also offer a `thread_local` mechanism for reusing buffers, which reduces slowdown to ~5.2x in Java (closes These changes also form a good base for further optimisation work such as further JNI lookup caching, and JNI critical. These numbers were captured without jemalloc. With jemalloc, the performance improves for all tests, and the Java slowdown reduces to between 4.8x and 5.x. ``` ComparatorBenchmarks.put native_bytewise thrpt 25 124483.795 Â± 2032.443 ops/s ComparatorBenchmarks.put native_reverse_bytewise thrpt 25 114414.536 Â± 3486.156 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 17228.250 Â± 1288.546 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 16035.865 Â± 1248.099 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_thread-local thrpt 25 21571.500 Â± 871.521 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_adaptive-mutex thrpt 25 23613.773 Â± 8465.660 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 16768.172 Â± 5618.489 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_thread-local thrpt 25 23921.164 Â± 8734.742 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_no-reuse thrpt 25 17899.684 Â± 839.679 ops/s ComparatorBenchmarks.put java_bytewise_direct_no-reuse thrpt 25 22148.316 Â± 1215.527 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 11311.126 Â± 820.602 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 11421.311 Â± 807.210 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_thread-local thrpt 25 11554.005 Â± 960.556 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_adaptive-mutex thrpt 25 22960.523 Â± 1673.421 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 18293.317 Â± 1434.601 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_thread-local thrpt 25 24479.361 Â± 2157.306 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_no-reuse thrpt 25 7942.286 Â± 626.170 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_no-reuse thrpt 25 11781.955 Â± 1019.843 ops/s ``` Pull Request resolved: Differential Revision: D19331064 Pulled By: pdillinger fbshipit-source-id: 1f3b794e6a14162b2c3ffb943e8c0e64a0c03738/"
,,0.6056,rocksdb,"Improve RocksJava Comparator (#6252) Summary: This is a redesign of the API for RocksJava comparators with the aim of improving performance. It also simplifies the class hierarchy. **NOTE**: This breaks backwards compatibility for existing 3rd party Comparators implemented in Java... so we need to consider carefully which release branches this goes into. Previously when implementing a comparator in Java the developer had a choice of subclassing either `DirectComparator` or `Comparator` which would use direct and non-direct byte-buffers resepectively (via `DirectSlice` and `Slice`). In this redesign there we have eliminated the overhead of using the Java Slice classes, and just use `ByteBuffer`s. The `ComparatorOptions` supplied when constructing a Comparator allow you to choose between direct and non-direct byte buffers by setting `useDirect`. In addition, the `ComparatorOptions` now allow you to choose whether a ByteBuffer is reused over multiple comparator calls, by setting `maxReusedBufferSize > 0`. When buffers are reused, ComparatorOptions provides a choice of mutex type by setting `useAdaptiveMutex`. [JMH benchmarks previously indicated]( that the difference between C++ and Java for implementing a comparator was ~7x slowdown in Java. With these changes, when reusing buffers and guarding access to them via mutexes the slowdown is approximately the same. However, these changes offer a new facility to not reuse mutextes, which reduces the slowdown to ~5.5x in Java. We also offer a `thread_local` mechanism for reusing buffers, which reduces slowdown to ~5.2x in Java (closes These changes also form a good base for further optimisation work such as further JNI lookup caching, and JNI critical. These numbers were captured without jemalloc. With jemalloc, the performance improves for all tests, and the Java slowdown reduces to between 4.8x and 5.x. ``` ComparatorBenchmarks.put native_bytewise thrpt 25 124483.795 Â± 2032.443 ops/s ComparatorBenchmarks.put native_reverse_bytewise thrpt 25 114414.536 Â± 3486.156 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 17228.250 Â± 1288.546 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 16035.865 Â± 1248.099 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_thread-local thrpt 25 21571.500 Â± 871.521 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_adaptive-mutex thrpt 25 23613.773 Â± 8465.660 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 16768.172 Â± 5618.489 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_thread-local thrpt 25 23921.164 Â± 8734.742 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_no-reuse thrpt 25 17899.684 Â± 839.679 ops/s ComparatorBenchmarks.put java_bytewise_direct_no-reuse thrpt 25 22148.316 Â± 1215.527 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 11311.126 Â± 820.602 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 11421.311 Â± 807.210 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_thread-local thrpt 25 11554.005 Â± 960.556 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_adaptive-mutex thrpt 25 22960.523 Â± 1673.421 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 18293.317 Â± 1434.601 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_thread-local thrpt 25 24479.361 Â± 2157.306 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_no-reuse thrpt 25 7942.286 Â± 626.170 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_no-reuse thrpt 25 11781.955 Â± 1019.843 ops/s ``` Pull Request resolved: Differential Revision: D19331064 Pulled By: pdillinger fbshipit-source-id: 1f3b794e6a14162b2c3ffb943e8c0e64a0c03738/"
,,0.6073,rocksdb,"Improve RocksJava Comparator (#6252) Summary: This is a redesign of the API for RocksJava comparators with the aim of improving performance. It also simplifies the class hierarchy. **NOTE**: This breaks backwards compatibility for existing 3rd party Comparators implemented in Java... so we need to consider carefully which release branches this goes into. Previously when implementing a comparator in Java the developer had a choice of subclassing either `DirectComparator` or `Comparator` which would use direct and non-direct byte-buffers resepectively (via `DirectSlice` and `Slice`). In this redesign there we have eliminated the overhead of using the Java Slice classes, and just use `ByteBuffer`s. The `ComparatorOptions` supplied when constructing a Comparator allow you to choose between direct and non-direct byte buffers by setting `useDirect`. In addition, the `ComparatorOptions` now allow you to choose whether a ByteBuffer is reused over multiple comparator calls, by setting `maxReusedBufferSize > 0`. When buffers are reused, ComparatorOptions provides a choice of mutex type by setting `useAdaptiveMutex`. [JMH benchmarks previously indicated]( that the difference between C++ and Java for implementing a comparator was ~7x slowdown in Java. With these changes, when reusing buffers and guarding access to them via mutexes the slowdown is approximately the same. However, these changes offer a new facility to not reuse mutextes, which reduces the slowdown to ~5.5x in Java. We also offer a `thread_local` mechanism for reusing buffers, which reduces slowdown to ~5.2x in Java (closes These changes also form a good base for further optimisation work such as further JNI lookup caching, and JNI critical. These numbers were captured without jemalloc. With jemalloc, the performance improves for all tests, and the Java slowdown reduces to between 4.8x and 5.x. ``` ComparatorBenchmarks.put native_bytewise thrpt 25 124483.795 Â± 2032.443 ops/s ComparatorBenchmarks.put native_reverse_bytewise thrpt 25 114414.536 Â± 3486.156 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 17228.250 Â± 1288.546 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 16035.865 Â± 1248.099 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_thread-local thrpt 25 21571.500 Â± 871.521 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_adaptive-mutex thrpt 25 23613.773 Â± 8465.660 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 16768.172 Â± 5618.489 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_thread-local thrpt 25 23921.164 Â± 8734.742 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_no-reuse thrpt 25 17899.684 Â± 839.679 ops/s ComparatorBenchmarks.put java_bytewise_direct_no-reuse thrpt 25 22148.316 Â± 1215.527 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 11311.126 Â± 820.602 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 11421.311 Â± 807.210 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_thread-local thrpt 25 11554.005 Â± 960.556 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_adaptive-mutex thrpt 25 22960.523 Â± 1673.421 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 18293.317 Â± 1434.601 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_thread-local thrpt 25 24479.361 Â± 2157.306 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_no-reuse thrpt 25 7942.286 Â± 626.170 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_no-reuse thrpt 25 11781.955 Â± 1019.843 ops/s ``` Pull Request resolved: Differential Revision: D19331064 Pulled By: pdillinger fbshipit-source-id: 1f3b794e6a14162b2c3ffb943e8c0e64a0c03738/"
,,0.6047,rocksdb,"Improve RocksJava Comparator (#6252) Summary: This is a redesign of the API for RocksJava comparators with the aim of improving performance. It also simplifies the class hierarchy. **NOTE**: This breaks backwards compatibility for existing 3rd party Comparators implemented in Java... so we need to consider carefully which release branches this goes into. Previously when implementing a comparator in Java the developer had a choice of subclassing either `DirectComparator` or `Comparator` which would use direct and non-direct byte-buffers resepectively (via `DirectSlice` and `Slice`). In this redesign there we have eliminated the overhead of using the Java Slice classes, and just use `ByteBuffer`s. The `ComparatorOptions` supplied when constructing a Comparator allow you to choose between direct and non-direct byte buffers by setting `useDirect`. In addition, the `ComparatorOptions` now allow you to choose whether a ByteBuffer is reused over multiple comparator calls, by setting `maxReusedBufferSize > 0`. When buffers are reused, ComparatorOptions provides a choice of mutex type by setting `useAdaptiveMutex`. [JMH benchmarks previously indicated]( that the difference between C++ and Java for implementing a comparator was ~7x slowdown in Java. With these changes, when reusing buffers and guarding access to them via mutexes the slowdown is approximately the same. However, these changes offer a new facility to not reuse mutextes, which reduces the slowdown to ~5.5x in Java. We also offer a `thread_local` mechanism for reusing buffers, which reduces slowdown to ~5.2x in Java (closes These changes also form a good base for further optimisation work such as further JNI lookup caching, and JNI critical. These numbers were captured without jemalloc. With jemalloc, the performance improves for all tests, and the Java slowdown reduces to between 4.8x and 5.x. ``` ComparatorBenchmarks.put native_bytewise thrpt 25 124483.795 Â± 2032.443 ops/s ComparatorBenchmarks.put native_reverse_bytewise thrpt 25 114414.536 Â± 3486.156 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 17228.250 Â± 1288.546 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 16035.865 Â± 1248.099 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_thread-local thrpt 25 21571.500 Â± 871.521 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_adaptive-mutex thrpt 25 23613.773 Â± 8465.660 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 16768.172 Â± 5618.489 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_thread-local thrpt 25 23921.164 Â± 8734.742 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_no-reuse thrpt 25 17899.684 Â± 839.679 ops/s ComparatorBenchmarks.put java_bytewise_direct_no-reuse thrpt 25 22148.316 Â± 1215.527 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 11311.126 Â± 820.602 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 11421.311 Â± 807.210 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_thread-local thrpt 25 11554.005 Â± 960.556 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_adaptive-mutex thrpt 25 22960.523 Â± 1673.421 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 18293.317 Â± 1434.601 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_thread-local thrpt 25 24479.361 Â± 2157.306 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_no-reuse thrpt 25 7942.286 Â± 626.170 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_no-reuse thrpt 25 11781.955 Â± 1019.843 ops/s ``` Pull Request resolved: Differential Revision: D19331064 Pulled By: pdillinger fbshipit-source-id: 1f3b794e6a14162b2c3ffb943e8c0e64a0c03738/"
,,0.6073,rocksdb,"Improve RocksJava Comparator (#6252) Summary: This is a redesign of the API for RocksJava comparators with the aim of improving performance. It also simplifies the class hierarchy. **NOTE**: This breaks backwards compatibility for existing 3rd party Comparators implemented in Java... so we need to consider carefully which release branches this goes into. Previously when implementing a comparator in Java the developer had a choice of subclassing either `DirectComparator` or `Comparator` which would use direct and non-direct byte-buffers resepectively (via `DirectSlice` and `Slice`). In this redesign there we have eliminated the overhead of using the Java Slice classes, and just use `ByteBuffer`s. The `ComparatorOptions` supplied when constructing a Comparator allow you to choose between direct and non-direct byte buffers by setting `useDirect`. In addition, the `ComparatorOptions` now allow you to choose whether a ByteBuffer is reused over multiple comparator calls, by setting `maxReusedBufferSize > 0`. When buffers are reused, ComparatorOptions provides a choice of mutex type by setting `useAdaptiveMutex`. [JMH benchmarks previously indicated]( that the difference between C++ and Java for implementing a comparator was ~7x slowdown in Java. With these changes, when reusing buffers and guarding access to them via mutexes the slowdown is approximately the same. However, these changes offer a new facility to not reuse mutextes, which reduces the slowdown to ~5.5x in Java. We also offer a `thread_local` mechanism for reusing buffers, which reduces slowdown to ~5.2x in Java (closes These changes also form a good base for further optimisation work such as further JNI lookup caching, and JNI critical. These numbers were captured without jemalloc. With jemalloc, the performance improves for all tests, and the Java slowdown reduces to between 4.8x and 5.x. ``` ComparatorBenchmarks.put native_bytewise thrpt 25 124483.795 Â± 2032.443 ops/s ComparatorBenchmarks.put native_reverse_bytewise thrpt 25 114414.536 Â± 3486.156 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 17228.250 Â± 1288.546 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 16035.865 Â± 1248.099 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_thread-local thrpt 25 21571.500 Â± 871.521 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_adaptive-mutex thrpt 25 23613.773 Â± 8465.660 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 16768.172 Â± 5618.489 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_thread-local thrpt 25 23921.164 Â± 8734.742 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_no-reuse thrpt 25 17899.684 Â± 839.679 ops/s ComparatorBenchmarks.put java_bytewise_direct_no-reuse thrpt 25 22148.316 Â± 1215.527 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 11311.126 Â± 820.602 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 11421.311 Â± 807.210 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_thread-local thrpt 25 11554.005 Â± 960.556 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_adaptive-mutex thrpt 25 22960.523 Â± 1673.421 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 18293.317 Â± 1434.601 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_thread-local thrpt 25 24479.361 Â± 2157.306 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_no-reuse thrpt 25 7942.286 Â± 626.170 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_no-reuse thrpt 25 11781.955 Â± 1019.843 ops/s ``` Pull Request resolved: Differential Revision: D19331064 Pulled By: pdillinger fbshipit-source-id: 1f3b794e6a14162b2c3ffb943e8c0e64a0c03738/"
,,0.6004,rocksdb,"Improve RocksJava Comparator (#6252) Summary: This is a redesign of the API for RocksJava comparators with the aim of improving performance. It also simplifies the class hierarchy. **NOTE**: This breaks backwards compatibility for existing 3rd party Comparators implemented in Java... so we need to consider carefully which release branches this goes into. Previously when implementing a comparator in Java the developer had a choice of subclassing either `DirectComparator` or `Comparator` which would use direct and non-direct byte-buffers resepectively (via `DirectSlice` and `Slice`). In this redesign there we have eliminated the overhead of using the Java Slice classes, and just use `ByteBuffer`s. The `ComparatorOptions` supplied when constructing a Comparator allow you to choose between direct and non-direct byte buffers by setting `useDirect`. In addition, the `ComparatorOptions` now allow you to choose whether a ByteBuffer is reused over multiple comparator calls, by setting `maxReusedBufferSize > 0`. When buffers are reused, ComparatorOptions provides a choice of mutex type by setting `useAdaptiveMutex`. [JMH benchmarks previously indicated]( that the difference between C++ and Java for implementing a comparator was ~7x slowdown in Java. With these changes, when reusing buffers and guarding access to them via mutexes the slowdown is approximately the same. However, these changes offer a new facility to not reuse mutextes, which reduces the slowdown to ~5.5x in Java. We also offer a `thread_local` mechanism for reusing buffers, which reduces slowdown to ~5.2x in Java (closes These changes also form a good base for further optimisation work such as further JNI lookup caching, and JNI critical. These numbers were captured without jemalloc. With jemalloc, the performance improves for all tests, and the Java slowdown reduces to between 4.8x and 5.x. ``` ComparatorBenchmarks.put native_bytewise thrpt 25 124483.795 Â± 2032.443 ops/s ComparatorBenchmarks.put native_reverse_bytewise thrpt 25 114414.536 Â± 3486.156 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 17228.250 Â± 1288.546 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 16035.865 Â± 1248.099 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_thread-local thrpt 25 21571.500 Â± 871.521 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_adaptive-mutex thrpt 25 23613.773 Â± 8465.660 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 16768.172 Â± 5618.489 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_thread-local thrpt 25 23921.164 Â± 8734.742 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_no-reuse thrpt 25 17899.684 Â± 839.679 ops/s ComparatorBenchmarks.put java_bytewise_direct_no-reuse thrpt 25 22148.316 Â± 1215.527 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 11311.126 Â± 820.602 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 11421.311 Â± 807.210 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_thread-local thrpt 25 11554.005 Â± 960.556 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_adaptive-mutex thrpt 25 22960.523 Â± 1673.421 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 18293.317 Â± 1434.601 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_thread-local thrpt 25 24479.361 Â± 2157.306 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_no-reuse thrpt 25 7942.286 Â± 626.170 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_no-reuse thrpt 25 11781.955 Â± 1019.843 ops/s ``` Pull Request resolved: Differential Revision: D19331064 Pulled By: pdillinger fbshipit-source-id: 1f3b794e6a14162b2c3ffb943e8c0e64a0c03738/"
,,0.5996,rocksdb,"Improve RocksJava Comparator (#6252) Summary: This is a redesign of the API for RocksJava comparators with the aim of improving performance. It also simplifies the class hierarchy. **NOTE**: This breaks backwards compatibility for existing 3rd party Comparators implemented in Java... so we need to consider carefully which release branches this goes into. Previously when implementing a comparator in Java the developer had a choice of subclassing either `DirectComparator` or `Comparator` which would use direct and non-direct byte-buffers resepectively (via `DirectSlice` and `Slice`). In this redesign there we have eliminated the overhead of using the Java Slice classes, and just use `ByteBuffer`s. The `ComparatorOptions` supplied when constructing a Comparator allow you to choose between direct and non-direct byte buffers by setting `useDirect`. In addition, the `ComparatorOptions` now allow you to choose whether a ByteBuffer is reused over multiple comparator calls, by setting `maxReusedBufferSize > 0`. When buffers are reused, ComparatorOptions provides a choice of mutex type by setting `useAdaptiveMutex`. [JMH benchmarks previously indicated]( that the difference between C++ and Java for implementing a comparator was ~7x slowdown in Java. With these changes, when reusing buffers and guarding access to them via mutexes the slowdown is approximately the same. However, these changes offer a new facility to not reuse mutextes, which reduces the slowdown to ~5.5x in Java. We also offer a `thread_local` mechanism for reusing buffers, which reduces slowdown to ~5.2x in Java (closes These changes also form a good base for further optimisation work such as further JNI lookup caching, and JNI critical. These numbers were captured without jemalloc. With jemalloc, the performance improves for all tests, and the Java slowdown reduces to between 4.8x and 5.x. ``` ComparatorBenchmarks.put native_bytewise thrpt 25 124483.795 Â± 2032.443 ops/s ComparatorBenchmarks.put native_reverse_bytewise thrpt 25 114414.536 Â± 3486.156 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 17228.250 Â± 1288.546 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 16035.865 Â± 1248.099 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_thread-local thrpt 25 21571.500 Â± 871.521 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_adaptive-mutex thrpt 25 23613.773 Â± 8465.660 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 16768.172 Â± 5618.489 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_thread-local thrpt 25 23921.164 Â± 8734.742 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_no-reuse thrpt 25 17899.684 Â± 839.679 ops/s ComparatorBenchmarks.put java_bytewise_direct_no-reuse thrpt 25 22148.316 Â± 1215.527 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 11311.126 Â± 820.602 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 11421.311 Â± 807.210 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_thread-local thrpt 25 11554.005 Â± 960.556 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_adaptive-mutex thrpt 25 22960.523 Â± 1673.421 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 18293.317 Â± 1434.601 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_thread-local thrpt 25 24479.361 Â± 2157.306 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_no-reuse thrpt 25 7942.286 Â± 626.170 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_no-reuse thrpt 25 11781.955 Â± 1019.843 ops/s ``` Pull Request resolved: Differential Revision: D19331064 Pulled By: pdillinger fbshipit-source-id: 1f3b794e6a14162b2c3ffb943e8c0e64a0c03738/"
,,0.5979,rocksdb,"Improve RocksJava Comparator (#6252) Summary: This is a redesign of the API for RocksJava comparators with the aim of improving performance. It also simplifies the class hierarchy. **NOTE**: This breaks backwards compatibility for existing 3rd party Comparators implemented in Java... so we need to consider carefully which release branches this goes into. Previously when implementing a comparator in Java the developer had a choice of subclassing either `DirectComparator` or `Comparator` which would use direct and non-direct byte-buffers resepectively (via `DirectSlice` and `Slice`). In this redesign there we have eliminated the overhead of using the Java Slice classes, and just use `ByteBuffer`s. The `ComparatorOptions` supplied when constructing a Comparator allow you to choose between direct and non-direct byte buffers by setting `useDirect`. In addition, the `ComparatorOptions` now allow you to choose whether a ByteBuffer is reused over multiple comparator calls, by setting `maxReusedBufferSize > 0`. When buffers are reused, ComparatorOptions provides a choice of mutex type by setting `useAdaptiveMutex`. [JMH benchmarks previously indicated]( that the difference between C++ and Java for implementing a comparator was ~7x slowdown in Java. With these changes, when reusing buffers and guarding access to them via mutexes the slowdown is approximately the same. However, these changes offer a new facility to not reuse mutextes, which reduces the slowdown to ~5.5x in Java. We also offer a `thread_local` mechanism for reusing buffers, which reduces slowdown to ~5.2x in Java (closes These changes also form a good base for further optimisation work such as further JNI lookup caching, and JNI critical. These numbers were captured without jemalloc. With jemalloc, the performance improves for all tests, and the Java slowdown reduces to between 4.8x and 5.x. ``` ComparatorBenchmarks.put native_bytewise thrpt 25 124483.795 Â± 2032.443 ops/s ComparatorBenchmarks.put native_reverse_bytewise thrpt 25 114414.536 Â± 3486.156 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 17228.250 Â± 1288.546 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 16035.865 Â± 1248.099 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_thread-local thrpt 25 21571.500 Â± 871.521 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_adaptive-mutex thrpt 25 23613.773 Â± 8465.660 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 16768.172 Â± 5618.489 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_thread-local thrpt 25 23921.164 Â± 8734.742 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_no-reuse thrpt 25 17899.684 Â± 839.679 ops/s ComparatorBenchmarks.put java_bytewise_direct_no-reuse thrpt 25 22148.316 Â± 1215.527 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 11311.126 Â± 820.602 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 11421.311 Â± 807.210 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_thread-local thrpt 25 11554.005 Â± 960.556 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_adaptive-mutex thrpt 25 22960.523 Â± 1673.421 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 18293.317 Â± 1434.601 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_thread-local thrpt 25 24479.361 Â± 2157.306 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_no-reuse thrpt 25 7942.286 Â± 626.170 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_no-reuse thrpt 25 11781.955 Â± 1019.843 ops/s ``` Pull Request resolved: Differential Revision: D19331064 Pulled By: pdillinger fbshipit-source-id: 1f3b794e6a14162b2c3ffb943e8c0e64a0c03738/"
,,0.6098,rocksdb,"Improve RocksJava Comparator (#6252) Summary: This is a redesign of the API for RocksJava comparators with the aim of improving performance. It also simplifies the class hierarchy. **NOTE**: This breaks backwards compatibility for existing 3rd party Comparators implemented in Java... so we need to consider carefully which release branches this goes into. Previously when implementing a comparator in Java the developer had a choice of subclassing either `DirectComparator` or `Comparator` which would use direct and non-direct byte-buffers resepectively (via `DirectSlice` and `Slice`). In this redesign there we have eliminated the overhead of using the Java Slice classes, and just use `ByteBuffer`s. The `ComparatorOptions` supplied when constructing a Comparator allow you to choose between direct and non-direct byte buffers by setting `useDirect`. In addition, the `ComparatorOptions` now allow you to choose whether a ByteBuffer is reused over multiple comparator calls, by setting `maxReusedBufferSize > 0`. When buffers are reused, ComparatorOptions provides a choice of mutex type by setting `useAdaptiveMutex`. [JMH benchmarks previously indicated]( that the difference between C++ and Java for implementing a comparator was ~7x slowdown in Java. With these changes, when reusing buffers and guarding access to them via mutexes the slowdown is approximately the same. However, these changes offer a new facility to not reuse mutextes, which reduces the slowdown to ~5.5x in Java. We also offer a `thread_local` mechanism for reusing buffers, which reduces slowdown to ~5.2x in Java (closes These changes also form a good base for further optimisation work such as further JNI lookup caching, and JNI critical. These numbers were captured without jemalloc. With jemalloc, the performance improves for all tests, and the Java slowdown reduces to between 4.8x and 5.x. ``` ComparatorBenchmarks.put native_bytewise thrpt 25 124483.795 Â± 2032.443 ops/s ComparatorBenchmarks.put native_reverse_bytewise thrpt 25 114414.536 Â± 3486.156 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 17228.250 Â± 1288.546 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 16035.865 Â± 1248.099 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_reused-64_thread-local thrpt 25 21571.500 Â± 871.521 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_adaptive-mutex thrpt 25 23613.773 Â± 8465.660 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 16768.172 Â± 5618.489 ops/s ComparatorBenchmarks.put java_bytewise_direct_reused-64_thread-local thrpt 25 23921.164 Â± 8734.742 ops/s ComparatorBenchmarks.put java_bytewise_non-direct_no-reuse thrpt 25 17899.684 Â± 839.679 ops/s ComparatorBenchmarks.put java_bytewise_direct_no-reuse thrpt 25 22148.316 Â± 1215.527 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_adaptive-mutex thrpt 25 11311.126 Â± 820.602 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_non-adaptive-mutex thrpt 25 11421.311 Â± 807.210 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_reused-64_thread-local thrpt 25 11554.005 Â± 960.556 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_adaptive-mutex thrpt 25 22960.523 Â± 1673.421 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_non-adaptive-mutex thrpt 25 18293.317 Â± 1434.601 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_reused-64_thread-local thrpt 25 24479.361 Â± 2157.306 ops/s ComparatorBenchmarks.put java_reverse_bytewise_non-direct_no-reuse thrpt 25 7942.286 Â± 626.170 ops/s ComparatorBenchmarks.put java_reverse_bytewise_direct_no-reuse thrpt 25 11781.955 Â± 1019.843 ops/s ``` Pull Request resolved: Differential Revision: D19331064 Pulled By: pdillinger fbshipit-source-id: 1f3b794e6a14162b2c3ffb943e8c0e64a0c03738/"
,,0.1789,rocksdb,JNI direct buffer support for basic operations (#2283) Summary: It is very useful to support direct ByteBuffers in Java. It allows to have zero memory copy and some serializers are using that directly so one do not need to create byte[] array for it. This change also contains some fixes for Windows JNI build. Pull Request resolved: Differential Revision: D19834971 Pulled By: pdillinger fbshipit-source-id: 44173aa02afc9836c5498c592fd1ea95b6086e8e/
,,0.1757,rocksdb,JNI direct buffer support for basic operations (#2283) Summary: It is very useful to support direct ByteBuffers in Java. It allows to have zero memory copy and some serializers are using that directly so one do not need to create byte[] array for it. This change also contains some fixes for Windows JNI build. Pull Request resolved: Differential Revision: D19834971 Pulled By: pdillinger fbshipit-source-id: 44173aa02afc9836c5498c592fd1ea95b6086e8e/
,,0.1822,rocksdb,JNI direct buffer support for basic operations (#2283) Summary: It is very useful to support direct ByteBuffers in Java. It allows to have zero memory copy and some serializers are using that directly so one do not need to create byte[] array for it. This change also contains some fixes for Windows JNI build. Pull Request resolved: Differential Revision: D19834971 Pulled By: pdillinger fbshipit-source-id: 44173aa02afc9836c5498c592fd1ea95b6086e8e/
,,0.1708,rocksdb,JNI direct buffer support for basic operations (#2283) Summary: It is very useful to support direct ByteBuffers in Java. It allows to have zero memory copy and some serializers are using that directly so one do not need to create byte[] array for it. This change also contains some fixes for Windows JNI build. Pull Request resolved: Differential Revision: D19834971 Pulled By: pdillinger fbshipit-source-id: 44173aa02afc9836c5498c592fd1ea95b6086e8e/
,,0.1789,rocksdb,JNI direct buffer support for basic operations (#2283) Summary: It is very useful to support direct ByteBuffers in Java. It allows to have zero memory copy and some serializers are using that directly so one do not need to create byte[] array for it. This change also contains some fixes for Windows JNI build. Pull Request resolved: Differential Revision: D19834971 Pulled By: pdillinger fbshipit-source-id: 44173aa02afc9836c5498c592fd1ea95b6086e8e/
,,0.1542,rocksdb,Add Java API for rocksdb::CancelAllBackgroundWork() (#6657) Summary: Adding a Java API for rocksdb::CancelAllBackgroundWork() so that the user can call this (when required) before closing the DB. This is to **prevent the crashes when manual compaction is running and the user decides to close the DB**. Calling CancelAllBackgroundWork() seems to be the recommended way to make sure that its safe to close the DB (according to RocksDB FAQ: Pull Request resolved: Reviewed By: cheng-chang Differential Revision: D20896395 Pulled By: pdillinger fbshipit-source-id: 8a8208c10093db09bd35db9af362211897870d96/JNI direct buffer support for basic operations (#2283) Summary: It is very useful to support direct ByteBuffers in Java. It allows to have zero memory copy and some serializers are using that directly so one do not need to create byte[] array for it. This change also contains some fixes for Windows JNI build. Pull Request resolved: Differential Revision: D19834971 Pulled By: pdillinger fbshipit-source-id: 44173aa02afc9836c5498c592fd1ea95b6086e8e/
,,0.1855,rocksdb,JNI direct buffer support for basic operations (#2283) Summary: It is very useful to support direct ByteBuffers in Java. It allows to have zero memory copy and some serializers are using that directly so one do not need to create byte[] array for it. This change also contains some fixes for Windows JNI build. Pull Request resolved: Differential Revision: D19834971 Pulled By: pdillinger fbshipit-source-id: 44173aa02afc9836c5498c592fd1ea95b6086e8e/
,,0.1789,rocksdb,JNI direct buffer support for basic operations (#2283) Summary: It is very useful to support direct ByteBuffers in Java. It allows to have zero memory copy and some serializers are using that directly so one do not need to create byte[] array for it. This change also contains some fixes for Windows JNI build. Pull Request resolved: Differential Revision: D19834971 Pulled By: pdillinger fbshipit-source-id: 44173aa02afc9836c5498c592fd1ea95b6086e8e/
,,0.1838,rocksdb,JNI direct buffer support for basic operations (#2283) Summary: It is very useful to support direct ByteBuffers in Java. It allows to have zero memory copy and some serializers are using that directly so one do not need to create byte[] array for it. This change also contains some fixes for Windows JNI build. Pull Request resolved: Differential Revision: D19834971 Pulled By: pdillinger fbshipit-source-id: 44173aa02afc9836c5498c592fd1ea95b6086e8e/
