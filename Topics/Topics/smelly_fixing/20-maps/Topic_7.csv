Topic_no,Keywords,Contrib,System,Text
7,"test, call, add, remove, change, native, support, default, case, session, nativecrypto, server, enable, handshake, cipher_suite, certificate, client, socket, pass, update",0.0744,conscrypt,Modifies OpenSSLSocketImpl to use a different lock for the instance count. It was using the same lock when use around native methods meaning that the finalizer could be blocked unnecessarily resulting in a VM crash./
,,0.1105,conscrypt,"Fix our SSLSession implementations to call valueUnbound on remove. This addresses the other problem from the following abandoned change: OpenSSLSessionImpl.getCreationTime and getLastAccessedTime. This addresses one part of this abandoned change from ursg: Ive also tidied up the native method names to use the harmony ""-Impl"" convention, removed useless methods that just forward to a native method, and removed dead code. Ive canonicalized some of the duplication too, but I want to go through the rest of out OpenSSL code before I really start trying to remove the duplication. When this is submitted, Ill fix the other (unrelated) bug the abandoned change addressed./"
,,0.785,conscrypt,"OpenSSLSocket handshake overhaul Summary: SSLSocket.startHandshake now generalized to handle both client and server handshaking as well as client/server role reversal handshake_cutthrough.patch is properly integrated with support delayed handshake completion now integrated with delayed updates to session cache and callbacks to HandshakeCompletedListeners Many fixes to SSLSession, which is the end product of the handshake Generally more RI and SSLEngine compliant behavior. More native code deletion through unification of client/server handshake, unification of client/server certificate chain verification, etc. More native code moved from various OpenSSL classes to cleaner NativeCrypto interfaces that more directly mirror the OpenSSL interfaces. Details: Delay SSL_new call until handshake time when we know for sure whether the OpenSSLSocket will be used in client or server mode and we can allocate the SSL_new from the apppriate client or server SSL_CTX used for session caching. Now that no SSL is allocated for an OpenSSLServerSocketImpl, store enabledProtocols and enabledCipherSuites in instance String arrays. Use new NativeCrypto.checkEnabled* methdods for argument validation. OpenSSLServerSocketImpl passes these enabled arrays to a new OpenSSLSocket constructor during accept(). Removed finalizer from OpenSSLServerSocketImpl since it no longer has any native storage and socket is already closed by PlainSocketImpl finalizer. X-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java OpenSSLSocket major overhaul to properly implement handshaking including switching client and server roles and session ID caching with handshake_cutthrough.patch. now implements NativeCrypto.HandshakeCompletedListeners for properly timed callback when handshake_cutthrough.patch delays handshake completion until first SSLSocket.getInputStream() read. similar enabledProtocols/enabledCipherSuites changes as OpenSSLServerSocketImpl since we need to store the state somewhere other than an openssl SSL struct until we are sure if we are doing a client or server handshake. added handshake completed field so that startHandshake can tell if handshake was completed during SSL_do_handshake or will be completed later by a call to HandshakeCompletedCallback.handshakeCompleted. removed nativegetsession as the equivalent value is now returned by SSL_do_handshake removed nativecipherauthenticationmethod as the value is now passed to verifyCertificateChain startHandshake is now a wrapper that forces a fully synchronous handshake startHandshake(boolean) is the the most changed method in this changelist, combinding both the old startHandshake logic, but also the OpenSSLSocketImpl.accept code as well. Notable differences from the old code: * now responsible for SSL_new * single code path for client/server handshaking dealing with SSLSession caching * now handles server certificate requests previously in OpenSSLServerSocketImpl, since a client can request to act like a server and therefore need to be able to make suck demands on its peer. * supports turning off handshake_cutthrough at a callers request via explicit call to startHandshake() * certificate verification happens during an upcall from openssl during SSL_do_handshake to verifyCertificateChain for both client and server cases. previously there was not quite right upcall support on the server side and post-handshake checking on the client, which did not allow for a proper alert to be sent to the peer informing them of the issue, which the RI and SSLEngine code do. * Similarly, setEnableSessionCreation(false) did not send an alert to the peer as the RI and SSLEngine code in the client case. In the server case, nothing was previously done. * The use of local certificates was not determined from introspecting the SSL struct post-handshake. This is now partially implemented and will be completed in a later change. SSLSocket.{shutdownInput,shutdownOutput} are now restored to the proper behavior of throwing UnsupportedOperationException. Gutted OpenSSLSocketImpl finalizer. The comment explains in detail the trouble of having the finalizer do anything more than touch its the instances own state due to unpredictable order of finalization and the future possability of parallel finalization. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java SSLSession fixes Made OpenSSLSessionImpl.sessionContext non-final so it could be nulled by SSLSession.invalidate to match RI behavior. As noted in AbstractSessionContext discussion, removed OpenSSLSessionImpl constructor that took SSLParameters, instead we take the possibly null localCertificates directly. OpenSSLSessionImpl.getLocalCertificates now simply returns the localCertificates member variable instead of incorrectly trying to query the KeyManager for certificates that may not have been used. OpenSSLSessionImpl now caches its native ID to avoid numerious native calls but also now provides as resetId which will update the cache when a delayed handshake happens due to the handshake_cutthrough.patch Fixed bug in getPeerPrincipal that it wasnt calling getPeerCertificates to initialize peerCertificates field. freeImpl is now public static in preparation for move to NativeCrypto. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java The old SSLSessionImpl class that is still used for representing the invalid session now returns isValid false and getProtocol ""NONE"" to match the RI. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLSessionImpl.java NativeCrypto improvements Adding NativeCrypto.SSL_{get,set,clear}_mode similar to NativeCrypto.SSL_{get,set,clear}_options along with SSL_MODE_HANDSHAKE_CUTTHROUGH constant which is used to explicitly disable/enable the Android handshake_cutthrough.patch behavior. Added missing NativeCrypto.SSL_clear_options and used to properly implement NativeCrypto.setEnabledProtocols. Added NativeCrypto.checkEnabledProtocols and NativeCrypto.checkEnabledCipherSuites helpers to implement exception compatability with the RI. While some of this code is refactored from existing NativeCrypto code, it is now also used by OpenSSLServerSocketImpl and OpenSSLSocketImpl which maintain their own String[]s of what is enabled until startHandshake time. (see below) Changed NativeCrypto.findSuite to use foreach style loop for clarity. Moved OpenSSLServerSocketImpl nativesetclientauth and SSL_VERIFY_* constants to NativeCrypto.SSL_set_verify Added NativeCrypto.SSL_set_session based on part of old OpenSSLSocketImpl.nativeconnect Added NativeCrypto.SSL_set_session_creation_enabled to properly implement SSLSocket.setEnableSessionCreation(false) which uses new external/openssl/patches/jsse.patch functionality. New NativeCrypto.SSL_do_handshake consolidates OpenSSLSocketImpl.{nativeconnect, nativeaccept} while properly implementing SSLSocket.setUseClientMode(false) for clients and SSLSocket.setUseClientMode(true) for servers. New NativeCrypto.SSL_get_certificate is determine if local certificate requested by peer. While functional, currently NativeCrypto.SSL_new always sets a value via SSL_use_certificate instead of relying on a callback set via SSL_CTX_set_client_cert_cb. Changed NativeCrypto.CertificateChainVerifier.verifyCertificateChain to throw a checked CertificateException to match TrustManager.{checkServerTrusted, checkClientTrusted}. It also takes an authMethod so avoid the need to call the old OpenSSLSocketImpl.nativecipherauthenticationmethod. Added NativeCrypto.HandshakeCompletedCallback which has its handshakeCompleted method called from OpenSSL when the now delayed handshake_cutthrough.patch handshake is completed so SSLSession caching can be delayed until a session ID is available and to provide a better time for HandshakeCompletedListeners to be notified. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_NativeCrypto.cpp Some other changes specific to the naitve side of the code Added JNITRACE calls (enabled at compile time with JNI_TRACE) for future debugging. throw SSLException subclass of IOException instead IOException itself for better RI compatability x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_NativeCrypto.cpp changed from old struct app_data to new class AppData at enhs request Remove dubious usage of SSLParameters within AbstractSessionContext to pass through to OpenSSLSessionImpl constructor for use in calling getLocalCertificates for sessions created from a byte array with AbstractSessionContext.toSession. Our AbstractSessionContext.toBytes doesnt currently include the local certificates in its output, so it cannot be expected to have in toSession. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/AbstractSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLParameters.java Test maintenance openssl 1.0.0 adds support for RFC 4507 session tickets which remove the need for server side session state. These tests needed to be updated for this new behavior. If IS_RI is true, they still follow the old behavior. luni/src/test/java/javax/net/ssl/SSLSessionContextTest.java luni/src/test/java/javax/net/ssl/SSLSessionTest.java luni/src/test/java/javax/net/ssl/SSLSocketTest.java Update KnownFailures and add specific comments at point of failure about what remains to be fixed. luni/src/test/java/javax/net/ssl/SSLSessionTest.java Added tests to cover the use of standard cipher suite names. Historically Android has used OpenSSL string constants for cipher suite names, but JSSE actually specifies supported and expected names. luni/src/test/java/javax/net/ssl/SSLSocketFactoryTest.java luni/src/test/java/javax/net/ssl/SSLSocketTest.java Create new support/src/test/java/javax/net/ssl with old Helper support code pulled from javax.net.ssl tests: SSLContextTest.Helper TestSSLContext SSLSocketTest.Helper TestSSLSocketPair SSLSessionTest.Helper TestSSLSessions Also added new StandardNames here, which contains a collection of expected constants for test validation. luni/src/test/java/javax/net/ssl/SSLContextTest.java luni/src/test/java/javax/net/ssl/SSLSocketTest.java luni/src/test/java/javax/net/ssl/SSLSessionTest.java support/src/test/java/javax/net/ssl/TestSSLContext.java support/src/test/java/javax/net/ssl/TestSSLSocketPair.java support/src/test/java/javax/net/ssl/TestSSLSessions.java support/src/test/java/javax/net/ssl/StandardNames.java Removed some now fixed KnownFailures and unneeded IS_RI code. Marked some [Un]KnownFailures where exceptions are thrown and visible in the output but arent correctly causing the test to fail. Fixed assertNonNull to assertTrue in test_SSLSocketTest_Test_create. Added stress_test_SSLSocketTest_Test_create to track down test flakiness, leading to rewrite of SSLSocket finalization. luni/src/test/java/javax/net/ssl/SSLSocketTest.java Reenable javax.net.ssl.AllTests now that it is does not hang luni/src/test/java/tests/AllTests.java Improve error messages while debugging overflow problem. Added new assert when debugging new RFC 4507 behavior. Removed KnownFailure annotation for now working test case. x-net/src/test/java/tests/api/javax/net/ssl/SSLSessionTest.java Client code changes Now that startHandshake implies synchronous vs Androids default async handshake, remove unneeded explict calls to SSLSocket.startHandshake luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ Removed IBM 1.4.x codepath that involved startHandshake x-net/src/main/java/javax/net/ssl/DefaultHostnameVerifier.java Unrelated Remove unneed SSLSocket.setUseClientMode while removing unneeded SSLSocket.startHandshake luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ Removed warnings due to now missing modules in classpath run-core-tests Change-Id: I6e149ae259b3feccdfb0673209c85cfeb60befc8/"
,,0.7906,conscrypt,"OpenSSLSocket handshake overhaul Summary: SSLSocket.startHandshake now generalized to handle both client and server handshaking as well as client/server role reversal handshake_cutthrough.patch is properly integrated with support delayed handshake completion now integrated with delayed updates to session cache and callbacks to HandshakeCompletedListeners Many fixes to SSLSession, which is the end product of the handshake Generally more RI and SSLEngine compliant behavior. More native code deletion through unification of client/server handshake, unification of client/server certificate chain verification, etc. More native code moved from various OpenSSL classes to cleaner NativeCrypto interfaces that more directly mirror the OpenSSL interfaces. Details: Delay SSL_new call until handshake time when we know for sure whether the OpenSSLSocket will be used in client or server mode and we can allocate the SSL_new from the apppriate client or server SSL_CTX used for session caching. Now that no SSL is allocated for an OpenSSLServerSocketImpl, store enabledProtocols and enabledCipherSuites in instance String arrays. Use new NativeCrypto.checkEnabled* methdods for argument validation. OpenSSLServerSocketImpl passes these enabled arrays to a new OpenSSLSocket constructor during accept(). Removed finalizer from OpenSSLServerSocketImpl since it no longer has any native storage and socket is already closed by PlainSocketImpl finalizer. X-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java OpenSSLSocket major overhaul to properly implement handshaking including switching client and server roles and session ID caching with handshake_cutthrough.patch. now implements NativeCrypto.HandshakeCompletedListeners for properly timed callback when handshake_cutthrough.patch delays handshake completion until first SSLSocket.getInputStream() read. similar enabledProtocols/enabledCipherSuites changes as OpenSSLServerSocketImpl since we need to store the state somewhere other than an openssl SSL struct until we are sure if we are doing a client or server handshake. added handshake completed field so that startHandshake can tell if handshake was completed during SSL_do_handshake or will be completed later by a call to HandshakeCompletedCallback.handshakeCompleted. removed nativegetsession as the equivalent value is now returned by SSL_do_handshake removed nativecipherauthenticationmethod as the value is now passed to verifyCertificateChain startHandshake is now a wrapper that forces a fully synchronous handshake startHandshake(boolean) is the the most changed method in this changelist, combinding both the old startHandshake logic, but also the OpenSSLSocketImpl.accept code as well. Notable differences from the old code: * now responsible for SSL_new * single code path for client/server handshaking dealing with SSLSession caching * now handles server certificate requests previously in OpenSSLServerSocketImpl, since a client can request to act like a server and therefore need to be able to make suck demands on its peer. * supports turning off handshake_cutthrough at a callers request via explicit call to startHandshake() * certificate verification happens during an upcall from openssl during SSL_do_handshake to verifyCertificateChain for both client and server cases. previously there was not quite right upcall support on the server side and post-handshake checking on the client, which did not allow for a proper alert to be sent to the peer informing them of the issue, which the RI and SSLEngine code do. * Similarly, setEnableSessionCreation(false) did not send an alert to the peer as the RI and SSLEngine code in the client case. In the server case, nothing was previously done. * The use of local certificates was not determined from introspecting the SSL struct post-handshake. This is now partially implemented and will be completed in a later change. SSLSocket.{shutdownInput,shutdownOutput} are now restored to the proper behavior of throwing UnsupportedOperationException. Gutted OpenSSLSocketImpl finalizer. The comment explains in detail the trouble of having the finalizer do anything more than touch its the instances own state due to unpredictable order of finalization and the future possability of parallel finalization. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java SSLSession fixes Made OpenSSLSessionImpl.sessionContext non-final so it could be nulled by SSLSession.invalidate to match RI behavior. As noted in AbstractSessionContext discussion, removed OpenSSLSessionImpl constructor that took SSLParameters, instead we take the possibly null localCertificates directly. OpenSSLSessionImpl.getLocalCertificates now simply returns the localCertificates member variable instead of incorrectly trying to query the KeyManager for certificates that may not have been used. OpenSSLSessionImpl now caches its native ID to avoid numerious native calls but also now provides as resetId which will update the cache when a delayed handshake happens due to the handshake_cutthrough.patch Fixed bug in getPeerPrincipal that it wasnt calling getPeerCertificates to initialize peerCertificates field. freeImpl is now public static in preparation for move to NativeCrypto. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java The old SSLSessionImpl class that is still used for representing the invalid session now returns isValid false and getProtocol ""NONE"" to match the RI. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLSessionImpl.java NativeCrypto improvements Adding NativeCrypto.SSL_{get,set,clear}_mode similar to NativeCrypto.SSL_{get,set,clear}_options along with SSL_MODE_HANDSHAKE_CUTTHROUGH constant which is used to explicitly disable/enable the Android handshake_cutthrough.patch behavior. Added missing NativeCrypto.SSL_clear_options and used to properly implement NativeCrypto.setEnabledProtocols. Added NativeCrypto.checkEnabledProtocols and NativeCrypto.checkEnabledCipherSuites helpers to implement exception compatability with the RI. While some of this code is refactored from existing NativeCrypto code, it is now also used by OpenSSLServerSocketImpl and OpenSSLSocketImpl which maintain their own String[]s of what is enabled until startHandshake time. (see below) Changed NativeCrypto.findSuite to use foreach style loop for clarity. Moved OpenSSLServerSocketImpl nativesetclientauth and SSL_VERIFY_* constants to NativeCrypto.SSL_set_verify Added NativeCrypto.SSL_set_session based on part of old OpenSSLSocketImpl.nativeconnect Added NativeCrypto.SSL_set_session_creation_enabled to properly implement SSLSocket.setEnableSessionCreation(false) which uses new external/openssl/patches/jsse.patch functionality. New NativeCrypto.SSL_do_handshake consolidates OpenSSLSocketImpl.{nativeconnect, nativeaccept} while properly implementing SSLSocket.setUseClientMode(false) for clients and SSLSocket.setUseClientMode(true) for servers. New NativeCrypto.SSL_get_certificate is determine if local certificate requested by peer. While functional, currently NativeCrypto.SSL_new always sets a value via SSL_use_certificate instead of relying on a callback set via SSL_CTX_set_client_cert_cb. Changed NativeCrypto.CertificateChainVerifier.verifyCertificateChain to throw a checked CertificateException to match TrustManager.{checkServerTrusted, checkClientTrusted}. It also takes an authMethod so avoid the need to call the old OpenSSLSocketImpl.nativecipherauthenticationmethod. Added NativeCrypto.HandshakeCompletedCallback which has its handshakeCompleted method called from OpenSSL when the now delayed handshake_cutthrough.patch handshake is completed so SSLSession caching can be delayed until a session ID is available and to provide a better time for HandshakeCompletedListeners to be notified. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_NativeCrypto.cpp Some other changes specific to the naitve side of the code Added JNITRACE calls (enabled at compile time with JNI_TRACE) for future debugging. throw SSLException subclass of IOException instead IOException itself for better RI compatability x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_NativeCrypto.cpp changed from old struct app_data to new class AppData at enhs request Remove dubious usage of SSLParameters within AbstractSessionContext to pass through to OpenSSLSessionImpl constructor for use in calling getLocalCertificates for sessions created from a byte array with AbstractSessionContext.toSession. Our AbstractSessionContext.toBytes doesnt currently include the local certificates in its output, so it cannot be expected to have in toSession. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/AbstractSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLParameters.java Test maintenance openssl 1.0.0 adds support for RFC 4507 session tickets which remove the need for server side session state. These tests needed to be updated for this new behavior. If IS_RI is true, they still follow the old behavior. luni/src/test/java/javax/net/ssl/SSLSessionContextTest.java luni/src/test/java/javax/net/ssl/SSLSessionTest.java luni/src/test/java/javax/net/ssl/SSLSocketTest.java Update KnownFailures and add specific comments at point of failure about what remains to be fixed. luni/src/test/java/javax/net/ssl/SSLSessionTest.java Added tests to cover the use of standard cipher suite names. Historically Android has used OpenSSL string constants for cipher suite names, but JSSE actually specifies supported and expected names. luni/src/test/java/javax/net/ssl/SSLSocketFactoryTest.java luni/src/test/java/javax/net/ssl/SSLSocketTest.java Create new support/src/test/java/javax/net/ssl with old Helper support code pulled from javax.net.ssl tests: SSLContextTest.Helper TestSSLContext SSLSocketTest.Helper TestSSLSocketPair SSLSessionTest.Helper TestSSLSessions Also added new StandardNames here, which contains a collection of expected constants for test validation. luni/src/test/java/javax/net/ssl/SSLContextTest.java luni/src/test/java/javax/net/ssl/SSLSocketTest.java luni/src/test/java/javax/net/ssl/SSLSessionTest.java support/src/test/java/javax/net/ssl/TestSSLContext.java support/src/test/java/javax/net/ssl/TestSSLSocketPair.java support/src/test/java/javax/net/ssl/TestSSLSessions.java support/src/test/java/javax/net/ssl/StandardNames.java Removed some now fixed KnownFailures and unneeded IS_RI code. Marked some [Un]KnownFailures where exceptions are thrown and visible in the output but arent correctly causing the test to fail. Fixed assertNonNull to assertTrue in test_SSLSocketTest_Test_create. Added stress_test_SSLSocketTest_Test_create to track down test flakiness, leading to rewrite of SSLSocket finalization. luni/src/test/java/javax/net/ssl/SSLSocketTest.java Reenable javax.net.ssl.AllTests now that it is does not hang luni/src/test/java/tests/AllTests.java Improve error messages while debugging overflow problem. Added new assert when debugging new RFC 4507 behavior. Removed KnownFailure annotation for now working test case. x-net/src/test/java/tests/api/javax/net/ssl/SSLSessionTest.java Client code changes Now that startHandshake implies synchronous vs Androids default async handshake, remove unneeded explict calls to SSLSocket.startHandshake luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ Removed IBM 1.4.x codepath that involved startHandshake x-net/src/main/java/javax/net/ssl/DefaultHostnameVerifier.java Unrelated Remove unneed SSLSocket.setUseClientMode while removing unneeded SSLSocket.startHandshake luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ Removed warnings due to now missing modules in classpath run-core-tests Change-Id: I6e149ae259b3feccdfb0673209c85cfeb60befc8/"
,,0.7881,conscrypt,"OpenSSLSocket handshake overhaul Summary: SSLSocket.startHandshake now generalized to handle both client and server handshaking as well as client/server role reversal handshake_cutthrough.patch is properly integrated with support delayed handshake completion now integrated with delayed updates to session cache and callbacks to HandshakeCompletedListeners Many fixes to SSLSession, which is the end product of the handshake Generally more RI and SSLEngine compliant behavior. More native code deletion through unification of client/server handshake, unification of client/server certificate chain verification, etc. More native code moved from various OpenSSL classes to cleaner NativeCrypto interfaces that more directly mirror the OpenSSL interfaces. Details: Delay SSL_new call until handshake time when we know for sure whether the OpenSSLSocket will be used in client or server mode and we can allocate the SSL_new from the apppriate client or server SSL_CTX used for session caching. Now that no SSL is allocated for an OpenSSLServerSocketImpl, store enabledProtocols and enabledCipherSuites in instance String arrays. Use new NativeCrypto.checkEnabled* methdods for argument validation. OpenSSLServerSocketImpl passes these enabled arrays to a new OpenSSLSocket constructor during accept(). Removed finalizer from OpenSSLServerSocketImpl since it no longer has any native storage and socket is already closed by PlainSocketImpl finalizer. X-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java OpenSSLSocket major overhaul to properly implement handshaking including switching client and server roles and session ID caching with handshake_cutthrough.patch. now implements NativeCrypto.HandshakeCompletedListeners for properly timed callback when handshake_cutthrough.patch delays handshake completion until first SSLSocket.getInputStream() read. similar enabledProtocols/enabledCipherSuites changes as OpenSSLServerSocketImpl since we need to store the state somewhere other than an openssl SSL struct until we are sure if we are doing a client or server handshake. added handshake completed field so that startHandshake can tell if handshake was completed during SSL_do_handshake or will be completed later by a call to HandshakeCompletedCallback.handshakeCompleted. removed nativegetsession as the equivalent value is now returned by SSL_do_handshake removed nativecipherauthenticationmethod as the value is now passed to verifyCertificateChain startHandshake is now a wrapper that forces a fully synchronous handshake startHandshake(boolean) is the the most changed method in this changelist, combinding both the old startHandshake logic, but also the OpenSSLSocketImpl.accept code as well. Notable differences from the old code: * now responsible for SSL_new * single code path for client/server handshaking dealing with SSLSession caching * now handles server certificate requests previously in OpenSSLServerSocketImpl, since a client can request to act like a server and therefore need to be able to make suck demands on its peer. * supports turning off handshake_cutthrough at a callers request via explicit call to startHandshake() * certificate verification happens during an upcall from openssl during SSL_do_handshake to verifyCertificateChain for both client and server cases. previously there was not quite right upcall support on the server side and post-handshake checking on the client, which did not allow for a proper alert to be sent to the peer informing them of the issue, which the RI and SSLEngine code do. * Similarly, setEnableSessionCreation(false) did not send an alert to the peer as the RI and SSLEngine code in the client case. In the server case, nothing was previously done. * The use of local certificates was not determined from introspecting the SSL struct post-handshake. This is now partially implemented and will be completed in a later change. SSLSocket.{shutdownInput,shutdownOutput} are now restored to the proper behavior of throwing UnsupportedOperationException. Gutted OpenSSLSocketImpl finalizer. The comment explains in detail the trouble of having the finalizer do anything more than touch its the instances own state due to unpredictable order of finalization and the future possability of parallel finalization. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java SSLSession fixes Made OpenSSLSessionImpl.sessionContext non-final so it could be nulled by SSLSession.invalidate to match RI behavior. As noted in AbstractSessionContext discussion, removed OpenSSLSessionImpl constructor that took SSLParameters, instead we take the possibly null localCertificates directly. OpenSSLSessionImpl.getLocalCertificates now simply returns the localCertificates member variable instead of incorrectly trying to query the KeyManager for certificates that may not have been used. OpenSSLSessionImpl now caches its native ID to avoid numerious native calls but also now provides as resetId which will update the cache when a delayed handshake happens due to the handshake_cutthrough.patch Fixed bug in getPeerPrincipal that it wasnt calling getPeerCertificates to initialize peerCertificates field. freeImpl is now public static in preparation for move to NativeCrypto. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java The old SSLSessionImpl class that is still used for representing the invalid session now returns isValid false and getProtocol ""NONE"" to match the RI. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLSessionImpl.java NativeCrypto improvements Adding NativeCrypto.SSL_{get,set,clear}_mode similar to NativeCrypto.SSL_{get,set,clear}_options along with SSL_MODE_HANDSHAKE_CUTTHROUGH constant which is used to explicitly disable/enable the Android handshake_cutthrough.patch behavior. Added missing NativeCrypto.SSL_clear_options and used to properly implement NativeCrypto.setEnabledProtocols. Added NativeCrypto.checkEnabledProtocols and NativeCrypto.checkEnabledCipherSuites helpers to implement exception compatability with the RI. While some of this code is refactored from existing NativeCrypto code, it is now also used by OpenSSLServerSocketImpl and OpenSSLSocketImpl which maintain their own String[]s of what is enabled until startHandshake time. (see below) Changed NativeCrypto.findSuite to use foreach style loop for clarity. Moved OpenSSLServerSocketImpl nativesetclientauth and SSL_VERIFY_* constants to NativeCrypto.SSL_set_verify Added NativeCrypto.SSL_set_session based on part of old OpenSSLSocketImpl.nativeconnect Added NativeCrypto.SSL_set_session_creation_enabled to properly implement SSLSocket.setEnableSessionCreation(false) which uses new external/openssl/patches/jsse.patch functionality. New NativeCrypto.SSL_do_handshake consolidates OpenSSLSocketImpl.{nativeconnect, nativeaccept} while properly implementing SSLSocket.setUseClientMode(false) for clients and SSLSocket.setUseClientMode(true) for servers. New NativeCrypto.SSL_get_certificate is determine if local certificate requested by peer. While functional, currently NativeCrypto.SSL_new always sets a value via SSL_use_certificate instead of relying on a callback set via SSL_CTX_set_client_cert_cb. Changed NativeCrypto.CertificateChainVerifier.verifyCertificateChain to throw a checked CertificateException to match TrustManager.{checkServerTrusted, checkClientTrusted}. It also takes an authMethod so avoid the need to call the old OpenSSLSocketImpl.nativecipherauthenticationmethod. Added NativeCrypto.HandshakeCompletedCallback which has its handshakeCompleted method called from OpenSSL when the now delayed handshake_cutthrough.patch handshake is completed so SSLSession caching can be delayed until a session ID is available and to provide a better time for HandshakeCompletedListeners to be notified. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_NativeCrypto.cpp Some other changes specific to the naitve side of the code Added JNITRACE calls (enabled at compile time with JNI_TRACE) for future debugging. throw SSLException subclass of IOException instead IOException itself for better RI compatability x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_NativeCrypto.cpp changed from old struct app_data to new class AppData at enhs request Remove dubious usage of SSLParameters within AbstractSessionContext to pass through to OpenSSLSessionImpl constructor for use in calling getLocalCertificates for sessions created from a byte array with AbstractSessionContext.toSession. Our AbstractSessionContext.toBytes doesnt currently include the local certificates in its output, so it cannot be expected to have in toSession. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/AbstractSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLParameters.java Test maintenance openssl 1.0.0 adds support for RFC 4507 session tickets which remove the need for server side session state. These tests needed to be updated for this new behavior. If IS_RI is true, they still follow the old behavior. luni/src/test/java/javax/net/ssl/SSLSessionContextTest.java luni/src/test/java/javax/net/ssl/SSLSessionTest.java luni/src/test/java/javax/net/ssl/SSLSocketTest.java Update KnownFailures and add specific comments at point of failure about what remains to be fixed. luni/src/test/java/javax/net/ssl/SSLSessionTest.java Added tests to cover the use of standard cipher suite names. Historically Android has used OpenSSL string constants for cipher suite names, but JSSE actually specifies supported and expected names. luni/src/test/java/javax/net/ssl/SSLSocketFactoryTest.java luni/src/test/java/javax/net/ssl/SSLSocketTest.java Create new support/src/test/java/javax/net/ssl with old Helper support code pulled from javax.net.ssl tests: SSLContextTest.Helper TestSSLContext SSLSocketTest.Helper TestSSLSocketPair SSLSessionTest.Helper TestSSLSessions Also added new StandardNames here, which contains a collection of expected constants for test validation. luni/src/test/java/javax/net/ssl/SSLContextTest.java luni/src/test/java/javax/net/ssl/SSLSocketTest.java luni/src/test/java/javax/net/ssl/SSLSessionTest.java support/src/test/java/javax/net/ssl/TestSSLContext.java support/src/test/java/javax/net/ssl/TestSSLSocketPair.java support/src/test/java/javax/net/ssl/TestSSLSessions.java support/src/test/java/javax/net/ssl/StandardNames.java Removed some now fixed KnownFailures and unneeded IS_RI code. Marked some [Un]KnownFailures where exceptions are thrown and visible in the output but arent correctly causing the test to fail. Fixed assertNonNull to assertTrue in test_SSLSocketTest_Test_create. Added stress_test_SSLSocketTest_Test_create to track down test flakiness, leading to rewrite of SSLSocket finalization. luni/src/test/java/javax/net/ssl/SSLSocketTest.java Reenable javax.net.ssl.AllTests now that it is does not hang luni/src/test/java/tests/AllTests.java Improve error messages while debugging overflow problem. Added new assert when debugging new RFC 4507 behavior. Removed KnownFailure annotation for now working test case. x-net/src/test/java/tests/api/javax/net/ssl/SSLSessionTest.java Client code changes Now that startHandshake implies synchronous vs Androids default async handshake, remove unneeded explict calls to SSLSocket.startHandshake luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ Removed IBM 1.4.x codepath that involved startHandshake x-net/src/main/java/javax/net/ssl/DefaultHostnameVerifier.java Unrelated Remove unneed SSLSocket.setUseClientMode while removing unneeded SSLSocket.startHandshake luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ Removed warnings due to now missing modules in classpath run-core-tests Change-Id: I6e149ae259b3feccdfb0673209c85cfeb60befc8/"
,,0.7897,conscrypt,"OpenSSLSocket handshake overhaul Summary: SSLSocket.startHandshake now generalized to handle both client and server handshaking as well as client/server role reversal handshake_cutthrough.patch is properly integrated with support delayed handshake completion now integrated with delayed updates to session cache and callbacks to HandshakeCompletedListeners Many fixes to SSLSession, which is the end product of the handshake Generally more RI and SSLEngine compliant behavior. More native code deletion through unification of client/server handshake, unification of client/server certificate chain verification, etc. More native code moved from various OpenSSL classes to cleaner NativeCrypto interfaces that more directly mirror the OpenSSL interfaces. Details: Delay SSL_new call until handshake time when we know for sure whether the OpenSSLSocket will be used in client or server mode and we can allocate the SSL_new from the apppriate client or server SSL_CTX used for session caching. Now that no SSL is allocated for an OpenSSLServerSocketImpl, store enabledProtocols and enabledCipherSuites in instance String arrays. Use new NativeCrypto.checkEnabled* methdods for argument validation. OpenSSLServerSocketImpl passes these enabled arrays to a new OpenSSLSocket constructor during accept(). Removed finalizer from OpenSSLServerSocketImpl since it no longer has any native storage and socket is already closed by PlainSocketImpl finalizer. X-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java OpenSSLSocket major overhaul to properly implement handshaking including switching client and server roles and session ID caching with handshake_cutthrough.patch. now implements NativeCrypto.HandshakeCompletedListeners for properly timed callback when handshake_cutthrough.patch delays handshake completion until first SSLSocket.getInputStream() read. similar enabledProtocols/enabledCipherSuites changes as OpenSSLServerSocketImpl since we need to store the state somewhere other than an openssl SSL struct until we are sure if we are doing a client or server handshake. added handshake completed field so that startHandshake can tell if handshake was completed during SSL_do_handshake or will be completed later by a call to HandshakeCompletedCallback.handshakeCompleted. removed nativegetsession as the equivalent value is now returned by SSL_do_handshake removed nativecipherauthenticationmethod as the value is now passed to verifyCertificateChain startHandshake is now a wrapper that forces a fully synchronous handshake startHandshake(boolean) is the the most changed method in this changelist, combinding both the old startHandshake logic, but also the OpenSSLSocketImpl.accept code as well. Notable differences from the old code: * now responsible for SSL_new * single code path for client/server handshaking dealing with SSLSession caching * now handles server certificate requests previously in OpenSSLServerSocketImpl, since a client can request to act like a server and therefore need to be able to make suck demands on its peer. * supports turning off handshake_cutthrough at a callers request via explicit call to startHandshake() * certificate verification happens during an upcall from openssl during SSL_do_handshake to verifyCertificateChain for both client and server cases. previously there was not quite right upcall support on the server side and post-handshake checking on the client, which did not allow for a proper alert to be sent to the peer informing them of the issue, which the RI and SSLEngine code do. * Similarly, setEnableSessionCreation(false) did not send an alert to the peer as the RI and SSLEngine code in the client case. In the server case, nothing was previously done. * The use of local certificates was not determined from introspecting the SSL struct post-handshake. This is now partially implemented and will be completed in a later change. SSLSocket.{shutdownInput,shutdownOutput} are now restored to the proper behavior of throwing UnsupportedOperationException. Gutted OpenSSLSocketImpl finalizer. The comment explains in detail the trouble of having the finalizer do anything more than touch its the instances own state due to unpredictable order of finalization and the future possability of parallel finalization. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java SSLSession fixes Made OpenSSLSessionImpl.sessionContext non-final so it could be nulled by SSLSession.invalidate to match RI behavior. As noted in AbstractSessionContext discussion, removed OpenSSLSessionImpl constructor that took SSLParameters, instead we take the possibly null localCertificates directly. OpenSSLSessionImpl.getLocalCertificates now simply returns the localCertificates member variable instead of incorrectly trying to query the KeyManager for certificates that may not have been used. OpenSSLSessionImpl now caches its native ID to avoid numerious native calls but also now provides as resetId which will update the cache when a delayed handshake happens due to the handshake_cutthrough.patch Fixed bug in getPeerPrincipal that it wasnt calling getPeerCertificates to initialize peerCertificates field. freeImpl is now public static in preparation for move to NativeCrypto. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java The old SSLSessionImpl class that is still used for representing the invalid session now returns isValid false and getProtocol ""NONE"" to match the RI. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLSessionImpl.java NativeCrypto improvements Adding NativeCrypto.SSL_{get,set,clear}_mode similar to NativeCrypto.SSL_{get,set,clear}_options along with SSL_MODE_HANDSHAKE_CUTTHROUGH constant which is used to explicitly disable/enable the Android handshake_cutthrough.patch behavior. Added missing NativeCrypto.SSL_clear_options and used to properly implement NativeCrypto.setEnabledProtocols. Added NativeCrypto.checkEnabledProtocols and NativeCrypto.checkEnabledCipherSuites helpers to implement exception compatability with the RI. While some of this code is refactored from existing NativeCrypto code, it is now also used by OpenSSLServerSocketImpl and OpenSSLSocketImpl which maintain their own String[]s of what is enabled until startHandshake time. (see below) Changed NativeCrypto.findSuite to use foreach style loop for clarity. Moved OpenSSLServerSocketImpl nativesetclientauth and SSL_VERIFY_* constants to NativeCrypto.SSL_set_verify Added NativeCrypto.SSL_set_session based on part of old OpenSSLSocketImpl.nativeconnect Added NativeCrypto.SSL_set_session_creation_enabled to properly implement SSLSocket.setEnableSessionCreation(false) which uses new external/openssl/patches/jsse.patch functionality. New NativeCrypto.SSL_do_handshake consolidates OpenSSLSocketImpl.{nativeconnect, nativeaccept} while properly implementing SSLSocket.setUseClientMode(false) for clients and SSLSocket.setUseClientMode(true) for servers. New NativeCrypto.SSL_get_certificate is determine if local certificate requested by peer. While functional, currently NativeCrypto.SSL_new always sets a value via SSL_use_certificate instead of relying on a callback set via SSL_CTX_set_client_cert_cb. Changed NativeCrypto.CertificateChainVerifier.verifyCertificateChain to throw a checked CertificateException to match TrustManager.{checkServerTrusted, checkClientTrusted}. It also takes an authMethod so avoid the need to call the old OpenSSLSocketImpl.nativecipherauthenticationmethod. Added NativeCrypto.HandshakeCompletedCallback which has its handshakeCompleted method called from OpenSSL when the now delayed handshake_cutthrough.patch handshake is completed so SSLSession caching can be delayed until a session ID is available and to provide a better time for HandshakeCompletedListeners to be notified. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_NativeCrypto.cpp Some other changes specific to the naitve side of the code Added JNITRACE calls (enabled at compile time with JNI_TRACE) for future debugging. throw SSLException subclass of IOException instead IOException itself for better RI compatability x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_NativeCrypto.cpp changed from old struct app_data to new class AppData at enhs request Remove dubious usage of SSLParameters within AbstractSessionContext to pass through to OpenSSLSessionImpl constructor for use in calling getLocalCertificates for sessions created from a byte array with AbstractSessionContext.toSession. Our AbstractSessionContext.toBytes doesnt currently include the local certificates in its output, so it cannot be expected to have in toSession. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/AbstractSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLParameters.java Test maintenance openssl 1.0.0 adds support for RFC 4507 session tickets which remove the need for server side session state. These tests needed to be updated for this new behavior. If IS_RI is true, they still follow the old behavior. luni/src/test/java/javax/net/ssl/SSLSessionContextTest.java luni/src/test/java/javax/net/ssl/SSLSessionTest.java luni/src/test/java/javax/net/ssl/SSLSocketTest.java Update KnownFailures and add specific comments at point of failure about what remains to be fixed. luni/src/test/java/javax/net/ssl/SSLSessionTest.java Added tests to cover the use of standard cipher suite names. Historically Android has used OpenSSL string constants for cipher suite names, but JSSE actually specifies supported and expected names. luni/src/test/java/javax/net/ssl/SSLSocketFactoryTest.java luni/src/test/java/javax/net/ssl/SSLSocketTest.java Create new support/src/test/java/javax/net/ssl with old Helper support code pulled from javax.net.ssl tests: SSLContextTest.Helper TestSSLContext SSLSocketTest.Helper TestSSLSocketPair SSLSessionTest.Helper TestSSLSessions Also added new StandardNames here, which contains a collection of expected constants for test validation. luni/src/test/java/javax/net/ssl/SSLContextTest.java luni/src/test/java/javax/net/ssl/SSLSocketTest.java luni/src/test/java/javax/net/ssl/SSLSessionTest.java support/src/test/java/javax/net/ssl/TestSSLContext.java support/src/test/java/javax/net/ssl/TestSSLSocketPair.java support/src/test/java/javax/net/ssl/TestSSLSessions.java support/src/test/java/javax/net/ssl/StandardNames.java Removed some now fixed KnownFailures and unneeded IS_RI code. Marked some [Un]KnownFailures where exceptions are thrown and visible in the output but arent correctly causing the test to fail. Fixed assertNonNull to assertTrue in test_SSLSocketTest_Test_create. Added stress_test_SSLSocketTest_Test_create to track down test flakiness, leading to rewrite of SSLSocket finalization. luni/src/test/java/javax/net/ssl/SSLSocketTest.java Reenable javax.net.ssl.AllTests now that it is does not hang luni/src/test/java/tests/AllTests.java Improve error messages while debugging overflow problem. Added new assert when debugging new RFC 4507 behavior. Removed KnownFailure annotation for now working test case. x-net/src/test/java/tests/api/javax/net/ssl/SSLSessionTest.java Client code changes Now that startHandshake implies synchronous vs Androids default async handshake, remove unneeded explict calls to SSLSocket.startHandshake luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ Removed IBM 1.4.x codepath that involved startHandshake x-net/src/main/java/javax/net/ssl/DefaultHostnameVerifier.java Unrelated Remove unneed SSLSocket.setUseClientMode while removing unneeded SSLSocket.startHandshake luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ Removed warnings due to now missing modules in classpath run-core-tests Change-Id: I6e149ae259b3feccdfb0673209c85cfeb60befc8/"
,,0.2921,conscrypt,"Scrub missing calls to super.finalize() Bug: 3024226 Change-Id: I6642cb9d4929ba72244529efe4ebdfa595ae4fa7/am e6b59c28: am 9e8d51c7: am a3de55dd: Implement OpenSSLMessageDigestJDK.clone and fix OpenSSLMessageDigestJDK.digest Merge commit e6b59c287ed3007d76167dd9741dc683f440ed2d into dalvik-dev * commit e6b59c287ed3007d76167dd9741dc683f440ed2d: Implement OpenSSLMessageDigestJDK.clone and fix OpenSSLMessageDigestJDK.digest/Implement OpenSSLMessageDigestJDK.clone and fix OpenSSLMessageDigestJDK.digest DigestInputStream2Test.test_onZ was failing because OpenSSLMessageDigestJDK did not implement Clonable Implementing Clonable required a new NativeCrypto.EVP_MD_CTX_copy method While adding NativeCrypto.EVP_MD_CTX_copy, noticed other methods were not properly named in NativeCrypto.EVP_MD_CTX_* convention. Converted rest of NativeCrypto.cpp to JNI_TRACE logging while debugging DigestOutputStreamTest.test_onZ was failing because OpenSSLMessageDigestJDK.digest did an engineReset Removing the engineReset revealed that digest() could not be called repeatedly on an OpenSSLMessageDigestJDK. Problem was that EVP_DigestFinal can only be called once per digest. Changed engineDigest implementation to use new EVP_MD_CTX_copy to create a temp EVP_MD_CTX which can be used to retreive the digest and then discarded. Bug: 2997405 Change-Id: Ie97c22be245911300d2e729e451a9c4afdb27937/"
,,0.5993,conscrypt,"Scrub missing calls to super.finalize() Bug: 3024226 Change-Id: I6642cb9d4929ba72244529efe4ebdfa595ae4fa7/Fix HttpsURLConnectionTest failures Focusing on HttpsURLConnectionTest.test_doOutput found a number of unrelated issues, all of which are addressed by this change: {HttpURLConnection,HttpsURLConnection}.connect not ignored on subsequent calls OpenSSLSessionImpl.{getPeerCertificates,getPeerCertificateChain} did not include client certificate OpenSSLSocketImpl.getSession did not skip handshake when SSLSession was already available Fix 3 test issues in HttpsURLConnectionTest Fix 2 test issues in NativeCryptoTest Details: HttpsURLConnectionTest tests (such as test_doOutput) that tried to call URLConnection.connect() at the end of the test were raising exception. The RI URLConnection.connect documentation says calls on connected URLConnections should be ignored. Use ""connected"" instead of ""connection null"" as reason to ignore ""connect"" luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ Converted one caller of getPeerCertificateChain to getPeerCertificates which is the new fast path. Track OpenSSLSessionImpl change to take ""java"" vs ""javax"" certificates. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/AbstractSessionContext.java Move SSL_SESSION_get_peer_cert_chain to be SSL_get_peer_cert_chain (similar to SSL_get_certificate). The problem was that SSL_SESSION_get_peer_cert_chain used SSL_get_peer_cert_chain which in the server case did not include the client cert itself, which required a call to SSL_get_peer_certificate, which needed the SSL instance pointer. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java luni/src/main/native/NativeCrypto.cpp Improved NativeCrypto_SSL_set_verify tracing luni/src/main/native/NativeCrypto.cpp As a side effect of the move to NativeCrypto.SSL_get_peer_certificate, it no longer made sense to lazily create the peer certificate chain since the SSLSession should not depend on a particular SSL instance. The peer chain is now passed in as part of the constructor and the peerCertifcates in the OpenSSLSession can be final (also made localCertificates final). Since peerCertifcates is the newew (java not javax) API and more commonly used, it is what is created from the native code, and peerCertificateChain is not derived from peerCertifcates instead of vice versa. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java Factored out code to used to create local certificate chain to from array of DER byte arrays into createCertChain so it can be reused to create peer certificate chain. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Fix OpenSSLSocketImpl.getSession to check for existing sslSession to and skip handshake, which was causing an exception if the connection had already been closed. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Fix test issues: Removed PrintStream wrapper of System.out which was causing vogar to lose output. Added null check in closeSocket, which can happen in timeout case. Removed use of InputStream.available which in OpenSSLSocket case returned 0, causing test to fail incorrectly. luni/src/test/java/org/apache/harmony/luni/tests/internal/net/www/protocol/ Updating to track change to SSL_get_peer_cert_chain. Also fixed some other unrelated test failures caused by IOException on shutdown and false start (aka SSL_MODE_HANDSHAKE_CUTTHROUGH) causing clientCallback.handshakeCompleted to be false. luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java Bug: b/2981767 Change-Id: Id083beb6496558296c2f74f51ab0970e158b23a9/"
,,0.6598,conscrypt,"Stop allocating empty arrays. Bug: 3166662 Change-Id: I151de373b2bf53786d19824336fa434c02b0b0e8/SSL* AppData should not hold onto JNI global references Summary: NativeCrypto.SSL_do_handshake stored JNI global references in its AppData instance for use in upcalls from OpenSSL that invoke Java callbacks. However, one of the references was to the SSLHandshakeCallbacks which in the common case of OpenSSLSocketImpl is the OpenSSLSocketImpl instance itself. This meant that if code dropped the OpenSSLSocketImpl without closing (such as Apache HTTP Client), the instances would never be collected, and perhaps more importantly, file descriptors would not be closed. The fix is to pass in the objects required during a callback in all downcalls to SSL_* methods that could result in a callback and clear them on return. The existing code already did this for the JNIEnv*, so that code was expanded to handle setting the jobjects as well. Details: In the native code used to extract the FileDescriptor object from a Socket on the call to NativeCrypto.SSL_do_handshake. However, since we need this for every read and write operations, we now do this in Java to avoid the repeated overhead. NativeCrypto.SSL_do_handshake now takes a FileDescriptor, which it extracted from the Socket the convenience function using NativeCrypto.getFileDescriptor(Socket) luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java In addition to tracking changes to pass FileDescriptor and SSLHandshakeCallbacks, removed final uses of getFieldId since the code no longer needs to extract FileDescriptors itself luni/src/main/native/NativeCrypto.cpp The Socket field used to be non-null in the wrapper case and null in the non-wrapper case. To simplify things a bit, ""socket this"" in the non-wrapper case. The socket field is now also final and joined by a final FileDescriptor field. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Updated NativeCryptoTest to track FileDescriptor and SSLHandshakeCallbacks by expanding the Hooks.afterHandshake to provide them. Also changed to add a 5 second timeout to many test cases. luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java Bug: 2989218 Change-Id: Iccef92b59475f3c1929e990893579493ece9d442/am e6b59c28: am 9e8d51c7: am a3de55dd: Implement OpenSSLMessageDigestJDK.clone and fix OpenSSLMessageDigestJDK.digest Merge commit e6b59c287ed3007d76167dd9741dc683f440ed2d into dalvik-dev * commit e6b59c287ed3007d76167dd9741dc683f440ed2d: Implement OpenSSLMessageDigestJDK.clone and fix OpenSSLMessageDigestJDK.digest/Implement OpenSSLMessageDigestJDK.clone and fix OpenSSLMessageDigestJDK.digest DigestInputStream2Test.test_onZ was failing because OpenSSLMessageDigestJDK did not implement Clonable Implementing Clonable required a new NativeCrypto.EVP_MD_CTX_copy method While adding NativeCrypto.EVP_MD_CTX_copy, noticed other methods were not properly named in NativeCrypto.EVP_MD_CTX_* convention. Converted rest of NativeCrypto.cpp to JNI_TRACE logging while debugging DigestOutputStreamTest.test_onZ was failing because OpenSSLMessageDigestJDK.digest did an engineReset Removing the engineReset revealed that digest() could not be called repeatedly on an OpenSSLMessageDigestJDK. Problem was that EVP_DigestFinal can only be called once per digest. Changed engineDigest implementation to use new EVP_MD_CTX_copy to create a temp EVP_MD_CTX which can be used to retreive the digest and then discarded. Bug: 2997405 Change-Id: Ie97c22be245911300d2e729e451a9c4afdb27937/Fix HttpsURLConnectionTest failures Focusing on HttpsURLConnectionTest.test_doOutput found a number of unrelated issues, all of which are addressed by this change: {HttpURLConnection,HttpsURLConnection}.connect not ignored on subsequent calls OpenSSLSessionImpl.{getPeerCertificates,getPeerCertificateChain} did not include client certificate OpenSSLSocketImpl.getSession did not skip handshake when SSLSession was already available Fix 3 test issues in HttpsURLConnectionTest Fix 2 test issues in NativeCryptoTest Details: HttpsURLConnectionTest tests (such as test_doOutput) that tried to call URLConnection.connect() at the end of the test were raising exception. The RI URLConnection.connect documentation says calls on connected URLConnections should be ignored. Use ""connected"" instead of ""connection null"" as reason to ignore ""connect"" luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ Converted one caller of getPeerCertificateChain to getPeerCertificates which is the new fast path. Track OpenSSLSessionImpl change to take ""java"" vs ""javax"" certificates. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/AbstractSessionContext.java Move SSL_SESSION_get_peer_cert_chain to be SSL_get_peer_cert_chain (similar to SSL_get_certificate). The problem was that SSL_SESSION_get_peer_cert_chain used SSL_get_peer_cert_chain which in the server case did not include the client cert itself, which required a call to SSL_get_peer_certificate, which needed the SSL instance pointer. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java luni/src/main/native/NativeCrypto.cpp Improved NativeCrypto_SSL_set_verify tracing luni/src/main/native/NativeCrypto.cpp As a side effect of the move to NativeCrypto.SSL_get_peer_certificate, it no longer made sense to lazily create the peer certificate chain since the SSLSession should not depend on a particular SSL instance. The peer chain is now passed in as part of the constructor and the peerCertifcates in the OpenSSLSession can be final (also made localCertificates final). Since peerCertifcates is the newew (java not javax) API and more commonly used, it is what is created from the native code, and peerCertificateChain is not derived from peerCertifcates instead of vice versa. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java Factored out code to used to create local certificate chain to from array of DER byte arrays into createCertChain so it can be reused to create peer certificate chain. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Fix OpenSSLSocketImpl.getSession to check for existing sslSession to and skip handshake, which was causing an exception if the connection had already been closed. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Fix test issues: Removed PrintStream wrapper of System.out which was causing vogar to lose output. Added null check in closeSocket, which can happen in timeout case. Removed use of InputStream.available which in OpenSSLSocket case returned 0, causing test to fail incorrectly. luni/src/test/java/org/apache/harmony/luni/tests/internal/net/www/protocol/ Updating to track change to SSL_get_peer_cert_chain. Also fixed some other unrelated test failures caused by IOException on shutdown and false start (aka SSL_MODE_HANDSHAKE_CUTTHROUGH) causing clientCallback.handshakeCompleted to be false. luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java Bug: b/2981767 Change-Id: Id083beb6496558296c2f74f51ab0970e158b23a9/"
,,0.5895,conscrypt,"TrustManager improvements Overhaul of TrustManagerImpl PKIXParameters can now be final in TrustManagerImpl because we always immediately create an IndexedPKIXParameters instead of only doing it in SSLParametersImpl.createDefaultTrustManager. Use new KeyStore constructor for IndexedPKIXParameters to remove duplicate logic for creating set of TrustAnchors from a KeyStore. Improved checkTrusted/cleanupCertChain to remove special cases for directly trusting the end cert or pruning only self signed certs. To support b/2530852, we need to stop prune the chain as soon as we find any trust anchor (using newly improved TrustManagerImpl.isTrustAnchor), which could be at the beginning, middle, or end. That means cleanupCertChain can return an empty chain if everything was trusted directly. (and we dont need to do extra checks on exception cases to see if the problem was just that the trust anchor was in the chain) isDirectlyTrusted isTrustAnchor here as well, using new IndexedPKIXParameters.isTrustAnchor APIs Fix incorrect assumption in getAcceptedIssuers that all TrustAnchor instances have non-null results for getTrustedCert. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java Removed indexing in createDefaultTrustManager since we always index now luni/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLParametersImpl.java Overhaul of IndexedPKIXParameters Single map from subject X500Principal to TrustAnchors instead of two different X500Principal keyed maps to check Removed map based on encoded cert. For b/2530852, we want to treat certs as equal if they have the same name and public key, not byte-for-byte equality, which can be done with the remaining map. Revamped isDirectlyTrusted into isTrustAnchor(cert) to perform this new name/key based comparison. Added helper isTrustAnchor(cert, anchors) to reuse code in non-IndexedPKIXParameters case in TrustManagerImpl. Added constructor from KeyStore Moved anchor indexing code to index() from old constructor luni/src/main/java/org/apache/harmony/xnet/provider/jsse/IndexedPKIXParameters.java TestKeyStore.getPrivateKey allowed some existing test simplification. luni/src/test/java/libcore/java/security/KeyStoreTest.java luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java support/src/test/java/libcore/java/security/TestKeyStore.java Added missing ""fail()"" before catching expected exceptions. luni/src/test/java/libcore/java/security/KeyStoreTest.java Expanded KeyManagerFactoryTest to excercise ManagerFactoryParameters b/1628001 luni/src/test/java/libcore/javax/net/ssl/KeyManagerFactoryTest.java Added KeyStoreBuilderParametersTest because I thought I saw a bug in KeyStoreBuilderParameters, but this convinced me otherwise. luni/src/test/java/libcore/javax/net/ssl/KeyStoreBuilderParametersTest.java New TrustManagerFactory test modeled on expanded KeyManagerFactoryTest. test_TrustManagerFactory_intermediate specifically is targeting the new functionality of b/2530852 to handling trust anchors within the chain. luni/src/test/java/libcore/javax/net/ssl/TrustManagerFactoryTest.java support/src/test/java/libcore/java/security/StandardNames.java Some initial on tests for Elliptic Curve (b/3058375) after the RI started reporting it was supported. Removed old tags. Skipped a test on the RI that it cant handle. Improved some assert messages. luni/src/test/java/libcore/javax/net/ssl/SSLEngineTest.java luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java support/src/test/java/libcore/java/security/StandardNames.java support/src/test/java/libcore/java/security/TestKeyStore.java Removed unneeded bytes->javax->bytes->java case of which can just go bytes->java directly. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Removed super() luni/src/main/java/javax/net/ssl/KeyStoreBuilderParameters.java Made Security.secprops final luni/src/main/java/java/security/Security.java Pulled SamplingProfiler fix from dalvik-dev branch git cherry-pick f9dc3450e8f23cab91efc9df99bb860221ac3d6c dalvik/src/main/java/dalvik/system/SamplingProfiler.java Bug: 2530852 Change-Id: I95e0c7ee6a2f66b6986b3a9da9583d1ae52f94dd/Avoid races between OpenSSLSocketImpl I/O and close() The previous change: commit 5f2e6872311240319509aed64d9f58cd5b64719b Author: Brian Carlstrom Date: Mon Aug 23 14:06:51 2010 SSLSocket.read should throw SocketException not NullPointerException added checkOpen() to throw SocketException instead of NullPointerException, but there was still a race between read/write on one thread and close on another that could allow a NullPointerException to escape. This change moves checkOpen() calls to be protected by the existing writeLock/readLock/handshakeLock synchronzied blocks to avoid this case. byte buffer error checking for read/write is also moved into the to lock region to preserve compatability as measured by the test: libcore.javax.net.ssl.SSLSocketTest#test_SSLSocket_close Bug: 3153162/am 12e7cb01: Avoid races between OpenSSLSocketImpl I/O and close() * commit 12e7cb011c48b228cdeb2b799fff54d7fbfc6d85: Avoid races between OpenSSLSocketImpl I/O and close()/Avoid races between OpenSSLSocketImpl I/O and close() The previous change: commit 5f2e6872311240319509aed64d9f58cd5b64719b Author: Brian Carlstrom Date: Mon Aug 23 14:06:51 2010 SSLSocket.read should throw SocketException not NullPointerException added checkOpen() to throw SocketException instead of NullPointerException, but there was still a race between read/write on one thread and close on another that could allow a NullPointerException to escape. This change moves checkOpen() calls to be protected by the existing writeLock/readLock/handshakeLock synchronzied blocks to avoid this case. byte buffer error checking for read/write is also moved into the to lock region to preserve compatability as measured by the test: libcore.javax.net.ssl.SSLSocketTest#test_SSLSocket_close Bug: 3153162 Change-Id: I16299f09dc91871407e88eb718073d21a816f683/Revised CloseGuard usage pattern CloseGuard.get() instants are now ""unopened"" In constructor cases, guard.open(""..."") is now at the end In metod cases, guard.open(""..."") is now after resource acquisition guard null pointer checks in finalizers in case constructor threw exception Bug: 2645458 Change-Id: Ieb874a8c33b347768a9fa7437b3dd16f3d56d886/Remove OpenSSLSocketImpl.instanceCount Its use in ActivityThread is being replaced with Debug.countInstancesOfClass(OpenSSLSocketImpl.class) Bug: 3015791 Change-Id: I26ece579f8e0fce62f17f398055b16aceaaf1b08/CloseGuard: finalizers for closeable objects should log complaints Introducing CloseGuard which warns when resources are implictly cleaned up by finalizers when an explicit termination method, to use the Effective Java ""Issue 7: Avoid finalizers"" terminology, should have been used by the caller. libcore classes that can use CloseGuard now do so. Bug: 3041575 Change-Id: I4a4e3554addaf3075c823feb0a0ff0ad1c1f6196/SSL* AppData should not hold onto JNI global references Summary: NativeCrypto.SSL_do_handshake stored JNI global references in its AppData instance for use in upcalls from OpenSSL that invoke Java callbacks. However, one of the references was to the SSLHandshakeCallbacks which in the common case of OpenSSLSocketImpl is the OpenSSLSocketImpl instance itself. This meant that if code dropped the OpenSSLSocketImpl without closing (such as Apache HTTP Client), the instances would never be collected, and perhaps more importantly, file descriptors would not be closed. The fix is to pass in the objects required during a callback in all downcalls to SSL_* methods that could result in a callback and clear them on return. The existing code already did this for the JNIEnv*, so that code was expanded to handle setting the jobjects as well. Details: In the native code used to extract the FileDescriptor object from a Socket on the call to NativeCrypto.SSL_do_handshake. However, since we need this for every read and write operations, we now do this in Java to avoid the repeated overhead. NativeCrypto.SSL_do_handshake now takes a FileDescriptor, which it extracted from the Socket the convenience function using NativeCrypto.getFileDescriptor(Socket) luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java In addition to tracking changes to pass FileDescriptor and SSLHandshakeCallbacks, removed final uses of getFieldId since the code no longer needs to extract FileDescriptors itself luni/src/main/native/NativeCrypto.cpp The Socket field used to be non-null in the wrapper case and null in the non-wrapper case. To simplify things a bit, ""socket this"" in the non-wrapper case. The socket field is now also final and joined by a final FileDescriptor field. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Updated NativeCryptoTest to track FileDescriptor and SSLHandshakeCallbacks by expanding the Hooks.afterHandshake to provide them. Also changed to add a 5 second timeout to many test cases. luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java Bug: 2989218 Change-Id: Iccef92b59475f3c1929e990893579493ece9d442/Scrub missing calls to super.finalize() Bug: 3024226 Change-Id: I6642cb9d4929ba72244529efe4ebdfa595ae4fa7/OpenSSLSocketImpl should not call NativeCrypto.SSL_set_client_CA_list with an empty array Bug: 3034616 Change-Id: Ib39ebfa737910f0ebce5ac2ad87715579bd7aa3d/SSLSocket should respect timeout of a wrapped Socket Change to using getSoTimeout in OpenSSLSocketImpl instead of directly using the timeout field. This means the proper timeout will be used for instances of the OpenSSLSocketImplWrapper subclass, which is used when an SSLSocket is wrapped around an existing connected non-SSL Socket. The code still maintains the local timeout field, now renamed timeoutMilliseconds, which is now accesed via OpenSSLSocketImpl.getSoTimeout. Doing so prevents a getsockopt syscall that otherwise would be necessary if the super.getSoTimeout() was used. Added two unit tests for testing timeouts with SSLSockets wrapped around Socket. One is simply for getters/setters. The second makes sure the timeout is functioning when set on the underlying socket. Bug: 2973305 Change-Id: Idac52853f5d777fae5060a840eefbfe85d448e4c/am 1ca26549: am 912db46c: am 6812a2e8: Rename internal SSLParameters to SSLParametersImpl to avoid collision with new javax.net.ssl.SSLParameters Merge commit 1ca26549fbe0f4bc171ba7bf8ab0a86ae591c618 into dalvik-dev * commit 1ca26549fbe0f4bc171ba7bf8ab0a86ae591c618: Rename internal SSLParameters to SSLParametersImpl to avoid collision with new javax.net.ssl.SSLParameters/Fix HttpsURLConnectionTest failures Focusing on HttpsURLConnectionTest.test_doOutput found a number of unrelated issues, all of which are addressed by this change: {HttpURLConnection,HttpsURLConnection}.connect not ignored on subsequent calls OpenSSLSessionImpl.{getPeerCertificates,getPeerCertificateChain} did not include client certificate OpenSSLSocketImpl.getSession did not skip handshake when SSLSession was already available Fix 3 test issues in HttpsURLConnectionTest Fix 2 test issues in NativeCryptoTest Details: HttpsURLConnectionTest tests (such as test_doOutput) that tried to call URLConnection.connect() at the end of the test were raising exception. The RI URLConnection.connect documentation says calls on connected URLConnections should be ignored. Use ""connected"" instead of ""connection null"" as reason to ignore ""connect"" luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ Converted one caller of getPeerCertificateChain to getPeerCertificates which is the new fast path. Track OpenSSLSessionImpl change to take ""java"" vs ""javax"" certificates. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/AbstractSessionContext.java Move SSL_SESSION_get_peer_cert_chain to be SSL_get_peer_cert_chain (similar to SSL_get_certificate). The problem was that SSL_SESSION_get_peer_cert_chain used SSL_get_peer_cert_chain which in the server case did not include the client cert itself, which required a call to SSL_get_peer_certificate, which needed the SSL instance pointer. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java luni/src/main/native/NativeCrypto.cpp Improved NativeCrypto_SSL_set_verify tracing luni/src/main/native/NativeCrypto.cpp As a side effect of the move to NativeCrypto.SSL_get_peer_certificate, it no longer made sense to lazily create the peer certificate chain since the SSLSession should not depend on a particular SSL instance. The peer chain is now passed in as part of the constructor and the peerCertifcates in the OpenSSLSession can be final (also made localCertificates final). Since peerCertifcates is the newew (java not javax) API and more commonly used, it is what is created from the native code, and peerCertificateChain is not derived from peerCertifcates instead of vice versa. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java Factored out code to used to create local certificate chain to from array of DER byte arrays into createCertChain so it can be reused to create peer certificate chain. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Fix OpenSSLSocketImpl.getSession to check for existing sslSession to and skip handshake, which was causing an exception if the connection had already been closed. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Fix test issues: Removed PrintStream wrapper of System.out which was causing vogar to lose output. Added null check in closeSocket, which can happen in timeout case. Removed use of InputStream.available which in OpenSSLSocket case returned 0, causing test to fail incorrectly. luni/src/test/java/org/apache/harmony/luni/tests/internal/net/www/protocol/ Updating to track change to SSL_get_peer_cert_chain. Also fixed some other unrelated test failures caused by IOException on shutdown and false start (aka SSL_MODE_HANDSHAKE_CUTTHROUGH) causing clientCallback.handshakeCompleted to be false. luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java Bug: b/2981767 Change-Id: Id083beb6496558296c2f74f51ab0970e158b23a9/Rename internal SSLParameters to SSLParametersImpl to avoid collision with new javax.net.ssl.SSLParameters Bug: 2672817 Change-Id: Iadf21b848eaf8850fce22721b9ba3739ab2e9fca/Use BlockGuard for OpenSSL sockets. StrictMode wasnt catching network usage via SSL. Bug: 2976407 Change-Id: I31fe09861e3aca7b26724b94af88687fb6b9442b/SSLSocket.read should throw SocketException not NullPointerException OpenSSLSocketImpl now uses checkOpen similar to Sockets checkOpenAndCreate to ensure that SocketExceptions are thrown if certain operations are tried after the socket is closed. Also added *_setUseClientMode_afterHandshake tests for SSLSocket and SSLEngine. We properly through IllegalArgument exception in this case, but it wasnt covered by the tests previously. Bug: 2918499 Change-Id: I393ad39bed40a33725d2c0f3f08b9d0b0d3ff85f/"
,,0.2215,conscrypt,"Stop allocating empty arrays. Bug: 3166662 Change-Id: I151de373b2bf53786d19824336fa434c02b0b0e8/CloseGuard: finalizers for closeable objects should log complaints Introducing CloseGuard which warns when resources are implictly cleaned up by finalizers when an explicit termination method, to use the Effective Java ""Issue 7: Avoid finalizers"" terminology, should have been used by the caller. libcore classes that can use CloseGuard now do so. Bug: 3041575 Change-Id: I4a4e3554addaf3075c823feb0a0ff0ad1c1f6196/"
,,0.4195,conscrypt,"Elliptic Crypto support for OpenSSLSocketImpl Summary: Enable Elliptic Crypto support for OpenSSL based SSLSocket instances More RI compliant usage of key types, client auth types, and server auth types Steps toward TLS_EMPTY_RENEGOTIATION_INFO_SCSV support, currently test updates Details: Elliptic Curve changes CipherSuite updates for EC Adding KEY_EXCHANGE_EC* and corresponding CipherSuites Updated isAnonymous, getKeyType (now renamed getServerKeyType) to handle new EC cases. Added new getAuthType for use by checkServerTrusted callers. Restructured code to handle two SUITES_BY_CODE_* arrays Remove KEY_EXCHANGE_DH_* definitions which unused because the corresponding CipherSuites were previously disabled. Changed AES CipherSuites definitions to use ""_CBC"" to match other definitions. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java openssl EC NativeCrypto now registers TLS_EC_* cipher suites and has update default list Improved auth type arguments to checkClientTrusted/checkServerTrusted NativeCrypto support for emphemeral EC keys luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java luni/src/main/native/NativeCrypto.cpp non-openssl SSL/TLS cleanups cleanup around code trying to cope with DiffieHellman vs DH since either should work. changed client to use new CipherSuite.getAuthType shared with NativeCrypto implementation changed server to use CipherSuite.getKeyType luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientHandshakeImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/HandshakeProtocol.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/KeyManagerImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerHandshakeImpl.java Consolidate CertificateRequestType code into CipherSuite so that its shared between java and openssl implementations. This includes the KEY_TYPE_ string constants, TLS_CT_* byte constants and the String keyType(byte) (now renamed getClientKeyType) code that depends on them. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CertificateRequest.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientHandshakeImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerHandshakeImpl.java Tests Differentiate between supported list of cipher suites openssl-based SSLSocket and SSLEngine based, since the SSLEngine code does not support EC. luni/src/test/java/libcore/javax/net/ssl/SSLEngineTest.java luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java Added testing for expected default cipher suites. Before we just ensured the values were valid. luni/src/test/java/libcore/javax/net/ssl/SSLSocketFactoryTest.java support/src/test/java/libcore/java/security/StandardNames.java Updated to handle new EC cipher suites codes. Added test for new getClientKeyType. luni/src/test/java/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java Better use of ""standard names"" particularly to correctly deal with the subtle differences between key types, client auth types, and server auth types. TestKeyManager and TestTrustManager now verify the values they are passed are acceptable. support/src/test/java/libcore/java/security/StandardNames.java support/src/test/java/libcore/javax/net/ssl/TestKeyManager.java support/src/test/java/libcore/javax/net/ssl/TestTrustManager.java Changed to timeout after 30 seconds and to log to reveal both client and server issues. support/src/test/java/libcore/javax/net/ssl/TestSSLSocketPair.java Bug: 3058375 Change-Id: I14d1d0285d591c99cc211324f3595a5be682cab1/"
,,0.1461,conscrypt,"Add an Byte.toHexString that does the right thing, and use it. Turns out most callers dont actually give a toss about case anyway, since theyre just for debugging output. Bug: 3371169 Change-Id: Ib8dc079be2dcbf6f2415ecb9b71d034ee71f68eb/Most callers of toLowerCase/toUpperCase should pass Locale.US to avoid problems in Turkey. Some callers should be replaced with equalsIgnoreCase instead. The one exception is StreamTokenizer, where the RI uses the default locale, which is arguably the right thing to do. No-one cares because thats legacy API, but Ive added a test anyway. Ive left HttpCookie and GeneralName for my co-conspirators because the appropriate resolutions arent as obvious there... Bug: 3325637 Change-Id: Ia37a1caaa91b11763ae43e61e445adb45c30f793/"
,,0.3294,conscrypt,"Performance improvements to NativeCrypto based MessageDigest API NativeCrypto API improvements: Move to using EVP_MD related native methods, some of which are derived from the EVP_MD_CTX versions with similar name. The new EVP_get_digestbyname allows one time lookup of the EVP_MD from the string name, avoiding doing it on every call to EVP_DigestInit. EVP_MD_CTX_create is now removed, it is just done as part of EVP_DigestInit and EVP_VerifyInit to an extra JNI call. EVP_DigestFinal now destroys the EVP_MD_CTX to avoid needing to make another call JNI call to EVP_MD_CTX_destroy. EVP_MD_CTX_destroy is kept for cases when EVP_DigestFinal is never called. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java In addition to the improved NativeCrypto API to allow better performance for callers, the implementations use of throwExceptionIfNecessary was made conditional based on the status code from various operations, which had a noticeable impact on performance compared to android.security.MessageDigest luni/src/main/native/NativeCrypto.cpp Updated MessageDigest.getInstance default implementation to use new NativeCrypto API. An EVP_MD instance is looked up at class load time for a specific digest type and then used to call NativeCrypto.EVP_DigestInit as needed, avoiding a lookup of EVP_MD for each new digest. The EVP_MD is also for a one-time lookup the digest output size in bytes, to avoid native calls for engineGetDigestLength. Finally, the creation of the EVP_MD_CTX is now lazy, only created when needed, avoiding unnecessarily create/free in reset cases such as engineDigest. See also external/bouncycastles OpenSSLDigest implementation which had similar optimizations. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLMessageDigestJDK.java OpenSSLSignature also used EVP_MD_CTX_create, and its EVP_VerifyInit was changed similar to EVP_DigestInit to internally allocate the EVP_MD_CTX on the call to init. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSignature.java Fix test to work with arbitrary provider order luni/src/test/java/org/apache/harmony/security/tests/java/security/MessageDigest2Test.java Fix CloseGuard warnings luni/src/test/java/tests/security/MessageDigestTest.java Bug: 3392028 Change-Id: Idb266ebc0918ffd5550e0f457784256400cd2ff0/"
,,0.5364,conscrypt,"Performance improvements to NativeCrypto based MessageDigest API NativeCrypto API improvements: Move to using EVP_MD related native methods, some of which are derived from the EVP_MD_CTX versions with similar name. The new EVP_get_digestbyname allows one time lookup of the EVP_MD from the string name, avoiding doing it on every call to EVP_DigestInit. EVP_MD_CTX_create is now removed, it is just done as part of EVP_DigestInit and EVP_VerifyInit to an extra JNI call. EVP_DigestFinal now destroys the EVP_MD_CTX to avoid needing to make another call JNI call to EVP_MD_CTX_destroy. EVP_MD_CTX_destroy is kept for cases when EVP_DigestFinal is never called. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java In addition to the improved NativeCrypto API to allow better performance for callers, the implementations use of throwExceptionIfNecessary was made conditional based on the status code from various operations, which had a noticeable impact on performance compared to android.security.MessageDigest luni/src/main/native/NativeCrypto.cpp Updated MessageDigest.getInstance default implementation to use new NativeCrypto API. An EVP_MD instance is looked up at class load time for a specific digest type and then used to call NativeCrypto.EVP_DigestInit as needed, avoiding a lookup of EVP_MD for each new digest. The EVP_MD is also for a one-time lookup the digest output size in bytes, to avoid native calls for engineGetDigestLength. Finally, the creation of the EVP_MD_CTX is now lazy, only created when needed, avoiding unnecessarily create/free in reset cases such as engineDigest. See also external/bouncycastles OpenSSLDigest implementation which had similar optimizations. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLMessageDigestJDK.java OpenSSLSignature also used EVP_MD_CTX_create, and its EVP_VerifyInit was changed similar to EVP_DigestInit to internally allocate the EVP_MD_CTX on the call to init. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSignature.java Fix test to work with arbitrary provider order luni/src/test/java/org/apache/harmony/security/tests/java/security/MessageDigest2Test.java Fix CloseGuard warnings luni/src/test/java/tests/security/MessageDigestTest.java Bug: 3392028 Change-Id: Idb266ebc0918ffd5550e0f457784256400cd2ff0/Elliptic Crypto support for OpenSSLSocketImpl Summary: Enable Elliptic Crypto support for OpenSSL based SSLSocket instances More RI compliant usage of key types, client auth types, and server auth types Steps toward TLS_EMPTY_RENEGOTIATION_INFO_SCSV support, currently test updates Details: Elliptic Curve changes CipherSuite updates for EC Adding KEY_EXCHANGE_EC* and corresponding CipherSuites Updated isAnonymous, getKeyType (now renamed getServerKeyType) to handle new EC cases. Added new getAuthType for use by checkServerTrusted callers. Restructured code to handle two SUITES_BY_CODE_* arrays Remove KEY_EXCHANGE_DH_* definitions which unused because the corresponding CipherSuites were previously disabled. Changed AES CipherSuites definitions to use ""_CBC"" to match other definitions. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java openssl EC NativeCrypto now registers TLS_EC_* cipher suites and has update default list Improved auth type arguments to checkClientTrusted/checkServerTrusted NativeCrypto support for emphemeral EC keys luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java luni/src/main/native/NativeCrypto.cpp non-openssl SSL/TLS cleanups cleanup around code trying to cope with DiffieHellman vs DH since either should work. changed client to use new CipherSuite.getAuthType shared with NativeCrypto implementation changed server to use CipherSuite.getKeyType luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientHandshakeImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/HandshakeProtocol.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/KeyManagerImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerHandshakeImpl.java Consolidate CertificateRequestType code into CipherSuite so that its shared between java and openssl implementations. This includes the KEY_TYPE_ string constants, TLS_CT_* byte constants and the String keyType(byte) (now renamed getClientKeyType) code that depends on them. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CertificateRequest.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientHandshakeImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerHandshakeImpl.java Tests Differentiate between supported list of cipher suites openssl-based SSLSocket and SSLEngine based, since the SSLEngine code does not support EC. luni/src/test/java/libcore/javax/net/ssl/SSLEngineTest.java luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java Added testing for expected default cipher suites. Before we just ensured the values were valid. luni/src/test/java/libcore/javax/net/ssl/SSLSocketFactoryTest.java support/src/test/java/libcore/java/security/StandardNames.java Updated to handle new EC cipher suites codes. Added test for new getClientKeyType. luni/src/test/java/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java Better use of ""standard names"" particularly to correctly deal with the subtle differences between key types, client auth types, and server auth types. TestKeyManager and TestTrustManager now verify the values they are passed are acceptable. support/src/test/java/libcore/java/security/StandardNames.java support/src/test/java/libcore/javax/net/ssl/TestKeyManager.java support/src/test/java/libcore/javax/net/ssl/TestTrustManager.java Changed to timeout after 30 seconds and to log to reveal both client and server issues. support/src/test/java/libcore/javax/net/ssl/TestSSLSocketPair.java Bug: 3058375 Change-Id: I14d1d0285d591c99cc211324f3595a5be682cab1/Toward EC TLS support Summary: javax.net.ssl tests are now working on the RI KeyManager can now handle EC_EC and EC_RSA OpenSSLSocketImpl.startHandshake now works if KeyManager contains EC certificates Details: Add CipherSuite.getKeyType to provide X509KeyManager key type strings, refactored from OpenSSLServerSocketImpl.checkEnabledCipherSuites. getKeyType is now also used in OpenSSLSocketImpl.startHandshake to avoid calling setCertificate for unnecessary key types. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java New CipherSuiteTest to cover new getKeyType as well as existing functionality luni/src/test/java/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java Add support to KeyManager implementation for key types of the form EC_EC and EC_RSA. The first part implies the KeyPair algorithm (EC in these new key types) with a potentially different signature algorithm (EC vs RSA in these) luni/src/main/java/org/apache/harmony/xnet/provider/jsse/KeyManagerImpl.java Update NativeCrypto.keyType to support EC_EC and EC_RSA in addition to EC which was added earlier. Change from array of KEY_TYPES to named KEY_TYPE_* constants. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java Overhauled KeyManagerFactoryTest to cover EC, EC_EC, EC_RSA cases luni/src/test/java/libcore/javax/net/ssl/KeyManagerFactoryTest.java support/src/test/java/libcore/java/security/StandardNames.java Changed TestKeyStore.createKeyStore from always using BKS to now use JKS on the RI between BC EC Keys and RI X509 certificates. Because JKS requires a password, we now default ""password"" on the RI. support/src/test/java/libcore/java/security/TestKeyStore.java luni/src/test/java/libcore/javax/net/ssl/SSLContextTest.java support/src/test/java/libcore/java/security/StandardNames.java TestKeyStore.create now accepts key types like EC_RSA. Changed TestKeyStore.createKeys to allow a PrivateKeyEntry to be specified for signing to enable creation of EC_RSA test certificate. Added getRootCertificate/rootCertificate to allow lookup of PrivateKeyEntry for signing. Changed TestKeyStore.getPrivateKey to take explicit signature algorithm to retrieve EC_EC vs EC_RSA entries. support/src/test/java/libcore/java/security/TestKeyStore.java luni/src/test/java/libcore/java/security/KeyStoreTest.java luni/src/test/java/libcore/javax/net/ssl/KeyManagerFactoryTest.java luni/src/test/java/libcore/java/security/cert/PKIXParametersTest.java luni/src/test/java/libcore/javax/net/ssl/TrustManagerFactoryTest.java luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java support/src/test/java/libcore/java/security/StandardNames.java Added support for EC cipher suites on the RI. Also test with and without new TLS_EMPTY_RENEGOTIATION_INFO_SCSV cipher suite which is used to specify the new TLS secure renegotiation. luni/src/test/java/libcore/javax/net/ssl/SSLEngineTest.java luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java support/src/test/java/libcore/java/security/StandardNames.java New TestKeyManager and additional logging in TestTrustManager. Logging in both is disabled by default using DevNullPrintStream. support/src/test/java/libcore/javax/net/ssl/TestKeyManager.java support/src/test/java/libcore/javax/net/ssl/TestTrustManager.java support/src/test/java/libcore/java/io/DevNullPrintStream.java Bug: 3058375 Change-Id: Ia5e2a00a025858e10d1076b900886994b481e05a/"
,,0.5104,conscrypt,"Most callers of toLowerCase/toUpperCase should pass Locale.US to avoid problems in Turkey. Some callers should be replaced with equalsIgnoreCase instead. The one exception is StreamTokenizer, where the RI uses the default locale, which is arguably the right thing to do. No-one cares because thats legacy API, but Ive added a test anyway. Ive left HttpCookie and GeneralName for my co-conspirators because the appropriate resolutions arent as obvious there... Bug: 3325637 Change-Id: Ia37a1caaa91b11763ae43e61e445adb45c30f793/KeyManager.choose* methods should tolerate null key types This regression was found by X509KeyManagerTest and now KeyManagerFactoryTest covers it as well. The underlying problem was introduced recently when KeyManagerImpl was updated to support key types with specific signature algorithms like EC_RSA and EC_EC. Change-Id: Ic99ab10e5ba07e990dc0e8a2d257c2167f2d33bb/Elliptic Crypto support for OpenSSLSocketImpl Summary: Enable Elliptic Crypto support for OpenSSL based SSLSocket instances More RI compliant usage of key types, client auth types, and server auth types Steps toward TLS_EMPTY_RENEGOTIATION_INFO_SCSV support, currently test updates Details: Elliptic Curve changes CipherSuite updates for EC Adding KEY_EXCHANGE_EC* and corresponding CipherSuites Updated isAnonymous, getKeyType (now renamed getServerKeyType) to handle new EC cases. Added new getAuthType for use by checkServerTrusted callers. Restructured code to handle two SUITES_BY_CODE_* arrays Remove KEY_EXCHANGE_DH_* definitions which unused because the corresponding CipherSuites were previously disabled. Changed AES CipherSuites definitions to use ""_CBC"" to match other definitions. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java openssl EC NativeCrypto now registers TLS_EC_* cipher suites and has update default list Improved auth type arguments to checkClientTrusted/checkServerTrusted NativeCrypto support for emphemeral EC keys luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java luni/src/main/native/NativeCrypto.cpp non-openssl SSL/TLS cleanups cleanup around code trying to cope with DiffieHellman vs DH since either should work. changed client to use new CipherSuite.getAuthType shared with NativeCrypto implementation changed server to use CipherSuite.getKeyType luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientHandshakeImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/HandshakeProtocol.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/KeyManagerImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerHandshakeImpl.java Consolidate CertificateRequestType code into CipherSuite so that its shared between java and openssl implementations. This includes the KEY_TYPE_ string constants, TLS_CT_* byte constants and the String keyType(byte) (now renamed getClientKeyType) code that depends on them. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CertificateRequest.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientHandshakeImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerHandshakeImpl.java Tests Differentiate between supported list of cipher suites openssl-based SSLSocket and SSLEngine based, since the SSLEngine code does not support EC. luni/src/test/java/libcore/javax/net/ssl/SSLEngineTest.java luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java Added testing for expected default cipher suites. Before we just ensured the values were valid. luni/src/test/java/libcore/javax/net/ssl/SSLSocketFactoryTest.java support/src/test/java/libcore/java/security/StandardNames.java Updated to handle new EC cipher suites codes. Added test for new getClientKeyType. luni/src/test/java/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java Better use of ""standard names"" particularly to correctly deal with the subtle differences between key types, client auth types, and server auth types. TestKeyManager and TestTrustManager now verify the values they are passed are acceptable. support/src/test/java/libcore/java/security/StandardNames.java support/src/test/java/libcore/javax/net/ssl/TestKeyManager.java support/src/test/java/libcore/javax/net/ssl/TestTrustManager.java Changed to timeout after 30 seconds and to log to reveal both client and server issues. support/src/test/java/libcore/javax/net/ssl/TestSSLSocketPair.java Bug: 3058375 Change-Id: I14d1d0285d591c99cc211324f3595a5be682cab1/Toward EC TLS support Summary: javax.net.ssl tests are now working on the RI KeyManager can now handle EC_EC and EC_RSA OpenSSLSocketImpl.startHandshake now works if KeyManager contains EC certificates Details: Add CipherSuite.getKeyType to provide X509KeyManager key type strings, refactored from OpenSSLServerSocketImpl.checkEnabledCipherSuites. getKeyType is now also used in OpenSSLSocketImpl.startHandshake to avoid calling setCertificate for unnecessary key types. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java New CipherSuiteTest to cover new getKeyType as well as existing functionality luni/src/test/java/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java Add support to KeyManager implementation for key types of the form EC_EC and EC_RSA. The first part implies the KeyPair algorithm (EC in these new key types) with a potentially different signature algorithm (EC vs RSA in these) luni/src/main/java/org/apache/harmony/xnet/provider/jsse/KeyManagerImpl.java Update NativeCrypto.keyType to support EC_EC and EC_RSA in addition to EC which was added earlier. Change from array of KEY_TYPES to named KEY_TYPE_* constants. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java Overhauled KeyManagerFactoryTest to cover EC, EC_EC, EC_RSA cases luni/src/test/java/libcore/javax/net/ssl/KeyManagerFactoryTest.java support/src/test/java/libcore/java/security/StandardNames.java Changed TestKeyStore.createKeyStore from always using BKS to now use JKS on the RI between BC EC Keys and RI X509 certificates. Because JKS requires a password, we now default ""password"" on the RI. support/src/test/java/libcore/java/security/TestKeyStore.java luni/src/test/java/libcore/javax/net/ssl/SSLContextTest.java support/src/test/java/libcore/java/security/StandardNames.java TestKeyStore.create now accepts key types like EC_RSA. Changed TestKeyStore.createKeys to allow a PrivateKeyEntry to be specified for signing to enable creation of EC_RSA test certificate. Added getRootCertificate/rootCertificate to allow lookup of PrivateKeyEntry for signing. Changed TestKeyStore.getPrivateKey to take explicit signature algorithm to retrieve EC_EC vs EC_RSA entries. support/src/test/java/libcore/java/security/TestKeyStore.java luni/src/test/java/libcore/java/security/KeyStoreTest.java luni/src/test/java/libcore/javax/net/ssl/KeyManagerFactoryTest.java luni/src/test/java/libcore/java/security/cert/PKIXParametersTest.java luni/src/test/java/libcore/javax/net/ssl/TrustManagerFactoryTest.java luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java support/src/test/java/libcore/java/security/StandardNames.java Added support for EC cipher suites on the RI. Also test with and without new TLS_EMPTY_RENEGOTIATION_INFO_SCSV cipher suite which is used to specify the new TLS secure renegotiation. luni/src/test/java/libcore/javax/net/ssl/SSLEngineTest.java luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java support/src/test/java/libcore/java/security/StandardNames.java New TestKeyManager and additional logging in TestTrustManager. Logging in both is disabled by default using DevNullPrintStream. support/src/test/java/libcore/javax/net/ssl/TestKeyManager.java support/src/test/java/libcore/javax/net/ssl/TestTrustManager.java support/src/test/java/libcore/java/io/DevNullPrintStream.java Bug: 3058375 Change-Id: Ia5e2a00a025858e10d1076b900886994b481e05a/"
,,0.5216,conscrypt,"SSLSocket.close() should not throw an IOException if there is a problem sending a close notify Bug: 3405962 Bug: 3350645 git cherry-pick 1c64b3adb85345659ac60ad82216268acba18764/am e7291d0d: am c009a7d9: am 1c64b3ad: SSLSocket.close() should not throw an IOException if there is a problem sending a close notify * commit e7291d0d02c84ff650cd50297a348f61fe4978b6: SSLSocket.close() should not throw an IOException if there is a problem sending a close notify/SSLSocket.close() should not throw an IOException if there is a problem sending a close notify Bug: 3350645 Change-Id: I23844fc94a26175247538c95d8cddec90f368d64/HttpsURLConnection retry should not invoke X509TrustManager and HostnameVerifier more than once Summary: In 2.3, HttpsURLConnection was change to retry TLS connections as SSL connections w/o compression to deal with servers that are TLS intolerant. However, if the handshake proceeded to the point of invoking the X509TrustManager, we should not retry. Similarly, if we should not invoke the HostnameVerifier repeatedly, and need to wait until the SSL handshake has completed. Tested with (includes two new tests for this issue): libcore/luni/src/test/java/libcore/javax/net/ssl/ libcore/luni/src/test/java/libcore/java/net/URLConnectionTest.java libcore/luni/src/test/java/org/apache/harmony/luni/tests/internal/net/www/protocol/ Details: HttpConnection.setupSecureSocket has been broken into two pieces. setupSecureSocket now just does the SSL handshaking. verifySecureSocketHostname now does the verification. The old HttpConnection code was careful never to assign its sslSocket field until verification was complete. A new unverifiedSocket field is added to store the sslSocket before verification is completed by verifySecureSocketHostname. luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ HttpsEngine.makeConnection now skips TLS intolerant retry if the reason for the makeSslConnection failure was a CertificateException, since that implies that we failed during certification validation after initial handshaking. We also prevent retrying hostname verification by moving it out of makeSslConnection and only doing it on new SSL connections, tracking the changes to HttpConnection.setupSecureSocket mentioned above. We also now skip the redundant call to setUpTransportIO in makeSslConnection on reused SSLSockets. luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ Instead of throwing away the underlying CertificateExceptions, set them as the cause of the SSLExceptions. This is what the RI does in the case of X509TrustManager failures and is now used by HttpsEngine.makeConnection. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Added new testConnectViaHttpsToUntrustedServer which makes sure that connections are not retried on certificate verification failure. luni/src/test/java/libcore/java/net/URLConnectionTest.java Added new test_SSLSocket_untrustedServer that verifies that an SSLHandshakeException is thown containing a CertificateException is thrown on certificate verification problems. luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java Added second test CA and a new TestKeyStore.getClientCA2 test key store that does not trust the primary test key stores. This is useful for negative testing and is used in the above two new tests. support/src/test/java/libcore/java/security/TestKeyStore.java Issue: Bug: 3292412 Change-Id: I37136bb65f04d2bceaf2f32f542d6432c8b76ad4/Lots more bounds-checking/exception-throwing consistency. Overflow-safe checks all round, plus better detail messages. This isnt quite everything, but its a large chunk of the work. Most notably, this is all of io and nio. There are numerous changes of exception priority here, and the harmony tests noticed a subset of them in the nio code. Ive modified our checked-out copy of the tests to accept any of the throwable exceptions. Change-Id: Id185f1228fb9a1d5fc9494e78375b5623fb0fe14/Rewrite all backwards comparisons. Strictly, all the ones I could find. This is everything with 0 or null on the left-hand side. Note that this touches several incorrect bounds checks, which I havent fixed: Im going to come back and finish that independent cleanup separately. Change-Id: Ibdb054b53df9aace47c7d2a00ff19122190053e8/Elliptic Crypto support for OpenSSLSocketImpl Summary: Enable Elliptic Crypto support for OpenSSL based SSLSocket instances More RI compliant usage of key types, client auth types, and server auth types Steps toward TLS_EMPTY_RENEGOTIATION_INFO_SCSV support, currently test updates Details: Elliptic Curve changes CipherSuite updates for EC Adding KEY_EXCHANGE_EC* and corresponding CipherSuites Updated isAnonymous, getKeyType (now renamed getServerKeyType) to handle new EC cases. Added new getAuthType for use by checkServerTrusted callers. Restructured code to handle two SUITES_BY_CODE_* arrays Remove KEY_EXCHANGE_DH_* definitions which unused because the corresponding CipherSuites were previously disabled. Changed AES CipherSuites definitions to use ""_CBC"" to match other definitions. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java openssl EC NativeCrypto now registers TLS_EC_* cipher suites and has update default list Improved auth type arguments to checkClientTrusted/checkServerTrusted NativeCrypto support for emphemeral EC keys luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java luni/src/main/native/NativeCrypto.cpp non-openssl SSL/TLS cleanups cleanup around code trying to cope with DiffieHellman vs DH since either should work. changed client to use new CipherSuite.getAuthType shared with NativeCrypto implementation changed server to use CipherSuite.getKeyType luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientHandshakeImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/HandshakeProtocol.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/KeyManagerImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerHandshakeImpl.java Consolidate CertificateRequestType code into CipherSuite so that its shared between java and openssl implementations. This includes the KEY_TYPE_ string constants, TLS_CT_* byte constants and the String keyType(byte) (now renamed getClientKeyType) code that depends on them. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CertificateRequest.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientHandshakeImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerHandshakeImpl.java Tests Differentiate between supported list of cipher suites openssl-based SSLSocket and SSLEngine based, since the SSLEngine code does not support EC. luni/src/test/java/libcore/javax/net/ssl/SSLEngineTest.java luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java Added testing for expected default cipher suites. Before we just ensured the values were valid. luni/src/test/java/libcore/javax/net/ssl/SSLSocketFactoryTest.java support/src/test/java/libcore/java/security/StandardNames.java Updated to handle new EC cipher suites codes. Added test for new getClientKeyType. luni/src/test/java/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java Better use of ""standard names"" particularly to correctly deal with the subtle differences between key types, client auth types, and server auth types. TestKeyManager and TestTrustManager now verify the values they are passed are acceptable. support/src/test/java/libcore/java/security/StandardNames.java support/src/test/java/libcore/javax/net/ssl/TestKeyManager.java support/src/test/java/libcore/javax/net/ssl/TestTrustManager.java Changed to timeout after 30 seconds and to log to reveal both client and server issues. support/src/test/java/libcore/javax/net/ssl/TestSSLSocketPair.java Bug: 3058375 Change-Id: I14d1d0285d591c99cc211324f3595a5be682cab1/Toward EC TLS support Summary: javax.net.ssl tests are now working on the RI KeyManager can now handle EC_EC and EC_RSA OpenSSLSocketImpl.startHandshake now works if KeyManager contains EC certificates Details: Add CipherSuite.getKeyType to provide X509KeyManager key type strings, refactored from OpenSSLServerSocketImpl.checkEnabledCipherSuites. getKeyType is now also used in OpenSSLSocketImpl.startHandshake to avoid calling setCertificate for unnecessary key types. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java New CipherSuiteTest to cover new getKeyType as well as existing functionality luni/src/test/java/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java Add support to KeyManager implementation for key types of the form EC_EC and EC_RSA. The first part implies the KeyPair algorithm (EC in these new key types) with a potentially different signature algorithm (EC vs RSA in these) luni/src/main/java/org/apache/harmony/xnet/provider/jsse/KeyManagerImpl.java Update NativeCrypto.keyType to support EC_EC and EC_RSA in addition to EC which was added earlier. Change from array of KEY_TYPES to named KEY_TYPE_* constants. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java Overhauled KeyManagerFactoryTest to cover EC, EC_EC, EC_RSA cases luni/src/test/java/libcore/javax/net/ssl/KeyManagerFactoryTest.java support/src/test/java/libcore/java/security/StandardNames.java Changed TestKeyStore.createKeyStore from always using BKS to now use JKS on the RI between BC EC Keys and RI X509 certificates. Because JKS requires a password, we now default ""password"" on the RI. support/src/test/java/libcore/java/security/TestKeyStore.java luni/src/test/java/libcore/javax/net/ssl/SSLContextTest.java support/src/test/java/libcore/java/security/StandardNames.java TestKeyStore.create now accepts key types like EC_RSA. Changed TestKeyStore.createKeys to allow a PrivateKeyEntry to be specified for signing to enable creation of EC_RSA test certificate. Added getRootCertificate/rootCertificate to allow lookup of PrivateKeyEntry for signing. Changed TestKeyStore.getPrivateKey to take explicit signature algorithm to retrieve EC_EC vs EC_RSA entries. support/src/test/java/libcore/java/security/TestKeyStore.java luni/src/test/java/libcore/java/security/KeyStoreTest.java luni/src/test/java/libcore/javax/net/ssl/KeyManagerFactoryTest.java luni/src/test/java/libcore/java/security/cert/PKIXParametersTest.java luni/src/test/java/libcore/javax/net/ssl/TrustManagerFactoryTest.java luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java support/src/test/java/libcore/java/security/StandardNames.java Added support for EC cipher suites on the RI. Also test with and without new TLS_EMPTY_RENEGOTIATION_INFO_SCSV cipher suite which is used to specify the new TLS secure renegotiation. luni/src/test/java/libcore/javax/net/ssl/SSLEngineTest.java luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java support/src/test/java/libcore/java/security/StandardNames.java New TestKeyManager and additional logging in TestTrustManager. Logging in both is disabled by default using DevNullPrintStream. support/src/test/java/libcore/javax/net/ssl/TestKeyManager.java support/src/test/java/libcore/javax/net/ssl/TestTrustManager.java support/src/test/java/libcore/java/io/DevNullPrintStream.java Bug: 3058375 Change-Id: Ia5e2a00a025858e10d1076b900886994b481e05a/am 8a720cce: TrustManager should include PrivateKeyEntry CAs, OpenSSLSocketImpl close fix, and debugging improvements * commit 8a720cceee7ce319d647738dfeda3f302879f370: TrustManager should include PrivateKeyEntry CAs, OpenSSLSocketImpl close fix, and debugging improvements/TrustManager should include PrivateKeyEntry CAs, OpenSSLSocketImpl close fix, and debugging improvements Revert to older behavior of creating TrustAnchors from both PrivateKeyEntry and TrustedCertificateEntry values from the KeyStore. Added tests to better ensure this slighlt different behavior from PKIXParameters. Also create the acceptedIssuers proactively since the real memory cost is the X509Certificates which are already found in the params. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java luni/src/test/java/libcore/javax/net/ssl/TrustManagerFactoryTest.java luni/src/test/java/libcore/java/security/cert/PKIXParametersTest.java Dont just free native state on issue with startHandshake, close the SSLSocket. While the former addressed a CloseGuard issue, the latter make sure that checkOpen throws SocketExceptions and we dont leak a NullPointerException from NativeCrypto. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Debugging improvements including minor refinements to recently added NativeCrypto logging, more verbose TestKeyStore.dump output, and a new TestTrustManager proxy class for logging X509TrustManager behavior. luni/src/main/native/NativeCrypto.cpp support/src/test/java/libcore/java/security/TestKeyStore.java support/src/test/java/libcore/javax/net/ssl/TestTrustManager.java Change-Id: I317e1ca34d8e20c77e5cb9c5a5a58cb4ae98d829/"
,,0.3219,conscrypt,"Make CertInstaller installed CA certs trusted by applications via default TrustManager (2 of 6) frameworks/base Adding IKeyChainService APIs for CertInstaller and Settings use keystore/java/android/security/IKeyChainService.aidl libcore Improve exceptions to include more information luni/src/main/java/javax/security/auth/x500/X500Principal.java Move guts of RootKeyStoreSpi to TrustedCertificateStore, leaving only KeyStoreSpi methods. Added support for adding user CAs in a separate directory for system. Added support for removing system CAs by placing a copy in a sytem directory luni/src/main/java/org/apache/harmony/xnet/provider/jsse/RootKeyStoreSpi.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustedCertificateStore.java Formerly static methods on RootKeyStoreSpi are now instance methods on TrustedCertificateStore luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java Added test for NativeCrypto.X509_NAME_hash_old and X509_NAME_hash to make sure the implementing algorithms doe not change since TrustedCertificateStore depend on X509_NAME_hash_old (OpenSSL changed the algorithm from MD5 to SHA1 when moving from 0.9.8 to 1.0.0) luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java Extensive test of new TrustedCertificateStore behavior luni/src/test/java/org/apache/harmony/xnet/provider/jsse/TrustedCertificateStoreTest.java TestKeyStore improvements Refactored TestKeyStore to provide simpler createCA method (and internal createCertificate) Cleaned up to remove use of BouncyCastle specific X509Principal in the TestKeyStore API when the public X500Principal would do. Cleaned up TestKeyStore support methods to not throw Exception to remove need for static blocks for catch clauses in tests. support/src/test/java/libcore/java/security/TestKeyStore.java luni/src/test/java/libcore/java/security/KeyStoreTest.java luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java Added private PKIXParameters contructor for use by IndexedPKIXParameters to avoid wart of having to lookup and pass a TrustAnchor to satisfy the super-class sanity check. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/IndexedPKIXParameters.java luni/src/main/java/java/security/cert/PKIXParameters.java packages/apps/CertInstaller Change CertInstaller to call IKeyChainService.installCertificate for CA certs to pass them to the KeyChainServiceTest which will make them available to all apps through the TrustedCertificateStore. Change PKCS12 extraction to use AsyncTask. src/com/android/certinstaller/CertInstaller.java Added installCaCertsToKeyChain and hasCaCerts accessor for use by CertInstaller. Use hasUserCertificate() internally. Cleanup coding style. src/com/android/certinstaller/CredentialHelper.java packages/apps/KeyChain Added MANAGE_ACCOUNTS so that IKeyChainService.reset implementation can remove KeyChain accounts. AndroidManifest.xml Implement new IKeyChainService methods: Added IKeyChainService.installCaCertificate to install certs provided by CertInstaller using the TrustedCertificateStore. Added IKeyChainService.reset to allow Settings to remove the KeyChain accounts so that any app granted access to keystore credentials are revoked when the keystore is reset. src/com/android/keychain/KeyChainService.java packages/apps/Settings Changed com.android.credentials.RESET credential reset action to also call IKeyChainService.reset to remove any installed user CAs and remove KeyChain accounts to have AccountManager revoke credential granted to private keys removed during the RESET. src/com/android/settings/CredentialStorage.java Added toast text value for failure case res/values/strings.xml system/core Have init create world readable /data/misc/keychain to allow apps to access user added CA certificates installed by the CertInstaller. rootdir/init.rc Change-Id: Ief57672eea38b3eece23b14c94dedb9ea4713744/Dont cache the underlying Sockets underlying SocketImpls underlying FileDescriptor in OpenSSLSocketImpl. (OpenSSLSocketImpl, of course, being a Socket, not a SocketImpl.) Bug: 4192414 git cherry-pick dc33f53f38600943c84146320c748e3c46fd2e7b Change-Id: I8f481e0fe217aac782ad9d9e9053681ad69e62ef/Dont cache the underlying Sockets underlying SocketImpls underlying FileDescriptor in OpenSSLSocketImpl. (OpenSSLSocketImpl, of course, being a Socket, not a SocketImpl.) Bug: 4192414 Change-Id: I3c7d0fed70b1b98dc8fcc73f35b3feb0e1eeb2f9/"
,,0.0757,conscrypt,Add shutdown(2). Bug: 3107501 Change-Id: I30354c4cc6e86a4e7b0e3f84e95719539db1d297/Fix short writes in Socket OutputStreams. Also tidy some code and fix some comments. The OpenSSL OutputStream is already correct: it handles this in the native code. Bug: Change-Id: I69645543ec01f1eecdae4418f86c3a1911c0f752/
,,0.0972,conscrypt,"Add ExceptionCheck after all places we setCallbackState Also remove byte versions of SSL_read and SSL_write matching rest of libcore to avoid making the change in even more places. Note that testing this change required improving SSL_renegotiate which is only used for testing. Change-Id: If425764da3a36508a6c65d90eb3d36c5a018fd18/OpenSSLSocketImpl should tolerate X509KeyManager returning null values While this started out as the small fix in OpenSSLSocketImpl.setCertificate and the corresponding test test_SSLSocket_clientAuth_bogusAlias, the need to test the behavior of the X509KeyManager returning null on the RI led to test maintenance to get libcore.javax.net.ssl tests working on RI 7 thanks to a test dependency that was added on the new InetAddress.getLoopbackAddress(). Change-Id: I3d8ed1ce453cc3a0b53e23e39c02e6a71413649c/"
,,0.14300000000000002,conscrypt,"Return real FileDescriptor in Socket wrappers. In classes that wrap another Socket, return the real FileDescriptor from the wrapped Socket. Bug: 5189186 Change-Id: I157feb6991def9110eaf0ea82365b6f5b95b9372/"
,,0.0743,conscrypt,Move OpenSSLSocketImpl.close resource cleanup into a finally clause Bug: 5466273 (cherry picked from commit d3433cea484f380ab2c889c10e9d9d3268046a6c) Change-Id: I8618be21a2227d66ea66352342b530906605160f/Move OpenSSLSocketImpl.close resource cleanup into a finally clause Bug: 5466273 Change-Id: I64758dfd3ca1c35d08616c63982223d84fdc2759/
,,0.1723,conscrypt,"Move OpenSSLSocketImpl.close resource cleanup into a finally clause Bug: 5466273 (cherry picked from commit d3433cea484f380ab2c889c10e9d9d3268046a6c) Change-Id: I8618be21a2227d66ea66352342b530906605160f/Move OpenSSLSocketImpl.close resource cleanup into a finally clause Bug: 5466273 Change-Id: I64758dfd3ca1c35d08616c63982223d84fdc2759/Return real FileDescriptor in Socket wrappers. In classes that wrap another Socket, return the real FileDescriptor from the wrapped Socket. Bug: 5189186 Change-Id: I157feb6991def9110eaf0ea82365b6f5b95b9372/"
,,0.1043,conscrypt,"Use SSL_CTX_set_session_id_context in ServerSessionContext Without this, OpenSSL with fail when SSLSessions are reused on an SSLServerSocket when client certificates are requested. Bug: 6329719 Change-Id: I9b14b32cccee1e5aba1215cebf81eb05a788d63b/"
,,0.1926,conscrypt,"NativeCrypto should honor timeout less than one second Bug: Change-Id: I4507a1e9fe37b1c095f7bb4d3e3a55d6d738f7ad/Avoid session reuse to fix test_SSL_do_handshake_clientCertificateRequested_throws_after_renegotiate for OpenSSL 1.0.1 Bug: 6229570 Change-Id: I891d10db104fda9978310b8be3420e1729971b27/Use SSL_CTX_set_session_id_context in ServerSessionContext Without this, OpenSSL with fail when SSLSessions are reused on an SSLServerSocket when client certificates are requested. Bug: 6329719 Change-Id: I9b14b32cccee1e5aba1215cebf81eb05a788d63b/Disable TLSv1.1 and TLSv1.2 by default Bug: 6234791 Change-Id: I5d829211c9e1d5672fc96e42ef603c53d789e695/Disable TLSv1.1 and TLSv1.2 by default Bug: 6234791 Change-Id: I5d829211c9e1d5672fc96e42ef603c53d789e695/Dont use the SSL_CTX prefix for a method that takes an SSL. The implementation is asymmetric: enabling NPN is per-context, but actually looking up the negotiated protocol is per-SSL. This caused me to screw up in following the SSL_CTX naming scheme; I applied it in too many places. Change-Id: I5bd1be334d513f220086c901527d0b8416f2ba3f/"
,,0.2756,conscrypt,"Only use SSL CUTTHROUGH (False Start) if the server supports NPN. We enable cutthrough on the client if the server supports NPN. We never enable cutthrough on the server because most relevant protocols (ie. HTTP) are client-speaks-first and those dont benefit from cutthrough on the server. I verified this by enabling NPN on both client and server and checking that the clients Application Data was sent before the servers Change Cipher Spec. To increase the likelihood of this otherwise racy situation I put the server in SSL debug mode after it receiving next_protos_advertised_callback. OpenSSLs debug mode adds a 1-second sleep before each read and write. Bug: Change-Id: I879b5fb26dc237392a36fe0585c8a6519c0e5220/Disable TLSv1.1 and TLSv1.2 by default Bug: 6234791 Change-Id: I5d829211c9e1d5672fc96e42ef603c53d789e695/Disable TLSv1.1 and TLSv1.2 by default Bug: 6234791 Change-Id: I5d829211c9e1d5672fc96e42ef603c53d789e695/Dont use the SSL_CTX prefix for a method that takes an SSL. The implementation is asymmetric: enabling NPN is per-context, but actually looking up the negotiated protocol is per-SSL. This caused me to screw up in following the SSL_CTX naming scheme; I applied it in too many places. Change-Id: I5bd1be334d513f220086c901527d0b8416f2ba3f/"
,,0.2129,conscrypt,"CertificateRequest should handle case where certificate is requested but none is available. Android SSL client was not handling a CertificateRequest where there was no cert to send. It had a problem because it was assuming that if the CertificateMessage response is not null, it means there is a cert included, which is not true (if it has no cert to send an empty CertificateMessage is sent to the server). So I updated the CertificateVerify creation check to also check whether the CertificateMessage contained any certs (ClientHandshakeImpl.java). In testing I found that the same error was in the server code so I made the same change there (ServerHandshakeImpl.java). I added two test cases to SSLEngineTest one to directly test the scenario (test_SSLEngine_clientAuthWantedNoClientCert) and one to just double-check that the server would not allow the connection if setNeedClientAuth (test_SSLEngine_clientAuthNeededNoClientCert). Bug: Change-Id: Ideb57d6ccbcdd54ca24dc3063e60aba2653c8414/"
,,0.1079,conscrypt,"Add OpenSSLSocketImpl.setSoWriteTimeout to allow SO_SNDTIMEO to be specified Bug: 6693087 Change-Id: Ie6903168ca0ada4516c55dfab5f7194baf965b4c/Disable SSL compression Bug: 7079965 Change-Id: I8e060a827613e212bbcced66507fbf124bb04543/Restore ability for SSLSocket.close() to interrupt reads and writes SSLSocketTest.test_SSLSocket_interrupt didnt catch this regression so added new test_SSLSocket_interrupt_read to cover this case specifically. Also cleanup SSLSocketTest to use Executors like NativeCryptoTest instead of Threads for better error checking. Bug: 7014266 Change-Id: I1160cd283310a0c6197cd3271a25830e0e2b1524/am 165b9dc5: am fe1daea1: Merge ""Fix OpenSSLSocketImpl.close race"" * commit 165b9dc50bc50f69eef05395edb6e70cdaa85225: Fix OpenSSLSocketImpl.close race/Fix OpenSSLSocketImpl.close race Move the NativeCrypto.SSL_interrupt call within the close synchronization. Otherwise there can be problems if NativeCrypto_SSL_interrupt tries to use the SSL* and another thread has called NativeCrypto_SSL_free. Bug: 6707288 Change-Id: Id8b0311b10124f2a08f8e0f24595a6ee46805c33/"
,,0.2294,conscrypt,"Dont forget to call sessionRemoved from removeEldestEntry Also to prevent similar problems in the future, remember SSLSession we are trying to use in case it disappears from SSLSessionContext. Added test of SSLSocket SSLSession reuse. Bug: Bug: 8313208 (cherry picked from commit b88ab0efb05475fa9d4e2a06175e95e88f507cff) Change-Id: I229e018c3acb427a7b580eaf880f86d9b263bac7/Dont forget to call sessionRemoved from removeEldestEntry Also to prevent similar problems in the future, remember SSLSession we are trying to use in case it disappears from SSLSessionContext. Added test of SSLSocket SSLSession reuse. Bug: Bug: 8313208 Change-Id: I30824cdf96a0d1086abccb61c011dbc9ad60f8cf/"
,,0.1838,conscrypt,"NativeCrypto: adjust BasicConstraints check OpenSSL checks KeyUsage for ""Certificate Signing"" when checking for a CA, but Java just specifies that the getBasicConstraints call only looks at the BasicConstraints itself. (cherry picked from commit cd59afd3e34cb6b3645babdace22c03882e0ec19) Bug: 8488314 Change-Id: I72f8d6679169480960630bd73745ebf4c55b383c/NativeCrypto: adjust BasicConstraints check OpenSSL checks KeyUsage for ""Certificate Signing"" when checking for a CA, but Java just specifies that the getBasicConstraints call only looks at the BasicConstraints itself. Bug: 8488314 Change-Id: I072cd2e9f1a9295a717f7587817149200113c65f/am bb7b75b9: am e699186e: Merge ""NativeCrypto: throw exception on invalid DNS altname"" * commit bb7b75b9dccf471f3f52cdb088b0c665cf6ded76: NativeCrypto: throw exception on invalid DNS altname/NativeCrypto: throw exception on invalid DNS altname When we receive an invalid DNS alt name (e.g., contains characters outside of the ASCII printable range), we should throw an exception to match the previous behavior. This is not validated this against the RI since the tests currently dont work, but it brings the behavior back to what it was previously. Also amend the previous ASN.1 string check to use ASN1_PRINTABLE_type(...) which actually scans the string to check its contents. This is what was meant in the last patch. Bug: 8398461 Change-Id: I260f045a2e144fb9ded7e1d3aa46592da8f63272/NativeCrypto: add CertPath support with PKCS7 Add support for generating CertPath with the OpenSSLX509CertificateFactory implementation. This only will encode withrPKCS7 currently. This means it fails the CertPath serialization test because the serialization and de-serialization code only uses a providers default serialization format. Since this provider is not the default provider and the default provider uses PkiPath as its default format, the OpenSSLX509CertPath still fails the tests. This seems like a problem with the way CertPath is serialized. The impact of this seems to be that a CertPath implementation must have ""PkiPath"" as its default encoding. Change-Id: Ie0e3577746345108301b02e7a1d4e8ea189f2bda/am c79900d9: am a190a2ae: Merge ""NativeCrypto: fix more DSA/ECDSA key generation"" Via Android Git Automerger (1) and others * commit c79900d938d474e3e5271593cc7d274f752fac4e: NativeCrypto: fix more DSA/ECDSA key generation/am a190a2ae: Merge ""NativeCrypto: fix more DSA/ECDSA key generation"" Via Gerrit Code Review (1) and Kenny Root (1) * commit a190a2ae9fad41c91eefbcd087403311e28e2e6b: NativeCrypto: fix more DSA/ECDSA key generation/NativeCrypto: fix more DSA/ECDSA key generation * Add hidden API to pass along the EC curve name in ECParameterSpec. The lack of name passing made KeyFactory2Test fail because the reconstructed ECDSA key had explicit curve parameters instead of an OID naming the curve. * Fix some mixing of PKCS8/X509EncodedKeySpec in DSA/ECDSA KeyFactory implementations. * Fix the KeyFactory2Test to output more useful error messages. * Remove known failure which is no longer happening. * Change EC_GROUP_get_curve_name to return the ""shortName"" string which matches the EC_GROUP_new_by_curve_name Bug: 3483365 Change-Id: I0a80be88bef728b2177f3593cc3421fa47b79470/am 4f6d0481: am 7e5832d1: Merge changes Idfb18017,Ifbba9fdf * commit 4f6d0481607daa0875010b9e1364ba6b98aa6eec: OpenSSLMac: fix initialization with new key HarmonyJSSE: convert byte correctly in padding check/am 7e5832d1: Merge changes Idfb18017,Ifbba9fdf * commit 7e5832d1a709558fca80ecb25fdd0626b2d4312d: OpenSSLMac: fix initialization with new key HarmonyJSSE: convert byte correctly in padding check/Merge changes Idfb18017,Ifbba9fdf * changes: OpenSSLMac: fix initialization with new key HarmonyJSSE: convert byte correctly in padding check/OpenSSLMac: fix initialization with new key If an OpenSSLMac instance was re-initialized with a new key, it wouldnt produce correct results. Make sure to re-initialize the EVP_MD_CTX as well. Change-Id: Idfb18017407ff65866ae7e6f6fca3d646a970803/"
,,0.2315,conscrypt,"Dont forget to call sessionRemoved from removeEldestEntry Also to prevent similar problems in the future, remember SSLSession we are trying to use in case it disappears from SSLSessionContext. Added test of SSLSocket SSLSession reuse. Bug: Bug: 8313208 (cherry picked from commit b88ab0efb05475fa9d4e2a06175e95e88f507cff) Change-Id: I229e018c3acb427a7b580eaf880f86d9b263bac7/Dont forget to call sessionRemoved from removeEldestEntry Also to prevent similar problems in the future, remember SSLSession we are trying to use in case it disappears from SSLSessionContext. Added test of SSLSocket SSLSession reuse. Bug: Bug: 8313208 Change-Id: I30824cdf96a0d1086abccb61c011dbc9ad60f8cf/am d2be3ff2: am 5906f9f4: Merge ""verifyCertificateChain should convert unknown exceptions to CertificateException"" * commit d2be3ff27ca31b21a229129e760fc713541e9d6d: verifyCertificateChain should convert unknown exceptions to CertificateException/"
,,0.2715,conscrypt,"am 16a5cd2f: am f7f723e8: Merge ""Stop depending on CipherSuite in OpenSSL-backed sockets."" * commit 16a5cd2f17b504aced123b98c75e0ebb1d33815e: Stop depending on CipherSuite in OpenSSL-backed sockets./am f7f723e8: Merge ""Stop depending on CipherSuite in OpenSSL-backed sockets."" * commit f7f723e868397a1801aa769abd78eb7d36b1662b: Stop depending on CipherSuite in OpenSSL-backed sockets./Merge ""Stop depending on CipherSuite in OpenSSL-backed sockets.""/Stop depending on CipherSuite in OpenSSL-backed sockets. This is in preparation for removing Harmony-backed TLS/SSL implementations. Change-Id: Ic108e16d086fb99b69f0a4e4faeb816dc50a7643/BEAST attack mitigation for OpenSSL-backed SSLSockets. This enables 1/n-1 record splitting for SSLSocket instances backed by OpenSSL. OpenSSL change: Bug: 11514124 Change-Id: I3fef273edd417c51c5723d290656d2e03331d68a/"
,,0.2246,conscrypt,"am 16a5cd2f: am f7f723e8: Merge ""Stop depending on CipherSuite in OpenSSL-backed sockets."" * commit 16a5cd2f17b504aced123b98c75e0ebb1d33815e: Stop depending on CipherSuite in OpenSSL-backed sockets./am f7f723e8: Merge ""Stop depending on CipherSuite in OpenSSL-backed sockets."" * commit f7f723e868397a1801aa769abd78eb7d36b1662b: Stop depending on CipherSuite in OpenSSL-backed sockets./Merge ""Stop depending on CipherSuite in OpenSSL-backed sockets.""/Stop depending on CipherSuite in OpenSSL-backed sockets. This is in preparation for removing Harmony-backed TLS/SSL implementations. Change-Id: Ic108e16d086fb99b69f0a4e4faeb816dc50a7643/"
,,0.2227,conscrypt,"SSLEngine: Verify server RSA params signature The client did not verify the signature of servers RSA params in ServerKeyExchange. Bug: 11631299 Change-Id: Id5389129a4c503fd2e504980337fdd351a25d280/SSLEngine: verify DHE signature The DHE signature wasnt being verified against the servers certificate. Refactor some code to allow the same code to be used for both the server and client to create and check the DHE parameters signature. Bug: 11631299 Change-Id: I73456c18a57a0f31d856d64d0bfdf4e029db6df9/am f0dc0232: am 3c86fc85: am 3b0eb023: SSLEngineImpl: fix DHE with client certs * commit f0dc0232c9cb8a861eee231e397afdc646a0e69d: SSLEngineImpl: fix DHE with client certs/am 3c86fc85: am 3b0eb023: SSLEngineImpl: fix DHE with client certs * commit 3c86fc850174e4759ab3517cd407a44fee2d41ce: SSLEngineImpl: fix DHE with client certs/am 3b0eb023: SSLEngineImpl: fix DHE with client certs * commit 3b0eb0236a3750eb175cc0f1211a855c0eb31bda: SSLEngineImpl: fix DHE with client certs/SSLEngineImpl: fix DHE with client certs If DHE-based key exchanges were selected and there was no matching client certificate selected from X509ExtendedKeyManager, the array would be zero-length and crash. If the client and server certificates did not have DH public keys, the client key exchange would never be created and the server would get a change cipher spec unexpectedly. Change-Id: Ie23b43f4de65e650658c0fb2931e4c1396c136bf/"
,,0.4959,conscrypt,"Disable MD5 cipher suites in SSLSocket and SSLEngine. Although HMAC-MD5 is not yet broken, the foundations are shaky see Scans show that disabling these TLS/SSL cipher suites currently causes handshake issues with 0.4% of the ecosystem. Bug: 11220570 Change-Id: I1970d2ecbdf3c0d26e45d439047b1d3884ade2ec/Actually prefer Forward Secrecy cipher suites. The documentation for the list of TLS/SSL cipher suites used by default states that cipher suites offering Forward Secrecy are preferred. This CL adjusts the list to conform: FS cipher suites that use RC4_128 bulk encryption algorithm were not preferred over non-FS cipher suites that use AES. Bug: 11220570 Change-Id: Ic9019306898600086920874474764186b710c3ef/Disable 3DES cipher suites in SSLSocket. The effective key length for 3DES_EDE bulk encryption algorithm is only 112 bits. Were now aiming for 128 and higher. Scans show that removing these cipher suites from the default list causes handshake issues only with 0.15% of the ecosystem. Bug: 11220570 Change-Id: Ie01ebe8134d08a36b276295b804540157963be8f/Disable static server key ECDH cipher suites in SSLSocket. These cipher suites use a static key for ECDH on the server side. When client certificates are used, a static key is also used on the client side, leading to the same premaster secret for all connections between a particular client and server. Also, these cipher suites do not provide forward secrecy. Scans show that removing these cipher suites from the default list does not affect connectivity to servers and is thus safe. Bug: 11220570 Change-Id: If34f4a3888ed9972c39d171656a85c61dfa98ea1/Enable AES-GCM cipher suites by default in SSLSocket. AES-GCM is preferred to AES-CBC whose MAC-pad-then-encrypt approach has issues (e.g., Lucky 13 attack). Bug: 11220570 Change-Id: Ib007bc89ccf08358ed3f093f630350fa859e7c35/Enable support for TLSv1.2 cipher suites in SSLSocket. This adds support for AES-GCM and AES-CBC with MACs based on SHA256 and SHA384. Bug: 11220570 Change-Id: I56e7e25c5cd65a4c7662da6d4bbe5720f427e677/Enable TLSv1.1 and TLSv1.2 by default for SSLSocket. TLSv1.1 and TLSv1.2 offer built-in protection against BEAST attack and support for GCM cipher suites. This change causes TLS/SSL handshake failures with a small fraction of servers, load balancers and TLS/SSL accelerators with broken TLS/SSL implementations. Scans demonstrate that the number is around 0.6%. Breaking connectivity (using platform default settings) to a tiny minority of the ecosystem is acceptable because this inconvenience is outweighed by the added safety for the overwheling majority of the ecosystem. App developers affected by this issue should consider asking such servers to be fixed or explicitly disabling TLSv1.1 and TLSv1.2 in their apps. Bug: 11220570 Change-Id: Ice9e8ce550401ba5e3385fd369c40f01c06ac7fd/am 16a5cd2f: am f7f723e8: Merge ""Stop depending on CipherSuite in OpenSSL-backed sockets."" * commit 16a5cd2f17b504aced123b98c75e0ebb1d33815e: Stop depending on CipherSuite in OpenSSL-backed sockets./am f7f723e8: Merge ""Stop depending on CipherSuite in OpenSSL-backed sockets."" * commit f7f723e868397a1801aa769abd78eb7d36b1662b: Stop depending on CipherSuite in OpenSSL-backed sockets./Merge ""Stop depending on CipherSuite in OpenSSL-backed sockets.""/Stop depending on CipherSuite in OpenSSL-backed sockets. This is in preparation for removing Harmony-backed TLS/SSL implementations. Change-Id: Ic108e16d086fb99b69f0a4e4faeb816dc50a7643/Deprioritize HMAC-MD5 in default TLS/SSL cipher suites. Although HMAC-MD5 is not yet broken, the foundations are now much more shaky that those of HMAC-SHA. See This CL also adds a comment about the key rules governing the preference order of cipher suites used by default. Bug: 11220570 Change-Id: I2a2fe4d427650081637efc14fd7c427a33cbea7e/Prefer Forward Secrecy TLS/SSL cipher suites by default. This modifies the list of TLS/SSL cipher suites used by default to prefer those offering Forward Secrecy (FS) ECDHE and DHE. Bug: 11220570 Change-Id: I20f635d11e937d64de4f4e2fea34e1c5ea7a67ac/Deprioritize RC4-based TLS/SSL cipher suites. Now that BEAST and Lucky13 mitigations are enabled, it is prudent to prefer AES CBC cipher suites over RC4 ones (see Bug: 11220570 Change-Id: I52b9724700fd8eaeebbadcfa518a96823a1410b8/BEAST attack mitigation for OpenSSL-backed SSLSockets. This enables 1/n-1 record splitting for SSLSocket instances backed by OpenSSL. OpenSSL change: Bug: 11514124 Change-Id: I3fef273edd417c51c5723d290656d2e03331d68a/"
,,0.2784,conscrypt,"Make some methods public for CTS Some methods are called from CTS. The ClassLoaders are different, so we need to make these public so we dont get any IllegalAccessError during CTS tests. Change-Id: I5ac7931694fb1eceb86ae306fca07fb314643fa9/am 16a5cd2f: am f7f723e8: Merge ""Stop depending on CipherSuite in OpenSSL-backed sockets."" * commit 16a5cd2f17b504aced123b98c75e0ebb1d33815e: Stop depending on CipherSuite in OpenSSL-backed sockets./am f7f723e8: Merge ""Stop depending on CipherSuite in OpenSSL-backed sockets."" * commit f7f723e868397a1801aa769abd78eb7d36b1662b: Stop depending on CipherSuite in OpenSSL-backed sockets./Merge ""Stop depending on CipherSuite in OpenSSL-backed sockets.""/Stop depending on CipherSuite in OpenSSL-backed sockets. This is in preparation for removing Harmony-backed TLS/SSL implementations. Change-Id: Ic108e16d086fb99b69f0a4e4faeb816dc50a7643/BEAST attack mitigation for OpenSSL-backed SSLSockets. This enables 1/n-1 record splitting for SSLSocket instances backed by OpenSSL. OpenSSL change: Bug: 11514124 Change-Id: I3fef273edd417c51c5723d290656d2e03331d68a/"
,,0.1152,conscrypt,Time out TLS/SSL sessions after 8 hours by default. Prior to this change TLS/SSL sessions did not time out. (cherry picked from commit e5992c842c07c472f7ea3efbcc7f133fcc022592) Bug: 18369043 Bug: 18370076 Change-Id: I596423b9c56bfc5f337a17aba02fbb9a9f2ded36/Time out TLS/SSL sessions after 8 hours by default. Prior to this change TLS/SSL sessions did not time out. Bug: 18370076 Change-Id: I596423b9c56bfc5f337a17aba02fbb9a9f2ded36/
,,0.0985,conscrypt,"Remove SSLv3 from default protocols list for TLS SSLv3 has some systemic problems demonstrated by the POODLE attack. Disable it by default when ""TLS"" is requested since the documentation in Java Standard Names allows us to not support SSL when TLS is requested. Bug: 17136008 Change-Id: Icad1639c7e33b6e495f452a5289b0d20b819d679/"
,,0.2606,conscrypt,"Call EVP_CIPHER_CTX_free instead of EVP_CIPHER_CTX_cleanup. The latter doesnt OpenSSL_free memory allocated by EVP_CIPHER_CTX_new. Its worth noting that EVP_CIPHER_CTX_free doesnt check the return value of EVP_CIPHER_CTX_cleanup so we cant throw if cleanup failed, but we were only ever calling this method from a finalizer anyway. (cherry picked from commit c64652932d8e17ccf7e54c0c76c1b38a86841732) bug: 18617384 Change-Id: Ida65e14ffbed41f56a59e2f5fe77289cac0f5947/Call EVP_CIPHER_CTX_free instead of EVP_CIPHER_CTX_cleanup. The latter doesnt OpenSSL_free memory allocated by EVP_CIPHER_CTX_new. Its worth noting that EVP_CIPHER_CTX_free doesnt check the return value of EVP_CIPHER_CTX_cleanup so we cant throw if cleanup failed, but we were only ever calling this method from a finalizer anyway. bug: 18617384 Change-Id: Ida65e14ffbed41f56a59e2f5fe77289cac0f5947/Convert EC_GROUP and EC_POINT to new style Bug: 16656908 Change-Id: Ie912f376f69327ce634cac50763bf86b418049f5/Switch EVP_CIPHER_CTX to new style Bug: 16656908 Change-Id: Id519c20474a02c70e72d362bc84d26855a74fa33/Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/Convert EVP_MD_CTX to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. Bug: 16656908 Change-Id: I165e041a8fe056770d6ce6d6cd064c411575b7c4/Remove Conscrypt support for DSA BoringSSL removes support for DSA, so theres no point in maintaining this now. There have been virtually zero SSL certificates issued using DSA for many years as well. Change-Id: Id940643b85ba39b03038aabc6da9ec0285db66c4/Remove support for DSS TLS/SSL cipher suites. This is in preparation for migration from OpenSSL to BoringSSL. BoringSSL does not support DSS. DSS cipher suites are used by a vanishingly tiny fraction of the Android ecosystem. In all cases, the servers SSL certificate is self-signed (rather than CA issued), making it easy to switch to a new self-signed certificate which is based on RSA or ECDSA. Bug: 17409664 Change-Id: I91067ca9df764edd2b7820e5dec995f24f3910a1/Track upgrade to OpenSSL 1.0.1j (cherry picked from commit 8ae86f7662a6330f58df6bdf3fd06af8e1dc281f) Bug: 18018599 Change-Id: I2b8c62190a9dd5e5fdc6894334cf1d3edfce0a06/Track upgrade to OpenSSL 1.0.1j Bug: 18018599 Change-Id: I2b8c62190a9dd5e5fdc6894334cf1d3edfce0a06/Remove SSLv3 from default protocols list for TLS SSLv3 has some systemic problems demonstrated by the POODLE attack. Disable it by default when ""TLS"" is requested since the documentation in Java Standard Names allows us to not support SSL when TLS is requested. Bug: 17136008 Change-Id: Icad1639c7e33b6e495f452a5289b0d20b819d679/"
,,0.0799,conscrypt,"Add getFileDescriptor$ call for compat Newer Android versions have implemented getFileDescriptor$ to fix a bug in Conscrypt since libcore commit 5d3f5200f3511c9a7107bcc0a996c7afa1b39aaf which has continued to do the right thing. Use this method instead since newer versions dont necessarily set the ""impl"" field on Socket instances. Bug: 25857624 Change-Id: I64fbda844ea3b632023822f1436bd674852e327a/Revert ""Add ExtendedSSLSession, et al."" This reverts commit 38d12ed4a7f6f7628120d0ef45ff29d472337102. This breaks the unbundled build because of OpenSSLExtendedSessionImpl. Change-Id: I73951a6f1d5cb14c70cd807c2c895bbbdc4c8e40/Revert ""Fix for OpenJdk SocketImpl."" This reverts commit da2733a716be6ef2325229dd372d17744daa6311. The OpenJdk implementation has been changed. Bug: 25805791/Fix for OpenJdk SocketImpl. OpenJdk sockets start their life with a null FileDescriptor. b/25805791 tracks fixing the SocketImpl Change-Id: Ia14afda04aa0a109f944c549719ad50bb3aeadab/"
,,0.337,conscrypt,Cache intermediate CA separately Intermediate CAs are cached in order to support servers that fail to sent a complete chain to a root. These certificates should be cached to support these servers but these certificates must not be trusted as trust anchors. Store them separately to prevent confusion between trusted roots and cached intermediates. (cherry-picked from commit 198aca1fb638a2a98e89fb9f284108ad576d0c3b) Bug: 26232830 Change-Id: I520f50729b55fc7412c7d133335bc9e3c190bbf6/Cache intermediate CA separately Intermediate CAs are cached in order to support servers that fail to sent a complete chain to a root. These certificates should be cached to support these servers but these certificates must not be trusted as trust anchors. Store them separately to prevent confusion between trusted roots and cached intermediates. Bug: 26232830 Change-Id: I520f50729b55fc7412c7d133335bc9e3c190bbf6/
,,0.0702,conscrypt,OpenSSLCipher: use 128 bit tags in GCM by default Bug: 26186727 Change-Id: Id74b0d89742dd23f506c6f0165c1dfc49bd586a6/
,,0.3048,conscrypt,"Try to get peer hostname from SocketAddress Java 7 added a new method to InetSocketAddress called getHostString() which returns the unresolved host for a given address. This should be suitable for use with SNI as long as it isnt an IP address. This also helps with testing because we can use serialization tricks to rewrite the ""hostname"" field of an already-serialized loopback address. (cherry picked from commit bc8a290f2a0a0e16f078d7c9cf2b2d97edf4d0f2) Bug: 27271561 Change-Id: I9845e57d505712cdfee87d18246a1a3b021deea3/Try to get peer hostname from SocketAddress Java 7 added a new method to InetSocketAddress called getHostString() which returns the unresolved host for a given address. This should be suitable for use with SNI as long as it isnt an IP address. This also helps with testing because we can use serialization tricks to rewrite the ""hostname"" field of an already-serialized loopback address. Bug: 27271561 Change-Id: I9845e57d505712cdfee87d18246a1a3b021deea3/"
,,0.1576,conscrypt,"Update d2i_SSL_SESSION test expectations Update d2i_SSL_SESSION to only throw IOException and change tests to expect that to happen. Since IOException is declared as a thrown exception, non-test code should already be expecting this. (cherry picked from commit c12c046e706de374276e3f9785cb4afc2e3a02fa) Bug: 27526112 Change-Id: Ic8c1a47debce9cb76221150d050be86d010c6ec3/Update d2i_SSL_SESSION test expectations Update d2i_SSL_SESSION to only throw IOException and change tests to expect that to happen. Since IOException is declared as a thrown exception, non-test code should already be expecting this. Bug: 27526112 Change-Id: Ic8c1a47debce9cb76221150d050be86d010c6ec3/"
,,0.23600000000000002,conscrypt,Add getTrustedChainForServer This adds versions of the new checkServerTrusted methods that return the built chain. Bug: 27271561 Change-Id: Id03500dab962c949430ee217407bf64fec28adb7 (cherry picked from commit 8fa0aeece0084290735f81bfcce6c178568ab157)/Add getTrustedChainForServer This adds versions of the new checkServerTrusted methods that return the built chain. Bug: 27271561 Change-Id: Id03500dab962c949430ee217407bf64fec28adb7/Cache intermediate CA separately Intermediate CAs are cached in order to support servers that fail to sent a complete chain to a root. These certificates should be cached to support these servers but these certificates must not be trusted as trust anchors. Store them separately to prevent confusion between trusted roots and cached intermediates. (cherry-picked from commit 198aca1fb638a2a98e89fb9f284108ad576d0c3b) Bug: 26232830 Change-Id: I520f50729b55fc7412c7d133335bc9e3c190bbf6/
,,0.3034,conscrypt,"Try to get peer hostname from SocketAddress Java 7 added a new method to InetSocketAddress called getHostString() which returns the unresolved host for a given address. This should be suitable for use with SNI as long as it isnt an IP address. This also helps with testing because we can use serialization tricks to rewrite the ""hostname"" field of an already-serialized loopback address. (cherry picked from commit bc8a290f2a0a0e16f078d7c9cf2b2d97edf4d0f2) Bug: 27271561 Change-Id: I9845e57d505712cdfee87d18246a1a3b021deea3/Try to get peer hostname from SocketAddress Java 7 added a new method to InetSocketAddress called getHostString() which returns the unresolved host for a given address. This should be suitable for use with SNI as long as it isnt an IP address. This also helps with testing because we can use serialization tricks to rewrite the ""hostname"" field of an already-serialized loopback address. Bug: 27271561 Change-Id: I9845e57d505712cdfee87d18246a1a3b021deea3/"
,,0.3034,conscrypt,"Try to get peer hostname from SocketAddress Java 7 added a new method to InetSocketAddress called getHostString() which returns the unresolved host for a given address. This should be suitable for use with SNI as long as it isnt an IP address. This also helps with testing because we can use serialization tricks to rewrite the ""hostname"" field of an already-serialized loopback address. (cherry picked from commit bc8a290f2a0a0e16f078d7c9cf2b2d97edf4d0f2) Bug: 27271561 Change-Id: I9845e57d505712cdfee87d18246a1a3b021deea3/Try to get peer hostname from SocketAddress Java 7 added a new method to InetSocketAddress called getHostString() which returns the unresolved host for a given address. This should be suitable for use with SNI as long as it isnt an IP address. This also helps with testing because we can use serialization tricks to rewrite the ""hostname"" field of an already-serialized loopback address. Bug: 27271561 Change-Id: I9845e57d505712cdfee87d18246a1a3b021deea3/"
,,0.5441,conscrypt,"Use SSL_session_reused to check when a session was reused The returned session_id could be exactly the same in the case of TLS session tickets, so use the SSL_session_reused API to determine exactly when a session was reused. (cherry picked from commit 1115fa0f6dbbff3a913fbce39ca98f9a78425c72) Bug: 28751153 Change-Id: Ie82e4d1bb326d7e7deb7981a1e57df393f6c0e1f/Use SSL_session_reused to check when a session was reused The returned session_id could be exactly the same in the case of TLS session tickets, so use the SSL_session_reused API to determine exactly when a session was reused. (cherry picked from commit 1115fa0f6dbbff3a913fbce39ca98f9a78425c72) Bug: 28751153 Change-Id: Ie82e4d1bb326d7e7deb7981a1e57df393f6c0e1f/Use SSL_session_reused to check when a session was reused The returned session_id could be exactly the same in the case of TLS session tickets, so use the SSL_session_reused API to determine exactly when a session was reused. Bug: 28751153 Change-Id: Ie82e4d1bb326d7e7deb7981a1e57df393f6c0e1f/X509_get_pubkey should default to checked exception am: b1fc23213e am: c3c6567dbd am: 6d607ca682 * commit 6d607ca6821b66f4aa91de47704af66a6176f9c7: X509_get_pubkey should default to checked exception Change-Id: I5bd04385b698e430b910eddc7e5f9ff97ba1c9b5/X509_get_pubkey should default to checked exception am: b1fc23213e am: c3c6567dbd * commit c3c6567dbd7e09ceda2fd6469ac548de837e09e1: X509_get_pubkey should default to checked exception Change-Id: Ibd051f3c1f352f7d242f9c399e76452b04886580/X509_get_pubkey should default to checked exception am: b1fc23213e * commit b1fc23213ee8cb2ee86dfb6e97fd34572c7b784c: X509_get_pubkey should default to checked exception Change-Id: I57238a705fad3acc08abdf90fd708173ef363ff8/X509_get_pubkey should default to checked exception An invalid certificate would cause a RuntimeException to crop up instead of a checked exception. Instead throw an InvalidKeyException by default which can be caught and handled. Bug: 28574453 Change-Id: Ib9e92c96a35d2d330a4870175a4eb5fb24fc4026/UniqueMutex for explicit ordering with ScopedSslBio The MUTEX_LOCK / MUTEX_UNLOCK semantics work if you also explicitly clear out resources that were supposed to be cleared before the lock is released. However, with wrapper classes that do it automatically, you cant get the correct ordering. Instead of converting these all to manual acquire and release, convert the mutex handling to use automatic release via UniqueMutex so that ordering is correct with resources that should be protected by the mutex. Thanks to Zhen Song for finding these issues. (cherry picked from commit cdc9e2f091bf353e0bda9195f7fd8a7f1505ccc0) Bug: 28473706 Change-Id: I4b63ce674e0fc343fe156936df7e8f6e3130722f/UniqueMutex for explicit ordering with ScopedSslBio The MUTEX_LOCK / MUTEX_UNLOCK semantics work if you also explicitly clear out resources that were supposed to be cleared before the lock is released. However, with wrapper classes that do it automatically, you cant get the correct ordering. Instead of converting these all to manual acquire and release, convert the mutex handling to use automatic release via UniqueMutex so that ordering is correct with resources that should be protected by the mutex. Thanks to Zhen Song for finding these issues. Bug: 28473706 Change-Id: I4b63ce674e0fc343fe156936df7e8f6e3130722f/Do not dlopen libjavacore from libconscrypt_openjdk_jni Conscrypt JNI library for host OpenJDK should never attempt to dlopen libjavacore.so. Bug: 27954979 Change-Id: Ib8a5795ca22edde4b22576f1bd8eab182df1349d/Prefer AES when hardware acceleration is available ChaCha20-Poly1305 is more efficient in software, but many modern CPUs have acceleration for AES which makes AES-GCM the more preferable choice in terms of throughput and battery consumption (i.e., less CPU cycles per byte). Use the CPU features as reported by BoringSSL to determine when to prioritize AES-GCM over ChaCha20-Poly1305. This should be good enough to say when the trade-off should be made. (cherry picked from commit 4209803a99fe1c26e5ef66c16dc70e302a428e8a) Bug: 26945889 Change-Id: I7ae2f3e422e30e83324c08514509cb3e9a506d97/Prefer AES when hardware acceleration is available ChaCha20-Poly1305 is more efficient in software, but many modern CPUs have acceleration for AES which makes AES-GCM the more preferable choice in terms of throughput and battery consumption (i.e., less CPU cycles per byte). Use the CPU features as reported by BoringSSL to determine when to prioritize AES-GCM over ChaCha20-Poly1305. This should be good enough to say when the trade-off should be made. Bug: 26945889 Change-Id: I7ae2f3e422e30e83324c08514509cb3e9a506d97/Update d2i_SSL_SESSION test expectations Update d2i_SSL_SESSION to only throw IOException and change tests to expect that to happen. Since IOException is declared as a thrown exception, non-test code should already be expecting this. (cherry picked from commit c12c046e706de374276e3f9785cb4afc2e3a02fa) Bug: 27526112 Change-Id: Ic8c1a47debce9cb76221150d050be86d010c6ec3/Update d2i_SSL_SESSION test expectations Update d2i_SSL_SESSION to only throw IOException and change tests to expect that to happen. Since IOException is declared as a thrown exception, non-test code should already be expecting this. Bug: 27526112 Change-Id: Ic8c1a47debce9cb76221150d050be86d010c6ec3/OpenSSLSessionImpl: add better errors when converting am: de8236f4bb * commit de8236f4bb9d70fa4e6a52679b4bf40b04c44f9b: OpenSSLSessionImpl: add better errors when converting/OpenSSLSessionImpl: add better errors when converting Frequently an old SSLSession cache from a different version of OpenSSL or BoringSSL will cause the de-serialization of the SSLSession information to fail. This will spam the logs and happens Frequently when GmsCores ProviderInstaller is used. For now try to extract a bit more useful information from the error thrown by native code and dont bother to print the stack trace since its not fatal. (cherry picked from commit de8236f4bb9d70fa4e6a52679b4bf40b04c44f9b) Bug: 25328662 Change-Id: I0a396a52418e7911b98133b45bbfafcc6651e863/OpenSSLSessionImpl: add better errors when converting Frequently an old SSLSession cache from a different version of OpenSSL or BoringSSL will cause the de-serialization of the SSLSession information to fail. This will spam the logs and happens Frequently when GmsCores ProviderInstaller is used. For now try to extract a bit more useful information from the error thrown by native code and dont bother to print the stack trace since its not fatal. Bug: 25328662 Change-Id: I0a396a52418e7911b98133b45bbfafcc6651e863/"
,,0.2792,conscrypt,"Wrap cached sessions before returning SSLSession should be wrapped so that cached sessions might have the functionality that ExtendedSSLSession offers. This also made the SSLSessionTest fail because the pre-cached instance would be ExtendedSSLSession and the post-cached session would be a regular SSLSession. To keep compatibility with older versions of the platform, it was impossible to directly switch OpenSSLSessionImpl over to ExtendedSSLSession. So the use of a delegate in the case when the platform does have ExtendedSSLSession was required. Since older platform versions still use OpenSSLSessionImpl that extends SSLSession, we just directly inflate the serialized sessions to that. The SSLSessionTest was changed to accomodate the delegate scheme since SSLSession does not have an equals method, the tests for SSLSessionTest were directly comparing object instance equality which fails when the sessions are wrapped in a delegate like this. (cherry picked from commit 710c0817a2a13135b35f14faaef5ca069daf7b6c) Bug: 27123298 Change-Id: Iefbea03a72dbcc76ae0b439cfdcecd817926b7d0/Wrap cached sessions before returning SSLSession should be wrapped so that cached sessions might have the functionality that ExtendedSSLSession offers. This also made the SSLSessionTest fail because the pre-cached instance would be ExtendedSSLSession and the post-cached session would be a regular SSLSession. To keep compatibility with older versions of the platform, it was impossible to directly switch OpenSSLSessionImpl over to ExtendedSSLSession. So the use of a delegate in the case when the platform does have ExtendedSSLSession was required. Since older platform versions still use OpenSSLSessionImpl that extends SSLSession, we just directly inflate the serialized sessions to that. The SSLSessionTest was changed to accomodate the delegate scheme since SSLSession does not have an equals method, the tests for SSLSessionTest were directly comparing object instance equality which fails when the sessions are wrapped in a delegate like this. Bug: 27123298 Change-Id: Iefbea03a72dbcc76ae0b439cfdcecd817926b7d0/"
,,0.6257,conscrypt,"Use SSL_session_reused to check when a session was reused The returned session_id could be exactly the same in the case of TLS session tickets, so use the SSL_session_reused API to determine exactly when a session was reused. (cherry picked from commit 1115fa0f6dbbff3a913fbce39ca98f9a78425c72) Bug: 28751153 Change-Id: Ie82e4d1bb326d7e7deb7981a1e57df393f6c0e1f/Use SSL_session_reused to check when a session was reused The returned session_id could be exactly the same in the case of TLS session tickets, so use the SSL_session_reused API to determine exactly when a session was reused. (cherry picked from commit 1115fa0f6dbbff3a913fbce39ca98f9a78425c72) Bug: 28751153 Change-Id: Ie82e4d1bb326d7e7deb7981a1e57df393f6c0e1f/Use SSL_session_reused to check when a session was reused The returned session_id could be exactly the same in the case of TLS session tickets, so use the SSL_session_reused API to determine exactly when a session was reused. Bug: 28751153 Change-Id: Ie82e4d1bb326d7e7deb7981a1e57df393f6c0e1f/X509_get_pubkey should default to checked exception am: b1fc23213e am: c3c6567dbd am: 6d607ca682 * commit 6d607ca6821b66f4aa91de47704af66a6176f9c7: X509_get_pubkey should default to checked exception Change-Id: I5bd04385b698e430b910eddc7e5f9ff97ba1c9b5/X509_get_pubkey should default to checked exception am: b1fc23213e am: c3c6567dbd * commit c3c6567dbd7e09ceda2fd6469ac548de837e09e1: X509_get_pubkey should default to checked exception Change-Id: Ibd051f3c1f352f7d242f9c399e76452b04886580/X509_get_pubkey should default to checked exception am: b1fc23213e * commit b1fc23213ee8cb2ee86dfb6e97fd34572c7b784c: X509_get_pubkey should default to checked exception Change-Id: I57238a705fad3acc08abdf90fd708173ef363ff8/X509_get_pubkey should default to checked exception An invalid certificate would cause a RuntimeException to crop up instead of a checked exception. Instead throw an InvalidKeyException by default which can be caught and handled. Bug: 28574453 Change-Id: Ib9e92c96a35d2d330a4870175a4eb5fb24fc4026/Prefer AES when hardware acceleration is available ChaCha20-Poly1305 is more efficient in software, but many modern CPUs have acceleration for AES which makes AES-GCM the more preferable choice in terms of throughput and battery consumption (i.e., less CPU cycles per byte). Use the CPU features as reported by BoringSSL to determine when to prioritize AES-GCM over ChaCha20-Poly1305. This should be good enough to say when the trade-off should be made. (cherry picked from commit 4209803a99fe1c26e5ef66c16dc70e302a428e8a) Bug: 26945889 Change-Id: I7ae2f3e422e30e83324c08514509cb3e9a506d97/Prefer AES when hardware acceleration is available ChaCha20-Poly1305 is more efficient in software, but many modern CPUs have acceleration for AES which makes AES-GCM the more preferable choice in terms of throughput and battery consumption (i.e., less CPU cycles per byte). Use the CPU features as reported by BoringSSL to determine when to prioritize AES-GCM over ChaCha20-Poly1305. This should be good enough to say when the trade-off should be made. Bug: 26945889 Change-Id: I7ae2f3e422e30e83324c08514509cb3e9a506d97/Disable the two remaining RC4 cipher suites. RC4 has been deprecated for a while. Its now time to no longer use it by default. Mozilla Firefox and Chrome web browsers have already made the leap. This is a follow-up to 751965bdf66f6ec1ff93b79857cffdeac7756dfd where TLS_RSA_WITH_RC4_128_SHA was disabled for the same reasons. Bug: 24898327 (cherry picked from commit bbe63d5d1d007d7c55c8993c70fc36c78969a2ee) Change-Id: Id13d3ba280139b25fdef057d9afb17ef3edf30cf/Disable the two remaining RC4 cipher suites. RC4 has been deprecated for a while. Its now time to no longer use it by default. Mozilla Firefox and Chrome web browsers have already made the leap. This is a follow-up to 751965bdf66f6ec1ff93b79857cffdeac7756dfd where TLS_RSA_WITH_RC4_128_SHA was disabled for the same reasons. Bug: 24898327 Change-Id: Id716f83b97381aabe69ae982508d9d48e368dc5a/OpenSSLSessionImpl: add better errors when converting am: de8236f4bb * commit de8236f4bb9d70fa4e6a52679b4bf40b04c44f9b: OpenSSLSessionImpl: add better errors when converting/OpenSSLSessionImpl: add better errors when converting Frequently an old SSLSession cache from a different version of OpenSSL or BoringSSL will cause the de-serialization of the SSLSession information to fail. This will spam the logs and happens Frequently when GmsCores ProviderInstaller is used. For now try to extract a bit more useful information from the error thrown by native code and dont bother to print the stack trace since its not fatal. (cherry picked from commit de8236f4bb9d70fa4e6a52679b4bf40b04c44f9b) Bug: 25328662 Change-Id: I0a396a52418e7911b98133b45bbfafcc6651e863/OpenSSLSessionImpl: add better errors when converting Frequently an old SSLSession cache from a different version of OpenSSL or BoringSSL will cause the de-serialization of the SSLSession information to fail. This will spam the logs and happens Frequently when GmsCores ProviderInstaller is used. For now try to extract a bit more useful information from the error thrown by native code and dont bother to print the stack trace since its not fatal. Bug: 25328662 Change-Id: I0a396a52418e7911b98133b45bbfafcc6651e863/Do not use RC4 TLS/SSL cipher suites by default. RC4 has been deprecated for a while. Its now time to no longer use it by default. Mozilla Firefox and Chrome web browsers have already made the leap. Bug: 24898327 (cherry picked from commit 751965bdf66f6ec1ff93b79857cffdeac7756dfd) Change-Id: I63fb45fe62b594ba6311d42be26e214adbab5c20/Do not use RC4 TLS/SSL cipher suites by default. RC4 has been deprecated for a while. Its now time to no longer use it by default. Mozilla Firefox and Chrome web browsers have already made the leap. Bug: 24898327 Change-Id: I65c241d7a30569728d6637a4182371eb066e48e0/"
,,0.2837,conscrypt,"Fix static analysis findings am: ee3b1694a2 am: f2b103a611 am: dee8b5219a * commit dee8b5219ab1d862a8688d8139981fc517bfc1e3: Fix static analysis findings Change-Id: I80b2be8dc827a127aa6ea24eb5bfe18307866941/Fix static analysis findings am: ee3b1694a2 am: f2b103a611 * commit f2b103a6116d87b3996b158b6b38079328dbb29d: Fix static analysis findings Change-Id: Ie3bd3ad86d5d5c461711f576d60411b7cb04c8ad/Fix static analysis findings am: ee3b1694a2 * commit ee3b1694a206350e87a70cc83dd35a1ec2053fd6: Fix static analysis findings Change-Id: If45ad8d307b61162749a390741566ea95e680f57/Fix static analysis findings Add annotations where we intentionally left out and a brief explanation. Add synchronized keyword where needed by overriding methods so they match the parent class. Change-Id: I55591a5902530f1c2fb8cc89260c3df09648ec8e/Allow SSLSession to return IP address In an effort to not use reverse DNS, we no longer return hostnames from sockets created via IP addresses. However, this also made the SSLSession return null when a Socket is created to an IP address instead of an FQDN. While being careful not to trigger another DNS lookup, simply return a textual representation of the IP address connected when the SSLSocket has no knowledge of what the actual FQDN is supposed to be. (cherry picked from commit ee1a154153a1b20d55fc4b0dd9752277f0cd6451) Bug: 27123298 Change-Id: Ie37e214f91e4f005f90da0d4a2aba1cd604d60b7/Allow SSLSession to return IP address In an effort to not use reverse DNS, we no longer return hostnames from sockets created via IP addresses. However, this also made the SSLSession return null when a Socket is created to an IP address instead of an FQDN. While being careful not to trigger another DNS lookup, simply return a textual representation of the IP address connected when the SSLSocket has no knowledge of what the actual FQDN is supposed to be. Bug: 27123298 Change-Id: Ie37e214f91e4f005f90da0d4a2aba1cd604d60b7/Try to get peer hostname from SocketAddress Java 7 added a new method to InetSocketAddress called getHostString() which returns the unresolved host for a given address. This should be suitable for use with SNI as long as it isnt an IP address. This also helps with testing because we can use serialization tricks to rewrite the ""hostname"" field of an already-serialized loopback address. (cherry picked from commit bc8a290f2a0a0e16f078d7c9cf2b2d97edf4d0f2) Bug: 27271561 Change-Id: I9845e57d505712cdfee87d18246a1a3b021deea3/Try to get peer hostname from SocketAddress Java 7 added a new method to InetSocketAddress called getHostString() which returns the unresolved host for a given address. This should be suitable for use with SNI as long as it isnt an IP address. This also helps with testing because we can use serialization tricks to rewrite the ""hostname"" field of an already-serialized loopback address. Bug: 27271561 Change-Id: I9845e57d505712cdfee87d18246a1a3b021deea3/OpenSSLSocketImpl: Dont accidentally create a SocketImpl. We dont call super.close() when were wrapping a socket, so well have to be careful not to call any superclass methods that might end up creating a SocketImpl. bug: 27250522 (cherry picked from commit edae6d2b2efbd85646fea384ec76b11f099a8fca) Change-Id: Iabeade852e6a5c3bc923c7b3601f3edf3322fee2/OpenSSLSocketImpl: Dont accidentally create a SocketImpl. We dont call super.close() when were wrapping a socket, so well have to be careful not to call any superclass methods that might end up creating a SocketImpl. bug: 27250522 Change-Id: Ie98127d002cc3b3dd3dd419b62adcfec47817479/"
,,0.1892,conscrypt,"Return an empty list when no OCSP reponses received Change OpenSSLSessionImpl#getStatusResponses() to return an empty list instead of null. This matches the assumption of the serializing code in AbstractSessionContext. Add a test to make sure that serializing a trivial OpenSSLSessionImpl instance completes without throwing an exception. Test: cts-tradefed run cts android.core.tests.libcore.package.conscrypt Bug: 30751283 Change-Id: If4c3e6a99c080fb3a0fd527c86a5ee8972475718/Fix merge error Somehow the name was changed from ""chain"" to ""certs"" in different versions of the tree, so switch to the ""certs"" designation since it is more accurate. Change-Id: I603dc31d58033351b75a3c9e16906d2074496344/Add getTrustedChainForServer This adds versions of the new checkServerTrusted methods that return the built chain. (cherry picked from commit 8fa0aeece0084290735f81bfcce6c178568ab157) Bug: 27271561 Change-Id: Id03500dab962c949430ee217407bf64fec28adb7/Add end to end tests for CertBlacklist functionality This adds a test public key to the default list of blacklisted CAs (private key in src/test/resources/blacklist_ca_key.pem) and adds a number of end to end tests that TrustManagerImpl enforces blacklists in chains. This test key will also be used by CTS to ensure that the default X509TrustManager properly enforces the blacklist. (cherry picked from commit 1c4c0a23e4cd4f99e87ee770ea462c6351152c13) Bug: 29443053 Change-Id: I67dcb7ef8da490544791a4c90c74ffa7582a1826/Move CertBlacklist to conscrypt CertBlacklist is mostly unchanged from bouncycastle except removing the bouncycastle Digest and Hex dependencies in isPublicKeyBlackListed. (cherry picked from commit ce5bdd0391d93d9a4b1fe7005041271341eb69b2) Bug: 29397721 Change-Id: Icccdcc0e108e8b0c60c47522114749518247a598/Move CertBlacklist to conscrypt CertBlacklist was previously in bouncycastle, but with the enso switch we no longer use their CertPathValidator and so blacklist checking wasnt being done. CertBlacklist is mostly unchanged from bouncycastle except removing the bouncycastle Digest and Hex dependencies in isPublicKeyBlackListed. Bug: 29397721 Change-Id: Icccdcc0e108e8b0c60c47522114749518247a598/"
,,0.1549,conscrypt,"Fix some issues with the ChaCha20 implementation. (#369) First, ScopedByteArray* already throws NullPointerException if it cant load the array, so throwing it again actually causes problems, because youre not allowed to throw an exception while a different exception is pending. Just log that the exception was thrown and why. Second, use OpenSSLCiphers key storage instead of keeping our own copy. Theres no need to keep redundant copies. Third, implement reset() properly. Only reset on final(), not on init(), and dont clear the data from init() when resetting, only the per-operation values./Add missing Java 9 methods for ALPN (#339) Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes renegotiation with sockets (#321) Fixes Fixes send and receive close_notify alerts (#325) As part: * Dont call SSL_clear() when shutting down an SSL, because we need to be able to hand it close_notify messages still. Since both SSLEngine and SSLSocket arent reusable, this is safe. * Return SSL_ERROR_ZERO_RETURN explicitly when it happens, so that we can properly adjust our state in response to a close_notify being received. * Check if there are pending bytes to be sent when wrap() is called, even if the SSLEngine is closed./"
,,0.3329,conscrypt,"Pass NativeSsl references to NativeCrypto (#408) * Pass NativeSsl references to NativeCrypto The existing implementation of passing raw addresses to NativeCrypto can cause issues where the native code may still be executing when the finalizer runs and frees the underlying native resources. A call to NativeSsl.read(), for instance, is not enough to keep the NativeSsl or its owning socket alive, so if its waiting for input the finalizer can run. Switching to passing the Java object to native code keeps the Java object alive for GC purposes, preventing its finalizer from running. As part of this, also move the freeing of NativeSsl instances into a finalizer on NativeSsl instead of on the sockets. The sockets can still become garbage even if the NativeSsl is kept alive, so we only want to free it when the NativeSsl itself is garbage. We will also want to do this for other native objects, but SSL* instances are by far the most-used native objects and the most likely to be used in a long-running I/O operation, so starting here gives us a lot of benefit. * Reliably close objects in tests. * Pass both pointer and Java reference. This allows us to access the SSL* pointer without having to indirect through the Java objects fields, but still prevents the NativeSsl from being GCed while the method is being run. * Explain unsafe finalization fix in NativeCrypto Javadoc./Update more testing infrastructure. (#395) * Update testing build rules. * Move TestKeyStore to org.conscrypt. * Fix up a couple tests so they work in AOSP./"
,,0.2501,conscrypt,"Revert ""Throw SocketException on ERR_SSL_SYSCALL. (#430)"" (#432) Weve had reports from people that depended on ""normal"" connection termination (such as in HTTP where the peer sends data and then closes the TCP connection) returning from read(), and in some cases this change causes read() to throw a SocketException in that circumstance. Rather than causing such a fundamental change in behavior, probably better to just adjust the test to allow for a return. This reverts commit d84f6f57b216ab53dc3a71d30fd2252ce2208c13./Throw SocketException on ERR_SSL_SYSCALL. (#430) SSLSocketTest#test_SSLSocket_interrupt_readWrapperAndCloseUnderlying is failing periodically on our internal continuous builds, and it appears to be happening due to a race condition. The test is testing what happens when an SSLSocket thats wrapping an underlying Socket is blocked on a read and then underlying socket is closed by another thread. There appears to be a race condition between the OS waking up the reading thread and the write of to java.io.FileDescriptors private field. If the reading thread wakes up and proceeds past the check of the file descriptors validity before the field write is visible, then it will attempt to call SSL_read() and get ERR_SSL_SYSCALL, and it responds by returning whereas the test expects SocketException to be thrown (which it does if the file descriptor is invalid). This changes the code to always throw SocketException when ERR_SSL_SYSCALL is reported with a return value of 0, which the BoringSSL docs say happens ""if the transport returned EOF"", which should mean the file descriptor is closed./Add compile option for checking error queue. (#416) We need to ensure that the BoringSSL error stack is clear when returning from native functions, otherwise a later function might inspect the error stack and interpret it incorrectly. Adds the compile option CONSCRYPT_CHECK_ERROR_QUEUE which enables the macro CHECK_ERROR_QUEUE_ON_RETURN. That macro, when enabled, creates a class that checks the error queue is empty in its destructor. The macro has been added to almost every native method called from Java, enforcing that the error queue is empty when we return from native code back to Java code. Adds the gradle property checkErrorQueue to enable the code and adds it to the Travis config. Also fixes a couple places found by this checking that we were failing to clear the error queue after handling errors./Clean up exception throwing in native code. (#417) Change throwExceptionIfNecessary to throwExceptionFromBoringSSLError. The definition changes from throwing an exception if theres an error on the stack to having a precondition of having an error on the stack. This makes its behavior and the expected usage more clear (it always results in an exception pending). This also should let us know if were encountering return-failure-but-dont-stack-an-error situations that we didnt know about. Normalize function names to throwFooException. Ensure that we always return immediately after throwing an exception. Some call sites allowed the exception-throwing branch to fall through to the return statement from a non-throwing branch, which is unclear, since that return statement is useless, and runs the risk of additional code being inserted after the exception. Fixes typo in string (#413)/Mark unused parameters in native_crypto.cc (#412) Our Android build rules generate errors for unused parameters. We cant enable the warnings in the external build rules because BoringSSL has many unused parameters and we build the two together in the external build./Pass NativeSsl references to NativeCrypto (#408) * Pass NativeSsl references to NativeCrypto The existing implementation of passing raw addresses to NativeCrypto can cause issues where the native code may still be executing when the finalizer runs and frees the underlying native resources. A call to NativeSsl.read(), for instance, is not enough to keep the NativeSsl or its owning socket alive, so if its waiting for input the finalizer can run. Switching to passing the Java object to native code keeps the Java object alive for GC purposes, preventing its finalizer from running. As part of this, also move the freeing of NativeSsl instances into a finalizer on NativeSsl instead of on the sockets. The sockets can still become garbage even if the NativeSsl is kept alive, so we only want to free it when the NativeSsl itself is garbage. We will also want to do this for other native objects, but SSL* instances are by far the most-used native objects and the most likely to be used in a long-running I/O operation, so starting here gives us a lot of benefit. * Reliably close objects in tests. * Pass both pointer and Java reference. This allows us to access the SSL* pointer without having to indirect through the Java objects fields, but still prevents the NativeSsl from being GCed while the method is being run. * Explain unsafe finalization fix in NativeCrypto Javadoc./Fix error detection in RSA_generate_key_ex. (#398) RSA_generate_key_ex returns 1 on success and 0 on failure, so we could never detect failures that happened. Also update an allocation failure to throw OutOfMemoryError instead of RuntimeException./Relax RSA key parsing to allow parsing a partial buffer. (#392) Other implementations allow parsing keys out of buffers that are larger than the encoded key structure, including Conscrypt before we changed to EVP_parse_{public,private}_key(), and thereve been public reports of this breaking apps on Android. Switch back to the old behavior./Dont check member of X509_REVOKED instances. (#382) X509_REVOKED doesnt have a double-dereference in get_ext* like X509 and X509_CRL do, so an empty list will have a null pointer there by design, and it wont cause a problem. Indeed, checking it causes a NullPointerException in a valid use case, where otherwise it would return a valid result./Check an X509-like structure submember for nullness. (#380) Weve seen very sporadic crashes due to null pointer dereferencing somewhere inside X509_get_ext_by_critical, and this is the only way I can see that that can happen. X509_get_ext_by_critical passes x->cert_info->extensions to X509v3_get_ext_by_critical, and thats the only pointer that isnt explicitly checked for nullness. These crashes are incredibly rare, so its not out of the realm of possibility for them to be memory corruption or something, but better safe than sorry./"
,,0.3041,conscrypt,"Pass NativeSsl references to NativeCrypto (#408) * Pass NativeSsl references to NativeCrypto The existing implementation of passing raw addresses to NativeCrypto can cause issues where the native code may still be executing when the finalizer runs and frees the underlying native resources. A call to NativeSsl.read(), for instance, is not enough to keep the NativeSsl or its owning socket alive, so if its waiting for input the finalizer can run. Switching to passing the Java object to native code keeps the Java object alive for GC purposes, preventing its finalizer from running. As part of this, also move the freeing of NativeSsl instances into a finalizer on NativeSsl instead of on the sockets. The sockets can still become garbage even if the NativeSsl is kept alive, so we only want to free it when the NativeSsl itself is garbage. We will also want to do this for other native objects, but SSL* instances are by far the most-used native objects and the most likely to be used in a long-running I/O operation, so starting here gives us a lot of benefit. * Reliably close objects in tests. * Pass both pointer and Java reference. This allows us to access the SSL* pointer without having to indirect through the Java objects fields, but still prevents the NativeSsl from being GCed while the method is being run. * Explain unsafe finalization fix in NativeCrypto Javadoc./Fix NullPointerException when IOException is thrown during socket creation (#405)/Throw SSLException from newSsl(). (#401) The constructors already declare that they throw IOException, so I dont see why this should be a problem. Fixes session value API into ProvidedSessionDecorator. (#389) * Move session value API into ProvidedSessionDecorator. The application-level value API on SSLSession objects makes them mutable, which means that using singleton objects (like we do with SSLNullSession) or swapping out implementations (like we do with ActiveSession/SessionSnapshot) doesnt work properly if you actually want to use this API. By moving it into ProvidedSessionDecorator, it can be used without any of these problems. * Rename ProvidedSessionDecorator to ExternalSession./Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.2921,conscrypt,"Pass NativeSsl references to NativeCrypto (#408) * Pass NativeSsl references to NativeCrypto The existing implementation of passing raw addresses to NativeCrypto can cause issues where the native code may still be executing when the finalizer runs and frees the underlying native resources. A call to NativeSsl.read(), for instance, is not enough to keep the NativeSsl or its owning socket alive, so if its waiting for input the finalizer can run. Switching to passing the Java object to native code keeps the Java object alive for GC purposes, preventing its finalizer from running. As part of this, also move the freeing of NativeSsl instances into a finalizer on NativeSsl instead of on the sockets. The sockets can still become garbage even if the NativeSsl is kept alive, so we only want to free it when the NativeSsl itself is garbage. We will also want to do this for other native objects, but SSL* instances are by far the most-used native objects and the most likely to be used in a long-running I/O operation, so starting here gives us a lot of benefit. * Reliably close objects in tests. * Pass both pointer and Java reference. This allows us to access the SSL* pointer without having to indirect through the Java objects fields, but still prevents the NativeSsl from being GCed while the method is being run. * Explain unsafe finalization fix in NativeCrypto Javadoc./Move session value API into ProvidedSessionDecorator. (#389) * Move session value API into ProvidedSessionDecorator. The application-level value API on SSLSession objects makes them mutable, which means that using singleton objects (like we do with SSLNullSession) or swapping out implementations (like we do with ActiveSession/SessionSnapshot) doesnt work properly if you actually want to use this API. By moving it into ProvidedSessionDecorator, it can be used without any of these problems. * Rename ProvidedSessionDecorator to ExternalSession./Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.3408,conscrypt,"Pass NativeSsl references to NativeCrypto (#408) * Pass NativeSsl references to NativeCrypto The existing implementation of passing raw addresses to NativeCrypto can cause issues where the native code may still be executing when the finalizer runs and frees the underlying native resources. A call to NativeSsl.read(), for instance, is not enough to keep the NativeSsl or its owning socket alive, so if its waiting for input the finalizer can run. Switching to passing the Java object to native code keeps the Java object alive for GC purposes, preventing its finalizer from running. As part of this, also move the freeing of NativeSsl instances into a finalizer on NativeSsl instead of on the sockets. The sockets can still become garbage even if the NativeSsl is kept alive, so we only want to free it when the NativeSsl itself is garbage. We will also want to do this for other native objects, but SSL* instances are by far the most-used native objects and the most likely to be used in a long-running I/O operation, so starting here gives us a lot of benefit. * Reliably close objects in tests. * Pass both pointer and Java reference. This allows us to access the SSL* pointer without having to indirect through the Java objects fields, but still prevents the NativeSsl from being GCed while the method is being run. * Explain unsafe finalization fix in NativeCrypto Javadoc./"
,,0.0821,conscrypt,Clean up some ErrorProne warnings. (#493) * Add explicit charset to byte-to-String conversions. * Add to String.split() calls to make its behavior more intuitive. * Add a missing * Clarify an implicit int-to-byte conversion. * Switch StringBuffer to StringBuilder. * Inline an unnecessary function. * Stop depending on FileDescriptors toString./
,,0.0704,conscrypt,"fix ConscryptEngine.closeInbound should free resources (#511) If closeOutbound is invoked prior to closeInbound, resources should be freed./"
,,0.5591,conscrypt,"Enable TLS 1.3 by default (#595) TLS 1.3 has seen successful rollouts in Chrome and Firefox, so were enabling it by default as well. We expect this to result in better security and performance. Detailed changes: Change the default TLS version to 1.3. Callers can still get connections that dont use TLS 1.3 by calling SSLContext.get(""TLSv1.2"") or calling SSLSocket.setEnabledProtocols() or SSLEngine.setEnabledProtocols(). Change to provide the TrustManager by default on OpenJDK. The TrustManager included in OpenJDK versions prior to 11 throws an exception if it encounters a TLS version higher than 1.2, so we need to provide a trust manager that will work with TLS 1.3. The Android trust manager (which is Conscrypt) will work fine, so dont provide ours there. Parameterize SSLSessionContextTest, since session behavior is significantly different on TLS 1.2 and 1.3. Also parameterized a few other test cases whose behavior significantly differs between the versions. Use session tickets in test connections. BoringSSL only supports session resumption using tickets in 1.3, and we want to have resumption functioning in our tests for the most part./Clean up session handling (#594) The session passed to the SSLSessionBindingListener was always an ExternalSession, even when that session was wrapped to support ExtendedSSLSession, which meant that observers saw two different sessions. Refactor putValue() and removeValue() on ExternalSession to take the session so that the wrappers can provide themselves. Add a test for SSLSessionBindingListener calling. Slightly clean up ConscryptEngineSocket.getSession(). It doesnt need to do cache the session from before it tries to handshake, and doing so means that if you call getSession() twice in succession it might return different results for no good reason. Get rid of SSLNullSession.isNullSession, SSLUtils.unwrapSession, and SessionDecorator, since that entire chain was only used in ConscryptEngineSocket.getSession(). Fixes using InetAddress.isNumeric() (#588) This method is likely to be blacklisted from reflective access on Android, and we have an implementation that works acceptably./"
,,0.5575,conscrypt,"Enable TLS 1.3 by default (#595) TLS 1.3 has seen successful rollouts in Chrome and Firefox, so were enabling it by default as well. We expect this to result in better security and performance. Detailed changes: Change the default TLS version to 1.3. Callers can still get connections that dont use TLS 1.3 by calling SSLContext.get(""TLSv1.2"") or calling SSLSocket.setEnabledProtocols() or SSLEngine.setEnabledProtocols(). Change to provide the TrustManager by default on OpenJDK. The TrustManager included in OpenJDK versions prior to 11 throws an exception if it encounters a TLS version higher than 1.2, so we need to provide a trust manager that will work with TLS 1.3. The Android trust manager (which is Conscrypt) will work fine, so dont provide ours there. Parameterize SSLSessionContextTest, since session behavior is significantly different on TLS 1.2 and 1.3. Also parameterized a few other test cases whose behavior significantly differs between the versions. Use session tickets in test connections. BoringSSL only supports session resumption using tickets in 1.3, and we want to have resumption functioning in our tests for the most part./Clean up session handling (#594) The session passed to the SSLSessionBindingListener was always an ExternalSession, even when that session was wrapped to support ExtendedSSLSession, which meant that observers saw two different sessions. Refactor putValue() and removeValue() on ExternalSession to take the session so that the wrappers can provide themselves. Add a test for SSLSessionBindingListener calling. Slightly clean up ConscryptEngineSocket.getSession(). It doesnt need to do cache the session from before it tries to handshake, and doing so means that if you call getSession() twice in succession it might return different results for no good reason. Get rid of SSLNullSession.isNullSession, SSLUtils.unwrapSession, and SessionDecorator, since that entire chain was only used in ConscryptEngineSocket.getSession(). Fixes using InetAddress.isNumeric() (#588) This method is likely to be blacklisted from reflective access on Android, and we have an implementation that works acceptably./"
,,0.3723,conscrypt,"Clean up session handling (#594) The session passed to the SSLSessionBindingListener was always an ExternalSession, even when that session was wrapped to support ExtendedSSLSession, which meant that observers saw two different sessions. Refactor putValue() and removeValue() on ExternalSession to take the session so that the wrappers can provide themselves. Add a test for SSLSessionBindingListener calling. Slightly clean up ConscryptEngineSocket.getSession(). It doesnt need to do cache the session from before it tries to handshake, and doing so means that if you call getSession() twice in succession it might return different results for no good reason. Get rid of SSLNullSession.isNullSession, SSLUtils.unwrapSession, and SessionDecorator, since that entire chain was only used in ConscryptEngineSocket.getSession(). Fixes"
,,0.3992,conscrypt,"Enable TLS 1.3 by default (#595) TLS 1.3 has seen successful rollouts in Chrome and Firefox, so were enabling it by default as well. We expect this to result in better security and performance. Detailed changes: Change the default TLS version to 1.3. Callers can still get connections that dont use TLS 1.3 by calling SSLContext.get(""TLSv1.2"") or calling SSLSocket.setEnabledProtocols() or SSLEngine.setEnabledProtocols(). Change to provide the TrustManager by default on OpenJDK. The TrustManager included in OpenJDK versions prior to 11 throws an exception if it encounters a TLS version higher than 1.2, so we need to provide a trust manager that will work with TLS 1.3. The Android trust manager (which is Conscrypt) will work fine, so dont provide ours there. Parameterize SSLSessionContextTest, since session behavior is significantly different on TLS 1.2 and 1.3. Also parameterized a few other test cases whose behavior significantly differs between the versions. Use session tickets in test connections. BoringSSL only supports session resumption using tickets in 1.3, and we want to have resumption functioning in our tests for the most part./"
,,0.3812,conscrypt,"Clean up session handling (#594) The session passed to the SSLSessionBindingListener was always an ExternalSession, even when that session was wrapped to support ExtendedSSLSession, which meant that observers saw two different sessions. Refactor putValue() and removeValue() on ExternalSession to take the session so that the wrappers can provide themselves. Add a test for SSLSessionBindingListener calling. Slightly clean up ConscryptEngineSocket.getSession(). It doesnt need to do cache the session from before it tries to handshake, and doing so means that if you call getSession() twice in succession it might return different results for no good reason. Get rid of SSLNullSession.isNullSession, SSLUtils.unwrapSession, and SessionDecorator, since that entire chain was only used in ConscryptEngineSocket.getSession(). Fixes"
,,0.3232,conscrypt,"Enable TLS 1.3 by default (#595) TLS 1.3 has seen successful rollouts in Chrome and Firefox, so were enabling it by default as well. We expect this to result in better security and performance. Detailed changes: Change the default TLS version to 1.3. Callers can still get connections that dont use TLS 1.3 by calling SSLContext.get(""TLSv1.2"") or calling SSLSocket.setEnabledProtocols() or SSLEngine.setEnabledProtocols(). Change to provide the TrustManager by default on OpenJDK. The TrustManager included in OpenJDK versions prior to 11 throws an exception if it encounters a TLS version higher than 1.2, so we need to provide a trust manager that will work with TLS 1.3. The Android trust manager (which is Conscrypt) will work fine, so dont provide ours there. Parameterize SSLSessionContextTest, since session behavior is significantly different on TLS 1.2 and 1.3. Also parameterized a few other test cases whose behavior significantly differs between the versions. Use session tickets in test connections. BoringSSL only supports session resumption using tickets in 1.3, and we want to have resumption functioning in our tests for the most part./Move libcore testing classes into testing (#607) When conscrypt was first separated from AOSP some of the AOSP libcore classes were copied into libcore-stub which is compiled against for both the openjdk and platform builds but only used at runtime by the openjdk builds. Unfortunately, those classes clash with internal classes provided by the Android runtime which will cause problems in future releases. This change moves those libcore-stub classes that are only used for testing from their libcore.... package into a org.conscrypt.... package to prevent clashes. It also moves them out of the libcore-stub module and into the testing module so they will be used on both platform and openjdk builds./"
,,0.3378,conscrypt,"Enable TLS 1.3 by default (#595) TLS 1.3 has seen successful rollouts in Chrome and Firefox, so were enabling it by default as well. We expect this to result in better security and performance. Detailed changes: Change the default TLS version to 1.3. Callers can still get connections that dont use TLS 1.3 by calling SSLContext.get(""TLSv1.2"") or calling SSLSocket.setEnabledProtocols() or SSLEngine.setEnabledProtocols(). Change to provide the TrustManager by default on OpenJDK. The TrustManager included in OpenJDK versions prior to 11 throws an exception if it encounters a TLS version higher than 1.2, so we need to provide a trust manager that will work with TLS 1.3. The Android trust manager (which is Conscrypt) will work fine, so dont provide ours there. Parameterize SSLSessionContextTest, since session behavior is significantly different on TLS 1.2 and 1.3. Also parameterized a few other test cases whose behavior significantly differs between the versions. Use session tickets in test connections. BoringSSL only supports session resumption using tickets in 1.3, and we want to have resumption functioning in our tests for the most part./Move libcore testing classes into testing (#607) When conscrypt was first separated from AOSP some of the AOSP libcore classes were copied into libcore-stub which is compiled against for both the openjdk and platform builds but only used at runtime by the openjdk builds. Unfortunately, those classes clash with internal classes provided by the Android runtime which will cause problems in future releases. This change moves those libcore-stub classes that are only used for testing from their libcore.... package into a org.conscrypt.... package to prevent clashes. It also moves them out of the libcore-stub module and into the testing module so they will be used on both platform and openjdk builds./"
,,0.545,conscrypt,"Enable TLS 1.3 by default (#595) TLS 1.3 has seen successful rollouts in Chrome and Firefox, so were enabling it by default as well. We expect this to result in better security and performance. Detailed changes: Change the default TLS version to 1.3. Callers can still get connections that dont use TLS 1.3 by calling SSLContext.get(""TLSv1.2"") or calling SSLSocket.setEnabledProtocols() or SSLEngine.setEnabledProtocols(). Change to provide the TrustManager by default on OpenJDK. The TrustManager included in OpenJDK versions prior to 11 throws an exception if it encounters a TLS version higher than 1.2, so we need to provide a trust manager that will work with TLS 1.3. The Android trust manager (which is Conscrypt) will work fine, so dont provide ours there. Parameterize SSLSessionContextTest, since session behavior is significantly different on TLS 1.2 and 1.3. Also parameterized a few other test cases whose behavior significantly differs between the versions. Use session tickets in test connections. BoringSSL only supports session resumption using tickets in 1.3, and we want to have resumption functioning in our tests for the most part./Clean up session handling (#594) The session passed to the SSLSessionBindingListener was always an ExternalSession, even when that session was wrapped to support ExtendedSSLSession, which meant that observers saw two different sessions. Refactor putValue() and removeValue() on ExternalSession to take the session so that the wrappers can provide themselves. Add a test for SSLSessionBindingListener calling. Slightly clean up ConscryptEngineSocket.getSession(). It doesnt need to do cache the session from before it tries to handshake, and doing so means that if you call getSession() twice in succession it might return different results for no good reason. Get rid of SSLNullSession.isNullSession, SSLUtils.unwrapSession, and SessionDecorator, since that entire chain was only used in ConscryptEngineSocket.getSession(). Fixes using InetAddress.isNumeric() (#588) This method is likely to be blacklisted from reflective access on Android, and we have an implementation that works acceptably./"
,,0.1264,conscrypt,"Fetch local certs when available (#663) Local certificates dont change once theyre set, so we dont have to wait for any particular point to fetch and cache them. If someone requests them, we can just get them from the SSL if available. Also adds tests for getHandshakeSession() on the server side, which is a time when these certs would previously not have been available. Fixes"
,,0.1103,conscrypt,Accommodate KeyStores that dont support getEntry() (#686) The Android Keystore implementation of KeyStore doesnt implement getEntry() and throws UnsupportedOperationException if you try to call it. We can adapt to that by attempting to retrieve the private key and certificate chain manually if the call to getEntry() fails. Fixes
,,0.0628,Frostwire,[desktop] Search Database factory reset on clear failure/
,,0.0588,Frostwire,"[android] applovin 9.4.2, okhttp client npe fixes/"
,,0.075,jna,fix callback allocation on freebsd git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix bug where struct is incorrectly passed by value instead of by reference git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix NPE git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0577,jna,Fix callbacks when DEP is enabled git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0976,OpenDDS,"Multicast Transport work possible deadlocking in MulticastTransport.cpp, added logging to trace assoc failures throughout multicast, removed an unused TransportClient* arg in UdpTransport/UdpTransport updated to remove deadlock scenario between connections_lock_ and DataReaderImpl::publication_handle_lock_ as well as TransportClient::use_datalink_i to use a local copy of the RepoId for remote instead of the reference passed in to alleviate memory access violation caused when stop_accepting_or_connecting deletes callback but use_datalink_i still requires the RepoId to call transport_assoc_done/"
,,0.0981,pljava,"Fix dangling pointer left as GUC boot value. The clearly-intended-but-forgotten static here never caused functional trouble in practice, because the value was valid at the only time it was used. It could, however, cause unexpected bytes to appear in the boot_val column of the pg_settings view, which in turn appeared as character-encoding errors in tests of XML processing with schema_to_xml(pg_catalog, ...) as the source document for testing, which ended up being how this missing static came to light./"
,,0.0951,realm-java,Merge pull request from realm/kg-bug-timeout Unit test to expose timeout in finalizer/Merge branch kg-bug-timeout of github.com:realm/realm-java into kg-bug-timeout/Fixes
,,0.0759,realm-java,Merge pull request from realm/mc/bug/deprecate-getInstance Deprecate Realm.getInstance(Context)/
,,0.096,realm-java,"Wait forever in debugging mode (#3943) * Wait forever in debugging mode It is quite annoy when we stop at a breakpoint the awaitOrFail timeout happens. By checking if the debugger connected, we can know we are actually debugging the test and dont want to be interrupted by the timeout./"
,,0.2312,realm-java,"Merge pull request from realm/merge-461c15-to-master Fix merge from 461c15 to master/Nh/init metadata (#4053) * init ObjectStore metadata, to store File Action * avoid null pointer exception, by passing empty strings/SyncCredentials.accessToken + Integration tests (#4018) This PR adds support for SyncCredentials.accessToken() which is required for I also found a number of issues with the integration tests. They have been fixed as well./Convert to annotations for findbugs exceptions * Clean up code in SyncUser to eliminate FB exception * Add usage for the config files, to the top level README.md * Note UT findbugs failures/Update core to 2.3.0 (#3970) Also update object-store to 99570ba6e0 . * Adapt changes from sync Client::set_error_handler is removed. Session error handler signature changed. * Session error handler called after destruction According to the doc of Session::set_error_handler, the error handler could be called after the session object is destroyed. That is a problem since the java session object can be destroyed at that time. Use a weak_ptr of JavaGlobalRef in the lambda to solve the problem. * Ignore unknown category error from sync/"
,,0.1085,realm-java,"Merge pull request from realm/merge-4eec89-to-master Fix merge from 4eec89 to master/Free the SharedRealm in phantom daemon (#4096) Treat the SharedRealm the same as other native objects. SharedRealm.close will only call Object Store Realm::close without deleting the ShareRealm pointer. Then we dont need the finalizer anymore. Fix . This is related with as well. It is possible that java close the Realm in any of the Object Stores callbacks. To avoid Object Store operating on a invalid SharedRealm pointer, binding should try to make sure after callbacks. However, it cannot be totally avoided since user could set the Realm instance to null and the instance can be GCed at any time. It is still something should be considered in the Object Store implementation./Merge pull request from realm/merge-5d1d1f-to-master Fix merge from 5d1d1f to master/Merge pull request from realm/merge-a94bb3-to-master Fix merge from a94bb3 to master/Enable and fix warnings (#3961) Adapt the same warning options from object store/Fix concurrency problem with collection list/Workaround for the Alooper and postAtFrontQueue See with snapshot to support stable iterator But something is going wrong, more like a bug in core than Object Store./"
,,0.2151,realm-java,"Fix typo on error message (#4113)/Fix typo on error message/Print the path when get File::AccessError (#4068)/Merge pull request from realm/merge-a94bb3-to-master Fix merge from a94bb3 to master/Enable and fix warnings (#3961) Adapt the same warning options from object store/RAII wrapper for some JNI resources (#3959) * Move the global jvm pointer to JniUtils and add some helper functions. * Wrapper for jmethodID, global weak ref. * Refactor the wrapper for the local ref. * Before using the global weak ref, always try to acquire a local ref first since until Android 4.0 weak global references could only be passed to NewLocalRef, NewGlobalRef, and DeleteWeakGlobalRef. See for more details. This fix ./Add the underlying information on RealmFileException. (#3940) Add the underlying information on RealmFileException to help investigating Incompatible lock file issue./Throw correct exception for multiple logged in users (#3921)/Convert IncorrectThreadException/Handling Results exceptions. Adding support for contains/index_of/"
,,0.204,realm-java,"RAII wrapper for some JNI resources (#3959) * Move the global jvm pointer to JniUtils and add some helper functions. * Wrapper for jmethodID, global weak ref. * Refactor the wrapper for the local ref. * Before using the global weak ref, always try to acquire a local ref first since until Android 4.0 weak global references could only be passed to NewLocalRef, NewGlobalRef, and DeleteWeakGlobalRef. See for more details. This fix ./Workaround for the Alooper and postAtFrontQueue See"
,,0.2101,realm-java,"RAII wrapper for some JNI resources (#3959) * Move the global jvm pointer to JniUtils and add some helper functions. * Wrapper for jmethodID, global weak ref. * Refactor the wrapper for the local ref. * Before using the global weak ref, always try to acquire a local ref first since until Android 4.0 weak global references could only be passed to NewLocalRef, NewGlobalRef, and DeleteWeakGlobalRef. See for more details. This fix ./"
,,0.2992,realm-java,"Merge pull request from realm/merge-461c15-to-master Fix merge from 461c15 to master/Nh/init metadata (#4053) * init ObjectStore metadata, to store File Action * avoid null pointer exception, by passing empty strings/Nh/fixes token renew (#4040) * fixes and fixes pull request from realm/merge-a94bb3-to-master Fix merge from a94bb3 to master/Enable and fix warnings (#3961) Adapt the same warning options from object store/Update core to 2.3.0 (#3970) Also update object-store to 99570ba6e0 . * Adapt changes from sync Client::set_error_handler is removed. Session error handler signature changed. * Session error handler called after destruction According to the doc of Session::set_error_handler, the error handler could be called after the session object is destroyed. That is a problem since the java session object can be destroyed at that time. Use a weak_ptr of JavaGlobalRef in the lambda to solve the problem. * Ignore unknown category error from sync/RAII wrapper for some JNI resources (#3959) * Move the global jvm pointer to JniUtils and add some helper functions. * Wrapper for jmethodID, global weak ref. * Refactor the wrapper for the local ref. * Before using the global weak ref, always try to acquire a local ref first since until Android 4.0 weak global references could only be passed to NewLocalRef, NewGlobalRef, and DeleteWeakGlobalRef. See for more details. This fix ./Merge pull request from realm/merge-8c5f4c-to-master Fix merge from 8c5f4c to master/Update core, sync and object store (#3904) Core to v2.2.0. Sync to v1.0.0-BETA-5.0. Adapt changes from latest object store. REALM_ENABLE_SYNC should be boolean macro Create Realm sync history without having a ObjectStore SyncConfig object. deleteRealm test fix. The single notifier thread is enabled, the .note file is not created in the Realm file directory anymore. Update ObjectStore submodule to 300a2d6f28 which is committed in"
,,0.3272,realm-java,"Merge pull request from realm/merge-461c15-to-master Fix merge from 461c15 to master/Nh/init metadata (#4053) * init ObjectStore metadata, to store File Action * avoid null pointer exception, by passing empty strings/Merge pull request from realm/merge-a94bb3-to-master Fix merge from a94bb3 to master/Enable and fix warnings (#3961) Adapt the same warning options from object store/Update core to 2.3.0 (#3970) Also update object-store to 99570ba6e0 . * Adapt changes from sync Client::set_error_handler is removed. Session error handler signature changed. * Session error handler called after destruction According to the doc of Session::set_error_handler, the error handler could be called after the session object is destroyed. That is a problem since the java session object can be destroyed at that time. Use a weak_ptr of JavaGlobalRef in the lambda to solve the problem. * Ignore unknown category error from sync/RAII wrapper for some JNI resources (#3959) * Move the global jvm pointer to JniUtils and add some helper functions. * Wrapper for jmethodID, global weak ref. * Refactor the wrapper for the local ref. * Before using the global weak ref, always try to acquire a local ref first since until Android 4.0 weak global references could only be passed to NewLocalRef, NewGlobalRef, and DeleteWeakGlobalRef. See for more details. This fix ./"
,,0.066,realm-java,Merge pull request from realm/merge-f2144d-to-master-4.0 Fix merge from f2144d to master-4.0/fixes (#4862) * fixes admin users not connection correctly to ROS (#4760)/
,,0.1102,realm-java,Nh/android support ssl (#4591) * Expose two new SyncConfiguration options to 1: Disable TLS verification. 2: provide the trusted root CA to validate the RealmObjectServer TLS connection (since OpenSSL doesnt have access to Android keystore) fixes
,,0.1173,realm-java,Nh/android support ssl (#4591) * Expose two new SyncConfiguration options to 1: Disable TLS verification. 2: provide the trusted root CA to validate the RealmObjectServer TLS connection (since OpenSSL doesnt have access to Android keystore) fixes
,,0.0758,realm-java,Remove io.realm.internal.OutOfMemoryError/Helper class for throwing java exception from JNI (#4636)/
,,0.0813,realm-java,Add support for native error category and code (#6379)/
,,0.0792,realm-java,Add support for native error category and code (#6379)/
,,0.0751,realm-java,Add support for native error category and code (#6379)/
,,0.0813,realm-java,Add support for native error category and code (#6379)/
,,0.065,rocksdb,cleanup exception text/- hdfs cleanup; fix to NewDirectory to comply with definition in env.h fix compile error with env_test; static casts added/
,,0.0556,rocksdb,Merge pull request from EugenePig/java8 suppress JDK8 errors for JDK8 errors for
