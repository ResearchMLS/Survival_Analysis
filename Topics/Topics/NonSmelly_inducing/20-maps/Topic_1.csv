Topic_no,Keywords,Contrib,System,Text
1,"test, add, unit, fail, performance, exist, close, update, implement, main, failure, remove, main_file, case, issue, make, string, attempt, cacert, support",0.0753,conscrypt,"Most callers of toLowerCase/toUpperCase should pass Locale.US to avoid problems in Turkey. Some callers should be replaced with equalsIgnoreCase instead. The one exception is StreamTokenizer, where the RI uses the default locale, which is arguably the right thing to do. No-one cares because thats legacy API, but Ive added a test anyway. Ive left HttpCookie and GeneralName for my co-conspirators because the appropriate resolutions arent as obvious there... Bug: 3325637 Change-Id: Ia37a1caaa91b11763ae43e61e445adb45c30f793/"
,,0.5696,conscrypt,"Make CertInstaller installed CA certs trusted by applications via default TrustManager (2 of 6) frameworks/base Adding IKeyChainService APIs for CertInstaller and Settings use keystore/java/android/security/IKeyChainService.aidl libcore Improve exceptions to include more information luni/src/main/java/javax/security/auth/x500/X500Principal.java Move guts of RootKeyStoreSpi to TrustedCertificateStore, leaving only KeyStoreSpi methods. Added support for adding user CAs in a separate directory for system. Added support for removing system CAs by placing a copy in a sytem directory luni/src/main/java/org/apache/harmony/xnet/provider/jsse/RootKeyStoreSpi.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustedCertificateStore.java Formerly static methods on RootKeyStoreSpi are now instance methods on TrustedCertificateStore luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java Added test for NativeCrypto.X509_NAME_hash_old and X509_NAME_hash to make sure the implementing algorithms doe not change since TrustedCertificateStore depend on X509_NAME_hash_old (OpenSSL changed the algorithm from MD5 to SHA1 when moving from 0.9.8 to 1.0.0) luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java Extensive test of new TrustedCertificateStore behavior luni/src/test/java/org/apache/harmony/xnet/provider/jsse/TrustedCertificateStoreTest.java TestKeyStore improvements Refactored TestKeyStore to provide simpler createCA method (and internal createCertificate) Cleaned up to remove use of BouncyCastle specific X509Principal in the TestKeyStore API when the public X500Principal would do. Cleaned up TestKeyStore support methods to not throw Exception to remove need for static blocks for catch clauses in tests. support/src/test/java/libcore/java/security/TestKeyStore.java luni/src/test/java/libcore/java/security/KeyStoreTest.java luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java Added private PKIXParameters contructor for use by IndexedPKIXParameters to avoid wart of having to lookup and pass a TrustAnchor to satisfy the super-class sanity check. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/IndexedPKIXParameters.java luni/src/main/java/java/security/cert/PKIXParameters.java packages/apps/CertInstaller Change CertInstaller to call IKeyChainService.installCertificate for CA certs to pass them to the KeyChainServiceTest which will make them available to all apps through the TrustedCertificateStore. Change PKCS12 extraction to use AsyncTask. src/com/android/certinstaller/CertInstaller.java Added installCaCertsToKeyChain and hasCaCerts accessor for use by CertInstaller. Use hasUserCertificate() internally. Cleanup coding style. src/com/android/certinstaller/CredentialHelper.java packages/apps/KeyChain Added MANAGE_ACCOUNTS so that IKeyChainService.reset implementation can remove KeyChain accounts. AndroidManifest.xml Implement new IKeyChainService methods: Added IKeyChainService.installCaCertificate to install certs provided by CertInstaller using the TrustedCertificateStore. Added IKeyChainService.reset to allow Settings to remove the KeyChain accounts so that any app granted access to keystore credentials are revoked when the keystore is reset. src/com/android/keychain/KeyChainService.java packages/apps/Settings Changed com.android.credentials.RESET credential reset action to also call IKeyChainService.reset to remove any installed user CAs and remove KeyChain accounts to have AccountManager revoke credential granted to private keys removed during the RESET. src/com/android/settings/CredentialStorage.java Added toast text value for failure case res/values/strings.xml system/core Have init create world readable /data/misc/keychain to allow apps to access user added CA certificates installed by the CertInstaller. rootdir/init.rc Change-Id: Ief57672eea38b3eece23b14c94dedb9ea4713744/Avoid loading all CA certs into Zygote memory, lazily load instead (2 of 3) Previously the CA certs stored in the BKS KeyStore at /system/etc/security/cacerts.bks was loaded in the Zygote. As the the number of CAs are started to increase, this is causing more and more memory to be used for rarely used CAs. The new AndroidCAStore KeyStore implementation reads the CAs as needed out of individual PEM certificate files. The files can be efficiently found because they are named based on a hash CAs subject name, similar to OpenSSL. Bug: 1109242 Details: build Removing old cacerts.bks from GRANDFATHERED_ALL_PREBUILT and adding new cacerts directory to core PRODUCT_PACKAGES core/legacy_prebuilts.mk target/product/core.mk libcore cacerts build changes. Move cacerts prebuilt logic to new CaCerts.mk from NativeCode.mk where it didnt make sense. Updated Android.mks dalvik-host target to install new cacerts files. Android.mk CaCerts.mk NativeCode.mk Remove old cacerts.bks and add remove certimport.sh script used to generate it. Preserved the useful comments from certimport.sh in the new README.cacerts luni/src/main/files/cacerts.bks luni/src/main/files/certimport.sh luni/src/main/files/README.cacerts Recanonicalize cacerts files using updated vendor/google/tools/cacerts/certimport.py (See below discussion of certimport.py changes for details) luni/src/main/files/cacerts/00673b5b.0 luni/src/main/files/cacerts/03e16f6c.0 luni/src/main/files/cacerts/08aef7bb.0 luni/src/main/files/cacerts/0d188d89.0 luni/src/main/files/cacerts/10531352.0 luni/src/main/files/cacerts/111e6273.0 luni/src/main/files/cacerts/1155c94b.0 luni/src/main/files/cacerts/119afc2e.0 luni/src/main/files/cacerts/11a09b38.0 luni/src/main/files/cacerts/12d55845.0 luni/src/main/files/cacerts/17b51fe6.0 luni/src/main/files/cacerts/1920cacb.0 luni/src/main/files/cacerts/1dac3003.0 luni/src/main/files/cacerts/1dbdda5b.0 luni/src/main/files/cacerts/1dcd6f4c.0 luni/src/main/files/cacerts/1df5ec47.0 luni/src/main/files/cacerts/1e8e7201.0 luni/src/main/files/cacerts/1eb37bdf.0 luni/src/main/files/cacerts/219d9499.0 luni/src/main/files/cacerts/23f4c490.0 luni/src/main/files/cacerts/27af790d.0 luni/src/main/files/cacerts/2afc57aa.0 luni/src/main/files/cacerts/2e8714cb.0 luni/src/main/files/cacerts/2fa87019.0 luni/src/main/files/cacerts/2fb1850a.0 luni/src/main/files/cacerts/33815e15.0 luni/src/main/files/cacerts/343eb6cb.0 luni/src/main/files/cacerts/399e7759.0 luni/src/main/files/cacerts/3a3b02ce.0 luni/src/main/files/cacerts/3ad48a91.0 luni/src/main/files/cacerts/3c58f906.0 luni/src/main/files/cacerts/3c860d51.0 luni/src/main/files/cacerts/3d441de8.0 luni/src/main/files/cacerts/3e7271e8.0 luni/src/main/files/cacerts/418595b9.0 luni/src/main/files/cacerts/455f1b52.0 luni/src/main/files/cacerts/46b2fd3b.0 luni/src/main/files/cacerts/48478734.0 luni/src/main/files/cacerts/4d654d1d.0 luni/src/main/files/cacerts/4e18c148.0 luni/src/main/files/cacerts/4fbd6bfa.0 luni/src/main/files/cacerts/5021a0a2.0 luni/src/main/files/cacerts/5046c355.0 luni/src/main/files/cacerts/524d9b43.0 luni/src/main/files/cacerts/56b8a0b6.0 luni/src/main/files/cacerts/57692373.0 luni/src/main/files/cacerts/58a44af1.0 luni/src/main/files/cacerts/594f1775.0 luni/src/main/files/cacerts/5a3f0ff8.0 luni/src/main/files/cacerts/5a5372fc.0 luni/src/main/files/cacerts/5cf9d536.0 luni/src/main/files/cacerts/5e4e69e7.0 luni/src/main/files/cacerts/60afe812.0 luni/src/main/files/cacerts/635ccfd5.0 luni/src/main/files/cacerts/67495436.0 luni/src/main/files/cacerts/69105f4f.0 luni/src/main/files/cacerts/6adf0799.0 luni/src/main/files/cacerts/6e8bf996.0 luni/src/main/files/cacerts/6fcc125d.0 luni/src/main/files/cacerts/72f369af.0 luni/src/main/files/cacerts/72fa7371.0 luni/src/main/files/cacerts/74c26bd0.0 luni/src/main/files/cacerts/75680d2e.0 luni/src/main/files/cacerts/7651b327.0 luni/src/main/files/cacerts/76579174.0 luni/src/main/files/cacerts/7999be0d.0 luni/src/main/files/cacerts/7a481e66.0 luni/src/main/files/cacerts/7a819ef2.0 luni/src/main/files/cacerts/7d3cd826.0 luni/src/main/files/cacerts/7d453d8f.0 luni/src/main/files/cacerts/81b9768f.0 luni/src/main/files/cacerts/8470719d.0 luni/src/main/files/cacerts/84cba82f.0 luni/src/main/files/cacerts/85cde254.0 luni/src/main/files/cacerts/86212b19.0 luni/src/main/files/cacerts/87753b0d.0 luni/src/main/files/cacerts/882de061.0 luni/src/main/files/cacerts/895cad1a.0 luni/src/main/files/cacerts/89c02a45.0 luni/src/main/files/cacerts/8f7b96c4.0 luni/src/main/files/cacerts/9339512a.0 luni/src/main/files/cacerts/9685a493.0 luni/src/main/files/cacerts/9772ca32.0 luni/src/main/files/cacerts/9d6523ce.0 luni/src/main/files/cacerts/9dbefe7b.0 luni/src/main/files/cacerts/9f533518.0 luni/src/main/files/cacerts/a0bc6fbb.0 luni/src/main/files/cacerts/a15b3b6b.0 luni/src/main/files/cacerts/a3896b44.0 luni/src/main/files/cacerts/a7605362.0 luni/src/main/files/cacerts/a7d2cf64.0 luni/src/main/files/cacerts/ab5346f4.0 luni/src/main/files/cacerts/add67345.0 luni/src/main/files/cacerts/b0f3e76e.0 luni/src/main/files/cacerts/bc3f2570.0 luni/src/main/files/cacerts/bcdd5959.0 luni/src/main/files/cacerts/bda4cc84.0 luni/src/main/files/cacerts/bdacca6f.0 luni/src/main/files/cacerts/bf64f35b.0 luni/src/main/files/cacerts/c0cafbd2.0 luni/src/main/files/cacerts/c215bc69.0 luni/src/main/files/cacerts/c33a80d4.0 luni/src/main/files/cacerts/c527e4ab.0 luni/src/main/files/cacerts/c7e2a638.0 luni/src/main/files/cacerts/c8763593.0 luni/src/main/files/cacerts/ccc52f49.0 luni/src/main/files/cacerts/cdaebb72.0 luni/src/main/files/cacerts/cf701eeb.0 luni/src/main/files/cacerts/d16a5865.0 luni/src/main/files/cacerts/d537fba6.0 luni/src/main/files/cacerts/d64f06f3.0 luni/src/main/files/cacerts/d777342d.0 luni/src/main/files/cacerts/d8274e24.0 luni/src/main/files/cacerts/dbc54cab.0 luni/src/main/files/cacerts/ddc328ff.0 luni/src/main/files/cacerts/e48193cf.0 luni/src/main/files/cacerts/e60bf0c0.0 luni/src/main/files/cacerts/e775ed2d.0 luni/src/main/files/cacerts/e7b8d656.0 luni/src/main/files/cacerts/e8651083.0 luni/src/main/files/cacerts/ea169617.0 luni/src/main/files/cacerts/eb375c3e.0 luni/src/main/files/cacerts/ed049835.0 luni/src/main/files/cacerts/ed524cf5.0 luni/src/main/files/cacerts/ee7cd6fb.0 luni/src/main/files/cacerts/f4996e82.0 luni/src/main/files/cacerts/f58a60fe.0 luni/src/main/files/cacerts/f61bff45.0 luni/src/main/files/cacerts/f80cc7f6.0 luni/src/main/files/cacerts/fac084d7.0 luni/src/main/files/cacerts/facacbc6.0 luni/src/main/files/cacerts/fde84897.0 luni/src/main/files/cacerts/ff783690.0 Change IntegralToString.intToHexString to take width argument to allow for leading zero padding. Updated existing callers to specify 0 padding desired. Add testing of new padding functionality. luni/src/main/java/java/lang/Character.java luni/src/main/java/java/lang/Integer.java luni/src/main/java/java/lang/IntegralToString.java luni/src/test/java/libcore/java/lang/IntegralToStringTest.java Improved to throw Exceptions with proper causes luni/src/main/java/java/security/KeyStore.java luni/src/main/java/java/security/Policy.java luni/src/main/java/java/security/cert/CertificateFactory.java luni/src/main/java/javax/crypto/Cipher.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSignature.java Indentation fixes luni/src/main/java/java/security/SecureRandom.java Fix X509CRLSelector.getIssuerNames to clone result and added test to cover this. luni/src/main/java/java/security/cert/X509CRLSelector.java luni/src/test/java/libcore/java/security/cert/X509CRLSelectorTest.java Fixed bug where we created an X500Principal via a String representation instead of from its original encoded bytes. This led to a difficult to track down bug where CA 418595b9.0 where the NativeCode.X509_NAME_hash of a Harmony (but not BouncyCastle) X509Certificate would not hash to the expected value because the encoded form used an ASN.1 PrintableString instead of the UTF8String form found in the original certificate. luni/src/main/java/org/apache/harmony/security/x501/Name.java Add a new RootKeyStoreSpi and register it as the AndroidCAStore. This new read-only KeyStore implementation that looks for certificates in $ANDROID_ROOT/etc/security/cacerts/ directory, which is /system/etc/security/cacerts/ on devices. The files are stored in the directory based on the older md5 based OpenSSL X509_NAME_hash function (now referred to as X509_NAME_hash_old in OpenSSL 1.0) luni/src/main/java/org/apache/harmony/xnet/provider/jsse/RootKeyStoreSpi.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/JSSEProvider.java Added OpenSSL compatible X509_NAME_hash and X509_NAME_hash_old functions for producting an int hash value from an X500Principal. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java Changed TrustManagerFactoryImpl to use AndroidCAStore for its default KeyStore luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerFactoryImpl.java Changed TrustManagerImpl to be AndroidCAStore aware. If it detects an AndroidCAStore, it avoids generating the acceptedIssuers array at constructions, since doing so would force us to parse all certificates in the store and the value is only typically used by SSLServerSockets when requesting a client certifcate. Because we dont load all the trusted CAs into the IndexedPKIXParameters at startup in the case of AndroidCAStore, we now check for new CAs when examining the cert chain for unnecessary TrustAnchors and for a newly discovered issuer at the end of the chain before validation. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java Updated KeyStoreTest to cope with read only KeyStore. Update test_cacerts_bks (now renamed test_cacerts) to use the AndroidCAStore for validating system CA certificate validity. Register AndroidCAStore as an expected KeyStore type with StandardNames. luni/src/test/java/libcore/java/security/KeyStoreTest.java support/src/test/java/libcore/java/security/StandardNames.java Added test of X500Principal serialization while investigating Name encoding issue. However, the actual Name bug was found and verified by the new test_cacerts test. luni/src/test/java/libcore/javax/security/auth/x500/X500PrincipalTest.java vendor/google Change canonical format for checked in cacerts to have PEM certificate at the top, as required by Harmonys X.509 CertificateFactory. tools/cacerts/certimport.py Change-Id: If0c9de430f13babb07f96a1177897c536f3db08d/"
,,0.1326,conscrypt,"Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes renegotiation with sockets (#321) Fixes Fixes utility method for identifying a Conscrypt Provider. (#313) Also flattening the Conscrypt class. The current structure with subclasses helps to organize, but it makes API stability harder. Partially addresses"
,,0.1535,conscrypt,Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.1554,conscrypt,Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.1591,conscrypt,Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.1535,conscrypt,Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.1554,conscrypt,Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.1371,conscrypt,Add missing Java 9 methods for ALPN (#339) Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.1407,conscrypt,Add missing Java 9 methods for ALPN (#339) Fixes support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.1535,conscrypt,Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.1535,conscrypt,Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes
,,0.1496,conscrypt,Adding support for Java 9 server-side ALPN protocol selection. (#319) Java 9 adds a setHandshakeApplicationProtocolSelector method to both SSLEngine and SSLSocket that allows the application to provide a BiFunction to choose the protocol. This PR attempts to provide support for this method while still maintaining backward compatibility with ealier versions of Java. Fixes renegotiation with sockets (#321) Fixes Fixes
,,0.2216,conscrypt,"Update testing infrastructure. (#393) This is part one of migrating the source of truth for tests from Conscrypt to AOSP. This sets up the basic layout we want to use: tests under org.conscrypt.** that test the installed provider (or all installed providers, for future crypto-related tests), and a separate test suite class used by the Gradle build that installs the provider. That way these tests can easily be used in any environment that can properly install the provider to be tested, including AOSP. This also updates the test classes with a few changes that had been made to AOSP, mostly additional test cases./"
,,0.1059,conscrypt,"Provide TrustManagerFactory (#516) This is necessary for users who want to enable TLS 1.3, since the TrustManagerFactory implementation shipped with OpenJDK throws an exception if it encounters an SSLSocket or SSLEngine thats negotiated TLS 1.3. Use our TrustManager in tests. Also adds a HostnameVerifier in the tests that does the simplest thing, because our TrustManager verifies hostnames by default, whereas the OpenJDK one doesnt, and the bundled HostnameVerifier on OpenJDK just fails to verify anything./"
,,0.1209,conscrypt,"Provide TrustManagerFactory (#516) This is necessary for users who want to enable TLS 1.3, since the TrustManagerFactory implementation shipped with OpenJDK throws an exception if it encounters an SSLSocket or SSLEngine thats negotiated TLS 1.3. Use our TrustManager in tests. Also adds a HostnameVerifier in the tests that does the simplest thing, because our TrustManager verifies hostnames by default, whereas the OpenJDK one doesnt, and the bundled HostnameVerifier on OpenJDK just fails to verify anything./"
,,0.1074,conscrypt,"Provide TrustManagerFactory (#516) This is necessary for users who want to enable TLS 1.3, since the TrustManagerFactory implementation shipped with OpenJDK throws an exception if it encounters an SSLSocket or SSLEngine thats negotiated TLS 1.3. Use our TrustManager in tests. Also adds a HostnameVerifier in the tests that does the simplest thing, because our TrustManager verifies hostnames by default, whereas the OpenJDK one doesnt, and the bundled HostnameVerifier on OpenJDK just fails to verify anything./"
,,0.0669,conscrypt,Restore C++ API to use to CompatibilityCloseMonitor. Still needed for unbundled Conscrypt on Android versions which do not have a C API to AsynchronousCloseMonitor. Test: ./gradlew check/
,,0.0609,frostwire,[all] final refactor to new BTEngine/
,,0.0717,frostwire,[common] added unit test for monova and partial fix to search (still not working)/
,,0.0765,frostwire,[desktop] remove redundant final modifier/
,,0.0723,frostwire,[desktop] remove redundant final modifier/
,,0.0765,frostwire,[desktop] remove redundant final modifier/
,,0.0897,frostwire,"[common] UrlUtils.getFastestMirror() false negative output fixed, formatting/[common] new UrlUtils.getFastestMirrorDomain(final HttpClient final String[] mirrors, final int minResponseTimeInMs)/"
,,0.0534,jna,Many changes/
,,0.0759,jna,fix failing test on XP/
,,0.1017,jna,"Clarify some javadoc/include error string in LastErrorException, if available, update wince native/re-enable WCE failing tests, fixes to allow proper phoneME operation w/r/t AWT classes/"
,,0.0702,jna,fix 2 failing w32ce tests/
,,0.0792,jna,amd64/linux pthread investigations/fix JNI containing classname in performance test/
,,0.066,jna,attempt to reproduce issue
,,0.1033,jna,fix win32 bug toggling windows transparent/opaque git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/no need to set layers transparent on osx git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/move double buffer handling to a more appropriate location git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.27699999999999997,jna,"Added `com.sun.jna.platform.WindowUtils.getAllWindows`, `getWindowIcon`, `getIconSize`, `getWindowTitle`, `getPRocessFilePath` and `getWindowLocationAndSize`. Request textual message of current last error code `com.sun.jna.platform.win32.Kernel32Util.getLastErrorMessage`. Added `com.sun.jna.platform.win32.GDI32.GetObject`. Added `com.sun.jna.platform.win32.Psapi` with `GetModuleFileNameEx`- Added `com.sun.jna.platform.win32.User32.GetIconInfo`, `SendMessageTimeout`, `GetClassLongPtr`. Added `com.sun.jna.platform.win32.WinGDI.ICONINFO` and `BITMAP`. Added process-specific access rights constants in `com.sun.jna.platform.win32.WinNT`. Added specific constants for request of icon settings in `com.sun.jna.platform.win32.WinUser`. Added constants for `GetClassLong`, `SendMessageTimeout` and `GetIconInfo` in `com.sun.jna.platform.win32.WinUser`./"
,,0.0757,jna,changes including update to jna 4.0/remove superfluous Structure.ByReference usage/
,,0.0673,jna,Read/WriteProcessMemory and tests/
,,0.27699999999999997,jna,"Added `com.sun.jna.platform.WindowUtils.getAllWindows`, `getWindowIcon`, `getIconSize`, `getWindowTitle`, `getPRocessFilePath` and `getWindowLocationAndSize`. Request textual message of current last error code `com.sun.jna.platform.win32.Kernel32Util.getLastErrorMessage`. Added `com.sun.jna.platform.win32.GDI32.GetObject`. Added `com.sun.jna.platform.win32.Psapi` with `GetModuleFileNameEx`- Added `com.sun.jna.platform.win32.User32.GetIconInfo`, `SendMessageTimeout`, `GetClassLongPtr`. Added `com.sun.jna.platform.win32.WinGDI.ICONINFO` and `BITMAP`. Added process-specific access rights constants in `com.sun.jna.platform.win32.WinNT`. Added specific constants for request of icon settings in `com.sun.jna.platform.win32.WinUser`. Added constants for `GetClassLong`, `SendMessageTimeout` and `GetIconInfo` in `com.sun.jna.platform.win32.WinUser`./"
,,0.0813,jna,add array wrapping tests git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0763,jna,"re-enable WCE failing tests, fixes to allow proper phoneME operation w/r/t AWT classes/"
,,0.1023,jna,note platforms where test fails/attach native thread as daemon to avoid tests hanging on exit/w32 implementation/auto-cleanup of attached callback threads/address issue
,,0.0744,jna,fix some more failing tests/down to 24 failures (4 crashes) on w32ce-arm/
,,0.2725,jna,"Fix under JRE the process is java.exe, not javaw.exe./Added `com.sun.jna.platform.WindowUtils.getAllWindows`, `getWindowIcon`, `getIconSize`, `getWindowTitle`, `getPRocessFilePath` and `getWindowLocationAndSize`. Request textual message of current last error code `com.sun.jna.platform.win32.Kernel32Util.getLastErrorMessage`. Added `com.sun.jna.platform.win32.GDI32.GetObject`. Added `com.sun.jna.platform.win32.Psapi` with `GetModuleFileNameEx`- Added `com.sun.jna.platform.win32.User32.GetIconInfo`, `SendMessageTimeout`, `GetClassLongPtr`. Added `com.sun.jna.platform.win32.WinGDI.ICONINFO` and `BITMAP`. Added process-specific access rights constants in `com.sun.jna.platform.win32.WinNT`. Added specific constants for request of icon settings in `com.sun.jna.platform.win32.WinUser`. Added constants for `GetClassLong`, `SendMessageTimeout` and `GetIconInfo` in `com.sun.jna.platform.win32.WinUser`./"
,,0.0782,jna,"re-enable WCE failing tests, fixes to allow proper phoneME operation w/r/t AWT classes/"
,,0.0597,jna,catch all AWT loading errors/
,,0.0744,jna,fix some more failing tests/down to 24 failures (4 crashes) on w32ce-arm/
,,0.0702,jna,fix 2 failing w32ce tests/
,,0.0801,jna,Fix test failures on IBM J9 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.066,jna,attempt to reproduce issue
,,0.066,jna,fix a few win64 tests use ffi_closure_alloc everywhere git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.066,jna,fix a few win64 tests use ffi_closure_alloc everywhere git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.066,jna,fix a few win64 tests use ffi_closure_alloc everywhere git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.066,jna,fix a few win64 tests use ffi_closure_alloc everywhere git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1136,jna,"fix 2 failing w32ce tests/re-enable WCE failing tests, fixes to allow proper phoneME operation w/r/t AWT classes/avoid crash with really long strings/"
,,0.0744,jna,"fix more tests/down to 24 failures (4 crashes) on w32ce-arm/w32ce-arm library load on wince 5 (WM6.1)/Add option to avoid automatic jar unpacking, with test/"
,,0.066,jna,fix load/unload tests/
,,0.0723,jna,"synch with libffi 3.0.6 CVS affects darwin, freebsd git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0723,jna,"synch with libffi 3.0.6 CVS affects darwin, freebsd git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0681,jna,"synch with libffi 3.0.6 CVS affects darwin, freebsd git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.066,jna,"synch with libffi 3.0.6 CVS affects darwin, freebsd git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.066,jna,"synch with libffi 3.0.6 CVS affects darwin, freebsd git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0681,jna,"synch with libffi 3.0.6 CVS affects darwin, freebsd git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0765,jna,"synch with libffi 3.0.6 CVS affects darwin, freebsd git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.066,jna,"synch with libffi 3.0.6 CVS affects darwin, freebsd git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0723,jna,"synch with libffi 3.0.6 CVS affects darwin, freebsd git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0744,jna,"synch with libffi 3.0.6 CVS affects darwin, freebsd git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0702,jna,"synch with libffi 3.0.6 CVS affects darwin, freebsd git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.066,jna,fix a few win64 tests use ffi_closure_alloc everywhere git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0702,jna,"synch with libffi 3.0.6 CVS affects darwin, freebsd git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0765,jna,"synch with libffi 3.0.6 CVS affects darwin, freebsd git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0723,jna,"synch with libffi 3.0.6 CVS affects darwin, freebsd git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0744,jna,"synch with libffi 3.0.6 CVS affects darwin, freebsd git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0833,jna,"Added jnacontrib.x11.api.X.Window.getSubwindows and fixed jnacontrib.x11.api.X.Window.getXXXProperty, returns null if the window property is not found./"
,,0.0677,jna,catch attempts to run 64-bit tests on 32-bit javaws/
,,0.066,jna,fix web start test timeout/
,,0.0804,jna,Updated tests: skip when not joined to a DC and check returned SID./Tests for Netspi32Util.getUserInfo/
,,0.1213,jna,Added standard Kernel32Util#closeHandle method that throws a Win32Exception if failed to close the handle/Added Kerne32Util method to facilitate checking that calls to LocalFree/GlobalFree are successful/
,,0.1134,jna,"More changes based on feedback * Converted char to byte for UCHAR * Made Privilege implement Closeable/Added WinioctlUtil, Ntifs and modified Kernel32 * Added `com.sun.jna.platform.win32.WinioctlUtil` for help in determining FSCTL_* codes * Added `com.sun.jna.platform.win32.Ntifs` with Reparse Point structures and defines * Added initialization of FILETIME from LARGE_INTEGER * Added `GetFileInformationByHandleEx` and `SetFileInformationByHandle` to `com.sun.jna.platform.win32.Kernel32`/"
,,0.0993,jna,"Add fix for issue in Advapi32Util (reading empty values) With this fix it is possible to read values from registry of the following types even when the size of the value is 0: REG_SZ REG_EXPAND_SZ REG_MULTI_SZ REG_NONE REG_BINARY (fixed by earlier committer) Advapi32UtilTest updated with unit test triggering the bug./fix for issue (continued yet again) Im failing hard... ok to merge? Indentation was fixed and I removed the try block./fix for issue (continued) Some stuff that was missing from my previous commit. Sorry for the hurdles, this is my first time contributing to a project. Updated the appropriate unit test and CHANGES.md for version 3.4.3./"
,,0.0702,jna,Add UnitTest testRegistryGetCloseKey & update CHANGES.md/
,,0.063,jna,"Added `com.sun.jna.platform.win32.Advapi32.GetNamedSecurityInfo`, `SetNamedSecurityInfo`, `GetSecurityDescriptorLength`, `IsValidSecurityDescriptor`, `IsValidAcl`/"
,,0.0843,jna,Added standard Kernel32Util#closeHandle method that throws a Win32Exception if failed to close the handle/
,,0.0951,jna,Added GetDriveType./Added support for GetFileType./clean up w32 platform sources/fix/cleanup platform tests/
,,0.1287,jna,Added standard Kernel32Util#closeHandle method that throws a Win32Exception if failed to close the handle/Added Kerne32Util method to facilitate checking that calls to LocalFree/GlobalFree are successful/
,,0.0906,jna,Using static final un-modifiable List of field names for structure(s)/Fix merge conflicts in
,,0.0673,jna,Read/WriteProcessMemory and tests/
,,0.0639,jna,fix/cleanup platform tests/
,,0.0737,jna,"Added `com.sun.jna.platform.win32.Advapi32.GetNamedSecurityInfo`, `SetNamedSecurityInfo`, `GetSecurityDescriptorLength`, `IsValidSecurityDescriptor`, `IsValidAcl`/"
,,0.0879,jna,Using static final un-modifiable List of field names for structure(s)/
,,0.0977,jna,Kernel32Util#freeLocal/GlobalMemory always throws Win32Exception if failed/Added Kerne32Util method to facilitate checking that calls to LocalFree/GlobalFree are successful/
,,0.0859,jna,Added GetComputerNameEx support/Test for CreateRemoteThread/Read/WriteProcessMemory and tests/
,,0.091,jna,Using static final un-modifiable List of field names for structure(s)/added Module32FirstW and Module32NextW to Kernel32 added MODULEENTRY32W to Tlhelp32/changes according to dblocks comments to pull request/Changes according to lgoldsteins comments to pull request/
,,0.0787,jna,Added standard Kernel32Util#closeHandle method that throws a Win32Exception if failed to close the handle/Fixed issue Kernel32#GetLastError() always returns ERROR_SUCCESS/
,,0.0934,jna,"More changes based on feedback * Converted char to byte for UCHAR * Made Privilege implement Closeable/Added WinioctlUtil, Ntifs and modified Kernel32 * Added `com.sun.jna.platform.win32.WinioctlUtil` for help in determining FSCTL_* codes * Added `com.sun.jna.platform.win32.Ntifs` with Reparse Point structures and defines * Added initialization of FILETIME from LARGE_INTEGER * Added `GetFileInformationByHandleEx` and `SetFileInformationByHandle` to `com.sun.jna.platform.win32.Kernel32`/"
,,0.0681,jna,Added Secur32.QuerySecurityContextToken. Added Sspi.PSecHandle. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.5288,jna,"Added Win32 mappings. * Advapi32 * Added LOGON_WITH_PROFILE constant * Added LOGON_NETCREDENTIALS_ONLY constant * Added CreateProcessWithLogonW(String, String, String, int, String, String, int, Pointer, String, STARTUPINFO, PROCESS_INFORMATION) * No Unit Test I would have to make it create a user to be 100% able to run a process as another user and that would be a security issue I figure. * Crypt32 * Added CertAddEncodedCertificateToSystemStore(String, Pointer, DWORD) * No Unit Test I doubt anyone would want the security risk of a unit test installing a root certificate. * GDI32 * Added SRCCOPY constant * Added BitBlt(HDC, int, int, int, int, HDC, int, int, int) * No direct unit test the test for GDI32Util.getScreenshot() seemed to cover it just fine. * Added GDI32Util.getScreenshot(HWND) * Added unit test as GDI32UtilTest.testGetScreenshot() * Shell32 * Added SHERB_NOCONFIRMATION constant * Added SHERB_NOPROGRESSUI constant * Added SHERB_NOSOUND constant * Added SEE_MASK_NOCLOSEPROCESS constant * Added SHEmptyRecycleBin(HANDLE, String, int) * No unit test no idea how to tell if the recycle bin is empty afterwards * Added ShellExecuteEx(SHELLEXECUTEINFO) * No unit test there are a bunch of cases where the hProcess member in SHELLEXECUTEINFO isnt set not sure how to control for that * ShellAPI * Added SHELLEXECUTEINFO structure * User32 * Added GetDesktopWindow() * Added test as User32Test.testGetDesktopWindow() * WinGDI * Added HGDI_ERROR * Removed superfluous ""public"" and ""public final"" from WinGDI/"
,,0.0859,jna,Using static final un-modifiable List of field names for structure(s)/
,,0.5365,jna,"Added Win32 mappings. * Advapi32 * Added LOGON_WITH_PROFILE constant * Added LOGON_NETCREDENTIALS_ONLY constant * Added CreateProcessWithLogonW(String, String, String, int, String, String, int, Pointer, String, STARTUPINFO, PROCESS_INFORMATION) * No Unit Test I would have to make it create a user to be 100% able to run a process as another user and that would be a security issue I figure. * Crypt32 * Added CertAddEncodedCertificateToSystemStore(String, Pointer, DWORD) * No Unit Test I doubt anyone would want the security risk of a unit test installing a root certificate. * GDI32 * Added SRCCOPY constant * Added BitBlt(HDC, int, int, int, int, HDC, int, int, int) * No direct unit test the test for GDI32Util.getScreenshot() seemed to cover it just fine. * Added GDI32Util.getScreenshot(HWND) * Added unit test as GDI32UtilTest.testGetScreenshot() * Shell32 * Added SHERB_NOCONFIRMATION constant * Added SHERB_NOPROGRESSUI constant * Added SHERB_NOSOUND constant * Added SEE_MASK_NOCLOSEPROCESS constant * Added SHEmptyRecycleBin(HANDLE, String, int) * No unit test no idea how to tell if the recycle bin is empty afterwards * Added ShellExecuteEx(SHELLEXECUTEINFO) * No unit test there are a bunch of cases where the hProcess member in SHELLEXECUTEINFO isnt set not sure how to control for that * ShellAPI * Added SHELLEXECUTEINFO structure * User32 * Added GetDesktopWindow() * Added test as User32Test.testGetDesktopWindow() * WinGDI * Added HGDI_ERROR * Removed superfluous ""public"" and ""public final"" from WinGDI/"
,,0.0813,jna,Adding wrappers to Cryptui/Crypt32 and structures to WinCrypt./
,,0.0936,jna,Kernel32Util#freeLocal/GlobalMemory always throws Win32Exception if failed/Added Kerne32Util method to facilitate checking that calls to LocalFree/GlobalFree are successful/
,,0.0854,jna,Adding wrappers to Cryptui/Crypt32 and structures to WinCrypt./
,,0.5324,jna,"Using static final un-modifiable List of field names for structure(s)/Added Win32 mappings. * Advapi32 * Added LOGON_WITH_PROFILE constant * Added LOGON_NETCREDENTIALS_ONLY constant * Added CreateProcessWithLogonW(String, String, String, int, String, String, int, Pointer, String, STARTUPINFO, PROCESS_INFORMATION) * No Unit Test I would have to make it create a user to be 100% able to run a process as another user and that would be a security issue I figure. * Crypt32 * Added CertAddEncodedCertificateToSystemStore(String, Pointer, DWORD) * No Unit Test I doubt anyone would want the security risk of a unit test installing a root certificate. * GDI32 * Added SRCCOPY constant * Added BitBlt(HDC, int, int, int, int, HDC, int, int, int) * No direct unit test the test for GDI32Util.getScreenshot() seemed to cover it just fine. * Added GDI32Util.getScreenshot(HWND) * Added unit test as GDI32UtilTest.testGetScreenshot() * Shell32 * Added SHERB_NOCONFIRMATION constant * Added SHERB_NOPROGRESSUI constant * Added SHERB_NOSOUND constant * Added SEE_MASK_NOCLOSEPROCESS constant * Added SHEmptyRecycleBin(HANDLE, String, int) * No unit test no idea how to tell if the recycle bin is empty afterwards * Added ShellExecuteEx(SHELLEXECUTEINFO) * No unit test there are a bunch of cases where the hProcess member in SHELLEXECUTEINFO isnt set not sure how to control for that * ShellAPI * Added SHELLEXECUTEINFO structure * User32 * Added GetDesktopWindow() * Added test as User32Test.testGetDesktopWindow() * WinGDI * Added HGDI_ERROR * Removed superfluous ""public"" and ""public final"" from WinGDI/"
,,0.0792,jna,Adding wrappers to Cryptui/Crypt32 and structures to WinCrypt./
,,0.5399,jna,"Added Win32 mappings. * Advapi32 * Added LOGON_WITH_PROFILE constant * Added LOGON_NETCREDENTIALS_ONLY constant * Added CreateProcessWithLogonW(String, String, String, int, String, String, int, Pointer, String, STARTUPINFO, PROCESS_INFORMATION) * No Unit Test I would have to make it create a user to be 100% able to run a process as another user and that would be a security issue I figure. * Crypt32 * Added CertAddEncodedCertificateToSystemStore(String, Pointer, DWORD) * No Unit Test I doubt anyone would want the security risk of a unit test installing a root certificate. * GDI32 * Added SRCCOPY constant * Added BitBlt(HDC, int, int, int, int, HDC, int, int, int) * No direct unit test the test for GDI32Util.getScreenshot() seemed to cover it just fine. * Added GDI32Util.getScreenshot(HWND) * Added unit test as GDI32UtilTest.testGetScreenshot() * Shell32 * Added SHERB_NOCONFIRMATION constant * Added SHERB_NOPROGRESSUI constant * Added SHERB_NOSOUND constant * Added SEE_MASK_NOCLOSEPROCESS constant * Added SHEmptyRecycleBin(HANDLE, String, int) * No unit test no idea how to tell if the recycle bin is empty afterwards * Added ShellExecuteEx(SHELLEXECUTEINFO) * No unit test there are a bunch of cases where the hProcess member in SHELLEXECUTEINFO isnt set not sure how to control for that * ShellAPI * Added SHELLEXECUTEINFO structure * User32 * Added GetDesktopWindow() * Added test as User32Test.testGetDesktopWindow() * WinGDI * Added HGDI_ERROR * Removed superfluous ""public"" and ""public final"" from WinGDI/"
,,0.0874,jna,Added Kerne32Util method to facilitate checking that calls to LocalFree/GlobalFree are successful/
,,0.1926,jna,"Updated bindings and testcases for WinCrypt/Crypt32 CryptSignMessage + CryptVerifyMessageSignature functions and structures rebound and updated testcase to test full cycle In the structures holding arrays, the basic binding hold now only a pointer and adds a helper, that converts the pointer to the array of structures. Allowing improved bindings to use the pointer to add custom bindings. WinCryptUtil.MANAGED_CRYPT_SIGN_MESSAGE_PARA is a sample for this. Updated a working test for Crypt32#CertNameToStr Adding working version of Crypt32Util#CertNameToStr Use custom PKCS12 Store to test CertGetCertificateChain and update bindings of associated structures Use Structure#createFieldsOrder and hold fieldOrder in static field instead of recreating it on all calls Move Indent to 4 spaces (as in surrounding code)/Adding wrappers to Cryptui/Crypt32 and structures to WinCrypt./"
,,0.539,jna,"Added Win32 mappings. * Advapi32 * Added LOGON_WITH_PROFILE constant * Added LOGON_NETCREDENTIALS_ONLY constant * Added CreateProcessWithLogonW(String, String, String, int, String, String, int, Pointer, String, STARTUPINFO, PROCESS_INFORMATION) * No Unit Test I would have to make it create a user to be 100% able to run a process as another user and that would be a security issue I figure. * Crypt32 * Added CertAddEncodedCertificateToSystemStore(String, Pointer, DWORD) * No Unit Test I doubt anyone would want the security risk of a unit test installing a root certificate. * GDI32 * Added SRCCOPY constant * Added BitBlt(HDC, int, int, int, int, HDC, int, int, int) * No direct unit test the test for GDI32Util.getScreenshot() seemed to cover it just fine. * Added GDI32Util.getScreenshot(HWND) * Added unit test as GDI32UtilTest.testGetScreenshot() * Shell32 * Added SHERB_NOCONFIRMATION constant * Added SHERB_NOPROGRESSUI constant * Added SHERB_NOSOUND constant * Added SEE_MASK_NOCLOSEPROCESS constant * Added SHEmptyRecycleBin(HANDLE, String, int) * No unit test no idea how to tell if the recycle bin is empty afterwards * Added ShellExecuteEx(SHELLEXECUTEINFO) * No unit test there are a bunch of cases where the hProcess member in SHELLEXECUTEINFO isnt set not sure how to control for that * ShellAPI * Added SHELLEXECUTEINFO structure * User32 * Added GetDesktopWindow() * Added test as User32Test.testGetDesktopWindow() * WinGDI * Added HGDI_ERROR * Removed superfluous ""public"" and ""public final"" from WinGDI/"
,,0.0942,jna,"Added `PrintWindow()`, `IsWindowEnabled()`, `IsWindow()`, `FindWindowEx()`, `GetAncestor()`, `GetCursorPos()`, `SetCursorPos()`, `SetWinEventHook()`, `UnhookWinEvent()`, `CopyIcon()`, and `GetClassLong()` to `com.sun.jna.platform.win32.User32` and supporting constants to `com.sun.jna.platform.win32.WinUser`/"
,,0.27399999999999997,jna,"Added `com.sun.jna.platform.WindowUtils.getAllWindows`, `getWindowIcon`, `getIconSize`, `getWindowTitle`, `getPRocessFilePath` and `getWindowLocationAndSize`. Request textual message of current last error code `com.sun.jna.platform.win32.Kernel32Util.getLastErrorMessage`. Added `com.sun.jna.platform.win32.GDI32.GetObject`. Added `com.sun.jna.platform.win32.Psapi` with `GetModuleFileNameEx`- Added `com.sun.jna.platform.win32.User32.GetIconInfo`, `SendMessageTimeout`, `GetClassLongPtr`. Added `com.sun.jna.platform.win32.WinGDI.ICONINFO` and `BITMAP`. Added process-specific access rights constants in `com.sun.jna.platform.win32.WinNT`. Added specific constants for request of icon settings in `com.sun.jna.platform.win32.WinUser`. Added constants for `GetClassLong`, `SendMessageTimeout` and `GetIconInfo` in `com.sun.jna.platform.win32.WinUser`./"
,,0.066,jna,fix/cleanup platform tests/
,,0.271,jna,"Added `com.sun.jna.platform.WindowUtils.getAllWindows`, `getWindowIcon`, `getIconSize`, `getWindowTitle`, `getPRocessFilePath` and `getWindowLocationAndSize`. Request textual message of current last error code `com.sun.jna.platform.win32.Kernel32Util.getLastErrorMessage`. Added `com.sun.jna.platform.win32.GDI32.GetObject`. Added `com.sun.jna.platform.win32.Psapi` with `GetModuleFileNameEx`- Added `com.sun.jna.platform.win32.User32.GetIconInfo`, `SendMessageTimeout`, `GetClassLongPtr`. Added `com.sun.jna.platform.win32.WinGDI.ICONINFO` and `BITMAP`. Added process-specific access rights constants in `com.sun.jna.platform.win32.WinNT`. Added specific constants for request of icon settings in `com.sun.jna.platform.win32.WinUser`. Added constants for `GetClassLong`, `SendMessageTimeout` and `GetIconInfo` in `com.sun.jna.platform.win32.WinUser`./"
,,0.068,jna,"Added `PrintWindow()`, `IsWindowEnabled()`, `IsWindow()`, `FindWindowEx()`, `GetAncestor()`, `GetCursorPos()`, `SetCursorPos()`, `SetWinEventHook()`, `UnhookWinEvent()`, `CopyIcon()`, and `GetClassLong()` to `com.sun.jna.platform.win32.User32` and supporting constants to `com.sun.jna.platform.win32.WinUser`/use proper type sizes/"
,,0.0682,jna,"Added Winspool monitor sample and updated Kernel32, WinBase, Winspool Added a full running Winspool monitor sample to demonstrate how to watch for new print jobs added to the spooler on windows./"
,,0.0677,jna,added ClosePrinter and tests for other winspool functionality/
,,0.2665,jna,"Added `com.sun.jna.platform.WindowUtils.getAllWindows`, `getWindowIcon`, `getIconSize`, `getWindowTitle`, `getPRocessFilePath` and `getWindowLocationAndSize`. Request textual message of current last error code `com.sun.jna.platform.win32.Kernel32Util.getLastErrorMessage`. Added `com.sun.jna.platform.win32.GDI32.GetObject`. Added `com.sun.jna.platform.win32.Psapi` with `GetModuleFileNameEx`- Added `com.sun.jna.platform.win32.User32.GetIconInfo`, `SendMessageTimeout`, `GetClassLongPtr`. Added `com.sun.jna.platform.win32.WinGDI.ICONINFO` and `BITMAP`. Added process-specific access rights constants in `com.sun.jna.platform.win32.WinNT`. Added specific constants for request of icon settings in `com.sun.jna.platform.win32.WinUser`. Added constants for `GetClassLong`, `SendMessageTimeout` and `GetIconInfo` in `com.sun.jna.platform.win32.WinUser`./"
,,0.0811,jna,manual handling of wchar vs char/better tests for w32 optional service config/implemented failure configuration of windows services/
,,0.0936,jna,Added Kerne32Util method to facilitate checking that calls to LocalFree/GlobalFree are successful/
,,0.0891,jna,fix getpid perf test on w32/add performance test for getpid/
,,0.11599999999999999,jna,Rework COMException to also carry the HRESULT This allows filtering exception based on HRESULT value. For example GetActiveObject returns a HRESULT of 0x800401E3 (MK_E_UNAVAILABLE) if the target object is not active. For many cases this is not an error. A valid construct would be: public void getExistingDemoObjectOrCreate() { DemoObject obj; try { return factory.fetchObject(DemoObject.class); } catch (COMException ex) { if(ex.matchesHresult(WinError.MK_E_UNAVAILABLE)) { return factory.createObject(DemoObject.class); } else { throw ex; } } }/
,,0.0879,jna,Using static final un-modifiable List of field names for structure(s)/
,,0.0828,jna,Tests for CHAR and BYTE constructors These are tests for constructor of variants of CHAR and BYTE/
,,0.0879,jna,Using static final un-modifiable List of field names for structure(s)/
,,0.0776,jna,remove console output from tests (COM tests still need cleanup and proper assertions)/
,,0.1188,jna,Rework COMException to also carry the HRESULT This allows filtering exception based on HRESULT value. For example GetActiveObject returns a HRESULT of 0x800401E3 (MK_E_UNAVAILABLE) if the target object is not active. For many cases this is not an error. A valid construct would be: public void getExistingDemoObjectOrCreate() { DemoObject obj; try { return factory.fetchObject(DemoObject.class); } catch (COMException ex) { if(ex.matchesHresult(WinError.MK_E_UNAVAILABLE)) { return factory.createObject(DemoObject.class); } else { throw ex; } } }/
,,0.0652,jna,"Fix REFIID signatures in tests, fix testFindName/"
,,0.066,jna,consolidate BSD targets test/
,,0.1231,jna,Rework COMException to also carry the HRESULT This allows filtering exception based on HRESULT value. For example GetActiveObject returns a HRESULT of 0x800401E3 (MK_E_UNAVAILABLE) if the target object is not active. For many cases this is not an error. A valid construct would be: public void getExistingDemoObjectOrCreate() { DemoObject obj; try { return factory.fetchObject(DemoObject.class); } catch (COMException ex) { if(ex.matchesHresult(WinError.MK_E_UNAVAILABLE)) { return factory.createObject(DemoObject.class); } else { throw ex; } } }/
,,0.0758,jna,"Added `EnumProcessModules`, `GetModuleInformation`, `GetProcessImageFileName` to Psapi and `ExtractIconEx` to Shell32 Added constants to `WinNT`/"
,,0.0764,jna,Added standard Kernel32Util#closeHandle method that throws a Win32Exception if failed to close the handle/
,,0.0673,OpenDDS,ChangeLogTag: Wed May 30 19:19:38 UTC 2007 Scott Harris
,,0.0673,OpenDDS,ChangeLogTag: Wed May 30 19:19:38 UTC 2007 Scott Harris
,,0.1194,OpenDDS,Wed Aug 24 22:29:27 UTC 2011 Trevor Fields * dds/InfoRepo/DCPS_IR_Domain.cpp: * dds/InfoRepo/DCPS_IR_Domain.h: * dds/InfoRepo/DCPS_IR_Participant.cpp: * dds/InfoRepo/DCPS_IR_Topic.cpp: * dds/InfoRepo/DCPS_IR_Topic.h: * dds/InfoRepo/DCPSInfo_i.cpp: Added reassociation of built in topic datawriters and datareaders for reincarnating InfoRepo with persistence. * tests/DCPS/BuiltInTopicTest/DataReaderListener.cpp: * tests/DCPS/BuiltInTopicTest/DataReaderListener.h: * tests/DCPS/BuiltInTopicTest/prst_repo_run_test.pl: * tests/DCPS/BuiltInTopicTest/subscriber.cpp: Changed test to detect missing bit connection after a persistent restart of the InfoRepo./
,,0.1194,OpenDDS,Wed Aug 24 22:29:27 UTC 2011 Trevor Fields * dds/InfoRepo/DCPS_IR_Domain.cpp: * dds/InfoRepo/DCPS_IR_Domain.h: * dds/InfoRepo/DCPS_IR_Participant.cpp: * dds/InfoRepo/DCPS_IR_Topic.cpp: * dds/InfoRepo/DCPS_IR_Topic.h: * dds/InfoRepo/DCPSInfo_i.cpp: Added reassociation of built in topic datawriters and datareaders for reincarnating InfoRepo with persistence. * tests/DCPS/BuiltInTopicTest/DataReaderListener.cpp: * tests/DCPS/BuiltInTopicTest/DataReaderListener.h: * tests/DCPS/BuiltInTopicTest/prst_repo_run_test.pl: * tests/DCPS/BuiltInTopicTest/subscriber.cpp: Changed test to detect missing bit connection after a persistent restart of the InfoRepo./
,,0.0664,OpenDDS,Fix ManyTopicMultiProcess test/
,,0.078,OpenDDS,Dynamic cast workaround for GCC 4.1 (for unit test)./
,,0.0769,OpenDDS,Use ACE_Allocator instead of SafetyProfilePool./Fixed allocation bug in Dynamic_*. Disabled non-built tests. Initialized variables in ParameterListConverter test./
,,0.0652,OpenDDS,merge and fix tests/
,,0.0577,OpenDDS,Added flag for additional TypeSupport.cpp includes./
,,0.0556,OpenDDS,Added
,,0.0621,OpenDDS,Injection of PoolAllocationBase./
,,0.0664,OpenDDS,Injection of PoolAllocationBase./
,,0.0673,OpenDDS,Save and restore errno./
,,0.0664,OpenDDS,Injection of PoolAllocationBase./
,,0.0664,OpenDDS,Injection of PoolAllocationBase./
,,0.0686,OpenDDS,Injection of PoolAllocationBase./
,,0.0577,OpenDDS,FilterClassName added to InfoRepo./
,,0.0639,OpenDDS,Correct test parameters/
,,0.0639,OpenDDS,Updated tests for WriteDataContainer changes./
,,0.0798,OpenDDS,Fix file synchronization issue which causes test failure/
,,0.3086,OpenDDS,More updates to not use implementation datareader/writer types * tests/DCPS/ConfigTransports/DataReaderListener.cpp: * tests/DCPS/Federation/DataReaderListener.cpp: * tests/DCPS/FooTest3_0/PubDriver.h: * tests/DCPS/FooTest4/Reader.cpp: * tests/DCPS/FooTest4_0/Reader.cpp: * tests/DCPS/FooTest4_0/Writer.cpp: * tests/DCPS/FooTest4_0/Writer.h: * tests/DCPS/FooTest5/DataReaderListener.cpp: * tests/DCPS/FooTest5_0/main.cpp: * tests/DCPS/LivelinessTest/DataReaderListener.cpp: * tests/DCPS/LivelinessTimeout/DataReaderListenerImpl.cpp: * tests/DCPS/ManyTopicMultiProcess/DataReaderListener1.cpp: * tests/DCPS/ManyTopicMultiProcess/DataReaderListener4.cpp: * tests/DCPS/MultiDPTest/DataReaderListener.cpp: * tests/DCPS/MultiRepoTest/ForwardingListener.cpp: * tests/DCPS/UnitTests/ut_BIT_DataReader.cpp: * tests/DCPS/ViewState/main.cpp: * tests/DCPS/WriteDataContainer/WriteDataContainerTest.cpp: * tests/DCPS/ZeroCopyRead/main.cpp:/
,,0.6235,OpenDDS,"Removed obsolete exception specifications, see issue * contrib/wrapper/DataReader_Listener_Base.h: * contrib/wrapper/DataReader_Listener_Base.inl: * examples/DCPS/IntroductionToOpenDDS/ExchangeEventDataReaderListenerImpl.cpp: * examples/DCPS/IntroductionToOpenDDS/ExchangeEventDataReaderListenerImpl.h: * examples/DCPS/IntroductionToOpenDDS/QuoteDataReaderListenerImpl.cpp: * examples/DCPS/IntroductionToOpenDDS/QuoteDataReaderListenerImpl.h: * examples/DCPS/Messenger_IOGR_Imr/DataReaderListener.cpp: * examples/DCPS/Messenger_IOGR_Imr/DataReaderListener.h: * examples/DCPS/Messenger_Imr/DataReaderListener.cpp: * examples/DCPS/Messenger_Imr/DataReaderListener.h: * performance-tests/Bench/src/DataReaderListener.cpp: * performance-tests/Bench/src/DataReaderListener.h: * performance-tests/DCPS/InfoRepo_population/DataReaderListener.cpp: * performance-tests/DCPS/InfoRepo_population/DataReaderListener.h: * performance-tests/DCPS/InfoRepo_population/SyncExt_i.cpp: * performance-tests/DCPS/InfoRepo_population/SyncExt_i.h: * performance-tests/DCPS/Priority/DataReaderListener.cpp: * performance-tests/DCPS/Priority/DataReaderListener.h: * performance-tests/DCPS/SimpleLatency/PubListener.cpp: * performance-tests/DCPS/SimpleLatency/PubListener.h: * performance-tests/DCPS/SimpleLatency/SubListener.cpp: * performance-tests/DCPS/SimpleLatency/SubListener.h: * performance-tests/DCPS/Sync/SyncClient_i.cpp: * performance-tests/DCPS/Sync/SyncClient_i.h: * performance-tests/DCPS/Sync/SyncServer_i.cpp: * performance-tests/DCPS/Sync/SyncServer_i.h: * tests/DCPS/BidirMessenger/DataReaderListener.cpp: * tests/DCPS/BuiltInTopicTest/DataReaderListener.cpp: * tests/DCPS/BuiltInTopicTest/DataReaderListener.h: * tests/DCPS/CorbaSeq/DataReaderListener.cpp: * tests/DCPS/CorbaSeq/DataReaderListener.h: * tests/DCPS/DPFactoryQos/DataReaderListener.cpp: * tests/DCPS/DPFactoryQos/DataReaderListener.h: * tests/DCPS/Deadline/DataReaderListener.cpp: * tests/DCPS/Deadline/DataReaderListener.h: * tests/DCPS/Footprint/DataReaderListener.cpp: * tests/DCPS/GroupPresentation/DataReaderListener.cpp: * tests/DCPS/LatencyBudget/DataReaderListener.cpp: * tests/DCPS/LatencyBudget/DataReaderListener.h: * tests/DCPS/Lifespan/DataReaderListener.cpp: * tests/DCPS/Lifespan/DataReaderListener.h: * tests/DCPS/ManualAssertLiveliness/DataReaderListener.cpp: * tests/DCPS/ManualAssertLiveliness/DataReaderListener.h: * tests/DCPS/Messenger/DataReaderListener.cpp: * tests/DCPS/Monitor/DataReaderListener.cpp: * tests/DCPS/NotifyTest/DataReaderListener.cpp: * tests/DCPS/NotifyTest/DataReaderListener.h: * tests/DCPS/Ownership/DataReaderListener.cpp: * tests/DCPS/Partition/DataReaderListener.cpp: * tests/DCPS/Partition/DataReaderListener.h: * tests/DCPS/PersistentDurability/DataReaderListener.cpp: * tests/DCPS/PersistentDurability/DataReaderListener.h: * tests/DCPS/Priority/DataReaderListener.cpp: * tests/DCPS/Priority/DataReaderListener.h: * tests/DCPS/Prst_delayed_subscriber/DataReaderListener.cpp: * tests/DCPS/Prst_delayed_subscriber/DataReaderListener.h: * tests/DCPS/Reconnect/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataReaderListener.h: * tests/DCPS/Rejects/DataReaderListener.cpp: * tests/DCPS/Rejects/DataReaderListener.h: * tests/DCPS/RtiSerialization/DataReaderListener.cpp: * tests/DCPS/Serializer_wstring/DataReaderListener.cpp: * tests/DCPS/Serializer_wstring/DataReaderListener.h: * tests/DCPS/SetQosDeadline/DataReaderListener.cpp: * tests/DCPS/SetQosDeadline/DataReaderListener.h: * tests/DCPS/SetQosPartition/DataReaderListener.cpp: * tests/DCPS/SetQosPartition/DataReaderListener.h: * tests/DCPS/StringKey/DataReaderListener.cpp: * tests/DCPS/StringKey/DataReaderListener.h: * tests/DCPS/TcpReconnect/DataReaderListener.cpp: * tests/DCPS/Thrasher/DataReaderListenerImpl.cpp: * tests/DCPS/Thrasher/DataReaderListenerImpl.h: * tests/DCPS/TransientDurability/DataReaderListener.cpp: * tests/DCPS/TransientDurability/DataReaderListener.h: * tests/DCPS/ZeroCopyDataReaderListener/DataReaderListener.cpp:/"
,,0.1139,OpenDDS,Updated ReadConditionTest for compatibility with Safety Profile Use only one participant object for both parts of the test./Test take_instance_w_condition * tests/DCPS/ReadCondition/ReadConditionTest.cpp:/
,,0.3122,OpenDDS,More updates to not use implementation datareader/writer types * tests/DCPS/ConfigTransports/DataReaderListener.cpp: * tests/DCPS/Federation/DataReaderListener.cpp: * tests/DCPS/FooTest3_0/PubDriver.h: * tests/DCPS/FooTest4/Reader.cpp: * tests/DCPS/FooTest4_0/Reader.cpp: * tests/DCPS/FooTest4_0/Writer.cpp: * tests/DCPS/FooTest4_0/Writer.h: * tests/DCPS/FooTest5/DataReaderListener.cpp: * tests/DCPS/FooTest5_0/main.cpp: * tests/DCPS/LivelinessTest/DataReaderListener.cpp: * tests/DCPS/LivelinessTimeout/DataReaderListenerImpl.cpp: * tests/DCPS/ManyTopicMultiProcess/DataReaderListener1.cpp: * tests/DCPS/ManyTopicMultiProcess/DataReaderListener4.cpp: * tests/DCPS/MultiDPTest/DataReaderListener.cpp: * tests/DCPS/MultiRepoTest/ForwardingListener.cpp: * tests/DCPS/UnitTests/ut_BIT_DataReader.cpp: * tests/DCPS/ViewState/main.cpp: * tests/DCPS/WriteDataContainer/WriteDataContainerTest.cpp: * tests/DCPS/ZeroCopyRead/main.cpp:/
,,0.6268,OpenDDS,"Removed obsolete exception specifications, see issue * contrib/wrapper/DataReader_Listener_Base.h: * contrib/wrapper/DataReader_Listener_Base.inl: * examples/DCPS/IntroductionToOpenDDS/ExchangeEventDataReaderListenerImpl.cpp: * examples/DCPS/IntroductionToOpenDDS/ExchangeEventDataReaderListenerImpl.h: * examples/DCPS/IntroductionToOpenDDS/QuoteDataReaderListenerImpl.cpp: * examples/DCPS/IntroductionToOpenDDS/QuoteDataReaderListenerImpl.h: * examples/DCPS/Messenger_IOGR_Imr/DataReaderListener.cpp: * examples/DCPS/Messenger_IOGR_Imr/DataReaderListener.h: * examples/DCPS/Messenger_Imr/DataReaderListener.cpp: * examples/DCPS/Messenger_Imr/DataReaderListener.h: * performance-tests/Bench/src/DataReaderListener.cpp: * performance-tests/Bench/src/DataReaderListener.h: * performance-tests/DCPS/InfoRepo_population/DataReaderListener.cpp: * performance-tests/DCPS/InfoRepo_population/DataReaderListener.h: * performance-tests/DCPS/InfoRepo_population/SyncExt_i.cpp: * performance-tests/DCPS/InfoRepo_population/SyncExt_i.h: * performance-tests/DCPS/Priority/DataReaderListener.cpp: * performance-tests/DCPS/Priority/DataReaderListener.h: * performance-tests/DCPS/SimpleLatency/PubListener.cpp: * performance-tests/DCPS/SimpleLatency/PubListener.h: * performance-tests/DCPS/SimpleLatency/SubListener.cpp: * performance-tests/DCPS/SimpleLatency/SubListener.h: * performance-tests/DCPS/Sync/SyncClient_i.cpp: * performance-tests/DCPS/Sync/SyncClient_i.h: * performance-tests/DCPS/Sync/SyncServer_i.cpp: * performance-tests/DCPS/Sync/SyncServer_i.h: * tests/DCPS/BidirMessenger/DataReaderListener.cpp: * tests/DCPS/BuiltInTopicTest/DataReaderListener.cpp: * tests/DCPS/BuiltInTopicTest/DataReaderListener.h: * tests/DCPS/CorbaSeq/DataReaderListener.cpp: * tests/DCPS/CorbaSeq/DataReaderListener.h: * tests/DCPS/DPFactoryQos/DataReaderListener.cpp: * tests/DCPS/DPFactoryQos/DataReaderListener.h: * tests/DCPS/Deadline/DataReaderListener.cpp: * tests/DCPS/Deadline/DataReaderListener.h: * tests/DCPS/Footprint/DataReaderListener.cpp: * tests/DCPS/GroupPresentation/DataReaderListener.cpp: * tests/DCPS/LatencyBudget/DataReaderListener.cpp: * tests/DCPS/LatencyBudget/DataReaderListener.h: * tests/DCPS/Lifespan/DataReaderListener.cpp: * tests/DCPS/Lifespan/DataReaderListener.h: * tests/DCPS/ManualAssertLiveliness/DataReaderListener.cpp: * tests/DCPS/ManualAssertLiveliness/DataReaderListener.h: * tests/DCPS/Messenger/DataReaderListener.cpp: * tests/DCPS/Monitor/DataReaderListener.cpp: * tests/DCPS/NotifyTest/DataReaderListener.cpp: * tests/DCPS/NotifyTest/DataReaderListener.h: * tests/DCPS/Ownership/DataReaderListener.cpp: * tests/DCPS/Partition/DataReaderListener.cpp: * tests/DCPS/Partition/DataReaderListener.h: * tests/DCPS/PersistentDurability/DataReaderListener.cpp: * tests/DCPS/PersistentDurability/DataReaderListener.h: * tests/DCPS/Priority/DataReaderListener.cpp: * tests/DCPS/Priority/DataReaderListener.h: * tests/DCPS/Prst_delayed_subscriber/DataReaderListener.cpp: * tests/DCPS/Prst_delayed_subscriber/DataReaderListener.h: * tests/DCPS/Reconnect/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataReaderListener.h: * tests/DCPS/Rejects/DataReaderListener.cpp: * tests/DCPS/Rejects/DataReaderListener.h: * tests/DCPS/RtiSerialization/DataReaderListener.cpp: * tests/DCPS/Serializer_wstring/DataReaderListener.cpp: * tests/DCPS/Serializer_wstring/DataReaderListener.h: * tests/DCPS/SetQosDeadline/DataReaderListener.cpp: * tests/DCPS/SetQosDeadline/DataReaderListener.h: * tests/DCPS/SetQosPartition/DataReaderListener.cpp: * tests/DCPS/SetQosPartition/DataReaderListener.h: * tests/DCPS/StringKey/DataReaderListener.cpp: * tests/DCPS/StringKey/DataReaderListener.h: * tests/DCPS/TcpReconnect/DataReaderListener.cpp: * tests/DCPS/Thrasher/DataReaderListenerImpl.cpp: * tests/DCPS/Thrasher/DataReaderListenerImpl.h: * tests/DCPS/TransientDurability/DataReaderListener.cpp: * tests/DCPS/TransientDurability/DataReaderListener.h: * tests/DCPS/ZeroCopyDataReaderListener/DataReaderListener.cpp:/"
,,0.0534,OpenDDS,Added scoped_ptr/
,,0.1049,OpenDDS,Check return code of ws->wait call * tests/DCPS/ContentFilteredTopic/ContentFilteredTopicTest.cpp: * tests/DCPS/Deadline/subscriber.cpp: * tests/DCPS/QueryCondition/QueryConditionTest.cpp:/Support 64-bit integer literals in filter expressions/
,,0.0798,OpenDDS,Fixed comparison * tests/DCPS/UnitTests/ut_ParameterListConverter.cpp:/
,,0.1102,OpenDDS,Check return code of ws->wait call * tests/DCPS/ContentFilteredTopic/ContentFilteredTopicTest.cpp: * tests/DCPS/Deadline/subscriber.cpp: * tests/DCPS/QueryCondition/QueryConditionTest.cpp:/
,,0.2261,OpenDDS,"Check return code of ws->wait call * tests/DCPS/ContentFilteredTopic/ContentFilteredTopicTest.cpp: * tests/DCPS/Deadline/subscriber.cpp: * tests/DCPS/QueryCondition/QueryConditionTest.cpp:/Code review changes from PR QC test with a more complex test in attempt to reproduce a dds4ccm crash when using filters * tests/DCPS/QueryCondition/rtps_disc.ini: Added. * bin/dcps_tests.lst: * tests/DCPS/Priority/DataReaderListener.h: * tests/DCPS/Priority/Subscriber.cpp: * tests/DCPS/QueryCondition/Messenger.idl: * tests/DCPS/QueryCondition/QueryConditionTest.cpp: * tests/DCPS/QueryCondition/run_test.pl: * tests/DCPS/UnitTests/UnitTests.mpc:/Check the number of tokens as part of the query condition matches the length of the query parameters, issue * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/QueryConditionImpl.cpp: * dds/DCPS/QueryConditionImpl.h: * tests/DCPS/QueryCondition/QueryConditionTest.cpp: * tests/DCPS/QueryCondition/run_test.pl:/"
,,0.0618,OpenDDS,Check return value from attempt to write./
,,0.0789,OpenDDS,Extend test to validate that the marked participant qos is not the same as the qos after we created the dp * tests/DCPS/DPFactoryQos/subscriber.cpp:/
,,0.2354,OpenDDS,Simplify test code * tests/DCPS/FooTest3_0/DataReaderListener.cpp: * tests/DCPS/FooTest3_0/DataReaderQCListener.cpp: * tests/DCPS/FooTest3_0/DataReaderQCListener.h: * tests/DCPS/FooTest3_0/SubDriver.cpp: * tests/DCPS/FooTest3_0/SubDriver.h: (cherry picked from commit f420fe33331328c650c5fa4a1d0062dd45ba6158) Conflicts: tests/DCPS/FooTest3_0/DataReaderQCListener.cpp tests/DCPS/FooTest3_0/DataReaderQCListener.h tests/DCPS/FooTest3_0/SubDriver.cpp tests/DCPS/FooTest3_0/SubDriver.h/
,,0.0863,OpenDDS,Implemented special case for DDS::BinaryProperty_t/Implemented special case for DDS::Property_t/migrated old special-union handling to new method/Refactored to use raw function ptrs; migrated special-sequence/
,,0.0556,OpenDDS,Implemented DCPSParticipantVolatileMessageSecure builtin endpoint/
,,0.066,OpenDDS,fixed an unused variable warning/
,,0.0737,OpenDDS,BIT Test: Adjust Logging Levels/BIT Test: Use ACE Logging/
,,0.0704,OpenDDS,"Added Explicit ""ERRORS"" to BIT Test monitor/"
,,0.1813,OpenDDS,Modified AuthenticationTest to generate mock-topic-data. The routine is broken though needs to be fixed/Implemented Auth.process_handshake_message for handshake-requester/Fixed bugs in begin_handshake_reply/Added generated mock-topic-data to auth unit test/Implemented validation steps in Auth.begin_handshake_reply/Completed begin-handshake-request initial implementation and unit test/Added guard against GUID_UNKNOWN in validate_local_identity; refactored authentication test/Added test fixture/
,,0.0789,OpenDDS,Added unit test to expose issue with PropertySeq serialization/
,,0.0977,OpenDDS,"A bit of cleanup for subject name, fixing how AccessControl gets remote identity subject name (cant rely on auth plugin get_identity_token, which is OK and in line with spec)/added subject name check to validate_remote_permissions/intermediate checkin for subject name comparison support/Completed get_topic_sec_attributes/check_remote_participant without plugin class name rule/Continued work on validate_remote_permissions/Test for validate_remote_permissions/Implemented PluginParticipantSecurityAttributesMask, fixed PermissionsCredentialsToken content and test./Implemented get_permission_credential_token/get_permissions_token and framework for signed files/Fixed check_create_participant success test/Added support for QoS property reads for validate_local_permissions/"
,,0.0954,OpenDDS,"fixing compile warning, debug statement formatting for timeval/Attempting to fix the intermittent LivelinessTimeout test failure/"
,,0.0639,OpenDDS,"Bit Test: add ""(%P|%t)"" to logging/"
,,0.0956,OpenDDS,"Adding configurable timeout, certs, key files to security attributes test; flushing out SC0 and SC1 scenarios; fixing ERROR vs WARNING messages in Spdp for test scripts/"
,,0.1021,OpenDDS,"Adding configurable timeout, certs, key files to security attributes test; flushing out SC0 and SC1 scenarios; fixing ERROR vs WARNING messages in Spdp for test scripts/"
,,0.1343,OpenDDS,Added unit test for GetSharedSecret; fixed issue with GetAuthenticationPeerCredentialToken test/Added unit test for GetAuthenticationPeerCredentialToken/
,,0.1807,OpenDDS,Added unit test for GetSharedSecret; fixed issue with GetAuthenticationPeerCredentialToken test/Added exception context to SignedDocument/Renamed method for consistency/Fixed serialization routines in SignedDocument/Corrected failing test. Added methods to SignedDocument./Applied review comments for AccessControlBuiltinImpl./Added a new deserialize method/Encapsulated URI abstraction/Removed various fprintf calls in favour of ACE_ERROR/Fixed compile issues associated with changes to OPENDDS_SSL_LOG_ERR/Changed argument names to better fit their use/Fixed constness and added virtual destructor/SSL formatting fixes/
,,0.1442,OpenDDS,"Replaced C-style file IO with C++ version/Added exception context to Certificate/Added Cert copy-constructor; refactored serialize routine; added associated tests/Removed various fprintf calls in favour of ACE_ERROR/SSL formatting fixes/consolidating test certificate authorities, resigning permissions and governance documents, and updating / fixing matching tests/"
,,0.0852,OpenDDS,"Initial implementation of 8.8.5 and rest of 8.8.6, changes to tests & script & dds log messages to allow for failure test/"
,,0.0782,OpenDDS,"fixing code style issues and timing mechanisms for deadline tests, avoiding set_qos for reader/"
,,0.0744,OpenDDS,"fixing code style issues and timing mechanisms for deadline tests, avoiding set_qos for reader/"
,,0.0763,OpenDDS,"fixing code style issues and timing mechanisms for deadline tests, avoiding set_qos for reader/"
,,0.1854,OpenDDS,Extended test to check to PRECONDITION_NOT_MET when trying to delete a DataReader with ReadConditions attached/Fix QC Test Failure Disposed Sample Filter Tests are failing. Deleting the entities between tests fixes this. This relies on as delete_datareader fails at the moment. This test should work once it is merged./CFT and QC Tests: Make error messages consistent/CFT and QC Tests: Make error messages consistent/QueryCondition Test: Add Query Field Safety Tests/QueryCondition Test: Add Query Field Safety Tests/QueryCondition Test: Print Errors on stderr/
,,0.0965,OpenDDS,Extended test to check to PRECONDITION_NOT_MET when trying to delete a DataReader with ReadConditions attached/
,,0.0599,OpenDDS,Added more ifdefs/
,,0.1002,OpenDDS,The deletion of a DataReader is not allowed if there are any existing ReadCondition or QueryCondition objects that are attached to the DataReader/
,,0.0913,OpenDDS,Added test case for testing coherent data transfer using an asynchronous reader/
,,0.0883,OpenDDS,s/retcode_to_dds_string/retcode_to_string/g/Rewrote Presentation Test Test case for DataReader Listener was added by for
,,0.0906,OpenDDS,First attempt at the annotation tests. Needs to be properly built and tested with Jenkins./
,,0.0852,OpenDDS,Fixing intermittent SharedTransport test failures and segfaults for shmem transport/
,,0.0614,OpenDDS,Fix asynchronous. connect error checking in windows/Fix TcpReconnect Test/
,,0.09699999999999999,pljava,*** empty log message ***/Fixed bug causing primitive arrays to fail./Added ResultSetTest/Added the ability to return a ResultSet Added object pooling capabilities/Added a thorough test of DatabaseMetaData features./Added language javaU with an untrusted call handler/Added SecurityManagers for trusted and untrusted versions/
,,0.0534,pljava,Removed some obsolete GCJ/
,,0.0852,pljava,Removed some obsolete GCJ/*** empty log message ***/Added the ability to return a ResultSet Added object pooling capabilities/
,,0.0804,pljava,Added the ability to return a ResultSet Added object pooling capabilities/
,,0.091,pljava,Run unicode roundtrip test only on UTF8 server. PostgreSQLs different definition of chr() for every encoding other than UTF8 leads to spurious test failure for other encodings. Pushing directly trivial change./
,,0.2975,pljava,"Add tests for UDTs and SQLInput/SQLOutput. Add SQLActions to the existing ComplexScalar, ComplexTuple, and Point example classes, as rough tests that these three forms of UDT (scalar, composite, ""mirrored"") work. As a more thorough test, add UDTScalarIOTest class, exercising every supported SQLInput/SQLOutput method for scalar (or mirrored, noncomposite) types. At first Point is expected to fail on little-endian hardware./"
,,0.3087,pljava,"Add tests for UDTs and SQLInput/SQLOutput. Add SQLActions to the existing ComplexScalar, ComplexTuple, and Point example classes, as rough tests that these three forms of UDT (scalar, composite, ""mirrored"") work. As a more thorough test, add UDTScalarIOTest class, exercising every supported SQLInput/SQLOutput method for scalar (or mirrored, noncomposite) types. At first Point is expected to fail on little-endian hardware./"
,,0.3017,pljava,"Add tests for UDTs and SQLInput/SQLOutput. Add SQLActions to the existing ComplexScalar, ComplexTuple, and Point example classes, as rough tests that these three forms of UDT (scalar, composite, ""mirrored"") work. As a more thorough test, add UDTScalarIOTest class, exercising every supported SQLInput/SQLOutput method for scalar (or mirrored, noncomposite) types. At first Point is expected to fail on little-endian hardware./"
,,0.066,realm-java,"Introduced separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue"
,,0.1035,realm-java,"Enable some tests. released dll for B13/Wrapped new JNI-level methods with high-level methods (issue wrapper and test for the ""toJson"" method (issue separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue"
,,0.0677,realm-java,"Added TableBase::nativeToJson() currently disabled in JNI/Introduced separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue"
,,0.077,realm-java,"Introduced separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue tests for group introspection operations./"
,,0.066,realm-java,"Introduced separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue"
,,0.0639,realm-java,"Introduced separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue"
,,0.066,realm-java,"Introduced separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue"
,,0.066,realm-java,"Introduced separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue"
,,0.0657,realm-java,Adjusted examples to the inline subtable construction (issue
,,0.0657,realm-java,Adjusted examples to the inline subtable construction (issue
,,0.0852,realm-java,"added count(), lookup() metods. Added simple performance test/"
,,0.0833,realm-java,"added count(), lookup() metods. Added simple performance test/"
,,0.0847,realm-java,"Added Javadoc to the typed API classes./added count(), lookup() metods. Added simple performance test/"
,,0.2794,realm-java,"Merge branch develop of github.com:Tightdb/tightdb_java2 into Breaking-updates Conflicts: tightdb-java-test/src/test/java/com/tightdb/JNICloseTest.java tightdb-java-test/src/test/java/com/tightdb/JNIQueryTest.java tightdb-java-test/src/test/java/com/tightdb/JNISubtableTest.java tightdb-java-test/src/test/java/com/tightdb/JNITableInsertTest.java tightdb-java-test/src/test/java/com/tightdb/JNITransactions.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSearchTest.java tightdb-java-test/src/test/java/com/tightdb/JNIViewSortTest.java tightdb-java-test/src/test/java/com/tightdb/experiment/SetIndexTest.java tightdb-java-test/src/test/java/com/tightdb/typed/GroupTest.java tightdb-java-test/src/test/java/com/tightdb/typed/TableTest.java tightdb_jni/src/com_tightdb_Group.cpp tightdb_jni/src/com_tightdb_table.cpp/Moved setIndex() and hasIndex() to the Typed StringColumn, so it only appears for strings. Updated tests./method renamed to adjust() + ref doc dyn examples/Space in public comments added + Renaming of addLong to incrementInColumn (including test cases)/Indention corrected and test case moved/Table.insert() renamed to addAt(). Test added/Test method moved to existing test class/"
,,0.1459,realm-java,removal of lock file in test cases/Added test of double rollback() it works./Added (disabled) test for double commit() and double rollback()/Space in public comments added + Renaming of addLong to incrementInColumn (including test cases)/
,,0.0987,realm-java,typed table equals test case added/more test cases/
,,0.0673,realm-java,test cases/
,,0.0867,realm-java,Space in public comments added + Renaming of addLong to incrementInColumn (including test cases)/
,,0.0789,realm-java,Space in public comments added + Renaming of addLong to incrementInColumn (including test cases)/
,,0.0724,realm-java,simple pivot on TableView/getSourceRow method added + test cases/
,,0.0813,realm-java,Added internal performance test of get-method/
,,0.0813,realm-java,Added internal performance test of get-method/
,,0.0837,realm-java,added jni bridge to getColumnIndex/throw exception when setting null on string + test cases/enabled test for table.lookup. Throws more specific exceptions. Non-breaking as they are subclasses of RuntimeException/changes.txt + better test coverage/
,,0.0843,realm-java,narrower lines/subtable sort test case added + try fail added more places/
,,0.0962,realm-java,subtable sort test case added + try fail added more places/
,,0.0765,realm-java,test case added/
,,0.1364,realm-java,"Added testcases for unbalanced subtable()/end_subtable()/added check for if query criteria is null for String and Date + test cases/added test cases, currently it will crash the core/"
,,0.073,realm-java,Support new tableview is_valid() validate. Added testcases in Java./
,,0.0665,realm-java,Updated tutorial to use the dynamic interface and added asserts/Update to java tutorial/
,,0.0577,realm-java,Added maximumDate and minimumDate/
,,0.066,realm-java,Cleanup test cases/
,,0.128,realm-java,"Modify the unit tests to comply to Realm.close()/Merge branch master of github.com:realm/realm-java into kg-date-issues Conflicts: changelog.txt realm/src/androidTest/java/io/realm/RealmObjectTest.java/Check for valid date/Added unit tests for detecting cyclic issues in toString(), hashcode(), equals(). Added design document with proposed solution./Extending and adding unit tests of naming convention supported by the annotation processor./updated/"
,,0.1195,realm-java,"Support search indexing for column int, bool, date 1. Enable the search index annotation on byte, short, int, long, boolean, and Date. 2. Enable add/remove search index in java. 3. Annotation processor test to support better detailed test cases. 4. Modify JNI test cases. 5. Update doc. 6. Add AnnotationIndexTypes to avoid polluting other test cases. This is the first PR for Implicit index to int primary keys will be handled in another PR./"
,,0.0642,realm-java,Index fields with annotation And update test cases to adapt this change./
,,0.0806,realm-java,Handler is now package protected. Refactored unit test to test actual bug./fix for 4: before merging origin/master/
,,0.0577,realm-java,Added Realm.copyFromRealm()/
,,0.0577,realm-java,Added Realm.copyFromRealm()/
,,0.1269,realm-java,"Converted RealmTests to JUnit4 + Fixed Findbugs issues/switch to JUnit4/enhancing notifications, adding Async queries for DynamicRealmObject/New Migration and Dynamic API. New Sort/Case enums. New RealmCache/Checking to see if a transaction is currently in progress for sync and async transaction pathways. Also adding logging. Added a test helper to assist with log assertion. Fixes Fixing typo. Removing logger after testing Removing extra line Fixing tests and adding change log message. Adding breaking change message Small cosmetic changes Adding punctuation formatting Fixing unit test./"
,,0.0673,realm-java,Convert migration and cache tests to JUNIT4/New Migration and Dynamic API. New Sort/Case enums. New RealmCache/
,,0.0599,realm-java,Added Realm.copyFromRealm()/
,,0.0737,realm-java,Added RealmCollection APIs/Fix unit test example mocks/
,,0.0652,realm-java,More GCed ref for flaky test (#3135)/
,,0.0628,realm-java,More GCed ref for flaky test (#3135)/Fixed unit tests./
,,0.0792,realm-java,More GCed ref for flaky test (#3135)/GCed ref causes flaky test (#3131)/
,,0.0673,realm-java,More GCed ref for flaky test (#3135)/
,,0.0673,realm-java,More GCed ref for flaky test (#3135)/
,,0.0652,realm-java,More GCed ref for flaky test (#3135)/
,,0.1678,realm-java,"Add RealmQuery.in() (#3133) * Add RealmQuery.equalToAny() (#841) * PR feedback: equalToAny in * PR feedback: apply beginGroup() and endGroup() on in operator. We should use beginGroup() and endGroup() since equalTo(""a"") and in(""b"", ""c"", ""d"") does not equal to equalTo(""a"") and equalTo(""b"") or equalTo(""c"") or equalTo(""d""). * PR feedback: throws an IllegalArgumentException if values is an empty array. * Add a test, in_date() * Remove unnecessary tests. * Fix type fields in in_byte() * Add 3 tests, in_byte(), in_short() and in_int() * Update CHANGELOG.md for RealmQuery.in() * PR feedback: array version vargs version. * PR feedback: ++i i++ * PR feedback: fix javadocs. * PR feedback: remove unnecessary parenthesises. * PR feedback: revert the variable arguments version. * PR feedback: fix javadocs and improve error messages. * PR feedback: Extract the constant string literal from the hard-coded error message. * PR feedback: Adopt boxed type API. * PR feedback: add null tests. * Fix row_isValid * Fix openPreNullWithRequired * PR feedback: update javadocs. * PR feedback: use NoPrimaryKeyNullTypes for testing instead of AllTypes. * PR feedback: Revert AllTypes. * Revert automatic formatting. * Revert auto-formatting again. * PR feedback: remove unnecessay empty lines. * PR feedback: generalize tests. * PR feedback: update javadocs./More GCed ref for flaky test (#3135)/Fixed unit tests./"
,,0.1594,realm-java,"Add RealmQuery.in() (#3133) * Add RealmQuery.equalToAny() (#841) * PR feedback: equalToAny in * PR feedback: apply beginGroup() and endGroup() on in operator. We should use beginGroup() and endGroup() since equalTo(""a"") and in(""b"", ""c"", ""d"") does not equal to equalTo(""a"") and equalTo(""b"") or equalTo(""c"") or equalTo(""d""). * PR feedback: throws an IllegalArgumentException if values is an empty array. * Add a test, in_date() * Remove unnecessary tests. * Fix type fields in in_byte() * Add 3 tests, in_byte(), in_short() and in_int() * Update CHANGELOG.md for RealmQuery.in() * PR feedback: array version vargs version. * PR feedback: ++i i++ * PR feedback: fix javadocs. * PR feedback: remove unnecessary parenthesises. * PR feedback: revert the variable arguments version. * PR feedback: fix javadocs and improve error messages. * PR feedback: Extract the constant string literal from the hard-coded error message. * PR feedback: Adopt boxed type API. * PR feedback: add null tests. * Fix row_isValid * Fix openPreNullWithRequired * PR feedback: update javadocs. * PR feedback: use NoPrimaryKeyNullTypes for testing instead of AllTypes. * PR feedback: Revert AllTypes. * Revert automatic formatting. * Revert auto-formatting again. * PR feedback: remove unnecessay empty lines. * PR feedback: generalize tests. * PR feedback: update javadocs./Forward all throwables but not only excpetions (#3126) For example the UnsatisfiedLinkError should cause the process terminated. This is the reason of all the time out issues we found for CI./"
,,0.0784,realm-java,"Remove the dependency of Realm.Handler from tests (#3317) Instead, those tests should use method from RunInLooperThread. Fix this in advance for the coming OS notification integration./"
,,0.0823,realm-java,"Remove the dependency of Realm.Handler from tests (#3317) Instead, those tests should use method from RunInLooperThread. Fix this in advance for the coming OS notification integration./"
,,0.0577,realm-java,Public Sync API (#73)/
,,0.0599,realm-java,Public Sync API (#73)/
,,0.1276,realm-java,Temporarily disable a test type based tests The original tests rely on the timing of the global listener and type based listeners which are changed a lot by integration of OS async. So rewrite those tests by removing the dependencies of global listener without changing the testing purpose. PS. : The global listener wont be called if it is added after the local transaction committed./
,,0.1103,realm-java,PermissionOffer/PermissionOfferResponse support (#4005) Added support for PermissionOffer and PermissionOfferResponse/SyncCredentials.accessToken + Integration tests (#4018) This PR adds support for SyncCredentials.accessToken() which is required for I also found a number of issues with the integration tests. They have been fixed as well./
,,0.1296,realm-java,"Adapt local_commit first related test cases/Generalize the ObserverPairList Since RowNotifier, CollectioNotifier and RealmNotifier have the similar requirements control the life cycle of the anonymous listener, create a ObserverPairList class for it. Also tests for the ObserverPairList. Then we can remove weak ref related tests from others./Add global listener to a non-looper thread Realm Listener will be triggered immediately when a local transaction commited. Or it will be triggered when waitForChange detect changes./"
,,0.0905,realm-java,SyncCredentials.accessToken + Integration tests (#4018) This PR adds support for SyncCredentials.accessToken() which is required for I also found a number of issues with the integration tests. They have been fixed as well./
,,0.1216,realm-java,PermissionOffer/PermissionOfferResponse support (#4005) Added support for PermissionOffer and PermissionOfferResponse/SyncCredentials.accessToken + Integration tests (#4018) This PR adds support for SyncCredentials.accessToken() which is required for I also found a number of issues with the integration tests. They have been fixed as well./Ignore exceptions (#4028) * Ignore exceptions/
,,0.1105,realm-java,"Allow more leniency when defining the server url (#4146)/Implement global logout (#3642)/PermissionOffer/PermissionOfferResponse support (#4005) Added support for PermissionOffer and PermissionOfferResponse/Convert to annotations for findbugs exceptions * Clean up code in SyncUser to eliminate FB exception * Add usage for the config files, to the top level README.md * Note UT findbugs failures/Revert ""Add support for SyncCredentials.accessToken. Updated integration tests."" This reverts commit b582e6ea546b9f7747bbe8400e0392a935758d71./Fix SyncConfiguration.toString() (#3792)/Add support for the management-Realm (#3627) Add preliminary support for the management-Realm/"
,,0.0697,realm-java,Implement global logout (#3642)/Nh/fixes token renew (#4040) * fixes and fixes
,,0.1016,realm-java,Add thread check to methods in DynamicRealmObject (#4259) * add a simple test case to expose * update Changelog * fix issue4258 * fix test failure * fix test process crash when RealmListTests#add_set_dynamicObjectFromOtherThread() fails/
,,0.066,realm-java,Validate how letters are sorted. (#4527)/
,,0.0786,realm-java,Backport Unit Test PRs to releases (#4581)/
,,0.066,realm-java,Add more capabilities to cleanup RunInLooperThread tests (#4740)/
,,0.0639,realm-java,Use NPM to install integration test server (#5249)/
,,0.0869,realm-java,Upgrade to Sync-RC21 and ROS 2.0.0-alpha.34 (#5277)/Use NPM to install integration test server (#5249)/Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/Align User Lookup implementation (#5109) * fixes
,,0.066,realm-java,Upgrade ROS Integration Test Server to 2.0.0-rc.5 (#5385)/
,,0.066,realm-java,Use NPM to install integration test server (#5249)/
,,0.0804,realm-java,Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/
,,0.0804,realm-java,Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/
,,0.0818,realm-java,Update realm-sync to 1.10.8 (#5129) And update object-store to 2274604de9/Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/
,,0.066,realm-java,Re-enable some deactivated tests (#5511)/
,,0.0798,realm-java,Ignore tests involving root certs/
,,0.0771,rocksdb,"Sun Studio support, and fix for test related memory fixes. LevelDB patch for Sun Studio Based on a patch submitted by Theo Schlossnagle thanks This fixes Issue 17. Fix a couple of test related memory leaks. git-svn-id: 62dab493-f737-651d-591e-8d6aee1b9529/"
,,0.0885,rocksdb,"Fixed cache key for block cache Summary: Added function to `RandomAccessFile` to generate an unique ID for that file. Currently only `PosixRandomAccessFile` has this behaviour implemented and only on Linux. Changed how key is generated in `Table::BlockReader`. Added tests to check whether the unique ID is stable, unique and not a prefix of another unique ID. Added tests to see that `Table` uses the cache more efficiently. Test Plan: make check Reviewers: chip, vamsi, dhruba Reviewed By: chip CC: leveldb Differential Revision:"
,,0.0871,rocksdb,"Fixed cache key for block cache Summary: Added function to `RandomAccessFile` to generate an unique ID for that file. Currently only `PosixRandomAccessFile` has this behaviour implemented and only on Linux. Changed how key is generated in `Table::BlockReader`. Added tests to check whether the unique ID is stable, unique and not a prefix of another unique ID. Added tests to see that `Table` uses the cache more efficiently. Test Plan: make check Reviewers: chip, vamsi, dhruba Reviewed By: chip CC: leveldb Differential Revision:"
,,0.0982,rocksdb,"Fix valgrind errors in rocksdb tests: auto_roll_logger_test, reduce_levels_test Summary: Fix for memory leaks in rocksdb tests. Also modified the variable NUM_FAILED_TESTS to print the actual number of failed tests. Test Plan: make valgrind ./<test> Reviewers: sheki, dhruba Reviewed By: sheki CC: leveldb Differential Revision:"
,,0.0828,rocksdb,"Expose usage info for the cache Summary: This diff will help us to figure out the memory usage for the cache part. Test Plan: added a new memory usage test for cache Reviewers: haobo, sdong, dhruba CC: leveldb Differential Revision:"
,,0.0639,rocksdb,C API: add rocksdb_env_set_high_priority_background_threads/C bindings: add a bunch of the newer options/Rename leveldb to rocksdb in C api/
,,0.1376,rocksdb,"Start DeleteFileTest with clean plate Summary: Remove all the files from the test dir before the test. The test failed when there were some old files still in the directory, since it checks the file counts. This is what caused jenkins test failures. It was running fine on my machine so it was hard to repro. Test Plan: 1. create an extra 000001.log file in the test directory 2. run a ./deletefile_test test failes 3. patch ./deletefile_test with this 4. test succeeds Reviewers: haobo, dhruba Reviewed By: haobo CC: leveldb Differential Revision: unittest Summary: Created a unittest that verifies that automatic deletion performed by PurgeObsoleteFiles() works correctly. Also, few small fixes on the logic part call version_set_->GetObsoleteFiles() in FindObsoleteFiles() instead of on some arbitrary positions. Test Plan: Created a unit test Reviewers: dhruba, haobo, nkg- Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.092,rocksdb,"ApplyToAllCacheEntries Summary: Added a method that executes a callback on every cache entry. Test Plan: added a unit test Reviewers: haobo Reviewed By: haobo CC: leveldb, dhruba Differential Revision:"
,,0.0643,rocksdb,Use new DBWithTTL API in tests/
,,0.1011,rocksdb,"Fix Mac compile/Added a few statistics for BackupableDB Summary: Added the following statistics to BackupableDB: 1. Number of successful and failed backups in class BackupStatistics 2. Time taken to do a backup 3. Number of files in a backup 1 is implemented in the BackupStatistics class 2 and 3 are added in the BackupMeta and BackupInfo class Test Plan: 1 can be tested using BackupStatistics::ToString(), 2 and 3 can be tested in the BackupInfo class Reviewers: sdong, igor2, ljin, igor Reviewed By: igor Differential Revision:"
,,0.1212,rocksdb,"Refactor PerfStepTimer to stop on destruct This eliminates the need to remember to call PERF_TIMER_STOP when a section has been timed. This allows more useful design with the perf timers and enables possible return value optimizations. Simplistic example: class Foo { public: Foo(int v) : m_v(v); private: int m_v; } Foo makeFrobbedFoo(int *errno) { *errno 0; return Foo(); } Foo bar(int *errno) { PERF_TIMER_GUARD(some_timer); return makeFrobbedFoo(errno); } int main(int argc, char[] argv) { Foo f; int errno; f bar(&errno); if (errno) return return 0; } After bar() is called, perf_context.some_timer would be incremented as if Stop(&perf_context.some_timer) was called at the end, and the compiler is still able to produce optimizations on the return value from makeFrobbedFoo() through to main()./"
,,0.0762,rocksdb,"add support for nested BlockBasedTableOptions in config string Summary: Add support to allow nested config for block-based table factory. The format looks like this: ""write_buffer_size=1024;block_based_table_factory={block_size=4k};max_write_buffer_num=2"" Test Plan: unit test Reviewers: yhchiang, rven, igor, ljin, jonahcohen Reviewed By: jonahcohen Subscribers: jonahcohen, dhruba, leveldb Differential Revision:"
,,0.0701,rocksdb,Added some more wrappers and wrote a test for backup in C/Allow creating backups from C/c api: add max wal total to opts/Add cuckoo table options to the C interface/
,,0.0639,rocksdb,[RocksJava] Testcase improvements/[RocksJava] Test-framework integration/
,,0.0941,rocksdb,[RocksJava] Improved BackupableDBTest Splitted methods to meaningful tests Added tests for additional functionality Covered missing parts/
,,0.0716,rocksdb,[RocksJava] Comparator tests for CF Added AbstractComparatorTest. Fixed a bug in the JNI Part about Java comparators/
,,0.0916,rocksdb,"Fix the build on Mac OS X/[RocksJava] Incorporated changes D30081/[RocksJava] Slice / DirectSlice improvements Summary: AssertionError when initialized with Non-Direct Buffer Tests + coverage for DirectSlice Slice sigsegv fixes when initializing from String and byte arrays Slice Tests Test Plan: Run tests without source modifications. Reviewers: yhchiang, adamretter, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.1513,rocksdb,"Divide test DBIteratorTest.DBIterator to smaller tests Summary: When building on my host, I saw warning: In file included from db/db_iter_test.cc:17:0: db/db_iter_test.cc: In member function ‚Äòvoid rocksdb::_Test_DBIterator::_Run()‚Äô: ./util/testharness.h:147:14: note: variable tracking size limit exceeded with retrying without void TCONCAT(_Test_,name)::_Run() ^ ./util/testharness.h:134:23: note: in definition of macro ‚ÄòTCONCAT1‚Äô TCONCAT1(a,b) a##b ^ ./util/testharness.h:147:6: note: in expansion of macro ‚ÄòTCONCAT‚Äô void TCONCAT(_Test_,name)::_Run() ^ db/db_iter_test.cc:589:1: note: in expansion of macro ‚ÄòTEST‚Äô TEST(DBIteratorTest, DBIterator) { ^ By dividing the test into small tests, it should fix the problem Test Plan: Run the test Reviewers: rven, yhchiang, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.1201,rocksdb,"Enable dynamic changing of rate limiters bytes_per_second Summary: This feature is going to be useful for mongodb+rocksdb. Ill expose it through mongos API. Test Plan: added new unit test. also will run TSAN on the new unit test Reviewers: meyering, sdong Reviewed By: meyering, sdong Subscribers: meyering, dhruba, leveldb Differential Revision:"
,,0.1217,rocksdb,"Enable dynamic changing of rate limiters bytes_per_second Summary: This feature is going to be useful for mongodb+rocksdb. Ill expose it through mongos API. Test Plan: added new unit test. also will run TSAN on the new unit test Reviewers: meyering, sdong Reviewed By: meyering, sdong Subscribers: meyering, dhruba, leveldb Differential Revision:"
,,0.2466,rocksdb,"rocksdb: Replace ASSERT* with EXPECT* in functions that does not return void value Summary: gtest does not use exceptions to fail a unit test by design, and `ASSERT*`s are implemented using `return`. As a consequence we cannot use `ASSERT*` in a function that does not return `void` value ([[ | 1]]), and have to fix our existing code. This diff does this in a generic way, with no manual changes. In order to detect all existing `ASSERT*` that are used in functions that doesnt return void value, I change the code to generate compile errors for such cases. In `util/testharness.h` I defined `EXPECT*` assertions, the same way as `ASSERT*`, and redefined `ASSERT*` to return `void`. Then executed: ```lang=bash % USE_CLANG=1 make all 2> build.log % perl print ""-- "".$F[0].""\n"" if /: error:/ \ build.log | xargs 1 perl s/ASSERT/EXPECT/g if $. $number % make format ``` After that I reverted back change to `ASSERT*` in `util/testharness.h`. But preserved introduced `EXPECT*`, which is the same as `ASSERT*`. This will be deleted once switched to gtest. This diff is independent and contains manual changes only in `util/testharness.h`. Test Plan: Make sure all tests are passing. ```lang=bash % USE_CLANG=1 make check ``` Reviewers: igor, lgalanis, sdong, yufei.zhu, rven, meyering Reviewed By: meyering Subscribers: dhruba, leveldb Differential Revision: as unused some variables with cpp-derived names Summary: as above Test Plan: Run ""make EXTRA_CXXFLAGS=-W and see fewer errors. Reviewers: ljin, sdong, igor.sugak, igor Reviewed By: igor Subscribers: dhruba Differential Revision: Fix scan-build Called C++ object pointer is null and Dereference of null pointer bugs Summary: In the existing implementation of `ASSERT*`, test termination happens in `~Tester`, which is called when instance of `Tester` goes out of scope. This is the cause of many scan-build bugs. This diff changes `ASSERT*` to terminate the test immediately. Also added one suppression in `util/signal_test.cc` scan-build bugs before: after: Test Plan: Modify some test to fail an assertion and make sure that `ASSERT*` terminated the test. Run `make analyze` and make sure no Called C++ object pointer is null and Dereference of null pointer bugs reported. Run tests and make sure no failing tests: ```lang=bash % make check % USE_CLANG=1 make check ``` Reviewers: meyering, lgalanis, sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.4326,rocksdb,"rocksdb: switch to gtest Summary: Our existing test notation is very similar to what is used in gtest. It makes it easy to adopt what is different. In this diff I modify existing [[ | test fixture ]] classes to inherit from `testing::Test`. Also for unit tests that use fixture class, `TEST` is replaced with `TEST_F` as required in gtest. There are several custom `main` functions in our existing tests. To make this transition easier, I modify all `main` functions to fallow gtest notation. But eventually we can remove them and use implementation of `main` that gtest provides. ```lang=bash % cat ~/transform files=$(git ls-files *test\.cc) for file in $files do if grep ""rocksdb::test::RunAllTests()"" $file then if grep ^class \w+Test { $file then perl s/^(class \w+Test) {/${1}: public testing::Test {/g $file perl s/^(TEST)/${1}_F/g $file fi perl s/(int main.*\{)/${1}::testing::InitGoogleTest(&argc, argv);/g $file perl s/rocksdb::test::RunAllTests/RUN_ALL_TESTS/g $file fi done % sh ~/transform % make format ``` Second iteration of this diff contains only scripted changes. Third iteration contains manual changes to fix last errors and make it compilable. Test Plan: Build and notice no errors. ```lang=bash % USE_CLANG=1 make check ``` Tests are still testing. Reviewers: meyering, sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.1991,rocksdb,"Task 6532943: Rocksdb SetCapacity() can dynamically change cache capacity if feasible Summary: When new capacity is larger than existing capacity, simply update the capacity to the new valie When new capacity is less than existing capacity, but more than the usage, simply update the capacity to new value When new capacity is less than the existing capacity and existing usage both, try to purge entries in LRU if feasible to make usage capacity Test Plan: Created unit tests in cache_test.cc Reviewers: sdong, rven, yhchiang, igor Reviewed By: igor Subscribers: dhruba Differential Revision: removeScanCountLimit in NewLRUCache Summary: It is no longer used by the implementation, so we should also remove it from the public API. Test Plan: make check Reviewers: sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision: Add missing override Summary: When using latest clang (3.6 or 3.7/trunck) rocksdb is failing with many errors. Almost all of them are missing override errors. This diff adds missing override keyword. No manual changes. Prerequisites: bear and clang 3.5 build with extra tools ```lang=bash % USE_CLANG=1 bear make all generate a compilation database % clang-modernize . . % make format ``` Test Plan: Make sure all tests are passing. ```lang=bash % default fb code clang. % make check ``` Verify less error and no missing override errors. ```lang=bash % Have trunk clang present in path. % ROCKSDB_NO_FBCODE=1 CC=clang CXX=clang++ make ``` Reviewers: igor, kradhakrishnan, rven, meyering, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.1217,rocksdb,"Enable dynamic changing of rate limiters bytes_per_second Summary: This feature is going to be useful for mongodb+rocksdb. Ill expose it through mongos API. Test Plan: added new unit test. also will run TSAN on the new unit test Reviewers: meyering, sdong Reviewed By: meyering, sdong Subscribers: meyering, dhruba, leveldb Differential Revision:"
,,0.1164,rocksdb,"rocksdb: Small refactoring before migrating to gtest Summary: These changes are necessary to make tests look more generic, and avoid feature conflicts with gtest. Test Plan: Make sure no build errors, and all test are passing. ``` % make check ``` Reviewers: igor, meyering Reviewed By: meyering Subscribers: dhruba, leveldb Differential Revision:"
,,0.3957,rocksdb,"test: avoid vuln-inducing use of temporary directory Summary: Without this change, someone on the machine on which I run ""make check"" could cause me to overwrite arbitrary files owned by me, via a symlink attack. Instead of using a predictable temporary directory and accepting to use a preexisting one, always create a new one using mkdtemp. If $TEST_IOCTL_FRIENDLY_TMPDIR is set and usable, attempt first to find a usable temporary directory therein. If not, or if unusable, then try /var/tmp and /tmp. If none of those is usable abort with a diagnostic. To do that, I added a new class. Its constructor finds a suitable directory or aborts, the sole member prints that directorys name, and the destructor unlinks what should be an empty directory. Note that while the code before this did not remove its temporary directory, there was only one per $UID. Now, there would be at least one per run or one per test, depending on implementation, so it is important to remove them. Test Plan: Run this on a fedora rawhide system, where /tmp is a tmpfs file system, and /var/tmp is ext4. This gives a diagnostic that /dev/shm is not suitable and ends up using /var/tmp. TEST_IOCTL_FRIENDLY_TMPDIR=/dev/shm ./env_test Uses /var/tmp; same as when envvar not set. TEST_IOCTL_FRIENDLY_TMPDIR=/var/tmp ./env_test Uses /tmp unless its tmpfs, in which case it gives a diagnostic and uses /var/tmp. TEST_IOCTL_FRIENDLY_TMPDIR=/tmp ./env_test Reviewers: ljin, rven, igor.sugak, yhchiang, sdong, igor Reviewed By: igor Subscribers: dhruba Differential Revision: ioctl-using tests when not supported Summary: [NB: this is a prerequisite for the /tmp-abuse-fixing patch] This avoids spurious test failure on Linux systems like Fedora for which /tmp is a tmpfs file system. On a devtmpfs file system, ioctl(fd, FS_IOC_GETVERSION, &version) returns with errno ENOTTTY, indicating that that ioctl is not supported on such a file system. Do not let this cause test failures, e.g., where env_test would assert that file->GetUniqueId(...) > 0. Before this change, ./env_test would fail these three tests on a fedora rawhide system: [ FAILED ] 3 tests, listed below: [ FAILED ] EnvPosixTest.RandomAccessUniqueID [ FAILED ] EnvPosixTest.RandomAccessUniqueIDConcurrent [ FAILED ] EnvPosixTest.RandomAccessUniqueIDDeletes 3 FAILED TESTS The fix: When support for that ioctl is lacking, skip each affected test. Could be improved by noting which sub-tests are being skipped. Test Plan: run these on F21 and note that they now pass. TEST_TMPDIR=/dev/shm/rdb ./env_test ./env_test Reviewers: ljin, rven, igor.sugak, yhchiang, sdong, igor Reviewed By: igor Subscribers: dhruba Differential Revision: TSAN failue in env_test Summary: Check for state of task before deleting it. Test Plan: Run env_test with TSAN Reviewers: igor, sdong Reviewed By: sdong Subscribers: meyering, dhruba, leveldb Differential Revision: switch to gtest Summary: Our existing test notation is very similar to what is used in gtest. It makes it easy to adopt what is different. In this diff I modify existing [[ | test fixture ]] classes to inherit from `testing::Test`. Also for unit tests that use fixture class, `TEST` is replaced with `TEST_F` as required in gtest. There are several custom `main` functions in our existing tests. To make this transition easier, I modify all `main` functions to fallow gtest notation. But eventually we can remove them and use implementation of `main` that gtest provides. ```lang=bash % cat ~/transform files=$(git ls-files *test\.cc) for file in $files do if grep ""rocksdb::test::RunAllTests()"" $file then if grep ^class \w+Test { $file then perl s/^(class \w+Test) {/${1}: public testing::Test {/g $file perl s/^(TEST)/${1}_F/g $file fi perl s/(int main.*\{)/${1}::testing::InitGoogleTest(&argc, argv);/g $file perl s/rocksdb::test::RunAllTests/RUN_ALL_TESTS/g $file fi done % sh ~/transform % make format ``` Second iteration of this diff contains only scripted changes. Third iteration contains manual changes to fix last errors and make it compilable. Test Plan: Build and notice no errors. ```lang=bash % USE_CLANG=1 make check ``` Tests are still testing. Reviewers: meyering, sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision: up rocksDB close call. Summary: On RocksDB, when there are multiple instances doing flushes/compactions in the background, the close call takes a long time because the flushes/compactions need to complete before the database can shut down. If another instance is using the background threads and the compaction for this instance is in the queue since it has been scheduled, we still cannot shutdown. We now remove the scheduled background tasks which have not yet started running, so that shutdown is speeded up. Test Plan: DB Test added. Reviewers: yhchiang, igor, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.4246,rocksdb,"Task 6532943: Rocksdb SetCapacity() can dynamically change cache capacity if feasible Summary: When new capacity is larger than existing capacity, simply update the capacity to the new valie When new capacity is less than existing capacity, but more than the usage, simply update the capacity to new value When new capacity is less than the existing capacity and existing usage both, try to purge entries in LRU if feasible to make usage capacity Test Plan: Created unit tests in cache_test.cc Reviewers: sdong, rven, yhchiang, igor Reviewed By: igor Subscribers: dhruba Differential Revision: removeScanCountLimit in NewLRUCache Summary: It is no longer used by the implementation, so we should also remove it from the public API. Test Plan: make check Reviewers: sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision: switch to gtest Summary: Our existing test notation is very similar to what is used in gtest. It makes it easy to adopt what is different. In this diff I modify existing [[ | test fixture ]] classes to inherit from `testing::Test`. Also for unit tests that use fixture class, `TEST` is replaced with `TEST_F` as required in gtest. There are several custom `main` functions in our existing tests. To make this transition easier, I modify all `main` functions to fallow gtest notation. But eventually we can remove them and use implementation of `main` that gtest provides. ```lang=bash % cat ~/transform files=$(git ls-files *test\.cc) for file in $files do if grep ""rocksdb::test::RunAllTests()"" $file then if grep ^class \w+Test { $file then perl s/^(class \w+Test) {/${1}: public testing::Test {/g $file perl s/^(TEST)/${1}_F/g $file fi perl s/(int main.*\{)/${1}::testing::InitGoogleTest(&argc, argv);/g $file perl s/rocksdb::test::RunAllTests/RUN_ALL_TESTS/g $file fi done % sh ~/transform % make format ``` Second iteration of this diff contains only scripted changes. Third iteration contains manual changes to fix last errors and make it compilable. Test Plan: Build and notice no errors. ```lang=bash % USE_CLANG=1 make check ``` Tests are still testing. Reviewers: meyering, sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.0643,rocksdb,[RocksJava] Fix RateLimiter Tests in 3.10/
,,0.0652,rocksdb,[RocksJava] Fix cleanup in tests/
,,0.1164,rocksdb,"rocksdb: Small refactoring before migrating to gtest Summary: These changes are necessary to make tests look more generic, and avoid feature conflicts with gtest. Test Plan: Make sure no build errors, and all test are passing. ``` % make check ``` Reviewers: igor, meyering Reviewed By: meyering Subscribers: dhruba, leveldb Differential Revision:"
,,0.1269,rocksdb,"rocksdb: Small refactoring before migrating to gtest Summary: These changes are necessary to make tests look more generic, and avoid feature conflicts with gtest. Test Plan: Make sure no build errors, and all test are passing. ``` % make check ``` Reviewers: igor, meyering Reviewed By: meyering Subscribers: dhruba, leveldb Differential Revision:"
,,0.2197,rocksdb,"fault_injection_test: add a test case to cover log syncing after a log roll Summary: Add a test case: Write some keys without sync, flush, write other keys and do sync. Before flush finishes, host crashes and unsync data is dropped. Tag the new test as disabled since it is not passing. Test Plan: Run the test Reviewers: MarkCallaghan, rven, anthony, igor, kradhakrishnan Reviewed By: igor Subscribers: leveldb, dhruba Differential Revision: Replace ASSERT* with EXPECT* in functions that does not return void value Summary: gtest does not use exceptions to fail a unit test by design, and `ASSERT*`s are implemented using `return`. As a consequence we cannot use `ASSERT*` in a function that does not return `void` value ([[ | 1]]), and have to fix our existing code. This diff does this in a generic way, with no manual changes. In order to detect all existing `ASSERT*` that are used in functions that doesnt return void value, I change the code to generate compile errors for such cases. In `util/testharness.h` I defined `EXPECT*` assertions, the same way as `ASSERT*`, and redefined `ASSERT*` to return `void`. Then executed: ```lang=bash % USE_CLANG=1 make all 2> build.log % perl print ""-- "".$F[0].""\n"" if /: error:/ \ build.log | xargs 1 perl s/ASSERT/EXPECT/g if $. $number % make format ``` After that I reverted back change to `ASSERT*` in `util/testharness.h`. But preserved introduced `EXPECT*`, which is the same as `ASSERT*`. This will be deleted once switched to gtest. This diff is independent and contains manual changes only in `util/testharness.h`. Test Plan: Make sure all tests are passing. ```lang=bash % USE_CLANG=1 make check ``` Reviewers: igor, lgalanis, sdong, yufei.zhu, rven, meyering Reviewed By: meyering Subscribers: dhruba, leveldb Differential Revision: Add missing override Summary: When using latest clang (3.6 or 3.7/trunck) rocksdb is failing with many errors. Almost all of them are missing override errors. This diff adds missing override keyword. No manual changes. Prerequisites: bear and clang 3.5 build with extra tools ```lang=bash % USE_CLANG=1 bear make all generate a compilation database % clang-modernize . . % make format ``` Test Plan: Make sure all tests are passing. ```lang=bash % default fb code clang. % make check ``` Verify less error and no missing override errors. ```lang=bash % Have trunk clang present in path. % ROCKSDB_NO_FBCODE=1 CC=clang CXX=clang++ make ``` Reviewers: igor, kradhakrishnan, rven, meyering, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.2588,rocksdb,"rocksdb: Replace ASSERT* with EXPECT* in functions that does not return void value Summary: gtest does not use exceptions to fail a unit test by design, and `ASSERT*`s are implemented using `return`. As a consequence we cannot use `ASSERT*` in a function that does not return `void` value ([[ | 1]]), and have to fix our existing code. This diff does this in a generic way, with no manual changes. In order to detect all existing `ASSERT*` that are used in functions that doesnt return void value, I change the code to generate compile errors for such cases. In `util/testharness.h` I defined `EXPECT*` assertions, the same way as `ASSERT*`, and redefined `ASSERT*` to return `void`. Then executed: ```lang=bash % USE_CLANG=1 make all 2> build.log % perl print ""-- "".$F[0].""\n"" if /: error:/ \ build.log | xargs 1 perl s/ASSERT/EXPECT/g if $. $number % make format ``` After that I reverted back change to `ASSERT*` in `util/testharness.h`. But preserved introduced `EXPECT*`, which is the same as `ASSERT*`. This will be deleted once switched to gtest. This diff is independent and contains manual changes only in `util/testharness.h`. Test Plan: Make sure all tests are passing. ```lang=bash % USE_CLANG=1 make check ``` Reviewers: igor, lgalanis, sdong, yufei.zhu, rven, meyering Reviewed By: meyering Subscribers: dhruba, leveldb Differential Revision:"
,,0.4248,rocksdb,"rocksdb: switch to gtest Summary: Our existing test notation is very similar to what is used in gtest. It makes it easy to adopt what is different. In this diff I modify existing [[ | test fixture ]] classes to inherit from `testing::Test`. Also for unit tests that use fixture class, `TEST` is replaced with `TEST_F` as required in gtest. There are several custom `main` functions in our existing tests. To make this transition easier, I modify all `main` functions to fallow gtest notation. But eventually we can remove them and use implementation of `main` that gtest provides. ```lang=bash % cat ~/transform files=$(git ls-files *test\.cc) for file in $files do if grep ""rocksdb::test::RunAllTests()"" $file then if grep ^class \w+Test { $file then perl s/^(class \w+Test) {/${1}: public testing::Test {/g $file perl s/^(TEST)/${1}_F/g $file fi perl s/(int main.*\{)/${1}::testing::InitGoogleTest(&argc, argv);/g $file perl s/rocksdb::test::RunAllTests/RUN_ALL_TESTS/g $file fi done % sh ~/transform % make format ``` Second iteration of this diff contains only scripted changes. Third iteration contains manual changes to fix last errors and make it compilable. Test Plan: Build and notice no errors. ```lang=bash % USE_CLANG=1 make check ``` Tests are still testing. Reviewers: meyering, sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.3877,rocksdb,"rocksdb: switch to gtest Summary: Our existing test notation is very similar to what is used in gtest. It makes it easy to adopt what is different. In this diff I modify existing [[ | test fixture ]] classes to inherit from `testing::Test`. Also for unit tests that use fixture class, `TEST` is replaced with `TEST_F` as required in gtest. There are several custom `main` functions in our existing tests. To make this transition easier, I modify all `main` functions to fallow gtest notation. But eventually we can remove them and use implementation of `main` that gtest provides. ```lang=bash % cat ~/transform files=$(git ls-files *test\.cc) for file in $files do if grep ""rocksdb::test::RunAllTests()"" $file then if grep ^class \w+Test { $file then perl s/^(class \w+Test) {/${1}: public testing::Test {/g $file perl s/^(TEST)/${1}_F/g $file fi perl s/(int main.*\{)/${1}::testing::InitGoogleTest(&argc, argv);/g $file perl s/rocksdb::test::RunAllTests/RUN_ALL_TESTS/g $file fi done % sh ~/transform % make format ``` Second iteration of this diff contains only scripted changes. Third iteration contains manual changes to fix last errors and make it compilable. Test Plan: Build and notice no errors. ```lang=bash % USE_CLANG=1 make check ``` Tests are still testing. Reviewers: meyering, sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision: Add missing override Summary: When using latest clang (3.6 or 3.7/trunck) rocksdb is failing with many errors. Almost all of them are missing override errors. This diff adds missing override keyword. No manual changes. Prerequisites: bear and clang 3.5 build with extra tools ```lang=bash % USE_CLANG=1 bear make all generate a compilation database % clang-modernize . . % make format ``` Test Plan: Make sure all tests are passing. ```lang=bash % default fb code clang. % make check ``` Verify less error and no missing override errors. ```lang=bash % Have trunk clang present in path. % ROCKSDB_NO_FBCODE=1 CC=clang CXX=clang++ make ``` Reviewers: igor, kradhakrishnan, rven, meyering, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.4505,rocksdb,"rocksdb: switch to gtest Summary: Our existing test notation is very similar to what is used in gtest. It makes it easy to adopt what is different. In this diff I modify existing [[ | test fixture ]] classes to inherit from `testing::Test`. Also for unit tests that use fixture class, `TEST` is replaced with `TEST_F` as required in gtest. There are several custom `main` functions in our existing tests. To make this transition easier, I modify all `main` functions to fallow gtest notation. But eventually we can remove them and use implementation of `main` that gtest provides. ```lang=bash % cat ~/transform files=$(git ls-files *test\.cc) for file in $files do if grep ""rocksdb::test::RunAllTests()"" $file then if grep ^class \w+Test { $file then perl s/^(class \w+Test) {/${1}: public testing::Test {/g $file perl s/^(TEST)/${1}_F/g $file fi perl s/(int main.*\{)/${1}::testing::InitGoogleTest(&argc, argv);/g $file perl s/rocksdb::test::RunAllTests/RUN_ALL_TESTS/g $file fi done % sh ~/transform % make format ``` Second iteration of this diff contains only scripted changes. Third iteration contains manual changes to fix last errors and make it compilable. Test Plan: Build and notice no errors. ```lang=bash % USE_CLANG=1 make check ``` Tests are still testing. Reviewers: meyering, sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision: Replace ASSERT* with EXPECT* in functions that does not return void value Summary: gtest does not use exceptions to fail a unit test by design, and `ASSERT*`s are implemented using `return`. As a consequence we cannot use `ASSERT*` in a function that does not return `void` value ([[ | 1]]), and have to fix our existing code. This diff does this in a generic way, with no manual changes. In order to detect all existing `ASSERT*` that are used in functions that doesnt return void value, I change the code to generate compile errors for such cases. In `util/testharness.h` I defined `EXPECT*` assertions, the same way as `ASSERT*`, and redefined `ASSERT*` to return `void`. Then executed: ```lang=bash % USE_CLANG=1 make all 2> build.log % perl print ""-- "".$F[0].""\n"" if /: error:/ \ build.log | xargs 1 perl s/ASSERT/EXPECT/g if $. $number % make format ``` After that I reverted back change to `ASSERT*` in `util/testharness.h`. But preserved introduced `EXPECT*`, which is the same as `ASSERT*`. This will be deleted once switched to gtest. This diff is independent and contains manual changes only in `util/testharness.h`. Test Plan: Make sure all tests are passing. ```lang=bash % USE_CLANG=1 make check ``` Reviewers: igor, lgalanis, sdong, yufei.zhu, rven, meyering Reviewed By: meyering Subscribers: dhruba, leveldb Differential Revision:"
,,0.1104,rocksdb,Fix WinEnv::NowMicrosec * std::chrono does not provide enough granularity for microsecs and periodically emits duplicates * the bug is manifested in log rotation logic where we get duplicate log file names and loose previous log content * msvc does not imlement COW on std::strings adjusted the test to use refs in the loops as auto does not retain ref info * adjust auto_log rotation test with Windows specific command to remove a folder. The test previously worked because we have unix utils installed in house but this may not be the case for everyone./
,,0.1117,rocksdb,"Added tests for ExpandWhileOverlapping() Summary: This patch adds three test cases for ExpandWhileOverlapping() to the compaction_picker_test test suite. ExpandWhileOverlapping() only has an effect if the comparison function for the internal keys allows for overlapping user keys in different SST files on the same level. Thus, this patch adds a comparator based on sequence numbers to compaction_picker_test for the new test cases. Test Plan: make compaction_picker_test && ./compaction_picker_test All tests pass Replace body of ExpandWhileOverlapping() with `return true` Compile and run ./compaction_picker_test as before New tests fail Reviewers: sdong, yhchiang, rven, anthony, IslamAbdelRahman, kradhakrishnan, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.3828,rocksdb,"Refactor to support file_reader_writer on Windows. Summary. A change Has attempted to move common functionality out of platform dependent code to a new facility called file_reader_writer. This includes: perf counters Buffering RateLimiting However, the change did not attempt to refactor Windows code. To mitigate, we introduce new quering interfaces such as UseOSBuffer(), GetRequiredBufferAlignment() and ReaderWriterForward() for pure forwarding where required. Introduce WritableFile got a new method Truncate(). This is to communicate to the file as to how much data it has on close. When space is pre-allocated on Linux it is filled with zeros implicitly, no such thing exist on Windows so we must truncate file on close. When operating in unbuffered mode the last page is filled with zeros but we still want to truncate. Previously, Close() would take care of it but now buffer management is shifted to the wrappers and the file has no idea about the file true size. This means that Close() on the wrapper level must always include Truncate() as well as wrapper __dtor should call Close() and against double Close(). Move buffered/unbuffered write logic to the wrapper. Utilize Aligned buffer class. Adjust tests and implement Truncate() where necessary. Come up with reasonable defaults for new virtual interfaces. Forward calls for RandomAccessReadAhead class to avoid double buffering and locking (double locking in unbuffered mode on WIndows)./Helper functions to support direct IO Summary: This patch adds the helper functions and variables to allow a backend implementing WritableFile to support direct IO when persisting a memtable. Test Plan: Since there is no upstream implementation of WritableFile supporting direct IO, the new behavior is disabled. Tests should be provided by the backend implementing WritableFile./ReadaheadRandomAccessFile userspace readahead Summary: ReadaheadRandomAccessFile acts as a transparent layer on top of RandomAccessFile. When a Read() request is issued, it issues a much bigger request to the OS and caches the result. When a new request comes in and we already have the data cached, it doesnt have to issue any requests to the OS. We add ReadaheadRandomAccessFile layer only when file is read during compactions. D45105 was incorrectly closed by Phabricator because I committed it to a separate branch (not master), so Im resubmitting the diff. Test Plan: make check Reviewers: MarkCallaghan, sdong Reviewed By: sdong Subscribers: leveldb, dhruba Differential Revision:"
,,0.3732,rocksdb,"Add Option to Skip Flushing in TableBuilder/Address code review comments both GH and internal Fix compilation issues on GCC/CLANG Address Windows Release test build issues due to Sync/Refactor to support file_reader_writer on Windows. Summary. A change Has attempted to move common functionality out of platform dependent code to a new facility called file_reader_writer. This includes: perf counters Buffering RateLimiting However, the change did not attempt to refactor Windows code. To mitigate, we introduce new quering interfaces such as UseOSBuffer(), GetRequiredBufferAlignment() and ReaderWriterForward() for pure forwarding where required. Introduce WritableFile got a new method Truncate(). This is to communicate to the file as to how much data it has on close. When space is pre-allocated on Linux it is filled with zeros implicitly, no such thing exist on Windows so we must truncate file on close. When operating in unbuffered mode the last page is filled with zeros but we still want to truncate. Previously, Close() would take care of it but now buffer management is shifted to the wrappers and the file has no idea about the file true size. This means that Close() on the wrapper level must always include Truncate() as well as wrapper __dtor should call Close() and against double Close(). Move buffered/unbuffered write logic to the wrapper. Utilize Aligned buffer class. Adjust tests and implement Truncate() where necessary. Come up with reasonable defaults for new virtual interfaces. Forward calls for RandomAccessReadAhead class to avoid double buffering and locking (double locking in unbuffered mode on WIndows)./ReadaheadRandomAccessFile userspace readahead Summary: ReadaheadRandomAccessFile acts as a transparent layer on top of RandomAccessFile. When a Read() request is issued, it issues a much bigger request to the OS and caches the result. When a new request comes in and we already have the data cached, it doesnt have to issue any requests to the OS. We add ReadaheadRandomAccessFile layer only when file is read during compactions. D45105 was incorrectly closed by Phabricator because I committed it to a separate branch (not master), so Im resubmitting the diff. Test Plan: make check Reviewers: MarkCallaghan, sdong Reviewed By: sdong Subscribers: leveldb, dhruba Differential Revision:"
,,0.3487,rocksdb,"Make use of portable `uint64_t` type to make possible file access in 64-bit. Currently, a signed off_t type is being used for the following interfaces for both offset and the length in bytes: * `Allocate` * `RangeSync` On Linux `off_t` is automatically either 32 or 64-bit depending on the platform. On Windows it is always a 32-bit signed long which limits file access and in particular space pre-allocation to effectively 2 Gb. Proposal is to replace off_t with uint64_t as a portable type always access files with 64-bit interfaces. May need to modify posix code but lack resources to test it./Fix WritableFileWriter::Append() return Summary: It looks like WritableFileWriter::Append() was returning OK() even when there is an error Test Plan: make check Reviewers: sdong, yhchiang, anthony, rven, kradhakrishnan, igor Reviewed By: igor Subscribers: dhruba Differential Revision: to support file_reader_writer on Windows. Summary. A change Has attempted to move common functionality out of platform dependent code to a new facility called file_reader_writer. This includes: perf counters Buffering RateLimiting However, the change did not attempt to refactor Windows code. To mitigate, we introduce new quering interfaces such as UseOSBuffer(), GetRequiredBufferAlignment() and ReaderWriterForward() for pure forwarding where required. Introduce WritableFile got a new method Truncate(). This is to communicate to the file as to how much data it has on close. When space is pre-allocated on Linux it is filled with zeros implicitly, no such thing exist on Windows so we must truncate file on close. When operating in unbuffered mode the last page is filled with zeros but we still want to truncate. Previously, Close() would take care of it but now buffer management is shifted to the wrappers and the file has no idea about the file true size. This means that Close() on the wrapper level must always include Truncate() as well as wrapper __dtor should call Close() and against double Close(). Move buffered/unbuffered write logic to the wrapper. Utilize Aligned buffer class. Adjust tests and implement Truncate() where necessary. Come up with reasonable defaults for new virtual interfaces. Forward calls for RandomAccessReadAhead class to avoid double buffering and locking (double locking in unbuffered mode on WIndows)./"
,,0.0884,rocksdb,"Add ZSTD (not final format) compression type Summary: Add ZSTD compression type. The same way as adding LZ4. Test Plan: run all tests. Generate files in db_bench. Make sure reads succeed. But the SST files cannot be opened in older versions. Also some other adhoc tests. Reviewers: rven, anthony, IslamAbdelRahman, kradhakrishnan, igor Reviewed By: igor Subscribers: MarkCallaghan, maykov, yoshinorim, leveldb, dhruba Differential Revision:"
,,0.0965,rocksdb,"Tests for ManifestDumpCommand and ListColumnFamiliesCommand Summary: Added tests for two LDBCommands namely i) ManifestDumpCommand and ii) ListColumnFamiliesCommand. + Minor fix in the sscanf formatter (along relace C cast with C++ cast) + replacing localtime with localtime_r which is thread safe. Test Plan: make all && ./tools/ldb_test.py Reviewers: anthony, igor, IslamAbdelRahman, kradhakrishnan, lgalanis, rven, sdong Reviewed By: sdong Subscribers: leveldb, dhruba Differential Revision:"
,,0.3559,rocksdb,"Make use of portable `uint64_t` type to make possible file access in 64-bit. Currently, a signed off_t type is being used for the following interfaces for both offset and the length in bytes: * `Allocate` * `RangeSync` On Linux `off_t` is automatically either 32 or 64-bit depending on the platform. On Windows it is always a 32-bit signed long which limits file access and in particular space pre-allocation to effectively 2 Gb. Proposal is to replace off_t with uint64_t as a portable type always access files with 64-bit interfaces. May need to modify posix code but lack resources to test it./Address code review comments both GH and internal Fix compilation issues on GCC/CLANG Address Windows Release test build issues due to Sync/Refactor to support file_reader_writer on Windows. Summary. A change Has attempted to move common functionality out of platform dependent code to a new facility called file_reader_writer. This includes: perf counters Buffering RateLimiting However, the change did not attempt to refactor Windows code. To mitigate, we introduce new quering interfaces such as UseOSBuffer(), GetRequiredBufferAlignment() and ReaderWriterForward() for pure forwarding where required. Introduce WritableFile got a new method Truncate(). This is to communicate to the file as to how much data it has on close. When space is pre-allocated on Linux it is filled with zeros implicitly, no such thing exist on Windows so we must truncate file on close. When operating in unbuffered mode the last page is filled with zeros but we still want to truncate. Previously, Close() would take care of it but now buffer management is shifted to the wrappers and the file has no idea about the file true size. This means that Close() on the wrapper level must always include Truncate() as well as wrapper __dtor should call Close() and against double Close(). Move buffered/unbuffered write logic to the wrapper. Utilize Aligned buffer class. Adjust tests and implement Truncate() where necessary. Come up with reasonable defaults for new virtual interfaces. Forward calls for RandomAccessReadAhead class to avoid double buffering and locking (double locking in unbuffered mode on WIndows)./Add ZSTD (not final format) compression type Summary: Add ZSTD compression type. The same way as adding LZ4. Test Plan: run all tests. Generate files in db_bench. Make sure reads succeed. But the SST files cannot be opened in older versions. Also some other adhoc tests. Reviewers: rven, anthony, IslamAbdelRahman, kradhakrishnan, igor Reviewed By: igor Subscribers: MarkCallaghan, maykov, yoshinorim, leveldb, dhruba Differential Revision:"
,,0.0737,rocksdb,Exit with non-zero status if one or more Java tests fail/
,,0.091,rocksdb,"Callback for informing backup downloading added Summary: In case of huge db backup infromation about progress of downloading would help. New callback parameter in CreateNewBackup() function will trigger whenever a some amount of data downloaded. Task: 8057631 Test Plan: ProgressCallbackDuringBackup test that cover new functionality added to BackupableDBTest tests. other test succeed as well. Reviewers: Guenena, benj, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision: a verifyBackup method to BackupEngine Summary: This diff adds a verifyBackup method to BackupEngine. The method verifies the name and size of each file in the backup. Test Plan: Unit test cases created and passing. Reviewers: igor, benj Subscribers: zelaine.fong, yhchiang, sdong, lgalanis, dhruba, AaronFeldman Differential Revision: BackupRateLimiter with GenericRateLimiter Summary: BackupRateLimiter removed and uses replaced with the existing GenericRateLimiter Test Plan: make all check make clean USE_CLANG=1 make all make clean OPT=-DROCKSDB_LITE make release Reviewers: leveldb, igor Reviewed By: igor Subscribers: igor, dhruba Differential Revision: noexcept and const integer lambda capture VS 2013 does not support noexcept. Complains about usage of ineteger constant within lambda requiring explicit capture./Add throttling to multi-threaded backups Summary: See internal task t8056182 Test Plan: Added multi-threading in RateLimiter test Reviewers: benj, AaronFeldman Reviewed By: AaronFeldman Subscribers: dhruba, leveldb Differential Revision:"
,,0.1118,rocksdb,"Adding new table properties Summary: This diff introduce new table properties that will be written for block based tables These properties are comparator name merge operator name property collectors names Test Plan: Added a new unit test to verify that these tests are written/read correctly Running all other tests right now (wont land until all tests finish) Reviewers: rven, kradhakrishnan, igor, sdong, anthony, yhchiang Reviewed By: yhchiang Subscribers: dhruba Differential Revision:"
,,0.4142,rocksdb,"Refactor to support file_reader_writer on Windows. Summary. A change Has attempted to move common functionality out of platform dependent code to a new facility called file_reader_writer. This includes: perf counters Buffering RateLimiting However, the change did not attempt to refactor Windows code. To mitigate, we introduce new quering interfaces such as UseOSBuffer(), GetRequiredBufferAlignment() and ReaderWriterForward() for pure forwarding where required. Introduce WritableFile got a new method Truncate(). This is to communicate to the file as to how much data it has on close. When space is pre-allocated on Linux it is filled with zeros implicitly, no such thing exist on Windows so we must truncate file on close. When operating in unbuffered mode the last page is filled with zeros but we still want to truncate. Previously, Close() would take care of it but now buffer management is shifted to the wrappers and the file has no idea about the file true size. This means that Close() on the wrapper level must always include Truncate() as well as wrapper __dtor should call Close() and against double Close(). Move buffered/unbuffered write logic to the wrapper. Utilize Aligned buffer class. Adjust tests and implement Truncate() where necessary. Come up with reasonable defaults for new virtual interfaces. Forward calls for RandomAccessReadAhead class to avoid double buffering and locking (double locking in unbuffered mode on WIndows)./"
,,0.0709,rocksdb,"Do not use timed_mutex in TransactionDB Summary: Stopped using std::timed_mutex as it has known issues in older versiong of gcc. Ran into these problems when testing MongoRocks. Test Plan: unit tests. Manual mongo testing on gcc 4.8. Reviewers: igor, yhchiang, rven, IslamAbdelRahman, kradhakrishnan, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.1416,rocksdb,"to/from hex refactor Summary: Expose the inverse of ToString(hex=true) on Slice: Slice::DecodeHex Refactor the other implementation of to/from hex in ldb_cmd.h to use the Slice version (Difference between the 2 is whether 0x is expected/produced in front of the hex string or not) Eliminated support for invalid odd length hex string this is now invalid instead of having 1/2 byte set Added (inverse of HexToString) test for LDBCommand::StringToHex which also indirectly tests Slice::ToString(true) After moving the original implementation from ldb_cmd.h, updated it to much simpler/efficient version (originally/inspired from ) Test Plan: run tests Reviewers: uddipta, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision:"
,,0.1416,rocksdb,"to/from hex refactor Summary: Expose the inverse of ToString(hex=true) on Slice: Slice::DecodeHex Refactor the other implementation of to/from hex in ldb_cmd.h to use the Slice version (Difference between the 2 is whether 0x is expected/produced in front of the hex string or not) Eliminated support for invalid odd length hex string this is now invalid instead of having 1/2 byte set Added (inverse of HexToString) test for LDBCommand::StringToHex which also indirectly tests Slice::ToString(true) After moving the original implementation from ldb_cmd.h, updated it to much simpler/efficient version (originally/inspired from ) Test Plan: run tests Reviewers: uddipta, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision:"
,,0.0702,rocksdb,Refactored tests to use try-with-resources/
,,0.066,rocksdb,Refactored tests to use try-with-resources/
,,0.0681,rocksdb,Refactored tests to use try-with-resources/
,,0.0744,rocksdb,Refactored tests to use try-with-resources/
,,0.0723,rocksdb,Refactored tests to use try-with-resources/
,,0.1951,rocksdb,"Add statistics field to show total size of index and filter blocks in block cache Summary: With `table_options.cache_index_and_filter_blocks true`, index and filter blocks are stored in block cache. Then people are curious how much of the block cache total size is used by indexes and bloom filters. It will be nice we have a way to report that. It can help people tune performance and plan for optimized hardware setting. We add several enum values for db Statistics. BLOCK_CACHE_INDEX/FILTER_BYTES_INSERT BLOCK_CACHE_INDEX/FILTER_BYTES_ERASE current INDEX/FILTER total block size in bytes. Test Plan: write a test case called `DBBlockCacheTest.IndexAndFilterBlocksStats`. The result is: ``` ~/local/rocksdb] make db_block_cache_test && ./db_block_cache_test Makefile:101: Warning: Compiling in debug mode. Dont use the resulting binary in production GEN util/build_version.cc make: `db_block_cache_test is up to date. Note: Google Test filter DBBlockCacheTest.IndexAndFilterBlocksStats [==========] Running 1 test from 1 test case. [----------] Global test environment set-up. [----------] 1 test from DBBlockCacheTest [ RUN ] DBBlockCacheTest.IndexAndFilterBlocksStats [ OK ] DBBlockCacheTest.IndexAndFilterBlocksStats (689 ms) [----------] 1 test from DBBlockCacheTest (689 ms total) [----------] Global test environment tear-down [==========] 1 test from 1 test case ran. (689 ms total) [ PASSED ] 1 test. ``` Reviewers: IslamAbdelRahman, andrewkr, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.1933,rocksdb,"Add statistics field to show total size of index and filter blocks in block cache Summary: With `table_options.cache_index_and_filter_blocks true`, index and filter blocks are stored in block cache. Then people are curious how much of the block cache total size is used by indexes and bloom filters. It will be nice we have a way to report that. It can help people tune performance and plan for optimized hardware setting. We add several enum values for db Statistics. BLOCK_CACHE_INDEX/FILTER_BYTES_INSERT BLOCK_CACHE_INDEX/FILTER_BYTES_ERASE current INDEX/FILTER total block size in bytes. Test Plan: write a test case called `DBBlockCacheTest.IndexAndFilterBlocksStats`. The result is: ``` ~/local/rocksdb] make db_block_cache_test && ./db_block_cache_test Makefile:101: Warning: Compiling in debug mode. Dont use the resulting binary in production GEN util/build_version.cc make: `db_block_cache_test is up to date. Note: Google Test filter DBBlockCacheTest.IndexAndFilterBlocksStats [==========] Running 1 test from 1 test case. [----------] Global test environment set-up. [----------] 1 test from DBBlockCacheTest [ RUN ] DBBlockCacheTest.IndexAndFilterBlocksStats [ OK ] DBBlockCacheTest.IndexAndFilterBlocksStats (689 ms) [----------] 1 test from DBBlockCacheTest (689 ms total) [----------] Global test environment tear-down [==========] 1 test from 1 test case ran. (689 ms total) [ PASSED ] 1 test. ``` Reviewers: IslamAbdelRahman, andrewkr, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.2004,rocksdb,"Add statistics field to show total size of index and filter blocks in block cache Summary: With `table_options.cache_index_and_filter_blocks true`, index and filter blocks are stored in block cache. Then people are curious how much of the block cache total size is used by indexes and bloom filters. It will be nice we have a way to report that. It can help people tune performance and plan for optimized hardware setting. We add several enum values for db Statistics. BLOCK_CACHE_INDEX/FILTER_BYTES_INSERT BLOCK_CACHE_INDEX/FILTER_BYTES_ERASE current INDEX/FILTER total block size in bytes. Test Plan: write a test case called `DBBlockCacheTest.IndexAndFilterBlocksStats`. The result is: ``` ~/local/rocksdb] make db_block_cache_test && ./db_block_cache_test Makefile:101: Warning: Compiling in debug mode. Dont use the resulting binary in production GEN util/build_version.cc make: `db_block_cache_test is up to date. Note: Google Test filter DBBlockCacheTest.IndexAndFilterBlocksStats [==========] Running 1 test from 1 test case. [----------] Global test environment set-up. [----------] 1 test from DBBlockCacheTest [ RUN ] DBBlockCacheTest.IndexAndFilterBlocksStats [ OK ] DBBlockCacheTest.IndexAndFilterBlocksStats (689 ms) [----------] 1 test from DBBlockCacheTest (689 ms total) [----------] Global test environment tear-down [==========] 1 test from 1 test case ran. (689 ms total) [ PASSED ] 1 test. ``` Reviewers: IslamAbdelRahman, andrewkr, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.0874,rocksdb,"Eliminate memcpy from ForwardIterator Summary: This diff update ForwardIterator to support pinning keys and values, which will allow DBIter to take advantage of that and eliminate memcpy when executing merge operators This diff is stacked on D61305 Test Plan: existing tests (updated them to test tailing iterator) new test Reviewers: andrewkr, yhchiang, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: to cover forward iterator and log file closing too. Summary: With read_options.background_purge_on_iterator_cleanup=true, File deletion and closing can still happen in forward iterator, or WAL file closing. Cover those cases too. Test Plan: I am adding unit tests. Reviewers: andrewkr, IslamAbdelRahman, yiwu Reviewed By: yiwu Subscribers: leveldb, andrewkr, dhruba Differential Revision:"
,,0.196,rocksdb,"Add statistics field to show total size of index and filter blocks in block cache Summary: With `table_options.cache_index_and_filter_blocks true`, index and filter blocks are stored in block cache. Then people are curious how much of the block cache total size is used by indexes and bloom filters. It will be nice we have a way to report that. It can help people tune performance and plan for optimized hardware setting. We add several enum values for db Statistics. BLOCK_CACHE_INDEX/FILTER_BYTES_INSERT BLOCK_CACHE_INDEX/FILTER_BYTES_ERASE current INDEX/FILTER total block size in bytes. Test Plan: write a test case called `DBBlockCacheTest.IndexAndFilterBlocksStats`. The result is: ``` ~/local/rocksdb] make db_block_cache_test && ./db_block_cache_test Makefile:101: Warning: Compiling in debug mode. Dont use the resulting binary in production GEN util/build_version.cc make: `db_block_cache_test is up to date. Note: Google Test filter DBBlockCacheTest.IndexAndFilterBlocksStats [==========] Running 1 test from 1 test case. [----------] Global test environment set-up. [----------] 1 test from DBBlockCacheTest [ RUN ] DBBlockCacheTest.IndexAndFilterBlocksStats [ OK ] DBBlockCacheTest.IndexAndFilterBlocksStats (689 ms) [----------] 1 test from DBBlockCacheTest (689 ms total) [----------] Global test environment tear-down [==========] 1 test from 1 test case ran. (689 ms total) [ PASSED ] 1 test. ``` Reviewers: IslamAbdelRahman, andrewkr, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.1072,rocksdb,"Eliminate memcpy from ForwardIterator Summary: This diff update ForwardIterator to support pinning keys and values, which will allow DBIter to take advantage of that and eliminate memcpy when executing merge operators This diff is stacked on D61305 Test Plan: existing tests (updated them to test tailing iterator) new test Reviewers: andrewkr, yhchiang, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision:"
,,0.1311,rocksdb,"Split DBOptions into ImmutableDBOptions and MutableDBOptions Summary: Use ImmutableDBOptions/MutableDBOptions internally and DBOptions only for user-facing APIs. MutableDBOptions is barely a placeholder for now. Ill start to move options to MutableDBOptions in following diffs. Test Plan: make all check Reviewers: yhchiang, IslamAbdelRahman, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.0875,rocksdb,"Fix lambda capture expression for windows Summary: there was an error when accessing kItersPerThread in the lambda: Test Plan: doitlive Subscribers: andrewkr, dhruba, leveldb Differential Revision: function for thread-local data Summary: This function allows the user to provide a custom function to fold all threads local data. It will be used in my next diff for aggregating statistics stored in thread-local data. Note the test case uses atomics as thread-local values due to the synchronization requirement (documented in code). Test Plan: unit test Reviewers: yhchiang, sdong, kradhakrishnan Reviewed By: kradhakrishnan Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.1328,rocksdb,"Split DBOptions into ImmutableDBOptions and MutableDBOptions Summary: Use ImmutableDBOptions/MutableDBOptions internally and DBOptions only for user-facing APIs. MutableDBOptions is barely a placeholder for now. Ill start to move options to MutableDBOptions in following diffs. Test Plan: make all check Reviewers: yhchiang, IslamAbdelRahman, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.1311,rocksdb,"Split DBOptions into ImmutableDBOptions and MutableDBOptions Summary: Use ImmutableDBOptions/MutableDBOptions internally and DBOptions only for user-facing APIs. MutableDBOptions is barely a placeholder for now. Ill start to move options to MutableDBOptions in following diffs. Test Plan: make all check Reviewers: yhchiang, IslamAbdelRahman, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.1311,rocksdb,"Split DBOptions into ImmutableDBOptions and MutableDBOptions Summary: Use ImmutableDBOptions/MutableDBOptions internally and DBOptions only for user-facing APIs. MutableDBOptions is barely a placeholder for now. Ill start to move options to MutableDBOptions in following diffs. Test Plan: make all check Reviewers: yhchiang, IslamAbdelRahman, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.1372,rocksdb,"Split DBOptions into ImmutableDBOptions and MutableDBOptions Summary: Use ImmutableDBOptions/MutableDBOptions internally and DBOptions only for user-facing APIs. MutableDBOptions is barely a placeholder for now. Ill start to move options to MutableDBOptions in following diffs. Test Plan: make all check Reviewers: yhchiang, IslamAbdelRahman, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision: Flaky ColumnFamilyTest.FlushCloseWALFiles Summary: In ColumnFamilyTest.FlushCloseWALFiles, there is a small window in which the flush has finished but the log writer is not yet closed, causing the assert failure. Fix it by explicitly waiting the flush job to finish. Test Plan: Run the test many times in high parallelism. Subscribers: leveldb, andrewkr, dhruba Differential Revision: options source_compaction_factor, max_grandparent_overlap_bytes and expanded_compaction_factor into max_compaction_bytes Summary: To reduce number of options, merge source_compaction_factor, max_grandparent_overlap_bytes and expanded_compaction_factor into max_compaction_bytes. Test Plan: Add two new unit tests. Run all existing tests, including jtest. Reviewers: yhchiang, igor, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: leveldb, andrewkr, dhruba Differential Revision:"
,,0.1164,rocksdb,"Allowed delayed_write_rate option to be dynamically set. Summary: Closes Differential Revision: D4157784 Pulled By: siying fbshipit-source-id: f150081/Fix integer overflow in GetL0ThresholdSpeedupCompaction (#1378)/Split DBOptions into ImmutableDBOptions and MutableDBOptions Summary: Use ImmutableDBOptions/MutableDBOptions internally and DBOptions only for user-facing APIs. MutableDBOptions is barely a placeholder for now. Ill start to move options to MutableDBOptions in following diffs. Test Plan: make all check Reviewers: yhchiang, IslamAbdelRahman, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.1328,rocksdb,"Split DBOptions into ImmutableDBOptions and MutableDBOptions Summary: Use ImmutableDBOptions/MutableDBOptions internally and DBOptions only for user-facing APIs. MutableDBOptions is barely a placeholder for now. Ill start to move options to MutableDBOptions in following diffs. Test Plan: make all check Reviewers: yhchiang, IslamAbdelRahman, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.1311,rocksdb,"Split DBOptions into ImmutableDBOptions and MutableDBOptions Summary: Use ImmutableDBOptions/MutableDBOptions internally and DBOptions only for user-facing APIs. MutableDBOptions is barely a placeholder for now. Ill start to move options to MutableDBOptions in following diffs. Test Plan: make all check Reviewers: yhchiang, IslamAbdelRahman, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.1354,rocksdb,"Split DBOptions into ImmutableDBOptions and MutableDBOptions Summary: Use ImmutableDBOptions/MutableDBOptions internally and DBOptions only for user-facing APIs. MutableDBOptions is barely a placeholder for now. Ill start to move options to MutableDBOptions in following diffs. Test Plan: make all check Reviewers: yhchiang, IslamAbdelRahman, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision: same sequence id from WAL (#1350) Summary: Revert the behavior where we dont read sequence id from WAL, but increase it as we replay the log. We still keep the behave for 2PC for now but will fix later. This change fixes github issue 1339, where some writes come with WAL disabled and we may recover records with wrong sequence id. Test Plan: Added unit test. Subscribers: andrewkr, dhruba Differential Revision: more factors when determining preallocation size of WAL files Summary: Currently the WAL file preallocation size is 1.1 * write_buffer_size. This, however, will be over-estimated if options.db_write_buffer_size or options.max_total_wal_size is set and is much smaller. Test Plan: Add a unit test. Reviewers: andrewkr, yiwu Reviewed By: yiwu Subscribers: leveldb, andrewkr, dhruba Differential Revision: recovery for WALs without data for all CFs Summary: if one or more CFs had no data in the WAL, the log number thats used by FindObsoleteFiles() wasnt updated. We need to treat this case the same as if the data for that WAL had been flushed. Test Plan: new unit test Reviewers: IslamAbdelRahman, yiwu, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision: GetSortedWalFiles when log recycling enabled Summary: Previously the sequence number was mistakenly passed in an argument where the log number should go. This caused the reader to assume the old WAL format was used, which is incompatible with the WAL recycling format. Test Plan: new unit test, verified it fails before this change and passes afterwards. Reviewers: yiwu, lightmark, IslamAbdelRahman, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.1158,rocksdb,"DBSSTTest.RateLimitedDelete: not to use real clock Summary: Using real clock causes failures of DBSSTTest.RateLimitedDelete in some cases. Turn away from the real time. Use fake time instead. Test Plan: Run the tests and all existing tests. Reviewers: yiwu, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: leveldb, andrewkr, dhruba Differential Revision: AddFile() tests to external_sst_file_test.cc Summary: Simply move the tests Test Plan: make check Reviewers: andrewkr, lightmark, yiwu, yhchiang, kradhakrishnan, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision:"
,,0.1276,rocksdb,"Split DBOptions into ImmutableDBOptions and MutableDBOptions Summary: Use ImmutableDBOptions/MutableDBOptions internally and DBOptions only for user-facing APIs. MutableDBOptions is barely a placeholder for now. Ill start to move options to MutableDBOptions in following diffs. Test Plan: make all check Reviewers: yhchiang, IslamAbdelRahman, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.2195,rocksdb,"Reorder variables of ReadOptions Summary: Reorder variables of ReadOptions so that its size is reduced from 64 to 48 bytes. Closes Differential Revision: D5124043 Pulled By: siying fbshipit-source-id: 70e9c204c34f97fad011f2fe2297ba292d85df7a/Support ingest_behind for IngestExternalFile Summary: First cut for early review; there are few conceptual points to answer and some code structure issues. For conceptual points restriction-wise, were going to disallow ingest_behind if (use_seqno_zero_out=true || disable_auto_compaction=false), the user is responsible to properly open and close DB with required params we wanted to ingest into reserved bottom most level. Should we fail fast if bottom level isnt empty, or should we attempt to ingest if file fits there key-ranges-wise? Modifying AssignLevelForIngestedFile seems the place we wed handle that. On code structure going to refactor GenerateAndAddExternalFile call in the test class to allow passing instance of IngestionOptions, thats just going to incur lots of changes at callsites. Closes Differential Revision: D4873732 Pulled By: lightmark fbshipit-source-id: 81cb698106b68ef8797f564453651d50900e153a/"
,,0.1118,rocksdb,Update blob_db_test Summary: Im trying to improve unit test of blob db. Im rewriting blob db test. In this patch: * Rewrite tests of basic put/write/delete operations. * Add disable_background_tasks to BlobDBOptionsImpl to allow me not running any background job for basic unit tests. * Move DestroyBlobDB out from BlobDBImpl to be a standalone function. * Remove all garbage collection related tests. Will rewrite them in following patch. * Disabled compression test since it is failing. Will fix in a followup patch. Closes Differential Revision: D5243306 Pulled By: yiwu-arbug fbshipit-source-id: 157c71ad3b699307cb88baa3830e9b6e74f8e939/
,,0.1144,rocksdb,Update blob_db_test Summary: Im trying to improve unit test of blob db. Im rewriting blob db test. In this patch: * Rewrite tests of basic put/write/delete operations. * Add disable_background_tasks to BlobDBOptionsImpl to allow me not running any background job for basic unit tests. * Move DestroyBlobDB out from BlobDBImpl to be a standalone function. * Remove all garbage collection related tests. Will rewrite them in following patch. * Disabled compression test since it is failing. Will fix in a followup patch. Closes Differential Revision: D5243306 Pulled By: yiwu-arbug fbshipit-source-id: 157c71ad3b699307cb88baa3830e9b6e74f8e939/
,,0.2636,rocksdb,"Support ingest_behind for IngestExternalFile Summary: First cut for early review; there are few conceptual points to answer and some code structure issues. For conceptual points restriction-wise, were going to disallow ingest_behind if (use_seqno_zero_out=true || disable_auto_compaction=false), the user is responsible to properly open and close DB with required params we wanted to ingest into reserved bottom most level. Should we fail fast if bottom level isnt empty, or should we attempt to ingest if file fits there key-ranges-wise? Modifying AssignLevelForIngestedFile seems the place we wed handle that. On code structure going to refactor GenerateAndAddExternalFile call in the test class to allow passing instance of IngestionOptions, thats just going to incur lots of changes at callsites. Closes Differential Revision: D4873732 Pulled By: lightmark fbshipit-source-id: 81cb698106b68ef8797f564453651d50900e153a/"
,,0.266,rocksdb,"Support ingest_behind for IngestExternalFile Summary: First cut for early review; there are few conceptual points to answer and some code structure issues. For conceptual points restriction-wise, were going to disallow ingest_behind if (use_seqno_zero_out=true || disable_auto_compaction=false), the user is responsible to properly open and close DB with required params we wanted to ingest into reserved bottom most level. Should we fail fast if bottom level isnt empty, or should we attempt to ingest if file fits there key-ranges-wise? Modifying AssignLevelForIngestedFile seems the place we wed handle that. On code structure going to refactor GenerateAndAddExternalFile call in the test class to allow passing instance of IngestionOptions, thats just going to incur lots of changes at callsites. Closes Differential Revision: D4873732 Pulled By: lightmark fbshipit-source-id: 81cb698106b68ef8797f564453651d50900e153a/"
,,0.2623,rocksdb,"Support ingest_behind for IngestExternalFile Summary: First cut for early review; there are few conceptual points to answer and some code structure issues. For conceptual points restriction-wise, were going to disallow ingest_behind if (use_seqno_zero_out=true || disable_auto_compaction=false), the user is responsible to properly open and close DB with required params we wanted to ingest into reserved bottom most level. Should we fail fast if bottom level isnt empty, or should we attempt to ingest if file fits there key-ranges-wise? Modifying AssignLevelForIngestedFile seems the place we wed handle that. On code structure going to refactor GenerateAndAddExternalFile call in the test class to allow passing instance of IngestionOptions, thats just going to incur lots of changes at callsites. Closes Differential Revision: D4873732 Pulled By: lightmark fbshipit-source-id: 81cb698106b68ef8797f564453651d50900e153a/"
,,0.0806,rocksdb,WritePrepared Txn: ValidateSnapshot Summary: Implements ValidateSnapshot for WritePrepared txns and also adds a unit test to clarify the contract of this function. Closes Differential Revision: D6199405 Pulled By: maysamyabandeh fbshipit-source-id: ace509934c307ea5d26f4bbac5f836d7c80fd240/
,,0.0898,rocksdb,WritePrepared Txn: ValidateSnapshot Summary: Implements ValidateSnapshot for WritePrepared txns and also adds a unit test to clarify the contract of this function. Closes Differential Revision: D6199405 Pulled By: maysamyabandeh fbshipit-source-id: ace509934c307ea5d26f4bbac5f836d7c80fd240/
,,0.1272,rocksdb,Split SnapshotConcurrentAccessTest into 20 sub tests Summary: SnapshotConcurrentAccessTest sometimes times out when running on the test infra. This patch splits the test into smaller sub-tests to avoid the timeout. It also benefits from lower run-time of each sub-test and increases the coverage of the test. The overall run-time of each final sub-test is at most half of the original test so we should no longer see a timeout. Closes Differential Revision: D6839427 Pulled By: maysamyabandeh fbshipit-source-id: d53fdb157109e2438ca7fe447d0cf4b71f304bd8/WritePrepared Txn: GC old_commit_map_ Summary: Garbage collect entries from old_commit_map_ when the corresponding snapshots are released. Closes Differential Revision: D6528478 Pulled By: maysamyabandeh fbshipit-source-id: 15d1566d85d4ac07036bc0dc47418f6c3228d4bf/
,,0.1364,rocksdb,Split SnapshotConcurrentAccessTest into 20 sub tests Summary: SnapshotConcurrentAccessTest sometimes times out when running on the test infra. This patch splits the test into smaller sub-tests to avoid the timeout. It also benefits from lower run-time of each sub-test and increases the coverage of the test. The overall run-time of each final sub-test is at most half of the original test so we should no longer see a timeout. Closes Differential Revision: D6839427 Pulled By: maysamyabandeh fbshipit-source-id: d53fdb157109e2438ca7fe447d0cf4b71f304bd8/WritePrepared Txn: fix bug with Rollback seq Summary: The sequence number was not properly advanced after a rollback marker. The patch extends the existing unit tests to detect the bug and also fixes it. Closes Differential Revision: D6304291 Pulled By: maysamyabandeh fbshipit-source-id: 1b519c44a5371b802da49c9e32bd00087a8da401/
,,0.0918,rocksdb,Fix use-after-free in tailing iterator with merge operator Summary: ForwardIterator::SVCleanup() sometimes didnt pin superversion when it was supposed to. See the added test for the scenario. Heres the ASAN output of the added test without the fix (using `COMPILE_WITH_ASAN=1 make`): Closes Differential Revision: D6817414 Pulled By: al13n321 fbshipit-source-id: bc80c44ea78a3a1fa885dfa448a26111f91afb24/
,,0.1787,rocksdb,"Better destroydb Summary: Delete archive directory before WAL folder since archive may be contained as a subfolder. Also improve loop readability. Closes Differential Revision: D7866378 Pulled By: riversand963 fbshipit-source-id: 0c45d97677ce6fbefa3f8d602ef5e2a2a925e6f5/Windows cumulative patch Summary: This patch addressed several issues. Portability including db_test std::thread port::Thread Cc: and %z to ROCKSDB portable macro. Cc: maysamyabandeh Implement Env::AreFilesSame Make the implementation of file unique number more robust Get rid of C-runtime and go directly to Windows API when dealing with file primitives. Implement GetSectorSize() and aling unbuffered read on the value if available. Adjust Windows Logger for the new interface, implement CloseImpl() Cc: anand1976 Fix test running script issue where $status var was of incorrect scope so the failures were swallowed and not reported. DestroyDB() creates a logger and opens a LOG file in the directory being cleaned up. This holds a lock on the folder and the cleanup is prevented. This fails one of the checkpoin tests. We observe the same in production. We close the log file in this change. Fix DBTest2.ReadAmpBitmapLiveInCacheAfterDBClose failure where the test attempts to open a directory with NewRandomAccessFile which does not work on Windows. Fix DBTest.SoftLimit as it is dependent on thread timing. CC: yiwu-arbug Closes Differential Revision: D7156304 Pulled By: siying fbshipit-source-id: 43db0a757f1dfceffeb2b7988043156639173f5b/"
,,0.2039,rocksdb,"Windows cumulative patch Summary: This patch addressed several issues. Portability including db_test std::thread port::Thread Cc: and %z to ROCKSDB portable macro. Cc: maysamyabandeh Implement Env::AreFilesSame Make the implementation of file unique number more robust Get rid of C-runtime and go directly to Windows API when dealing with file primitives. Implement GetSectorSize() and aling unbuffered read on the value if available. Adjust Windows Logger for the new interface, implement CloseImpl() Cc: anand1976 Fix test running script issue where $status var was of incorrect scope so the failures were swallowed and not reported. DestroyDB() creates a logger and opens a LOG file in the directory being cleaned up. This holds a lock on the folder and the cleanup is prevented. This fails one of the checkpoin tests. We observe the same in production. We close the log file in this change. Fix DBTest2.ReadAmpBitmapLiveInCacheAfterDBClose failure where the test attempts to open a directory with NewRandomAccessFile which does not work on Windows. Fix DBTest.SoftLimit as it is dependent on thread timing. CC: yiwu-arbug Closes Differential Revision: D7156304 Pulled By: siying fbshipit-source-id: 43db0a757f1dfceffeb2b7988043156639173f5b/"
,,0.2039,rocksdb,"Windows cumulative patch Summary: This patch addressed several issues. Portability including db_test std::thread port::Thread Cc: and %z to ROCKSDB portable macro. Cc: maysamyabandeh Implement Env::AreFilesSame Make the implementation of file unique number more robust Get rid of C-runtime and go directly to Windows API when dealing with file primitives. Implement GetSectorSize() and aling unbuffered read on the value if available. Adjust Windows Logger for the new interface, implement CloseImpl() Cc: anand1976 Fix test running script issue where $status var was of incorrect scope so the failures were swallowed and not reported. DestroyDB() creates a logger and opens a LOG file in the directory being cleaned up. This holds a lock on the folder and the cleanup is prevented. This fails one of the checkpoin tests. We observe the same in production. We close the log file in this change. Fix DBTest2.ReadAmpBitmapLiveInCacheAfterDBClose failure where the test attempts to open a directory with NewRandomAccessFile which does not work on Windows. Fix DBTest.SoftLimit as it is dependent on thread timing. CC: yiwu-arbug Closes Differential Revision: D7156304 Pulled By: siying fbshipit-source-id: 43db0a757f1dfceffeb2b7988043156639173f5b/"
,,0.1949,rocksdb,"Windows cumulative patch Summary: This patch addressed several issues. Portability including db_test std::thread port::Thread Cc: and %z to ROCKSDB portable macro. Cc: maysamyabandeh Implement Env::AreFilesSame Make the implementation of file unique number more robust Get rid of C-runtime and go directly to Windows API when dealing with file primitives. Implement GetSectorSize() and aling unbuffered read on the value if available. Adjust Windows Logger for the new interface, implement CloseImpl() Cc: anand1976 Fix test running script issue where $status var was of incorrect scope so the failures were swallowed and not reported. DestroyDB() creates a logger and opens a LOG file in the directory being cleaned up. This holds a lock on the folder and the cleanup is prevented. This fails one of the checkpoin tests. We observe the same in production. We close the log file in this change. Fix DBTest2.ReadAmpBitmapLiveInCacheAfterDBClose failure where the test attempts to open a directory with NewRandomAccessFile which does not work on Windows. Fix DBTest.SoftLimit as it is dependent on thread timing. CC: yiwu-arbug Closes Differential Revision: D7156304 Pulled By: siying fbshipit-source-id: 43db0a757f1dfceffeb2b7988043156639173f5b/"
,,0.2345,rocksdb,"Converted db/merge_test.cc to use gtest (#4114) Summary: Picked up a task to convert this to use the gtest framework. It cant be this simple, can it? It works, but should all the std::cout be removed? ``` [$] ~/git/rocksdb [gft ]: ./merge_test [==========] Running 2 tests from 1 test case. [----------] Global test environment set-up. [----------] 2 tests from MergeTest [ RUN ] MergeTest.MergeDbTest Test read-modify-write counters... a: 3 1 2 a: 3 b: 1225 3 Compaction started ... Compaction ended a: 3 b: 1225 Test merge-based counters... a: 3 1 2 a: 3 b: 1225 3 Test merge in memtable... a: 3 1 2 a: 3 b: 1225 3 Test Partial-Merge Test merge-operator not set after reopen [ OK ] MergeTest.MergeDbTest (93 ms) [ RUN ] MergeTest.MergeDbTtlTest Opening database with TTL Test read-modify-write counters... a: 3 1 2 a: 3 b: 1225 3 Compaction started ... Compaction ended a: 3 b: 1225 Test merge-based counters... a: 3 1 2 a: 3 b: 1225 3 Test merge in memtable... Opening database with TTL a: 3 1 2 a: 3 b: 1225 3 Test Partial-Merge Opening database with TTL Opening database with TTL Opening database with TTL Opening database with TTL Test merge-operator not set after reopen [ OK ] MergeTest.MergeDbTtlTest (97 ms) [----------] 2 tests from MergeTest (190 ms total) [----------] Global test environment tear-down [==========] 2 tests from 1 test case ran. (190 ms total) [ PASSED ] 2 tests. ``` Pull Request resolved: Differential Revision: D8822886 Pulled By: gfosco fbshipit-source-id: c299d008e883c3bb911d2b357a2e9e4423f8e91a/"
,,0.1271,rocksdb,"Implement Env::NumFileLinks (#4221) Summary: Although delete scheduler implementation allows for the interface not to be supported, the delete_scheduler_test does not allow for that. Address compiler warnings Make sst_dump_test use test directory structure as the current execution directory may not be writiable. Pull Request resolved: Differential Revision: D9210152 Pulled By: siying fbshipit-source-id: 381a74511e969ecb8089d5c4b4df87dc30c8df63/Catchup with posix features Summary: Catch up with Posix features NewWritableRWFile must fail when file does not exists Implement Env::Truncate() Adjust Env options optimization functions Implement MemoryMappedBuffer on Windows. Closes Differential Revision: D8053610 Pulled By: ajkr fbshipit-source-id: ccd0d46c29648a9f6f496873bc1c9d6c5547487e/"
,,0.1322,rocksdb,"Implement Env::NumFileLinks (#4221) Summary: Although delete scheduler implementation allows for the interface not to be supported, the delete_scheduler_test does not allow for that. Address compiler warnings Make sst_dump_test use test directory structure as the current execution directory may not be writiable. Pull Request resolved: Differential Revision: D9210152 Pulled By: siying fbshipit-source-id: 381a74511e969ecb8089d5c4b4df87dc30c8df63/Catchup with posix features Summary: Catch up with Posix features NewWritableRWFile must fail when file does not exists Implement Env::Truncate() Adjust Env options optimization functions Implement MemoryMappedBuffer on Windows. Closes Differential Revision: D8053610 Pulled By: ajkr fbshipit-source-id: ccd0d46c29648a9f6f496873bc1c9d6c5547487e/"
,,0.1187,rocksdb,Add a unit test to Ignorable manfiest record (#4964) Summary: introduced ignorable manfiest record. Adding a test to it. Pull Request resolved: Differential Revision: D14012667 Pulled By: siying fbshipit-source-id: e5f10ecc68dec2716e178d44f0fe2b76c3d857ef/
,,0.1118,rocksdb,"Fix a flaky test with test sync point (#5310) Summary: If DB is opened with `avoid_unnecessary_blocking_io` being true, then `~ColumnFamilyHandleImpl` enqueues a purge request and schedules a background thread to perform the deletion. Without test sync point, whether the SST file is purged or not at a later point in time is not deterministic. If the SST does not exist, it will cause an assertion failure. How to reproduce: ``` $git checkout 6492430eaf1a13730eec81321528558cbf486c96 $make deletefile_test $gtest-parallel 1000 16 ./deletefile_test ``` The test may fail a few times. With changes made in this PR, repeat the above commands, and the test should not fail. Pull Request resolved: Differential Revision: D15361136 Pulled By: riversand963 fbshipit-source-id: c4308d5f8da83472c893bf7f8ceed347fbfa850f/"
,,0.0815,rocksdb,API to get file_creation_time of the oldest file in the DB (#5948) Summary: Adding a new API to db.h that allows users to get file_creation_time of the oldest file in the DB. Pull Request resolved: Test Plan: Added unit test. Differential Revision: D18056151 Pulled By: vjnadimpalli fbshipit-source-id: 448ec9d34cb6772e1e5a62db399ace00dcbfbb5d/
,,0.1413,rocksdb,"PosixRandomAccessFile::MultiRead() to use I/O uring if supported (#5881) Summary: Right now, PosixRandomAccessFile::MultiRead() executes read requests in parallel. In this PR, it leverages I/O Uring library to run it in parallel, even when page cache is enabled. This function will fall back if the kernel version doesnt support it. Pull Request resolved: Test Plan: Run the unit test on a kernel version supporting it and make sure all tests pass, and run a unit test on kernel version supporting it and see it pass. Before merging, will also run stress test and see it passes. Differential Revision: D17742266 fbshipit-source-id: e05699c925ac04fdb42379456a4e23e4ebcb803a/"
,,0.1424,rocksdb,"PosixRandomAccessFile::MultiRead() to use I/O uring if supported (#5881) Summary: Right now, PosixRandomAccessFile::MultiRead() executes read requests in parallel. In this PR, it leverages I/O Uring library to run it in parallel, even when page cache is enabled. This function will fall back if the kernel version doesnt support it. Pull Request resolved: Test Plan: Run the unit test on a kernel version supporting it and make sure all tests pass, and run a unit test on kernel version supporting it and see it pass. Before merging, will also run stress test and see it passes. Differential Revision: D17742266 fbshipit-source-id: e05699c925ac04fdb42379456a4e23e4ebcb803a/"
