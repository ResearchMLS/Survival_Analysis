Topic_no,Keywords,Contrib,System,Text
2,"change, support, call, pass, move, implement, remove, object, create, implementation, method, enable, bug, native, harmony_xnet, main_java, instance, constructor, request, share",0.6553,conscrypt,"Update x-net to Harmony r802921. Notable changes synchronization added where it was needed try/finally added to reliably tear down in DefaultSSLContext ContextImpl deleted, it wasnt necessary methods reordered to make statics first in the class PrivilegedActions parameterized with DigitalSignature now throws AssertionErrors in impossible states and throws AlertExceptions on invalid keys (rather than dumping a stacktrace) ValueKeys added to SSLSessionImpl instead of TwoKeyMaps SSLSessionImpl.clone() simplified to do a traditional clone Squashed commit of the following: commit 2d9e43d542ab7086af271bf52e847c582decbab1 Merge: 8b79eb4 a8dc377 Author: Jesse Wilson Date: Tue Aug 25 15:25:21 2009 Merge branch x-net_802921 into x-net_dalvik Conflicts: libcore/x-net/.classpath libcore/x-net/.settings/org.eclipse.jdt.core.prefs libcore/x-net/build.xml libcore/x-net/src/main/java/javax/net/DefaultServerSocketFactory.java libcore/x-net/src/main/java/javax/net/DefaultSocketFactory.java libcore/x-net/src/main/java/javax/net/ServerSocketFactory.java libcore/x-net/src/main/java/javax/net/SocketFactory.java libcore/x-net/src/main/java/javax/net/ssl/CertPathTrustManagerParameters.java libcore/x-net/src/main/java/javax/net/ssl/DefaultHostnameVerifier.java libcore/x-net/src/main/java/javax/net/ssl/DefaultSSLContext.java libcore/x-net/src/main/java/javax/net/ssl/DefaultSSLSocketFactory.java libcore/x-net/src/main/java/javax/net/ssl/HandshakeCompletedEvent.java libcore/x-net/src/main/java/javax/net/ssl/HandshakeCompletedListener.java libcore/x-net/src/main/java/javax/net/ssl/HostnameVerifier.java libcore/x-net/src/main/java/javax/net/ssl/HttpsURLConnection.java libcore/x-net/src/main/java/javax/net/ssl/KeyManager.java libcore/x-net/src/main/java/javax/net/ssl/KeyManagerFactory.java libcore/x-net/src/main/java/javax/net/ssl/KeyManagerFactorySpi.java libcore/x-net/src/main/java/javax/net/ssl/KeyStoreBuilderParameters.java libcore/x-net/src/main/java/javax/net/ssl/ManagerFactoryParameters.java libcore/x-net/src/main/java/javax/net/ssl/SSLContext.java libcore/x-net/src/main/java/javax/net/ssl/SSLContextSpi.java libcore/x-net/src/main/java/javax/net/ssl/SSLEngine.java libcore/x-net/src/main/java/javax/net/ssl/SSLEngineResult.java libcore/x-net/src/main/java/javax/net/ssl/SSLException.java libcore/x-net/src/main/java/javax/net/ssl/SSLHandshakeException.java libcore/x-net/src/main/java/javax/net/ssl/SSLKeyException.java libcore/x-net/src/main/java/javax/net/ssl/SSLPeerUnverifiedException.java libcore/x-net/src/main/java/javax/net/ssl/SSLPermission.java libcore/x-net/src/main/java/javax/net/ssl/SSLProtocolException.java libcore/x-net/src/main/java/javax/net/ssl/SSLServerSocket.java libcore/x-net/src/main/java/javax/net/ssl/SSLServerSocketFactory.java libcore/x-net/src/main/java/javax/net/ssl/SSLSession.java libcore/x-net/src/main/java/javax/net/ssl/SSLSessionBindingEvent.java libcore/x-net/src/main/java/javax/net/ssl/SSLSessionBindingListener.java libcore/x-net/src/main/java/javax/net/ssl/SSLSessionContext.java libcore/x-net/src/main/java/javax/net/ssl/SSLSocket.java libcore/x-net/src/main/java/javax/net/ssl/SSLSocketFactory.java libcore/x-net/src/main/java/javax/net/ssl/TrustManager.java libcore/x-net/src/main/java/javax/net/ssl/TrustManagerFactory.java libcore/x-net/src/main/java/javax/net/ssl/TrustManagerFactorySpi.java libcore/x-net/src/main/java/javax/net/ssl/X509ExtendedKeyManager.java libcore/x-net/src/main/java/javax/net/ssl/X509KeyManager.java libcore/x-net/src/main/java/javax/net/ssl/X509TrustManager.java libcore/x-net/src/main/java/javax/net/ssl/package-info.java libcore/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientHandshakeImpl.java libcore/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/HandshakeProtocol.java libcore/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/JSSEProvider.java libcore/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/KeyManagerImpl.java libcore/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImplWrapper.java libcore/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLContextImpl.java libcore/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLServerSocketFactoryImpl.java libcore/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLServerSocketImpl.java libcore/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLSessionContextImpl.java libcore/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLSessionImpl.java libcore/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLSocketFactoryImpl.java libcore/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLSocketImpl.java libcore/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLSocketInputStream.java libcore/x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLSocketOutputStream.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/CertPathTrustManagerParametersTest.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/HandshakeCompletedEventTest.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/HttpsURLConnectionTest.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/KeyStoreBuilderParametersTest.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/SSLContext1Test.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/SSLEngineTest.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/SSLPermissionTest.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/SSLServerSocketTest.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/SSLSocketTest.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/TrustManagerFactory1Test.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/serialization/HandshakeCompletedEventTest.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/serialization/SSLExceptionTest.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/serialization/SSLHandshakeExceptionTest.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/serialization/SSLKeyExceptionTest.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/serialization/SSLPeerUnverifiedExceptionTest.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/serialization/SSLProtocolExceptionTest.java libcore/x-net/src/test/api/java/org/apache/harmony/xnet/tests/javax/net/ssl/serialization/SSLSessionBindingEventTest.java libcore/x-net/src/test/impl/java.injected/javax/net/ServerSocketFactoryTest.java libcore/x-net/src/test/impl/java.injected/javax/net/SocketFactoryTest.java libcore/x-net/src/test/impl/java.injected/javax/net/ssl/DefaultSSLServerSocketFactoryTest.java libcore/x-net/src/test/impl/java.injected/javax/net/ssl/DefaultSSLSocketFactoryTest.java libcore/x-net/src/test/impl/java.injected/javax/net/ssl/HttpsURLConnection_ImplTest.java libcore/x-net/src/test/impl/java.injected/javax/net/ssl/SSLServerSocketFactoryTest.java libcore/x-net/src/test/impl/java.injected/javax/net/ssl/SSLSocketFactoryTest.java libcore/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java libcore/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/DigitalSignatureTest.java libcore/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/HandshakeProtocolTest.java libcore/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/KeyManagerImplTest.java libcore/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLEngineImplTest.java libcore/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLServerSocketImplTest.java libcore/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSessionContextImplTest.java libcore/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSessionImplTest.java libcore/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketFactoriesTest.java libcore/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketFunctionalTest.java libcore/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLSocketImplTest.java libcore/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/SSLStreamedInputTest.java libcore/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/ServerHandshakeImplTest.java libcore/x-net/src/test/impl/java.injected/org/apache/harmony/xnet/provider/jsse/TrustManagerImplTest.java libcore/x-net/src/test/impl/java/org/apache/harmony/xnet/tests/provider/jsse/DigitalSignatureTest.java libcore/x-net/src/test/impl/java/org/apache/harmony/xnet/tests/provider/jsse/KeyManagerFactoryImplTest.java libcore/x-net/src/test/impl/java/org/apache/harmony/xnet/tests/provider/jsse/ProtocolVersionTest.java libcore/x-net/src/test/impl/java/org/apache/harmony/xnet/tests/provider/jsse/TrustManagerFactoryImplTest.java libcore/x-net/src/test/java/javax/net/ssl/KeyManagerFactorySpiTests.java libcore/x-net/src/test/java/javax/net/ssl/MyKeyManagerFactorySpi.java libcore/x-net/src/test/java/javax/net/ssl/MySSLContextSpi.java libcore/x-net/src/test/java/javax/net/ssl/MyTrustManagerFactorySpi.java libcore/x-net/src/test/java/javax/net/ssl/SSLContextSpiTests.java libcore/x-net/src/test/java/javax/net/ssl/TrustManagerFactorySpiTests.java libcore/x-net/src/test/java/tests/api/javax/net/ssl/KeyManagerFactory1Test.java libcore/x-net/src/test/java/tests/api/javax/net/ssl/KeyManagerFactory2Test.java libcore/x-net/src/test/java/tests/api/javax/net/ssl/SSLContext2Test.java libcore/x-net/src/test/java/tests/api/javax/net/ssl/SSLSessionBindingEventTest.java libcore/x-net/src/test/java/tests/api/javax/net/ssl/TrustManagerFactory2Test.java libcore/x-net/src/test/support/common/java/org/apache/harmony/xnet/tests/support/MyKeyManagerFactorySpi.java libcore/x-net/src/test/support/common/java/org/apache/harmony/xnet/tests/support/MySSLContextSpi.java libcore/x-net/src/test/support/common/java/org/apache/harmony/xnet/tests/support/MyTrustManagerFactorySpi.java commit 8b79eb40a27f0b336d5516606d43162ecead09ca Author: Jesse Wilson Date: Tue Aug 25 12:58:17 2009 x-net_dalvik commit a8dc3778cd2a1a5d6d0cfff6eec22e7bfbdb9c14 Author: Jesse Wilson Date: Tue Aug 25 12:56:55 2009 x-net_802921 commit 07ca0ed8aa5927c909f880559c17d162c111608e Author: Jesse Wilson Date: Tue Aug 25 12:56:07 2009 x-net_527399 commit 9b44ccfc38c2fc2a6cf2c3cc39a13cc5bce635ba Author: Jesse Wilson Date: Tue Aug 25 11:14:01 2009 Small changes missed in the original submission of 22482./"
,,0.7897,conscrypt,"Rewrite JSSE code to use one openssl SSL per SSLSocket an one SSL_CTX per SSLSessionContext Summary: b/1758225: Revisit OpenSSL locking Removed the locking original put in to address b/1678800 which had been causing problems for the HeapWorker thread which was timing out waiting for the lock in the finalizers while other threads were connecting. b/1678800: Reliability tool: Crash in libcrypto Properly fixed the native crash by avoid sharing SSL_SESSION objects between SSL_CTX objects Testing: adb shell run-core-tests tests.xnet.AllTests adb shell run-core-tests javax.net.ssl.AllTests Test app that reloads Details: Each AbstractSessionContext now has an associated SSL_CTX, referenced through the sslCtxNativePointer. SSL_CTX on the native side defines the scope of SSL_SESSION caching, and this brings the Java SSLSessionContext caching into alignment with the native code. OpenSSLSessionImpl now uses AbstractSessionContext instead of SSLSessionContext for access to the underlying SSL_CTX. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/AbstractSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLParameters.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerSessionContext.java Added AbstractSessionContext.putSession so OpenSSLSocketImpl/OpenSSLSessionImpl can directly assign to the current AbstractSessionContext (whether it be a ClientSessionContext or a ServerSessionContext) without casting. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/AbstractSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerSessionContext.java Cleaning up use of SSL_CTX and SSL instances in SSLSocket/SSLServerSocket implementation The major change is that openssl SSL instances are allocated for the life of the matching Java object, replacing the SSL_CTX and the SSL objects that had previously been allocated only starting at handshake time. We should never have been sharing SSL_SESSION instances between SSL_CTX instances, which was the source of the native crashes dating back to cupcake which the OpenSSLSocket.class locking had been preventing. NativeCrypto now has better defined and independant wrappers on openssl functionality. A followon checkin should move the remaining openssl JNI code here with the intent of being able to write and end-to-end test of the openssl code using NativeCrypto without the JSSE implementation classes. The following gives a list of the new native functions with a mapping to the old implementation code. The new code has a more functional style where SSL_CTX and SSL instances are passed and returned as arguments, not extracted from Java instances SSL_CTX_new OpenSSLSocketImpl.nativeinit, OpenSSLServerSocketImpl.nativeinit, SSLParameters.nativeinitsslctx SSL_CTX_get_ciphers_list OpenSSLSocketImpl.nativeGetEnabledCipherSuites SSL_CTX_free OpenSSLSocketImpl.nativefree, OpenSSLServerSocketImpl.nativefree SSL_new OpenSSLSocketImpl.nativeinit, OpenSSLSocketImpl.init, OpenSSLServerSocketImpl.nativeinit, OpenSSLServerSocketImpl.init SSL_get_options OpenSSLSocketImpl.nativesetenabledprotocols SSL_set_options OpenSSLSocketImpl.nativesetenabledprotocols SSL_get_ciphers OpenSSLSocketImpl.nativeGetEnabledCipherSuites SSL_set_cipher_list OpenSSLSocketImpl.nativeSetEnabledCipherSuites SSL_free OpenSSLSocketImpl.nativefree, OpenSSLServerSocketImpl.nativefree While the focus in NativeCrypto is on native code, it also contains some helpers/wrappers especially for code that doesnt depend on specific SSL_CTX, SSL instances or that needs to do massaging of data formats between Java and OpenSSL. Some of these had previously been duplicated in the client and server versions of the code. For example: getSupportedCipherSuites OpenSSLSocketImpl.nativegetsupportedciphersuites, OpenSSLServerSocketImpl.nativegetsupportedciphersuites getSupportedProtocols OpenSSLSocketImpl.getSupportedProtocols, OpenSSLServerSocketImpl.getSupportedProtocols getEnabledProtocols OpenSSLSocketImpl.getEnabledProtocols,OpenSSLServerSocketImpl.getEnabledProtocols setEnabledProtocols OpenSSLSocketImpl.setEnabledProtocols setEnabledCipherSuites OpenSSLSocketImpl.setEnabledCipherSuites Moved JNI initialization from OpenSSLSocketImpl to NativeCrypto which is the future home of all the openssl related native code. clinit OpenSSLSocketImpl.nativeinitstatic NativeCrypto.CertificateChainVerifier is a new interface to decouple callbacks from openssl from a specific dependence on a OpenSSLSocketImpl.verify_callback method. Changed to return boolean instead of int. Renamed OpenSSLSocketImpl.ssl to OpenSSLSocketImpl.sslNativePointer for consistency Changed OpenSSLSocketImpl nativeconnect, nativegetsslsession, nativecipherauthenticationmethod, nativeaccept, nativeread, nativewrite, nativeinterrupt, nativeclose, nativefree to take arguments instead of inspect object state in preparation for moving to NativeCrypto other notable NativeCrypto changes included * adding SSL_SESSION_get_peer_cert_chain, SSL_SESSION_get_version, and SSL_get_version (and get_ssl_version) which are ""missing methods"" in openssl * ssl_msg_callback_LOG callback and get_content_type for handshake debugging * removing jfieldIDs for our classes now that we pass in values in arguments * changed aliveAndKicking to be volative since we poll on it to communicate between threads * changed from C style declarations at beginning of block to C++ at first use on methods with major changes * stop freeing SSL instances on error, only SSL_clear it * improved session reuse logging when reproducing b/1678800 * change verify_callback to return verifyCertificateChain result x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_NativeCrypto.cpp x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketFactoryImpl.java When we accept a server socket, we pass the existing SSL state instance from the server socket to the newly accepted socket via the constructor where it is copied with SSL_dup, instead of through both the constructor and later the accept method. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java Cleaned up nativesetclientauth from using SSL_CTX to SSL, passing ssl as argument in preparation for future movement to NativeCrypto. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java Removed ssl_op_no cache for rarely used enabled protocol methods so that code could more easily be shared in NativeCrypto between client and server. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Changed public getId, getCreationTime, getPeerCertificates, getCipherSuite, getProtocol from being instance methods that looked at the OpenSSLSessionImpl object state to be static mthods that take the native pointers as arguments in preparation for moving to NativeCrypto. Rename session sslSessionNativePointer for consistency. Inlined initializeNative, which wasnt really the native code. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java Removed lock on OpenSSLSocketImpl.class lock from around OpenSSLSocketImpls use of nativeconnect, nativegetsslsession, and nativecipherauthenticationmethod as well as OpenSSLSessionImpls use of freeImpl, fixing b/1758225: Revisit OpenSSL locking x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java Unrelated changes Removed unused ssl_ctx, nativeinitsslctx, getSSLCTX x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLParameters.java Fix bug in both putSession implementations where we cached sessions with zero length id. Also change indexById to pass in id in client implementation. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerSessionContext.java Make sure we clone SSLParameters passed to the SSLSocketFactory and SSLServerSocketFactory so that muting the client instance does not change the server instance and vice versa. Explicitly set setUseClientMode(false) on the server SSLParameters. These changes are to bring things more into alignment with the original harmony classes which properly support client/server role switching during handshaking. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketFactoryImpl.java Make locks object fields final x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Moved updateInstanceCount(1) logic and sslParameters assignment to init method x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Changed getCachedClientSession to respect getUseClientMode x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Spelling of listensers to listeners in javadoc x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Spelling SSLInputStream to SSLOutputStream in comment x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Changed shutdownInput and shutdownOutput to call to the underlying socket x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Set sslNativePointer to 0 when freeing underlying SSL object x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Removed IOException logging in getSession, which is expected to simply return SSL_NULL_WITH_NULL_NULL when there are problems. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Disabled ""Using factory"" message on successful creation of SocketFactory which was a bit noisy running tests. However, added logging in failure case including the related exception: x-net/src/main/java/javax/net/ssl/SSLSocketFactory.java Disabled logging of OpenSSL session deallocation x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_NativeCrypto.cpp Register SSLContextImpl as a source of SSL and SSL3 SSLContexts, not just TLS and TLSv1. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/JSSEProvider.java Fix whitespace in comment x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/CertificateRequest.java Change-Id: I99975ae22599c7df0d249fa013ae7ea7c9c08051/"
,,0.7895,conscrypt,"Rewrite JSSE code to use one openssl SSL per SSLSocket an one SSL_CTX per SSLSessionContext Summary: b/1758225: Revisit OpenSSL locking Removed the locking original put in to address b/1678800 which had been causing problems for the HeapWorker thread which was timing out waiting for the lock in the finalizers while other threads were connecting. b/1678800: Reliability tool: Crash in libcrypto Properly fixed the native crash by avoid sharing SSL_SESSION objects between SSL_CTX objects Testing: adb shell run-core-tests tests.xnet.AllTests adb shell run-core-tests javax.net.ssl.AllTests Test app that reloads Details: Each AbstractSessionContext now has an associated SSL_CTX, referenced through the sslCtxNativePointer. SSL_CTX on the native side defines the scope of SSL_SESSION caching, and this brings the Java SSLSessionContext caching into alignment with the native code. OpenSSLSessionImpl now uses AbstractSessionContext instead of SSLSessionContext for access to the underlying SSL_CTX. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/AbstractSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLParameters.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerSessionContext.java Added AbstractSessionContext.putSession so OpenSSLSocketImpl/OpenSSLSessionImpl can directly assign to the current AbstractSessionContext (whether it be a ClientSessionContext or a ServerSessionContext) without casting. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/AbstractSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerSessionContext.java Cleaning up use of SSL_CTX and SSL instances in SSLSocket/SSLServerSocket implementation The major change is that openssl SSL instances are allocated for the life of the matching Java object, replacing the SSL_CTX and the SSL objects that had previously been allocated only starting at handshake time. We should never have been sharing SSL_SESSION instances between SSL_CTX instances, which was the source of the native crashes dating back to cupcake which the OpenSSLSocket.class locking had been preventing. NativeCrypto now has better defined and independant wrappers on openssl functionality. A followon checkin should move the remaining openssl JNI code here with the intent of being able to write and end-to-end test of the openssl code using NativeCrypto without the JSSE implementation classes. The following gives a list of the new native functions with a mapping to the old implementation code. The new code has a more functional style where SSL_CTX and SSL instances are passed and returned as arguments, not extracted from Java instances SSL_CTX_new OpenSSLSocketImpl.nativeinit, OpenSSLServerSocketImpl.nativeinit, SSLParameters.nativeinitsslctx SSL_CTX_get_ciphers_list OpenSSLSocketImpl.nativeGetEnabledCipherSuites SSL_CTX_free OpenSSLSocketImpl.nativefree, OpenSSLServerSocketImpl.nativefree SSL_new OpenSSLSocketImpl.nativeinit, OpenSSLSocketImpl.init, OpenSSLServerSocketImpl.nativeinit, OpenSSLServerSocketImpl.init SSL_get_options OpenSSLSocketImpl.nativesetenabledprotocols SSL_set_options OpenSSLSocketImpl.nativesetenabledprotocols SSL_get_ciphers OpenSSLSocketImpl.nativeGetEnabledCipherSuites SSL_set_cipher_list OpenSSLSocketImpl.nativeSetEnabledCipherSuites SSL_free OpenSSLSocketImpl.nativefree, OpenSSLServerSocketImpl.nativefree While the focus in NativeCrypto is on native code, it also contains some helpers/wrappers especially for code that doesnt depend on specific SSL_CTX, SSL instances or that needs to do massaging of data formats between Java and OpenSSL. Some of these had previously been duplicated in the client and server versions of the code. For example: getSupportedCipherSuites OpenSSLSocketImpl.nativegetsupportedciphersuites, OpenSSLServerSocketImpl.nativegetsupportedciphersuites getSupportedProtocols OpenSSLSocketImpl.getSupportedProtocols, OpenSSLServerSocketImpl.getSupportedProtocols getEnabledProtocols OpenSSLSocketImpl.getEnabledProtocols,OpenSSLServerSocketImpl.getEnabledProtocols setEnabledProtocols OpenSSLSocketImpl.setEnabledProtocols setEnabledCipherSuites OpenSSLSocketImpl.setEnabledCipherSuites Moved JNI initialization from OpenSSLSocketImpl to NativeCrypto which is the future home of all the openssl related native code. clinit OpenSSLSocketImpl.nativeinitstatic NativeCrypto.CertificateChainVerifier is a new interface to decouple callbacks from openssl from a specific dependence on a OpenSSLSocketImpl.verify_callback method. Changed to return boolean instead of int. Renamed OpenSSLSocketImpl.ssl to OpenSSLSocketImpl.sslNativePointer for consistency Changed OpenSSLSocketImpl nativeconnect, nativegetsslsession, nativecipherauthenticationmethod, nativeaccept, nativeread, nativewrite, nativeinterrupt, nativeclose, nativefree to take arguments instead of inspect object state in preparation for moving to NativeCrypto other notable NativeCrypto changes included * adding SSL_SESSION_get_peer_cert_chain, SSL_SESSION_get_version, and SSL_get_version (and get_ssl_version) which are ""missing methods"" in openssl * ssl_msg_callback_LOG callback and get_content_type for handshake debugging * removing jfieldIDs for our classes now that we pass in values in arguments * changed aliveAndKicking to be volative since we poll on it to communicate between threads * changed from C style declarations at beginning of block to C++ at first use on methods with major changes * stop freeing SSL instances on error, only SSL_clear it * improved session reuse logging when reproducing b/1678800 * change verify_callback to return verifyCertificateChain result x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_NativeCrypto.cpp x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketFactoryImpl.java When we accept a server socket, we pass the existing SSL state instance from the server socket to the newly accepted socket via the constructor where it is copied with SSL_dup, instead of through both the constructor and later the accept method. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java Cleaned up nativesetclientauth from using SSL_CTX to SSL, passing ssl as argument in preparation for future movement to NativeCrypto. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java Removed ssl_op_no cache for rarely used enabled protocol methods so that code could more easily be shared in NativeCrypto between client and server. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Changed public getId, getCreationTime, getPeerCertificates, getCipherSuite, getProtocol from being instance methods that looked at the OpenSSLSessionImpl object state to be static mthods that take the native pointers as arguments in preparation for moving to NativeCrypto. Rename session sslSessionNativePointer for consistency. Inlined initializeNative, which wasnt really the native code. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java Removed lock on OpenSSLSocketImpl.class lock from around OpenSSLSocketImpls use of nativeconnect, nativegetsslsession, and nativecipherauthenticationmethod as well as OpenSSLSessionImpls use of freeImpl, fixing b/1758225: Revisit OpenSSL locking x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java Unrelated changes Removed unused ssl_ctx, nativeinitsslctx, getSSLCTX x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLParameters.java Fix bug in both putSession implementations where we cached sessions with zero length id. Also change indexById to pass in id in client implementation. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientSessionContext.java x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerSessionContext.java Make sure we clone SSLParameters passed to the SSLSocketFactory and SSLServerSocketFactory so that muting the client instance does not change the server instance and vice versa. Explicitly set setUseClientMode(false) on the server SSLParameters. These changes are to bring things more into alignment with the original harmony classes which properly support client/server role switching during handshaking. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketFactoryImpl.java Make locks object fields final x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Moved updateInstanceCount(1) logic and sslParameters assignment to init method x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Changed getCachedClientSession to respect getUseClientMode x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Spelling of listensers to listeners in javadoc x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Spelling SSLInputStream to SSLOutputStream in comment x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Changed shutdownInput and shutdownOutput to call to the underlying socket x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Set sslNativePointer to 0 when freeing underlying SSL object x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Removed IOException logging in getSession, which is expected to simply return SSL_NULL_WITH_NULL_NULL when there are problems. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Disabled ""Using factory"" message on successful creation of SocketFactory which was a bit noisy running tests. However, added logging in failure case including the related exception: x-net/src/main/java/javax/net/ssl/SSLSocketFactory.java Disabled logging of OpenSSL session deallocation x-net/src/main/native/org_apache_harmony_xnet_provider_jsse_NativeCrypto.cpp Register SSLContextImpl as a source of SSL and SSL3 SSLContexts, not just TLS and TLSv1. x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/JSSEProvider.java Fix whitespace in comment x-net/src/main/java/org/apache/harmony/xnet/provider/jsse/CertificateRequest.java Change-Id: I99975ae22599c7df0d249fa013ae7ea7c9c08051/"
,,0.3996,conscrypt,"Fix OpenSSLSessionImpl.getValueNames regression In e32b21f14d52bac429a9c54fe031f9e92c911d64, the code was converted to use Objects.equals. However, because of a typo, an autoboxed Boolean was passed instead of an AccessControlContext. I reviewed the rest of the original change to make sure there were no other instances of this regression. Also cleaned up the SSLSessionTest (fixing two broken tests test_getLocalPrincipal and test_getPeerPrincipal) and fixed a whitespace issue in AccessControlContext. Change-Id: Icaee8a0c2f5f527bea7a80037fe3f99c509d9f42/Fix HttpsURLConnectionTest failures Focusing on HttpsURLConnectionTest.test_doOutput found a number of unrelated issues, all of which are addressed by this change: {HttpURLConnection,HttpsURLConnection}.connect not ignored on subsequent calls OpenSSLSessionImpl.{getPeerCertificates,getPeerCertificateChain} did not include client certificate OpenSSLSocketImpl.getSession did not skip handshake when SSLSession was already available Fix 3 test issues in HttpsURLConnectionTest Fix 2 test issues in NativeCryptoTest Details: HttpsURLConnectionTest tests (such as test_doOutput) that tried to call URLConnection.connect() at the end of the test were raising exception. The RI URLConnection.connect documentation says calls on connected URLConnections should be ignored. Use ""connected"" instead of ""connection null"" as reason to ignore ""connect"" luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/ Converted one caller of getPeerCertificateChain to getPeerCertificates which is the new fast path. Track OpenSSLSessionImpl change to take ""java"" vs ""javax"" certificates. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/AbstractSessionContext.java Move SSL_SESSION_get_peer_cert_chain to be SSL_get_peer_cert_chain (similar to SSL_get_certificate). The problem was that SSL_SESSION_get_peer_cert_chain used SSL_get_peer_cert_chain which in the server case did not include the client cert itself, which required a call to SSL_get_peer_certificate, which needed the SSL instance pointer. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java luni/src/main/native/NativeCrypto.cpp Improved NativeCrypto_SSL_set_verify tracing luni/src/main/native/NativeCrypto.cpp As a side effect of the move to NativeCrypto.SSL_get_peer_certificate, it no longer made sense to lazily create the peer certificate chain since the SSLSession should not depend on a particular SSL instance. The peer chain is now passed in as part of the constructor and the peerCertifcates in the OpenSSLSession can be final (also made localCertificates final). Since peerCertifcates is the newew (java not javax) API and more commonly used, it is what is created from the native code, and peerCertificateChain is not derived from peerCertifcates instead of vice versa. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java Factored out code to used to create local certificate chain to from array of DER byte arrays into createCertChain so it can be reused to create peer certificate chain. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Fix OpenSSLSocketImpl.getSession to check for existing sslSession to and skip handshake, which was causing an exception if the connection had already been closed. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Fix test issues: Removed PrintStream wrapper of System.out which was causing vogar to lose output. Added null check in closeSocket, which can happen in timeout case. Removed use of InputStream.available which in OpenSSLSocket case returned 0, causing test to fail incorrectly. luni/src/test/java/org/apache/harmony/luni/tests/internal/net/www/protocol/ Updating to track change to SSL_get_peer_cert_chain. Also fixed some other unrelated test failures caused by IOException on shutdown and false start (aka SSL_MODE_HANDSHAKE_CUTTHROUGH) causing clientCallback.handshakeCompleted to be false. luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java Bug: b/2981767 Change-Id: Id083beb6496558296c2f74f51ab0970e158b23a9/b/2914872: fix concurrent initialization problem with peer certificate chain fields Change-Id: Ib76dd826c8f3616d4a3aed608aef432a1b99f3d6/"
,,0.493,conscrypt,"TrustManager improvements Overhaul of TrustManagerImpl PKIXParameters can now be final in TrustManagerImpl because we always immediately create an IndexedPKIXParameters instead of only doing it in SSLParametersImpl.createDefaultTrustManager. Use new KeyStore constructor for IndexedPKIXParameters to remove duplicate logic for creating set of TrustAnchors from a KeyStore. Improved checkTrusted/cleanupCertChain to remove special cases for directly trusting the end cert or pruning only self signed certs. To support b/2530852, we need to stop prune the chain as soon as we find any trust anchor (using newly improved TrustManagerImpl.isTrustAnchor), which could be at the beginning, middle, or end. That means cleanupCertChain can return an empty chain if everything was trusted directly. (and we dont need to do extra checks on exception cases to see if the problem was just that the trust anchor was in the chain) isDirectlyTrusted isTrustAnchor here as well, using new IndexedPKIXParameters.isTrustAnchor APIs Fix incorrect assumption in getAcceptedIssuers that all TrustAnchor instances have non-null results for getTrustedCert. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java Removed indexing in createDefaultTrustManager since we always index now luni/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLParametersImpl.java Overhaul of IndexedPKIXParameters Single map from subject X500Principal to TrustAnchors instead of two different X500Principal keyed maps to check Removed map based on encoded cert. For b/2530852, we want to treat certs as equal if they have the same name and public key, not byte-for-byte equality, which can be done with the remaining map. Revamped isDirectlyTrusted into isTrustAnchor(cert) to perform this new name/key based comparison. Added helper isTrustAnchor(cert, anchors) to reuse code in non-IndexedPKIXParameters case in TrustManagerImpl. Added constructor from KeyStore Moved anchor indexing code to index() from old constructor luni/src/main/java/org/apache/harmony/xnet/provider/jsse/IndexedPKIXParameters.java TestKeyStore.getPrivateKey allowed some existing test simplification. luni/src/test/java/libcore/java/security/KeyStoreTest.java luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java support/src/test/java/libcore/java/security/TestKeyStore.java Added missing ""fail()"" before catching expected exceptions. luni/src/test/java/libcore/java/security/KeyStoreTest.java Expanded KeyManagerFactoryTest to excercise ManagerFactoryParameters b/1628001 luni/src/test/java/libcore/javax/net/ssl/KeyManagerFactoryTest.java Added KeyStoreBuilderParametersTest because I thought I saw a bug in KeyStoreBuilderParameters, but this convinced me otherwise. luni/src/test/java/libcore/javax/net/ssl/KeyStoreBuilderParametersTest.java New TrustManagerFactory test modeled on expanded KeyManagerFactoryTest. test_TrustManagerFactory_intermediate specifically is targeting the new functionality of b/2530852 to handling trust anchors within the chain. luni/src/test/java/libcore/javax/net/ssl/TrustManagerFactoryTest.java support/src/test/java/libcore/java/security/StandardNames.java Some initial on tests for Elliptic Curve (b/3058375) after the RI started reporting it was supported. Removed old tags. Skipped a test on the RI that it cant handle. Improved some assert messages. luni/src/test/java/libcore/javax/net/ssl/SSLEngineTest.java luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java support/src/test/java/libcore/java/security/StandardNames.java support/src/test/java/libcore/java/security/TestKeyStore.java Removed unneeded bytes->javax->bytes->java case of which can just go bytes->java directly. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Removed super() luni/src/main/java/javax/net/ssl/KeyStoreBuilderParameters.java Made Security.secprops final luni/src/main/java/java/security/Security.java Pulled SamplingProfiler fix from dalvik-dev branch git cherry-pick f9dc3450e8f23cab91efc9df99bb860221ac3d6c dalvik/src/main/java/dalvik/system/SamplingProfiler.java Bug: 2530852 Change-Id: I95e0c7ee6a2f66b6986b3a9da9583d1ae52f94dd/Sorting imports. Change-Id: I8347bc625480a1c37a1ed9976193ddfedeb00bbc/"
,,0.3807,conscrypt,"Scrub missing calls to super.finalize() Bug: 3024226 Change-Id: I6642cb9d4929ba72244529efe4ebdfa595ae4fa7/Restore OpenSSLMessageDigestJDK.digest reset behavior SSLEngine tests started failing due to the recent incorrect change to OpenSSLMessageDigestJDK.digest() that removed the reset of MessageDigest state on call to digest(). The problem was not that the digest was resetting, but that it was resetting to use a SHA-0 algorithm. See recent change c38b8476e7e4bd4b091d9f0e8fe8b2b972e7bc81. Change-Id: I40ef4e18a1b546eac5a487cb8a808d4897b301b0/OpenSSLMessageDigestJDK.reset should not change from SHA-1 to SHA-0 For SHA-1, the OpenSSLMessageDigestJDK constructor was called with the algorithm name ""SHA-1"", which it passed to the superclass constructor for use as the algorithm field. However, MessageDigest.getInstance would then override this value with the its own algorithm argument. In the case of getInstance(""SHA""), this mean the constructor would set the value to ""SHA-1"" (from the OpenSSLMessageDigestJDK.SHA1 subclass constructor) which would then be overridden by getInstance to ""SHA"". Because the OpenSSLMessageDigestJDK would then initialize using ""SHA-1"", the MessageDigest worked in the common case. However, when it was MessageDigest.reset(), it called getAlgorithm() which returned ""SHA"", which was then passed to OpenSSL as ""sha"" which interpretted this as ""SHA-0"". The fix is to change to pass both a standard name (e.g ""SHA-1"") as well as openssl name expliclty (e.g. ""sha1""), removing the somewhat hacky code that tried to algorithmically transform from the standard names to the openssl ones. The same fix needs to be made to OpenSSLDigest. We also are removing SHA-0 from openssl since it is unneeded and would have cause an clear error if it had been absent. Change-Id: Iaa8f5b93a572fb043fa4f2618070ebb5054f82b1/Implement OpenSSLMessageDigestJDK.clone and fix OpenSSLMessageDigestJDK.digest DigestInputStream2Test.test_onZ was failing because OpenSSLMessageDigestJDK did not implement Clonable Implementing Clonable required a new NativeCrypto.EVP_MD_CTX_copy method While adding NativeCrypto.EVP_MD_CTX_copy, noticed other methods were not properly named in NativeCrypto.EVP_MD_CTX_* convention. Converted rest of NativeCrypto.cpp to JNI_TRACE logging while debugging DigestOutputStreamTest.test_onZ was failing because OpenSSLMessageDigestJDK.digest did an engineReset Removing the engineReset revealed that digest() could not be called repeatedly on an OpenSSLMessageDigestJDK. Problem was that EVP_DigestFinal can only be called once per digest. Changed engineDigest implementation to use new EVP_MD_CTX_copy to create a temp EVP_MD_CTX which can be used to retreive the digest and then discarded. Bug: 2997405 Change-Id: Ie97c22be245911300d2e729e451a9c4afdb27937/"
,,0.52,conscrypt,"TrustManager improvements Overhaul of TrustManagerImpl PKIXParameters can now be final in TrustManagerImpl because we always immediately create an IndexedPKIXParameters instead of only doing it in SSLParametersImpl.createDefaultTrustManager. Use new KeyStore constructor for IndexedPKIXParameters to remove duplicate logic for creating set of TrustAnchors from a KeyStore. Improved checkTrusted/cleanupCertChain to remove special cases for directly trusting the end cert or pruning only self signed certs. To support b/2530852, we need to stop prune the chain as soon as we find any trust anchor (using newly improved TrustManagerImpl.isTrustAnchor), which could be at the beginning, middle, or end. That means cleanupCertChain can return an empty chain if everything was trusted directly. (and we dont need to do extra checks on exception cases to see if the problem was just that the trust anchor was in the chain) isDirectlyTrusted isTrustAnchor here as well, using new IndexedPKIXParameters.isTrustAnchor APIs Fix incorrect assumption in getAcceptedIssuers that all TrustAnchor instances have non-null results for getTrustedCert. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java Removed indexing in createDefaultTrustManager since we always index now luni/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLParametersImpl.java Overhaul of IndexedPKIXParameters Single map from subject X500Principal to TrustAnchors instead of two different X500Principal keyed maps to check Removed map based on encoded cert. For b/2530852, we want to treat certs as equal if they have the same name and public key, not byte-for-byte equality, which can be done with the remaining map. Revamped isDirectlyTrusted into isTrustAnchor(cert) to perform this new name/key based comparison. Added helper isTrustAnchor(cert, anchors) to reuse code in non-IndexedPKIXParameters case in TrustManagerImpl. Added constructor from KeyStore Moved anchor indexing code to index() from old constructor luni/src/main/java/org/apache/harmony/xnet/provider/jsse/IndexedPKIXParameters.java TestKeyStore.getPrivateKey allowed some existing test simplification. luni/src/test/java/libcore/java/security/KeyStoreTest.java luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java support/src/test/java/libcore/java/security/TestKeyStore.java Added missing ""fail()"" before catching expected exceptions. luni/src/test/java/libcore/java/security/KeyStoreTest.java Expanded KeyManagerFactoryTest to excercise ManagerFactoryParameters b/1628001 luni/src/test/java/libcore/javax/net/ssl/KeyManagerFactoryTest.java Added KeyStoreBuilderParametersTest because I thought I saw a bug in KeyStoreBuilderParameters, but this convinced me otherwise. luni/src/test/java/libcore/javax/net/ssl/KeyStoreBuilderParametersTest.java New TrustManagerFactory test modeled on expanded KeyManagerFactoryTest. test_TrustManagerFactory_intermediate specifically is targeting the new functionality of b/2530852 to handling trust anchors within the chain. luni/src/test/java/libcore/javax/net/ssl/TrustManagerFactoryTest.java support/src/test/java/libcore/java/security/StandardNames.java Some initial on tests for Elliptic Curve (b/3058375) after the RI started reporting it was supported. Removed old tags. Skipped a test on the RI that it cant handle. Improved some assert messages. luni/src/test/java/libcore/javax/net/ssl/SSLEngineTest.java luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java support/src/test/java/libcore/java/security/StandardNames.java support/src/test/java/libcore/java/security/TestKeyStore.java Removed unneeded bytes->javax->bytes->java case of which can just go bytes->java directly. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Removed super() luni/src/main/java/javax/net/ssl/KeyStoreBuilderParameters.java Made Security.secprops final luni/src/main/java/java/security/Security.java Pulled SamplingProfiler fix from dalvik-dev branch git cherry-pick f9dc3450e8f23cab91efc9df99bb860221ac3d6c dalvik/src/main/java/dalvik/system/SamplingProfiler.java Bug: 2530852 Change-Id: I95e0c7ee6a2f66b6986b3a9da9583d1ae52f94dd/Move improved cert chain handling from CertificateChainValidator to TrustManagerImpl Bug: 2658463 Change-Id: I014ebfee1f6e2f46b7a842b5bbf6549bf484f3c0/"
,,0.1199,conscrypt,Rename internal SSLParameters to SSLParametersImpl to avoid collision with new javax.net.ssl.SSLParameters Bug: 2672817 Change-Id: Iadf21b848eaf8850fce22721b9ba3739ab2e9fca/
,,0.0945,conscrypt,Move libcore.base classes to libcore.util and libcore.io. Change-Id: I2340a9dbad3561fa681a8ab47d4f406e72c913e3/Remove non-API uses of Vector. Change-Id: I27902950af0349619f4cb826d41db8926df0d34a/
,,0.4506,conscrypt,"Elliptic Crypto support for OpenSSLSocketImpl Summary: Enable Elliptic Crypto support for OpenSSL based SSLSocket instances More RI compliant usage of key types, client auth types, and server auth types Steps toward TLS_EMPTY_RENEGOTIATION_INFO_SCSV support, currently test updates Details: Elliptic Curve changes CipherSuite updates for EC Adding KEY_EXCHANGE_EC* and corresponding CipherSuites Updated isAnonymous, getKeyType (now renamed getServerKeyType) to handle new EC cases. Added new getAuthType for use by checkServerTrusted callers. Restructured code to handle two SUITES_BY_CODE_* arrays Remove KEY_EXCHANGE_DH_* definitions which unused because the corresponding CipherSuites were previously disabled. Changed AES CipherSuites definitions to use ""_CBC"" to match other definitions. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java openssl EC NativeCrypto now registers TLS_EC_* cipher suites and has update default list Improved auth type arguments to checkClientTrusted/checkServerTrusted NativeCrypto support for emphemeral EC keys luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java luni/src/main/native/NativeCrypto.cpp non-openssl SSL/TLS cleanups cleanup around code trying to cope with DiffieHellman vs DH since either should work. changed client to use new CipherSuite.getAuthType shared with NativeCrypto implementation changed server to use CipherSuite.getKeyType luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientHandshakeImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/HandshakeProtocol.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/KeyManagerImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerHandshakeImpl.java Consolidate CertificateRequestType code into CipherSuite so that its shared between java and openssl implementations. This includes the KEY_TYPE_ string constants, TLS_CT_* byte constants and the String keyType(byte) (now renamed getClientKeyType) code that depends on them. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CertificateRequest.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ClientHandshakeImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerHandshakeImpl.java Tests Differentiate between supported list of cipher suites openssl-based SSLSocket and SSLEngine based, since the SSLEngine code does not support EC. luni/src/test/java/libcore/javax/net/ssl/SSLEngineTest.java luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java Added testing for expected default cipher suites. Before we just ensured the values were valid. luni/src/test/java/libcore/javax/net/ssl/SSLSocketFactoryTest.java support/src/test/java/libcore/java/security/StandardNames.java Updated to handle new EC cipher suites codes. Added test for new getClientKeyType. luni/src/test/java/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java Better use of ""standard names"" particularly to correctly deal with the subtle differences between key types, client auth types, and server auth types. TestKeyManager and TestTrustManager now verify the values they are passed are acceptable. support/src/test/java/libcore/java/security/StandardNames.java support/src/test/java/libcore/javax/net/ssl/TestKeyManager.java support/src/test/java/libcore/javax/net/ssl/TestTrustManager.java Changed to timeout after 30 seconds and to log to reveal both client and server issues. support/src/test/java/libcore/javax/net/ssl/TestSSLSocketPair.java Bug: 3058375 Change-Id: I14d1d0285d591c99cc211324f3595a5be682cab1/Test updates for Elliptic Curve Updated with Elliptic Curve (EC) (and SunPKCS11-NSS) names for use by ProviderTest support/src/test/java/libcore/java/security/StandardNames.java Enhance test_KeyStore_cacerts_bks to verify PublicKey can be retreived. Before this the test would pass even though an ECPublicKey could not be accessed. With EC support in external/bouncycastle, this test now passes. luni/src/test/java/libcore/java/security/KeyStoreTest.java New SignatureTest to cover ECDSA, replaces the old one that required a subclass per tested algorithm. luni/src/test/java/libcore/java/security/SignatureTest.java support/src/test/java/tests/security/SignatureTest.java luni/src/test/java/tests/targets/security/SignatureTestMD5withRSA.java luni/src/test/java/tests/targets/security/SignatureTestNONEwithDSA.java luni/src/test/java/tests/targets/security/SignatureTestSHA1withDSA.java luni/src/test/java/tests/targets/security/SignatureTestSHA1withRSA.java luni/src/test/java/tests/targets/security/SignatureTestSHA256withRSA.java luni/src/test/java/tests/targets/security/SignatureTestSHA384withRSA.java luni/src/test/java/tests/targets/security/SignatureTestSHA512withRSA.java luni/src/test/java/tests/targets/security/AllTests.java Improve ProviderTest logging while debugging SunPKCS11-NSS provider issues. Added some exceptions for RI missing classes. luni/src/test/java/libcore/java/security/ProviderTest.java Changed style slightly to match KeyPairGeneratorTest, where +N is used to indicated when multiples of a increments of a certain amount are required for valid key sizes. luni/src/test/java/libcore/javax/crypto/KeyGeneratorTest.java Fix test CloseGuard issues luni/src/test/java/libcore/java/security/KeyStoreTest.java Fix readability luni/src/main/java/org/apache/harmony/xnet/provider/jsse/ServerHandshakeImpl.java Bug: 3058375 Change-Id: I99cd93ad66372e8512d993168550cc1d471d3248/"
,,0.4527,conscrypt,"Toward EC TLS support Summary: javax.net.ssl tests are now working on the RI KeyManager can now handle EC_EC and EC_RSA OpenSSLSocketImpl.startHandshake now works if KeyManager contains EC certificates Details: Add CipherSuite.getKeyType to provide X509KeyManager key type strings, refactored from OpenSSLServerSocketImpl.checkEnabledCipherSuites. getKeyType is now also used in OpenSSLSocketImpl.startHandshake to avoid calling setCertificate for unnecessary key types. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java New CipherSuiteTest to cover new getKeyType as well as existing functionality luni/src/test/java/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java Add support to KeyManager implementation for key types of the form EC_EC and EC_RSA. The first part implies the KeyPair algorithm (EC in these new key types) with a potentially different signature algorithm (EC vs RSA in these) luni/src/main/java/org/apache/harmony/xnet/provider/jsse/KeyManagerImpl.java Update NativeCrypto.keyType to support EC_EC and EC_RSA in addition to EC which was added earlier. Change from array of KEY_TYPES to named KEY_TYPE_* constants. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java Overhauled KeyManagerFactoryTest to cover EC, EC_EC, EC_RSA cases luni/src/test/java/libcore/javax/net/ssl/KeyManagerFactoryTest.java support/src/test/java/libcore/java/security/StandardNames.java Changed TestKeyStore.createKeyStore from always using BKS to now use JKS on the RI between BC EC Keys and RI X509 certificates. Because JKS requires a password, we now default ""password"" on the RI. support/src/test/java/libcore/java/security/TestKeyStore.java luni/src/test/java/libcore/javax/net/ssl/SSLContextTest.java support/src/test/java/libcore/java/security/StandardNames.java TestKeyStore.create now accepts key types like EC_RSA. Changed TestKeyStore.createKeys to allow a PrivateKeyEntry to be specified for signing to enable creation of EC_RSA test certificate. Added getRootCertificate/rootCertificate to allow lookup of PrivateKeyEntry for signing. Changed TestKeyStore.getPrivateKey to take explicit signature algorithm to retrieve EC_EC vs EC_RSA entries. support/src/test/java/libcore/java/security/TestKeyStore.java luni/src/test/java/libcore/java/security/KeyStoreTest.java luni/src/test/java/libcore/javax/net/ssl/KeyManagerFactoryTest.java luni/src/test/java/libcore/java/security/cert/PKIXParametersTest.java luni/src/test/java/libcore/javax/net/ssl/TrustManagerFactoryTest.java luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java support/src/test/java/libcore/java/security/StandardNames.java Added support for EC cipher suites on the RI. Also test with and without new TLS_EMPTY_RENEGOTIATION_INFO_SCSV cipher suite which is used to specify the new TLS secure renegotiation. luni/src/test/java/libcore/javax/net/ssl/SSLEngineTest.java luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java support/src/test/java/libcore/java/security/StandardNames.java New TestKeyManager and additional logging in TestTrustManager. Logging in both is disabled by default using DevNullPrintStream. support/src/test/java/libcore/javax/net/ssl/TestKeyManager.java support/src/test/java/libcore/javax/net/ssl/TestTrustManager.java support/src/test/java/libcore/java/io/DevNullPrintStream.java Bug: 3058375 Change-Id: Ia5e2a00a025858e10d1076b900886994b481e05a/"
,,0.2495,conscrypt,"Remember intermediate CAs in TrustMangerImpls IndexedPKIXParameters Bug: 3404902 Change-Id: I4a3c35fd2981933c255e5d3a620675b9575083d4/TrustManager should include PrivateKeyEntry CAs, OpenSSLSocketImpl close fix, and debugging improvements Revert to older behavior of creating TrustAnchors from both PrivateKeyEntry and TrustedCertificateEntry values from the KeyStore. Added tests to better ensure this slighlt different behavior from PKIXParameters. Also create the acceptedIssuers proactively since the real memory cost is the X509Certificates which are already found in the params. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java luni/src/test/java/libcore/javax/net/ssl/TrustManagerFactoryTest.java luni/src/test/java/libcore/java/security/cert/PKIXParametersTest.java Dont just free native state on issue with startHandshake, close the SSLSocket. While the former addressed a CloseGuard issue, the latter make sure that checkOpen throws SocketExceptions and we dont leak a NullPointerException from NativeCrypto. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java Debugging improvements including minor refinements to recently added NativeCrypto logging, more verbose TestKeyStore.dump output, and a new TestTrustManager proxy class for logging X509TrustManager behavior. luni/src/main/native/NativeCrypto.cpp support/src/test/java/libcore/java/security/TestKeyStore.java support/src/test/java/libcore/javax/net/ssl/TestTrustManager.java Change-Id: I317e1ca34d8e20c77e5cb9c5a5a58cb4ae98d829/"
,,0.4573,conscrypt,"Toward EC TLS support Summary: javax.net.ssl tests are now working on the RI KeyManager can now handle EC_EC and EC_RSA OpenSSLSocketImpl.startHandshake now works if KeyManager contains EC certificates Details: Add CipherSuite.getKeyType to provide X509KeyManager key type strings, refactored from OpenSSLServerSocketImpl.checkEnabledCipherSuites. getKeyType is now also used in OpenSSLSocketImpl.startHandshake to avoid calling setCertificate for unnecessary key types. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/CipherSuite.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java New CipherSuiteTest to cover new getKeyType as well as existing functionality luni/src/test/java/org/apache/harmony/xnet/provider/jsse/CipherSuiteTest.java Add support to KeyManager implementation for key types of the form EC_EC and EC_RSA. The first part implies the KeyPair algorithm (EC in these new key types) with a potentially different signature algorithm (EC vs RSA in these) luni/src/main/java/org/apache/harmony/xnet/provider/jsse/KeyManagerImpl.java Update NativeCrypto.keyType to support EC_EC and EC_RSA in addition to EC which was added earlier. Change from array of KEY_TYPES to named KEY_TYPE_* constants. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java Overhauled KeyManagerFactoryTest to cover EC, EC_EC, EC_RSA cases luni/src/test/java/libcore/javax/net/ssl/KeyManagerFactoryTest.java support/src/test/java/libcore/java/security/StandardNames.java Changed TestKeyStore.createKeyStore from always using BKS to now use JKS on the RI between BC EC Keys and RI X509 certificates. Because JKS requires a password, we now default ""password"" on the RI. support/src/test/java/libcore/java/security/TestKeyStore.java luni/src/test/java/libcore/javax/net/ssl/SSLContextTest.java support/src/test/java/libcore/java/security/StandardNames.java TestKeyStore.create now accepts key types like EC_RSA. Changed TestKeyStore.createKeys to allow a PrivateKeyEntry to be specified for signing to enable creation of EC_RSA test certificate. Added getRootCertificate/rootCertificate to allow lookup of PrivateKeyEntry for signing. Changed TestKeyStore.getPrivateKey to take explicit signature algorithm to retrieve EC_EC vs EC_RSA entries. support/src/test/java/libcore/java/security/TestKeyStore.java luni/src/test/java/libcore/java/security/KeyStoreTest.java luni/src/test/java/libcore/javax/net/ssl/KeyManagerFactoryTest.java luni/src/test/java/libcore/java/security/cert/PKIXParametersTest.java luni/src/test/java/libcore/javax/net/ssl/TrustManagerFactoryTest.java luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java support/src/test/java/libcore/java/security/StandardNames.java Added support for EC cipher suites on the RI. Also test with and without new TLS_EMPTY_RENEGOTIATION_INFO_SCSV cipher suite which is used to specify the new TLS secure renegotiation. luni/src/test/java/libcore/javax/net/ssl/SSLEngineTest.java luni/src/test/java/libcore/javax/net/ssl/SSLSocketTest.java support/src/test/java/libcore/java/security/StandardNames.java New TestKeyManager and additional logging in TestTrustManager. Logging in both is disabled by default using DevNullPrintStream. support/src/test/java/libcore/javax/net/ssl/TestKeyManager.java support/src/test/java/libcore/javax/net/ssl/TestTrustManager.java support/src/test/java/libcore/java/io/DevNullPrintStream.java Bug: 3058375 Change-Id: Ia5e2a00a025858e10d1076b900886994b481e05a/"
,,0.1023,conscrypt,Move libcore.base classes to libcore.util and libcore.io. Change-Id: I2340a9dbad3561fa681a8ab47d4f406e72c913e3/Remove non-API uses of Vector. Change-Id: I27902950af0349619f4cb826d41db8926df0d34a/
,,0.0566,conscrypt,Remove IndexedPKIXParameters Change-Id: Idaaa1952d1b6148c51b3da5d1771105e8bde8a03/
,,0.0767,conscrypt,Add a way to clear stored trusted certificates. Bug: 6009802 Update the TrustManagerImpl Api to allow clearing stored certificates. This is needed so we can remove CAs when credential storage is updated. Change-Id: I024f7e8b12b60ea0ee35d7f94280e0e3d6db039f/
,,0.1102,conscrypt,"Add signatures to the OpenSSLProvider Now that OpenSSLSignature is a full-fledged Signature provider, we can add it to our OpenSSLProvider. Change-Id: If8539acdf895082cef38eed97a706dbbcdff6853/"
,,0.1707,conscrypt,"Add logging to detect cert pin failures caused by MITM proxies. Change-Id: Ie9554aaa824506a75534d888432ed8a91e14e386/Added basic cert pinning support. This has four main changes: First, it adds a CertPinManager to TrustManagerImpl that checks to ensure that the chain is properly pinned. Second, it adds the CertPinManager and associated classes to implement cert pinning at this level. Third, it changes the callers of checkServerTrusted to pass in a hostname where possible, allowing them to make use of the pinning transparently. Finally, it changes checkServerTrusted to return the ultimate chain that was verified, which is useful for implementing pinning at a higher level. cherry-picked from 5315f29b2de4aace0077b78f0b99634fda440b85 Change-Id: I150e010da3e2aeed57bd5330ff113d3a7fbbee2a/"
,,0.1581,conscrypt,"Add raw RSA signature support With the new Keystore changes, this is the only way you can get raw RSA signatures which a lot of native code expects to be able to do. (cherry-picked from c531f5f402b4cedcc35a0b7f0b540dc84c545106) Bug: 6787078 Change-Id: I1c5ddd5287be1ab71347eedc864a41c24e156cb4/"
,,0.0669,conscrypt,NativeCrypto: be more tolerant during translateKey Change-Id: I284bdb4d037d511390a6beb8518eb9bf9c50f25f/
,,0.091,conscrypt,"OpenSSLKey: easier creation and use of OpenSSL keys For some future changes, it will be easier to convert OpenSSL objects to real objects and back from native pointers. Make it easier to add new EVP_PKEY types without adding them in if/else statements everywhere. Change-Id: I19095bfc5f00835a266f572bc62e2e8d0a8cd544/"
,,0.0751,conscrypt,NativeCrypto: be more tolerant during translateKey Change-Id: I284bdb4d037d511390a6beb8518eb9bf9c50f25f/
,,0.3046,conscrypt,"Self-seed OpenSSL-backed SecureRandom from /dev/urandom. OpenSSL-backed SecureRandom instances do not currently self-seed. These instances are backed by OpenSSLs default RAND engine (SSLeay) which initilizes itself only once per process from /dev/urandom. As a result, these SecureRandom instances do not pull any new entropy from the Linux RNG when used. This CL makes OpenSSL-backed SecureRandom instances pull new entropy from /dev/urandom into OpenSSLs RAND engine during the self-seeding of the SecureRandom instances. This is similar to how new entropy is pulled into OpenSSLs RAND engine from /dev/urandom by OpenSSLSocketImpl. benchmark us linear runtime Before Change 21.3 After Change 537.8 Change-Id: I1d7467eac99b3627b64fbdb3e98be644581171bb/"
,,0.105,conscrypt,Conscrypt: add SHA-224 with tests SHA-224 has made a comeback in the latest StandardNames documentation. This change adds tests for SHA-224 and also Conscrypt providers for things we have code paths to support. Change-Id: I8c200082ff76ee4ae38b6efaa16e6741b33b7f5b/
,,0.1165,conscrypt,Conscrypt: add SHA-224 with tests SHA-224 has made a comeback in the latest StandardNames documentation. This change adds tests for SHA-224 and also Conscrypt providers for things we have code paths to support. Change-Id: I8c200082ff76ee4ae38b6efaa16e6741b33b7f5b/Do not throw exception on Mac#reset OpenSSLMac was not checking whether it was initialized before dereferencing its macKey field. This caused callers to Mac#reset() before Mac#init() to get a NullPointerException. Bug: Change-Id: I8523983fec578079a66a04d585c1ddbe7732575e/
,,0.2143,conscrypt,"Remove unsupported Cipher modes OpenSSL silently ignores the padding modes when specified for stream ciphers, but apparently Java does not. Change-Id: Icd92122d63b3b8e99d704e8193414dda5057146d/Conscrypt: add SHA-224 with tests SHA-224 has made a comeback in the latest StandardNames documentation. This change adds tests for SHA-224 and also Conscrypt providers for things we have code paths to support. Change-Id: I8c200082ff76ee4ae38b6efaa16e6741b33b7f5b/Register Conscrypt as the AlgNameMapper source Conscrypt was moved out of libcore, so the call directly to NativeCrypto was removed as well. To break the dependency, introduce an interface that Conscrypt registers as to answer algorithm name to OID mapping queries and vice versa. (cherry picked from commit 6fcfb5a75dfb595ccbcf0a7a576ee7515fe2da32) Bug: 10310296 Change-Id: Ia9c802f1102df7209749a90d0ed3ed2831480b04/"
,,0.0968,conscrypt,Support user-installed CA certs for cert pinning. Additionally expose new isUserAddedCertificate() so clients can set policy for user-installed CA certs. Bug: 11257762 Change-Id: If45cd452ab76f393660b34594dcae464af0c0696/
,,0.1833,conscrypt,"Stop depending on SSLContextImpl in OpenSSLContextImpl. SSLContextImpl is the HarmonyJSSE providers SSLContext SPI. OpenSSLContextImpl is the AndroidOpenSSL providers SSLContext SPI. This CL adjusts the class hierarchy to match. This is achieved by: 1. copying all of the functionality from SSLContextImpl into OpenSSLContextImpl, and 2. removing from SSLContextImpl the functionality used only by the default instance of AndroidOpenSSL providers SSLContext. Change-Id: I9e380be04e6a9a1660c3e6c0738ca026c171f4bd/"
,,0.0859,conscrypt,"Remove HarmonyJSSE SSLContext, SSLSocket and SSLServerSocket. HarmonyJSSE SSLEngine implementation is still in use and thus cannot be removed. Change-Id: I3c939e9275ba8f1d00342d1f83c6fdaf110f2317/"
,,0.3526,conscrypt,"Deprioritize HMAC-MD5 in default TLS/SSL cipher suites. Although HMAC-MD5 is not yet broken, the foundations are now much more shaky that those of HMAC-SHA. See This CL also adds a comment about the key rules governing the preference order of cipher suites used by default. Bug: 11220570 Change-Id: I2a2fe4d427650081637efc14fd7c427a33cbea7e/Prefer Forward Secrecy TLS/SSL cipher suites by default. This modifies the list of TLS/SSL cipher suites used by default to prefer those offering Forward Secrecy (FS) ECDHE and DHE. Bug: 11220570 Change-Id: I20f635d11e937d64de4f4e2fea34e1c5ea7a67ac/Deprioritize RC4-based TLS/SSL cipher suites. Now that BEAST and Lucky13 mitigations are enabled, it is prudent to prefer AES CBC cipher suites over RC4 ones (see Bug: 11220570 Change-Id: I52b9724700fd8eaeebbadcfa518a96823a1410b8/Adjust the default list of ciphers suites of SSLEngine. SSLEngine should use the same cipher suites by default as SSLSocket whose list was recently cleaned up. One complication is that the current SSLEngine implementation does not support EC. This CL removes cipher suites with bulk encryption cipher key length shorter than 80 bits and adds 256-bit versions of AES cipher suites. Bug: 11220570 Change-Id: I81fb34d8067a8565c0ae11883bb5c1ee65ed6875/"
,,0.1554,conscrypt,"Proper check for PrivateKey algorithm. The correct way to check for the type of a PrivateKey is to inspect the result of its getAlgorithm, rather than to check that the key is instance of [RSA/DSA/EC]PrivateKey. For example, opaque RSA private keys are instances of PrivateKey but not instances of RSAPrivateKey. See Java PKCS#11 Reference Guide section 3.2 ""Token Keys"". Change-Id: I2502b264fa87ccad747cd6fe41da3a18c5d01864/"
,,0.1567,conscrypt,SSLEngine: record splitting for BEAST mitigation Split the initial encrypted packet sent into 1 byte and n-1 bytes to mitigate BEAST attacks. Bug: 11463939 Change-Id: Id81920fb2ede4172ae3565303d215b776091afc8/
,,0.3577,conscrypt,"Add OpenSSLEngineImpl Add support for SSLEngine via OpenSSL APIs. Currently this supports just the basic SSLEngine functionality. It can be improved in efficiency and performance, but it appears not to leak anything and be correct according to our test suites. Change-Id: Iea2dc3922e7c30e26daca38361877bd2f88ae668/Refactor OpenSSLSocketImpl Move functionality that will be shared with OpenSSLs SSLEngine implementation out of OpenSSLSocketImpl and into the (soon-to-be) shared SSLParametersImpl. The functionality should stay the same. Change-Id: If8faa3ad2c9c73c0a0cd4b9716639b362b2b26a1/Use the new endpointVerificationAlgorithm API Use the new X509ExtendedTrustManager and use the new getEndpointVerificationAlgorithm to check the hostname during the handshake. Bug: 13103812 Change-Id: Id0a74d4ef21a7d7c90357a111f99b09971e535d0/Leave SSLParametersImpl.getDefaultX509TrustManager public. I renamed this method from getDefaultTrustManager to getDefaultX509TrustManager and erroneously made it private in 8d63ff1384e46407a7618df2b79b2b455795c396. I missed the fact that its being used from frameworks android.net. This CL reverts this method to being public again. Bug: 13563574 Change-Id: I601c651d631f5a2e4a04d21941186553988e5286/Support TLS/SSL without X509TrustManager or X509KeyManager. This makes TLS/SSL primitives operate as expected when no X509TrustManager or X509KeyManager is provided. Instead of blowing up with KeyManagementException or NullPointerException (or similar) when X509TrustManager or X509KeyManager is not provided, this CL makes SSLContext.init accept such setup, and makes SSLSocket and SSLEngine reject certificate chains, select no private keys/aliases, and accept no certificate issuers. Bug: 13563574 Change-Id: I8de58377a09025258357dd4da9f6cb1b6f2dab80/"
,,0.1263,conscrypt,"Fix up concurrent use of APIs Code that is incorrectly using MessageDigest, Signature, or Mac in multiple threads simultaneously could cause a SEGV if OpenSSL is clearing out the MD_CTX at the same time another thread is trying to write to it. Make sure we initialize a new MD_CTX after each run to avoid crashing. The program using the instances concurrently is still wrong and will most likely get inconsistent results. Switch to using a context object instance to make sure we can hold a reference to the object during the native call. Bug: 8787753 Change-Id: I2518613a47cf03c811a29d17040804fc708394dd/"
,,0.1343,conscrypt,"Fix up concurrent use of APIs Code that is incorrectly using MessageDigest, Signature, or Mac in multiple threads simultaneously could cause a SEGV if OpenSSL is clearing out the MD_CTX at the same time another thread is trying to write to it. Make sure we initialize a new MD_CTX after each run to avoid crashing. The program using the instances concurrently is still wrong and will most likely get inconsistent results. Switch to using a context object instance to make sure we can hold a reference to the object during the native call. Bug: 8787753 Change-Id: I2518613a47cf03c811a29d17040804fc708394dd/"
,,0.1276,conscrypt,"Fix up concurrent use of APIs Code that is incorrectly using MessageDigest, Signature, or Mac in multiple threads simultaneously could cause a SEGV if OpenSSL is clearing out the MD_CTX at the same time another thread is trying to write to it. Make sure we initialize a new MD_CTX after each run to avoid crashing. The program using the instances concurrently is still wrong and will most likely get inconsistent results. Switch to using a context object instance to make sure we can hold a reference to the object during the native call. Bug: 8787753 Change-Id: I2518613a47cf03c811a29d17040804fc708394dd/"
,,0.3338,conscrypt,"Offer PKCS#7 padding for AES and DES. This offers PKCS#7 padding for all Cipher transformations which currently support PKCS#5 padding. PKCS#5 padding is a special case of PKCS#7 padding. PKCS#5 padding is defined specifically for 64 bit long blocks. However, lots of code assumes that PKCS#5 for other block sizes works exactly like PKCS#7, and thus uses PKCS#5 padding where PKCS#7 should actually be used (e.g., with AES). The current implementation of PKCS#5 padding works exactly like PKCS#7 padding. For backward-compatibility reasons, this will remain unchanged by this CL and the same padding implementation will simply be used regardless of whether PKCS#5 of PKCS#7 one is requested. As an added benefit, this change speeds up by an order of magnitude AES encryption and decryption when PKCS#7 padding is requested on Android. This is because prior to this change AES with PKCS#7 padding was by default backed by Bouncy Castle, and with this change it is backed by the much faster OpenSSL implementation. Change-Id: I0ca8a952c67bc7aff172e22bd730378d41438067/"
,,0.1163,conscrypt,"Add ability to wrap platform keys This is mostly useful for unbundled Conscrypt currently when working with KeyChain-based keys, but could be good for use with PKCS11-like keys in other JSSE providers. Bug: 15469749 Change-Id: I56bf2eaf3228bdf42d671437f4fffdafb8b47b12/DH keys: fix some errors the tests caught * Returning ""DSA"" instead of ""DH"" for key algorithm * Not having the key type defined as translatable in OpenSSLKey Change-Id: I19db78ddb6d8697e758692bc4830fb32c8a0176a/"
,,0.5853,conscrypt,"Enable PSK cipher suites when PSKKeyManager is provided. This enables TLS-PSK cipher suites by default iff SSLContext is initialized with a PSKKeyManager. For consistency, X.509 based cipher suites are no longer enabled by default at all times they are now only enabled by default iff SSLContext is initialized with a X509KeyManager or a X509TrustManager. When both X.509 and PSK cipher suites need to be enabled, PSK cipher suites are given higher priority in the resulting list of cipher suites. This is based on the assumption that in most cases users of TLS/SSL who enable TLS-PSK would prefer TLS-PSK to be used when the peer supports TLS-PSK. Bug: 15073623 Change-Id: I8e2bc3e7a1ea8a986e468973b6bad19dc6b7bc3c/Make setEnabledProtocols/CipherSuites copy their inputs. SSLSocket, SSLServerSocket, and SSLEngine offer setEnabledProtocols and setEnabledCipherSuites methods which take an array of protocols or cipher suites as input. If these methods store references to the input arrays, then the internal state (lists of enabled protocols and cipher suites) of SSLSocket, SSLServerSocket, and SSLEngine could be modified without going through the setter methods of these classes. Bug: 15753142 Change-Id: Ia5248050d81320ed1da99892278bd60872605f52/SSLParametersImpl is the source of enabled cipher suites and protocols. An instance of SSLParametersImpl is associated with SSLContext and is then cloned into any SSLSocketFactory, SSLServerSocketFactory, SSLSocket, SSLServerSocket, and SSLEngine. This CL ensures that all these primitives obtain their list of enabled cipher suites and protocols from their instance of SSLParametersImpl. Bug: 15073623 Change-Id: I40bf32e8654b299518ec0e77c3218a0790d9c4fd/Expose support for TLS-PSK. TLS-PSK (Pre-Shared Key) is a set of TLS/SSL cipher suites that use symmetric (pre-shared) keys for mutual authentication of peers. These cipher suites are in some scenarios more suitable than those based on public key cryptography and X.509. See RFC 4279 (Pre-Shared Key Ciphersuites for Transport Layer Security (TLS)) for more information. OpenSSL currently supports only the following PSK cipher suites: * TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 * TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 * TLS_PSK_WITH_3DES_EDE_CBC_SHA * TLS_PSK_WITH_AES_128_CBC_SHA * TLS_PSK_WITH_AES_256_CBC_SHA * TLS_PSK_WITH_RC4_128_SHA The last four cipher suites mutually authenticate the peers and secure the connection using a pre-shared symmetric key. These cipher suites do not provide Forward Secrecy once the pre-shared key is compromised, all previous communications secured with that key can be decrypted. The first two cipher suites combine the pre-shared symmetric key with an ephemeral key obtained from an ECDH key exchange performed during the TLS/SSL handshake, thus providing Forward Secrecy. Users of TLS-PSK are expected to provide an implementation of PSKKeyManager to SSLContext.init and then enable at least one PSK cipher suite in SSLSocket/SSLEngine. Bug: 15073623 Change-Id: I8e59264455f980f23a5e66099c27b5b4d932b9bb/Unbundle: hacks to let Conscrypt compile standalone This is the first pass at getting Conscrypt to compile standalone. It works fine in apps currently. There are a few TODOs to fix. Change-Id: I9b43ba12c55e04c8897ccacf38979ca671a55a26/Get rid of some warnings. Change-Id: I87f3ad5374d89e8acfdd78fe5af4b02be483cd3d/Turn off verify peer for servers with no client auth Since the default is now SSL_VERIFY_PEER, as a server we need to explicitly set that we dont want a client certificate by setting SSL_VERIFY_NONE. Change-Id: I740389cc59ef8cb444a0e504838a1c0591df2bf9/Call SSL_set_alpn_protos with right native pointer This change was missed during rebase of the OpenSSLEngine code since this used to be SSL_CTX_set_alpn_protos. Bug: 14273022 Change-Id: Ib72b27c8d5a4ddfde4e0c0ee2ab97bfb039c7f56/"
,,0.1299,conscrypt,"Add ability to wrap platform keys This is mostly useful for unbundled Conscrypt currently when working with KeyChain-based keys, but could be good for use with PKCS11-like keys in other JSSE providers. Bug: 15469749 Change-Id: I56bf2eaf3228bdf42d671437f4fffdafb8b47b12/"
,,0.0956,conscrypt,"Use specific Charset for encoding Without using a specific Charset, it will call System.getProperty to find the current locale. We only care about getting the bytes for US-ASCII so explicitly ask for that instead. Change-Id: I6902b59ccb8a13a8977b828c099ad493e4f17e5c/"
,,0.0588,conscrypt,OpenSSLMessageDigestJDK: support clone Add the ability to clone the MessageDigest state. Bug: 14821275 Change-Id: Ifa1b48db708448b971afe1e7360876f3fbe47588/
,,0.1021,conscrypt,"Use specific Charset for encoding Without using a specific Charset, it will call System.getProperty to find the current locale. We only care about getting the bytes for US-ASCII so explicitly ask for that instead. Change-Id: I6902b59ccb8a13a8977b828c099ad493e4f17e5c/"
,,0.1281,conscrypt,"Add ability to wrap platform keys This is mostly useful for unbundled Conscrypt currently when working with KeyChain-based keys, but could be good for use with PKCS11-like keys in other JSSE providers. Bug: 15469749 Change-Id: I56bf2eaf3228bdf42d671437f4fffdafb8b47b12/"
,,0.1281,conscrypt,"Add ability to wrap platform keys This is mostly useful for unbundled Conscrypt currently when working with KeyChain-based keys, but could be good for use with PKCS11-like keys in other JSSE providers. Bug: 15469749 Change-Id: I56bf2eaf3228bdf42d671437f4fffdafb8b47b12/"
,,0.1468,conscrypt,Unbundle: hacks to let Conscrypt compile standalone This is the first pass at getting Conscrypt to compile standalone. It works fine in apps currently. There are a few TODOs to fix. Change-Id: I9b43ba12c55e04c8897ccacf38979ca671a55a26/Add DH keys Add the initial steps for DH keys to be generated and handled via OpenSSL. Next steps will be hooking it up via other APIs that use DH keys. Change-Id: Ib159e60db73f82b75e0ba375a1d165c51286edac/
,,0.2236,conscrypt,"Read property to enable SNI Read the system property ""jsse.enableSNIExtension"" on whether to enable Server Name Indication (SNI) extension. For unbundled builds, this will be enabled by default. For platform builds, this will be disabled by default. Bug: 16658420 Bug: 17059757 Change-Id: I774f5406bf3fe601a42c4ef5e708b31800147eb9/Validate hostname is usable for SNI According to RFC 6066 section 3, the hostname listed in the Server Name Indication (SNI) field is a fully qualified domain name and IP addresses are not permitted. Bug: 16658420 Bug: 17059757 Change-Id: I804e46b6e66599b2770f0f4f0534467987e51208/Rename hostname fields and methods to reflect usage The hostname that was supplied when the socket was created is stored as the ""peerHostname"" This is the only one that should be used for Server Name Indication (SNI) purposes. The ""peerHostname"" or the resolved IP address may be used for certificate validation, so keep the use of ""getHostname()"" for cerificate validation. Bug: 16658420 Bug: 17059757 Change-Id: Ifd87dead44fb2f00bbfd5eac7e69fb3fc98e94b4/Relax checks for key vs cert for wrapped keys If a key is a wrapped platform key, we must relax the check. The reason is that we may not have the public values we need to pass the EVP_PKEY_cmp checks that this does. Change-Id: I7ab2be51b0968a9cf771edea01d33fe2367c8185/"
,,0.0915,conscrypt,"Relax checks for key vs cert for wrapped keys If a key is a wrapped platform key, we must relax the check. The reason is that we may not have the public values we need to pass the EVP_PKEY_cmp checks that this does. Change-Id: I7ab2be51b0968a9cf771edea01d33fe2367c8185/"
,,0.0846,conscrypt,"Relax checks for key vs cert for wrapped keys If a key is a wrapped platform key, we must relax the check. The reason is that we may not have the public values we need to pass the EVP_PKEY_cmp checks that this does. Change-Id: I7ab2be51b0968a9cf771edea01d33fe2367c8185/"
,,0.1869,conscrypt,"Allow conscrypt to work with BoringSSL. This is quite a substantial change because of the changes to ENGINEs in BoringSSL. For the most part, are used to allow the code to work with either OpenSSL or BoringSSL. However, in several places, support for things that BoringSSL is dropping have been removed, even when OpenSSL is used. This includes DSA keys and tests for the ENGINE bits that are going away because its unclear how to skip compiling those tests. Change-Id: I941a5ed232391f84b45e070c19d2ffb7ad162b7b/"
,,0.1479,conscrypt,"Fix null elements in X509KeyManager.chooseClientAlias keyTypes. This fixes an issue where client certificate types requested by the server from the client, but not known by the client, manifest themselves as null elements in X509KeyManager.chooseClientAlias keyTypes argument. The root cause was that for each element in the CertificateRequest.certificate_types array an element was output into the keyTypes array. For unknown values of certificate_type, a null was output. This CL fixes the issue by ignoring unknown values in certificate_types array. Bug: 18414726 Change-Id: I8565e19a610c0ecfb7cab1b7707c335e0eeb8d89/"
,,0.2905,conscrypt,"Remove SSLv3 from default protocols list for TLS SSLv3 has some systemic problems demonstrated by the POODLE attack. Disable it by default when ""TLS"" is requested since the documentation in Java Standard Names allows us to not support SSL when TLS is requested. Bug: 17136008 Change-Id: Icad1639c7e33b6e495f452a5289b0d20b819d679/Add way to get preferred SSLContext config This change is in preparation to re-arrange the way OpenSSLContextImpl gets its configuration. Since frameworks/base directly creates an OpenSSLContextImpl instance, give it a stable way of retrieving the ""preferred"" version of this. Bug: 17136008 Change-Id: I8817b8f7816f9d6f0f9c30288904635e06b0c6a5/"
,,0.2545,conscrypt,"Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/"
,,0.2926,conscrypt,"Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/Fix null elements in X509KeyManager.chooseClientAlias keyTypes. This fixes an issue where client certificate types requested by the server from the client, but not known by the client, manifest themselves as null elements in X509KeyManager.chooseClientAlias keyTypes argument. The root cause was that for each element in the CertificateRequest.certificate_types array an element was output into the keyTypes array. For unknown values of certificate_type, a null was output. This CL fixes the issue by ignoring unknown values in certificate_types array. Bug: 18414726 Change-Id: I8565e19a610c0ecfb7cab1b7707c335e0eeb8d89/"
,,0.2485,conscrypt,"Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/"
,,0.2405,conscrypt,"Convert EVP_MD_CTX to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. Bug: 16656908 Change-Id: I165e041a8fe056770d6ce6d6cd064c411575b7c4/"
,,0.262,conscrypt,"Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/"
,,0.2545,conscrypt,"Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/"
,,0.2819,conscrypt,"Declare which keys Conscrypt accepts. This declares constraints on which keys Cipher, KeyAgreement, Mac, and Signature instances provided by Conscrypt accept. Constraints are expressed using JCAs SupportedKeyClasses and SupportedKeyFormats attributes. Declaring these contraints will make JCA use other providers for keys not supported by Conscrypt. This in turn removes the need of users of JCA to explicitly specify which provider to use. This looks messy mostly because of how the JCAs constraining mechanism works. Some of the weirdness and messiness also comes from the inconsistencies in how Conscrypt handles different key types in different primitives. Once these inconsistencies are fixed, this change will become smaller and a bit nicer. See Bug: 19284418 Change-Id: I7e862a620d7279e4eaf6e42acd9072e7be665024/Remove SSLv3 from default protocols list for TLS SSLv3 has some systemic problems demonstrated by the POODLE attack. Disable it by default when ""TLS"" is requested since the documentation in Java Standard Names allows us to not support SSL when TLS is requested. Bug: 17136008 Change-Id: Icad1639c7e33b6e495f452a5289b0d20b819d679/"
,,0.5553,conscrypt,"external/conscrypt: add NativeConstants. NativeConstants.java is generated by a C program and thus the values will automatically be kept in sync with the contents of the OpenSSL headers. Bug: 20521989 Change-Id: Ib5a97bf6ace05988e3eef4a9c8e02d0f707d46ad/Enable any opaque private keys to be used with TLS/SSL stack. Prior to this CL, opaque private keys those that do not expose/export their key material were not supported by Conscrypts SSLSocket, SSLServerSocket and SSLEngine implementations if the keys were backed by other providers. This CL fixes this issue. Conscrypts TLS/SSL stack now works with arbitrary opaque private keys provided that: * for EC private key: an installed implementation of NONEwithECDSA Signature accepts the key for signing; and * for RSA private key: an installed implementation of NONEwithRSA Signature accepts the key for signing and an installed implementation of RSA/ECB/PKCS1Padding Cipher accepts the key for decryption. This normally requires that the JCA Provider which produced the PrivateKey instance expose the above Cipher transformation and Signature algorithms. HOW THIS WORKS The underlying OpenSSL TLS/SSL stack uses the provided private keys only to decrypt and sign. For opaque private keys these requests are delegated (same as before, via CryptoUpcalls) to corresponding Cipher (RSA/ECB/PKCS1Padding) and Signature (NONEwithRSA or NONEwithECDSA) implementations. Even when signing and decryption is outsourced, OpenSSL still needs the modulus (for RSA) and order (for EC), supposedly to estimate output size of signing or decryption operations. This information is not available via the PrivateKey interface. However, an opaque private key may still implement the RSAKey or ECKey interface which provides access to modulus or order but does not provide access to key material. Moreover, in all use cases of private keys with Conscrypts TLS/SSL stack the modulus or order can be obtained and provided to OpenSSL. In the case of private keys used for client or server authentication, the public key of the certificate is used as the source of the information. In the case of TLS Channel ID, the order is currently fixed and known (only NIST P-256 is supported). Bug: 19284418 Change-Id: I8fea2492f9cf48cfc29c3e7d2ee99a68e84e82ec/SSLParametersImpl: make some methods public To help with testing, make some of the methods public so we can call them from tests in a different ClassLoader. Bug: 19657440 Change-Id: Ib5cb0629ffb52ac57ff24d9d5c4df1509897bd05/"
,,0.091,conscrypt,"Make methods public for testing. When run under CTS, the implementation will be in a different classloader than the test. Change-Id: I657fd2541ec6721e032581de14bf45c3efa40a6e/"
,,0.5666,conscrypt,"Enable any opaque private keys to be used with TLS/SSL stack. Prior to this CL, opaque private keys those that do not expose/export their key material were not supported by Conscrypts SSLSocket, SSLServerSocket and SSLEngine implementations if the keys were backed by other providers. This CL fixes this issue. Conscrypts TLS/SSL stack now works with arbitrary opaque private keys provided that: * for EC private key: an installed implementation of NONEwithECDSA Signature accepts the key for signing; and * for RSA private key: an installed implementation of NONEwithRSA Signature accepts the key for signing and an installed implementation of RSA/ECB/PKCS1Padding Cipher accepts the key for decryption. This normally requires that the JCA Provider which produced the PrivateKey instance expose the above Cipher transformation and Signature algorithms. HOW THIS WORKS The underlying OpenSSL TLS/SSL stack uses the provided private keys only to decrypt and sign. For opaque private keys these requests are delegated (same as before, via CryptoUpcalls) to corresponding Cipher (RSA/ECB/PKCS1Padding) and Signature (NONEwithRSA or NONEwithECDSA) implementations. Even when signing and decryption is outsourced, OpenSSL still needs the modulus (for RSA) and order (for EC), supposedly to estimate output size of signing or decryption operations. This information is not available via the PrivateKey interface. However, an opaque private key may still implement the RSAKey or ECKey interface which provides access to modulus or order but does not provide access to key material. Moreover, in all use cases of private keys with Conscrypts TLS/SSL stack the modulus or order can be obtained and provided to OpenSSL. In the case of private keys used for client or server authentication, the public key of the certificate is used as the source of the information. In the case of TLS Channel ID, the order is currently fixed and known (only NIST P-256 is supported). Bug: 19284418 Change-Id: I8fea2492f9cf48cfc29c3e7d2ee99a68e84e82ec/Fix a NullPointerException in CryptoUpcalls. When RSA/ECB/PKCS1Padding is not supported, CryptoUpcalls.rawCipherWithPrivateKey throws a NullPointerException instead of returning null. This CL fixes the issue. Change-Id: I46a389f22e40084950b80b9825644f2e1ffcff90/Clean up CryptoUpcalls. These are minor code structure clean ups based on comments from Change-Id: I66c2cbdb489db47167ae6cfb4df7b82b3f621e2d/"
,,0.1315,conscrypt,"OpenSSLCipher: add AEAD cipher This allows us to provide an implementation of AES-GCM using the new EVP_AEAD interface in BoringSSL. It simply buffers up the input until doFinal(...) is called which makes it much safer than any streaming interfaces, because the caller cant use the plaintext until its authenticated by the GHASH (or whatever other AEAD you happen to use). Bug: 20636336 Change-Id: I6e4b063a8137a16102b1f6ac15687a38ddfe1691/OpenSSLCipher: refactor in preparation for AEAD BoringSSL uses a different interface for AEAD that is much simplier called EVP_AEAD. Separate out the EVP_CIPHER usage so that we can have another subclass with the EVP_AEAD usage. Bug: 20636336 Change-Id: I661d92bd449f2fcc3c4a6e511155490917ecef0c/"
,,0.0987,conscrypt,"Switch OpenSSLMac from EVP_PKEY_HMAC to HMAC_CTX. EVP_PKEY_HMAC is just a wrapper over HMAC_CTX, so this is slightly more efficient. This is also the last consumer of BoringSSLs EVP_PKEY_HMAC, so the API may be removed after this. Change-Id: I545914b429b23631efd3cacaa22c6d2e7d165fab/"
,,0.5682,conscrypt,"Fix RSA upcalls from TLS/SSL into JCA. When BoringSSL/OpenSSL TLS/SSL stack operates on opaque private keys (those that dont expose their key material) it upcalls (via Conscrypts NativeCrypto) into corresponding JCA Signature and Cipher primitives. This CL fixes two issues with RSA-related upcalls, which prevented the use of opaque RSA private keys for TLS/SSL with Conscrypt backed by BoringSSL: * RSA sign was upcalled into RSA Cipher decrypt using private key. In JCA, the correct upcall is RSA Signature sign. This is now invoked instead of RSA Cipher decrypt. * RSA decrypt was not implemented. Its now implemented. As part of implementing RSA decrypt upcall from BoringSSL, it transpired that BoringSSL requests no padding as opposed to OpenSSL which requests PKCS#1 padding. As a result, this CL modifies the decrypt upcall to take a padding parameter. The implementation of the upcall (see CryptoUpcalls.java) now supports PKCS#1 padding scheme, OAEP padding scheme, and no padding. This CL also drops the encrypt/decrypt flag from the RSA encrypt/decrypt upcall and simplies it into an RSA decrypt upcall. RSA encrypt upcall is not needed at all. (cherry-picked from commit 279e98451390d0a90c5fc04eac7ddd4045180465) Bug: 21738458 Change-Id: I075aa74e4cd89dd3ceab99f728ce371c7bc89cf0/Try to get preferred external provider When using an opaque key, try to honor the systems preferred provider which is selected via late binding. If its not found, try to find the first provider that initializes correctly with the given key. Bug: 21737886 Change-Id: I17483136aa5c1c5e474109525aefac9facaf7379/Fix RSA upcalls from TLS/SSL into JCA. When BoringSSL/OpenSSL TLS/SSL stack operates on opaque private keys (those that dont expose their key material) it upcalls (via Conscrypts NativeCrypto) into corresponding JCA Signature and Cipher primitives. This CL fixes two issues with RSA-related upcalls, which prevented the use of opaque RSA private keys for TLS/SSL with Conscrypt backed by BoringSSL: * RSA sign was upcalled into RSA Cipher decrypt using private key. In JCA, the correct upcall is RSA Signature sign. This is now invoked instead of RSA Cipher decrypt. * RSA decrypt was not implemented. Its now implemented. As part of implementing RSA decrypt upcall from BoringSSL, it transpired that BoringSSL requests no padding as opposed to OpenSSL which requests PKCS#1 padding. As a result, this CL modifies the decrypt upcall to take a padding parameter. The implementation of the upcall (see CryptoUpcalls.java) now supports PKCS#1 padding scheme, OAEP padding scheme, and no padding. This CL also drops the encrypt/decrypt flag from the RSA encrypt/decrypt upcall and simplies it into an RSA decrypt upcall. RSA encrypt upcall is not needed at all. Bug: 21738458 Change-Id: I2a4610890ea1ed1a2e99eb1d5c34348fbf406e54/"
,,0.0877,conscrypt,"Verify certificate transparency on domain for which it is enabled. For the time being, CT is enabled by using Java security properties. This makes it possible to deploy it without updating Androids frameworks through GMSCore. Change-Id: Iff9646b7d80f1386965b2b4f4f46a9d80c780a58/"
,,0.4693,conscrypt,"Speed up digesting by avoiding unnecessary operations. Conscrypts MessageDigest implementations at the end of computing a digest create and initialize a new EVP_MD_CTX and then also intialize the digest struct there. This is done because the MessageDigest instance could be reused for a new digesting session. This change implements three optimizations: 1. MessageDigestSpi now reuses its EVP_MD_CTX instead of creating a new one for each new digesting session. 2. MessageDigestSpi now defers the initialization of the digest struct in EVP_MD_CTX till the first invocation of engineUpdate/engineDigest. 3. MessagDigestSpi (and SignatureSpi) no longer invoke EVP_MD_CTX_init after EVP_MD_CTX_create because EVP_MD_CTX_create initializes the EVP_MD_CTX it creates. libcores MessageDigestBenchmark on Nexus 5 shows: * 10-15% faster performance for a single digest of 8192 bytes. * 15-20% faster performance for reusing a MessageDigest instance to compute a digest of 8192 bytes ten times. Change-Id: I8a0697310ef7efcd4db6870e54eb46102fd4a941/Revert ""Speed up digesting by avoiding unnecessary operations."" This reverts commit 5041dd13c9499e4154436ef1f105a3d5d46caa19. This change broke a libcore test: org.apache.harmony.security.tests.java.security.DigestInputStream2Test#test_onZ java.lang.RuntimeException: Unable to copy EVP_MD_CTX at com.android.org.conscrypt.NativeCrypto.EVP_MD_CTX_copy(Native Method) at com.android.org.conscrypt.OpenSSLMessageDigestJDK.clone(OpenSSLMessageDigestJDK.java:200) at java.security.MessageDigest$MessageDigestImpl.clone(MessageDigest.java:428) at org.apache.harmony.security.tests.java.security.DigestInputStream2Test.test_onZ(DigestInputStream2Test.java:62) org.apache.harmony.security.tests.java.security.DigestInputStream2Test#test_onZ FAIL (EXEC_FAILED) Change-Id: Ib925bc0aadb633bbad4240f1d52bdb6676afc56f/Speed up digesting by avoiding unnecessary operations. Conscrypts MessageDigest implementations at the end of computing a digest create and initialize a new EVP_MD_CTX and then also intialize the digest struct there. This is done because the MessageDigest instance could be reused for a new digesting session. This change implements two optimizations: 1. MessageDigestImpl instance now reuses its EVP_MD_CTX instead of creating a new one for each new digesting session. 2. MessageDigestImpl instance now defers the initialization of the digest struct in EVP_MD_CTX till the first invocation of engineUpdate/engineDigest. libcores MessageDigestBenchmark on Nexus 5 shows: * 10-15% faster performance for a single digest of 8192 bytes. * 15-20% faster performance for reusing a MessageDigest instance to compute a digest of 8192 bytes ten times. Change-Id: I0e476381321127642315355f848a1ba90114fe7d/Zero-copy digesting for direct ByteBuffer input. Prior to this change, Conscrypts MessageDigest.update(ByteBuffer) invoked for a direct ByteBuffer resulted in the creation of a new byte[] of size ByteBuffer.remaining() and the copying of the ByteBuffers contents into that array. This change implements an optimization which avoids the allocation and copying, by making BoringSSL EVP_DigestUpdate read directly from the memory region represented by the direct ByteBuffer. Change-Id: I112d318128402d1d78e226df9dfe54af55955953/"
,,0.1234,conscrypt,"Zero-copy HMAC and signing/verification for direct ByteBuffer. Prior to this change, Conscrypts Mac and Signature implementations copied the contents of direct ByteBuffer inputs. This change implements an optimization which avoids the allocation and copying of contents of direct ByteBuffer inputs. Bug: 24674857 Change-Id: I1436839182483fd42318d4b0af4d633283e3453d/"
,,0.1276,conscrypt,"Remove java.lang.IntegralToString usage. java.lang.IntegralToString is going away, replaced its usage by small helper class, Hex. + Fixes the ""Illegal class access"" exception from TrustedCertificateStoreTest & TrustManagerImplTest. (cherry-picked from 61e984f441b9194f0ae907e6fc28502858df6852 + 61e984f441b9194f0ae907e6fc28502858df6852) Bug: 24932279 (cherry picked from commit e279a9854d15d20a0b3807fe96f0805b43cd4dae) Change-Id: Id48cd9c2dfade328f01c669afa20fe2e7a630fc2/"
,,0.1169,conscrypt,"Compare keys using encoded form as a fallback PublicKey.equals is not required to return true on the same public key but from different providers, this causes incorrect lookup failures when the key comes from keystore. Change-Id: Iaedaa91c64eeede1d5021430c015aac746afbc97/"
,,0.1241,conscrypt,"Remove java.lang.IntegralToString usage. java.lang.IntegralToString is going away, replaced its usage by small helper class, Hex. + Fixes the ""Illegal class access"" exception from TrustedCertificateStoreTest & TrustManagerImplTest. (cherry-picked from 61e984f441b9194f0ae907e6fc28502858df6852 + 61e984f441b9194f0ae907e6fc28502858df6852) Bug: 24932279 (cherry picked from commit e279a9854d15d20a0b3807fe96f0805b43cd4dae) Change-Id: Id48cd9c2dfade328f01c669afa20fe2e7a630fc2/"
,,0.4017,conscrypt,"Use SSL_session_reused to check when a session was reused The returned session_id could be exactly the same in the case of TLS session tickets, so use the SSL_session_reused API to determine exactly when a session was reused. Bug: 28751153 Change-Id: Ie82e4d1bb326d7e7deb7981a1e57df393f6c0e1f/Wrap cached sessions before returning SSLSession should be wrapped so that cached sessions might have the functionality that ExtendedSSLSession offers. This also made the SSLSessionTest fail because the pre-cached instance would be ExtendedSSLSession and the post-cached session would be a regular SSLSession. To keep compatibility with older versions of the platform, it was impossible to directly switch OpenSSLSessionImpl over to ExtendedSSLSession. So the use of a delegate in the case when the platform does have ExtendedSSLSession was required. Since older platform versions still use OpenSSLSessionImpl that extends SSLSession, we just directly inflate the serialized sessions to that. The SSLSessionTest was changed to accomodate the delegate scheme since SSLSession does not have an equals method, the tests for SSLSessionTest were directly comparing object instance equality which fails when the sessions are wrapped in a delegate like this. (cherry picked from commit 710c0817a2a13135b35f14faaef5ca069daf7b6c) Bug: 27123298 Change-Id: Iefbea03a72dbcc76ae0b439cfdcecd817926b7d0/"
,,0.1396,conscrypt,Return an empty list when no OCSP reponses received Change OpenSSLSessionImpl#getStatusResponses() to return an empty list instead of null. This matches the assumption of the serializing code in AbstractSessionContext. Add a test to make sure that serializing a trivial OpenSSLSessionImpl instance completes without throwing an exception. Test: cts-tradefed run cts android.core.tests.libcore.package.conscrypt Bug: 30751283 Change-Id: If4c3e6a99c080fb3a0fd527c86a5ee8972475718/
,,0.2054,conscrypt,Return an empty list when no OCSP reponses received Change OpenSSLSessionImpl#getStatusResponses() to return an empty list instead of null. This matches the assumption of the serializing code in AbstractSessionContext. Add a test to make sure that serializing a trivial OpenSSLSessionImpl instance completes without throwing an exception. Test: cts-tradefed run cts android.core.tests.libcore.package.conscrypt Bug: 30751283 Change-Id: If4c3e6a99c080fb3a0fd527c86a5ee8972475718/Use OCSP-stapled responses in TrustManagerImpl Test: vogar host \ out/host/common/obj/JAVA_LIBRARIES/core-tests-support-hostdex_intermediates/classes.jack \ out/host/common/obj/JAVA_LIBRARIES/core-tests-hostdex_intermediates/classes.jack \ libcore/luni/src/test/java/libcore/javax/net/ssl/*Test.java Change-Id: I45762ab463be7aebea848387677d0fa8f92424bd/
,,0.1461,conscrypt,Add implementation of OpenSSLSocket that uses OpenSSLEngineImpl Use above class of wrapped socket does not have a file descriptor OpenSSLEngine now exposes ALPN state Enable use of PrivilegedAction to load .so Created by MOE: MOE_MIGRATED_REVID=123899267/
,,0.3114,conscrypt,"Improve performance of OpenSSLEngine Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I947bd3701e90bd65104f8f5c07ba218c4e051944/Strip out SSLv3 from enabled protocols for app compat HttpsURLConnection on Android before Marshmallow tried to setEnabledProtocols with just ""SSLv3"" without checking if it was a supported protocol. Instead of throwing IllegalArgumentException when the unsupported protocol is encountered, strip it out and later throw an SSLHandshakeException if no protocols are enabled. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Bug: 32053327 Bug: 30977793 Change-Id: I2f2008d85fcc5b5fbdc71722a3d6e0a9c22bfbc2/Move CT to platform/ This moves the CT code from main to platform and the checking from OpenSSLSocketImpl to TrustManagerImpl. Theres still some plumbing that needs to be done in main to store the TLS extension data so TrustManagerImpl can get it. Test: Run OpenSSLSocketImplTest, verified network connections still work Change-Id: I643db4668cbec2d1bb221156c5844667ae8701c8/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/"
,,0.102,conscrypt,Consolidate EVP_MD references to one place There were several places where EVP_get_digestbyname was being called for the same data. Consolidate these all down to one place so there is no need to call it several times in the same program. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: Ib3f8b678c775e74eb5edaabde42f042d7b4eac95/
,,0.1389,conscrypt,"Track changes to the CT log format Logs are now stored in /data/misc/keychain/ct_trusted_logs/current/ and use \n as a delimiter instead of ,. Bug: 28746284 (cherry picked from commit 788bf530ca321a5d41d546b6888b62c5dc6ad193) Change-Id: Ib4037cee75fbf96ae6b1c6a1b50952221c22c7be/Fix imports globally Ran script to fix imports globally on all .java files. Committing results. Test: mmma external/conscrypt Change-Id: I6cd19c0f3dc66c8dcaec3c92a6019b4c0154e9e4/"
,,0.0941,conscrypt,Adding all factory methods for engine socket. (#192) Also properly throwing SSLHandshakeException in some cases. Fixes OpenSSLSocketImplTest to cover both socket types (#182)/
,,0.1352,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes OCSP and SCTs on the SSL, not SSL_CTX. As Conscrypt is currently set up, one SSL_CTX (owned, ultimately, by the SSLContext) may correspond to multiple SSLParameters which, in the Java API, are configured on the SSLSocket or SSLEngine directly. Thus we should use the SSL versions of the APIs which now exist. This avoids mutating an SSL_CTX which may be shared by multiple SSLs with different configurations. Change-Id: I19485c316087004c6050d85520b0169f2ca0d493/"
,,0.1794,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes top-level Conscrypt class (#152) This is a one-stop-shop for creating and configuring Conscrypt types. It allows a standard way for configuring extended settings that are not currently supported by the standard Java APIs./Configure OCSP and SCTs on the SSL, not SSL_CTX. As Conscrypt is currently set up, one SSL_CTX (owned, ultimately, by the SSLContext) may correspond to multiple SSLParameters which, in the Java API, are configured on the SSLSocket or SSLEngine directly. Thus we should use the SSL versions of the APIs which now exist. This avoids mutating an SSL_CTX which may be shared by multiple SSLs with different configurations. Change-Id: I19485c316087004c6050d85520b0169f2ca0d493/Adding conversion utility ALPN protocols (#140) Exposing additional set methods in OpenSSLEngineImpl and OpenSSLSocketImpl to allow the caller to set the ALPN protocols without having to manually encode. Also simplifying the exposure of the maxSealOverhead value./"
,,0.107,conscrypt,"Implement X509Certificate.verify(PublicKey, Provider). Removed NoSuchProvider from verifyOpenSSL(OpenSSLKey pkey), native code underneath doesnt throw it. Changed unblundled version to current to fix the breakage due to missing verify method in earlier API. (cherry picked from commit f881571464b8b989d000fcd33846ae2a653fb2cf) Test: CtsLibcoreTestCases Bug: 31294527 Change-Id: Ide755ccc0ad1163ac8dafc9bce762f680671a488/"
,,0.2312,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes SSLUtils public for testing but On Android the class-under-test is going to be in the bootclasspath ClassLoader, but the test-class will be in the ""app"" ClassLoader. This means that you cant directly test package-scoped classes or methods. Make this public so we can test it on Android, but marked so it doesnt end up in the Javadocs. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I127693e1092fa9016c4a5d89218cc8de0c3421a5/Adding conversion utility ALPN protocols (#140) Exposing additional set methods in OpenSSLEngineImpl and OpenSSLSocketImpl to allow the caller to set the ALPN protocols without having to manually encode. Also simplifying the exposure of the maxSealOverhead value./Less restrictive output buffer size in wrap() (#114) We currently require that the output buffer be >= MAX_PACKET_SIZE. This is needlessly strict and causes the Netty tests to fail, since they only use 2k buffers. This PR copies over some of the recent changes from Netty to handle this properly./"
,,0.2928,conscrypt,"Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes fixes for the engine-based socket. (#202) This allows the SSLSocketTest to pass with the engine-based socket enabled. Also restructuring the inheritance hierarchy so that the FD and engine sockets both behave the same way (both either wrappers or not). The restructure involves the following: AbstractConscryptSocket: New base class for both sockets. It handles the wrap/no-wrap logic. OpenSSLSocketImplWrapper: deleted and replaced by AbstractConscryptSocket. OpenSSLSocketImpl: reduced to a public shim class between AbstractConscryptSocket and the implementations. For backward-compat only. ConscryptFileDescriptorSocket: Renamed from OpenSSLSocketImpl. The old FD socket./"
,,0.2662,conscrypt,"Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes Caliper benchmarks for running on Android devices (#10). (#278) Netty tcnative doesnt work on ARM, so we split out the Netty-dependent benchmark portions into benchmark-openjdk and put non-Netty versions in benchmark-android. The gradle operations required to execute the benchmarks on devices are ugly, but they appear to work. This might get better some time in the future with improved Caliper support for Android. This only includes the time-based benchmarks, not the throughput-based ones, since those will require some more modifications to work in Caliper and these at least get us started./Expanding benchmarks. (#239) Including benchmarks for: handshake Nettys OPENSSL_REFCNT provider Partial fix for: Handshake benchmarks show conscrypt may have some work to do, but its not clear yet how much of the cost is creation of the engines. ``` Benchmark (a_cipher) (b_buffer) (c_engine) Mode Cnt Score Error Units JmhEngineHandshakeBenchmark.hs TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 HEAP JDK thrpt 10 162.348 ± 10.382 ops/s JmhEngineHandshakeBenchmark.hs TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 HEAP CONSCRYPT_UNPOOLED thrpt 10 716.748 ± 102.178 ops/s JmhEngineHandshakeBenchmark.hs TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 HEAP CONSCRYPT_POOLED thrpt 10 742.854 ± 150.313 ops/s JmhEngineHandshakeBenchmark.hs TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 HEAP NETTY thrpt 10 1236.226 ± 9.631 ops/s JmhEngineHandshakeBenchmark.hs TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 HEAP NETTY_REF_CNT thrpt 10 1199.334 ± 97.748 ops/s JmhEngineHandshakeBenchmark.hs TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 DIRECT JDK thrpt 10 163.654 ± 9.940 ops/s JmhEngineHandshakeBenchmark.hs TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 DIRECT CONSCRYPT_UNPOOLED thrpt 10 755.786 ± 142.212 ops/s JmhEngineHandshakeBenchmark.hs TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 DIRECT CONSCRYPT_POOLED thrpt 10 755.845 ± 135.823 ops/s JmhEngineHandshakeBenchmark.hs TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 DIRECT NETTY thrpt 10 1247.186 ± 9.735 ops/s JmhEngineHandshakeBenchmark.hs TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 DIRECT NETTY_REF_CNT thrpt 10 1217.178 ± 79.153 ops/s ```/Refactoring benchmarks. (#233) Adding a set of base benchmarks that are framework agnostic. This will allow us to extend them to support caliper or JMH. We dont want to mix/match caliper and JMH in the same code because Android can now support caliper, but not JMH./"
,,0.0917,conscrypt,"Fix a bunch of warnings. (#254) Removes unused variables, fixes cases of non-final ALL_CAPS_VARS, removes wildcard import./Various fixes to the Conscrypt engine. (#201)/"
,,0.066,conscrypt,Add availability checks (#216) Fixes fixes to the Conscrypt engine. (#201)/
,,0.2864,conscrypt,Conformance fixes for the engine-based socket. (#202) This allows the SSLSocketTest to pass with the engine-based socket enabled. Also restructuring the inheritance hierarchy so that the FD and engine sockets both behave the same way (both either wrappers or not). The restructure involves the following: AbstractConscryptSocket: New base class for both sockets. It handles the wrap/no-wrap logic. OpenSSLSocketImplWrapper: deleted and replaced by AbstractConscryptSocket. OpenSSLSocketImpl: reduced to a public shim class between AbstractConscryptSocket and the implementations. For backward-compat only. ConscryptFileDescriptorSocket: Renamed from OpenSSLSocketImpl. The old FD socket./
,,0.1652,conscrypt,"Fix SSLSessionTest flakiness. connect never waited for the futures to resolve./Fetch the peer certificates if necessary when handshake completes. (#256) When BoringSSL resumes a session, it doesnt call cert_verify_callback because it presumes the certs were verified on previous calls, so we need to fetch them explicitly in that case. Also adds a test that a resumed session has proper certs./"
,,0.0843,conscrypt,Customize default provider name based on platform (#314) Fixes
,,0.0737,conscrypt,Support renegotiation with sockets (#321) Fixes Fixes
,,0.1326,conscrypt,"Specify all TLS versions 1.0-1.2. (#360) If you specify a set of TLS versions with a gap in them, all versions above the gap are ignored, because the TLS protocol actually only includes a single number (the highest protocol version thats allowable). So the current version was specifying TLS 1.0 only. This fixes it to use whatever version is the highest available./Support renegotiation with sockets (#321) Fixes Fixes"
,,0.0859,conscrypt,Support renegotiation with sockets (#321) Fixes Fixes
,,0.0833,conscrypt,Add missing Java 9 methods for ALPN (#339) Fixes
,,0.1835,conscrypt,"Implement ChaCha20 support. (#356) Adds Cipher, KeyGenerator, and AlgorithmParameters for ChaCha20. Main changes are in OpenSSLCipher$EVP_AEAD. Refactored so the GCM- specific portions are all in the GCM subclass and the generic AEAD portions (such as not allowing reuse of key/IV combinations) are in the superclass. Also updates so that calling Cipher.init() on an instance of AES/GCM/NoPadding with a GCM AlgorithmParameters will pick up the values from the AlgorithmParameters (previously, it would only work with GCMParameterSpec or something convertable to IvParameterSpec)./"
,,0.0863,conscrypt,More finalization safety. (#410) This updates OpenSSLX509Certificate and OpenSSLX509CRL in the same way as NativeSsl was done previously./
,,0.4354,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.4386,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.4407,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.0843,conscrypt,More finalization safety. (#410) This updates OpenSSLX509Certificate and OpenSSLX509CRL in the same way as NativeSsl was done previously./
,,0.2654,conscrypt,"Move session value API into ProvidedSessionDecorator. (#389) * Move session value API into ProvidedSessionDecorator. The application-level value API on SSLSession objects makes them mutable, which means that using singleton objects (like we do with SSLNullSession) or swapping out implementations (like we do with ActiveSession/SessionSnapshot) doesnt work properly if you actually want to use this API. By moving it into ProvidedSessionDecorator, it can be used without any of these problems. * Rename ProvidedSessionDecorator to ExternalSession./"
,,0.4322,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.0863,conscrypt,More finalization safety. (#410) This updates OpenSSLX509Certificate and OpenSSLX509CRL in the same way as NativeSsl was done previously./
,,0.5038,conscrypt,"Move session value API into ProvidedSessionDecorator. (#389) * Move session value API into ProvidedSessionDecorator. The application-level value API on SSLSession objects makes them mutable, which means that using singleton objects (like we do with SSLNullSession) or swapping out implementations (like we do with ActiveSession/SessionSnapshot) doesnt work properly if you actually want to use this API. By moving it into ProvidedSessionDecorator, it can be used without any of these problems. * Rename ProvidedSessionDecorator to ExternalSession./Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.128,conscrypt,"Add tests for classes in java.security. (#434) These tests are pulled from AOSP with minor modifications. They test the behavior of the CertificateFactory, MessageDigest, and Signature classes, as well as a bunch of varieties of AlgorithmParameterGenerator, AlgorithmParameters, KeyFactory, and KeyPairGenerator classes for all installed providers (which includes Conscrypt when run under the ConscryptSuite). As usual, Ive adapted them to JUnit4, removed the tests for the classes themselves and the provider framework, and made them work under OpenJDK as well as Android. The quality of these tests is again variable, but that can be improved once theyre in and running./"
,,0.0669,conscrypt,"Use the Conscrypt provider name in StandardNames (#435) This makes it easier to run the tests in environments where the provider name is different from the default, since only the one reference in StandardNames needs to be updated./"
,,0.2407,conscrypt,"Fix NPE from closed SSLEngine. (#499) When calling wrap() on a closed SSLEngine instance, we check to see if anything is already pending to be written, but the native BIO will already have been freed, so the native code threw NullPointerException. Check for it being already freed when looking for pending data and just return zero in that case. Also sets the bio pointer to 0 before freeing it and and marks it as volatile to reduce the chances of any weird race conditions, though the locking in ConscryptEngine should already make these impossible. Fixes netty/netty#7988./Add support for token binding and EKM. (#445) Token binding allows higher-level protocols to bind their higher-level authentication tokens to their TLS sessions, making it more difficult for attackers to present those higher-level tokens in a future session. At the TLS level, all that needs to occur is a parameter negotiation, the rest of the token binding protocol is left up to the caller. Parameter options are specified as integers, and I decided not to supply constants for the currently-defined values. This is a niche enough use case that any user of it should be able to decide what values they want to support (and will want to share constants with whatever higher-level protocol theyre using with token binding). BoringSSL also doesnt supply constants for these values, so were in good company there. Keying material exporting (aka EKM, for exported keying material) is specified in RFC 5705, and is necessary for implementing token binding as well as other protocols./"
,,0.138,conscrypt,"Remove SHA-2 CBC cipher suites. (#484) We automatically pull our supported set of cipher suites from BoringSSL, and they removed support for these in"
,,0.4272,conscrypt,"Support TLS 1.3 (#524) Enables support for negotiating TLS 1.3. TLS 1.3 is not enabled unless SSLContext.TLSv1.3 is requested or setEnabledProtocols() is called with a set of values that includes TLSv1.3. Detailed changes: Adds protocol constants for TLS 1.3, and provides SSLContext.TLSv1.3, which has TLS 1.3 enabled by default. Adjusts cipher suite code for TLS 1.3 suites. When enabled, all TLS 1.3 cipher suites are always returned from supportedCipherSuites() and enabledCipherSuites(). Attempts to customize TLS 1.3 cipher suites in setEnabledCipherSuites() are ignored. Splits {SSLEngine,SSLSocket}Test into version-dependent and version-independent tests. The latter remain in {SSLEngine,SSLSocket}Test and the former move into new files {SSLEngine,SSLSocket}VersionCompatibilityTest, which are parameterized to test all combinations of client and server on TLS 1.2 and TLS 1.3. Remove a pile of RI-specific TLS-related expectation declarations from StandardNames. We dont actually verify the behavior of the RI at any point, so it was just making the code more confusing. Fixes"
,,0.3918,conscrypt,"Support TLS 1.3 (#524) Enables support for negotiating TLS 1.3. TLS 1.3 is not enabled unless SSLContext.TLSv1.3 is requested or setEnabledProtocols() is called with a set of values that includes TLSv1.3. Detailed changes: Adds protocol constants for TLS 1.3, and provides SSLContext.TLSv1.3, which has TLS 1.3 enabled by default. Adjusts cipher suite code for TLS 1.3 suites. When enabled, all TLS 1.3 cipher suites are always returned from supportedCipherSuites() and enabledCipherSuites(). Attempts to customize TLS 1.3 cipher suites in setEnabledCipherSuites() are ignored. Splits {SSLEngine,SSLSocket}Test into version-dependent and version-independent tests. The latter remain in {SSLEngine,SSLSocket}Test and the former move into new files {SSLEngine,SSLSocket}VersionCompatibilityTest, which are parameterized to test all combinations of client and server on TLS 1.2 and TLS 1.3. Remove a pile of RI-specific TLS-related expectation declarations from StandardNames. We dont actually verify the behavior of the RI at any point, so it was just making the code more confusing. Fixes"
,,0.0738,conscrypt,Add API to get Conscrypt version (#541) Libraries like OkHttp want to be able to check what version of Conscrypt is available before attempting to enable new features (like TLS 1.3). Add a simple API to check what version of Conscrypt is being used. Fixes
,,0.4174,conscrypt,"Support TLS 1.3 (#524) Enables support for negotiating TLS 1.3. TLS 1.3 is not enabled unless SSLContext.TLSv1.3 is requested or setEnabledProtocols() is called with a set of values that includes TLSv1.3. Detailed changes: Adds protocol constants for TLS 1.3, and provides SSLContext.TLSv1.3, which has TLS 1.3 enabled by default. Adjusts cipher suite code for TLS 1.3 suites. When enabled, all TLS 1.3 cipher suites are always returned from supportedCipherSuites() and enabledCipherSuites(). Attempts to customize TLS 1.3 cipher suites in setEnabledCipherSuites() are ignored. Splits {SSLEngine,SSLSocket}Test into version-dependent and version-independent tests. The latter remain in {SSLEngine,SSLSocket}Test and the former move into new files {SSLEngine,SSLSocket}VersionCompatibilityTest, which are parameterized to test all combinations of client and server on TLS 1.2 and TLS 1.3. Remove a pile of RI-specific TLS-related expectation declarations from StandardNames. We dont actually verify the behavior of the RI at any point, so it was just making the code more confusing. Fixes"
,,0.1336,conscrypt,"Make OpenSSLBIOInputStream read as fully as possible (#587) Some of the callers of BIO APIs in BoringSSL (particularly the DER decoder) depend on the BIO read returning either a full buffer or an EOF, but InputStream allows returning less than the requested amount of data without hitting EOF. This causes the DER decoder to fail in some cases (specifically, weve seen it fail with overly large OCSP responses where the socket hasnt buffered the entire response before we try to decode it). Fix this by repeatedly calling read() until our output buffer is full or EOF is reached. Also add a test for decoding DER-encoded certs, we previously only tested PEM-encoded ones./Allow d2i_X509_bio and friends to not set an error (#552) BoringSSL recently changed so that d2i_X509_bio doesnt set an error in the error queue when it receives certain garbage inputs. We dont actually care what error is set in the queue (we just end up catching whatever is thrown and throwing CertificateException), so change to tolerate having no error in the queue./"
,,0.4243,conscrypt,"Support TLS 1.3 (#524) Enables support for negotiating TLS 1.3. TLS 1.3 is not enabled unless SSLContext.TLSv1.3 is requested or setEnabledProtocols() is called with a set of values that includes TLSv1.3. Detailed changes: Adds protocol constants for TLS 1.3, and provides SSLContext.TLSv1.3, which has TLS 1.3 enabled by default. Adjusts cipher suite code for TLS 1.3 suites. When enabled, all TLS 1.3 cipher suites are always returned from supportedCipherSuites() and enabledCipherSuites(). Attempts to customize TLS 1.3 cipher suites in setEnabledCipherSuites() are ignored. Splits {SSLEngine,SSLSocket}Test into version-dependent and version-independent tests. The latter remain in {SSLEngine,SSLSocket}Test and the former move into new files {SSLEngine,SSLSocket}VersionCompatibilityTest, which are parameterized to test all combinations of client and server on TLS 1.2 and TLS 1.3. Remove a pile of RI-specific TLS-related expectation declarations from StandardNames. We dont actually verify the behavior of the RI at any point, so it was just making the code more confusing. Fixes"
,,0.428,conscrypt,"Add SSLEngine ClientHello tests (#570) SSLSocket has had these tests for a while but theyve been missing from SSLEngine./Support TLS 1.3 (#524) Enables support for negotiating TLS 1.3. TLS 1.3 is not enabled unless SSLContext.TLSv1.3 is requested or setEnabledProtocols() is called with a set of values that includes TLSv1.3. Detailed changes: Adds protocol constants for TLS 1.3, and provides SSLContext.TLSv1.3, which has TLS 1.3 enabled by default. Adjusts cipher suite code for TLS 1.3 suites. When enabled, all TLS 1.3 cipher suites are always returned from supportedCipherSuites() and enabledCipherSuites(). Attempts to customize TLS 1.3 cipher suites in setEnabledCipherSuites() are ignored. Splits {SSLEngine,SSLSocket}Test into version-dependent and version-independent tests. The latter remain in {SSLEngine,SSLSocket}Test and the former move into new files {SSLEngine,SSLSocket}VersionCompatibilityTest, which are parameterized to test all combinations of client and server on TLS 1.2 and TLS 1.3. Remove a pile of RI-specific TLS-related expectation declarations from StandardNames. We dont actually verify the behavior of the RI at any point, so it was just making the code more confusing. Fixes"
,,0.1432,conscrypt,"Update Provider installation in tests (#629) Change CertPinManagerTest and CTVerifierTest to only install the provider if its not installed already and check if the provider was installed before uninstalling. Otherwise, when running on the Android platform they will uninstall the platform copy of Conscrypt and break every following test./"
,,0.1514,conscrypt,"Update Provider installation in tests (#629) Change CertPinManagerTest and CTVerifierTest to only install the provider if its not installed already and check if the provider was installed before uninstalling. Otherwise, when running on the Android platform they will uninstall the platform copy of Conscrypt and break every following test./Drop support for Java 6 (#606)/"
,,0.3273,conscrypt,"Make ConscryptEngineSocket call correct methods (#643) ConscryptEngineSocket uses an SSLEngine internally to function, and that naturally calls the SSLEngine-accepting methods on X509ExtendedTrustManager to do trust checks. We were passing our given trust manager directly to the SSLEngine, which resulted in an SSLSocket implementation that ended up calling SSLEngine-based methods, which isnt right. Instead, create a delegating trust manager that maps the calls to the correct objects. On platforms where X509ExtendedTrustManager isnt available, we can pass in the provided trust manager directly, since it doesnt receive a reference to the calling object. Also adds tests for getHandshakeSession() that ensure it functions in the middle of the handshake and provides properties that should be set./"
,,0.335,conscrypt,"Make ConscryptEngineSocket call correct methods (#643) ConscryptEngineSocket uses an SSLEngine internally to function, and that naturally calls the SSLEngine-accepting methods on X509ExtendedTrustManager to do trust checks. We were passing our given trust manager directly to the SSLEngine, which resulted in an SSLSocket implementation that ended up calling SSLEngine-based methods, which isnt right. Instead, create a delegating trust manager that maps the calls to the correct objects. On platforms where X509ExtendedTrustManager isnt available, we can pass in the provided trust manager directly, since it doesnt receive a reference to the calling object. Also adds tests for getHandshakeSession() that ensure it functions in the middle of the handshake and provides properties that should be set./"
,,0.335,conscrypt,"Make ConscryptEngineSocket call correct methods (#643) ConscryptEngineSocket uses an SSLEngine internally to function, and that naturally calls the SSLEngine-accepting methods on X509ExtendedTrustManager to do trust checks. We were passing our given trust manager directly to the SSLEngine, which resulted in an SSLSocket implementation that ended up calling SSLEngine-based methods, which isnt right. Instead, create a delegating trust manager that maps the calls to the correct objects. On platforms where X509ExtendedTrustManager isnt available, we can pass in the provided trust manager directly, since it doesnt receive a reference to the calling object. Also adds tests for getHandshakeSession() that ensure it functions in the middle of the handshake and provides properties that should be set./"
,,0.0737,frostwire,[common] Coding search engine instances inside new SearchManager2/
,,0.0778,frostwire,[common] Coding search engine instances inside new SearchManager2/
,,0.066,frostwire,"[android] MainApplication,MainActivity,NetworkManager async refactors/"
,,0.0702,frostwire,[common] one more regex detection for YT signature function name/
,,0.0648,frostwire,[desktop] Java 9 reflection deprecation warning fixed/
,,0.0643,frostwire,[android] NPE on FileListAdapter.getListItemView()/
,,0.0964,javacpp,* Fix broken `outputDirectory` property and corresponding `-d` command line option (issue * Add `Loader.extractResources()` and `cacheResources()` methods to extract or cache all resources with given name/
,,0.1023,javacpp,"* Provide `BytePointer` with value getters and setters for primitive types other than `byte` to facilitate unaligned memory accesses/Fix `totalProcessors()`, `totalCores()`, `totalChips()` methods on Android/ * Add portable and efficient `totalChips()` methods/ * Add portable and efficient `totalPhysicalBytes()`, `availablePhysicalBytes()`, `totalProcessors()`, and `totalCores()` methods/"
,,0.0744,jna,Moved arm files/
,,0.0556,jna,Many changes/
,,0.0534,jna,Many changes./
,,0.0599,jna,Many changes. Not quite there yet./
,,0.063,jna,Krestens closure work. Initial checkin./
,,0.0556,jna,Many changes. Not quite there yet./
,,0.0636,jna,Merge from libgcj. Merged patches from net. See ChangeLog for details./
,,0.0744,jna,fix varargs on ARM/Apply generic definitions wherever applicable/
,,0.066,jna,make Memory less restrictive git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0786,jna,Apply generic definitions wherever applicable/
,,0.0958,jna,Provide explicit dispose on NativeLibrary Cache NativeMappedConverter instances for improved performance Preliminary support for wince (improve backwards compatibility for older VMs) Provide synch after call interface for arguments that need to perform some sort of synchronization after a native call git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0776,jna,merge wince branch into master/structure alignment fixes for ARM/fix some more failing tests/add callback thread initializer/
,,0.1311,jna,avoid static field initialization bug/fix struct padding test on linux-arm/make arch handling more consistent; dont load Native class from Platform/
,,0.0723,jna,Exception chaining for com.sun.jna.Structure/
,,0.0665,jna,Fixes broken platform tests broken on OSX/
,,0.0859,jna,avoid static field initialization bug/
,,0.0855,jna,"include error string in LastErrorException, if available, update wince native/avoid crash with really long strings/add linux x86/amd64 natives, w64 native, fix w64 compiler warnings/"
,,0.091,jna,"accommodate long path names, fixes w32ce-arm natives/fix snprintf on windows/revise last error checking/fix library load error w/unicode/fix amd64 native thread cleanup test/add thread termination flags and checking/revise string encoding/"
,,0.092,jna,"Call Native.dispose when DLL unloaded/Fix compiler warnings on OSX, remove no-longer-supported JAWT operations from OSX/"
,,0.0702,jna,Apply generic definitions wherever applicable/
,,0.0862,jna,add ASL set compatibility to 1.6 by default tweak CreateProcessW definition avoid unicode errors in username on win32 (temp files)/GetLogicalProcessorInformation and associated structs/some fixed and extension for Variant date/
,,0.076,jna,down to two failing tests on w32ce-arm/Boolean.parseBoolean not available on wce/down to 24 failures (4 crashes) on w32ce-arm/enable callback threads on windows/functional detach switch from callback/initial callback behavior flags setup and test harness/
,,0.0676,jna,Fixes issue handle typemapper-returned String/WString with associated tests/avoid JVM hang when using native threads with callbacks/
,,0.0744,jna,Apply generic definitions wherever applicable/
,,0.0843,jna,make arch handling more consistent; dont load Native class from Platform/
,,0.0751,jna,search additional OSX paths/
,,0.0657,jna,make memory share public git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0798,jna,provide memory alignment to Memory if requested git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0769,jna,give FS more time to delete native lib git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/restrict installation of shudown hook git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add tests for library unloading and loading from jar git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0673,jna,Ensure TLS index is cleared after storage freed update w32 natives/
,,0.0577,jna,some util changes/some changes/
,,0.0577,jna,some changes/
,,0.0566,jna,require structure field order/
,,0.0917,jna,Fixed inheritance of LPVOID and simplified access to CoTaskMem*/Added Shell32.SHGetKnownFolderPath and corresponding constants/
,,0.0854,jna,"Make sure the Structure constructors are always chained in, so QueryInterface et al dont crash the whole JVM/"
,,0.0764,jna,some changes/some changes/some changes/some changes regarding typelib/
,,0.0639,jna,Added Shell32.SHGetKnownFolderPath and corresponding constants/
,,0.0599,jna,some changes/
,,0.1717,jna,Implement SAFEARRAY access Bind more functions from OleAut32.dll Fix bug in function bindings from OleAut32.dll (long vs. LONG) Ensure SAFEARRAY.rgsabound is completely accessible Modify Variant#getValue and Variant#setValue to allow flexible access to data Add object oriented helper methods to SAFEARRAY and move functionality from limited methods in OleAutoUtil to SAFEARRAY Add unittests based on windows search provider that excercise SAFEARRAY functions Added a helper for optimized conversion from SAFEARRAY to Object[] Closes
,,0.0765,jna,Apply generic definitions wherever applicable/
,,0.0673,jna,"Com might already initialized, its not a problem see"
,,0.1439,jna,"Remove COM initialization from object and enforce correct handling via asserts The custom thread instantiated in the c.s.j.p.w.C.util.ProxyObject and then used as a dispatch for COM calls is a bootleneck and not following COM convention. If COM is initialized for a thread as COINIT_MULTITHREADED there is no reason to force dispatch through a central thread and if it is COINIT_APARTMENTTHREADED a message queue is needed: The change introduced here removes the dispatcher thread and the initialization routines from COMBindingBaseObject. In their place asserts are placed, that enforce correct COM initialization. The tests were adjusted accordingly./"
,,0.0764,jna,updated some natives and bumped JNAs JNI major version in 2 files/
,,0.0724,jna,some changes/bug trapping code/some changes to find the bug/
,,0.2871,jna,"Remove unnecessary constructor and do general cleanup/Move callback invocation in c.s.j.p.w.C.util.CallbackProxy into calling thread Dispatching the invocation of the callback handler into an executor makes it impossible to fill [out] parameters, as the return has already happend and [in] parameters can not be savely used if they are not marshalled to java code because the calling code will free the parameters after the call. To prevent deadlocks ComThread is modified to allow COM calls from the callback by modifying the ComThread helper to only dispatch the COM call into the ComThread only if the calling thread has not COM already enabled. Reference counting was modified, so that now on construction of a ProxyObject the reference count is AddRefed once and Released once on finalization./"
,,0.1574,jna,"Make conversion to/from java in c.s.j.p.win32.COM.util more flexible ProxyObject and Callback both use the Convert class as helper to convert java object to/from VARIANT. This change adds more flexibility and adds tests to fixate and check conversion./VARIANT: Fix wrong asumptions, datatypes and add add unittests/Make (Un)marshalling context sensitive Depending on the context the unmarshalling of the supplied data in callbacks is unwrapped further than before. The NavigateComplete2 event from the interface DWebBrowserEvents2 demonstrates this. The URL is passed as a Variant pointing to a Variant containing the string. Without this fix NULL is returned. To test this ComEventCallbacks_Test.java was moved to use Internet Explorer instead of MS Office./"
,,0.1347,jna,"Improve SAFEARRAY (Closeable, Autoconversion, VARIANT wrapping) SAFEARRAY now implements Closeable on recent java versions this allows handling SAFEARRAY using try-with-resource When wrapped in a VARIANT the correct type is not VT_SAFEARRAY, but VT_ARRAY ord with the type of the SAFEARRAY elements VT_SAFEARRAY is not a valid value for VARIANT: When used with com.sun.jna.platform.win32.com.util.ProxyObject SAFEARRAY is correctly wrapped into a VARIANT/"
,,0.2046,jna,"Fix SAFEARRAY ByReference in VARIANT A SAFEARRAY byref that is wrapped in a VARIANT is a **SAFEARRAY. To model this in JNA a pseudo structure SAFEARRAYByReference is introduced. This approach is used, so that the referenced SAFEARRAY is read after a native call. To make it possible to pass a SAFEARRAYByReference and an IntByReference through the ProxyObject helper, c.s.j.platform.win32.COM.util.Convert is modified to reflectivly invoke a matching VARIANT constructor. This change was manually tested with the GdPicture.NET library using ProxyObject and COMLateBindingObject based binding./"
,,0.1174,jna,Reintroduce ComThread and move base functions into ObjectFactory The removal of the ComThread broke one use case of the win32.com.util packages. It was now necessary to explicitly handle threading and COM initialization. The intention was to broaden the possible use cases of the win32.com.util package. This changeset tries to reinstantiate the old functionality while keeping the benefits of the intended change by introducing a new baseclass./
,,0.3601,jna,"Remove unnecessary constructor and do general cleanup/Correct freeing of BSTRs According to MSDN the caller is responsible to free BSTRs./Move callback invocation in c.s.j.p.w.C.util.CallbackProxy into calling thread Dispatching the invocation of the callback handler into an executor makes it impossible to fill [out] parameters, as the return has already happend and [in] parameters can not be savely used if they are not marshalled to java code because the calling code will free the parameters after the call. To prevent deadlocks ComThread is modified to allow COM calls from the callback by modifying the ComThread helper to only dispatch the COM call into the ComThread only if the calling thread has not COM already enabled. Reference counting was modified, so that now on construction of a ProxyObject the reference count is AddRefed once and Released once on finalization./Make (Un)marshalling context sensitive Depending on the context the unmarshalling of the supplied data in callbacks is unwrapped further than before. The NavigateComplete2 event from the interface DWebBrowserEvents2 demonstrates this. The URL is passed as a Variant pointing to a Variant containing the string. Without this fix NULL is returned. To test this ComEventCallbacks_Test.java was moved to use Internet Explorer instead of MS Office./Apply generic definitions wherever applicable/"
,,0.1719,jna,Make (Un)marshalling context sensitive Depending on the context the unmarshalling of the supplied data in callbacks is unwrapped further than before. The NavigateComplete2 event from the interface DWebBrowserEvents2 demonstrates this. The URL is passed as a Variant pointing to a Variant containing the string. Without this fix NULL is returned. To test this ComEventCallbacks_Test.java was moved to use Internet Explorer instead of MS Office./
,,0.1619,OpenDDS,Tue Apr 11 10:34:34 USMST 2006 Yan Dai Apr 11 10:10:41 USMST 2006 Yan Dai Apr 7 15:15:23 USMST 2006 Yan Dai Apr 7 00:46:47 USMST 2006 Yan Dai
,,0.17800000000000002,OpenDDS,Fri Apr 28 12:59:58 USMST 2006 Yan Dai Apr 11 10:10:41 USMST 2006 Yan Dai Apr 10 09:20:35 USMST 2006 Yan Dai Apr 7 00:46:47 USMST 2006 Yan Dai
,,0.1619,OpenDDS,Thu Jun 22 16:06:21 2006 2006 Yan Dai May 1 13:16:56 USMST 2006 Yan Dai Apr 28 12:59:58 USMST 2006 Yan Dai Apr 7 00:46:47 USMST 2006 Yan Dai Apr 7 00:46:47 USMST 2006 Yan Dai
,,0.1466,OpenDDS,Mon Jun 19 18:58:43 UTC 2006 Yan Dai Apr 15 13:23:09 USMST 2006 Yan Dai Apr 15 11:47:43 USMST 2006 Yan Dai Apr 13 10:30:47 USMST 2006 Yan Dai
,,0.1019,OpenDDS,Fri Apr 21 01:09:00 USMST 2006 Yan Dai Apr 7 00:46:47 USMST 2006 Yan Dai
,,0.1019,OpenDDS,Fri Apr 21 01:09:00 USMST 2006 Yan Dai Apr 13 10:30:47 USMST 2006 Yan Dai
,,0.066,OpenDDS,Initial pass at converint all std::vector to OPENDDS_VECTOR/
,,0.0865,OpenDDS,Removed preprocessor MOD. Made constructors explicit./DataWriter checks filterClassName./Implemented modulus for content filtering./
,,0.066,OpenDDS,Initial pass at converint all std::vector to OPENDDS_VECTOR/
,,0.0628,OpenDDS,Remove unneeded include of strings to OPENDS_STRING in dds/DCPS/
,,0.0759,OpenDDS,Remove unneeded include of
,,0.0706,OpenDDS,Thu Jan 29 21:25:05 UTC 2015 Justin Wilson Jan 26 21:48:39 UTC 2015 Justin Wilson some commenting in prep for merge back to trunk. Added DomainParticipantImpl changes to avoid deadlock with liveliness timers while calling delete_contained_entities/
,,0.0744,OpenDDS,Build with FACE Conformance Test Suite./replace append with operator += for consistency/Removing use of streams for Safety Profile compliance/
,,0.0609,OpenDDS,Fix remaining warnings on MacOSX/clang./
,,0.0577,OpenDDS,Removed support for building against TAO 1.x / ACE 5.x./
,,0.0534,OpenDDS,Use TAOs BiDir GIOP support in InfoRepo discovery/
,,0.0648,OpenDDS,Initial wireshark fixes for debugging (not final)/
,,0.0669,OpenDDS,Change RcHandle constructor to take inc_count() and keep_count() instead of bool as second parameter/
,,0.0669,OpenDDS,Fix incorrect handle_timeout() signature/Fix SubscriptionInstance/PublicationInstance being accessed by watchdogs after deletion/
,,0.073,OpenDDS,Fix incorrect handle_timeout() signature/Fix SubscriptionInstance/PublicationInstance being accessed by watchdogs after deletion/
,,0.0704,OpenDDS,Updated V8 JavaScript engine support to work with a modern version of V8/
,,0.0669,OpenDDS,Fix IPv6 address text representation problem/
,,0.068,OpenDDS,"Revert ""Merge pull request from huangminghuang/master"" This reverts commit e6e580b4487263e096153ab49dff81f900568056, reversing changes made to 3cf8fa1bb6c00e9b6d964b30a9fff7741e2d559e./Use ACE_TEXT_ALWAYS_CHAR for char/wchar build compatibility/Fix generating IPv6 text representation/"
,,0.0838,OpenDDS,Match both sequence and publication_id for SAMPLE_ACK messages/Fix TCP wait_for_acknowledgements() bug/
,,0.0784,OpenDDS,Updated V8 JavaScript engine support to work with a modern version of V8/
,,0.066,OpenDDS,Initialize member variables in constructor./
,,0.0588,OpenDDS,Initialize member variable in constructor./
,,0.0577,OpenDDS,"DCPS Dissector now running on Wireshark 2.4.1 Added ""ws"" prefix to remaining calls to proto_tree_add and tvb_length./"
,,0.0618,OpenDDS,Replace BasicQueue with deque based implementation/
,,0.0732,OpenDDS,"When factories are enabled, if they have autoenable turned on then they should enable child objects Allow BIT setup to work correctly when the DomainParticipant has autoenable disabled/"
,,0.0685,OpenDDS,Some more compiler fixes/Replace BasicQueue with deque based implementation/Change some function declarations using unique_ptr/Rename scope_ptr to unique_ptr/
,,0.0672,OpenDDS,"Dissector: Refctr SD with RCH (Compiles but broken)/Dissector: Move Field Info into Field_Context Put the Wireshark field struct into Field_Context to be collected after the entire tree has been evaluated. Refactored almost all the code to account for this change, which consists of initializing the protocol tree in two passes. Dissectors now need to be able to be deleted if the first pass fails./"
,,0.0556,OpenDDS,Changes for Codacy/
,,0.2436,OpenDDS,"Added default argument to token-writer to handle the most popular usage scenario/Moved hash_c1/hash_c2 into handshake-data to prevent data-clobbering/Fixed bug in handshake-reply/Auth changes to facilitate the interop/Continued debugging the auth handshake Fixed typo in DdsSecurityCore.idl/Fixed bug with signature in begin_handshake_reply/Added diagnostic properties to handshake messages/Debugging fixes for Authentication/Implemented hash_c1 and hash_c2 support/Implemented proper support for c.pdata/Implemented support for handling c.perm in authentication/Fixed issue with diffie-hellman key generation/Added missing signature items; Added secret-handle to process-handshake routines/Implemented signature signing/verification/Implemented Auth.process_handshake_message for handshake-replier/Implemented Auth.process_handshake_message for handshake-requester/Fixed bugs in begin_handshake_reply/Implemented remaining pieces to Auth.begin_handshake_reply algorithm/Implemented validation steps in Auth.begin_handshake_reply/Added Diffie-Hellman abstraction; added serialization methods to Certificate; other Authentication-related changes/Added nonce-generation to validate_remote_identity/Implemented Auth.get_identity_token/local interface for SharedSecretHandle so that CryptoKeyFactory can get access to shared secret details (DDSSEC12-2)/another intermediate commit on the way towards 8.8.2, adds security fields to DiscoveredParticipant and fixes a few testing issues/Added SSL PrivateKey abstraction/"
,,0.1071,OpenDDS,Modified token-writer to use dynamic back-insertions instead of fixed property indices/Implemented get_authenticated_peer_credential_token/Auth changes to facilitate the interop/Completed begin-handshake-request initial implementation and unit test/
,,0.0599,OpenDDS,Implemented get_authenticated_peer_credential_token/
,,0.0807,OpenDDS,"Adding Support for DCPSSecurity runtime flag (disabled by default), fixing DomainParticipant return codes, adding temporary unique guid generation to builtin auth plugin/"
,,0.1211,OpenDDS,"consolidating test certificate authorities, resigning permissions and governance documents, and updating / fixing matching tests/"
,,0.1157,OpenDDS,"consolidating test certificate authorities, resigning permissions and governance documents, and updating / fixing matching tests/"
,,0.0669,OpenDDS,Fixed serialization routines in SignedDocument/
,,0.1312,OpenDDS,"Fixed compile issues associated with changes to OPENDDS_SSL_LOG_ERR/Replaced stderr logging with ACE_ERROR/SSL formatting fixes/consolidating test certificate authorities, resigning permissions and governance documents, and updating / fixing matching tests/"
,,0.0605,OpenDDS,Added exception context/Various Authentication changes/LocalCredentialData: Prop debug/error msgs/
,,0.1246,OpenDDS,ContentFilteredTopic: Complete Dispose Changes Also change test to match desired behavior/ContentFilteredTopic: Complete Dispose Changes Also change test to match desired behavior/ContentFilteredTopic Dispose Test/ContentFilteredTopic Dispose Test/
,,0.066,OpenDDS,ViewState Test: Display Instance State as String/
,,0.0556,OpenDDS,IDL-to-C++11 support in opendds_idl/
,,0.0652,OpenDDS,Spdp/Sedp: simplify namespace usage; new helper for send_builtin_crypto_tokens/
,,0.0689,OpenDDS,"fix unregister with nil handle, make behavior match dispose/"
,,0.0718,OpenDDS,consolidate several Messenger.idl instances in test applications for code reuse and compile times/
,,0.0811,OpenDDS,"Replace DCPS_DATA_TYPE warning MPC feature To avoid changing all the build server configs and avoid any possiblity of the warning not showing on the users end, instead of disabling an MPC feature to mask DCPS_DATA_TYPE warnings in OpenDDS, have opendds_idl just not do warn if the IDL file is in tests, performance-tests, and java of DDS_ROOT. Also make the check for DCPS_DATA_TYPE take all the possible whitespace into effect./"
,,0.1068,OpenDDS,Fix constants and serialization/Add a built-in STUN server to the RtpsRelay/Avoid unnecessary conversions between strings and addresses/fixup Relay addresses not updated when client changes servers/
,,0.1013,OpenDDS,Serialized Payload Alignment Changes (#1374) * Serialized Payload Alignment Changes * Bug fix * code and output layout fixes/
,,0.0599,pljava,Changes needed for PostgreSQL 8.1.x/
,,0.0697,pljava,Fixed bug causing incorrect representation of Time when DST is in effect./
,,0.0784,pljava,Refactor SQLDeploymentDescriptor to check tags late. No functional change (modulo log messages) should be seen yet./
,,0.1008,pljava,Address spurious error with zero-arg method sigs. Spun the loop in parseParameters slightly so it doesnt complain in the corner case of an explicit method signature of no parameters. Also made the messages clearer for when the signature really doesnt match whats expected./
,,0.1287,pljava,"InstallHelper groundwork() ensures good schema. The language handler functions are created with CREATE OR REPLACE so they will be sure to refer to the newly-specified native library, without requiring a cascading drop of everything depending on them. Most of what belongs in the schema can be autogenerated into a pljava.ddr by annotations in Commands.java. No Deployer or install.sql to keep in sync. (For some reason the byte[] parameters had to be explicitly SQLTyped bytea, even though the DDRProcessor type mapper is supposed to know that. A puzzle for another day.)/"
,,0.1274,pljava,"Register a triggers transition tables. The magic that makes tableOld/tableNew appear to exist under the chosen names, for purposes of queries in SPI, happens when SPI_register_trigger_data is called, passing the TriggerData struct that was passed to the handler function, and that struct has the chosen names and the tuplestores. PL/Java doesnt do SPI_connect unless and until the called Java function wants to use the jdbc:default:connection, at which point the connection is created in Invocation.c and remembered for the current level. So, thats a fine place to call SPI_register_trigger_data. The TriggerData struct simply needs to be stashed in the current Invocation at the time of function entry, so it can be passed to the SPI function when the time comes./"
,,0.0712,pljava,Annotations doesnt support CREATE CONSTRAINT TRIGGER and clause FROM schema.table
,,0.092,realm-java,"Separated docs for each classes and adjusted method references./Added page-per-method reference docs./Updated, improved and restructured reference docs and generator./Updated tightdb version. Updated jni now warning free./"
,,0.066,realm-java,"String conversion from C++ to Java done, opposite order remains/"
,,0.063,realm-java,REnamed Group::getTableCount() to size()/
,,0.0838,realm-java,native getSortedView/renamed all functions to match changes in core c++/
,,0.0639,realm-java,Simplified query implementation./
,,0.0724,realm-java,"reflect static methods in jni/added jni bridge to getColumnIndex/fixed bug in lookup(), which didnt return on 32 bit when it should/"
,,0.0712,realm-java,Eliminate some inlined std::string constructions/Stylistic updates/Changing to to_jstring()/
,,0.1183,realm-java,"Removed deprecated methods from Realm. Bumped dev version to 0.83.0/Clean up native row accessor from the same thread that created them/add support for findFirst & findAllSorted*, update UnitTests/Throw exception when close called on a diff thread. Without checking the thread in close, some weird logic could be triggered which is really hard to think about./refactor the test to detect a decrease in references (rather than trying to achieve 0 reference left)/fix memory leak issue with the FinalizerRunnable/Cleaned up wall of text./LinkView mutable methods now correctly require a write transaction + added unit tests for all mutable public methods./"
,,0.1085,realm-java,Make all methods on RealmObject and all classes in public API final (#2675) We should mark all methods that should not be overridden final. We should mark all classes that should not be inherited final./
,,0.2733,realm-java,"Merge commit ecbacf into merge-ecbacf-to-master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for inserts (#2999) Added `insert(RealmModel obj)`, `insertOrUpdate(RealmModel obj)`, `insert(Collection<RealmModel> collection)` and `insertOrUpdate(Collection<RealmModel> collection)` to perform batch inserts (#1684)./Objects not in Realm are now called unmananged everywhere. (#2828)/"
,,0.2867,realm-java,"Merge commit ecbacf into merge-ecbacf-to-master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for inserts (#2999) Added `insert(RealmModel obj)`, `insertOrUpdate(RealmModel obj)`, `insert(Collection<RealmModel> collection)` and `insertOrUpdate(Collection<RealmModel> collection)` to perform batch inserts (#1684)./Objects not in Realm are now called unmananged everywhere. (#2828)/"
,,0.2653,realm-java,"Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for inserts (#2999) Added `insert(RealmModel obj)`, `insertOrUpdate(RealmModel obj)`, `insert(Collection<RealmModel> collection)` and `insertOrUpdate(Collection<RealmModel> collection)` to perform batch inserts (#1684)./"
,,0.2797,realm-java,"insert(): Correctly detect multiple objects with the same primary key (#3239)/Add quotes around terms in exceptions message (#3221) Close commit ecbacf into merge-ecbacf-to-master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for inserts (#2999) Added `insert(RealmModel obj)`, `insertOrUpdate(RealmModel obj)`, `insert(Collection<RealmModel> collection)` and `insertOrUpdate(Collection<RealmModel> collection)` to perform batch inserts (#1684)./Objects not in Realm are now called unmananged everywhere. (#2828)/"
,,0.1819,realm-java,Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for
,,0.2668,realm-java,"Merge commit ecbacf into merge-ecbacf-to-master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for inserts (#2999) Added `insert(RealmModel obj)`, `insertOrUpdate(RealmModel obj)`, `insert(Collection<RealmModel> collection)` and `insertOrUpdate(Collection<RealmModel> collection)` to perform batch inserts (#1684)./"
,,0.0744,realm-java,Objects not in Realm are now called unmananged everywhere. (#2828)/
,,0.161,realm-java,"bulk inserts (#2999) Added `insert(RealmModel obj)`, `insertOrUpdate(RealmModel obj)`, `insert(Collection<RealmModel> collection)` and `insertOrUpdate(Collection<RealmModel> collection)` to perform batch inserts (#1684)./"
,,0.1573,realm-java,"bulk inserts (#2999) Added `insert(RealmModel obj)`, `insertOrUpdate(RealmModel obj)`, `insert(Collection<RealmModel> collection)` and `insertOrUpdate(Collection<RealmModel> collection)` to perform batch inserts (#1684)./"
,,0.166,realm-java,"bulk inserts (#2999) Added `insert(RealmModel obj)`, `insertOrUpdate(RealmModel obj)`, `insert(Collection<RealmModel> collection)` and `insertOrUpdate(Collection<RealmModel> collection)` to perform batch inserts (#1684)./JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./"
,,0.0694,realm-java,Add methods to RealmQuery to support byte arrays (#3285)/
,,0.0692,realm-java,Updated changelog; combined duplicate implementations for both .first and .last/Add ability for first and last methods to return a default/
,,0.0737,realm-java,Add methods to RealmQuery to support byte arrays (#3285)/
,,0.0673,realm-java,Add methods to RealmQuery to support byte arrays (#3285)/
,,0.0676,realm-java,Improve Error Message Output when an Entity Class hasnt a default constructor with no argument (#3906)/Add support for the management-Realm (#3627) Add preliminary support for the management-Realm/
,,0.1469,realm-java,"Single daemon thread for notification (#3666) With changes in , there is only one thread will be create for listening changes for all different Realms. But an additional SharedGroup will be created in the daemon thread for determine which SharedGroup has changed since last time. That requires some changes in the java side especially the daemon thread should not be created when Realm.compactRealm called./Create capabilities for every Realm instance/"
,,0.1374,realm-java,"Single daemon thread for notification (#3666) With changes in , there is only one thread will be create for listening changes for all different Realms. But an additional SharedGroup will be created in the daemon thread for determine which SharedGroup has changed since last time. That requires some changes in the java side especially the daemon thread should not be created when Realm.compactRealm called./"
,,0.2405,realm-java,BYE BYE finalizer (#3144) NativeObject Interface * NativeObject is an interface now. The implementation should supply a function to return a native deallocator pointer as well. * NativeObjectReference doesnt necessarily to know the pointer type anymore since it can always get a pointer to the deallocator function. Use phantom reference and daemon thread to replace finalizer for destruct native objects. * The phantom reference pool is implemented as a linked list which suppose to be fast insertion/removal. * A daemon thread is created to monitor and free all phantom reference. * Delayed disposal before native object creation is not needed any more. * SharedGroup still gets freed in the caller thread with a lock on context. * Native object needs to pass a destruction function pointer in addition to the native object pointer./
,,0.1597,realm-java,PR feedback/Expose listeners list size from RealmNotifier And enable related RxJava tests./Init some member vars in SharedRealm constructor move initialization of RealmNotifier and Capabilities to SharedRealm constructor to make it less confusing./Use term detach/reattach for Collection snapshot Also add some comments/Create capabilities for every Realm instance/Clear the memory ownership for RowNotifier/Deliver global notification through OS did_change Remove AndroidNotifier which will have a common implementation among all platforms./
,,0.0717,realm-java,Remove final modifier from all major classes. (#3911)/
,,0.2252,realm-java,BYE BYE finalizer (#3144) NativeObject Interface * NativeObject is an interface now. The implementation should supply a function to return a native deallocator pointer as well. * NativeObjectReference doesnt necessarily to know the pointer type anymore since it can always get a pointer to the deallocator function. Use phantom reference and daemon thread to replace finalizer for destruct native objects. * The phantom reference pool is implemented as a linked list which suppose to be fast insertion/removal. * A daemon thread is created to monitor and free all phantom reference. * Delayed disposal before native object creation is not needed any more. * SharedGroup still gets freed in the caller thread with a lock on context. * Native object needs to pass a destruction function pointer in addition to the native object pointer./
,,0.0681,realm-java,Add support for changing a users password. (#4538)/
,,0.0938,realm-java,"Update Object Store (#5058) to 50cf5ee583 Breaking changes from Object Store: To identify a user, Object Store needs both user ID and auth URL. Thus API has been changed in UserStore. Property::PropertyType has been changed which is not the same with field types in the core anymore./fixes (#5000) * fixes (#4862) * fixes support ssl (#4591) * Expose two new SyncConfiguration options to 1: Disable TLS verification. 2: provide the trusted root CA to validate the RealmObjectServer TLS connection (since OpenSSL doesnt have access to Android keystore) fixes"
,,0.2312,realm-java,"Add Supports for Primitive Lists (#5031) * Extended Annotation Processor to support it in model classes * Relaxed Generic Constraints * Support in insert/insertOrUpdate * Support in copyToRealm/copyToRealmOrUpdate * Support in copyFromRealm/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.2136,realm-java,"Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close some performance issues when initializing the Schema (#5404)/Add Supports for Primitive Lists (#5031) * Extended Annotation Processor to support it in model classes * Relaxed Generic Constraints * Support in insert/insertOrUpdate * Support in copyToRealm/copyToRealmOrUpdate * Support in copyFromRealm/No need to call Table.getPrimaryKey in proxy The columnInfo can be used instead which is much faster./Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.149,realm-java,Add Supports for Primitive Lists (#5031) * Extended Annotation Processor to support it in model classes * Relaxed Generic Constraints * Support in insert/insertOrUpdate * Support in copyToRealm/copyToRealmOrUpdate * Support in copyFromRealm/
,,0.0556,realm-java,Re-enable breakingSchemaChange_throws (#5317)/
,,0.1389,realm-java,Add Supports for Primitive Lists (#5031) * Extended Annotation Processor to support it in model classes * Relaxed Generic Constraints * Support in insert/insertOrUpdate * Support in copyToRealm/copyToRealmOrUpdate * Support in copyFromRealm/
,,0.1802,realm-java,"Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge branch master into merge-d409e3-to-master/Fix class name in exception message (#5098) * add a change log entry * fix comment * peerClassName linkedClassName/"
,,0.1879,realm-java,"Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.1629,realm-java,"Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.1104,rocksdb,"Improved CompactionFilter api: pass in a opaque argument to CompactionFilter invocation. Summary: There are applications that operate on multiple leveldb instances. These applications will like to pass in an opaque type for each leveldb instance and this type should be passed back to the application with every invocation of the CompactionFilter api. Test Plan: Enehanced unit test for opaque parameter to CompactionFilter. Reviewers: heyongqiang Reviewed By: heyongqiang CC: MarkCallaghan, sheki, emayanke Differential Revision:"
,,0.0689,rocksdb,C bindings: add a bunch of the newer options/Rename leveldb to rocksdb in C api/
,,0.2057,rocksdb,"Modifed the LRU cache eviction code so that it doesnt evict blocks which have exteranl references Summary: Currently, blocks which have more than one reference (ie referenced by something other than cache itself) are evicted from cache. This doesnt make much sense: blocks are still in RAM, so the RAM usage reported by the cache is incorrect if the same block is needed by another iterator, it will be loaded and decompressed again This diff changes the reference counting scheme a bit. Previously, if the cache contained the block, this was accounted for in its refcount. After this change, the refcount is only used to track external references. There is a boolean flag which indicates whether or not the block is contained in the cache. This diff also changes how LRU list is used. Previously, both hashtable and the LRU list contained all blocks. After this change, the LRU list contains blocks with the refcount==0, ie those which can be evicted from the cache. Note that this change still allows for cache to grow beyond its capacity. This happens when all blocks are pinned (ie refcount>0). This is consistent with the current behavior. The caches insert function never fails. I spent lots of time trying to make table_reader and other places work with the insert which might failed. It turned out to be pretty hard. It might really destabilize some customers, so finally, I decided against doing this. table_cache_remove_scan_count_limit option will be unneeded after this change, but I will remove it in the following diff, if this one gets approved Test Plan: Ran tests, made sure they pass Reviewers: sdong, ljin Differential Revision:"
,,0.1935,rocksdb,"Fix Mac compile errors on util/cache_test.cc Summary: Fix Mac compile errors on util/cache_test.cc Test Plan: make dbg ./cache_test/Modifed the LRU cache eviction code so that it doesnt evict blocks which have exteranl references Summary: Currently, blocks which have more than one reference (ie referenced by something other than cache itself) are evicted from cache. This doesnt make much sense: blocks are still in RAM, so the RAM usage reported by the cache is incorrect if the same block is needed by another iterator, it will be loaded and decompressed again This diff changes the reference counting scheme a bit. Previously, if the cache contained the block, this was accounted for in its refcount. After this change, the refcount is only used to track external references. There is a boolean flag which indicates whether or not the block is contained in the cache. This diff also changes how LRU list is used. Previously, both hashtable and the LRU list contained all blocks. After this change, the LRU list contains blocks with the refcount==0, ie those which can be evicted from the cache. Note that this change still allows for cache to grow beyond its capacity. This happens when all blocks are pinned (ie refcount>0). This is consistent with the current behavior. The caches insert function never fails. I spent lots of time trying to make table_reader and other places work with the insert which might failed. It turned out to be pretty hard. It might really destabilize some customers, so finally, I decided against doing this. table_cache_remove_scan_count_limit option will be unneeded after this change, but I will remove it in the following diff, if this one gets approved Test Plan: Ran tests, made sure they pass Reviewers: sdong, ljin Differential Revision:"
,,0.0556,rocksdb,Support PlainTableOption in option_helper/
,,0.1788,rocksdb,"Ensure the destruction order of PosixEnv and ThreadLocalPtr Summary: By default, RocksDB initializes the singletons of ThreadLocalPtr first, then initializes PosixEnv via static initializer. Destructor terminates objects in reverse order, so terminating PosixEnv (calling pthread_mutex_lock), then ThreadLocal (calling pthread_mutex_destroy). However, in certain case, application might initialize PosixEnv first, then ThreadLocalPtr. This will cause core dump at the end of the program (eg. This patch fix this issue by ensuring the destruction order by moving the global static singletons to function static singletons. Since function static singletons are initialized when the function is first called, this property allows us invoke to enforce the construction of the static PosixEnv and the singletons of ThreadLocalPtr by calling the function where the ThreadLocalPtr singletons belongs right before we initialize the static PosixEnv. Test Plan: Verified in the MyRocks. Reviewers: yoshinorim, IslamAbdelRahman, rven, kradhakrishnan, anthony, sdong, MarkCallaghan Reviewed By: anthony Subscribers: dhruba, leveldb Differential Revision:"
,,0.0588,rocksdb,Replace malloc with new for LRU Cache Handle/
,,0.0716,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.0716,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.078,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.0737,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.0759,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.0716,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.0737,rocksdb,Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.0716,rocksdb,Pass by pointer from/to Java from JNI not by object/Improve the speed and synchronization around the construction of Java/JNI objects/
,,0.0683,rocksdb,"Split db_test.cc Summary: Split db_test.cc into several files. Moving several helper functions into DBTestBase. Test Plan: make check Reviewers: sdong, yhchiang, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: dhruba, andrewkr, kradhakrishnan, yhchiang, leveldb, sdong Differential Revision:"
,,0.4069,rocksdb,"fix rate limiter to avoid starvation Summary: The current implementation of rate limiter has the possibility to introduce resource starvation when change its limit. This diff aims to fix this problem by consuming request bytes partially. Test Plan: ``` ./rate_limiter_test [==========] Running 4 tests from 1 test case. [----------] Global test environment set-up. [----------] 4 tests from RateLimiterTest [ RUN ] RateLimiterTest.OverflowRate [ OK ] RateLimiterTest.OverflowRate (0 ms) [ RUN ] RateLimiterTest.StartStop [ OK ] RateLimiterTest.StartStop (0 ms) [ RUN ] RateLimiterTest.Rate request size [1 1023], limit 10 KB/sec, actual rate: 10.355712 KB/sec, elapsed 2.00 seconds request size [1 1023], limit 20 KB/sec, actual rate: 19.136564 KB/sec, elapsed 2.00 seconds request size [1 2047], limit 20 KB/sec, actual rate: 20.783976 KB/sec, elapsed 2.10 seconds request size [1 2047], limit 40 KB/sec, actual rate: 39.308144 KB/sec, elapsed 2.10 seconds request size [1 4095], limit 40 KB/sec, actual rate: 40.318349 KB/sec, elapsed 2.20 seconds request size [1 4095], limit 80 KB/sec, actual rate: 79.667396 KB/sec, elapsed 2.20 seconds request size [1 8191], limit 80 KB/sec, actual rate: 81.807158 KB/sec, elapsed 2.30 seconds request size [1 8191], limit 160 KB/sec, actual rate: 160.659761 KB/sec, elapsed 2.20 seconds request size [1 16383], limit 160 KB/sec, actual rate: 160.700990 KB/sec, elapsed 3.00 seconds request size [1 16383], limit 320 KB/sec, actual rate: 317.639481 KB/sec, elapsed 2.50 seconds [ OK ] RateLimiterTest.Rate (22618 ms) [ RUN ] RateLimiterTest.LimitChangeTest [COMPLETE] request size 10 KB, new limit 20KB/sec, refill period 1000 ms [COMPLETE] request size 10 KB, new limit 5KB/sec, refill period 1000 ms [COMPLETE] request size 20 KB, new limit 40KB/sec, refill period 1000 ms [COMPLETE] request size 20 KB, new limit 10KB/sec, refill period 1000 ms [COMPLETE] request size 40 KB, new limit 80KB/sec, refill period 1000 ms [COMPLETE] request size 40 KB, new limit 20KB/sec, refill period 1000 ms [COMPLETE] request size 80 KB, new limit 160KB/sec, refill period 1000 ms [COMPLETE] request size 80 KB, new limit 40KB/sec, refill period 1000 ms [COMPLETE] request size 160 KB, new limit 320KB/sec, refill period 1000 ms [COMPLETE] request size 160 KB, new limit 80KB/sec, refill period 1000 ms [ OK ] RateLimiterTest.LimitChangeTest (5002 ms) [----------] 4 tests from RateLimiterTest (27620 ms total) [----------] Global test environment tear-down [==========] 4 tests from 1 test case ran. (27621 ms total) [ PASSED ] 4 tests. ``` Reviewers: sdong, IslamAbdelRahman, yiwu, andrewkr Reviewed By: andrewkr Subscribers: andrewkr, dhruba, leveldb Differential Revision: overflow case of rate limiters paramters Summary: When rate_bytes_per_sec * refill_period_us_ overflows, the actual limited rate is very low. Handle this case so the rate will be large. Test Plan: Add a unit test for it. Reviewers: IslamAbdelRahman, andrewkr Reviewed By: andrewkr Subscribers: yiwu, lightmark, leveldb, andrewkr, dhruba Differential Revision:"
,,0.1765,rocksdb,"Miscellaneous performance improvements Summary: I was investigating performance issues in the SstFileWriter and found all of the following: The SstFileWriter::Add() function created a local InternalKey every time it was called generating a allocation and free each time. Changed to have an InternalKey member variable that can be reset with the new InternalKey::Set() function. In SstFileWriter::Add() the smallest_key and largest_key values were assigned the result of a ToString() call, but it is simpler to just assign them directly from the users key. The Slice class had no move constructor so each time one was returned from a function a new one had to be allocated, the old data copied to the new, and the old one was freed. I added the move constructor which also required a copy constructor and assignment operator. The BlockBuilder::CurrentSizeEstimate() function calculates the current estimate size, but was being called 2 or 3 times for each key added. I changed the class to maintain a running estimate (equal to the original calculation) so that the function can return an already calculated value. The code in BlockBuilder::Add() that calculated the shared bytes between the last key and the new key duplicated what Slice::difference_offset does, so I replaced it with the standard function. BlockBuilder::Add() had code to copy just the changed portion into the last key value (and asserted that it now matched the new key). It is more efficient just to copy the whole new key over. Moved this same code up into the if (use_delta_encoding_) since the last key value is only needed when delta encoding is on. FlushBlockBySizePolicy::BlockAlmostFull calculated a standard deviation value each time it was called, but this information would only change if block_size of block_size_deviation changed, so I created a member variable to hold the value to avoid the calculation each time. Each PutVarint??() function has a buffer and calls std::string::append(). Two or three calls in a row could share a buffer and a single call to std::string::append(). Some of these will be helpful outside of the SstFileWriter. Im not 100% the addition of the move constructor is appropriate as I wonder why this wasnt done before maybe because of compiler compatibility? I tried it on gcc 4.8 and 4.9. Test Plan: The changes should not affect the results so the existing tests should all still work and no new tests were added. The value of the changes was seen by manually testing the SstFileWriter class through MyRocks and adding timing code to identify problem areas. Reviewers: sdong, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: andrewkr, dhruba Differential Revision:"
,,0.1619,rocksdb,"Miscellaneous performance improvements Summary: I was investigating performance issues in the SstFileWriter and found all of the following: The SstFileWriter::Add() function created a local InternalKey every time it was called generating a allocation and free each time. Changed to have an InternalKey member variable that can be reset with the new InternalKey::Set() function. In SstFileWriter::Add() the smallest_key and largest_key values were assigned the result of a ToString() call, but it is simpler to just assign them directly from the users key. The Slice class had no move constructor so each time one was returned from a function a new one had to be allocated, the old data copied to the new, and the old one was freed. I added the move constructor which also required a copy constructor and assignment operator. The BlockBuilder::CurrentSizeEstimate() function calculates the current estimate size, but was being called 2 or 3 times for each key added. I changed the class to maintain a running estimate (equal to the original calculation) so that the function can return an already calculated value. The code in BlockBuilder::Add() that calculated the shared bytes between the last key and the new key duplicated what Slice::difference_offset does, so I replaced it with the standard function. BlockBuilder::Add() had code to copy just the changed portion into the last key value (and asserted that it now matched the new key). It is more efficient just to copy the whole new key over. Moved this same code up into the if (use_delta_encoding_) since the last key value is only needed when delta encoding is on. FlushBlockBySizePolicy::BlockAlmostFull calculated a standard deviation value each time it was called, but this information would only change if block_size of block_size_deviation changed, so I created a member variable to hold the value to avoid the calculation each time. Each PutVarint??() function has a buffer and calls std::string::append(). Two or three calls in a row could share a buffer and a single call to std::string::append(). Some of these will be helpful outside of the SstFileWriter. Im not 100% the addition of the move constructor is appropriate as I wonder why this wasnt done before maybe because of compiler compatibility? I tried it on gcc 4.8 and 4.9. Test Plan: The changes should not affect the results so the existing tests should all still work and no new tests were added. The value of the changes was seen by manually testing the SstFileWriter class through MyRocks and adding timing code to identify problem areas. Reviewers: sdong, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: andrewkr, dhruba Differential Revision:"
,,0.0738,rocksdb,"Eliminate use of using namespace std. Also remove a number of ADL references to std functions. Summary: Reduce use of argument-dependent name lookup in RocksDB. Test Plan: make check passed. Reviewers: andrewkr Reviewed By: andrewkr Subscribers: leveldb, andrewkr, dhruba Differential Revision:"
,,0.1337,rocksdb,"Thread-specific histogram statistics Summary: To reduce contention for atomics when HistogramStats are shared across threads, this diff makes them thread-specific so updates are faster. This comes at the expense of slower reads (much less frequent), which now require merging all histograms. In this diff, Thread-specific HistogramImpl is created upon the threads first measureTime() Thread-specific HistogramImpl are merged and deleted upon thread termination or ThreadLocalPtr destruction, whichever comes first getHistogramString() and histogramData() merge all histograms, both thread-specific and previously merged ones Test Plan: unit tests, ran db_bench and verified histograms look similar before: $ TEST_TMPDIR=/dev/shm/ perf record ./db_bench ... + 7.63% db_bench db_bench [.] rocksdb::HistogramStat::Add after: $ TEST_TMPDIR=/dev/shm/ perf record ./db_bench ... + 0.98% db_bench db_bench [.] rocksdb::HistogramStat::Add Reviewers: sdong, MarkCallaghan, kradhakrishnan, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.0607,rocksdb,Implement WinRandomRW file and improve code reuse (#1388)/
,,0.1653,rocksdb,"fix WritableFile buffer size in direct IO Summary: ?fix the buffer size in case of ppl use buffer size as their block_size. Closes Differential Revision: D4956878 Pulled By: lightmark fbshipit-source-id: 8bb0dc9c133887aadcd625d5261a3d1110b71473/Statistic for how often rate limiter is drained Summary: This is the metric I plan to use for adaptive rate limiting. The statistics are updated only if the rate limiter is drained by flush or compaction. I believe (but am not certain) that this is the normal case. The Statistics object is passed in RateLimiter::Request() to avoid requiring changes to client code, which wouldve been necessary if we passed it in the RateLimiter constructor. Closes Differential Revision: D4646489 Pulled By: ajkr fbshipit-source-id: d8e0161/"
,,0.1829,rocksdb,"Statistic for how often rate limiter is drained Summary: This is the metric I plan to use for adaptive rate limiting. The statistics are updated only if the rate limiter is drained by flush or compaction. I believe (but am not certain) that this is the normal case. The Statistics object is passed in RateLimiter::Request() to avoid requiring changes to client code, which wouldve been necessary if we passed it in the RateLimiter constructor. Closes Differential Revision: D4646489 Pulled By: ajkr fbshipit-source-id: d8e0161/"
,,0.18600000000000003,rocksdb,"Statistic for how often rate limiter is drained Summary: This is the metric I plan to use for adaptive rate limiting. The statistics are updated only if the rate limiter is drained by flush or compaction. I believe (but am not certain) that this is the normal case. The Statistics object is passed in RateLimiter::Request() to avoid requiring changes to client code, which wouldve been necessary if we passed it in the RateLimiter constructor. Closes Differential Revision: D4646489 Pulled By: ajkr fbshipit-source-id: d8e0161/"
,,0.1483,rocksdb,"change use_direct_writes to use_direct_io_for_flush_and_compaction Summary: Replace Options::use_direct_writes with Options::use_direct_io_for_flush_and_compaction Now if Options::use_direct_io_for_flush_and_compaction true, we will enable direct io for both reads and writes for flush and compaction job. Whereas Options::use_direct_reads controls user reads like iterator and Get(). Closes Differential Revision: D4860912 Pulled By: lightmark fbshipit-source-id: d93575a8a5e780cf7e40797287edc425ee648c19/Statistic for how often rate limiter is drained Summary: This is the metric I plan to use for adaptive rate limiting. The statistics are updated only if the rate limiter is drained by flush or compaction. I believe (but am not certain) that this is the normal case. The Statistics object is passed in RateLimiter::Request() to avoid requiring changes to client code, which wouldve been necessary if we passed it in the RateLimiter constructor. Closes Differential Revision: D4646489 Pulled By: ajkr fbshipit-source-id: d8e0161/"
,,0.185,rocksdb,"Blob storage helper methods Summary: Split out interfaces needed for blob storage from including * CompactionEventListener and OnFlushBegin listener interfaces. * Blob filename support. Closes Differential Revision: D4905463 Pulled By: yiwu-arbug fbshipit-source-id: 564e73448f1b7a367e5e46216a521e57ea9011b5/change use_direct_writes to use_direct_io_for_flush_and_compaction Summary: Replace Options::use_direct_writes with Options::use_direct_io_for_flush_and_compaction Now if Options::use_direct_io_for_flush_and_compaction true, we will enable direct io for both reads and writes for flush and compaction job. Whereas Options::use_direct_reads controls user reads like iterator and Get(). Closes Differential Revision: D4860912 Pulled By: lightmark fbshipit-source-id: d93575a8a5e780cf7e40797287edc425ee648c19/Statistic for how often rate limiter is drained Summary: This is the metric I plan to use for adaptive rate limiting. The statistics are updated only if the rate limiter is drained by flush or compaction. I believe (but am not certain) that this is the normal case. The Statistics object is passed in RateLimiter::Request() to avoid requiring changes to client code, which wouldve been necessary if we passed it in the RateLimiter constructor. Closes Differential Revision: D4646489 Pulled By: ajkr fbshipit-source-id: d8e0161/"
,,0.1718,rocksdb,"The ObjectRegistry class replaces the Registrar and NewCustomObjects.Ö (#5293) Summary: The ObjectRegistry class replaces the Registrar and NewCustomObjects. Objects are registered with the registry by Type (the class must implement the static const char *Type() method). This change is necessary for a few reasons: By having a class (rather than static template instances), the class can be passed between compilation units, meaning that objects could be registered and shared from a dynamic library with an executable. By having a class with instances, different units could have different objects registered. This could be useful if, for example, one Option allowed for a dynamic library and one did not. When combined with some other PRs (being able to load shared libraries, a Configurable interface to configure objects to/from string), this code will allow objects in external shared libraries to be added to a RocksDB image at run-time, rather than requiring every new extension to be built into the main library and called explicitly by every program. Test plan (on riversand963s devserver) ``` $COMPILE_WITH_ASAN=1 make all && sleep 1 && make check ``` All tests pass. Pull Request resolved: Differential Revision: D16363396 Pulled By: riversand963 fbshipit-source-id: fbe4acb615bfc11103eef40a0b288845791c0180/"
,,0.0972,rocksdb,"Use delete to disable automatic generated methods. (#5009) Summary: Use delete to disable automatic generated methods instead of private, and put the constructor together for more clear.This modification cause the unused field warning, so add unused attribute to disable this warning. Pull Request resolved: Differential Revision: D17288733 fbshipit-source-id: 8a767ce096f185f1db01bd28fc88fef1cdd921f3/"
