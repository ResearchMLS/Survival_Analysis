Topic_no,Keywords,Contrib,System,Text
11,"issue, pointer, type, parameter, default, address, git_svn, add, library, platform, annotation, fix, function, set, build, class, variable, testing, info, generate",0.0795,conscrypt,use longs instead of ints to store pointers in OpenSSL binding This allows the code to be used on 64-bit VMs. Change-Id: I6c0ef28c55160186c7d59e88ef6fcde4f4a41907/
,,0.1317,conscrypt,"Random cleanups of old code style Add annotation, remove unused imports, and remove unnecessary casts. Also make sure annotations are on a line by themselves. Change-Id: I294b43353d7b1e77fd1c9d031af7b7062f024eee/"
,,0.0699,conscrypt,OpenSSLSignature: refactor key checking Use OpenSSLKey to do the conversions from different key types. Change-Id: Ie89730bba983cb5f2917fed7194e8b08562f6e16/
,,0.0709,conscrypt,"Use a serialization proxy for DH keys Since DHPrivateKey and DHPublicKey uses a lock to determine when to fetch the key parameters, we need to have some way for the field to be final. Using a serialization proxy makes that safe. Change-Id: Ifac7330fa35f0dc13313c806efacffbd293c6f85/"
,,0.0867,conscrypt,Fixing various javadoc issues. (#124) Also locking down access to a couple utility classes./
,,0.1121,conscrypt,Some parsing and serializing fixes. (#219) This fixes a memory leak in NativeCrypto_i2d_PKCS7. It never frees derBytes. Also removing a dependency on the legacy ASN.1 stack./
,,0.0737,conscrypt,"Remove some dead code from the loader. (#291) The Fedora-specific code is for system OpenSSL, which doesnt apply to Conscrypt./"
,,0.0977,conscrypt,Avoid util class pattern. (#282) Its unusual in C++ to use classes for utility methods (common in Java). Reworking the utility classes to be just namespaces with global variables and methods./
,,0.1064,conscrypt,Some parsing and serializing fixes. (#219) This fixes a memory leak in NativeCrypto_i2d_PKCS7. It never frees derBytes. Also removing a dependency on the legacy ASN.1 stack./
,,0.1102,conscrypt,Some parsing and serializing fixes. (#219) This fixes a memory leak in NativeCrypto_i2d_PKCS7. It never frees derBytes. Also removing a dependency on the legacy ASN.1 stack./
,,0.1102,conscrypt,Some parsing and serializing fixes. (#219) This fixes a memory leak in NativeCrypto_i2d_PKCS7. It never frees derBytes. Also removing a dependency on the legacy ASN.1 stack./
,,0.0958,conscrypt,"Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes Java logging consistently (#294) There are many places in the code that print to System.out/err. We should use the standard Java logging facilities. Fixes"
,,0.0976,conscrypt,"Use printf when tracing on non-Android platforms. (#437) If the ALOG macro isnt defined, we define it in macros.h to just do nothing, which means that enabling tracing on OpenJDK or other platforms doesnt actually result in any tracing output. On non-Android platforms, we can make the tracing macros use printf() instead of ALOG./"
,,0.0673,frostwire,[android] Loaders refactor./
,,0.0987,frostwire,"[android] issue ConcurrentModificationException fix KeywordDetector.feedSearchResults() triggers a ConcurrentModificationException while trying to make a copy of these filtered search results, copy which was done in the first place to avoid ConcurrentModificationException, however, while the copy constructor is called, the ArrayLists could be modified it seems. Online discussions recommend using CopyOnWriteArrayList since it makes an underlying copy of the elements on any mutation operation/"
,,0.1496,frostwire,"[desktop] code cleanup in VPNs, no more regex/[desktop] detection of ExpressVPN on Windows using native code/[desktop] detection of PIA VPN on Windows using native code/[desktop] ExpressVPN detection fixed. build 253. changelog/[desktop] Active PIA interface check/"
,,0.0673,frostwire,[android] billing library integration/
,,0.0865,frostwire,[desktop/macos] libDispatch.dylib unsigned binary/
,,0.215,javacpp,"* Before loading the JNI library, the `Loader` now also tries to extract and load libraries listed in the preload={...})` annotation values, and to support library names with version numbers, each value has to follow the format (or to have `Builder` use it for the compiler as well), where ""version"" is the version number found in the filename as required by the native dynamic linker, usually a short sequence of digits and dots, but it can be anything (e.g.: would map to ""libmylib.so.4.2"", ""libmylib.4.2.dylib"", and ""mylib.4.2.dll"" under Linux, Mac OS X, and Windows respectively) * Stopped using `java.net.URL` as hash key in `Loader` (very bad idea)/ * Refactored `Builder` to remove the need of the `Builder.Main` class * Added CUDA properties for Windows and Mac OS X as well/Added an `environmentVariables` configuration option to `BuildMojo`, along with some slight refactoring of `Builder.Main`/Added `BuildMojo` class and made other adjustments for Maven (second attempt)/Fixed Maven build and Mac OS X `-framework` option (issue and other minor things/Initial commit/"
,,0.3937,javacpp,"* Added new `Pointer.limit` property, mainly useful to get the `size` of an output parameter, as returned by an adapter specified with the annotation * Renamed the `capacity` field of an adapter to `size` as it now maps to both `Pointer.limit` and `Pointer.capacity` (the latter only for new allocations)/ * Added `Pointer.put(Pointer)` method, the counterpart of `Buffer.put(Buffer)`, to call the native `memcpy()` function on two `Pointer` objects/ * New annotation to reduce the size of generated code and optimize runtime performance of functions that are guaranteed not to throw exceptions, or for cases when we do not mind that the JVM may crash and burn * Trying to generate code for non-static native methods inside a class not extending `Pointer` now generates proper warning (issue * Fixed regression where the notation generates incorrect code for types other than `Pointer` (issue * Fixed generating incorrect code on primitive types/ * Trying to generate code for non-static native methods inside a class not extending `Pointer` now generates proper warning (issue * Fixed regression where the notation generates incorrect code for types other than `Pointer` (issue * Started using version numbers, friendly to tools like Maven, and placing packages in a sort of [Maven repository (issue * All files now get extracted into a temporary subdirectory, and with the appropriate platform-dependent linker options, or with libraries patched up after the fact with tools such as `install_name_tool` of Mac OS X, most native dynamic linkers can load dependent libraries from there * Changed the default value of the annotation from 0 to 1, and fixed the `Generator` when it is used with member getters and setters * Renamed `mingw-*.properties` to `windows-*-mingw.properties` for consistency * Made the `Generator` allocate native heap memory for callback arguments passed (in addition to `FunctionPointer`), rendering their behavior consistent with return in the case of function calls (issue * `Generator` now uses `std::runtime_error(std::string&)` instead of assuming that some nonstandard `std::exception(std::string&)` constructor exists (issue * Fixed `Generator` producing incorrect code when applying invalid annotations such as on a method that returns something else than a `Pointer` object (issue * New `Loader.loadLibrary()` method similar to `System.loadLibrary()`, but before searching the library path, it tries to extract and load the librar * `Generator` now accepts on `FunctionPointer` class declarations * Added new value to cast explicitly the output of a C++ adapter object * Upgraded references of the Android NDK to version r8 * Included new command line option ""-Xcompiler"" to pass options such as ""-Wl,-static"" directly to the compiler * Made other various minor changes and enhancements/ * Fixed syntax error in `VectorAdapter`, which GCC and Visual C++ would still happily compile * Added new `source.suffix` property to have the names of generated source files end with something else than `.cpp` and support frameworks like CUDA that require filenames with a `.cu` extension to compile properly, and also changed the `-cpp` command line option to `-nocompile`/Initial commit/"
,,0.0951,javacpp,* Added functionality to access `FunctionPointer` callbacks by their name from C/C++: We can annotate them with and build with the new `-header` option to get their declarations in a header file/
,,0.0951,javacpp,* Added functionality to access `FunctionPointer` callbacks by their name from C/C++: We can annotate them with and build with the new `-header` option to get their declarations in a header file/
,,0.3727,javacpp,"* Added functionality to access `FunctionPointer` callbacks by their name from C/C++: We can annotate them with and build with the new `-header` option to get their declarations in a header file/ * Added support for C++ ""functors"" based on the `operator()`, which gets used when annotating a `FunctionPointer` method parameter with * For convenience in Scala, added `apply()` as an acceptable method name within a `FunctionPointer`, in addition to `call()`/ * Fixed not working along parameters with an * `Generator` would ignore `Pointer.position()` in the case of and parameters * Replaced hack to create a `Pointer` from a `Buffer` object with something more standard/ * Fixed `Loader.sizeof(Pointer.class)` to return the `sizeof(void*)` * In addition to methods and parameters, we may now apply to annotation types as well, allowing us to shorten expressions like int[]` to int[]`, to support `std::vector<int>`, and similarly for and `std::string`/ * Fixed callback parameter casting of primitive and `String` types * An empty can now be used to let `Generator` know of entities that are not part of any scope, such as macros and operators * Turned `FunctionPointer` into an `abstract class` with `protected` constructors, but if users still try to use it as function parameters, `Generator` now logs a warning indicating that a subclass should be used (issue * Removed the `out` value of the annotation: All adapters are now ""out"" by default, unless also appears on the same element/ * Fixed `Pointer.equals(null)` throwing `NullPointerException` (issue * would erroneously prevent `sizeof()` operations from getting generated/ * Fixed problems when trying to map `java.lang.String` to other native types than `char*`, such as `unsigned char*`/ * JavaCPP now uses the `new (std::nothrow)` operator for allocation, which guarantees that allocation of primitive native arrays wont throw exceptions, making it possible to build C++ exception free JNI libraries/"
,,0.2573,javacpp,"* Added the ability to change the name of the class of function objects created when defining a `FunctionPointer` with the annotation * `Builder` would go on a compile spree when all classes specified on the command line could not be loaded/ * Exported `Loader.isLoadLibraries()`, which always returns true, except when the `Builder` loads the classes * Made it possible to specify a nested class (with a $ character in the name) on the command line * When `Pointer.limit 0`, the methods `put()`, `zero()`, and `asBuffer()` now assume a size of 1/Modified `Builder` to prevent requiring the `jvm` library for cases where linking has a high probability of failure/ * Removed confusing `cast` value of instead relying on new `String[]` value of to order multiple casts * The `Builder` was not linking with the `jvm` library by default/"
,,0.10300000000000001,javacpp,* Removed confusing `cast` value of instead relying on new `String[]` value of to order multiple casts * The `Builder` was not linking with the `jvm` library by default/
,,0.273,javacpp,"Fixed compile error of `FunctionPointer` deallocator with * Added the ability to change the name of the class of function objects created when defining a `FunctionPointer` with the annotation * `Builder` would go on a compile spree when all classes specified on the command line could not be loaded/ * Fixed compiler error on 32-bit Mac OS X/Fixed a few small things/ * A name starting with ""::"", for example or now drops the remaining enclosing scope/Modified `Builder` to prevent requiring the `jvm` library for cases where linking has a high probability of failure/ * Removed confusing `cast` value of instead relying on new `String[]` value of to order multiple casts * The `Builder` was not linking with the `jvm` library by default/ * Renamed various variables in `Generator` to make the generated code more readable * Fixed memory corruption when using on a function that returns by value an `std::string` (issue * Fixed memory corruption when returning by value an `std::vector<>` using an adapter * Added `Pointer.zero()` method that calls `memset(0)` on the range * For easier memory management, more than one `Pointer` now allowed to share the `deallocator` when ""casting"" them/ * Fixed not working when attempting to `return` the argument/Fixed a few things related to named `FunctionPointer` callbacks/"
,,0.1344,javacpp,"* Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/Removed the need to provide a name for enclosing but nested classes/ * Provided new annotation value to let users specify the name of the native library used by both `Builder` and `Loader`, where different classes with the same name get built together, which also works on nested classes (issue"
,,0.1622,javacpp,"* Let arrays of primitive values be valid return arguments, mostly useful when used along with the annotation, or some other custom adapter/Released version 0.4 * Fixed potential problem with methods of `FunctionPointer` annotated with * Upgraded references of the Android NDK to version r8d/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/"
,,0.2984,javacpp,"* Upgraded references of the Android NDK to version r9 * Added new `Builder` option ""-copylibs"" that copies into the build directory any dependent shared libraries listed in the preload={...})` annotation * `Loader.getPlatformName()` can now be overridden by setting the `com.googlecode.javacpp.platform.name` system property * Refactored the loading code for into a neat `Loader.ClassProperties` class, among a few other small changes in `Loader`, `Builder`, `Generator`, and the properties/"
,,0.297,javacpp,"* Upgraded references of the Android NDK to version r9 * Added new `Builder` option ""-copylibs"" that copies into the build directory any dependent shared libraries listed in the preload={...})` annotation * `Loader.getPlatformName()` can now be overridden by setting the `com.googlecode.javacpp.platform.name` system property * Refactored the loading code for into a neat `Loader.ClassProperties` class, among a few other small changes in `Loader`, `Builder`, `Generator`, and the properties/"
,,0.3604,javacpp,"* Upgraded references of the Android NDK to version r9 * Added new `Builder` option ""-copylibs"" that copies into the build directory any dependent shared libraries listed in the preload={...})` annotation * `Loader.getPlatformName()` can now be overridden by setting the `com.googlecode.javacpp.platform.name` system property * Refactored the loading code for into a neat `Loader.ClassProperties` class, among a few other small changes in `Loader`, `Builder`, `Generator`, and the properties/ * Included often used directories such as `/usr/local/include/` and `/usr/local/lib/` to `compiler.includepath` and `compiler.linkpath` default properties * New value lets users specify properties in common on a similarly annotated shared config class of sorts/ * Fixed callbacks when used with custom class loaders such as with Web containers/ * Fixed using (or other with annotations) on callbacks (issue incidentally allowing them to return a `String`/ * Incorporated missing explicit cast on return values when using the annotation/"
,,0.1338,javacpp,"* Fixed invalid code generated for `FunctionPointer` parameters annotated with * When catching a C++ exception, the first class declared after `throws` now gets thrown (issue instead of `RuntimeException`, which is still used by default * Fixed Java resource leak after catching a C++ exception/ * Let `Buffer` or arrays of primitive values be valid callback arguments/"
,,0.3355,javacpp,"* Continued to clean up the `Parser` and improve the support of comments, templates, overloaded operators, and namespaces, for the most part * Unified the function pointer type of native deallocators to `void (*)(void*)` * Removed dependency on (efficient) `AllocObject()` and `CallNonvirtualVoidMethodA()` JNI functions, which are not supported by Avian/ * Cleaned up and optimized `Generator` a bit, and fixed a crash that could occur when `FindClass()` returns NULL/Released version 0.7 * Tweaked a few things to support RoboVM and target iOS, but `JNI_OnLoad()` does not appear to get called... * Upgraded references of the Android NDK to version r9c * Improved the C++ support of the `Parser` for templates and overloaded operators/ * Made `Loader.load()` work, within reason, even when all annotations and resources have been removed, for example, by ProGuard * Fixed compile error when using a `FunctionPointer` as parameter from outside its top-level enclosing class * The `Parser` now filters tokens appropriately with preprocessor directives * Improved the C++ support of the `Parser` for macros, templates, etc/"
,,0.1314,javacpp,"* Continued to clean up the `Parser` and improve the support of comments, templates, overloaded operators, namespaces, and standard containers, for the most part/"
,,0.0828,javacpp,Cleaned up the code a bit/ * Unified the property names with the and annotations into a consistent naming scheme/
,,0.0983,javacpp,"* Introduced a simple `Logger` class and unified the logging output calls around it * Continued to clean up the `Parser` and improve the support of, for the most part, default parameter arguments, multiple inheritance, custom names of wrapped declarators, and helper classes written in Java/"
,,0.4075,javacpp,"Add support for virtual functions to let C++ call back methods implemented in Java * Add `Info.virtualize` to have the `Parser` generate abstract` for pure virtual functions in the given classes * Add annotation and update `Generator` to support callback by overriding such annotated `native` or `abstract` methods/ * Add hack for `typedef void*` definitions and parameters with a double indirection to them/ * Fix `Generator.checkPlatform()` not checking super classes/ * Fix issues with pointers to function pointers/ * Fix issues in the `Parser` with the `long double`, `ptrdiff_t`, `intptr_t`, `uintptr_t`, `off_t` types, optional parentheses, const data types in templates, declarator names equal to a type name, friend functions, inline constructors, `typedef void` declarations within namespaces/ * Add `includePath`, `linkPath`, and `preloadPath` parameters to `BuildMojo` to let Maven users append paths to the properties easily * In consequence, remove too arbitrary ""local"" paths from the default platform properties/ * Fix issues in the `Parser` with access specifiers and casting of const values by reference/ * Allow users to instruct the `Parser` to skip the expansion of specific macro invocations * Let `Parser` concatenate tokens when expanding macros containing the `##` operator/"
,,0.23399999999999999,javacpp,"* Fix issues in the `Parser` with the `long double`, `ptrdiff_t`, `intptr_t`, `uintptr_t`, `off_t` types, optional parentheses, const data types in templates, declarator names equal to a type name, friend functions, inline constructors, `typedef void` declarations within namespaces/"
,,0.0838,javacpp,* Allow users to instruct the `Parser` to skip the expansion of specific macro invocations * Let `Parser` concatenate tokens when expanding macros containing the `##` operator/
,,0.1051,javacpp,"* Add `includePath`, `linkPath`, and `preloadPath` parameters to `BuildMojo` to let Maven users append paths to the properties easily * In consequence, remove too arbitrary ""local"" paths from the default platform properties/"
,,0.26,javacpp,Add support for virtual functions to let C++ call back methods implemented in Java * Add `Info.virtualize` to have the `Parser` generate abstract` for pure virtual functions in the given classes * Add annotation and update `Generator` to support callback by overriding such annotated `native` or `abstract` methods/ * Fix `Generator.checkPlatform()` not checking super classes/ * Fix issues with pointers to function pointers/
,,0.2892,javacpp,"* Fix some `Parser` exceptions on valid declarations with macro expansions or overloaded cast operators/ * Fix some `Parser` exceptions on valid declarations with template arguments, and make `Info.javaName` usable in the case of `enum`/ * Use `Long.decode()` inside the `Tokenizer` to test more precisely when integer values are larger than 32 bits * Have the `Parser` produce ... put(... )` methods for standard C++ containers, avoiding mistaken calls to `Pointer.put(Pointer)` ([issue javacv:34]( * Let the `Parser` apply `Info.skip` in the case of macros as well * Remove warning log messages when using the annotation/"
,,0.1365,javacpp,* Fix some `Parser` exceptions on valid declarations with macro expansions or overloaded cast operators/
,,0.1944,javacpp,"* Use `Long.decode()` inside the `Tokenizer` to test more precisely when integer values are larger than 32 bits * Have the `Parser` produce ... put(... )` methods for standard C++ containers, avoiding mistaken calls to `Pointer.put(Pointer)` ([issue javacv:34]( * Let the `Parser` apply `Info.skip` in the case of macros as well * Remove warning log messages when using the annotation/"
,,0.0987,javacpp,* Let annotated methods return member function pointers of functions defined with useful for frameworks like Cocos2d-x/
,,0.162,javacpp,"* Work around a few additional corner cases with the `Parser`/ * Fix a few more small issues with the `Parser` and the `Generator`/ * Add `SharedPtrAdapter` and corresponding annotation to support `shared_ptr` containers * Fix a few small issues with the `Parser` and the `Generator`/ * Adjust `TokenIndexer` and `Parser` to handle `#if`, `#ifdef`, `#ifndef`, `#elif`, `#else`, and `#endif` preprocessor directives more appropriately, even when placed in the middle of declarations/"
,,0.114,javacpp,* Add `SharedPtrAdapter` and corresponding annotation to support `shared_ptr` containers * Fix a few small issues with the `Parser` and the `Generator`/
,,0.0804,javacpp,"* Adjust `TokenIndexer` and `Parser` to handle `#if`, `#ifdef`, `#ifndef`, `#elif`, `#else`, and `#endif` preprocessor directives more appropriately, even when placed in the middle of declarations/"
,,0.1485,javacpp,"* Append to annotation types to have them picked up by Javadoc * Fix `friend` functions not getting skipped by the `Parser` * Add `Info` for `__int8`, `__int16`, `__int32`, and `__int64` to `InfoMap.defaults`/"
,,0.114,javacpp,* Add `SharedPtrAdapter` and corresponding annotation to support `shared_ptr` containers * Fix a few small issues with the `Parser` and the `Generator`/
,,0.3875,javacpp,"* Fix `Parser` errors caused by constructors in nested `typedef struct` constructs, and skip over pointer names too (issue bytedeco/javacpp-presets#62)/ * Add `Parser` support for the `interface` keyword of the Microsoft C/C++ Compiler/ * Fix `Parser` errors on unnamed `namespace` blocks, preprocessor directives with comments, and empty macros/ * Introduce a `nullValue` to and annotations to let us specify what to do when passed `null`/ * Fix and enhance in various ways the support of `Parser` and `Generator` for function pointers, virtual functions, and abstract classes * Improve `Parser` check for `const` references and pointers required to output appropriate annotation * Add `Info.purify` to force the `Parser` in producing abstract classes/ * Fix `Tokenizer` failing on some character and string literals * Fix `Parser` errors caused by constructors in `typedef struct` constructs * Generalize `Info.virtualize` to let non-pure virtual functions get annotated with native` * Make `VectorAdapter` work even with elements that have no default constructor * Add `Parser` support for `std::pair` as a sort of zero-dimensional container type/ * Clarify with documentation comments various constructors produced by the `Parser`/"
,,0.3454,javacpp,"* Fix and enhance in various ways the support of `Parser` and `Generator` for function pointers, virtual functions, and abstract classes * Improve `Parser` check for `const` references and pointers required to output appropriate annotation * Add `Info.purify` to force the `Parser` in producing abstract classes/ * Fix `Tokenizer` failing on some character and string literals * Fix `Parser` errors caused by constructors in `typedef struct` constructs * Generalize `Info.virtualize` to let non-pure virtual functions get annotated with native` * Make `VectorAdapter` work even with elements that have no default constructor * Add `Parser` support for `std::pair` as a sort of zero-dimensional container type/"
,,0.2904,javacpp,"* Fix `Generator` performance issue on classes with a lot of methods (issue bytedeco/javacpp-presets#36)/ * Fix and enhance in various ways the support of `Parser` and `Generator` for function pointers, virtual functions, and abstract classes * Improve `Parser` check for `const` references and pointers required to output appropriate annotation * Add `Info.purify` to force the `Parser` in producing abstract classes/"
,,0.4022,javacpp,"* Log when `Pointer.deallocator` gets registered, garbage collected, or deallocated manually, if `Logger.isDebugEnabled()` (redirectable to SLF4J) * Make `Pointer implements AutoCloseable` to let us try-with-resources, thus bumping requirements to Java SE 7 and Android 4.0/ * Fix `Parser` support for the `interface` keyword of the Microsoft C/C++ Compiler/ * Let `Parser` pick up names from `Info.pointerTypes` in the case of function pointers as well/ * Fix `Parser` bug involving simple types and skipped identifiers/ * Add value to specify a list of default platform names that can be inherited by other classes/ * Fix a couple of `Parser` issues on complex template types (issue * Add `Parser` support for the `std::bitset` ""container""/ * Properly parse overloaded `new` and `delete` operators, `friend` declarations, and default constructors with an explicit `void` parameter (issue * Fix a couple of potential `NullPointerException` in `Parser` (issue * Have the `Parser` wrap the `iterator` of some standard C++ containers when useful/ * Forbid `Parser` from producing `abstract` classes, preventing C++ factory methods and such from working properly (issue"
,,0.2832,javacpp,"* Fix a couple of `Parser` issues on complex template types (issue * Properly parse overloaded `new` and `delete` operators, `friend` declarations, and default constructors with an explicit `void` parameter (issue * Fix a couple of potential `NullPointerException` in `Parser` (issue"
,,0.1584,javacpp,"* Log when `Pointer.deallocator` gets registered, garbage collected, or deallocated manually, if `Logger.isDebugEnabled()` (redirectable to SLF4J) * Make `Pointer implements AutoCloseable` to let us try-with-resources, thus bumping requirements to Java SE 7 and Android 4.0/"
,,0.0686,javacpp,"* Add `Parser` support for the `std::bitset` ""container""/"
,,0.2215,javacpp,"* Provide to specify pure virtual functions and prevent `Generator` from making undefined calls * Update properties for Android to detect undefined symbols at compile time/Update version in the `pom.xml` file to 1.1-SNAPSHOT * Introduce the concept of ""owner address"" to integrate `Pointer` transparently with `std::shared_ptr`, etc (Thanks to Cyprien Noel for the idea)/ * Insure `Generator` casts properly to `jweak` when calling `DeleteWeakGlobalRef()` (issue"
,,0.4721,javacpp,"* Add `Info.flatten` to duplicate class declarations into their subclasses, useful when a subclass pointer cannot be used for the base class as well/ * Enhance basic support for containers of the style `std::vector<std::pair< ... > >` with user-friendly array-based setter methods * Fix `Generator` not passing function objects even when annotating `FunctionPointer` parameters with or * Map `bool*` to `boolean[]` tentatively in `Parser` since `sizeof(bool) sizeof(jboolean)` on most platforms/ * Allow `Parser` to generate annotations and overloaded `put()` methods in basic containers too * Move list of basic containers and types to `Info.cppTypes` of the ""basic/containers"" and ""basic/types"" `InfoMap` entries, letting users change them at build time * Fix some `Parser` issues with `typedef` and forward declarations inside `class` definitions/ * Insure `Parser` maps 64-bit values in C++ `enum` to `long` variables (issue * Fix `Generator` trying to cast improperly objects on return from functions * Make `Parser` take `constexpr` into account/ * Make `Parser` take namespace aliases into account, and fix a couple of preprocessing issues with `TokenIndexer`/ * Make `Parser` ignore namespace aliases/ * Fix primitive arrays and NIO buffers not getting updated on return when used as arguments with adapters (issue bytedeco/javacpp-presets#109) * Remove confusing and now unnecessary empty constructors/Update version in the `pom.xml` file to 1.2-SNAPSHOT * Enhance a bit the conversion from Doxygen-style documentation comments to Javadoc-style * Remove class check in allocators, which prevented peer classes from being extended in Java, instead relying on `super((Pointer)null)` in child peer classes/Remove unnecessary use of `LinkedList` and switch to `ArrayList` for overall efficiency/"
,,0.1139,javacpp,* Add missing calls to `close()` for `InputStream` and `OutputStream` in `Loader` (issue * Remove `Piper` class no longer needed with Java SE 7/Remove unnecessary use of `LinkedList` and switch to `ArrayList` for overall efficiency/
,,0.3275,javacpp,"* Allow `Parser` to generate annotations and overloaded `put()` methods in basic containers too * Move list of basic containers and types to `Info.cppTypes` of the ""basic/containers"" and ""basic/types"" `InfoMap` entries, letting users change them at build time * Fix some `Parser` issues with `typedef` and forward declarations inside `class` definitions/ * Make `Parser` take namespace aliases into account, and fix a couple of preprocessing issues with `TokenIndexer`/"
,,0.2749,javacpp,"* Allow `Parser` to generate annotations and overloaded `put()` methods in basic containers too * Move list of basic containers and types to `Info.cppTypes` of the ""basic/containers"" and ""basic/types"" `InfoMap` entries, letting users change them at build time * Fix some `Parser` issues with `typedef` and forward declarations inside `class` definitions/"
,,0.36700000000000005,javacpp,"* Improve the performance of `BytePointer.getString()` by using `strlen()`/ * Prevent `Generator` from initializing classes when preloading them, which can cause problems (issue bytedeco/javacpp-presets#126)/ * Allow `Parser` to generate annotations and overloaded `put()` methods in basic containers too * Move list of basic containers and types to `Info.cppTypes` of the ""basic/containers"" and ""basic/types"" `InfoMap` entries, letting users change them at build time * Fix some `Parser` issues with `typedef` and forward declarations inside `class` definitions/Update version in the `pom.xml` file to 1.2-SNAPSHOT * Enhance a bit the conversion from Doxygen-style documentation comments to Javadoc-style * Remove class check in allocators, which prevented peer classes from being extended in Java, instead relying on `super((Pointer)null)` in child peer classes/Remove unnecessary use of `LinkedList` and switch to `ArrayList` for overall efficiency/"
,,0.1604,javacpp,"* Prevent `Loader` from extracting libraries more than once, which can cause problems (issue bytedeco/javacpp-presets#126) * Make `Indexer implements AutoCloseable` to let us try-with-resources/"
,,0.3452,javacpp,"* Make `Parser` take into account Java keywords not reserved in C++, casting issues with `int64_t`, and `const` value types in basic containers/ * Lengthen the `position`, `limit`, and `capacity` fields of `Pointer` using `long`/Mark functions from c includes with noexception This allows the Generator to avoid wrapping the function invocations with try/catch when no exception is possible/ * Add support for `enum` without enumerator list (issue * Add support for C++11 typed `enum` (issue * Add missing space for `const` types when normalizing template arguments in `Parser` (issue bytedeco/javacpp-presets#165)/squid:S2095 Resources should be closed/squid:S1854 Dead stores should be removed/ * Let `Parser` use adapters in the case `FunctionPointer` as well (issue bytedeco/javacpp-presets#145)/ * Split type names at `::` delimiters before mapping them against templates in `Parser`/ * Make `Parser` take `Info.skip` into account for `enum` declarations as well/Fix up functionality for `Info.flatten`/"
,,0.115,javacpp,* Set the internal DT_SONAME field in libraries created for Android (issue bytedeco/javacpp-presets#188)/Add flag to keep the generated cpp files/Use binary output folder as the compilers working directory This should prevent MSVC from dumping its object files in the projects root directory./
,,0.2497,javacpp,"* Let users define `NATIVE_ALLOCATOR` and `NATIVE_DEALLOCATOR` macros to overload global `new` and `delete` operators/ * Map `jint` to `int` and `jlong` to `long long` on Windows as well as all platforms with GCC (or Clang)/ * Fix corner cases when checking for the platform in `Generator` and `Parser`/ * Enhance the `indexer` package with `long` indexing, initially via the `sun.misc.Unsafe`, for now/ * Lengthen the `position`, `limit`, and `capacity` fields of `Pointer` using `long`/ * Allow `Builder` to generate native libraries with empty annotation even without user defined `native` methods/ * Adjust a few things in `Generator` preventing from working properly in some cases (issue bytedeco/javacpp-presets#143)/"
,,0.1175,javacpp,* Allow `Builder` to generate native libraries with empty annotation even without user defined `native` methods/
,,0.0825,javacpp,"Fix potentially failing tests/ * Add ""org.bytedeco.javacpp.maxretries"" system property, the number times to call `System.gc()` before giving up (defaults to 10)/"
,,0.1642,javacpp,* Fix `IndexerTest` potentially failing with `OutOfMemoryError` (issue bytedeco/javacpp-presets#234) * Preload libraries to work around some cases when they refuse to load once renamed (issue deeplearning4j/libnd4j#235) * Fix compilation error on some `linux-ppc64le` platforms (issue deeplearning4j/libnd4j#232)/
,,0.1752,javacpp,"* Fix potential `ParserException` on comments found after annotations before function declarations/Release version 1.2/ * Use `Info.cppTypes` for all `Parser` type substitutions, in addition to macros and templates (issue bytedeco/javacpp-presets#192)/"
,,0.1177,javacpp,* Add parameters to `Loader.load()` offering more flexibility over the platform properties and library paths/
,,0.0847,javacpp,Add `Pointer.maxBytes()` and `totalBytes()` to monitor amount of memory tracked/ * Treat all `String` with `Charset.defaultCharset()` (or define `MODIFIED_UTF8_STRING` for old behavior) (issue
,,0.1102,javacpp,"* Add ""org.bytedeco.javacpp.maxphysicalbytes"" system property to force calls to `System.gc()` based on `Pointer.physicalBytes()` * Allow strings ending with ""t"", ""g"", ""m"", etc to specify the number of bytes in system properties (issue"
,,0.2793,javacpp,"* Have `Parser` annotate the `allocate()` functions and not the actual constructors (issue bytedeco/javacpp-presets#297)/ * Fix `Parser` incorrectly skipping over some template function declarations/ * Insure `Parser` properly ignores the `auto`, `mutable`, `register`, `thread_local`, and `volatile` C++ keywords for storage classes * Fix `Generator` and `Parser` for types like `std::unordered_map<std::string,std::pair<int,int> >` (issue bytedeco/javacpp-presets#266)/Fix `Parser` incorrectly escaping quotes for multiline `nullValue` of or unexpected token :: This problem arose with tensorflow 0.10, javacpp was unable to parse a file that contained friend class with global scope identifier./escape empty strings for nullValue/ * Add support for data member pointers as pseudo-`FunctionPointer` (issue * Create all missing directories in the path to the target file of `Parser`/"
,,0.2542,javacpp,"* Accelerate call to `Pointer.physicalBytes()` on Linux (issue * Create all missing directories in the paths to the source files created by `Generator`/Add test for `Pointer.physicalBytes()`/ * Add ""org.bytedeco.javacpp.maxphysicalbytes"" system property to force calls to `System.gc()` based on `Pointer.physicalBytes()` * Allow strings ending with ""t"", ""g"", ""m"", etc to specify the number of bytes in system properties (issue * Add `UniquePtrAdapter` and corresponding annotation to support `unique_ptr` containers (issue bytedeco/javacpp-presets#266)/ * Add support for data member pointers as pseudo-`FunctionPointer` (issue"
,,0.0923,javacpp,"Update version in the `pom.xml` file to 1.3-SNAPSHOT * Print memory sizes in a human-readable format with `Pointer.formatBytes()` * Map standard `malloc()`, `calloc()`, `realloc()`, and `free()` functions (issue"
,,0.2358,javacpp,"* Add support for `decltype()` declarations (issue * Fix `Parser` not properly mapping the type of `long` anonymous enums/ * Take into account `const` on function parameters when looking up in `InfoMap`, and fix some incorrectly translated macros into variables * Add to `InfoMap.defaults` more names that are reserved in Java, but not in C++ * Add via support for function pointers passed by reference, as well as support for `Info.javaText` with `typedef`/"
,,0.12300000000000001,javacpp,"* Fix `Parser` not considering empty `class`, `struct`, or `union` declarations as opaque forward declarations/ * Fix `Parser` handling of `std::map` and of documentation comments containing the ""*/"" sequence/"
,,0.3916,javacpp,* Use `Integer.decode()` instead of `parseInt()` on integer literals to support hexadecimal and octal numbers/ * Add `Builder.encoding` option to let users specify I/O character set name (issue bytedeco/javacpp-presets#195)/ * Prevent `Parser` from overwriting target classes when nothing was parsed/Fix bugs in Parser * Fix `Parser` incorrectly recognizing values as pointers when `const` is placed after type (issue * Add `Parser` support for C++11 `using` declarations that act as `typedef` (issue * Let `Parser` accept variables initialized with parentheses (issue * Fix `Parser` confusion between attributes and namespace-less templates (issue * Prevent `Parser` from outputting setters for `const` member pointers/ * Add support for arrays of function pointers/
,,0.1073,javacpp,"Use `BUILD_PATH_SEPARATOR` instead of `PATH_SEPARATOR`, which conflicts with MSYS2/ * Make the arbitrary resources available to process executed with `Builder.buildCommand` via the `BUILD_PATH` environment variable/ * Let users bundle arbitrary resources, have them extracted in cache, and used as `include` or `link` paths (pull"
,,0.3591,javacpp,* Call `malloc_trim(0)` after `System.gc()` on Linux to make sure memory gets released (issue bytedeco/javacpp-presets#423)/ * Add `Builder.encoding` option to let users specify I/O character set name (issue bytedeco/javacpp-presets#195)/ * Fix potential compile errors with Android caused by superfluous `typedef` from `Generator` (issue bugs in Parser * Fix `Parser` incorrectly recognizing values as pointers when `const` is placed after type (issue * Add `Parser` support for C++11 `using` declarations that act as `typedef` (issue * Let `Parser` accept variables initialized with parentheses (issue * Fix `Parser` confusion between attributes and namespace-less templates (issue
,,0.0778,javacpp,"* Add `Loader.addressof()` to access native symbols, usable via optional `ValueGetter/ValueSetter` in `FunctionPointer`/"
,,0.1931,javacpp,* Fix `Parser` incorrectly resolving type definitions with classes of the same name in parent namespaces * Fix `Generator` compile errors for `const` template types of classes using the annotation/
,,0.0737,javacpp,"* Add `Loader.addressof()` to access native symbols, usable via optional `ValueGetter/ValueSetter` in `FunctionPointer`/"
,,0.1004,javacpp,Refine support for `platform.extension` by moving it to platform properties/
,,0.4926,javacpp,"* Allow `Parser` to map and cast function pointers to `Pointer`/ * Fix `Parser` not producing annotations for types with `Info.cast()` on `operator()`, as well as failing on `using operator` statements/ * Produce `pop_back()` and `push_back()` for relevant basic containers in `Parser` (issue bytedeco/javacv#659)/ * Output single value setters for containers in `Parser` to avoid surprises (issue * Add `Parser` support for C++11 `using` declarations inheriting constructors (issue bytedeco/javacpp-presets#491) * Fix compiler error when defining `std::set` or `std::unordered_set` with `Parser`/ * Make `Parser` take `Info.skip()` into account for enumerators as well/ * Move `sizeof()` and `offsetof()` data to global variables to prevent `StackOverflowError` in `JNI_OnLoad()` (issue bytedeco/javacpp-presets#331) * Propagate within `Parser` type information from macros to other macros referencing them Also fix a few more issues with `Parser`/ * Add support for `JNI_OnLoad_libname()` naming scheme for iOS via new `platform.library.static=true` property * Improve the clarity of error messages on `Parser` failures * Fix `Parser` issues with multiple `typedef` declarations in a single statement * Require to pick up alternate names from attributes/ * Add annotation value to remove header files from inherited Also fix a few more issues with `Parser`/ * Fix a few issues with `Parser`, including missing `PointerPointer` member setters (issue bytedeco/javacpp-presets#478)/ * Fix potential race conditions and various issues with `Loader` that could prevent libraries like MKL from working properly/"
,,0.1667,javacpp,* Output to log all commands executed for `Builder.buildCommand` via `ProcessBuilder`/Refine support for `platform.extension` by moving it to platform properties/ * Have `Builder` generate base JNI functions into `jnijavacpp.cpp` for better iOS support (issue
,,0.3533,javacpp,Refine support for `platform.extension` by moving it to platform properties/ * Have `Builder` generate base JNI functions into `jnijavacpp.cpp` for better iOS support (issue * Move `sizeof()` and `offsetof()` data to global variables to prevent `StackOverflowError` in `JNI_OnLoad()` (issue bytedeco/javacpp-presets#331) * Propagate within `Parser` type information from macros to other macros referencing them Also fix a few more issues with `Parser`/ * Add support for `JNI_OnLoad_libname()` naming scheme for iOS via new `platform.library.static=true` property * Improve the clarity of error messages on `Parser` failures * Fix `Parser` issues with multiple `typedef` declarations in a single statement * Require to pick up alternate names from attributes/ * Add annotation value to remove header files from inherited Also fix a few more issues with `Parser`/
,,0.3733,javacpp,"* Fix `Parser` failing on constructors of class templates/ * Allow using `new Info().enumerate()` to map all C++ `enum` to Java `enum` types by default * Fix `Parser` issues surrounding enum classes, anonymous namespaces, and pure virtual classes/ * Fix `Parser` failing on `enum` declarations where the first line is a macro (issue * Add `Info.enumerate` to let `Parser` map C++ enum classes to Java enum types (issue `Parser` failing on `enum` declarations with attributes/Fix various small issues with `Parser`/ * Make it possible to define read-only containers with `Parser` by prepending `const ` (issue * Access elements of basic containers defined in `Parser` with `at()` instead of `operator[]` (issue"
,,0.1038,javacpp,"* Enhance `Loader.createLibraryLink()` by allowing to create symbolic links in other directories/ * Add ""org.bytedeco.javacpp.pathsfirst"" system property to let users search ""java.library.path"", etc before the class path/ * Work around in `Builder` the inability to pass empty arguments on Windows/"
,,0.1064,javacpp,* Fix `SharedPtrAdapter` and `UniquePtrAdapter` failing to take ownership of temporary objects/ * Let `Generator` pick up annotations from super classes as well/
,,0.2728,javacpp,* Have `Parser` wrap the `insert()` and `erase()` methods of basic containers to allow modifying lists and sets/ * Fix `Parser` from outputting accessors not available with `std::forward_list` or `std::list`/ * Make `Parser` take into account implicit constructors even when inheriting some with `using` declarations * Pick up `Parser` translation of enum and macro expressions from `Info.javaNames` * Let `Parser` define `Info.pointerTypes` also for partially specialized templates with default arguments/
,,0.1159,javacpp,* Enhance `InfoMap` and `StringAdapter` with default mappings and casts for `std::wstring`/
,,0.0813,javacpp,* Add `BooleanPointer` and `BooleanIndexer` to access arrays of boolean values with `sizeof(jboolean) 1`/
,,0.1884,javacpp,* Make sure `Parser` always uses the short version of identifiers for Java class declarations * Prevent `Parser` from inheriting constructors with `using` when not accessible or of incomplete template instances/ * Add value to allow `Parser` to target Java packages (pull * Fix `Parser` failing when a value of an `std::pair` basic container is also an `std::pair` (issue bytedeco/javacpp-presets#614)/
,,0.11199999999999999,javacpp,"* Allow `Builder` to execute `javac` and `java` for convenience, and remove ""."" from class path (issue * Make `Builder` accept multiple options for `platform.link.prefix` and `platform.link.suffix` (pull"
,,0.0977,javacpp,* Fix `Generator` output for parameters of function pointers/
,,0.0744,javacpp,* Add `Bfloat16Indexer` to access `short` arrays as `bfloat16` floating point numbers/
,,0.3164,javacpp,* Enhance `UniquePtrAdapter` with the ability to move pointers out with the `&&` operator * Let `Parser` map constructors also for abstract classes with `Info.virtualize`/ * Fix `Parser` taking the global package as the target package even when both are set/Refine `Parser` skipping over C++11 style `{ ... }` member initializer lists (pull bytedeco/javacpp-presets#642)/ * Let `Parser` skip over C++11 style `{ ... }` member initializer lists (pull bytedeco/javacpp-presets#642)/Use instead of for classes targeted by
,,0.0737,javacpp,Use instead of for classes targeted by * Use simple name from global=...)` class as default for name/
,,0.2965,javacpp,"* Support multiple instances of `FunctionPointer` subclasses, up to the value in (issue bytedeco/javacpp-presets#683)/ * Let `Parser` pick up `Info` explicitly for all constructors by considering their names as functions (issue * Fix `Parser` overlooking `Info` for constructors inside templates (issue * Fix `Parser` overlooking `Info` for constructors inside a namespace (issue"
,,0.1422,javacpp,* Add `platform.executable` and `platform.executablepath` properties to bundle executables and extract them with `Loader.load()`/
,,0.1121,javacpp,"* Support multiple instances of `FunctionPointer` subclasses, up to the value in (issue bytedeco/javacpp-presets#683)/"
,,0.124,javacpp,Fix spurious library generation when overriding with an additional annotation/
,,0.0718,javacpp,"* Avoid `Parser` writing `allocateArray()` when single `int`, `long`, `float`, or `double` constructor already exists (issue bytedeco/javacv#1224)/"
,,0.1517,javacpp,"* Make sure `Generator` ignores deallocators on `const` values returned from adapters (issue * Expose all platform properties to process executed with `Builder.buildCommand` via environment variables, with names uppercase and all `.` replaced with `_`/"
,,0.0838,javacpp,* Fix `Parser` incorrectly inheriting default constructors multiple times with `using`/
,,0.1252,javacpp,"* Provide `ByteIndexer` with value getters and setters for unsigned `byte` or `short`, `half`, `bfloat16`, and `boolean` types as well/"
,,0.1177,javacpp,"* Provide `ByteIndexer` with value getters and setters for unsigned `byte` or `short`, `half`, `bfloat16`, and `boolean` types as well/"
,,0.1215,javacpp,"* Provide `ByteIndexer` with value getters and setters for unsigned `byte` or `short`, `half`, `bfloat16`, and `boolean` types as well/"
,,0.1215,javacpp,"* Provide `ByteIndexer` with value getters and setters for unsigned `byte` or `short`, `half`, `bfloat16`, and `boolean` types as well/"
,,0.2526,javacpp,"* Include in the defaults of `InfoMap` mappings missing for the `std::array` and `jchar` types * Fix various `Parser` failures with attributes on constructors, empty macros, enum classes, friend classes, inherited constructors, and keywords in parameter names * Add to `Parser` support for C++11 attributes found within `[[` and `]]` brackets/"
,,0.1065,jna,add raw calling convention git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/optionally allow Java objects in native calls git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0724,jna,Fix varargs tests/check for invalid Structure.ByReference usage/
,,0.12,jna,pass options to native library at interface definition update javadoc to include direct mapping info git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.077,jna,add test for NativeLibrary.getProcess() git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Handle last error as an exception if declared git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1599,jna,"attempt to find cause of w32 cleanup failure git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix compiler warnings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/restrict installation of shudown hook git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add tests for library unloading and loading from jar git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/add structure, string, NIO Buffer and primitive array support to direct type mapping git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/add raw calling convention git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1435,jna,"improve test coverage, structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/merge direct branch to trunk git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0744,jna,Ensure inherited structure fields are properly ordered git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0879,jna,Boolean.parseBoolean not available on wce/update docs re: JNA loading/fix more tests/down to 24 failures (4 crashes) on w32ce-arm/NativeTest passes/w32ce-arm library load on wince 5 (WM6.1)/avoid negative interactions with system install of JNA/clean up before merge/clean up/functional detach switch from callback/add callback thread initializer/ensure temporary/unpacked files are marked for deletion; attempt deletion immediately after load/
,,0.0639,jna,"add dll callbacks, tests, explicit flags for dlopen/"
,,0.1624,jna,"fixes for oracle openjdk/revise resource extraction to use explicit class loaders/fix tests for library loading from resource path/fix load/unload tests/clean up nounpack handling/avoid spurious rebuilds/use tls for callback detach indication, avoid potential conflict with last error/use consistent processor arch names, bump version number/fix compile error/add support for loading native libraries from classpath (FS or jar)/improve performance saving last error (per thread)/more Structure(Pointer) implementations and tests/used optimized structure+pointer ctor when possible/"
,,0.1148,jna,fix alignment on osx/ppc/improve library load debugging/fix library load error w/unicode/revise thread termination flag logic/fix padding on ppc/fix struct padding test on linux-arm/revise string encoding/fix padding for windows/make arch handling more consistent; dont load Native class from Platform/
,,0.1176,jna,Fix return type of Native#loadLibrary to match unconstrained generic type/Use generic definition of Native#loadLibrary/
,,0.1819,jna,add length-specified Pointer.getStringArray() update sunos-amd64.jar native remove debug output git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix bug writing null-valued ByReference structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/allow NativeMapped[] as function arguments respect autoread/write structure setting in direct calls git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.10800000000000001,jna,used optimized structure+pointer ctor when possible/
,,0.3467,jna,"clean up symmetry on ToNative/FromNative contexts git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow Pointer[] as field in Structure Clean up error messages when Structure size calculation fails git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable callback return values (e.g. sig_t signal(int sig, sig_t f)) Move native function proxy wrapping to CallbackReference from Structure git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Start on issue Main thing I wanted to do was get the second parameter to ToNativeConverter.toNative() in there so we dont have future API breakage by adding it later. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Clean up varargs Add per-field Structure read/write Avoid automatic writes to volatile structure fields Read/wrap function pointers in Structure fields Disallow Memory/Function as declared Structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.4242,jna,"Fix bug in nested struct array read/write git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix bug in stdcall function mapping when using struct by value Defer size_t/off_t definition, for now git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate Structure.ByReference reads Cache native library options as well as alignments/type mappers Ensure library options are passed to callbacks Add protection around remaining Pointer read/write calls Consolidate wide character reads/writes Avoid stack overflow reading self-referential structures or loops More prettification of Structure.toString Add size_t/off_t standard types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix NPE when sizing struct with a struct array field git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Avoid NPE in toString git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow array of struct by reference as argument Pretty-print structure info in toString git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Properly handle default boolean mapping (int) in Structure read/write Provide Pointer.share(offset) (allow omission of size) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate structure ffi type info initialization and avoid premature GC Enable union by-value by using largest fields type info Explicitly throw IllegalArgument on bad type info Throw IllegalState on missing type info Explicitly write version/md5 info into Makefile from ant (to avoid platform-specific variances in sed) Make Structure.ByValue/ByReference public to allow client code comparisons Consolidate Structure field get/set operations Avoid extra Pointer peer lookup from native code (wmeissner) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/implement struct by value add missing Pointer char function git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0935,jna,ensure memory is initialized before Structure.read() avoid NPE git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/partial fix for aix/ppc git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.09699999999999999,jna,Allow explicit setting of structure field order git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Ensure struct allocated when calling Union.setType git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1681,jna,struct/union improvements git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix pointer field read bug git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow arbitrary callback method names Allow specification of callback type mapper with TYPE_MAPPER Allow write with uninitialized boxed primitives in Structure Fix memory leak with callbacks called from native threads w/no java context Fix Structure derived classes to allow setting TypeMapper git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1101,jna,Provide pointer-based ctor for Structure git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1008,jna,Remove non-functional and superfluous size-based Structure ctors git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1845,jna,avoid Structure.equals in read/write reduce overhead of Structure.toString when struct contents arent actually used git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix Structure equals/hashcode git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/make structure read/write recursion detection thread-local git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/merge direct branch to trunk git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0954,jna,"enforce declaration of structure field order/Avoid overwriting string fields within structures when unnecessary; fix failing direct mode tests/set all structure fields, add android as a recognized platform/"
,,0.1584,jna,"fixes for oracle openjdk/revise resource extraction to use explicit class loaders/reorganize tests, ensure by value arguments always use their own memory/make conditional read perform auto-read/used optimized structure+pointer ctor when possible/"
,,0.1427,jna,Remove non-functional and superfluous size-based Structure ctors git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow direct Buffer as structure field git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2133,jna,avoid Structure.equals in read/write reduce overhead of Structure.toString when struct contents arent actually used git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix Structure equals/hashcode git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/make structure read/write recursion detection thread-local git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/merge direct branch to trunk git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/improve test coverage git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.124,jna,fix deprecation warnings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix issue 133 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1355,jna,Fix NPE in array element initialization git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/add two (failing) tests based on Samuel Audets reports on lack of field initialization in Structure with Pointer ctors git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1121,jna,fix test on 32-bit/fix union sizing/layout issue/used optimized structure+pointer ctor when possible/
,,0.0843,jna,Issue Structure leaves always one element in ThreadLocal set/
,,0.2355,jna,Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0833,jna,Allow handling of uncaught callback exceptions git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1478,jna,pass options to native library at interface definition update javadoc to include direct mapping info git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix cacheing of union type information git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.10400000000000001,jna,merge direct branch to trunk git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0972,jna,"tweaks for win32-amd64 build/clean up thread termination handling/w32 thread auto-cleanup/w32 implementation/simplified thread-local destructor (pthreads)/add dll callbacks, tests, explicit flags for dlopen/"
,,0.1908,jna,"allow callbacks in direct mappings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix SIGBUS/SIGSEGV on sparc git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/add structure, string, NIO Buffer and primitive array support to direct type mapping git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/add raw calling convention git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/provide sizeof native function, update checksum git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.2216,jna,"fix compilation warnings/errors on win64 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/improve test coverage, structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix placement of exception throw git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/avoid making JNI calls after thrown exceptions git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix setjmp/longjmp compiler warnings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/merge direct branch to trunk git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix w32 compilation errors git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/add last error exception for direct calls git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Handle last error as an exception if declared git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0673,jna,fix unused parameter warnings under gcc git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0926,jna,"ensure separated buffer tests still work/update change log, account for NIO buffer position/add docs for lasterror, fix last error failure/fix load from current module/down to 24 failures (4 crashes) on w32ce-arm/NativeTest passes/w32ce-arm library load on wince 5 (WM6.1)/"
,,0.066,jna,"add dll callbacks, tests, explicit flags for dlopen/"
,,0.0981,jna,"Fixes issue handle typemapper-returned String/WString with associated tests/refactor for readability/add tests for type-mapping of enums Add changelog entry, fixes"
,,0.2292,jna,"Pass objects into JNI code in addition to raw pointer value (prevent premature GC) The Memory/Pointer object delegates the native calls to static methods in the Native class. This causes the Memory/Pointer object to become prematurely eligable for GC for this case: Memory pointer something and work on Memory> String result pointer.getWideString(0) nothing more with Memory> getWideString(0) calls back into the JVM and allocates a new java string. In this case the GC can become active and collect the Memory object. After this it is possible to run the finalizer, that in turn frees the native memory backing the memory object. The native function now possibly accesses freed memory. The native code needs to hold references to the relevant object itself, this is implemented here. Changes: API relevant changes: Deprecate Native#getDirectByteBuffer(long, long) it is functional, but discouraged to be used and should be removed in future JNI-Layer (Native.java + dispatch.c): All set<Type> and get<Type>, write and read methods that took a pointer address are modified to take a pointer object, the raw pointer value and an offset All invoke<ReturnType> methods that took a pointer adress (function pointer) are modified to take a function object and the raw function pointer value Build-System/Native: the jni api version as bumped from 5.0.0 to 5.1.0 (the major version was raised in the 4.3.0 development cycle, so not modified) all prebuild native libraries were replaced with the ""OUT_OF_DATE"" marker, where no replacement could be build immediately getDirectByteBuffer(long, long) is the only API relevant method, allother methods modified are package private and so are not considered API. getDirectByteBuffer is overloaded with a package private variant getDirectByteBuffer(Pointer, long, long, long) that reflects the above described changes. Executed tests: linux-amd64: all unittests of jna pass linux-arm: 1 unittest fails (unload of jnalib, emulated environment (qemu), slow execution leads to timeout) linux-x86: all unittests of jna pass (32bit chroot on 64bit kernel) windows-64bit: 2 tests fail (before and after: DirectTypeMapperTest and NativeTest#testSizeOf (bool should be 1, is 4) windows-32bit: 2 tests fails (one less that before the change (testLongStringGeneration), other errors see x64) Performance: Check was done with JMH the comparison was between master and the proposed pointer_native_direct branch: java benchmarks-master.jar 10 10 5 The benchmarks initialize a Memory block and access it via getInt and getString, one with an offset of 0 and on with an offset of 5 bytes. The testmatrix: testInt testIntWithOffset testString testStringWithOffset linux64-jdk7 108% 108% 100% 101% linux64-jdk8 107% 108% 100% 100% linux32-jdk8 97% 97% 112% 112% win32-jdk8 90% 95% 98% 98% win64-jdk8 95% 95% 97% 97%/"
,,0.0865,jna,"Use libffi instead of custom assembly (tested for darwin (universal), linux-i386, win32-x86 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0895,jna,use stdint types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0962,jna,add direct version of struct by value tests git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1808,jna,"Split FileMonitor and W32FileMinitor into different namespaces, removed isWindows hack in the tests. Added Kernel32.GetTempPath and Kernel32Util.getTempPath. Added missing copyright notices. Divided Shell32 into ShellApi (ported from ShellApi.h), ShlObj (ported from ShlObj.h). Added Shell32Util.getFolderPath. Added WinDef (ported from Windef.h) with MAX_PATH. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1964,jna,"Split FileMonitor and W32FileMinitor into different namespaces, removed isWindows hack in the tests. Added Kernel32.GetTempPath and Kernel32Util.getTempPath. Added missing copyright notices. Divided Shell32 into ShellApi (ported from ShellApi.h), ShlObj (ported from ShlObj.h). Added Shell32Util.getFolderPath. Added WinDef (ported from Windef.h) with MAX_PATH. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.2198,jna,Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1,jna,clean up w32 libs to use HANDLE instead of Pointer git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0895,jna,"Moved Kernel32 definitions into Kernel32.java, added GetEnvironmentVariable./Fix: platform.win32.Secur32.AcquireCredentialsHandle, InitializeSecurityContext and AcceptSecurityContext./"
,,0.0677,jna,Added some Wincon.h related functions and definitions/
,,0.1964,jna,"Split FileMonitor and W32FileMinitor into different namespaces, removed isWindows hack in the tests. Added Kernel32.GetTempPath and Kernel32Util.getTempPath. Added missing copyright notices. Divided Shell32 into ShellApi (ported from ShellApi.h), ShlObj (ported from ShlObj.h). Added Shell32Util.getFolderPath. Added WinDef (ported from Windef.h) with MAX_PATH. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1194,jna,Show proper mapping for w32 function which accepts either integer or pointer types in a given argument git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1061,jna,Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.098,jna,Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.10400000000000001,jna,Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.102,jna,Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.10400000000000001,jna,Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.098,jna,Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.10400000000000001,jna,Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.10400000000000001,jna,Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1011,jna,Using static final un-modifiable List of field names for structure(s)/Fix return type of Native#loadLibrary to match unconstrained generic type/
,,0.0833,jna,Allow handling of uncaught callback exceptions git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0599,jna,fix issue 111 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.149,jna,narrow direct callback test failure git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/ensure direct library mappings used in direct tests git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0804,jna,"amd64/linux pthread investigations/reorganize tests, ensure by value arguments always use their own memory/"
,,0.0833,jna,fix amd64 native thread cleanup test/fix failing test on XP/restore gcc as default win32 32-bit build/verify proper module handle for dll callbacks/revise string encoding/
,,0.2566,jna,Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Use simpler workaround for loading AWT/JAWT on X11-based platforms git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0919,jna,improve win32 dependent library loading git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0957,jna,revise resource extraction to use explicit class loaders/
,,0.0962,jna,add more NativeMapped return type tests (IntegerType) to validate issue
,,0.1083,jna,Allow constant pointer definition Add multiple watches to file monitor test git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1274,jna,allow callbacks in direct mappings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/add raw calling convention git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0883,jna,add last error exception for direct calls git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1248,jna,windows wont load libraries w/truncated name/revise resource extraction to use explicit class loaders/add support for loading native libraries from classpath (FS or jar)/
,,0.2279,jna,"Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0673,jna,i386-OpenBSD port git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0673,jna,fix load/unload tests/make resource prefix available via Platform/
,,0.11199999999999999,jna,Add arm softfloat variant as platform armel add prebuild arm softfloat binaries add option to override prefix detection by specifying jna.prefix add prefix autodetection to platform code. Autodetection is based on the JVM image adjust build.xml to implement prefix detection Closes:
,,0.0976,jna,"Only analyse binary to determine hardfloat vs. softfloat on arm The ELFAnalyser analyses the java binary to determine, whether the hardfloat/softfloat flags are set. This causes issues if a security manager is in place and limits file accessibility. The JNA code base needs read access on the /proc/self/exe symlink and the referenced binary. This change reduces the cases where the executing binary is read. On platforms, that dont need it, the detection step is skipped. Close:"
,,0.1296,jna,Add explicit test for matching linux versioned libs git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0804,jna,avoid premature GC of Memory with NIO Buffers extant git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2266,jna,"Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0673,jna,w32ce-arm library load on wince 5 (WM6.1)/
,,0.155,jna,"Revert r266 Integer.valueOf() and friends are 1.5+ features, so it breaks 1.4 support git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1466,jna,"Fix calling functions with only VarArgs (without fixed parameters) The change in 50eb820c129d298c26035f98e6a93aed9fc52257 introduces the detection of the count of the fixed parameters of a VarArgs call. The logic detecting whether this call was even a VarArgs call was changed to be true if fixed parameter count is not null. This is not correct, as the method call could contain only fixed parameters or a VarArgs call could be done without fixed parameters. Closes:"
,,0.10400000000000001,jna,Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.149,jna,Allow constant pointer definition Add multiple watches to file monitor test git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Use type-safe pointers for w32 APIs Simplify type-safe pointer declarations git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1019,jna,fix definition of HWND_BROADCAST git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0686,jna,Fix INVALID_HANDLE_VALUE git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1013,jna,"Fixes issue handle typemapper-returned String/WString with associated tests/add tests for type-mapping of enums Add changelog entry, fixes"
,,0.1417,jna,"fix stdcall stack sizing for NativeMapped git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1638,jna,"Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Use libffi instead of custom assembly (tested for darwin (universal), linux-i386, win32-x86 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.12,jna,"Ensure TCHAR*[] gets encoded properly on w32, wchar_t*[] on others git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Use libffi instead of custom assembly (tested for darwin (universal), linux-i386, win32-x86 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.2834,jna,Consolidate structure ffi type info initialization and avoid premature GC Enable union by-value by using largest fields type info Explicitly throw IllegalArgument on bad type info Throw IllegalState on missing type info Explicitly write version/md5 info into Makefile from ant (to avoid platform-specific variances in sed) Make Structure.ByValue/ByReference public to allow client code comparisons Consolidate Structure field get/set operations Avoid extra Pointer peer lookup from native code (wmeissner) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0923,jna,fix cacheing of union type information git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0996,jna,merge win64 branch git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1324,jna,down to 2 failing tests git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix win64 fp return git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix some win64 bugs with structure handling git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1101,jna,clean up some libffi bits git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/merge win64 branch git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.066,jna,fix a few win64 tests use ffi_closure_alloc everywhere git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.066,jna,fix a few win64 tests use ffi_closure_alloc everywhere git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0899,jna,fix some win64 bugs with structure handling git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2578,jna,Consolidate Structure.ByReference reads Cache native library options as well as alignments/type mappers Ensure library options are passed to callbacks Add protection around remaining Pointer read/write calls Consolidate wide character reads/writes Avoid stack overflow reading self-referential structures or loops More prettification of Structure.toString Add size_t/off_t standard types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0813,jna,fix more tests/down to 24 failures (4 crashes) on w32ce-arm/NativeTest passes/w32ce-arm library load on wince 5 (WM6.1)/
,,0.0873,jna,Fix return type of Native#loadLibrary to match unconstrained generic type/ensure enclosing class query shows up properly for cached options/
,,0.0939,jna,Fix bug checking IntegerType limits git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.078,jna,Allow for unsigned IntegerType/
,,0.0697,jna,"add missing changelog entry, extend GC timeout/"
,,0.0942,jna,add direct version of struct by value tests git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.066,jna,fix a few win64 tests use ffi_closure_alloc everywhere git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0814,jna,"Added jnacontrib.x11.api.X.Window.getSubwindows and fixed jnacontrib.x11.api.X.Window.getXXXProperty, returns null if the window property is not found./"
,,0.1081,jna,merge direct branch to trunk git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0939,jna,add explicit test for direct mapping use of supplied function mapper/
,,0.0833,jna,"Avoid overwriting string fields within structures when unnecessary; fix failing direct mode tests/Fix: platform.win32.Secur32.AcquireCredentialsHandle, InitializeSecurityContext and AcceptSecurityContext./"
,,0.1561,jna,ensure direct library mappings used in direct tests git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1255,jna,fixed direct-mapping type-mapped pointer result types/
,,0.0737,jna,implemented failure configuration of windows services/
,,0.1157,jna,"Added new library Mpr and functions to Netapi32 Added com.sun.jna.platform.win32.Mpr, com.sun.jna.platform.win32.LmShare, and com.sun.jna.platform.win32.Winnetwk Added ACCESS_* definitions to com.sun.jna.platform.win32.LmAccess Added NetShareAdd and NetShareDel to com.sun.jna.platform.win32.Netapi32/"
,,0.0798,jna,Added Secur32.EnumerateSecurityPackages and FreeContextBuffer. Added Secur32Util.getSecurityPackages. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0958,jna,"Added Advapi32Util.registryGetKeys and registryGetValues. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Moved definitions from Kernel32 into WinNT where they belong. Added Advapi32.RegOpenKeyEx, RegQueryValueEx, RegCloseKey, RegDeleteValue, RegSetValueEx, RegCreateKeyEx, RegDeleteKey, RegEnumKeyEx, RegEnumValue, RegQueryInfoKey. Added Advapi32Util.registryKeyExists, registryValueExists, registryGetStringValue, registryGetIntValue, registryCreateKey, registrySetIntValue, registrySetStringValue, registryDeleteKey, registryDeleteValue. Added missing documentation in Kernel32. Added Wdm, NtDll.ZwQueryKey and NtDllUtil.getKeyName. Added WinReg and REG* definitions from WinNT.h. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1023,jna,"Add REG_BINARY, REG_EXPAND_SZ and REG_MULTI_SZ support to Advapi32Util. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Added REG_BINARY support to Advapi32Util registry functions. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0599,jna,fix for issue
,,0.1406,jna,Use Structure.toArray() instead of domains.getTrusts()/Third attempt at fixing Netapi32Util.getDomainTrusts()./NetApiBufferFree was freeing the pointer we were passing in rather than the pointer to what DsEnumerateDomainTrusts allocated./Some DS_DOMAIN_TRUSTS fields were mapping ULONG to NativeLong instead of int./Second attempt at fixing the crash in Netapi32Util. This time we change the definition of Netapi32.DsEnumerateDomainTrusts. Crash is still not happening and this fix is more likely to be correct./Fixing a crash when trying to free the wrong pointer in Netapi32Util./Fix: NPE platform.win32.Netapi32Util.getDomainTrusts./
,,0.1087,jna,Expose samDesired param to all Advapi32Util#registry* methods Added overloads to `c.s.j.platform.win32.Advapi32Util` methods which allow the caller to specify `samDesiredExtra` to request additional registry key security and access rights It also allows accessing alternative registry views by specifying: KEY_WOW64_64KEY or KEY_WOW64_32KEY Closes:
,,0.0681,jna,"Moved Kernel32 definitions into Kernel32.java, added GetEnvironmentVariable./"
,,0.0865,jna,"added Module32FirstW and Module32NextW to Kernel32 added MODULEENTRY32W to Tlhelp32/Added EnumResourceTypes and EnumResourceNames to Kernel32/Kernel32.ProcessIdToSessionId and resource extraction functions (Find/Load/LockResource, etc) Updated changelog./"
,,0.066,jna,"Moved Kernel32 definitions into Kernel32.java, added GetEnvironmentVariable./"
,,0.1287,jna,"fix javadoc warnings, move interface method definitions to WinNT from WinBase/Separate NIO buffer mappings between Kernel32 and CoreDLL/clean up w32 platform sources/correct mappings causing failure on win64/"
,,0.0697,jna,ensure separated buffer tests still work/
,,0.4098,jna,"Removed Windows style new line Had to remove a windows style new line to get the buid runnig with cywin Added com port stuff Added the follwing methods to com.sun.jna.platform.win32.Kernel32: boolean GetCommState(HANDLE hFile, WinBase.DCB lpDCB); boolean GetCommTimeouts(HANDLE hFile, WinBase.COMMTIMEOUTS lpCommTimeouts); boolean SetCommState(HANDLE hFile, WinBase.DCB lpDCB); boolean SetCommTimeouts(HANDLE hFile, WinBase.COMMTIMEOUTS lpCommTimeouts); Added the following structure to com.sun.jna.platform.win32.WinBase: DCB Added some new UnitTests Added new CHANGELOG entries. Fixed text Added com port stuff Added the follwing methods to com.sun.jna.platform.win32.Kernel32: boolean GetCommState(HANDLE hFile, WinBase.DCB lpDCB); boolean GetCommTimeouts(HANDLE hFile, WinBase.COMMTIMEOUTS lpCommTimeouts); boolean SetCommState(HANDLE hFile, WinBase.DCB lpDCB); boolean SetCommTimeouts(HANDLE hFile, WinBase.COMMTIMEOUTS lpCommTimeouts); Added the following structure to com.sun.jna.platform.win32.WinBase: DCB Added some new UnitTests/Found and fixed duplicate method definitions for the same API/"
,,0.0737,jna,Add GetProcAddress to allow accessing functions exported by ordinal ... and not by name (available on win32)/
,,0.1155,jna,"Dont use NativeLong, equivalent to int on Windows./Second attempt at fixing the crash in Netapi32Util. This time we change the definition of Netapi32.DsEnumerateDomainTrusts. Crash is still not happening and this fix is more likely to be correct./"
,,0.0653,jna,Re-added missing declaration./Merged 3.5.0 from master./Fix: Netapi32Test broken./
,,0.0993,jna,"Added new library Mpr and functions to Netapi32 Added com.sun.jna.platform.win32.Mpr, com.sun.jna.platform.win32.LmShare, and com.sun.jna.platform.win32.Winnetwk Added ACCESS_* definitions to com.sun.jna.platform.win32.LmAccess Added NetShareAdd and NetShareDel to com.sun.jna.platform.win32.Netapi32/"
,,0.1083,jna,"Dont use NativeLong, equivalent to int on Windows./Test for null on fields in initializeFields()./Fix: platform.win32.Secur32.AcquireCredentialsHandle, InitializeSecurityContext and AcceptSecurityContext./"
,,0.0939,jna,Added Secur32#QueryContextAttributes e.g. to retrieve package info/
,,0.1019,jna,"Dont use NativeLong, equivalent to int on Windows./"
,,0.0919,jna,Added Secur32#QueryContextAttributes e.g. to retrieve package info/
,,0.0681,jna,"Added CoTaskMemAlloc, CoTaskMemRealloc and CoTaskMemFree to com.sun.jna.platform.win32.Ole32./"
,,0.066,jna,"Added CoTaskMemAlloc, CoTaskMemRealloc and CoTaskMemFree to com.sun.jna.platform.win32.Ole32./"
,,0.0818,jna,clean up w32 platform sources/correct mappings causing failure on win64/
,,0.1083,jna,"fix some unsigned pointer-aliasing types, platform/win32/Using int and IntByReference for ULONG, also added ULONG./"
,,0.0833,jna,fix shell32 alignment on win64/correct mappings causing failure on win64/
,,0.0977,jna,"Dont use NativeLong, equivalent to int on Windows./"
,,0.0609,jna,"fix javadoc warnings, move interface method definitions to WinNT from WinBase/"
,,0.0899,jna,"fix some unsigned pointer-aliasing types, platform/win32/"
,,0.073,jna,Added Win32 Monitor Configuration API in com.sun.jna.platform.win32.Dxva2./
,,0.0874,jna,Use generic definition of Native#loadLibrary/
,,0.0673,jna,"Fix: use a different CLSID, remove dependency on Word./"
,,0.0813,jna,Added Win32 Monitor Configuration API in com.sun.jna.platform.win32.Dxva2./
,,0.0744,jna,"User32: Added LockWorkStation, ExitWindowsEx, AdjustWindowRect[Ex], and Get/SetWindowPlacement. WinUser: Added ExitWindows codes, Window Style codes, and the WindowPlacement structure./"
,,0.1364,jna,"Addition win32 api : SendMessage, GetActiveWindow, COPYDATASTRUCT and a few constants + a demo application (#774) * Added a few mapping of win32 api : SendMessage and GetActiveWindow. Added some constants and structures (COPYDATASTRUCT and CWPSTRUCT from the win 32 api. Added a Win32WindowMessagesDemo to demonstrate complex messages exchange through WM_COPYDATA and with a hooked winproc. * Corrections done to take into account, the comment of the pull request : cf * Replaced Win32WindowMessagesDemo.java by User32WindowMessagesTest.java * changed data types to int where appropriate * added pull request in CHANGES.md * Addition of forgotten test class : User32WindowMessagesTest.java * Correction of compilation error of unit test/com/sun/jna/platform/win32/User32WindowMessagesTest.java detected by travis with jdk 6. * Merged from jna master to be up to date with 4.4 release. Corrected comments and license info./"
,,0.0819,jna,Added PRINTER_INFO_4. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fixed spool tests for cases where no printers are available. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.066,jna,manual handling of wchar vs char/
,,0.08199999999999999,jna,Drop StdCallLibrary inheritance from non-library interfaces Prefer String over WString Fix some w32 API callback types to be stdcall Fix platform test execution from top level test-platform target/
,,0.0851,jna,Some Changes to the COM support New feature for supporting also DispId`s for Tlb generation. Added new parameter to TlbImp source code generator for selecting a custom output directory./
,,0.1119,jna,Update msoffice samples with two MSDN demos and test compatibility The office samples were verified for these environments: Platform Windows 10 64Bit: * Java 1.8.0_77 64 Bit + Office 2013 64 Bit (Testversion) * Java 1.8.0_77 32 Bit + Office 2013 64 Bit (Testversion) Platform Windows 7 64Bit: * Java 1.8.0_60 64 Bit + Office 2007 32 Bit * Java 1.8.0_60 32 Bit + Office 2007 32 Bit Closes
,,0.0669,jna,Use VARIANT primitive accessors in COMLateBindingObject#get*Property Closes
,,0.0762,jna,Some Changes to the COM support New feature for supporting also DispId`s for Tlb generation. Added new parameter to TlbImp source code generator for selecting a custom output directory./
,,0.0556,jna,some changes/some changes to typelib parsing/some changes/
,,0.0869,jna,Some Changes to the COM support New feature for supporting also DispId`s for Tlb generation. Added new parameter to TlbImp source code generator for selecting a custom output directory./
,,0.063,jna,some changes to typelib parsing/
,,0.0874,jna,fix incorrectly-named byReference classes to ByReference/
,,0.0887,jna,Some Changes to the COM support New feature for supporting also DispId`s for Tlb generation. Added new parameter to TlbImp source code generator for selecting a custom output directory./
,,0.0597,jna,some changes to find issue with JNA 4/
,,0.0772,jna,fix of issue#503 Add supporting of Linux-sparcv9 platform/
,,0.1154,jna,Add arm softfloat variant as platform armel add prebuild arm softfloat binaries add option to override prefix detection by specifying jna.prefix add prefix autodetection to platform code. Autodetection is based on the JVM image adjust build.xml to implement prefix detection Closes:
,,0.0597,jna,some changes to find issue with JNA 4/
,,0.075,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.1667,OpenDDS,Thu Jun 22 16:06:21 2006 2006 Yan Dai Apr 28 12:59:58 USMST 2006 Yan Dai Apr 23 22:50:40 USMST 2006 Yan Dai Apr 22 21:54:02 USMST 2006 Yan Dai Apr 21 01:09:00 USMST 2006 Yan Dai Apr 13 10:30:47 USMST 2006 Yan Dai Apr 11 10:10:41 USMST 2006 Yan Dai Apr 7 00:46:47 USMST 2006 Yan Dai
,,0.0664,OpenDDS,Thu Jun 22 16:06:21 2006 2006 Yan Dai Apr 7 00:46:47 USMST 2006 Yan Dai
,,0.0823,OpenDDS,Sun Apr 23 22:50:40 USMST 2006 Yan Dai Apr 22 21:54:02 USMST 2006 Yan Dai Apr 15 11:47:43 USMST 2006 Yan Dai
,,0.0865,OpenDDS,Thu Jun 22 16:06:21 2006 2006 Yan Dai Apr 21 01:09:00 USMST 2006 Yan Dai Apr 7 00:46:47 USMST 2006 Yan Dai
,,0.0686,OpenDDS,Thu Jun 22 16:06:21 2006 2006 Yan Dai Apr 7 00:46:47 USMST 2006 Yan Dai
,,0.1287,OpenDDS,Thu Jun 22 16:06:21 2006 2006 Yan Dai Jun 19 18:58:43 UTC 2006 Yan Dai May 1 13:16:56 USMST 2006 Yan Dai Apr 25 09:48:23 USMST 2006 Scott Harris Apr 21 01:09:00 USMST 2006 Yan Dai Apr 20 13:40:46 USMST 2006 Yan Dai Apr 13 10:30:47 USMST 2006 Yan Dai Apr 7 00:46:47 USMST 2006 Yan Dai Apr 7 00:46:47 USMST 2006 Yan Dai
,,0.0686,OpenDDS,Wed Feb 2 23:08:03 UTC 2011 Jeff Schmitz
,,0.2321,OpenDDS,"Tue Nov 22 17:36:45 UTC 2011 Phil Mesnier * dds/DCPS/DCPS_Utils.h: * dds/DCPS/DCPS_Utils.cpp: * dds/InfoRepo/DCPSInfoRepo.mpc: * dds/InfoRepo/DCPS_IR_Publication.cpp: * dds/InfoRepo/DCPS_IR_Subscription.cpp: * dds/InfoRepo/DCPS_IR_Topic.cpp: * dds/InfoRepo/DCPS_IR_Topic_Description.cpp: * dds/InfoRepo/DCPS_Utils.h: * dds/InfoRepo/DCPS_Utils.cpp: Moved the DCPS Utils to DCPS so that they can be used by either the InfoRepo or the new RTPS discovery infrastructure. The CompatibleQOS functions were modified slightly to remove a dependency on other InfoRepo classes, thus the changes to the DCPS_IR* classes./"
,,0.2367,OpenDDS,"Tue Nov 22 17:36:45 UTC 2011 Phil Mesnier * dds/DCPS/DCPS_Utils.h: * dds/DCPS/DCPS_Utils.cpp: * dds/InfoRepo/DCPSInfoRepo.mpc: * dds/InfoRepo/DCPS_IR_Publication.cpp: * dds/InfoRepo/DCPS_IR_Subscription.cpp: * dds/InfoRepo/DCPS_IR_Topic.cpp: * dds/InfoRepo/DCPS_IR_Topic_Description.cpp: * dds/InfoRepo/DCPS_Utils.h: * dds/InfoRepo/DCPS_Utils.cpp: Moved the DCPS Utils to DCPS so that they can be used by either the InfoRepo or the new RTPS discovery infrastructure. The CompatibleQOS functions were modified slightly to remove a dependency on other InfoRepo classes, thus the changes to the DCPS_IR* classes./"
,,0.2473,OpenDDS,"Tue Nov 22 17:36:45 UTC 2011 Phil Mesnier * dds/DCPS/DCPS_Utils.h: * dds/DCPS/DCPS_Utils.cpp: * dds/InfoRepo/DCPSInfoRepo.mpc: * dds/InfoRepo/DCPS_IR_Publication.cpp: * dds/InfoRepo/DCPS_IR_Subscription.cpp: * dds/InfoRepo/DCPS_IR_Topic.cpp: * dds/InfoRepo/DCPS_IR_Topic_Description.cpp: * dds/InfoRepo/DCPS_Utils.h: * dds/InfoRepo/DCPS_Utils.cpp: Moved the DCPS Utils to DCPS so that they can be used by either the InfoRepo or the new RTPS discovery infrastructure. The CompatibleQOS functions were modified slightly to remove a dependency on other InfoRepo classes, thus the changes to the DCPS_IR* classes./"
,,0.0686,OpenDDS,Mon Dec 12 20:55:57 UTC 2011 Jeff Schmitz
,,0.0673,OpenDDS,Fri Jan 27 17:48:31 UTC 2012 Jeff Schmitz Dec 12 20:55:57 UTC 2011 Jeff Schmitz
,,0.066,OpenDDS,committing work in progress on moving the ORB to the inforepodiscovery library/
,,0.066,OpenDDS,committing work in progress on moving the ORB to the inforepodiscovery library/
,,0.066,OpenDDS,committing work in progress on moving the ORB to the inforepodiscovery library/
,,0.0686,OpenDDS,Wed Jun 6 21:43:48 UTC 2012 Byron Harris work in progress on moving the ORB to the inforepodiscovery library/
,,0.0686,OpenDDS,ChangeLogTag: Tue Sep 30 22:55:34 UTC 2014 Phillip LaBanca
,,0.0643,OpenDDS,"String conversion: transport config, inst, registry/"
,,0.0852,OpenDDS,FACE mapping for strings and structs./FACE mapping for typedefs of basic types and strings./
,,0.0776,OpenDDS,Changed to size_t to avoid warning during comparison with capacity_/First commit of changes for wait_for_ack to branch/
,,0.0792,OpenDDS,"convert std::map to OPENDDS_MAP and OPENDDS_MAP_CMP/First commit of changes for wait_for_ack to branch/ChangeLogTag: Fri Feb 6 21:12:24 UTC 2015 Adam Mitz Jan 28 18:42:02 UTC 2015 Justin Wilson Jan 27 18:15:04 UTC 2015 Justin Wilson Jan 23 22:08:38 UTC 2015 Paul Calabrese to send_links, pending_data, and get_unsent_data with add_sending_data/"
,,0.0716,OpenDDS,Moved TypeSupportImpl to template./
,,0.0681,OpenDDS,Added support to generation of ITL./
,,0.1207,OpenDDS,Added missing headers from ZeroCopyInfoSeq_T.h absence. Added CORBA::String_var setter to unions to avoid implicit conversion. Fixed SampleInfoSeq constructors./Added constructor for test./Support for boolean discriminators in langmap generator./Added for IDL fixed data type in FACE code generation./
,,0.0809,OpenDDS,Support from boolean discriminants in unions for marshall generator and metaclass generator./Added support to generation of ITL./
,,0.0872,OpenDDS,Support for boolean discriminators in langmap generator./Support from boolean discriminants in unions for marshall generator and metaclass generator./
,,0.0872,OpenDDS,Refactoring to provide easier common conversions to OPENDDS_STRING for logging in Safety Profile builds/
,,0.0923,OpenDDS,Eliminate warnings from classes that now have overloaded operators new/delete./
,,0.0989,OpenDDS,Refactoring to provide easier common conversions to OPENDDS_STRING for logging in Safety Profile builds/Simplify since sizeof(octet) is always 1/Remove use of streams when interacting with Guid and GuidConverter. Added header for stream includes allowed/not allowed in SafetyProfile/
,,0.066,OpenDDS,return const char* since only dealing with string literals/
,,0.1319,OpenDDS,"Apply changes to transports: RtpsUdp, Tcp, and some additional to Udp and tests to keep track of local address string as configured as private member data and use accessors where needed./"
,,0.1339,OpenDDS,"Apply changes to transports: RtpsUdp, Tcp, and some additional to Udp and tests to keep track of local address string as configured as private member data and use accessors where needed./"
,,0.1174,OpenDDS,Refactor open_dual_stack_socket into one function to open the appropriate type of socket for the configuration. Fix issues with IPV6 builds in the transport tests to use correct sockets and address types./
,,0.1339,OpenDDS,"Apply changes to transports: RtpsUdp, Tcp, and some additional to Udp and tests to keep track of local address string as configured as private member data and use accessors where needed./"
,,0.1339,OpenDDS,"Apply changes to transports: RtpsUdp, Tcp, and some additional to Udp and tests to keep track of local address string as configured as private member data and use accessors where needed./"
,,0.063,OpenDDS,remove warning/
,,0.1102,OpenDDS,UDP transport: keep track of local address string as configured as private member data apply Windows-specific socket ioctl for connection reset improved debug logging/
,,0.2677,OpenDDS,"Provide helper function to set local address port and update the local address string with new port. Remove last direct accesses to local_address member variables and use helper functions/UDP transport: keep track of local address string as configured as private member data apply Windows-specific socket ioctl for connection reset improved debug logging/Remove unnecessary check for active connection side when setting socket parameter/Check to see if local address has been configured, else use canonical address. Open Dual-Stack Socket on IPV6 builds where supported to allow communication with both IPV6 and IPV4 addresses/"
,,0.2547,OpenDDS,"Provide helper function to set local address port and update the local address string with new port. Remove last direct accesses to local_address member variables and use helper functions/Check to see if local address has been configured, else use canonical address. Open Dual-Stack Socket on IPV6 builds where supported to allow communication with both IPV6 and IPV4 addresses/Revert ""Revert ""Static discovery""""/"
,,0.2778,OpenDDS,"Fix type conversions for wchar builds/Apply changes to transports: RtpsUdp, Tcp, and some additional to Udp and tests to keep track of local address string as configured as private member data and use accessors where needed./Check to see if local address has been configured, else use canonical address. Open Dual-Stack Socket on IPV6 builds where supported to allow communication with both IPV6 and IPV4 addresses/Revert ""Revert ""Static discovery""""/"
,,0.3311,OpenDDS,"Fix ACE_ERROR_RETURN call/Do not log errors in helper function, rather log warnings and let calling code determine how to deal with failures/Fix socket name in refactored method/Fix variable name in refactored method/Refactor open_dual_stack_socket into one function to open the appropriate type of socket for the configuration. Fix issues with IPV6 builds in the transport tests to use correct sockets and address types./Some minor changes predominantly addressing style/Fix typo./Fix unused map argument compiler warning/Provide ability for RtpsDiscovery to populate locators for all useable interfaces when local_address_ has not been configured to allow peers to connect on any available address (IPV4/IPV6)./Remove unnecessary check for active connection side when setting socket parameter/Check to see if local address has been configured, else use canonical address. Open Dual-Stack Socket on IPV6 builds where supported to allow communication with both IPV6 and IPV4 addresses/Update type of ttl to be consistent (using unsigned char)/Fix issues with IPV6 enabled builds on Windows./"
,,0.1579,OpenDDS,Refactor open_dual_stack_socket into one function to open the appropriate type of socket for the configuration. Fix issues with IPV6 builds in the transport tests to use correct sockets and address types./Remove unnecessary check for active connection side when setting socket parameter/
,,0.1002,OpenDDS,"Finished disconnect/reconnect logic for static discovery./Revert ""Revert ""Static discovery""""/"
,,0.1101,OpenDDS,"Warnings fixes for Visual C++./Revert ""Revert ""Static discovery""""/"
,,0.1906,OpenDDS,"Factor out logic to determine if ipv4 addresses should be mapped to ipv6./Introduce dual-stack sockets to Spdp and RtpsUdp for IPV6 builds that support dual-stack. Remove need to track 2 separate sockets one for each address type in the data link. For IPV4 destinations, map IPV4 to IPV6 address for use with dual-stack sockets./Finished disconnect/reconnect logic for static discovery./Revert ""Revert ""Static discovery""""/"
,,0.2683,OpenDDS,"Fix issue where locator was being improperly set due to local_address_string being non empty, but only populated with the updated port number and no address. Need to detect this scenario and populate locator with appropriate interfaces./Apply changes to transports: RtpsUdp, Tcp, and some additional to Udp and tests to keep track of local address string as configured as private member data and use accessors where needed./Minor changes to style/Provide ability for RtpsDiscovery to populate locators for all useable interfaces when local_address_ has not been configured to allow peers to connect on any available address (IPV4/IPV6)./Revert ""Revert ""Static discovery""""/"
,,0.1894,OpenDDS,"Provide helper function to set local address port and update the local address string with new port. Remove last direct accesses to local_address member variables and use helper functions/Revert ""Revert ""Static discovery""""/"
,,0.2458,OpenDDS,"Provide helper function to set local address port and update the local address string with new port. Remove last direct accesses to local_address member variables and use helper functions/Apply changes to transports: RtpsUdp, Tcp, and some additional to Udp and tests to keep track of local address string as configured as private member data and use accessors where needed./Revert ""Revert ""Static discovery""""/"
,,0.0616,OpenDDS,Fix some logging. Fix sizing for formateNameForDump method/Condense different diagnostic functions into one scheme/
,,0.066,OpenDDS,Refactor RemoveAssociationSweeper into one template class for use in both DataReaderImpl and RecorderImpl/
,,0.2137,OpenDDS,Fix unused map argument compiler warning/Determine when to use a dual socket based on the configured local address. Use the configuration of the socket (and configured local address) to determine whether IPV4 locators should have their IPV4 addresses mapped to IPV6 for use with a dual stack socket. Only set IPV6_V6ONLY option on a dual stack socket where determined to be applicable./
,,0.153,OpenDDS,"Apply changes to transports: RtpsUdp, Tcp, and some additional to Udp and tests to keep track of local address string as configured as private member data and use accessors where needed./Reworked DataLink::pub_map_ and sub_map_ replacing custom classes RepoIdSet and RepoIdSetMap with STL. Use a common typedef for std::map<RepoId> throughout./Revert ""Revert ""Static discovery""""/"
,,0.0673,OpenDDS,Warnings fixes for Visual C++./Added new configurable value SedpLocalAddress to rtps_discovery section/
,,0.2674,OpenDDS,"Sedp Fix issue where locator was being improperly set due to local_address_string being non empty, but only populated with the updated port number and no address. Need to detect this scenario and populate locator with appropriate interfaces./Revert changes to Sedp which would create dependency on transport library/Apply changes to transports: RtpsUdp, Tcp, and some additional to Udp and tests to keep track of local address string as configured as private member data and use accessors where needed./Some minor changes predominantly addressing style/Factor out logic to determine if ipv4 addresses should be mapped to ipv6./Provide ability for RtpsDiscovery to populate locators for all useable interfaces when local_address_ has not been configured to allow peers to connect on any available address (IPV4/IPV6)./Corrected code for setting local address on transport inst used by SEDP./Reworked DataLink::pub_map_ and sub_map_ replacing custom classes RepoIdSet and RepoIdSetMap with STL. Use a common typedef for std::map<RepoId> throughout./Revert ""Revert ""Static discovery""""/"
,,0.2069,OpenDDS,Determine when to use a dual socket based on the configured local address. Use the configuration of the socket (and configured local address) to determine whether IPV4 locators should have their IPV4 addresses mapped to IPV6 for use with a dual stack socket. Only set IPV6_V6ONLY option on a dual stack socket where determined to be applicable./
,,0.2514,OpenDDS,"discovered participant data does not use map argument, remove./Provide ability for RtpsDiscovery to populate locators for all useable interfaces when local_address_ has not been configured to allow peers to connect on any available address (IPV4/IPV6)./Introduce dual-stack sockets to Spdp and RtpsUdp for IPV6 builds that support dual-stack. Remove need to track 2 separate sockets one for each address type in the data link. For IPV4 destinations, map IPV4 to IPV6 address for use with dual-stack sockets./Revert ""Revert ""Static discovery""""/"
,,0.0609,OpenDDS,Fix unused arg compiler warning./
,,0.065,OpenDDS,"Prefix parameter with DCPS, always check for CDR alignment, fix fuzz, test inclusion/Add to command line, fix parsing/Seriailize/deserialize according to observed RTI serialization logic for RTPS when configured to do so./Revert ""Revert ""Static discovery""""/"
,,0.1139,OpenDDS,MSVC14 support requires workaround to avoid compiler-generated copy ctor and assignment for a few classes/
,,0.1319,OpenDDS,"Apply changes to transports: RtpsUdp, Tcp, and some additional to Udp and tests to keep track of local address string as configured as private member data and use accessors where needed./"
,,0.0704,OpenDDS,"Bug fixes, RtiSerialization test/Seriailize/deserialize according to observed RTI serialization logic for RTPS when configured to do so./"
,,0.1045,OpenDDS,MSVC14 support requires workaround to avoid compiler-generated copy ctor and assignment for a few classes/
,,0.2317,OpenDDS,"Add Safety profile builds must be configured with an address for discovery and transport. One way to do this is to specify a local_address in the configuration file. To avoid (1) manually editing every test configuration file and (2) parsing every configuration file to determine if and how the local_address should appear, we introduced a configuration variable for the common section (and command-line option) called DCPSDefaultAddress. The default address overrides any that would be determined automatically but does not override a local_address appearing in a file. This commit introduces the following changes: * Adds default_address to the Service_Participant. * Causes Sedp to use the default address when computing locators for Spdp. * Causes Rtps to use the default address when computing locators for Sedp. * The test framework will set the default address when DOC_TEST_*_IP_ADDRESS is defined./"
,,0.2317,OpenDDS,"Add Safety profile builds must be configured with an address for discovery and transport. One way to do this is to specify a local_address in the configuration file. To avoid (1) manually editing every test configuration file and (2) parsing every configuration file to determine if and how the local_address should appear, we introduced a configuration variable for the common section (and command-line option) called DCPSDefaultAddress. The default address overrides any that would be determined automatically but does not override a local_address appearing in a file. This commit introduces the following changes: * Adds default_address to the Service_Participant. * Causes Sedp to use the default address when computing locators for Spdp. * Causes Rtps to use the default address when computing locators for Sedp. * The test framework will set the default address when DOC_TEST_*_IP_ADDRESS is defined./"
,,0.2239,OpenDDS,"Add Safety profile builds must be configured with an address for discovery and transport. One way to do this is to specify a local_address in the configuration file. To avoid (1) manually editing every test configuration file and (2) parsing every configuration file to determine if and how the local_address should appear, we introduced a configuration variable for the common section (and command-line option) called DCPSDefaultAddress. The default address overrides any that would be determined automatically but does not override a local_address appearing in a file. This commit introduces the following changes: * Adds default_address to the Service_Participant. * Causes Sedp to use the default address when computing locators for Spdp. * Causes Rtps to use the default address when computing locators for Sedp. * The test framework will set the default address when DOC_TEST_*_IP_ADDRESS is defined./"
,,0.2545,OpenDDS,"Fix wide character builds/Add Safety profile builds must be configured with an address for discovery and transport. One way to do this is to specify a local_address in the configuration file. To avoid (1) manually editing every test configuration file and (2) parsing every configuration file to determine if and how the local_address should appear, we introduced a configuration variable for the common section (and command-line option) called DCPSDefaultAddress. The default address overrides any that would be determined automatically but does not override a local_address appearing in a file. This commit introduces the following changes: * Adds default_address to the Service_Participant. * Causes Sedp to use the default address when computing locators for Spdp. * Causes Rtps to use the default address when computing locators for Sedp. * The test framework will set the default address when DOC_TEST_*_IP_ADDRESS is defined./"
,,0.1102,OpenDDS,"Import the Intermediate Type Language (itl) library which was previously in a separate git repo. If itl is used (MPC feature no_itl=0), the rapidjson library is needed and can be obtained via git submodules./"
,,0.073,OpenDDS,Spdp: fix Spdp local addr if rtsp is not used/RTPS: Add new config option SpdpLocalAddress for configuration of the SPDP Interface. Default to DCPSDefaultAddress if set/
,,0.0689,OpenDDS,Spdp: fix Spdp local addr if rtsp is not used/RTPS: Add new config option SpdpLocalAddress for configuration of the SPDP Interface. Default to DCPSDefaultAddress if set/
,,0.0673,OpenDDS,Avoid implicit conversion from pointer to RcHandle/
,,0.0673,OpenDDS,Avoid implicit conversion from pointer to RcHandle/
,,0.0673,OpenDDS,Avoid implicit conversion from pointer to RcHandle/
,,0.0642,OpenDDS,Remove unnecessary reference bumping of TransportInst objects/Avoid implicit conversion from pointer to RcHandle/Fix DataWriterImpl accessed after deletion bug/
,,0.0828,OpenDDS,Addressing Coverity Scan CID: 1231781. Set stale pointer to null after release_buffer to not pass freed pointer to wakeup_blocking_writers./
,,0.1027,OpenDDS,"Addressing Coverity Scan CID: 1392343 . Check length for validity before calling strncpy to guarantee no truncation and null termination of interface name before passing to ioctl. reference socket manpage: ""The passed option is a variable-length null-terminated interface name string with the maximum size of IFNAMSIZ.""/Interface-specific MAC in GUID for Win32, other cleanup/Allow configurable override of which interfaces MAC addr is used for RTPS GUID generator (Linux only for now)./"
,,0.0726,OpenDDS,"Extend logging in case of a failure * dds/DCPS/DomainParticipantImpl.cpp:/Check if we have a typesupport found, if not, log an error instead of crashing on a nil pointer * dds/DCPS/DomainParticipantImpl.cpp:/Added make_rch() template functions/Avoid implicit conversion from pointer to RcHandle/"
,,0.0784,OpenDDS,Addressing Coverity Scan CID: 1380559. Check length for validity before calling strncpy to guarantee no truncation and null termination./
,,0.0724,OpenDDS,Addressing Coverity Scan CID: 1380558. Check length for validity before calling strncpy to guarantee no truncation and null termination./
,,0.0804,OpenDDS,Addressing Coverity Scan CID: 1380558. Check length for validity before calling strncpy to guarantee no truncation and null termination./
,,0.11199999999999999,OpenDDS,Fix for issue multi-dimensional arrays of primitive types. Need to dereference the higher dimensional array to treat it as linear./
,,0.0757,OpenDDS,"Code refactoring 1. Replace explicit mutex acquire(), release() usages with RAII idiom 2. Change readerDoesNotExistsCallBacks from member variable to local variable./"
,,0.066,OpenDDS,More efficient deserialization * dds/DCPS/Definitions.h:/
,,0.106,OpenDDS,"Implemented std::(w)string insertion and extraction for the Serializer. Serializer.h has to include Definitions.h to get the correct setting of DDS_HAS_WCHAR but this lead to a cyclic include, moved SequenceNumber out of Definitions.h to break this. Updated some other files to include the new SequenceNumber.h. This implements issue * dds/DCPS/SequenceNumber.h: Added. * dds/DCPS/CoherentChangeControl.h: * dds/DCPS/DataSampleHeader.h: * dds/DCPS/Definitions.h: * dds/DCPS/DisjointSequence.h: * dds/DCPS/Serializer.h: * dds/DCPS/Serializer.inl: * dds/DCPS/transport/framework/TransportHeader.h: * dds/DCPS/transport/framework/TransportQueueElement.h: * dds/DCPS/transport/rtps_udp/RtpsTransportHeader.h: * tests/DCPS/Serializer/SerializerTest.cpp:/"
,,0.0685,OpenDDS,Initialise local variables to resolve gcc warnings * dds/DCPS/RTPS/RtpsDiscovery.cpp:/
,,0.1026,OpenDDS,"fixed warnings, restored MultiTopics error messages to have correct int to string conversion/"
,,0.0833,OpenDDS,Regenerated with latest xsc * dds/DCPS/QOS_XML_Handler/dds_qos.cpp: * dds/DCPS/QOS_XML_Handler/dds_qos.hpp:/
,,0.0792,OpenDDS,Renamed method for consistency/Applied review comments for AccessControlBuiltinImpl./Changed argument names to better fit their use/Fixed constness and added virtual destructor/
,,0.0669,OpenDDS,"Added topicIsBit(char* name, char* type) Added Inline Utility Function that says if a topic is a BIT based on its name and type strings./"
,,0.0804,OpenDDS,safety profile: adapt std allocators change to work with older GCC versions/
,,0.0702,OpenDDS,Add Missing ACE_TEXTs to concated literals/
,,0.0702,OpenDDS,Add Missing ACE_TEXTs to concated literals/
,,0.0724,OpenDDS,opendds_idl: Rename Sample Type Annotation/Infrastructure For Support Also Added
,,0.0744,OpenDDS,opendds_idl: Rename Sample Type Annotation/
,,0.0704,OpenDDS,opendds_idl: Rename Sample Type Annotation/Infrastructure For Support Also Added
,,0.2274,OpenDDS,"fixes for v8 generation including support for arrays, adding rapidjson generator and support for disabling default generators and adding arbitrary includes to cpp files to command line (to support additional typesupport generation for types that are already included in core library)/resolving code review comments for direct output, refactoring and hex-support for all int-types/type converter helper functions, fixes for copyFromV8 for structs / sequences, implement helper functions/initial stab at v8 publishing type support, compiles for bng but needs more testing/"
,,0.0823,OpenDDS,Addressed TODO comments; no need for separate library in RtpsRelay/
,,0.0738,OpenDDS,"fixing bug setting prev_dst in send_bundled_responses, switching static discovery acknacks to use send_bundled_replies, adding mutex protection to static discovery test listener/"
,,0.0576,OpenDDS,Add missing c_str()/Change delete_datareader errors to warnings/Log why delete_datareader fails/
,,0.1025,OpenDDS,Update tools/rtpsrelay/RelayHandler.h Co-Authored-By: Adam Mitz tools/rtpsrelay/RelayHandler.h Co-Authored-By: Adam Mitz tools/rtpsrelay/RelayHandler.h Co-Authored-By: Adam Mitz unnecessary conversions between strings and addresses/fixup Relay addresses not updated when client changes servers/
,,0.066,OpenDDS,using purpose-created ACE macro for TCHAR/CHAR conversion/
,,0.0786,OpenDDS,fixing versioned namespace issue for opendds_idl json generators/
,,0.0765,OpenDDS,fixing versioned namespace issue for opendds_idl json generators/
,,0.0744,OpenDDS,fixing versioned namespace issue for opendds_idl json generators/
,,0.075,OpenDDS,addressing compile errors and review comments... renaming a few things and pushing magic numbers into configurable locations/
,,0.0634,pljava,General clean-up of threading and fence mechanisms./Initial revision/
,,0.0681,pljava,Fixed some gcjh compiler problems/
,,0.10800000000000001,pljava,Runtime detection of integer-datetimes/
,,0.1121,pljava,Runtime detection of integer-datetimes/
,,0.0838,pljava,Removed JavaHandle and complex MemoryContext stuff that was no longer needed./
,,0.0859,pljava,Removed JavaHandle and complex MemoryContext stuff that was no longer needed./
,,0.0625,pljava,*** empty log message ***/Prototype support for scalar UDTs Changed copyright/
,,0.066,pljava,*** empty log message ***/Fixed some memory leaks/
,,0.0854,pljava,Rewrite of the type mapping system/
,,0.0903,pljava,Type system refactoring/Added primitive array types/
,,0.0854,pljava,Rewrite of the type mapping system/
,,0.0618,pljava,Type system refactoring/
,,0.0744,pljava,Added primitive array types/
,,0.066,pljava,Type system refactoring/
,,0.0982,pljava,Type system refactoring/Added primitive array types/
,,0.1002,pljava,Type system refactoring/Added primitive array types/
,,0.0923,pljava,Type system refactoring/Added primitive array types/
,,0.1121,pljava,"fix SETOF SETOF VARCHAR in autogenerated SQL The annotation complexType ""SETOF VARCHAR"" ) was expanded to ""SETOF SETOF VARCHAR"" by the DDRWriter/reactivate compilation of module pljava-examples/"
,,0.1071,pljava,Fix to allow building pljava with Microsoft Visual C Code changes to allow compilation and linking with Microsoft Visual C. Maven build process conditionalized to to detect Visual C and adjust options appropriately. See msvc-build-notes.txt for full details. Property names updated for clarity/
,,0.172,pljava,"Change annotation keywords discussed on effects= type= SANDBOXED|UNSANDBOXED called= boolean condition new tracks PG9.0+ Also added called=INSTEAD_OF and columns={} to track PG. That is, the SQL generator can recognize them and generate the DDR; nothing is changed in PL/Java runtime yet./(Unbreaking) complete the ComplexScalar rename. Make the ComplexScalar example an annotation example, and remove the corresponding code from the hand-maintained examples.ddr./"
,,0.1591,pljava,"Change annotation keywords discussed on effects= type= SANDBOXED|UNSANDBOXED called= boolean condition new tracks PG9.0+ Also added called=INSTEAD_OF and columns={} to track PG. That is, the SQL generator can recognize them and generate the DDR; nothing is changed in PL/Java runtime yet./"
,,0.0981,pljava,"Rototill C source for PG_VERSION_NUM. Having committed to PG 8.2 as a minimum version, simplify all PGSQL_{MAJOR,MINOR,PATCH}_VER compiler conditionals to use PG_VERSION_NUM (which appeared in 8.2), and completely eliminate the branches for PG 8.2./Track PostgreSQLs changes to stack base access. set_stack_base() and restore_stack_base() were added in preference to direct access to stack_base_ptr (for 9.2, backpatched into 9.1.4, 9.0.8, 8.4.12, and 8.3.19). They require miscadmin.h to be included in those source files that use the STACK_BASE_PUSH / STACK_BASE_POP macros (there is so much in miscadmin.h, I did not want to add it in pljava.h and have it processed everywhere). Also added example ThreadTest.java just to exercise the new logic. However, if enabled to run from the deployment descriptor, it does deadlock; apparently PG J (otherthread PG) works, but the deeper PG J PG J (otherthread PG) does not, and I *suspect* its because of the JNI warning against mispairing bytecode monitorenters with JNI monitorexits. But that is what the code has done for years now, so if nothing has been reported, there must not be high demand for that use pattern./"
,,0.073,pljava,Limit add/drop of type mappings./
,,0.0949,pljava,"Make DEBUG1 quieter. Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the initial load message that identifies PL/Java and JVM versions. (This is NOTICE if PL/Java is explicitly LOADed, so its seen by default, but in other cases you can now see it by enabling DEBUG1, and not mixed in with a lot of other stuff.)/"
,,0.0884,pljava,"Add large object truncate and 64-bit offsets. PG 8.3 introduced inv_truncate, and 9.3 made offsets/lengths 64 bit. Whats nice is that the Java and JNI method signatures have always been 64-bit ready; now just stop downcasting to 32 on 9.3+ PostgreSQLs where 64 bit offsets are really accepted./"
,,0.0758,realm-java,Implemented configurable names of the generated classes (issue
,,0.1402,realm-java,"Fixed code generation from empty model class (issue code generation of tables ""add"" method (issue configurable names of the generated classes (issue fix of issue"
,,0.1993,realm-java,"Better workaround for relative URIs on OS X/Implemented auto-detection of Eclipse APT environment./Fixed the ""null folder"" bug in the code generator./Improved (and fixed) the ""field sorting"" mechanism./Various OS X related generator issues fixed/Improved field sorter to support multiple source folders (issue from errors to warnings for non-critical problems(issue the Table annotation into ""com.tightdb"" package (issue "".generated"" suffix in generated sources packages (issue configurable names of the generated classes (issue package name bugs in code generation (issue and issue check for a valid Java sources path configuration./"
,,0.0625,realm-java,Removed table as parameter to Query methods and TableView. Added TableBase.where() method./
,,0.1248,realm-java,"Supported float and double types in code generator and typed API./updated examples to new ""typed"" package from ""lib"". Still a few examples not fully working./"
,,0.0863,realm-java,"updated examples to new ""typed"" package from ""lib"". Still a few examples not fully working./"
,,0.0833,realm-java,Adjusted docs and examples to the refactoring (issue and issue
,,0.0639,realm-java,Added Javadoc to the typed API classes./
,,0.0677,realm-java,added jni bridge to getColumnIndex/multiple pivot operations added/initial trial of pivot/
,,0.0724,realm-java,Release unique_ptrs and let Java maintain ownership of native pointers./Realm Core has change namespace from tightdb to realm./
,,0.0677,realm-java,Fixed wrong key in son string/
,,0.276,realm-java,"Adding jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and"
,,0.0878,realm-java,"Add a check to prevent removing a RealmChangeListener from a non-Looper thread/Change modifier, remove unused var, and use new JUnit in RealmTest. * createAndTestFilename public private * remove unused variable get_data * Use assertEquals(expected, actual, delta) to compare floating-point numbers. assertEquals(expected, actual) for floating-pointer numbers is deprecated in JUnit. See also: double)/"
,,0.2728,realm-java,"RealmList.set() now correctly returns the old item. RealmList unit tests migrated to JUnit 4./Applying code review recommendations and adding removed from Realm tests. Review recommendations are from and and jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and Migration and Dynamic API. New Sort/Case enums. New RealmCache/"
,,0.2694,realm-java,"Add RealmList.removeAllFromRealm and Realm.clear * Add LinkView.removeAllTargetRows. * Add Realm.clear to remove all objects from Realm. * Add RealmList.removeAllFromRealm(). * Javadoc & test case update. Close jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and"
,,0.2772,realm-java,"Added RealmQuery.distinct(), RealmResults.distinct()/Adding jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and"
,,0.0652,realm-java,fix lint rawnings in unitTestExample/
,,0.1415,realm-java,"JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./"
,,0.14,realm-java,"JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./"
,,0.14,realm-java,"JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./"
,,0.0599,realm-java,Static native method needs jclass (#3276)/
,,0.0669,realm-java,"Wire the ""like"" predicate into RealmQuery (#3992) * Wire the ""like"" predicate into RealmQuery Fixes TableView and TableOrView YEAH/"
,,0.0941,realm-java,Add an overloaded 2 arg usernamePassword method that defaults createUser false Change the order of args for the custom method to match the iOS call Add unit tests as appropriate Fixes
,,0.1013,realm-java,Add an overloaded 2 arg usernamePassword method that defaults createUser false Change the order of args for the custom method to match the iOS call Add unit tests as appropriate Fixes
,,0.0857,realm-java,fixes (#5000) * fixes Adding user account lookup (#4882)/fixes (#4862) * fixes password using Admin user (#4694) add the ability to change a users password from an admin user/
,,0.1269,realm-java,Add SyncUser.allSessions() (#5047) * Add SyncUser.allSessions. * Update CHANGELOG.md * Update SyncUser.allSessions test. * PR feedback * Fix allSessions to exclude sessions in error state. * PR feedback * Update CHANGELOG.md/Change password using Admin user (#4694) add the ability to change a users password from an admin user/
,,0.0764,realm-java,Change password using Admin user (#4694) add the ability to change a users password from an admin user/
,,0.2794,realm-java,Permission APIs (#4558) Add PermissionManager as a convenience API on top of the __permission and __management realms. This PR adds support for Listing permissions Changing permissions Creating offers Accepting offers Revoking offers/Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2615,realm-java,Upgrade to Sync-RC21 and ROS 2.0.0-alpha.34 (#5277)/Permission APIs (#4558) Add PermissionManager as a convenience API on top of the __permission and __management realms. This PR adds support for Listing permissions Changing permissions Creating offers Accepting offers Revoking offers/Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/Align User Lookup implementation (#5109) * fixes annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.3366,realm-java,Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.3313,realm-java,Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.1057,rocksdb,"Bugfixes for iterator and documentation. Fix bug in Iterator::Prev where it would return the wrong key. Fixes issues 29 and 30. Added a tweak to testharness to allow running just some tests. Fixing two minor documentation errors based on issues 28 and 25. Cleanup; fix namespaces of export-to-C code. Also fix one ""const char*"" vs ""char*"" mismatch. git-svn-id: 62dab493-f737-651d-591e-8d6aee1b9529/"
,,0.0809,rocksdb,build shared libraries; updated version to 1.3; add Status accessors/
,,0.1411,rocksdb,"Added methods to write small ints to bit streams. Summary: Added BitStreamPutInt() and BitStreamGetInt() which take a stream of chars and can write integers of arbitrary bit sizes to that stream at arbitrary positions. There are also convenience versions of these functions that take std::strings and leveldb::Slices. Test Plan: make check Reviewers: sheki, vamsi, dhruba, emayanke Reviewed By: vamsi CC: leveldb Differential Revision:"
,,0.1411,rocksdb,"Added methods to write small ints to bit streams. Summary: Added BitStreamPutInt() and BitStreamGetInt() which take a stream of chars and can write integers of arbitrary bit sizes to that stream at arbitrary positions. There are also convenience versions of these functions that take std::strings and leveldb::Slices. Test Plan: make check Reviewers: sheki, vamsi, dhruba, emayanke Reviewed By: vamsi CC: leveldb Differential Revision:"
,,0.0929,rocksdb,"Add optional clang compile mode Summary: clang is an alternate compiler based on llvm. It produces nicer error messages and finds some bugs that gcc doesnt, such as the size_t change in this file (which caused some write return values to be misinterpreted) Clang isnt the default; to try it, do ""USE_CLANG=1 make"" or ""export USE_CLANG=1"" then make as normal Test Plan: ""make check"" and ""USE_CLANG=1 make check"" Reviewers: dhruba Reviewed By: dhruba Differential Revision:"
,,0.0621,rocksdb,Initialize sequence number in BatchResult issue
,,0.0857,rocksdb,"Print out stack trace in mac, too Summary: While debugging Mac-only issue with ThreadLocalPtr, this was very useful. Lets print out stack trace in MAC OS, too. Test Plan: Verified that somewhat useful stack trace was generated on mac. Will run PrintStack() on linux, too. Reviewers: ljin, haobo Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.0643,rocksdb,Fix more gflag namespace issues/
,,0.14800000000000002,rocksdb,"Dynamically choose SSE 4.2 Summary: Otherwise, if we compile on machine with SSE4.2 support and run it on machine without the support, we will fail. Test Plan: compiles, verified that isSse42() gets called. Reviewers: dhruba Reviewed By: dhruba CC: leveldb Differential Revision: RocksDB compile for iOS Summary: I had to make number of changes to the code and Makefile: * Add `make lib`, that will create static library without debug info. We need this to avoid growing binary too much. Currently its 14MB. * Remove cpuinfo() function and use __SSE4_2__ macro. We actually used the macro as part of Fast_CRC32() function. As a result, I also accidentally fixed this issue: * Remove __thread locals in OS_MACOSX Test Plan: `make lib PLATFORM=IOS` Reviewers: ljin, haobo, dhruba, sdong Reviewed By: haobo CC: leveldb Differential Revision: build a whole special Extend function for SSE 4.2. Disassembling the Extend function shows something that looks much more healthy now. The SSE 4.2 instructions are right there in the body of the function. Intel(R) Core(TM) i7-3540M CPU 3.00GHz Before: crc32c: 1.305 micros/op 766260 ops/sec; 2993.2 MB/s (4K per op) After: crc32c: 0.442 micros/op 2263843 ops/sec; 8843.1 MB/s (4K per op)/"
,,0.1533,rocksdb,"Make RocksDB compile for iOS Summary: I had to make number of changes to the code and Makefile: * Add `make lib`, that will create static library without debug info. We need this to avoid growing binary too much. Currently its 14MB. * Remove cpuinfo() function and use __SSE4_2__ macro. We actually used the macro as part of Fast_CRC32() function. As a result, I also accidentally fixed this issue: * Remove __thread locals in OS_MACOSX Test Plan: `make lib PLATFORM=IOS` Reviewers: ljin, haobo, dhruba, sdong Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.1104,rocksdb,"Make rocksdb work with all versions of lz4 Summary: There are some projects in fbcode that define lz4 dependency on r108. We, however, defined dependency on r117. That produced some interesting issues and our build system was not happy. This diff makes rocksdb work with both r108 and r117. Hopefully this will fix our problems. Test Plan: compiled rocksdb with both r108 and r117 lz4 Reviewers: dhruba, sdong, haobo Reviewed By: sdong CC: leveldb Differential Revision:"
,,0.2407,rocksdb,"[Java] Generalize dis-own native handle and refine dispose framework. Summary: 1. Move disOwnNativeHandle() function from RocksDB to RocksObject to allow other RocksObject to use disOwnNativeHandle() when its ownership of native handle has been transferred. 2. RocksObject now has an abstract implementation of dispose(), which does the following two things. First, it checks whether both isOwningNativeHandle() and isInitialized() return true. If so, it will call the protected abstract function dispose0(), which all the subclasses of RocksObject should implement. Second, it sets nativeHandle_ 0. This redesign ensure all subclasses of RocksObject have the same dispose behavior. 3. All subclasses of RocksObject now should implement dispose0() instead of dispose(), and dispose0() will be called only when isInitialized() returns true. Test Plan: make rocksdbjava make jtest Reviewers: dhruba, sdong, ankgup87, rsumbaly, swapnilghike, zzbennett, haobo Reviewed By: haobo Subscribers: leveldb Differential Revision:"
,,0.2431,rocksdb,"[Java] Generalize dis-own native handle and refine dispose framework. Summary: 1. Move disOwnNativeHandle() function from RocksDB to RocksObject to allow other RocksObject to use disOwnNativeHandle() when its ownership of native handle has been transferred. 2. RocksObject now has an abstract implementation of dispose(), which does the following two things. First, it checks whether both isOwningNativeHandle() and isInitialized() return true. If so, it will call the protected abstract function dispose0(), which all the subclasses of RocksObject should implement. Second, it sets nativeHandle_ 0. This redesign ensure all subclasses of RocksObject have the same dispose behavior. 3. All subclasses of RocksObject now should implement dispose0() instead of dispose(), and dispose0() will be called only when isInitialized() returns true. Test Plan: make rocksdbjava make jtest Reviewers: dhruba, sdong, ankgup87, rsumbaly, swapnilghike, zzbennett, haobo Reviewed By: haobo Subscribers: leveldb Differential Revision:"
,,0.0577,rocksdb,Call EnableFileDeletions with false as argument/
,,0.1153,rocksdb,"Explicitly cast char to signed char in Hash() Summary: The compilers we use treat char as signed. However, this is not guarantee of C standard and some compilers (for ARM platform for example), treat char as unsigned. Code that assumes that char is either signed or unsigned is wrong. This change explicitly casts the char to signed version. This will not break any of our use cases on x86, which, I believe are all of them. In case somebody out there is using RocksDB on ARM AND using bloom filters, theyre going to have a bad time. However, it is very unlikely that this is the case. Test Plan: sanity test with previous commit (with new sanity test) Reviewers: yhchiang, ljin, sdong Reviewed By: ljin Subscribers: dhruba, leveldb Differential Revision:"
,,0.2298,rocksdb,"32-Bit RocksJava resolution for jlong overflows Summary: This pull request solves the jlong overflow problem on 32-Bit machines as described in 1. There is a new org.rocksdb.test.PlatformRandomHelper to assist in getting random values. For 32 Bit the getLong method is overriden by xpromaches code above. For 64 Bit it behaves as is. 2. The detection should be cross-platform (Windows is supported though it is not ported completely yet). 3. Every JNI method which sets jlong values must check if the value fits into size_t. If it overflows size_t a InvalidArgument Status object will be returned. If its ok a OK Status will be returned. 4. Setters which have this check will throw a RocksDBException if its no OK Status. Additionally some other parts of code were corrected using the wrong type casts. Test Plan: make rocksdbjava make jtest Differential Revision: block based table config options/Add rate limiter/[Java] Include WriteBatch into RocksDBSample.java, fix how DbBenchmark.java handles WriteBatch. Summary: Include WriteBatch into RocksDBSample.java, fix how DbBenchmark.java handles WriteBatch. Previously DbBenchmark.java does not use WriteBatch when benchmarks is set to fillbatch. Test Plan: make rocksdbjava make jtest make jdb_bench cd java ./jdb_bench.sh Reviewers: naveenatceg, ljin, sdong, ankgup87 Reviewed By: ankgup87 Subscribers: leveldb Differential Revision:"
,,0.1949,rocksdb,"Iterator support for Write Batches/RocksJava Fix after MutableCFOptions change./[RocksJava] Column family support This commit includes the support for the following functionalities: Single Get/Put operations WriteBatch operations Single iterator functionality Open database with column families Open database with column families Read/Only Create column family Drop column family Properties of column families Listing of column families Fully backwards comptabile implementation Multi Iterator support MultiGet KeyMayExist Option to create missing column families on open In addition there is are two new Tests: Test of ColumnFamily functionality Test of Read only feature to open subsets of column families Basic test to test the KeyMayExist feature What is not supported currently using RocksJava: Custom ColumnFamilyOptions The following targets work as expected: make rocksdbjava make jtest Test environment: Ubuntu 14.04(LTS, x64), Java 1.7.0_65(OpenJDK IcedTea 2.5.2), g++ 4.8.2, kernel 3.13.0-35-generix/32-Bit RocksJava resolution for jlong overflows Summary: This pull request solves the jlong overflow problem on 32-Bit machines as described in 1. There is a new org.rocksdb.test.PlatformRandomHelper to assist in getting random values. For 32 Bit the getLong method is overriden by xpromaches code above. For 64 Bit it behaves as is. 2. The detection should be cross-platform (Windows is supported though it is not ported completely yet). 3. Every JNI method which sets jlong values must check if the value fits into size_t. If it overflows size_t a InvalidArgument Status object will be returned. If its ok a OK Status will be returned. 4. Setters which have this check will throw a RocksDBException if its no OK Status. Additionally some other parts of code were corrected using the wrong type casts. Test Plan: make rocksdbjava make jtest Differential Revision: for java build problem introduced by 5ec53f3edf62bec1b690ce12fb21a6c52203f3c8/Fix build/[Java] Fixed 32-bit overflowing issue when converting jlong to size_t Summary: Fixed 32-bit overflowing issue when converting jlong to size_t by capping jlong to std::numeric_limits<size_t>::max(). Test Plan: make rocksdbjava make jtest Reviewers: ankgup87, ljin, sdong, igor Reviewed By: igor Subscribers: leveldb Differential Revision: RocksDB java build Summary: as title Test Plan: make rocksdbjava Reviewers: sdong, yhchiang, igor Reviewed By: igor Subscribers: leveldb Differential Revision: path with arena==nullptr from NewInternalIterator Summary: Simply code by removing code path which does not use Arena from NewInternalIterator Test Plan: make all check make valgrind_check Reviewers: sdong Reviewed By: sdong Subscribers: leveldb Differential Revision:"
,,0.2656,rocksdb,"[RocksJava] Memtables update to 3.6 Adjusted HashLinkedList to 3.6.0 Adjusted SkipList to 3.6.0 Introduced a memtable test/32-Bit RocksJava resolution for jlong overflows Summary: This pull request solves the jlong overflow problem on 32-Bit machines as described in 1. There is a new org.rocksdb.test.PlatformRandomHelper to assist in getting random values. For 32 Bit the getLong method is overriden by xpromaches code above. For 64 Bit it behaves as is. 2. The detection should be cross-platform (Windows is supported though it is not ported completely yet). 3. Every JNI method which sets jlong values must check if the value fits into size_t. If it overflows size_t a InvalidArgument Status object will be returned. If its ok a OK Status will be returned. 4. Setters which have this check will throw a RocksDBException if its no OK Status. Additionally some other parts of code were corrected using the wrong type casts. Test Plan: make rocksdbjava make jtest Differential Revision: Fixed 32-bit overflowing issue when converting jlong to size_t Summary: Fixed 32-bit overflowing issue when converting jlong to size_t by capping jlong to std::numeric_limits<size_t>::max(). Test Plan: make rocksdbjava make jtest Reviewers: ankgup87, ljin, sdong, igor Reviewed By: igor Subscribers: leveldb Differential Revision:"
,,0.1262,rocksdb,Filters getting disposed by System.gc before EOL Previous to this commit Filters passed as parameters to the BlockTableConfig are disposed before they should be disposed. Further Smart pointer usage was corrected. Java holds now the smart pointer to the FilterPolicy correctly and cares about freeing underlying c++ structures./
,,0.2382,rocksdb,"[RocksJava] Extend Options with ColumnFamilyOptions implementation ColumnFamilyOptions implementation with tests [RocksJava] Extended ColumnFamilyTest Summary: Options Refactoring split part 3 Test Plan: make rocksdbjava make jtest Reviewers: yhchiang, ankgup87 Subscribers: dhruba Differential Revision: Flush functionality RocksJava now supports also flush functionality of RocksDB./[RocksJava] Extend Options with DBOptions implementation [RocksJava] Included DBOptionsTest and refactored OptionsTest Summary: Options refactoring Split Part2 Test Plan: make rocksdbjava make jtest Reviewers: yhchiang, ankgup87 Subscribers: dhruba Differential Revision: Options Refactoring 3.6 Summary: Options extends now two interfaces DBOptionsInterface and ColumnFamilyOptionsInterface. There are also further improvements to the Options bindings: Optimize methods were ported to Java. (OptimizeForPointLookup, OptimizeLevelCompaction, OptimizeUniversalCompaction). To align BuiltinComparator with every other Enum it was moved to a separate file. Test Plan: make rocksdbjava make jtest/Fix code style problems identified by lint/Add locking to comparator jni callback methods which must be thread-safe/32-Bit RocksJava resolution for jlong overflows Summary: This pull request solves the jlong overflow problem on 32-Bit machines as described in 1. There is a new org.rocksdb.test.PlatformRandomHelper to assist in getting random values. For 32 Bit the getLong method is overriden by xpromaches code above. For 64 Bit it behaves as is. 2. The detection should be cross-platform (Windows is supported though it is not ported completely yet). 3. Every JNI method which sets jlong values must check if the value fits into size_t. If it overflows size_t a InvalidArgument Status object will be returned. If its ok a OK Status will be returned. 4. Setters which have this check will throw a RocksDBException if its no OK Status. Additionally some other parts of code were corrected using the wrong type casts. Test Plan: make rocksdbjava make jtest Differential Revision: comparator(s) in RocksJava Extended Built-in comparators with ReverseBytewiseComparator. Reverse key handling is under certain conditions essential. E.g. while using timestamp versioned data. As native-comparators were not available using JAVA-API. Both built-in comparators were exposed via JNI to be set upon database creation time./Add rate limiter/[Java] Fixed 32-bit overflowing issue when converting jlong to size_t Summary: Fixed 32-bit overflowing issue when converting jlong to size_t by capping jlong to std::numeric_limits<size_t>::max(). Test Plan: make rocksdbjava make jtest Reviewers: ankgup87, ljin, sdong, igor Reviewed By: igor Subscribers: leveldb Differential Revision:"
,,0.1031,rocksdb,"fix a few compile warnings 1, const qualifiers on return types make no sense and will trigger a compile warning: warning: type qualifiers ignored on function return type [-Wignored-qualifiers] 2, class HistogramImpl has virtual functions and thus should have a virtual destructor 3, with some toolchain, the macro __STDC_FORMAT_MACROS is predefined and thus should be checked before define Change-Id: I69747a03bfae88671bfbb2637c80d17600159c99 Signed-off-by: liuhuahang"
,,0.1776,rocksdb,Prevent xxhash symbols from polluting global namespace Summary: The functions and global symbols in xxhash.h and xxhash.cc were not in any namespace. This caused issues when rocksdb library was being used along with other uses of libraries with the same name Test Plan: unit tests Reviewers: CC: Task ID: Blame Rev:/
,,0.1759,rocksdb,Prevent xxhash symbols from polluting global namespace Summary: The functions and global symbols in xxhash.h and xxhash.cc were not in any namespace. This caused issues when rocksdb library was being used along with other uses of libraries with the same name Test Plan: unit tests Reviewers: CC: Task ID: Blame Rev:/
,,0.1181,rocksdb,"maint: remove extraneous ""const"" attribute from return type Summary: The ""const"" attribute does not make sense on a return type, and provokes a warning/error from gcc Test Plan: Run ""make EXTRA_CXXFLAGS=-W and see fewer errors. Reviewers: ljin, sdong, igor.sugak, igor Reviewed By: igor Subscribers: dhruba Differential Revision:"
,,0.1253,rocksdb,"[RocksJava] 32-Bit adjustments Summary: Before this change overflowing size_t values led to a checked Exception. After that change: size_t overflows on 32-Bit architecture throw now an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly. This is especially an advantage for developers targeting 64-Bit systems because it is not necessary anymore to catch exceptions which are never thrown on a 64-Bit system. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.0809,rocksdb,"Fix RocksJava test failure due to deprecation of table_cache_remove_scan_count_limit Summary: table_cache_remove_scan_count_limit is marked as deprecated in RocksDB C++. (see rocksdb/options.h). This patch made necessary changes on RocksJava side. Test Plan: make rocksdbjava make jtest Reviewers: rven, igor, fyrz, adamretter, ankgup87, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.1086,rocksdb,"[RocksJava] Final usage correction Summary: Introduced final keyword to parameters with immutable values and classes which should not be derived. Test Plan: make rocksdbjava make jtest Reviewers: yhchiang, adamretter, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.1429,rocksdb,"fix erroneous assert: cast kBlockSize (of type unsigned int) to ""int"" Summary: Otherwise, we would assert that an unsigned expression is always >= 0. The intent was to form a possibly negative number, and to assert that that value is always >= 0, but since one variable in the computation was unsigned, the result was guaranteed to be unsigned, too, rendering the assertion useless. Cast that unsigned variable to ""int"", so that all operands are signed, and thus so that the result can be negative. Test Plan: Run ""make EXTRA_CXXFLAGS=-W and see fewer errors. Reviewers: ljin, sdong, igor.sugak, igor Reviewed By: igor Subscribers: dhruba Differential Revision:"
,,0.11699999999999999,rocksdb,"Cleanup CompactionJob Summary: Couple changes: 1. instead of SnapshotList, just take a vector of snapshots 2. dont take a separate parameter is_snapshots_supported. If there are snapshots in the list, that means they are supported. I actually think we should get rid of this notion of snapshots not being supported. 3. dont pass in mutable_cf_options as a parameter. Lifetime of mutable_cf_options is a bit tricky to maintain, so its better to not pass it in for the whole compaction job. We only really need it when we install the compaction results. Test Plan: make check Reviewers: sdong, rven, yhchiang Reviewed By: yhchiang Subscribers: dhruba, leveldb Differential Revision: remove extraneous ""const"" attribute from return type Summary: The ""const"" attribute does not make sense on a return type, and provokes a warning/error from gcc Test Plan: Run ""make EXTRA_CXXFLAGS=-W and see fewer errors. Reviewers: ljin, sdong, igor.sugak, igor Reviewed By: igor Subscribers: dhruba Differential Revision:"
,,0.4928,rocksdb,"Support saving history in memtable_list Summary: For transactions, we are using the memtables to validate that there are no write conflicts. But after flushing, we dont have any memtables, and transactions could fail to commit. So we want to someone keep around some extra history to use for conflict checking. In addition, we want to provide a way to increase the size of this history if too many transactions fail to commit. After chatting with people, it seems like everyone prefers just using Memtables to store this history (instead of a separate history structure). It seems like the best place for this is abstracted inside the memtable_list. I decide to create a separate list in MemtableListVersion as using the same list complicated the flush/installalflushresults logic too much. This diff adds a new parameter to control how much memtable history to keep around after flushing. However, it sounds like people arent too fond of adding new parameters. So I am making the default size of flushed+not-flushed memtables be set to max_write_buffers. This should not change the maximum amount of memory used, but make it more likely were using closer the the limit. (We are now postponing deleting flushed memtables until the max_write_buffer limit is reached). So while we might use more memory on average, we are still obeying the limit set (and you could argue its better to go ahead and use up memory now instead of waiting for a write stall to happen to test this limit). However, if people are opposed to this default behavior, we can easily set it to 0 and require this parameter be set in order to use transactions. Test Plan: Added a xfunc test to play around with setting different values of this parameter in all tests. Added testing in memtablelist_test and planning on adding more testing here. Reviewers: sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.141,rocksdb,"Fixed clang-build error in util/thread_local.cc Summary: This patch fixes the following clang-build error in util/thread_local.cc by using a cleaner macro blocker: 12:26:31 util/thread_local.cc:157:19: error: declaration shadows a static data member of rocksdb::ThreadLocalPtr::StaticMeta [-Werror,-Wshadow] 12:26:31 ThreadData* tls_ 12:26:31 ^ 12:26:31 util/thread_local.cc:19:66: note: previous declaration is here 12:26:31 __thread ThreadLocalPtr::ThreadData* ThreadLocalPtr::StaticMeta::tls_ nullptr; 12:26:31 ^ Test Plan: db_test Reviewers: sdong, anthony, IslamAbdelRahman, igor Reviewed By: igor Subscribers: dhruba Differential Revision:"
,,0.508,rocksdb,"Optimistic Transactions Summary: Optimistic transactions supporting begin/commit/rollback semantics. Currently relies on checking the memtable to determine if there are any collisions at commit time. Not yet implemented would be a way of enuring the memtable has some minimum amount of history so that we wont fail to commit when the memtable is empty. You should probably start with transaction.h to get an overview of what is currently supported. Test Plan: Added a new test, but still need to look into stress testing. Reviewers: yhchiang, igor, rven, sdong Reviewed By: sdong Subscribers: adamretter, MarkCallaghan, leveldb, dhruba Differential Revision: saving history in memtable_list Summary: For transactions, we are using the memtables to validate that there are no write conflicts. But after flushing, we dont have any memtables, and transactions could fail to commit. So we want to someone keep around some extra history to use for conflict checking. In addition, we want to provide a way to increase the size of this history if too many transactions fail to commit. After chatting with people, it seems like everyone prefers just using Memtables to store this history (instead of a separate history structure). It seems like the best place for this is abstracted inside the memtable_list. I decide to create a separate list in MemtableListVersion as using the same list complicated the flush/installalflushresults logic too much. This diff adds a new parameter to control how much memtable history to keep around after flushing. However, it sounds like people arent too fond of adding new parameters. So I am making the default size of flushed+not-flushed memtables be set to max_write_buffers. This should not change the maximum amount of memory used, but make it more likely were using closer the the limit. (We are now postponing deleting flushed memtables until the max_write_buffer limit is reached). So while we might use more memory on average, we are still obeying the limit set (and you could argue its better to go ahead and use up memory now instead of waiting for a write stall to happen to test this limit). However, if people are opposed to this default behavior, we can easily set it to 0 and require this parameter be set in order to use transactions. Test Plan: Added a xfunc test to play around with setting different values of this parameter in all tests. Added testing in memtablelist_test and planning on adding more testing here. Reviewers: sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.3692,rocksdb,"Windows Port from Microsoft Summary: Make RocksDb build and run on Windows to be functionally complete and performant. All existing test cases run with no regressions. Performance numbers are in the pull-request. Test plan: make all of the existing unit tests pass, obtain perf numbers. Co-authored-by: Praveen Rao Co-authored-by: Sherlock Huang Co-authored-by: Alex Zinoviev Co-authored-by: Dmitri Smirnov saving history in memtable_list Summary: For transactions, we are using the memtables to validate that there are no write conflicts. But after flushing, we dont have any memtables, and transactions could fail to commit. So we want to someone keep around some extra history to use for conflict checking. In addition, we want to provide a way to increase the size of this history if too many transactions fail to commit. After chatting with people, it seems like everyone prefers just using Memtables to store this history (instead of a separate history structure). It seems like the best place for this is abstracted inside the memtable_list. I decide to create a separate list in MemtableListVersion as using the same list complicated the flush/installalflushresults logic too much. This diff adds a new parameter to control how much memtable history to keep around after flushing. However, it sounds like people arent too fond of adding new parameters. So I am making the default size of flushed+not-flushed memtables be set to max_write_buffers. This should not change the maximum amount of memory used, but make it more likely were using closer the the limit. (We are now postponing deleting flushed memtables until the max_write_buffer limit is reached). So while we might use more memory on average, we are still obeying the limit set (and you could argue its better to go ahead and use up memory now instead of waiting for a write stall to happen to test this limit). However, if people are opposed to this default behavior, we can easily set it to 0 and require this parameter be set in order to use transactions. Test Plan: Added a xfunc test to play around with setting different values of this parameter in all tests. Added testing in memtablelist_test and planning on adding more testing here. Reviewers: sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision: an option wal_bytes_per_sync to control sync_file_range for WAL files Summary: sync_file_range is not always asyncronous and thus can block writes if we do this for WAL in the foreground thread. See more here: Some users dont want us to call sync_file_range on WALs. Some other do. Thus, Im adding a separate option wal_bytes_per_sync to control calling sync_file_range on WAL files. bytes_per_sync will apply only to table files now. Test Plan: no more sync_file_range for WAL as evidenced by strace Reviewers: yhchiang, rven, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.5156,rocksdb,"Optimistic Transactions Summary: Optimistic transactions supporting begin/commit/rollback semantics. Currently relies on checking the memtable to determine if there are any collisions at commit time. Not yet implemented would be a way of enuring the memtable has some minimum amount of history so that we wont fail to commit when the memtable is empty. You should probably start with transaction.h to get an overview of what is currently supported. Test Plan: Added a new test, but still need to look into stress testing. Reviewers: yhchiang, igor, rven, sdong Reviewed By: sdong Subscribers: adamretter, MarkCallaghan, leveldb, dhruba Differential Revision: saving history in memtable_list Summary: For transactions, we are using the memtables to validate that there are no write conflicts. But after flushing, we dont have any memtables, and transactions could fail to commit. So we want to someone keep around some extra history to use for conflict checking. In addition, we want to provide a way to increase the size of this history if too many transactions fail to commit. After chatting with people, it seems like everyone prefers just using Memtables to store this history (instead of a separate history structure). It seems like the best place for this is abstracted inside the memtable_list. I decide to create a separate list in MemtableListVersion as using the same list complicated the flush/installalflushresults logic too much. This diff adds a new parameter to control how much memtable history to keep around after flushing. However, it sounds like people arent too fond of adding new parameters. So I am making the default size of flushed+not-flushed memtables be set to max_write_buffers. This should not change the maximum amount of memory used, but make it more likely were using closer the the limit. (We are now postponing deleting flushed memtables until the max_write_buffer limit is reached). So while we might use more memory on average, we are still obeying the limit set (and you could argue its better to go ahead and use up memory now instead of waiting for a write stall to happen to test this limit). However, if people are opposed to this default behavior, we can easily set it to 0 and require this parameter be set in order to use transactions. Test Plan: Added a xfunc test to play around with setting different values of this parameter in all tests. Added testing in memtablelist_test and planning on adding more testing here. Reviewers: sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.245,rocksdb,"Add options.compaction_measure_io_stats to print write I/O stats in compactions Summary: Add options.compaction_measure_io_stats to print out / pass to listener accumulated time spent on write calls. Example outputs in info logs: 2015/08/12-16:27:59.463944 7fd428bff700 (Original Log Time 2015/08/12-16:27:59.463922) EVENT_LOG_v1 {""time_micros"": 1439422079463897, ""job"": 6, ""event"": ""compaction_finished"", ""output_level"": 1, ""num_output_files"": 4, ""total_output_size"": 6900525, ""num_input_records"": 111483, ""num_output_records"": 106877, ""file_write_nanos"": 15663206, ""file_range_sync_nanos"": 649588, ""file_fsync_nanos"": 349614797, ""file_prepare_write_nanos"": 1505812, ""lsm_state"": [2, 4, 0, 0, 0, 0, 0]} Add two more counters in iostats_context. Also add a parameter of db_bench. Test Plan: Add a unit test. Also manually verify LOG outputs in db_bench Subscribers: leveldb, dhruba Differential Revision: format"" against last 10 commits Summary: This helps Windows port to format their changes, as discussed. Might have formatted some other codes too becasue last 10 commits include more. Test Plan: Build it. Reviewers: anthony, IslamAbdelRahman, kradhakrishnan, yhchiang, igor Reviewed By: igor Subscribers: leveldb, dhruba Differential Revision: Port from Microsoft Summary: Make RocksDb build and run on Windows to be functionally complete and performant. All existing test cases run with no regressions. Performance numbers are in the pull-request. Test plan: make all of the existing unit tests pass, obtain perf numbers. Co-authored-by: Praveen Rao Co-authored-by: Sherlock Huang Co-authored-by: Alex Zinoviev Co-authored-by: Dmitri Smirnov DB::Open() when the requested compression is not available Summary: Currently RocksDB silently ignores this issue and doesnt compress the data. Based on discussion, we agree that this is pretty bad because it can cause confusion for our users. This patch fails DB::Open() if we dont support the compression that is specified in the options. Test Plan: make check with LZ4 not present. If Snappy is not present all tests will just fail because Snappy is our default library. We should make Snappy the requirement, since without it our default DB::Open() fails. Reviewers: sdong, MarkCallaghan, rven, yhchiang Reviewed By: yhchiang Subscribers: dhruba, leveldb Differential Revision: saving history in memtable_list Summary: For transactions, we are using the memtables to validate that there are no write conflicts. But after flushing, we dont have any memtables, and transactions could fail to commit. So we want to someone keep around some extra history to use for conflict checking. In addition, we want to provide a way to increase the size of this history if too many transactions fail to commit. After chatting with people, it seems like everyone prefers just using Memtables to store this history (instead of a separate history structure). It seems like the best place for this is abstracted inside the memtable_list. I decide to create a separate list in MemtableListVersion as using the same list complicated the flush/installalflushresults logic too much. This diff adds a new parameter to control how much memtable history to keep around after flushing. However, it sounds like people arent too fond of adding new parameters. So I am making the default size of flushed+not-flushed memtables be set to max_write_buffers. This should not change the maximum amount of memory used, but make it more likely were using closer the the limit. (We are now postponing deleting flushed memtables until the max_write_buffer limit is reached). So while we might use more memory on average, we are still obeying the limit set (and you could argue its better to go ahead and use up memory now instead of waiting for a write stall to happen to test this limit). However, if people are opposed to this default behavior, we can easily set it to 0 and require this parameter be set in order to use transactions. Test Plan: Added a xfunc test to play around with setting different values of this parameter in all tests. Added testing in memtablelist_test and planning on adding more testing here. Reviewers: sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision: the log-level of DB summary and options from INFO_LEVEL to WARN_LEVEL Summary: Change the log-level of DB summary and options from INFO_LEVEL to WARN_LEVEL Test Plan: Use db_bench to verify the log level. Sample output: 2015/05/22-00:20:39.778064 7fff75b41300 [WARN] RocksDB version: 3.11.0 2015/05/22-00:20:39.778095 7fff75b41300 [WARN] Git sha rocksdb_build_git_sha:7fee8775a459134c4cb04baae5bd1687e268f2a0 2015/05/22-00:20:39.778099 7fff75b41300 [WARN] Compile date May 22 2015 2015/05/22-00:20:39.778101 7fff75b41300 [WARN] DB SUMMARY 2015/05/22-00:20:39.778145 7fff75b41300 [WARN] SST files in /tmp/rocksdbtest-691931916/dbbench dir, Total Num: 0, files: 2015/05/22-00:20:39.778148 7fff75b41300 [WARN] Write Ahead Log file in /tmp/rocksdbtest-691931916/dbbench: 2015/05/22-00:20:39.778150 7fff75b41300 [WARN] Options.error_if_exists: 0 2015/05/22-00:20:39.778152 7fff75b41300 [WARN] Options.create_if_missing: 1 2015/05/22-00:20:39.778153 7fff75b41300 [WARN] Options.paranoid_checks: 1 Reviewers: MarkCallaghan, igor, kradhakrishnan Reviewed By: igor Subscribers: sdong, dhruba, leveldb Differential Revision: an option wal_bytes_per_sync to control sync_file_range for WAL files Summary: sync_file_range is not always asyncronous and thus can block writes if we do this for WAL in the foreground thread. See more here: Some users dont want us to call sync_file_range on WALs. Some other do. Thus, Im adding a separate option wal_bytes_per_sync to control calling sync_file_range on WAL files. bytes_per_sync will apply only to table files now. Test Plan: no more sync_file_range for WAL as evidenced by strace Reviewers: yhchiang, rven, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.1039,rocksdb,"Fixed memory leaks Summary: MyRocks valgrind run was showing memory leaks. The fixes are mostly self-explaining. There is only a single usage of ThreadLocalPtr. Potentially, we may think about replacing this use with thread_local, but it will be a bigger change. Another option to consider is using thread_local instead of __thread in ThreadLocalPtr implementation. This way, tls_ can be stored using std::unique_ptr and no destructor would be required. Test Plan: make check MyRocks valgrind run doesnt report leaks Reviewers: rven, sdong Reviewed By: sdong Subscribers: dhruba Differential Revision:"
,,0.2373,rocksdb,"Transaction error statuses Summary: Based on feedback from spetrunia, we should better differentiate error statuses for transaction failures. Test Plan: unit tests Reviewers: rven, kradhakrishnan, spetrunia, yhchiang, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision: Transactions Summary: Initial implementation of Pessimistic Transactions. This diff contains the api changes discussed in D38913. This diff is pretty large, so let me know if people would prefer to meet up to discuss it. MyRocks folks: please take a look at the API in include/rocksdb/utilities/transaction[_db].h and let me know if you have any issues. Also, youll notice a couple of TODOs in the implementation of RollbackToSavePoint(). After chatting with Siying, Im going to send out a separate diff for an alternate implementation of this feature that implements the rollback inside of WriteBatch/WriteBatchWithIndex. We can then decide which route is preferable. Next, Im planning on doing some perf testing and then integrating this diff into MongoRocks for further testing. Test Plan: Unit tests, db_bench parallel testing. Reviewers: igor, rven, sdong, yhchiang, yoshinorim Reviewed By: sdong Subscribers: hermanlee4, maykov, spetrunia, leveldb, dhruba Differential Revision: Transactions Summary: Optimistic transactions supporting begin/commit/rollback semantics. Currently relies on checking the memtable to determine if there are any collisions at commit time. Not yet implemented would be a way of enuring the memtable has some minimum amount of history so that we wont fail to commit when the memtable is empty. You should probably start with transaction.h to get an overview of what is currently supported. Test Plan: Added a new test, but still need to look into stress testing. Reviewers: yhchiang, igor, rven, sdong Reviewed By: sdong Subscribers: adamretter, MarkCallaghan, leveldb, dhruba Differential Revision:"
,,0.1752,rocksdb,"Ensure Windows build w/o port/port.h in public headers Remove make file defines from public headers and use _WIN32 because it is compiler defined use __GNUC__ and __clang__ to guard non-portable attributes add ""port/port.h"" to some new .cc files. minor changes in CMakeLists to reflect recent changes/"
,,0.3722,rocksdb,"""make format"" against last 10 commits Summary: This helps Windows port to format their changes, as discussed. Might have formatted some other codes too becasue last 10 commits include more. Test Plan: Build it. Reviewers: anthony, IslamAbdelRahman, kradhakrishnan, yhchiang, igor Reviewed By: igor Subscribers: leveldb, dhruba Differential Revision: Port from Microsoft Summary: Make RocksDb build and run on Windows to be functionally complete and performant. All existing test cases run with no regressions. Performance numbers are in the pull-request. Test plan: make all of the existing unit tests pass, obtain perf numbers. Co-authored-by: Praveen Rao Co-authored-by: Sherlock Huang Co-authored-by: Alex Zinoviev Co-authored-by: Dmitri Smirnov add WriteBatch.PutLogData support/C: add MultiGet support/C: add support for WriteBatch SliceParts params/Support saving history in memtable_list Summary: For transactions, we are using the memtables to validate that there are no write conflicts. But after flushing, we dont have any memtables, and transactions could fail to commit. So we want to someone keep around some extra history to use for conflict checking. In addition, we want to provide a way to increase the size of this history if too many transactions fail to commit. After chatting with people, it seems like everyone prefers just using Memtables to store this history (instead of a separate history structure). It seems like the best place for this is abstracted inside the memtable_list. I decide to create a separate list in MemtableListVersion as using the same list complicated the flush/installalflushresults logic too much. This diff adds a new parameter to control how much memtable history to keep around after flushing. However, it sounds like people arent too fond of adding new parameters. So I am making the default size of flushed+not-flushed memtables be set to max_write_buffers. This should not change the maximum amount of memory used, but make it more likely were using closer the the limit. (We are now postponing deleting flushed memtables until the max_write_buffer limit is reached). So while we might use more memory on average, we are still obeying the limit set (and you could argue its better to go ahead and use up memory now instead of waiting for a write stall to happen to test this limit). However, if people are opposed to this default behavior, we can easily set it to 0 and require this parameter be set in order to use transactions. Test Plan: Added a xfunc test to play around with setting different values of this parameter in all tests. Added testing in memtablelist_test and planning on adding more testing here. Reviewers: sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision: extra bbto / noop slice transform/C api: human-readable statistics/"
,,0.2078,rocksdb,"Fix ROCKSDB_WARNING Summary: ROCKSDB_WARNING is only defined if either ROCKSDB_PLATFORM_POSIX or OS_WIN is defined. This works well for building rocksdb with its own build scripts. But this wont work when an outside project(like mongodb) doesnt define ROCKSDB_PLATFORM_POSIX. This fix defines ROCKSDB_WARNING for all platforms. No idea if its defined correctly on non-posix,non-windows platforms but this is no worse that the current situation where this macro is missing on unexpected platforms. This fix should hopefully fix anyone whose build broke now that weve switched from using to Pragma (to support windows). Unfortunately, while mongo-rocks compiles, it ignores the Pragma and doesnt print a warning. I have not been able to figure out a way to implement this portably on all platforms. Of course, an alternate solution would be to just get rid of ROCKSDB_WARNING and live with include file redirects indefinitely. Thoughts? Test Plan: build rocks, build mongorocks Reviewers: igor, kradhakrishnan, IslamAbdelRahman, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision: convenience.h out of utilities Summary: Moved convenience.h out of utilities to remove a dependency on utilities in db. Test Plan: unit tests. Also compiled a link to the old location to verify the _Pragma works. Reviewers: sdong, yhchiang, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.1465,rocksdb,"Revert ""Fix compile"" This reverts commit 51440f83ec82b4b3fa54c1963f58d07a8b2c2810. Revert ""Re-generate WriteEntry on WBWIIterator::Entry()"" This reverts commit 4949ef08db89bdc63028679d1cc11312094e860e./Re-generate WriteEntry on WBWIIterator::Entry() Summary: If we dont do this, any calls to Entry() after WBWI mutation will result in undefined behavior. We need to re-fetch the offset from the skip list and regenerate the new pointer (because strings base pointer can change while mutating). Test Plan: COMPILE_WITH_ASAN=1 make write_batch_with_index_test && ./write_batch_with_index_test Reviewers: sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.16899999999999998,rocksdb,"Ensure Windows build w/o port/port.h in public headers Remove make file defines from public headers and use _WIN32 because it is compiler defined use __GNUC__ and __clang__ to guard non-portable attributes add ""port/port.h"" to some new .cc files. minor changes in CMakeLists to reflect recent changes/"
,,0.2426,rocksdb,"Optimistic Transactions Summary: Optimistic transactions supporting begin/commit/rollback semantics. Currently relies on checking the memtable to determine if there are any collisions at commit time. Not yet implemented would be a way of enuring the memtable has some minimum amount of history so that we wont fail to commit when the memtable is empty. You should probably start with transaction.h to get an overview of what is currently supported. Test Plan: Added a new test, but still need to look into stress testing. Reviewers: yhchiang, igor, rven, sdong Reviewed By: sdong Subscribers: adamretter, MarkCallaghan, leveldb, dhruba Differential Revision:"
,,0.2168,rocksdb,"Pessimistic Transactions Summary: Initial implementation of Pessimistic Transactions. This diff contains the api changes discussed in D38913. This diff is pretty large, so let me know if people would prefer to meet up to discuss it. MyRocks folks: please take a look at the API in include/rocksdb/utilities/transaction[_db].h and let me know if you have any issues. Also, youll notice a couple of TODOs in the implementation of RollbackToSavePoint(). After chatting with Siying, Im going to send out a separate diff for an alternate implementation of this feature that implements the rollback inside of WriteBatch/WriteBatchWithIndex. We can then decide which route is preferable. Next, Im planning on doing some perf testing and then integrating this diff into MongoRocks for further testing. Test Plan: Unit tests, db_bench parallel testing. Reviewers: igor, rven, sdong, yhchiang, yoshinorim Reviewed By: sdong Subscribers: hermanlee4, maykov, spetrunia, leveldb, dhruba Differential Revision: Save Points Summary: Support RollbackToSavePoint() in WriteBatch and WriteBatchWithIndex. Support for partial transaction rollback is needed for MyRocks. An alternate implementation of Transaction::RollbackToSavePoint() exists in D40869. However, the other implementation is messier because it is implemented outside of WriteBatch. This implementation is much cleaner and also exposes a potentially useful feature to WriteBatch. Test Plan: Added unit tests Reviewers: IslamAbdelRahman, kradhakrishnan, maykov, yoshinorim, hermanlee4, spetrunia, sdong, yhchiang Reviewed By: yhchiang Subscribers: dhruba, leveldb Differential Revision: WriteEntry on WBWIIterator::Entry() Summary: [This is the resubmit of D39813. Tests were failing, so I reverted the diff. I found the bug and Im now resubmitting] If we dont do this, any calls to Entry() after WBWI mutation will result in undefined behavior. We need to re-fetch the offset from the skip list and regenerate the new pointer (because strings base pointer can change while mutating). Test Plan: COMPILE_WITH_ASAN=1 make write_batch_with_index_test && ./write_batch_with_index_test Reviewers: sdong Reviewed By: sdong Subscribers: leveldb, dhruba Differential Revision: ""Fix compile"" This reverts commit 51440f83ec82b4b3fa54c1963f58d07a8b2c2810. Revert ""Re-generate WriteEntry on WBWIIterator::Entry()"" This reverts commit 4949ef08db89bdc63028679d1cc11312094e860e./Fix compile Summary: Ooops, sorry about this. Test Plan: compiles Reviewers: sdong Subscribers: dhruba, leveldb Differential Revision: WriteEntry on WBWIIterator::Entry() Summary: If we dont do this, any calls to Entry() after WBWI mutation will result in undefined behavior. We need to re-fetch the offset from the skip list and regenerate the new pointer (because strings base pointer can change while mutating). Test Plan: COMPILE_WITH_ASAN=1 make write_batch_with_index_test && ./write_batch_with_index_test Reviewers: sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.1391,rocksdb,"WriteBatch Save Points Summary: Support RollbackToSavePoint() in WriteBatch and WriteBatchWithIndex. Support for partial transaction rollback is needed for MyRocks. An alternate implementation of Transaction::RollbackToSavePoint() exists in D40869. However, the other implementation is messier because it is implemented outside of WriteBatch. This implementation is much cleaner and also exposes a potentially useful feature to WriteBatch. Test Plan: Added unit tests Reviewers: IslamAbdelRahman, kradhakrishnan, maykov, yoshinorim, hermanlee4, spetrunia, sdong, yhchiang Reviewed By: yhchiang Subscribers: dhruba, leveldb Differential Revision: ""Fix compile"" This reverts commit 51440f83ec82b4b3fa54c1963f58d07a8b2c2810. Revert ""Re-generate WriteEntry on WBWIIterator::Entry()"" This reverts commit 4949ef08db89bdc63028679d1cc11312094e860e./Re-generate WriteEntry on WBWIIterator::Entry() Summary: If we dont do this, any calls to Entry() after WBWI mutation will result in undefined behavior. We need to re-fetch the offset from the skip list and regenerate the new pointer (because strings base pointer can change while mutating). Test Plan: COMPILE_WITH_ASAN=1 make write_batch_with_index_test && ./write_batch_with_index_test Reviewers: sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.4945,rocksdb,"Support saving history in memtable_list Summary: For transactions, we are using the memtables to validate that there are no write conflicts. But after flushing, we dont have any memtables, and transactions could fail to commit. So we want to someone keep around some extra history to use for conflict checking. In addition, we want to provide a way to increase the size of this history if too many transactions fail to commit. After chatting with people, it seems like everyone prefers just using Memtables to store this history (instead of a separate history structure). It seems like the best place for this is abstracted inside the memtable_list. I decide to create a separate list in MemtableListVersion as using the same list complicated the flush/installalflushresults logic too much. This diff adds a new parameter to control how much memtable history to keep around after flushing. However, it sounds like people arent too fond of adding new parameters. So I am making the default size of flushed+not-flushed memtables be set to max_write_buffers. This should not change the maximum amount of memory used, but make it more likely were using closer the the limit. (We are now postponing deleting flushed memtables until the max_write_buffer limit is reached). So while we might use more memory on average, we are still obeying the limit set (and you could argue its better to go ahead and use up memory now instead of waiting for a write stall to happen to test this limit). However, if people are opposed to this default behavior, we can easily set it to 0 and require this parameter be set in order to use transactions. Test Plan: Added a xfunc test to play around with setting different values of this parameter in all tests. Added testing in memtablelist_test and planning on adding more testing here. Reviewers: sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.3605,rocksdb,"Pessimistic Transactions Summary: Initial implementation of Pessimistic Transactions. This diff contains the api changes discussed in D38913. This diff is pretty large, so let me know if people would prefer to meet up to discuss it. MyRocks folks: please take a look at the API in include/rocksdb/utilities/transaction[_db].h and let me know if you have any issues. Also, youll notice a couple of TODOs in the implementation of RollbackToSavePoint(). After chatting with Siying, Im going to send out a separate diff for an alternate implementation of this feature that implements the rollback inside of WriteBatch/WriteBatchWithIndex. We can then decide which route is preferable. Next, Im planning on doing some perf testing and then integrating this diff into MongoRocks for further testing. Test Plan: Unit tests, db_bench parallel testing. Reviewers: igor, rven, sdong, yhchiang, yoshinorim Reviewed By: sdong Subscribers: hermanlee4, maykov, spetrunia, leveldb, dhruba Differential Revision: duplicate code in db_bench/db_stress, fixing typos Summary: While working on single delete support for db_bench, I realized that db_bench/db_stress contain a bunch of duplicate code related to copmression and found some typos. This patch removes duplicate code, typos and a redundant in internal_stats.cc. Test Plan: make db_stress && make db_bench && ./db_bench Reviewers: yhchiang, sdong, rven, anthony, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision: add an option of Summary: Now we allow trivial move in universal compaction. Add a parameter in db_bench Test Plan: Run db_bench with this option on and off and make sure the option is switched correctly. Reviewers: yhchiang, igor, kradhakrishnan, anthony Reviewed By: anthony Subscribers: leveldb, dhruba Differential Revision: option to db_bench Summary: So far, we benchmarked RocksDB by writing as fast as possible. With this change, were able to limit our write throughput, which should help us better understand how RocksDB performes under varying write workloads. Specifically, Im currently interested in the shape of the graph that has write throughput on one axis and write rate on another. This should help us with designing our stall system, as we have started to do with D36351. Test Plan: $ ./db_bench fillrandom : 118.523 micros/op 8437 ops/sec; 0.9 MB/s $ ./db_bench fillrandom : 59.136 micros/op 16910 ops/sec; 1.9 MB/s Reviewers: MarkCallaghan, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision: compile on darwin Summary: As title Test Plan: make check Reviewers: anthony Subscribers: dhruba, leveldb Differential Revision: Transactions Summary: Optimistic transactions supporting begin/commit/rollback semantics. Currently relies on checking the memtable to determine if there are any collisions at commit time. Not yet implemented would be a way of enuring the memtable has some minimum amount of history so that we wont fail to commit when the memtable is empty. You should probably start with transaction.h to get an overview of what is currently supported. Test Plan: Added a new test, but still need to look into stress testing. Reviewers: yhchiang, igor, rven, sdong Reviewed By: sdong Subscribers: adamretter, MarkCallaghan, leveldb, dhruba Differential Revision: saving history in memtable_list Summary: For transactions, we are using the memtables to validate that there are no write conflicts. But after flushing, we dont have any memtables, and transactions could fail to commit. So we want to someone keep around some extra history to use for conflict checking. In addition, we want to provide a way to increase the size of this history if too many transactions fail to commit. After chatting with people, it seems like everyone prefers just using Memtables to store this history (instead of a separate history structure). It seems like the best place for this is abstracted inside the memtable_list. I decide to create a separate list in MemtableListVersion as using the same list complicated the flush/installalflushresults logic too much. This diff adds a new parameter to control how much memtable history to keep around after flushing. However, it sounds like people arent too fond of adding new parameters. So I am making the default size of flushed+not-flushed memtables be set to max_write_buffers. This should not change the maximum amount of memory used, but make it more likely were using closer the the limit. (We are now postponing deleting flushed memtables until the max_write_buffer limit is reached). So while we might use more memory on average, we are still obeying the limit set (and you could argue its better to go ahead and use up memory now instead of waiting for a write stall to happen to test this limit). However, if people are opposed to this default behavior, we can easily set it to 0 and require this parameter be set in order to use transactions. Test Plan: Added a xfunc test to play around with setting different values of this parameter in all tests. Added testing in memtablelist_test and planning on adding more testing here. Reviewers: sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.4987,rocksdb,"Support saving history in memtable_list Summary: For transactions, we are using the memtables to validate that there are no write conflicts. But after flushing, we dont have any memtables, and transactions could fail to commit. So we want to someone keep around some extra history to use for conflict checking. In addition, we want to provide a way to increase the size of this history if too many transactions fail to commit. After chatting with people, it seems like everyone prefers just using Memtables to store this history (instead of a separate history structure). It seems like the best place for this is abstracted inside the memtable_list. I decide to create a separate list in MemtableListVersion as using the same list complicated the flush/installalflushresults logic too much. This diff adds a new parameter to control how much memtable history to keep around after flushing. However, it sounds like people arent too fond of adding new parameters. So I am making the default size of flushed+not-flushed memtables be set to max_write_buffers. This should not change the maximum amount of memory used, but make it more likely were using closer the the limit. (We are now postponing deleting flushed memtables until the max_write_buffer limit is reached). So while we might use more memory on average, we are still obeying the limit set (and you could argue its better to go ahead and use up memory now instead of waiting for a write stall to happen to test this limit). However, if people are opposed to this default behavior, we can easily set it to 0 and require this parameter be set in order to use transactions. Test Plan: Added a xfunc test to play around with setting different values of this parameter in all tests. Added testing in memtablelist_test and planning on adding more testing here. Reviewers: sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.1525,rocksdb,"reduce db mutex contention for write batch groups Summary: This diff allows a Writer to join the next write batch group without acquiring any locks. Waiting is performed via a per-Writer mutex, so all of the non-leader writers never need to acquire the db mutex. It is now possible to join a write batch group after the leader has been chosen but before the batch has been constructed. This diff doesnt increase parallelism, but reduces synchronization overheads. For some CPU-bound workloads (no WAL, RAM-sized working set) this can substantially reduce contention on the db mutex in a multi-threaded environment. With T=8 N=500000 in a CPU-bound scenario (see the test plan) this is good for a 33% perf win. Not all scenarios see such a win, but none show a loss. This code is slightly faster even for the single-threaded case (about 2% for the CPU-bound scenario below). Test Plan: 1. unit tests 2. COMPILE_WITH_TSAN=1 make check 3. stress high-contention scenarios with db_bench Reviewers: sdong, igor, rven, ljin, yhchiang Subscribers: dhruba Differential Revision: public API dependency on internal codes and dependency on MAX_INT32 Summary: Public API depends on port/port.h which is wrong. Fix it. Also with gcc 4.8.1 build was broken as MAX_INT32 was not recognized. Fix it by using ::max in linux. Test Plan: Build it and try to build an external project on top of it. Reviewers: anthony, yhchiang, kradhakrishnan, igor Reviewed By: igor Subscribers: yoshinorim, leveldb, dhruba Differential Revision: Port from Microsoft Summary: Make RocksDb build and run on Windows to be functionally complete and performant. All existing test cases run with no regressions. Performance numbers are in the pull-request. Test plan: make all of the existing unit tests pass, obtain perf numbers. Co-authored-by: Praveen Rao Co-authored-by: Sherlock Huang Co-authored-by: Alex Zinoviev Co-authored-by: Dmitri Smirnov Transactions Summary: Optimistic transactions supporting begin/commit/rollback semantics. Currently relies on checking the memtable to determine if there are any collisions at commit time. Not yet implemented would be a way of enuring the memtable has some minimum amount of history so that we wont fail to commit when the memtable is empty. You should probably start with transaction.h to get an overview of what is currently supported. Test Plan: Added a new test, but still need to look into stress testing. Reviewers: yhchiang, igor, rven, sdong Reviewed By: sdong Subscribers: adamretter, MarkCallaghan, leveldb, dhruba Differential Revision:"
,,0.4017,rocksdb,"Slow down writes by bytes written Summary: We slow down data into the database to the rate of options.delayed_write_rate (a new option) with this patch. The thread synchronization approach I take is to still synchronize write controller by DB mutex and GetDelay() is inside DB mutex. Try to minimize the frequency of getting time in GetDelay(). I verified it through db_bench and it seems to work hard_rate_limit is deprecated. options.delayed_write_rate is still not dynamically changeable. Need to work on it as a follow-up. Test Plan: Add new unit tests in db_test Reviewers: yhchiang, rven, kradhakrishnan, anthony, MarkCallaghan, igor Reviewed By: igor Subscribers: ikabiljo, leveldb, dhruba Differential Revision: saving history in memtable_list Summary: For transactions, we are using the memtables to validate that there are no write conflicts. But after flushing, we dont have any memtables, and transactions could fail to commit. So we want to someone keep around some extra history to use for conflict checking. In addition, we want to provide a way to increase the size of this history if too many transactions fail to commit. After chatting with people, it seems like everyone prefers just using Memtables to store this history (instead of a separate history structure). It seems like the best place for this is abstracted inside the memtable_list. I decide to create a separate list in MemtableListVersion as using the same list complicated the flush/installalflushresults logic too much. This diff adds a new parameter to control how much memtable history to keep around after flushing. However, it sounds like people arent too fond of adding new parameters. So I am making the default size of flushed+not-flushed memtables be set to max_write_buffers. This should not change the maximum amount of memory used, but make it more likely were using closer the the limit. (We are now postponing deleting flushed memtables until the max_write_buffer limit is reached). So while we might use more memory on average, we are still obeying the limit set (and you could argue its better to go ahead and use up memory now instead of waiting for a write stall to happen to test this limit). However, if people are opposed to this default behavior, we can easily set it to 0 and require this parameter be set in order to use transactions. Test Plan: Added a xfunc test to play around with setting different values of this parameter in all tests. Added testing in memtablelist_test and planning on adding more testing here. Reviewers: sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.5115,rocksdb,"Optimistic Transactions Summary: Optimistic transactions supporting begin/commit/rollback semantics. Currently relies on checking the memtable to determine if there are any collisions at commit time. Not yet implemented would be a way of enuring the memtable has some minimum amount of history so that we wont fail to commit when the memtable is empty. You should probably start with transaction.h to get an overview of what is currently supported. Test Plan: Added a new test, but still need to look into stress testing. Reviewers: yhchiang, igor, rven, sdong Reviewed By: sdong Subscribers: adamretter, MarkCallaghan, leveldb, dhruba Differential Revision: saving history in memtable_list Summary: For transactions, we are using the memtables to validate that there are no write conflicts. But after flushing, we dont have any memtables, and transactions could fail to commit. So we want to someone keep around some extra history to use for conflict checking. In addition, we want to provide a way to increase the size of this history if too many transactions fail to commit. After chatting with people, it seems like everyone prefers just using Memtables to store this history (instead of a separate history structure). It seems like the best place for this is abstracted inside the memtable_list. I decide to create a separate list in MemtableListVersion as using the same list complicated the flush/installalflushresults logic too much. This diff adds a new parameter to control how much memtable history to keep around after flushing. However, it sounds like people arent too fond of adding new parameters. So I am making the default size of flushed+not-flushed memtables be set to max_write_buffers. This should not change the maximum amount of memory used, but make it more likely were using closer the the limit. (We are now postponing deleting flushed memtables until the max_write_buffer limit is reached). So while we might use more memory on average, we are still obeying the limit set (and you could argue its better to go ahead and use up memory now instead of waiting for a write stall to happen to test this limit). However, if people are opposed to this default behavior, we can easily set it to 0 and require this parameter be set in order to use transactions. Test Plan: Added a xfunc test to play around with setting different values of this parameter in all tests. Added testing in memtablelist_test and planning on adding more testing here. Reviewers: sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.3119,rocksdb,"Report live data size estimate Summary: Fixes T6548822. Added a new function for estimating the size of the live data as proposed in the task. The value can be accessed through the property rocksdb.estimate-live-data-size. Test Plan: There are two unit tests in version_set_test and a simple test in db_test. make version_set_test && ./version_set_test; make db_test && ./db_test gtest_filter=GetProperty Reviewers: rven, igor, yhchiang, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision: saving history in memtable_list Summary: For transactions, we are using the memtables to validate that there are no write conflicts. But after flushing, we dont have any memtables, and transactions could fail to commit. So we want to someone keep around some extra history to use for conflict checking. In addition, we want to provide a way to increase the size of this history if too many transactions fail to commit. After chatting with people, it seems like everyone prefers just using Memtables to store this history (instead of a separate history structure). It seems like the best place for this is abstracted inside the memtable_list. I decide to create a separate list in MemtableListVersion as using the same list complicated the flush/installalflushresults logic too much. This diff adds a new parameter to control how much memtable history to keep around after flushing. However, it sounds like people arent too fond of adding new parameters. So I am making the default size of flushed+not-flushed memtables be set to max_write_buffers. This should not change the maximum amount of memory used, but make it more likely were using closer the the limit. (We are now postponing deleting flushed memtables until the max_write_buffer limit is reached). So while we might use more memory on average, we are still obeying the limit set (and you could argue its better to go ahead and use up memory now instead of waiting for a write stall to happen to test this limit). However, if people are opposed to this default behavior, we can easily set it to 0 and require this parameter be set in order to use transactions. Test Plan: Added a xfunc test to play around with setting different values of this parameter in all tests. Added testing in memtablelist_test and planning on adding more testing here. Reviewers: sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision: for db_bench and more IO stats Summary: See for the IO stats. I added ""Cumulative compaction:"" and ""Interval compaction:"" lines. The IO rates can be confusing. Rates fro per-level stats lines, Wr(MB/s) & Rd(MB/s), are computed using the duration of the compaction job. If the job reads 10MB, writes 9MB and the job (IO & merging) takes 1 second then the rates are 10MB/s for read and 9MB/s for writes. The IO rates in the Cumulative compaction line uses the total uptime. The IO rates in the Interval compaction line uses the interval uptime. So these Cumalative & Interval compaction IO rates cannot be compared to the per-level IO rates. But both forms of the rates are useful for debugging perf. Task ID: Blame Rev: Test Plan: run db_bench Revert Plan: Database Impact: Memcache Impact: Other Notes: EImportant: begin *PUBLIC* platform impact section Bugzilla: end platform impact Reviewers: igor Reviewed By: igor Subscribers: dhruba Differential Revision:"
,,0.1089,rocksdb,"Fix public API dependency on internal codes and dependency on MAX_INT32 Summary: Public API depends on port/port.h which is wrong. Fix it. Also with gcc 4.8.1 build was broken as MAX_INT32 was not recognized. Fix it by using ::max in linux. Test Plan: Build it and try to build an external project on top of it. Reviewers: anthony, yhchiang, kradhakrishnan, igor Reviewed By: igor Subscribers: yoshinorim, leveldb, dhruba Differential Revision: both PR and internal code review changes/"
,,0.2203,rocksdb,"Replace %llu with format macros in ParsedInternalKey::DebugString()) Test Plan: successfully compiled the code Reviewers: sdong Reviewed By: sdong Subscribers: dhruba Differential Revision: Transactions Summary: Optimistic transactions supporting begin/commit/rollback semantics. Currently relies on checking the memtable to determine if there are any collisions at commit time. Not yet implemented would be a way of enuring the memtable has some minimum amount of history so that we wont fail to commit when the memtable is empty. You should probably start with transaction.h to get an overview of what is currently supported. Test Plan: Added a new test, but still need to look into stress testing. Reviewers: yhchiang, igor, rven, sdong Reviewed By: sdong Subscribers: adamretter, MarkCallaghan, leveldb, dhruba Differential Revision:"
,,0.2356,rocksdb,"Optimistic Transactions Summary: Optimistic transactions supporting begin/commit/rollback semantics. Currently relies on checking the memtable to determine if there are any collisions at commit time. Not yet implemented would be a way of enuring the memtable has some minimum amount of history so that we wont fail to commit when the memtable is empty. You should probably start with transaction.h to get an overview of what is currently supported. Test Plan: Added a new test, but still need to look into stress testing. Reviewers: yhchiang, igor, rven, sdong Reviewed By: sdong Subscribers: adamretter, MarkCallaghan, leveldb, dhruba Differential Revision:"
,,0.4886,rocksdb,"Support saving history in memtable_list Summary: For transactions, we are using the memtables to validate that there are no write conflicts. But after flushing, we dont have any memtables, and transactions could fail to commit. So we want to someone keep around some extra history to use for conflict checking. In addition, we want to provide a way to increase the size of this history if too many transactions fail to commit. After chatting with people, it seems like everyone prefers just using Memtables to store this history (instead of a separate history structure). It seems like the best place for this is abstracted inside the memtable_list. I decide to create a separate list in MemtableListVersion as using the same list complicated the flush/installalflushresults logic too much. This diff adds a new parameter to control how much memtable history to keep around after flushing. However, it sounds like people arent too fond of adding new parameters. So I am making the default size of flushed+not-flushed memtables be set to max_write_buffers. This should not change the maximum amount of memory used, but make it more likely were using closer the the limit. (We are now postponing deleting flushed memtables until the max_write_buffer limit is reached). So while we might use more memory on average, we are still obeying the limit set (and you could argue its better to go ahead and use up memory now instead of waiting for a write stall to happen to test this limit). However, if people are opposed to this default behavior, we can easily set it to 0 and require this parameter be set in order to use transactions. Test Plan: Added a xfunc test to play around with setting different values of this parameter in all tests. Added testing in memtablelist_test and planning on adding more testing here. Reviewers: sdong, rven, igor Reviewed By: igor Subscribers: dhruba, leveldb Differential Revision:"
,,0.1797,rocksdb,"Allow GetApproximateSize() to include mem table size if it is skip list memtable Summary: Add an option in GetApproximateSize() so that the result will include estimated sizes in mem tables. To implement it, implement an estimated count from the beginning to a key in skip list. The approach is to count to find the entry, how many Next() is issued from each level, and sum them with a weight that is factor> ^ Test Plan: Add a test case Subscribers: leveldb, dhruba Differential Revision: Transactions Summary: Optimistic transactions supporting begin/commit/rollback semantics. Currently relies on checking the memtable to determine if there are any collisions at commit time. Not yet implemented would be a way of enuring the memtable has some minimum amount of history so that we wont fail to commit when the memtable is empty. You should probably start with transaction.h to get an overview of what is currently supported. Test Plan: Added a new test, but still need to look into stress testing. Reviewers: yhchiang, igor, rven, sdong Reviewed By: sdong Subscribers: adamretter, MarkCallaghan, leveldb, dhruba Differential Revision:"
,,0.1912,rocksdb,Enable Windows warnings C4307 C4309 C4512 C4701 Enable C4307 operator : integral constant overflow Longs and ints on Windows are 32-bit hence the overflow Enable C4309 conversion : truncation of constant value Enable C4512 class : assignment operator could not be generated Enable C4701 Potentially uninitialized local variable name used/Support PlainTableOption in option_helper/
,,0.069,rocksdb,"Fix another rebase problems./Enable MS compiler warning c4244. Mostly due to the fact that there are differences in sizes of int,long on 64 bit systems vs GNU./"
,,0.1608,rocksdb,"Fixed a dependency issue of ThreadLocalPtr Summary: When a child thread that uses ThreadLocalPtr, ThreadLocalPtr::OnThreadExit will be called when that child thread is destroyed. However, OnThreadExit will try to access a static singleton of ThreadLocalPtr, which will be destroyed when the main thread exit. As a result, when a child thread that uses ThreadLocalPtr exits AFTER the main thread exits, illegal memory access will occur. This diff includes a test that reproduce this legacy bug. AddressSanitizer: heap-use-after-free on address 0x608000007fa0 at pc 0x959b79 bp 0x7f5fa7426b60 sp 0x7f5fa7426b58 READ of size 8 at 0x608000007fa0 thread T1 This patch fix this issue by having the thread local mutex never be deleted (but will leak small piece of memory at the end.) The patch also describe a better solution (thread_local) in the comment that requires gcc 4.8.1 and in latest clang as a future work once we agree to move toward gcc 4.8. Test Plan: COMPILE_WITH_ASAN=1 make thread_local_test ./thread_local_test Reviewers: anthony, hermanlee4, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.0966,rocksdb,"Enable C4267 warning * conversion from size_t to type, by add static_cast Tested: * by build solution on Windows, Linux locally, * run tests * build CI system successful/"
,,0.0998,rocksdb,This addresses build issues on Windows
,,0.0702,rocksdb,Refactored tests to use try-with-resources/
,,0.0723,rocksdb,Refactored tests to use try-with-resources/
,,0.0702,rocksdb,Refactored tests to use try-with-resources/
,,0.0681,rocksdb,Refactored tests to use try-with-resources/
,,0.2625,rocksdb,"LDBCommand::InitFromCmdLineArgs() to move from template to function wrapper Summary: Build failure with some compiler setting with tools/reduce_levels_test.cc:97: undefined reference to `rocksdb::LDBCommand* rocksdb::LDBCommand::InitFromCmdLineArgs<rocksdb::LDBCommand* (*)(std::string const&, std::vector<std::string, std::allocator<std::string> > const&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&, std::vector<std::string, std::allocator<std::string> > const&)>(std::vector<std::string, std::allocator<std::string> > const&, rocksdb::Options const&, rocksdb::LDBOptions const&, std::vector<rocksdb::ColumnFamilyDescriptor, std::allocator<rocksdb::ColumnFamilyDescriptor> > const*, rocksdb::LDBCommand* (*)(std::string const&, std::vector<std::string, std::allocator<std::string> > const&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&, std::vector<std::string, std::allocator<std::string> > const&)) Fix it by changing to function pointer instead Test Plan: Run all existing tests Reviewers: andrewkr, kradhakrishnan, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: adsharma, lightmark, yiwu, leveldb, andrewkr, dhruba Differential Revision:"
,,0.1103,rocksdb,"[RocksJava] Adjusted RateLimiter to 3.10.0 (#1368) Summary: Deprecated RateLimiterConfig and GenericRateLimiterConfig Introduced RateLimiter It is now possible to use all C++ related methods also in RocksJava. A noteable method is setBytesPerSecond which can change the allowed number of bytes per second at runtime. Test Plan: make rocksdbjava make jtest Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.1169,rocksdb,"[RocksJava] Adjusted RateLimiter to 3.10.0 (#1368) Summary: Deprecated RateLimiterConfig and GenericRateLimiterConfig Introduced RateLimiter It is now possible to use all C++ related methods also in RocksJava. A noteable method is setBytesPerSecond which can change the allowed number of bytes per second at runtime. Test Plan: make rocksdbjava make jtest Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.1119,rocksdb,"[RocksJava] Adjusted RateLimiter to 3.10.0 (#1368) Summary: Deprecated RateLimiterConfig and GenericRateLimiterConfig Introduced RateLimiter It is now possible to use all C++ related methods also in RocksJava. A noteable method is setBytesPerSecond which can change the allowed number of bytes per second at runtime. Test Plan: make rocksdbjava make jtest Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.1153,rocksdb,"[RocksJava] Adjusted RateLimiter to 3.10.0 (#1368) Summary: Deprecated RateLimiterConfig and GenericRateLimiterConfig Introduced RateLimiter It is now possible to use all C++ related methods also in RocksJava. A noteable method is setBytesPerSecond which can change the allowed number of bytes per second at runtime. Test Plan: make rocksdbjava make jtest Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.1153,rocksdb,"[RocksJava] Adjusted RateLimiter to 3.10.0 (#1368) Summary: Deprecated RateLimiterConfig and GenericRateLimiterConfig Introduced RateLimiter It is now possible to use all C++ related methods also in RocksJava. A noteable method is setBytesPerSecond which can change the allowed number of bytes per second at runtime. Test Plan: make rocksdbjava make jtest Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.1069,rocksdb,"Enable Fast CRC32 for Win64 Summary: Currently the fast crc32 path is not enabled on Windows. I am trying to enable it here, hopefully, with the minimum impact to the existing code structure. Closes Differential Revision: D4770635 Pulled By: siying fbshipit-source-id: 676f8b8/"
,,0.3654,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.3641,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.3667,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.3574,rocksdb,"Expose DB::DeleteRange and WriteBath::DeleteRange in Java Summary: Added JNI wrapper from `DeleteRange` methods Closes Differential Revision: D4657746 Pulled By: yiwu-arbug fbshipit-source-id: 3fc7ab8/Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.3601,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.3614,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.3641,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.3627,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.3614,rocksdb,"Fixed various memory leaks and Java 8 JNI Compatibility Summary: I have manually audited the entire RocksJava code base. Sorry for the large pull-request, I have broken it down into many small atomic commits though. My initial intention was to fix the warnings that appear when running RocksJava on Java 8 with `-Xcheck:jni`, for example when running `make jtest` you would see many errors similar to: ``` WARNING in native method: JNI call made without checking exceptions when required to from CallObjectMethod WARNING in native method: JNI call made without checking exceptions when required to from CallVoidMethod WARNING in native method: JNI call made without checking exceptions when required to from CallStaticVoidMethod ... ``` A few of those warnings still remain, however they seem to come directly from the JVM and are not directly related to RocksJava; I am in contact with the OpenJDK hostpot-dev mailing list about these As a result of fixing these, I realised we were not r Closes Differential Revision: D4591758 Pulled By: siying fbshipit-source-id: 7f7fdf4/"
,,0.1909,rocksdb,"revert perf_context and io_stats to __thread Summary: introduces a regression by replacing __thread with ThreadLocalPtr. Revert the thread local implementation back. Closes Differential Revision: D5308050 Pulled By: lightmark fbshipit-source-id: 2676e9c22edf76e8133d3f4c50e2711e11a95480/using ThreadLocalPtr to hide ROCKSDB_SUPPORT_THREAD_LOCAL from publicÖ Summary: Ö headers should not reference RocksDB-specific macros (like ROCKSDB_SUPPORT_THREAD_LOCAL in this case) to public headers, `iostats_context.h` and `perf_context.h`. We shouldnt do that because users have to provide these compiler flags when building their binary with RocksDB. We should hide the thread local global variable inside our implementation and just expose a function api to retrieve these variables. It may break some users for now but good for long term. make check Closes Differential Revision: D5177896 Pulled By: lightmark fbshipit-source-id: 6fcdfac57f2e2dcfe60992b7385c5403f6dcb390/"
,,0.1506,rocksdb,"Add Iterator::Refresh() Summary: Add and implement Iterator::Refresh(). When this function is called, if the super version doesnt change, update the sequence number of the iterator to the latest one and invalidate the iterator. If the super version changed, recreated the whole iterator. This can help users reuse the iterator more easily. Closes Differential Revision: D5464500 Pulled By: siying fbshipit-source-id: f548bd35e85c1efca2ea69273802f6704eba6ba9/using ThreadLocalPtr to hide ROCKSDB_SUPPORT_THREAD_LOCAL from publicÖ Summary: Ö headers should not reference RocksDB-specific macros (like ROCKSDB_SUPPORT_THREAD_LOCAL in this case) to public headers, `iostats_context.h` and `perf_context.h`. We shouldnt do that because users have to provide these compiler flags when building their binary with RocksDB. We should hide the thread local global variable inside our implementation and just expose a function api to retrieve these variables. It may break some users for now but good for long term. make check Closes Differential Revision: D5177896 Pulled By: lightmark fbshipit-source-id: 6fcdfac57f2e2dcfe60992b7385c5403f6dcb390/"
,,0.1955,rocksdb,"using ThreadLocalPtr to hide ROCKSDB_SUPPORT_THREAD_LOCAL from publicÖ Summary: Ö headers should not reference RocksDB-specific macros (like ROCKSDB_SUPPORT_THREAD_LOCAL in this case) to public headers, `iostats_context.h` and `perf_context.h`. We shouldnt do that because users have to provide these compiler flags when building their binary with RocksDB. We should hide the thread local global variable inside our implementation and just expose a function api to retrieve these variables. It may break some users for now but good for long term. make check Closes Differential Revision: D5177896 Pulled By: lightmark fbshipit-source-id: 6fcdfac57f2e2dcfe60992b7385c5403f6dcb390/"
,,0.19699999999999998,rocksdb,"using ThreadLocalPtr to hide ROCKSDB_SUPPORT_THREAD_LOCAL from publicÖ Summary: Ö headers should not reference RocksDB-specific macros (like ROCKSDB_SUPPORT_THREAD_LOCAL in this case) to public headers, `iostats_context.h` and `perf_context.h`. We shouldnt do that because users have to provide these compiler flags when building their binary with RocksDB. We should hide the thread local global variable inside our implementation and just expose a function api to retrieve these variables. It may break some users for now but good for long term. make check Closes Differential Revision: D5177896 Pulled By: lightmark fbshipit-source-id: 6fcdfac57f2e2dcfe60992b7385c5403f6dcb390/"
,,0.1912,rocksdb,"using ThreadLocalPtr to hide ROCKSDB_SUPPORT_THREAD_LOCAL from publicÖ Summary: Ö headers should not reference RocksDB-specific macros (like ROCKSDB_SUPPORT_THREAD_LOCAL in this case) to public headers, `iostats_context.h` and `perf_context.h`. We shouldnt do that because users have to provide these compiler flags when building their binary with RocksDB. We should hide the thread local global variable inside our implementation and just expose a function api to retrieve these variables. It may break some users for now but good for long term. make check Closes Differential Revision: D5177896 Pulled By: lightmark fbshipit-source-id: 6fcdfac57f2e2dcfe60992b7385c5403f6dcb390/"
,,0.2071,rocksdb,"using ThreadLocalPtr to hide ROCKSDB_SUPPORT_THREAD_LOCAL from publicÖ Summary: Ö headers should not reference RocksDB-specific macros (like ROCKSDB_SUPPORT_THREAD_LOCAL in this case) to public headers, `iostats_context.h` and `perf_context.h`. We shouldnt do that because users have to provide these compiler flags when building their binary with RocksDB. We should hide the thread local global variable inside our implementation and just expose a function api to retrieve these variables. It may break some users for now but good for long term. make check Closes Differential Revision: D5177896 Pulled By: lightmark fbshipit-source-id: 6fcdfac57f2e2dcfe60992b7385c5403f6dcb390/"
,,0.2079,rocksdb,"util: Fix coverity issues Summary: util/concurrent_arena.h: CID 1396145 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member free_begin_ is not initialized in this constructor nor in any functions that it calls. 94 Shard() : allocated_and_unused_(0) {} util/dynamic_bloom.cc: 1. Condition hash_func NULL, taking true branch. CID 1322821 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 3. uninit_member: Non-static class member data_ is not initialized in this constructor nor in any functions that it calls. 47 hash_func_(hash_func nullptr ? &BloomHash : hash_func) {} 48 util/file_reader_writer.h: 204 private: 205 AlignedBuffer buffer_; member_not_init_in_gen_ctor: The compiler-generated constructor for this class does not initialize buffer_offset_. 206 uint64_t buffer_offset_; CID 1418246 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) member_not_init_in_gen_ctor: The compiler-generated constructor for this class does not initialize buffer_len_. 207 size_t buffer_len_; 208}; util/thread_local.cc: 341#endif CID 1322795 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 3. uninit_member: Non-static class member pthread_key_ is not initialized in this constructor nor in any functions that it calls. 342} 40struct ThreadData { 2. uninit_member: Non-static class member next is not initialized in this constructor nor in any functions that it calls. CID 1400668 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 4. uninit_member: Non-static class member prev is not initialized in this constructor nor in any functions that it calls. 41 explicit ThreadData(ThreadLocalPtr::StaticMeta* _inst) : entries(), inst(_inst) {} 42 std::vector<Entry> entries; 1. member_decl: Class member declaration for next. 43 ThreadData* next; 3. member_decl: Class member declaration for prev. 44 ThreadData* prev; 45 ThreadLocalPtr::StaticMeta* inst; 46}; Closes Differential Revision: D6233566 Pulled By: sagar0 fbshipit-source-id: aa2068790ea69787a0035c0db39d59b0c25108db/"
,,0.1946,rocksdb,"specify SSE42 target attribute for Fast_CRC32() Summary: if we enable SSE42 globally when compiling the tree for preparing a portable binary, which could be running on CPU w/o SSE42 instructions even the GCC on the building host is able to emit SSE42 code, this leads to illegal instruction errors on machines not supporting SSE42. to solve this problem, crc32 detects the supported instruction at runtime, and selects the supported CRC32 implementation according to the result of `cpuid`. but intrinics like ""_mm_crc32_u64()"" will not be available unless the ""target"" machine is appropriately specified in the command line, like ""-msse42"", or using the ""target"" attribute. we could pass ""-msse42"" only when compiling crc32c.cc, and allow the compiler to generate the SSE42 instructions, but we are still at the risk of executing illegal instructions on machines does not support SSE42 if the compiler emits code that is not guarded by our runtime detection. and we need to do the change in both Makefile and CMakefile. or, we can use GCCs ""target"" attribute to enable the machine specific instructions on certain function. in this way, we have finer grained control of the used ""target"". and no need to change the makefiles. so we dont need to duplicate the changes on both makefile and cmake as the previous approach. this problem surfaces when preparing a package for GNU/Linux distribution, and we only applies to optimization for SSE42, so using a feature only available on GCC/Clang is not that formidable. Closes Differential Revision: D5786084 Pulled By: siying fbshipit-source-id: bca5c0f877b8d6fb55f58f8f122254a26422843d/Updated CRC32 Power Optimization Changes Summary: Support for PowerPC Architecture Detecting AltiVec Support Closes Differential Revision: D5606836 Pulled By: siying fbshipit-source-id: 720262453b1546e5fdbbc668eff56848164113f3/"
,,0.2069,rocksdb,"util: Fix coverity issues Summary: util/concurrent_arena.h: CID 1396145 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member free_begin_ is not initialized in this constructor nor in any functions that it calls. 94 Shard() : allocated_and_unused_(0) {} util/dynamic_bloom.cc: 1. Condition hash_func NULL, taking true branch. CID 1322821 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 3. uninit_member: Non-static class member data_ is not initialized in this constructor nor in any functions that it calls. 47 hash_func_(hash_func nullptr ? &BloomHash : hash_func) {} 48 util/file_reader_writer.h: 204 private: 205 AlignedBuffer buffer_; member_not_init_in_gen_ctor: The compiler-generated constructor for this class does not initialize buffer_offset_. 206 uint64_t buffer_offset_; CID 1418246 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) member_not_init_in_gen_ctor: The compiler-generated constructor for this class does not initialize buffer_len_. 207 size_t buffer_len_; 208}; util/thread_local.cc: 341#endif CID 1322795 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 3. uninit_member: Non-static class member pthread_key_ is not initialized in this constructor nor in any functions that it calls. 342} 40struct ThreadData { 2. uninit_member: Non-static class member next is not initialized in this constructor nor in any functions that it calls. CID 1400668 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 4. uninit_member: Non-static class member prev is not initialized in this constructor nor in any functions that it calls. 41 explicit ThreadData(ThreadLocalPtr::StaticMeta* _inst) : entries(), inst(_inst) {} 42 std::vector<Entry> entries; 1. member_decl: Class member declaration for next. 43 ThreadData* next; 3. member_decl: Class member declaration for prev. 44 ThreadData* prev; 45 ThreadLocalPtr::StaticMeta* inst; 46}; Closes Differential Revision: D6233566 Pulled By: sagar0 fbshipit-source-id: aa2068790ea69787a0035c0db39d59b0c25108db/"
,,0.1859,rocksdb,"Several small ""fixes"" Summary: removed a few unneeded variables fused some variable declarations and their assignments fixed right-trimming code in string_util.cc to not underflow simplifed an assertion move non-nullptr check assertion before dereferencing of that pointer pass an std::string function parameter by const reference instead of by value (avoiding potential copy) Closes Differential Revision: D7004679 Pulled By: sagar0 fbshipit-source-id: 52944952d9b56dfcac3bea3cd7878e315bb563c4/"
,,0.1622,rocksdb,"Avoid adding tombstones of the same file to RangeDelAggregator multiple times Summary: RangeDelAggregator will remember the files whose range tombstones have been added, so the caller can check whether the file has been added before call AddTombstones. Closes Differential Revision: D7354604 Pulled By: ajkr fbshipit-source-id: 9b9f7ec130556028df417e650711554b46d8d107/Comment out unused variables Summary: Submitting on behalf of another employee. Closes Differential Revision: D7146025 Pulled By: ajkr fbshipit-source-id: 495ca5db5beec3789e671e26f78170957704e77e/Several small ""fixes"" Summary: removed a few unneeded variables fused some variable declarations and their assignments fixed right-trimming code in string_util.cc to not underflow simplifed an assertion move non-nullptr check assertion before dereferencing of that pointer pass an std::string function parameter by const reference instead of by value (avoiding potential copy) Closes Differential Revision: D7004679 Pulled By: sagar0 fbshipit-source-id: 52944952d9b56dfcac3bea3cd7878e315bb563c4/"
,,0.1873,rocksdb,"Several small ""fixes"" Summary: removed a few unneeded variables fused some variable declarations and their assignments fixed right-trimming code in string_util.cc to not underflow simplifed an assertion move non-nullptr check assertion before dereferencing of that pointer pass an std::string function parameter by const reference instead of by value (avoiding potential copy) Closes Differential Revision: D7004679 Pulled By: sagar0 fbshipit-source-id: 52944952d9b56dfcac3bea3cd7878e315bb563c4/"
,,0.1586,rocksdb,"Allow storing metadata with backups for Java API (#4111) Summary: Exposes BackupEngine::CreateNewBackupWithMetadata and BackupInfo metadata to the Java API. Full disclaimer, Im not familiar with JNI stuff, so I might have forgotten something (hopefully no memory leaks). I also tried to find contributing guidelines but didnt see any, but I hope the PR style is consistent with the rest of the code base. Pull Request resolved: Differential Revision: D8811180 Pulled By: ajkr fbshipit-source-id: e38b3e396c7574328c2a1a0e55acc8d092b6a569/"
,,0.1602,rocksdb,"Allow storing metadata with backups for Java API (#4111) Summary: Exposes BackupEngine::CreateNewBackupWithMetadata and BackupInfo metadata to the Java API. Full disclaimer, Im not familiar with JNI stuff, so I might have forgotten something (hopefully no memory leaks). I also tried to find contributing guidelines but didnt see any, but I hope the PR style is consistent with the rest of the code base. Pull Request resolved: Differential Revision: D8811180 Pulled By: ajkr fbshipit-source-id: e38b3e396c7574328c2a1a0e55acc8d092b6a569/"
,,0.1586,rocksdb,"Allow storing metadata with backups for Java API (#4111) Summary: Exposes BackupEngine::CreateNewBackupWithMetadata and BackupInfo metadata to the Java API. Full disclaimer, Im not familiar with JNI stuff, so I might have forgotten something (hopefully no memory leaks). I also tried to find contributing guidelines but didnt see any, but I hope the PR style is consistent with the rest of the code base. Pull Request resolved: Differential Revision: D8811180 Pulled By: ajkr fbshipit-source-id: e38b3e396c7574328c2a1a0e55acc8d092b6a569/"
,,0.1618,rocksdb,"Allow storing metadata with backups for Java API (#4111) Summary: Exposes BackupEngine::CreateNewBackupWithMetadata and BackupInfo metadata to the Java API. Full disclaimer, Im not familiar with JNI stuff, so I might have forgotten something (hopefully no memory leaks). I also tried to find contributing guidelines but didnt see any, but I hope the PR style is consistent with the rest of the code base. Pull Request resolved: Differential Revision: D8811180 Pulled By: ajkr fbshipit-source-id: e38b3e396c7574328c2a1a0e55acc8d092b6a569/"
,,0.1728,rocksdb,"Fix the build error caused by the dynamic array (#4918) Summary: In the MixGraph benchmark of db_bench , the char array is initialized with an argument from users input, which can cause build error on some platforms. Also, the msg char array size can be potentially smaller than the printed data, which should be extended from 100 to 256. Tested with make check. Pull Request resolved: Differential Revision: D13844298 Pulled By: sagar0 fbshipit-source-id: 33c4809c5c4438f0a9f7b289d3f42e20c545bbab/Generate mixed workload with Get, Put, Seek in db_bench (#4788) Summary: Based on the specific workload models (key access distribution, value size distribution, and iterator scan length distribution, the QPS variation), the MixGraph benchmark generate the synthetic workload according to these distributions which can reflect the real-world workload characteristics. After user enable the tracing function, they will get the trace file. By analyzing the trace file with the trace_analyzer tool, user can generate a set of statistic data files including. The *_accessed_key_stats.txt, *-accessed_value_size_distribution.txt, *-iterator_length_distribution.txt, and *-qps_stats.txt are mainly used to fit the Matlab model fitting. After that, user can get the parameters of the workload distributions (the modeling details are described: [here]( The key access distribution follows the The two-term power model. The probability density function is: `f(x) ax^{b}+c`. The corresponding parameters are key_dist_a, key_dist_b, and key_dist_c in db_bench For the value size distribution and iterator scan length distribution, they both follow the Generalized Pareto Distribution. The probability density function is `f(x) (1/sigma)(1+k*(x-theta)/sigma))^{-1-1/k)`. The parameters are: value_k, value_theta, value_sigma and iter_k, iter_theta, iter_sigma. For more information about the Generalized Pareto Distribution, users can find the [wiki]( and [Matalb page]( As for the QPS, it follows the diurnal pattern. So Sine is a good model to fit it. `F(x) sine_a*sin(sine_b*x + sine_c) + sine_d`. The trace_will tell you the average QPS in the print out resutls, which is sine_d. After user fit the ""*-qps_stats.txt"" to the Matlab model, user can get the sine_a, sine_b, and sine_c. By using the 4 parameters, user can control the QPS variation including the period, average, changes. To use the bench mark, user can indicate the following parameters as examples: ``` ``` Pull Request resolved: Differential Revision: D13573940 Pulled By: sagar0 fbshipit-source-id: e184c27e07b4f1bc0b436c2be36c5090c1fb0222/Add max_scan_distance flag to db_bench (#4660) Summary: The new flag makes it possible to constrain iterator traversal by the upper/lower bound the iterator is expected to pass. This allows seekrandom results to be more easily comparable between DBs with and without deletions. Pull Request resolved: Differential Revision: D13053111 Pulled By: abhimadan fbshipit-source-id: 33e250f2e2d210b54c7726399da30a33f723c33c/"
,,0.11800000000000001,rocksdb,"Detect if Jemalloc is linked with the binary (#4844) Summary: Declare Jemalloc non-standard APIs as weak symbols, so that if Jemalloc is linked with the binary, these symbols will be replaced by Jemallocs, otherwise they will be nullptr. This is similar to how folly detect jemalloc, but we assume the main program use jemalloc as long as jemalloc is linked: Pull Request resolved: Differential Revision: D13574934 Pulled By: yiwu-arbug fbshipit-source-id: 7ea871beb1be7d5a1259cc38f9b78078793db2db/"
,,0.1941,rocksdb,"multiget: fix memory issues due to vector auto resizing (#5279) Summary: This PR fixes three memory issues found by ASAN * in db_stress, the key vector for MultiGet is created using `emplace_back` which could potentially invalidates references to the underlying storage (vector<string>) due to auto resizing. Fix by calling reserve in advance. * Similar issue in construction of GetContext autovector in version_set.cc * In multiget_context.h use T[] specialization for unique_ptr that holds a char array Pull Request resolved: Differential Revision: D15202893 Pulled By: miasantreble fbshipit-source-id: 14cc2cda0ed64d29f2a1e264a6bfdaa4294ee75d/fix implicit conversion error reported by clang check (#5277) Summary: fix the following clang check errors ``` tools/db_stress.cc:3609:30: error: implicit conversion loses integer precision: std::vector::size_type (aka unsigned long) to int [-Werror,-Wshorten-64-to-32] int num_keys rand_keys.size(); ~~~~~~~~ ~~~~~~~~~~^~~~~~ tools/db_stress.cc:3888:30: error: implicit conversion loses integer precision: std::vector::size_type (aka unsigned long) to int [-Werror,-Wshorten-64-to-32] int num_keys rand_keys.size(); ~~~~~~~~ ~~~~~~~~~~^~~~~~ 2 errors generated. make: *** [tools/db_stress.o] Error 1 ``` Pull Request resolved: Differential Revision: D15196620 Pulled By: miasantreble fbshipit-source-id: d56b1420d4a9f1df875fc52877a5fbb342bc7cae/Add option to use MultiGet in db_stress (#5264) Summary: The new option will pick a batch size randomly in the range 1-64. It will then space the keys in the batch by random intervals. Pull Request resolved: Differential Revision: D15175522 Pulled By: anand1976 fbshipit-source-id: c16baa69d0f1ff4cf53c55c813ddd82c8aeb58fc/"
,,0.1072,rocksdb,"Fix many bugs in log statement arguments (#5089) Summary: Annotate all of the logging functions to inform the compiler that these use printf-style formatting arguments. This allows the compiler to emit warnings if the format arguments are incorrect. This also fixes many problems reported now that format string checking is enabled. Many of these are simply mix-ups in the argument type (e.g, int vs uint64_t), but in several cases the wrong number of arguments were being passed in which can cause the code to crash. The primary motivation for this was to fix the log message in `DBImpl::SwitchMemtable()` which caused a segfault due to an extra %s format parameter with no argument supplied. Pull Request resolved: Differential Revision: D14574795 Pulled By: simpkins fbshipit-source-id: 0921b03f0743652bf4ae21e414ff54b3bb65422a/"
,,0.1791,rocksdb,"Add support for loading dynamic libraries into the RocksDB environment (#5281) Summary: This change adds a Dynamic Library class to the RocksDB Env. Dynamic libraries are populated via the Env::LoadLibrary method. The addition of dynamic library support allows for a few different features to be developed: 1. The compression code can be changed to use dynamic library support. This would allow RocksDB to determine at run-time what compression packages were installed. This change would eliminate the need to make sure the build-time and run-time environment had the same library set. It would also simplify some of the Java build issues (where it attempts to build and include various packages inside the RocksDB jars). 2. Along with other features (to be provided in a subsequent PR), this change would allow code/configurations to be added to RocksDB at run-time. For example, the build system includes code for building an ""rados"" environment and adding ""Cassandra"" features. Instead of these extensions being built into the base RocksDB code, these extensions could be loaded at run-time as required/appropriate, either by configuration or explicitly. We intend to push out other changes in support of the extending RocksDB at run-time via configurations. Pull Request resolved: Differential Revision: D15447613 Pulled By: riversand963 fbshipit-source-id: 452cd4f54511c0bceee18f6d9d919aae9fd25fef/"
,,0.1729,rocksdb,"Add support for loading dynamic libraries into the RocksDB environment (#5281) Summary: This change adds a Dynamic Library class to the RocksDB Env. Dynamic libraries are populated via the Env::LoadLibrary method. The addition of dynamic library support allows for a few different features to be developed: 1. The compression code can be changed to use dynamic library support. This would allow RocksDB to determine at run-time what compression packages were installed. This change would eliminate the need to make sure the build-time and run-time environment had the same library set. It would also simplify some of the Java build issues (where it attempts to build and include various packages inside the RocksDB jars). 2. Along with other features (to be provided in a subsequent PR), this change would allow code/configurations to be added to RocksDB at run-time. For example, the build system includes code for building an ""rados"" environment and adding ""Cassandra"" features. Instead of these extensions being built into the base RocksDB code, these extensions could be loaded at run-time as required/appropriate, either by configuration or explicitly. We intend to push out other changes in support of the extending RocksDB at run-time via configurations. Pull Request resolved: Differential Revision: D15447613 Pulled By: riversand963 fbshipit-source-id: 452cd4f54511c0bceee18f6d9d919aae9fd25fef/"
,,0.1641,rocksdb,"Clean up VersionEdit a bit (#6383) Summary: This is a bunch of small improvements to `VersionEdit`. Namely, the patch * Makes the names and order of variables, methods, and code chunks related to the various information elements more consistent, and adds missing getters for the sake of completeness. * Initializes previously uninitialized stack variables. * Marks all getters const to improve const correctness. * Adds in-class initializers and removes the default ctor that would create an object with uninitialized built-in fields and call `Clear` afterwards. * Adds a new type alias for new files and changes the existing `typedef` for deleted files into a type alias as well. * Makes the helper method `DecodeNewFile4From` private. * Switches from long-winded iterator syntax to range based loops in a couple of places. * Fixes a couple of assignments where an integer 0 was assigned to boolean members. * Fixes a getter which used to return a `const std::string` instead of the intended `const std::string&`. Pull Request resolved: Test Plan: make check Differential Revision: D19780537 Pulled By: ltamasi fbshipit-source-id: b0b4f09fee0ec0e7c7b7a6d76bfe5346e91824d0/"
