Topic_no,Keywords,Contrib,System,Text
9,"android, fix, add, cleanup, update, issue, refactor, detail, show, work, remove, fragment, move, transfer, start, common, set, file, stop, block_cache",0.0597,conscrypt,Convert EC_GROUP and EC_POINT to new style Bug: 16656908 Change-Id: Ie912f376f69327ce634cac50763bf86b418049f5/
,,0.0643,frostwire,[desktop] Vuze cleanup/
,,0.073,frostwire,[desktop] Fixing compilation issues with new Licenses type/
,,0.0906,frostwire,[desktop] shared/one-click seed files are now DHT tracked by default./
,,0.162,frostwire,"[common] Bullet proofed EZTV search. Now works on android, supports both .torrents and magnets./"
,,0.0954,frostwire,[common] added an unit mapper on TPBSearchResult to reuse parent class size parsing logic./[android] size parsing DRY refactor. cleanup./
,,0.18600000000000003,frostwire,[common] Fixed SC search result size/[android] confirm list dialog not dependent on SearchResult. Refactors confirm list dialog not dependent on SearchResult. Refactors
,,0.0844,frostwire,DRY refactor More cleanup/
,,0.0982,frostwire,[common] more dry refactor on size calculation. compilation issues fixed./
,,0.2851,frostwire,"[android] Fixes issue update My files headers on file deletion. Updates ""My Files"" header file count when: File is removed from ""My Files"" File is/are removed from ""My Music"", context menu actions. File is removed from Music Player screen during playback. File is/are removed from a finished transfer./[android] refactor. less aggresive locking./[android] fix display of recents, refactor on albumLoader./[android] fixes on favorite fragment, adding to favorites./[android] more player code cleanup./"
,,0.0942,frostwire,[android] more refactors. brought Ref.class to apollo to be able to submit this work to cyanogens project later on./
,,0.0977,frostwire,"[android] refactors, more fragments working./"
,,0.3671,frostwire,"[android] fixed scrolling issue on profile adapters./[android] dont call refresh() inside restartLoader. minor optimizations. hunting for bug on favoritefragment./[android] fixes issue where last added favorite wasnt displaying. other refresh issues remain./[android] refactors, more fragments working./[android] mistery solved, several fixes, lots of logging to find it./[android] more refactors. brought Ref.class to apollo to be able to submit this work to cyanogens project later on./[android] player refactor. cleanup, build fix./[android] next batch of fragment refactors and fixes./[android] player cleanup. moved fragment ids to Fragments class./[android] more player code cleanup./"
,,0.3129,frostwire,"[android] dont call refresh() inside restartLoader. minor optimizations. hunting for bug on favoritefragment./[android] fixes issue where last added favorite wasnt displaying. other refresh issues remain./[android] refactors, more fragments working./[android] more refactors. brought Ref.class to apollo to be able to submit this work to cyanogens project later on./[android] player cleanup. moved fragment ids to Fragments class./[android] more player code cleanup./"
,,0.1296,frostwire,"[android] build 242 Fixes refresh issues adding/removing playlists. Refactors, cleanup./"
,,0.1357,frostwire,"[android] build 242 Fixes refresh issues adding/removing playlists. Refactors, cleanup./[android] feedback when creating new playlist with list of tracks./"
,,0.0599,frostwire,[android] player refactor.
,,0.1023,frostwire,[android] fixes crash on long pressing special playlists./
,,0.0913,frostwire,"[android] mistery solved, several fixes, lots of logging to find it./[android] Loaders refactor./[android] more player code cleanup./"
,,0.1202,frostwire,[android] updated layout of the vpn-detail-page/
,,0.0903,frostwire,"[android] Fixed android compilation, implemented AndroidSettings/"
,,0.2363,frostwire,[android] first iteration of youtube download dialog. show offer after handpicked dialog has started download./[android] search and other torrent downloads now support partial download dialog. edge cases to fix./
,,0.1835,frostwire,"[android] Fixes issue update My files headers on file deletion. Updates ""My Files"" header file count when: File is removed from ""My Files"" File is/are removed from ""My Music"", context menu actions. File is removed from Music Player screen during playback. File is/are removed from a finished transfer./"
,,0.0895,frostwire,[android] SoundCloud transfers were not reporting progress correctly due to unknown file size. Fixes Issue
,,0.2485,frostwire,[android] minor dry refactor./[android] trying to plug handpick dialog without adding any UI thread code inside TransferManager. Attempting to do it with a torrent fetcher listener object that creates the handpick dialog as soon as it knows about the .torrent byte array./[android] Improved BitTorrent Status display on transfers./Adjusting for new magnet fetch download name/
,,0.1801,frostwire,"[android] Fixes issue update My files headers on file deletion. Updates ""My Files"" header file count when: File is removed from ""My Files"" File is/are removed from ""My Music"", context menu actions. File is removed from Music Player screen during playback. File is/are removed from a finished transfer./[android] Updates file count after files are deleted. Fixes"
,,0.1121,frostwire,[android] Improved BitTorrent Status display on transfers./
,,0.1101,frostwire,[android] adding selected checkbox counter and event handlers. wip/
,,0.2503,frostwire,"[android] refresh when files removed/added from transfers./[android] Fixes issue update My files headers on file deletion. Updates ""My Files"" header file count when: File is removed from ""My Files"" File is/are removed from ""My Music"", context menu actions. File is removed from Music Player screen during playback. File is/are removed from a finished transfer./[android] Using platform FS to delete file in Librarian/[common] Removed DirectoryUtils/[android] Restored scanning of cloud downloads when using SAF/"
,,0.0648,frostwire,[android] Not using apache FileUtils for scan files/
,,0.0702,frostwire,[desktop] added new Slide.IS_ADVERTISEMENT flag/
,,0.1039,frostwire,[desktop] Not adding magnet downloads to the UI/
,,0.1399,frostwire,"[common] Keeping track of listening interfaces/Cleanup/[common] Reverted to simple jlibtorrent session creation (not using logging by default)/[android] temporary logging and forcing settings for portmapping./[android] adds internal addresses and listen port with each one. gotta clean up the output/[android] Adds x.pe= parameter. (#WIP, no clue how to get the port)/"
,,0.0665,frostwire,[common] Fixed major bug in thread pool creation/
,,0.0657,frostwire,[common] avoid connection leaks with OKHttpClient./
,,0.1281,frostwire,[android] Closes more descriptive error on Connection timed out for cloud transfers./[android] Coded UI scanning status/
,,0.0792,frostwire,"[common] Added a few final, cleanup and formatting/"
,,0.1,frostwire,[android] Do not offer to download .flv files
,,0.0648,frostwire,[common] further improvements on eztv parsing/
,,0.1287,frostwire,[android] try to stop and dismiss music faster. avoid issue of music that stopped coming back on next session./
,,0.1153,frostwire,"[android] moved away from serializing using a LinkedHashSet, order wouldnt be serialized correctly, using a String[] encoded into a JSON String. waterfall complete./[android] support for string set preferences./[android] cleanup, refactoring./"
,,0.149,frostwire,"[android] REMOVEADS_BACK_TO_BACK_THRESHOLD/[android] moved away from serializing using a LinkedHashSet, order wouldnt be serialized correctly, using a String[] encoded into a JSON String. waterfall complete./[android] removed store flavor and constants refactor/[android] Missing checks for flavor/"
,,0.146,frostwire,"[android] Now, starting from Lollipop, everyone uses the same media scanning method/[android] Fixed network type in AndroidPlatform/"
,,0.3025,frostwire,"[android] Multiple fixes. Respects ""Show Transfers"" preference for cloud downloads. based torrents search results work again. Shows a toast to appeace user in case torrent fetching takes a while when a torrent search result is clicked./[android] Removed redundant ui BittorrentDownload/[android] Removed redundant DownloadTransfer/"
,,0.0895,frostwire,[android] Putting PlayStore to work/
,,0.1413,frostwire,[android] pass magnet url if you have it to add it to torrent_params so that the download after the magnet download can start faster./
,,0.4399,frostwire,"[android] Not adding magnet downloads to the UI/[android] pass magnet url if you have it to add it to torrent_params so that the download after the magnet download can start faster./[android] ResumeDownloadMenuAction no longer doubles up for Seeding. Now Seeding action also supports BittorrentDownloads in constructor and has a new dialog to turn on BitTorrent in case its turned off./[android] Multiple fixes. Respects ""Show Transfers"" preference for cloud downloads. based torrents search results work again. Shows a toast to appeace user in case torrent fetching takes a while when a torrent search result is clicked./[android] Refactor preparing to remove ui BittorrentDownload/[android] Removed UI isResumable method/[android] Removed redundant DownloadTransfer/[android] Refactor to use Transfer from common/"
,,0.1632,frostwire,[android] set ringtone integrated in player. major refactor and simplification./[android] sets up ringtone on android 6 Google once again changed how to access WRITE_SETTINGS permissions. These are refactors that I could only compile once I set the compileSdk to Level 23 Ill see if I can get away with not using Setting.System.canWrite() as I dont see an equivalent method with the v4 support libraries for API Level 16/
,,0.0938,frostwire,"[android] Detection of VPN in EngineBroadcastReceiver, preparing to remove threading from UI/[android] Replaced isTunnelUp with a minimal, safer and equivalent code/"
,,0.1433,frostwire,[android] pass magnet url if you have it to add it to torrent_params so that the download after the magnet download can start faster./
,,0.3993,frostwire,"[android] removed store flavor and constants refactor/[android] settingsactivity shows processing payment for up to 30 secs if it cant load products show fw/give for plus users turning off ad support/[android] preference bug fixed, refactor, testing tool. PlayStore.purchasedProducts() fixed. Makes sure when a purchase has finished succesfully that all adnetworks are stopped immediatly. Preference to remove ads no longer disabled after purchase, click is handled appropiately. Added new testing use function to consume all one-time consumables. It is invoked after 20 clicks on the Remove Ads preferences after user has made a one-time purchase. s/LOGGER/LOG on RemoveAdsNetwork.java/[android] refactored s/enable/enabled, build 282, verbose inventory attempt/[android] hide support frostwire option if in-app enabled./[android] disable remove ads preference when user already paid/[android] cleanup, logging./[android] shows days left on settings. refactor./[android] display current plan on settings. added primitive buy activity to test and new flavor for alpha/"
,,0.1384,frostwire,"[android] Detection of VPN in EngineBroadcastReceiver, preparing to remove threading from UI/[android] Now, starting from Lollipop, everyone uses the same media scanning method/"
,,0.1177,frostwire,"[android] Using ftruncate and metadata flush in SD copy/[android] Now, starting from Lollipop, everyone uses the same media scanning method/"
,,0.0669,frostwire,[desktop] fixes playback broken running from source./
,,0.077,frostwire,"[common] removed excess logging, it can hangs the app (specially in Windows)/"
,,0.1915,frostwire,[android] new opt-out haptic feedback support on some UI actions/[android] More edge cases and better shutdown. MusicUtils.mService renamed to MusicUtils.musicPlaybackServices Fixed log entry on Offers.dismissAndOrShutdownIfNecessary Cleanup/
,,0.3657,frostwire,"[android] fixed compilation/[android] MusicUtils, avoid NPEs/[android] fixes premature music service stop during music playback, refactor, much better shutdown./[android] More edge cases and better shutdown. MusicUtils.mService renamed to MusicUtils.musicPlaybackServices Fixed log entry on Offers.dismissAndOrShutdownIfNecessary Cleanup/[android] music playback isnt interrupted when video ad is displayed/[android] more cleanup and formatting/"
,,0.0765,frostwire,[android] more cleanup and formatting/
,,0.3844,frostwire,"[android] new opt-out haptic feedback support on some UI actions/[android] MobFox integration commented (not a good library to integrate with), back to gradle 2.14.1/[android] Offers updates. (warning removal) Use static call for Banners.setLocation(false) (protection) Make sure other networks can be stopped even if one fails Avoid double .finish() in case finishAfterDimiss=true and shutdownAfter=true. the shutdown logic is responsible for the MainActivity finish() (protection) Avoid possible NPE in case both the activity and application parameters are null/[android] if a network has been passed and were shutting down, stop it/[android] signatures refactor. these static methods dont need weakrefs/[android] avoid double finish/[android] MobFoxAdnetwork tells its listener when not to act on interstitial closed/[android] Offers: location grant permission logic. dont turn off support preference. logging./[android] mobfox implementation. not showing ads./[android] plugged MobFox/[android] finish or shutdown on dismiss DRY refactor All ad networks reuse logic to handle dismiss or shutdown, fixing possible case where app wouldnt be shutdown on one of the networks. Future proofing improvement on Offers.getActiveNetworks() for new network codes or configuration typos./[android] refactored AdNetworks. Encapsulated logic to enable/disable networks. Created Offers.AdNetworkHelper class to reduce code repetition among networks by using composition./"
,,0.1941,frostwire,"[android] make sure shared preferences are cleared on the first run. Theres a very weird issue on which clearing data and uninstalling the app (either through the Settings screen or with adb uninstall com.frostwire.android) the settings remain, and for some reason the support_fw setting keeps getting turned off/"
,,0.1968,frostwire,"[android] send client params/[android] build 296, back to production urls./[android] mobfox implementation. not showing ads./[android] boilerplate code for MobFox/[android] fixed bug where ads couldnt be turned off on intellij build. simplification/"
,,0.1504,frostwire,"[android] fixes premature music service stop during music playback, refactor, much better shutdown./"
,,0.0577,frostwire,[android] updated SettingsActivity/
,,0.0818,frostwire,[android] new opt-out haptic feedback support on some UI actions/
,,0.1833,frostwire,[android] More edge cases and better shutdown. MusicUtils.mService renamed to MusicUtils.musicPlaybackServices Fixed log entry on Offers.dismissAndOrShutdownIfNecessary Cleanup/[android] update build tools gradle to 2.1.3 and minor cleanup/
,,0.0951,frostwire,"[desktop] revert/[desktop] fixes case when dropping from starred to regular playlist/[desktop] make sure old starred items in memory arent added again when dragging files to starred/[desktop] encapsulation, cleanup, version 6.4.2 build 211/"
,,0.1104,frostwire,"[desktop] detects PIA VPN when kill-switch setting on/[desktop] Fixes false positive VPN detection issue After VPN technology updates, its no longer reliable to query for network interfaces that contain the string tun in them. Nowadays such interfaces are added and active even if theyre not part of the ip route table. Were using a similar technique for posix to detect if the tunnel interface is the parting ip on the route table, every 20 seconds/"
,,0.1372,frostwire,[android] moving creation of shortcut on home screen to asynchronous task (#254) * [android] moving creation of shortcut on home screen to asynchronous task/
,,0.0823,frostwire,[android] unit loads. onclick doesnt do much. layout and closing button needed/
,,0.0643,frostwire,[android] WIP more on AbstractAdNetwork refactor/
,,0.4325,frostwire,"[android] Allow simple playback of ringtones without adversly affecting the users current playback and incidental stop/play status fix for file lists (affects both ringtone and music playback): something is playing and a ringtone is to be played the current played music will be paused a ringtone is playing and music playback is resumed/started then the ringtone will be stopped one ringtone can be played at the same time. Starting new playback will stop the old one. a ringtone that is being played will stop the playback out of the fragment or changing the tab carusel will stop playback of a ringtone. (User can no longer see the stop button, so its stopped for him)/"
,,0.0764,frostwire,"[android] refactor, move of random pitches to UIUtils and formatting/"
,,0.4988,frostwire,"[android] refactor on promo adapter, no more crash on plus/[android] multiple fixes with promo views/adapter makes sure remove ads offer isnt shown if user removed ads ads touch to frostwire features black background title view refactors WIP: crashing for some reason on plus build/[android] cleanup/[android] slide promo getView() logic, boolean refactor/[android] frostwire_features_all_downloads link fixed layout height, linked to frostwire.com/[android] calculate what the last offset for promos is/[android] no special offers in horizontal mode. fix number of slides when in landscape mode to always have an even number/[android] fixes index out of bounds for plus/[android] preview and read more listeners on promos finished./[android] special offers above features working/[android] started moving special offers into promotion adapter made AbstractAdapters getView() non-final so we can have heterogeneous views will refactor the special offers next to use a common containing layout/[android] new fw feature UI layout set up/"
,,0.1022,frostwire,[android] Open ringtones in a simple way when using contextual menu/
,,0.4926,frostwire,"[android] remove useless file and use only one layout file for files list (#275)/[android] Open ringtones in a simple way when using contextual menu/[android] Allow simple playback of ringtones without adversly affecting the users current playback and incidental stop/play status fix for file lists (affects both ringtone and music playback): something is playing and a ringtone is to be played the current played music will be paused a ringtone is playing and music playback is resumed/started then the ringtone will be stopped one ringtone can be played at the same time. Starting new playback will stop the old one. a ringtone that is being played will stop the playback out of the fragment or changing the tab carusel will stop playback of a ringtone. (User can no longer see the stop button, so its stopped for him)/[android] Fix for ringtone item selection and context menu the ability to check multiple ringtones by hiding the checkboxes there are no items for the context menu dont show it menu ignores other checked files (always can play and set as ringtone)/"
,,0.0919,frostwire,"[android] created framework for new settings, with fragments and toolbar/"
,,0.0769,frostwire,"[android] added getFragments and click forward support from AbstractDialog to AbstractActivity2/[android] creation of AbstractActivity2 with material design, toolbar and used in AboutActivity/"
,,0.4416,frostwire,"[android] Allow simple playback of ringtones without adversly affecting the users current playback and incidental stop/play status fix for file lists (affects both ringtone and music playback): something is playing and a ringtone is to be played the current played music will be paused a ringtone is playing and music playback is resumed/started then the ringtone will be stopped one ringtone can be played at the same time. Starting new playback will stop the old one. a ringtone that is being played will stop the playback out of the fragment or changing the tab carusel will stop playback of a ringtone. (User can no longer see the stop button, so its stopped for him)/"
,,0.2062,frostwire,"[android] NPE proof and short-circuit execution after clicks are handled/[android] frostwire_features_all_downloads link fixed layout height, linked to frostwire.com/[android] granular event handling inside PromotionsView Slides/[android] special offers above features working/"
,,0.4427,frostwire,"[android] Allow simple playback of ringtones without adversly affecting the users current playback and incidental stop/play status fix for file lists (affects both ringtone and music playback): something is playing and a ringtone is to be played the current played music will be paused a ringtone is playing and music playback is resumed/started then the ringtone will be stopped one ringtone can be played at the same time. Starting new playback will stop the old one. a ringtone that is being played will stop the playback out of the fragment or changing the tab carusel will stop playback of a ringtone. (User can no longer see the stop button, so its stopped for him)/"
,,0.0838,frostwire,[common] Adding capability to get lyrics if available from mp3 files (#369)/
,,0.0859,frostwire,[common] Adding capability to get lyrics if available from mp3 files (#369)/
,,0.0828,frostwire,[desktop] revamps playlists look (no lyrics yet)/
,,0.1139,frostwire,[desktop] immediatly refresh the vpn drop guard on the status line when settings are applied. cleanup. build 218/[desktop] WIP inform the user in statusbar/
,,0.0731,frostwire,[desktop] New settings/constants to support activation of Experimental Features/
,,0.1019,frostwire,[desktop] minor refactor on shutdown/
,,0.073,frostwire,[desktop] one more stdout print during shutdown/
,,0.1296,frostwire,[common] minor refactor in BTDownload/[all] update to jlibtorrent 1.2.0.7-RC3/
,,0.0751,frostwire,[common] fixed some bad prefix in YT/
,,0.0765,frostwire,[android] cleanup and formatting/
,,0.0786,frostwire,[android] source code cleanup/
,,0.0977,frostwire,[android] New Screen Rotation lock setting/
,,0.0977,frostwire,[android] New Screen Rotation lock setting/
,,0.1216,frostwire,[android] Multiple selection for files that arenít audio files should not offer the option ëAdd to Playlistí/[android] ad placement invocation adjustment to single unit/[android] change of 3g/4g option to wifi only option (#344) minor fix in AbstractActivity/
,,0.1082,frostwire,[android] change of 3g/4g option to wifi only option (#344) minor fix in AbstractActivity/[android] feature/dont start bittorrent without vpn (#343) new UIUtils.showDismissableMessage/
,,0.1362,frostwire,"[android] had to go back to OrientationEventListener. The WindowManagers DefaultDisplay keeps caching values and always returns the same rotation, width and height thus resulting in funky behavior. Didnt find a way to request this object to refresh and return the actual orientation. Only the sensor monitor retrieves the true value/[android] ScreenOrientationLocker extracted to its own .java/[android] New Screen Rotation lock setting/"
,,0.1002,frostwire,[android] Old menu replaced with Material Design menu/
,,0.2406,frostwire,"[android] GridView for My Files Images and Audio (Issue UIUtils.openFile(..., boolean useFileProvider) To solve issue of FrostWire not knowing how to handle its own .apk update. Works on Android 7.0, need to test on Android 4.0, 5.0 and 6.0/more clear/explicit authority name in handling of file provider/[android] Fixes file opening issues for default storage (#414) * [android] Fixes file opening issues for default storage It seems that after SDK 24 we cannot pass a file:// URI to another app via Intent data since all the permissions to interact with such file are a responsability of our app android now decided we need to have a content provider for the files we send to other intents This is working so far for our default save location, but its problematic when the user changes the default save location to say an external storage device since the FileProvider documentation says that we must provide the directories before-hand when we declare the provider in the manifest. it is my hope that well find a way to manipulate such paths programatically somehow. Perhaps youve read about this already * [android] this works on the AVD sd card When you dream about the solution/[android] feature/dont start bittorrent without vpn (#343) new UIUtils.showDismissableMessage/"
,,0.0823,frostwire,[android] refactor for better design of setMenuIconsVisible/
,,0.1658,frostwire,"[android] UIUtils.openFile(..., boolean useFileProvider) To solve issue of FrostWire not knowing how to handle its own .apk update. Works on Android 7.0, need to test on Android 4.0, 5.0 and 6.0/"
,,0.3042,frostwire,"[android] post review cleanup ImageLoader revert/removal of callback passing method. AbstractListAdapter.CheckboxOnCheckedChangeListener onPostCheckedChange left over code removal. CheckableImageView does not load images in constructor, adds new loadImages() method to load images on demand by class user. CheckableImageView constructor signature refactor (Supports width, height, image uris as a array, reordering of parameters). New lines./[android] play icon on top of video elements/[android] GridView for My Files Images and Audio (Issue UIUtils.openFile(..., boolean useFileProvider) To solve issue of FrostWire not knowing how to handle its own .apk update. Works on Android 7.0, need to test on Android 4.0, 5.0 and 6.0/[android] Long clicking on Files in My Files toggles selection mode/"
,,0.1262,frostwire,"[android] NavigationMenu extracted out of MainActivity. MainController now works with weak reference to MainActivity and enhances its functionality. Cleanup and refactoring of MainActivity, zero warnings./[android] Old menu replaced with Material Design menu/"
,,0.1318,frostwire,"[android] had to go back to OrientationEventListener. The WindowManagers DefaultDisplay keeps caching values and always returns the same rotation, width and height thus resulting in funky behavior. Didnt find a way to request this object to refresh and return the actual orientation. Only the sensor monitor retrieves the true value/[android] ScreenOrientationLocker extracted to its own .java/[android] renamed AbstractActivity2 to AbstractActivity/[android] abstracted feature of custom view in main toolbar/"
,,0.0692,frostwire,"[android] passing 0 as flags to bindService, BIND_AUTO_CREATE was preventing a clean shutdown/"
,,0.077,frostwire,[desktop] should fix Select-All key shortcut bug on OSX (Issue
,,0.078,frostwire,"[desktop] misc cleanup, simplifications/"
,,0.0681,frostwire,[common/desktop/android] removed extratorrent/
,,0.0673,frostwire,[common][all] migration to ok
,,0.1121,frostwire,[android] new: MusicUtils.getAlbumIdForSong(long songId)/[android] catch and log (useless) NPE in MusicUtils#playAll/
,,0.0673,frostwire,[android] ANR fetching album ID on SongAdapter/
,,0.2315,frostwire,"Apollo playlist ui update (#481) * [android] set up for updated UI in playlist tab * [android] added ënew empty playlistí functionality to the playlist tab on apollo * [android] added padding to TabLayout and increased size of Toolbar text * [android] deleted unused imports * [android] fixed double rendering bug on playlist adapter, refactor/"
,,0.3679,frostwire,"[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.087,frostwire,[android] onResume interstitial logic/
,,0.073,frostwire,[android] minor code formatting in TableFetchers/
,,0.138,frostwire,"[android] onResume interstitial logic/[android] onExit/onBackHome interstitial logic update, less ads/"
,,0.0804,frostwire,[android] added data saving condition to toggle BitTorrent in preference/
,,0.0686,frostwire,[android] new UIUtils.diceRollPassesThreshold()/
,,0.0982,frostwire,[android] avoid possible ANR installing HttpResponseCache The installation of the HttpResponseCache when a secondary storage is being mounted can be a costly operation on the main thread once SystemUtils.getCacheDir() gets called which can be slow once it hits ContextWrapper.getExternalCacheDir()/[android] implemented Engine as a real singleton and added onApplicationCreate to properly setup components/
,,0.217,frostwire,"[android] avoid possible ANR loading torrents LollipopFileSystem.getDocument()s query can take too long on the main thread/[android] fix of menu logic in TransfersFragment/[android] refactor, moved configuration methods out from TransferManager to ConfigurationManager/[android] fix resume of finished torrents while not seeding enable/[android] one more logic fix in getActiveUploads/[android] fixed logic in getActiveUploads/"
,,0.1427,frostwire,[android] ANR fix for NotificationUpdateDemon.onTime() isScreenOn() check too expensive for main thread and happening quite a lot/[android] added logic to display permanent notification only if there are active transfers/
,,0.36,frostwire,"[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.1351,frostwire,[android] ringtone/audio playback from menu issue fixed/[android] opens single image downloads with ImageViewerActivity/
,,0.4122,frostwire,"[android] MenuBuilder/FileListAdapter onclick NPE/[android] ringtone/audio playback from menu issue fixed/[android] My Files thumbnails and ImageViewer optimizations. Build 382 Build 382 File List Adapter thumbnails resolution increased from 128 pixels to 256 pixels Thumbnail loading now done using new loadBitmapAsync function (High priority, and disk cached) ImageViewer 3 image loading strategy now calls postInvalidate on Bitmap load success ImageViewers first low resolution image is now a 20th of the screens resolution ImageViewers second loaded image now uses Picassos fit() function to resize exactly to target TouchImageView ImageViewers images dont make use of the disk cache, thus not evicting thumbnails on My Files ImageViewers disk cache sizes raised from [5MB, 50MB] to closest powers of two interval [8MB, 64MB]/[android] using extra key to pass file descriptor to image viewer to avoid mixing/override with an already stored data/[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.1653,frostwire,"[android] improved filtering. less aggresive filter() calling/[android] simpler logic to show filter button. SearchResultListAdapter.filter() upgrade We were getting inconsistent counts because we were only seeing the counts for the selected media type filtered search results. Now SearchResultListAdapter.filter() feeds its FilteredSearchResults with a new list that contains results matching the current keyword pipeline, regardless of their media type/[android] file counters are updated when filters are applied. cleanup/"
,,0.1338,frostwire,"[android] better detection of VPN in EngineBroadcastReceiver, improved VPN security logic, added delayed call support to Engine#startServices/[android] fixed VPN discovery for android 7/"
,,0.1004,frostwire,[android] show right text when no search results meet filters/
,,0.1177,frostwire,[android] avoid tree query when refreshing play/pause button in mini player/
,,0.0995,frostwire,"[android] better detection of VPN in EngineBroadcastReceiver, improved VPN security logic, added delayed call support to Engine#startServices/"
,,0.1807,frostwire,"[android] implemented Engine as a real singleton and added onApplicationCreate to properly setup components/[android] moved main application thread pool out of service into Engine (starting IEngineService simplification)/[android] better detection of VPN in EngineBroadcastReceiver, improved VPN security logic, added delayed call support to Engine#startServices/"
,,0.0818,frostwire,[android] avoid ANR on IabHelper::mService.isBillingSupported check/
,,0.0686,frostwire,[desktop] FrostWire 6.5.5 build 242/
,,0.0702,frostwire,[all] update to jlibtorrent 1.2.0.11-RC5/
,,0.1204,frostwire,[android] Transfers > Seeding tab/
,,0.1514,frostwire,[common] handle/avoid possible NPE on KeywordDetector.updateHistogramTokenCount/[common] avoid ConcurrentModificationException/[common] avoid android code dependencies in common/
,,0.2917,frostwire,"[common] using magnet url for yi-fi if torrent url fails/[common] using torrent url for yi-fi, still pending fallback option/[common] fix/refactor yi-fi size/[common] performance optimization in yi-fi filename/[common] fixed yi-fi creation time/[common] fixed yi-fi thumbnail url/[common] YifySearchPerformer/SearchResult using named groups, cleanup/[common] YifySearchPerformer test code update. cleanup/"
,,0.1299,frostwire,[common] Zooqle search fixed/[common] avoid possible double creation of size regex pattern in ZooqleSearchResult/[common] Zooqle search fixes/
,,0.2197,frostwire,"[common] Zooqle search fixed/[common] fixed zooqle/[common] fixed zoogle details regex, still not working/[common] Zooqle search fixes/[common] Zooqle search fixed/"
,,0.2013,frostwire,[android] avoid context leak int StopListener#stopMusicAsync background task/[android] bug fix on song fragments clicking on a song that was already being played would not open the music player screen. other cleanups/
,,0.1257,frostwire,"[android] Apollo::MusicUtils.java, handle possible android.database.CursorIndexOutOfBoundsException/[android] crash fix at MusicUtils.getSongListForPlaylist/"
,,0.1197,frostwire,[android] save replace of preferences editor commit() call to apply()/
,,0.0936,frostwire,[android] search fragment header banner (#573)/
,,0.0977,frostwire,[android] search fragment header banner (#573)/
,,0.2316,frostwire,"[android] issue 594, shows transfer while fetching torrent (#596) Also, when transfers are removed the transfer list is now refreshed immediatly./[android] imports cleanup/"
,,0.068,frostwire,[android] using execute instead of submit to avoid unused creation of Future objects/
,,0.1484,frostwire,[android] new ImageLoader.start() instantiates image loader in background Way too many ANRs being reported on startup because of this method being called on main thread/[android] full enable DHT magnet crawl and fetch for search engines/[android] typo/
,,0.2399,frostwire,"[android] issue 594, shows transfer while fetching torrent (#596) Also, when transfers are removed the transfer list is now refreshed immediatly./[android] Transfers > Seeding tab/"
,,0.0873,frostwire,[android] remove deprecation warning on NotificationCompat.Builder Note: the build() call is causing a freeze on some Android 6 devices/[android] avoid crashes with NotificationManager (SecurityExceptions Issue
,,0.1,frostwire,[android] use FrostWire as the default torrent client/
,,0.1157,frostwire,[android] use FrostWire as the default torrent client/[android] Issue ImageViewerActivity: Swipe to the next/previous picture (#612)/
,,0.0838,frostwire,[android] NPE on FingerTask/[android] avoid context leak in Peer#finger/
,,0.2554,frostwire,"[android] avoid context leak in NetworkManager#notifyNetworkStatusListeners/[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/"
,,0.1695,frostwire,[android] bug fix on song fragments clicking on a song that was already being played would not open the music player screen. other cleanups/
,,0.2708,frostwire,"[android] refresh of libtorrent network sockets using android supported notifications/[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/"
,,0.1082,frostwire,"[android] fix that by using ThreadPool#submit, the context leak detection was circumvented/"
,,0.0772,frostwire,[android] issue fix while we move to new billing API/
,,0.0643,frostwire,[desktop] lambda cleanups/
,,0.9306,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/"
,,0.1019,frostwire,[android] minor refactor in PlayStore class/
,,0.1378,frostwire,"[android] added private Engine empty constructor for convenience, added instance limit of it to debug VM policy/[android] Avoid too much recursion checking for context leaks on Paint and LocaleList object fields/[android] creating usage pattern for check of strict policy/"
,,0.9284,frostwire,"[android] refactor, new UIUtils.takeScreenshot(View) : File To be reused on future builds to share Transfer Details screenshots/[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/[android] removal of static Context reference in Librarian to avoid memory leaks/"
,,0.1314,frostwire,[android] creating usage pattern for check of strict policy/[android] removal of static Context reference in Librarian to avoid memory leaks/
,,0.9265,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/[android] declarations have been made final/[android] asynctask refactored to be static class/"
,,0.9298,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/"
,,0.1155,frostwire,"[android] restored plain reference to application context in NetworkManager, see comment for reasons/[android] static leak and DRY refactor in NetworkManager/"
,,0.1062,frostwire,"[android] lambda refactor, import cleanup/[android] removal of static Context reference in Librarian to avoid memory leaks/"
,,0.1138,frostwire,[android] no need to pass arguments in NetworkManager#isDataUp/[android] using public java API for reopenNetworkSockets/[android] removal of static Context reference in Librarian to avoid memory leaks/
,,0.0807,frostwire,"[android] minor cleanups, npe prevention, lambda refactors/"
,,0.1155,frostwire,[android] dont fail silently. avoid context leak on thread/[android] removal of static Context reference in Librarian to avoid memory leaks/[android] lambda warning silenced in Librarian/
,,0.0772,frostwire,[desktop] fixed compilation issue/
,,0.078,frostwire,[common] refactor in feedSearchResults for right place of null check and remove of redundant variables/[android] should solve issue with non-responding keyword filter first time its flipped to negation/
,,0.0807,frostwire,[common] Zooqle search fixed/
,,0.0686,frostwire,[android] minor code cleanup/
,,0.0648,frostwire,[android] Apollo ImageFetcher NPE protections/[android] moving towards less use of nonsensical AsyncTask/
,,0.1102,frostwire,[android] code refactor in SongAdapter to avoid a new tuple class/[android] use ContextResultTask and avoid creating WeakReferences manually/[android] AsyncTask refactor on SongAdapter/
,,0.2291,frostwire,"[android] code cleanup in ConfigurationManager/[android] using concurrent Future to implement asynchronous creation of ConfigurationManager/[android] making call of apply in settings change more functional/[android] leave barely used byte array preference serialization to API client/[android] Apollo PreferencesUtil is now a ConfigurationManager wrapper/[android] ConfigurationManager NPE protections/[android] latch cant be in outer thread object was being accessed as CREATED and it wasnt really created thus creating NPEs when the preference editor was being accessed prematurely/[android] No more Runtime error on ConfigurationManager.create() ConfigurationManager.instance() may have been called while ConfigurationManager.create() was still busy.Added an AtomicReference<State> to synchronize the creation of the singleton and wait for it if necessary with a countdown latch (only once, if this situation ever occured). The IO portion of the creation of the configuration manager is forced to a background thread. We also ensure every editor.apply() background call does not occur in the main thread. Even though SharedPreferencesImpl is supposed to make the .apply() call in a background thread, theres a countdown latch that is blocking the main thread. We make sure our class is not guilty of making this happen. I have to check if Apollo uses a preference editor on the main thread./[android] ConfigurationManager cleanup Moved deprecated String constant into Constants.java/"
,,0.0765,frostwire,[android] ConfigurationDefaults missing update/
,,0.2791,frostwire,"[android] Android Oreo(8) notification issues fixed/[android] VPN suggestion updates (#681) * [android] added new strings, drawables and vpn images * [android] updated text and layout of vpn page * [android] further vpn page adjustments readded vpn_button_background_selector after previous deletion * [android] added strings, updated vpn buttons * [android] updated headers/"
,,0.1012,frostwire,"[android] EngineThreadPool disables task queue size verification when the debugger is connected. Renamed .isEnable to .isEnabled (English grammar fix)/[android] improved correctnes of context detection in Debug#hashContext, listing all fields and avoiding self references/[android] new Debug.getCallingMethodInfo() The String output of this method can be used to do poor mans tracing of where a method youre debugging is being called from. It includes the .java file name, the method 1 level down on the stack from where were invoking Debug.getCallingMethodInfo(), the line number and the thread name and id where this is happening/"
,,0.1017,frostwire,[android] TrackerRecyclerViewAdapter UIUtils.showYesNoDialog refactor/
,,0.1694,frostwire,[android] UIUtils playEphemeralPlaylistTask async refactor/[android] Avoid possible NPE taking screenshot/[android] YesNoDialog.setOnDialogClickListeners refactor/[android] ANR on ephemereal playlist fixed. Issue
,,0.1636,frostwire,"[android] TransferManager load torrents async refactor/[android] Handle BTEngine related preference changes in the background Dont hog main thread in case you need to wait for an early preference update, e.g. when initial wizard is shown to user./"
,,0.1208,frostwire,"[android] Use NotificationCompat.Builders new constructor It receives the channel ID, so no need for fragmentation verification ifs./[android] Notifications work on Android 8.0 Issue NotificationUpdateDemon async refactor/"
,,0.1611,frostwire,[android] another use of invokeAsync with one argument/[android] ensuring a torrent handle is present can occur only in the background/[android] another use of UIBittorrentDownloadRecoverer (onTime())/[android] ANR fix on TransferDetails A reported ANR on TransferDetailFilesFragment.java:175 return new TransferDetailFilesTransferItemViewHolder( lead to a fix that might avoid similar ANRs on all AbstractTransferDetail implementations/
,,0.1519,frostwire,"[android] s/invokeAsync/async/[android] EngineBroadcastReceiver properly handles broadcasts in background Had too many unncessary invokeAsync calls, refactored all handlers to run in single background threads/"
,,0.0951,frostwire,"[android] Engine service starter async refactor/[android] Handle SecurityException with message for user when starting EngineService Also start the engine service and the vibrator, expensive getSystemService call and the service initialization and binding in a background thread/"
,,0.1248,frostwire,"[android] dump thread pool information in case of queue overflow, only active in debug build/[android] narrow the isDebuggerConnected condition in verifyTask/[android] dont disable Debug when debugger connected only disable verifyTasks/"
,,0.0874,frostwire,[desktop] dont do unnecessary work unless Tab is visible/
,,0.063,frostwire,[desktop] revert fileOffset to number name refactor/
,,0.1141,frostwire,[common/desktop] Yify search fixes/
,,0.1883,frostwire,"[android ] Remember randomly played songs (#725) * [android] Cleaning up the player from the all shuffle stuff. No shuffle implementation functionality at this point"" * [android] Updated mechanism to get and set shuffle mode on and off. * [android] Introduced new logic for next and back in shuffle mode * [android] Rename method getShuffleMode to isShuffleEnabled, parameter shuffleMode to shuffleEnabled. mShuffleMode to mShuffleEnabled/"
,,0.2092,frostwire,[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./
,,0.1302,frostwire,"[android] using internal PrebidManager application context in calls to attachBids. It happens that although not documented, the context in attachBids is used in multiple places internally, and a context leak is possible if its not an application context./"
,,0.2256,frostwire,"[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/"
,,0.066,frostwire,[android] pass frostwire version/build to BTContext/
,,0.1825,frostwire,"[android] force reannounce of torrents when engine is resumed by disconnection/[android] TransferManager refactor for shutdown/revival Make loadTorrentTasks() private again Refactor transfer lists clearing into a clearTransfers() method New reset() and onShutdown() methods Make sure to unregister that preference changes listener when shutting down, have only one instance of it/"
,,0.0765,frostwire,[desktop] UX stats cleanup/
,,0.0998,frostwire,[android] Engine.startService() refactor for ContextCompat.startForegroundService/
,,0.1269,frostwire,[android] Android O crash when using headset controls fixed/[android] refactor EngineService.foregroundStartForAndroidO Engine.foregroundServiceStartForAndroidO/
,,0.10400000000000001,frostwire,[android] Engine.startService() refactor for ContextCompat.startForegroundService/[android] refactor EngineService.foregroundStartForAndroidO Engine.foregroundServiceStartForAndroidO/[android] Android O services now should be started in foreground/
,,0.0697,frostwire,"[common] Torlock, missing connection fixed/"
,,0.0807,frostwire,[desktop] code formatting/[desktop] more cleanups/
,,0.0991,frostwire,[common/desktop] avoid numeric overflow when dealing with large file sizes jlibtorrent needs a few fixes/
,,0.0599,frostwire,[desktop] more azureus cleanup/
,,0.0833,frostwire,"[desktop] declarations made final/[desktop] cleanup empty methods, encapsulation fixes/[desktop] unused symbols cleanup/imports optimized/"
,,0.0991,frostwire,[desktop] more unused symbols and classes cleanup/[desktop] AEMonitors cleanup/[desktop] declarations made final/
,,0.1254,frostwire,"[desktop] unused symbols cleanup/[desktop] lambda cleanups/[desktop] unboxing and loop style fixes/[desktop] declarations made final/[desktop] cleanup empty methods, encapsulation fixes/[desktop] azureus code cleanup/"
,,0.0883,frostwire,"[common/desktop] time calculations reverted to long, not double/"
,,0.0801,frostwire,[common] code formatting/
,,0.0764,frostwire,"[common/desktop] time calculations reverted to long, not double/"
,,0.0823,frostwire,[common] code formatting/
,,0.0863,frostwire,"[common/desktop] time calculations reverted to long, not double/"
,,0.0804,frostwire,"[common/desktop] time calculations reverted to long, not double/"
,,0.124,frostwire,"[android] play-services-ads:18.1.0, Android X migration, Pixabay cleanup/"
,,0.124,frostwire,"[android] play-services-ads:18.1.0, Android X migration, Pixabay cleanup/"
,,0.1181,frostwire,"[android] play-services-ads:18.1.0, Android X migration, Pixabay cleanup/"
,,0.12,frostwire,"[android] play-services-ads:18.1.0, Android X migration, Pixabay cleanup/"
,,0.0801,frostwire,[common] UrlUtils.buildMagnetUrl() and USUAL_TORRENT_TRACKERS_MAGNET_URL_PARAMETERS refactor/
,,0.0957,frostwire,[android] one less instance of startForegroundService Music Player shutdown/
,,0.0849,frostwire,[android/WIP] Upgrading com.android.billingclient to 2.0.3/
,,0.0686,frostwire,[android] Fixes issue
,,0.0818,frostwire,[all] more SC details/refactors/[common/all] SC search updates/
,,0.3889,frostwire,"[android] Save to playlist fixed, build 624/[android] IApolloService...??so long No need for inter process communication, stupid over complexity that leads to more uncertainty in this callback hell of a state machine. Good ridance/[android] fixes after crash reports from 618 relaxed syncrhonization on entire MusicPlaybackService simplifications and cleanups multiplayer got lost (null)/[android] dont start MusicPlaybackService if you dont have a music player callback/[android] cleanup and crashes starting music player from my music gone Tested all the way from Android 5.0 to Android 10/[android] MusicUtils startMusicPlaybackService takes a callback Simplifies how we start the music service to actually start playing media when its ready/[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/[android] no more ContextCompat.startForegroundService, we now enqueue services as jobs no longer will we have the permanent notification/"
,,0.3155,frostwire,"[android] cleanup and crashes starting music player from my music gone Tested all the way from Android 5.0 to Android 10/[android] Fixes player notification bug where play/pause button wasnt refreshed on pause/[android] more on player notifications/[android] long running music services gotta be started with startService, otherwise they will get killed/[android/apollo] Apollos NotificationHelper was using service.startForeground, no more Added a NOTIFICATION_LOCK used whenever a notification is posted through the Constants.FROSTWIRE_NOTIFICATION_CHANNEL_ID/"
,,0.2323,frostwire,"[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/[android] no more ContextCompat.startForegroundService, we now enqueue services as jobs no longer will we have the permanent notification/"
,,0.1872,frostwire,"[android] simplifications and optimizations of mopub banner on audio player activity Thread.sleep() even done on another thread, kept slowing down the main thread for some reason, or just holding the execution on the threadpool, perhaps its a single threaded pool? hmm A deep revision on MopubBannerView, ongoing work but a lot better than yesterday/[android] Audio Player activity updates Improvements in thread usage and banner loading. We dont load banners unless the current song has played over 3 seconds, we do so after waiting 5 seconds/"
,,0.1745,frostwire,"[android] new Asyncs.async(ResultTask, ContextPostTask1, context) method Now you can invoke a non-context task without arguments in the background and pass its output to a context task that receives it as a parameter with a cleaner syntax, example: Asyncs.async(MusicUtils::isShuffleEnabled, ShuffleButton::isShuffleEnabledPost, this); Also, when the post task is done on the main thread, we free the weak reference with Ref.free/[android] com.frostwire.android.util.Asyncs upgrades New Throttle class keeps track of when was the last time a task was submitted in order to not submit if its being invoked for submission too fast, it helps ensure those time periods are on check Throttle.PROFILING_ENABLED keeps track of how many hits the same task has been invoked To keep track of tasks the Throttle has a Map<String,Long>, every 30 seconds we recycle elements of that map which havent been invoked in 10 secs. Each map recyle happens every 30 secs/[android] New Asyncs.Throttle to check if the same tasks are being sent too fast/"
,,0.2744,frostwire,"[android] array out of bounds issue adding uiTransfer to TransferManager, mopub banner on basic home/[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/[android] display test reward ad, hides ads, shows ads when time expires/"
,,0.217,frostwire,"[android] Fixes issue where an existing partial torrent transfer could not add more items from a .torrent in My files its not working 100% of the way, trying to figure out why the uiBittorrentDownload in the Transfer Detail fragment isnt updated all the times, it works most of the times. Gets wonky if the transfer is paused sometimes, but if you try again it will add all of the specified files. Gotta come back to this/[android] dont consider errored transfers for status notification count/"
,,0.1121,frostwire,[android] Torrent search results now show how old they are/[android] sr.getStreamUrl() moved to background thread on SearchResultListAdapter::PreviewClickListener/
,,0.1101,frostwire,[android] Fixes Broken Transfers Notification/
,,0.1121,frostwire,[android] addition of reward video payment option to BuyActivity/
,,0.21100000000000002,frostwire,"[android] protect UI thread from unexpected crashes when posting to main looper if ran on development environment the crash still happens, should lower to some extent a lot of vague crashes posting messages from unknown locations to the main thread/[android] illegal state starting music playback service on 9,10 fix attempt/[android] long running music services gotta be started with startService, otherwise they will get killed/[android] no more ContextCompat.startForegroundService, we now enqueue services as jobs no longer will we have the permanent notification/"
,,0.2152,frostwire,"[android/common] Fixed synchronization issues with Keyword detector Tried: Minimize synchronized block spans Dont synchronize the collection object, use an Object as the monitor instead The issue was that on one end the submission time was measured with SystemClock.elapsedRealtime, and on the other end with System.currentTimeMillis I might just remove all mentions of SystemClock.ellapsedRealtime from the code base to avoid these issues in the future Some cleanups/[android] move transfer related background tasks to new HandlerThread on AsyncDownloadStarter/[android] EngineThreadPool logging and adjustments in debug queue size/[android] EngineThreadPool tunning Raise maximum pool size to 8 threads, better CPUs on average are now available, also well be getting rid of other threadpools and use this one wherever possible The pool will keep at least 1 thread Keep alive time is now 2 seconds Made the number of maximum queued tasks while running in development mode a static constant so we can play with it more easily at the top of the class/"
,,0.1119,frostwire,[android] rare NPE on AudioPlayerActivity initPlaybackControls is called from onResume and onCreate. The reported NPE is coming from the AudioPlayerActivity.onCreate stack. Views that are assigned to mutable properties in the class are yielding null values. Reported only by 13 users./
,,0.1103,frostwire,"[android] Sequential Downloading is a setting (off by default) Its now a simple global setting that applies to all torrents, its off by default, there for people that want to feel adventurous and might want to get penalized by trackers as this is not a healthy behavior/"
,,0.2712,frostwire,"[android] No more weird flickering in RecyclerViews in Transfer details 1. Instead of clearing the adapter items and adding all the new elements, we replace the items one by one and use the adapter.notifyItemChanged methods. If elements are added or removed (like in the case of Peers), we make sure the adapters item list will grow or shrink as necessary. Then we proceded to implement this logic in AbstractTransferDetailFragment as a static method and used this method in the adapters for files and peers. On both cases we pre-sorted both lists by a certain criteria, download progress for files, total download + total upload speeds in the case of peers, both in decreasing order so you can see what files are being downloaded first and what peers are helping the most./"
,,0.0789,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/"
,,0.0738,javacpp,* Add `HalfIndexer` to access `short` arrays as half-precision floating point numbers/
,,0.1008,jna,"Pulled varargs test out of the loop to avoid checking on each parameter The Method#isVarargs method is now referenced statically to avoid costs of looking it up on each native method call with at least one parameter. This also can save a lot of memory, since on every Class#getMethod() call a new Method object is returned. Added null check uses the double-checked locking to speed up subsequent calls to the same function. Made Function$Handler$FunctionInfo immutable class to make double check locking work correctly. Added description of changes to CHANGES.md/"
,,0.0903,jna,android tweaks/tweak resource path for android/
,,0.0704,jna,"Pass the Method of the Library subclass that invoked the Function, to the FromNativeConverter. Also optimized the code in Library.Handler so only one Map lookup per function invoke is needed. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0643,jna,Rebased from gcc/
,,0.0852,jna,Addressed code review items from pull request/Added Advapi32Util accessCheck method to verify file permissions/
,,0.0673,jna,Addressed code review items from pull request/
,,0.0556,jna,"Mapped GetPrivateProfileString, GetPrivateProfileInt and WritePrivateProfileString of Kernel32.dll/"
,,0.1543,jna,"Update W32Service#stopService to be more resilent to delayed status updates If the service asked to be stopped does not immediatly update its state in response to a stop command, the stopService method raised an exception. This change follows a sample on MSDN: It only uses the status query to determine the final state and not to see if the services reacted to the stop request. Closes:"
,,0.0556,jna,some changes to find issue with JNA 4/
,,0.0823,jna,fix some broken links/
,,0.0577,jna,some changes to find issue with JNA 4/
,,0.0618,jna,set to softfloat if both bit are clear/
,,0.0673,OpenDDS,Fri May 9 21:37:04 UTC 2008 Brian Johnson
,,0.1355,OpenDDS,Working New Wizard before factoring actions out for use in Editor proper./Created modelfile and target directory selection wizard page and implemented model file selection behaviors. This includes extracting valid model information as the file is selected. Started implementing the Browse feature for model file selection./Finished initial model creation and adding model extraction to New Wizard. Cleaned up separation of model extraction and conversion./Updated default values in meta-model. Switched from using Java default initial values to model initial vaules. Added serialization options to force defaults to editor save operation./
,,0.0942,OpenDDS,"Preliminary changes to the monitor tool to support generation of Graphviz images. Also includes partial support for Qt-based graphs. The Viewer app now includes TreeView, NodeView and GraphvizView panels as well as Graphviz options and Node options windows./"
,,0.091,OpenDDS,"Preliminary changes to the monitor tool to support generation of Graphviz images. Also includes partial support for Qt-based graphs. The Viewer app now includes TreeView, NodeView and GraphvizView panels as well as Graphviz options and Node options windows./"
,,0.0958,OpenDDS,"Preliminary changes to the monitor tool to support generation of Graphviz images. Also includes partial support for Qt-based graphs. The Viewer app now includes TreeView, NodeView and GraphvizView panels as well as Graphviz options and Node options windows./"
,,0.0673,OpenDDS,Fix some logging. Fix sizing for formateNameForDump method/
,,0.0609,OpenDDS,Fix remaining warnings on MacOSX/clang./
,,0.0673,OpenDDS,"Create and use reset_alignmenrt method on serializer/Bug fixes, RtiSerialization test/Seriailize/deserialize according to observed RTI serialization logic for RTPS when configured to do so./"
,,0.0685,OpenDDS,"Bug fixes, RtiSerialization test/Seriailize/deserialize according to observed RTI serialization logic for RTPS when configured to do so./"
,,0.0648,OpenDDS,Code simplifications * dds/DCPS/WaitSet.cpp: * dds/InfoRepo/DCPS_IR_Subscription.cpp:/
,,0.0597,OpenDDS,assign to retcode in one line./Check return value./
,,0.0599,OpenDDS,More plain pointer to unique_ptr refactor/
,,0.0621,OpenDDS,More plain pointer to unique_ptr refactor/
,,0.0702,OpenDDS,Interop for a few PIDs that we need to handle specially/
,,0.1619,OpenDDS,"A bit of cleanup for subject name, fixing how AccessControl gets remote identity subject name (cant rely on auth plugin get_identity_token, which is OK and in line with spec)/added subject name check to validate_remote_permissions/initial (ultra permissive) semantic subject name checking support/Testing signature verification/completed check_remote_topic and refactored get_participant_sec_attributes/Implemented check_create_datareader/Implemented check_create_datawriter/Corrected permissions loading errors. Completed get_topic_security_attributes and check_create_topic/Completed get_topic_sec_attributes/check_remote_participant without plugin class name rule/Fixed permissions xml file parsing errors/Corrected smime file clean method/Successful test of validate_remote_permissions/Start of validate_remote_permissions/Start of validate_remote_permissions/Added topic rules to permissions cache/Implemented PluginParticipantSecurityAttributesMask, fixed PermissionsCredentialsToken content and test./Transitioned to signed governance and permissions files./Implemented get_permission_credential_token/get_permissions_token and framework for signed files/Combined gov and perms/Added support for QoS property reads for validate_local_permissions/Access controls validate_local_permissions, check_create_participant, get_participant_sec_attributes/"
,,0.1213,OpenDDS,"Task 3631: Completed code for scheduling timer and then to call on_revoke_permissions() in the handle_timeout() function./Task 3630: Updated tests to assign a partition value, the value is """"./Task 3629: Removed elements of the code related to permissions partitions (3630)./Task 3627: Added the processing of the default value in the permissions XML file./"
,,0.0628,OpenDDS,Temporary commit for merge resolution/
,,0.1437,OpenDDS,"Fixed compile error/Added code to start a permissions timer when the remote permissions are verified./Added constructor for new mutex handle to AccessControlBuiltInImpl constructor./Modified to remove dupliate permission search code, created a private class method to do the searching. Address mutex concerns when accessing local_ac_parms_./Interim check in to allow a pull from git. Working on removing duplicate permission search code./Added multiple-participant support to Access local-credential-data/Completed modifications to LocalCredentialData to have the load method perform a more thorough validation process. Other code review modifications./Moved core pieces into Permissions abstraction to pave the way for later refinements./Added Governance/Permissions abstractions; partially completed integration with access-control (pending merge)/Corrected failing test. Added methods to SignedDocument./Applied review comments for AccessControlBuiltinImpl./Task 3642: Corrected Linux compiler error./Task 3642: Modified check_remote_participant to compare class ID. Also modified test functions to setup both local and remote participants./Source code check in for Task 3640, adding functionality to remote permissions methods./Commit of partial coding of 3640. Needs to be done to allow a pull operation./Temporary commit for merge resolution/Task 3631: Completed code for scheduling timer and then to call on_revoke_permissions() in the handle_timeout() function./To merge with changes on github./Task 3629: Modified to remove the OS when adjusting the year value. Consolidated the conversion code into a helper function to eliminate duplicated code./Task 3629: Added validation of the not_before and not_after dates in the permissions./Task 3627: Corrected if statements to use the result of strcmp./Task 3627: Added the processing of the default value in the permissions XML file./Adding support for builtin topics to access control get_dataXer_sec_attr functions, cleanup of security attributes run_test.pl/"
,,0.0577,OpenDDS,Data*Impls: Misc Fixes/
,,0.0681,OpenDDS,Move network config modifier logic into separate class./
,,0.158,OpenDDS,"ICE fails to converge promptly Foundations used by connectivity checks that fail were being removed from the set of active foundations. However, this was not being propagated to other checklists that were frozen on that foundation. This change unfreezes checklists after a foundation is removed from the set of active foundations. This change revealed a deadlock which was resolved by queuing STUN sends in SPDP./"
,,0.1681,OpenDDS,"ICE fails to converge promptly Foundations used by connectivity checks that fail were being removed from the set of active foundations. However, this was not being propagated to other checklists that were frozen on that foundation. This change unfreezes checklists after a foundation is removed from the set of active foundations. This change revealed a deadlock which was resolved by queuing STUN sends in SPDP./"
,,0.0792,pljava,*** empty log message ***/Change of license text/
,,0.0854,pljava,Changes needed between PostgreSQL 8.0.0beta2 and beta3./
,,0.0787,pljava,Added install_jar and replace_jar using images as a complement to URLs/Restrict replace_jar and remove_jar to jar owner or superuser/Cached schema loaders now cleared when jars are loaded or removed and after set_classpath./
,,0.0781,pljava,Dropped support for versions prior to 8.0. Fixed bug causing stack check failur when backend was called from thread other than main Fixed stability issue related to GC and MemoryContexts/Changes needed in order to build with 8.1beta2/
,,0.1074,pljava,"Last method to update: createJavaString(text*). Caution: untested ... nothing in the current code base seems to call this./Fix latent bug in unused method. Looks as if String_createJavaString would return null for a zero-length text argument ... if anything ever calls it, which may not be the case AFAICT./Make String.c use Javas charset en/decoders. In this commit, all the conversions in String.c except String_createJavaString(text*) which can have a bug fixed first./"
,,0.0609,pljava,"More regexps for common lexicals, a la jdk7./"
,,0.073,realm-java,Adjusted docs and examples to the refactoring (issue and issue
,,0.073,realm-java,Adjusted docs and examples to the refactoring (issue and issue
,,0.0983,realm-java,Added RealmCollection APIs/Use accessors for Person in the intro example. Keep public fields in Cat and Dog./Deprecate Realm.getInstance(Context) * Deprecate Realm.getInstance(Context). * Replease `Realm.getInstance(Context)` in examples./Use public fields in the intro example and lombok in the json example/
,,0.1398,realm-java,Fix warnings in AdapterExample (#2580) * Fix warnings * Add missing newline * Add missing newline * Update AndroidManifest.xml/Added RealmCollection APIs/Deprecate Realm.getInstance(Context) * Deprecate Realm.getInstance(Context). * Replease `Realm.getInstance(Context)` in examples./
,,0.1398,realm-java,Fix warnings in AdapterExample (#2580) * Fix warnings * Add missing newline * Add missing newline * Update AndroidManifest.xml/Added RealmCollection APIs/Deprecate Realm.getInstance(Context) * Deprecate Realm.getInstance(Context). * Replease `Realm.getInstance(Context)` in examples./
,,0.1101,realm-java,Added RealmCollection APIs/Deprecate Realm.getInstance(Context) * Deprecate Realm.getInstance(Context). * Replease `Realm.getInstance(Context)` in examples./
,,0.063,realm-java,migrateRealm throws when db doesnt exsit Close ./
,,0.0764,realm-java,"Fix addChangeListener_listenerShouldBeCalledIfObjectChangesAfterAsyncReturn Since the HandlerController is removed, the orginal test doesnt make sense anymore. Rewrite it to a more generic test./Remove handler related code The event handler logic stays in OS only, see util/android/event_loop_signal.hpp All the async related logic should be platform independent in java./"
,,0.081,realm-java,"Where on async results will load the query/Remove tests related with async handler impl 1. Remove some tests highly tighted with the old async implementation. 2. Fix some tests according to current OS async implementation./Deliver the callbacks for async transaction/Enable async transaction test/Remove handler related code The event handler logic stays in OS only, see util/android/event_loop_signal.hpp All the async related logic should be platform independent in java./"
,,0.0664,realm-java,PendingRow can return a CheckedRow for DynamicRealmObject. Also some code cleanup./
,,0.0897,realm-java,"Fix lots of minor issues/Disallow listeners for Results & Object on non-looper/Remove handler related code The event handler logic stays in OS only, see util/android/event_loop_signal.hpp All the async related logic should be platform independent in java./"
,,0.0903,realm-java,Fix error message to show correct character limit and minor grammar fix/
,,0.0704,realm-java,Add support for changing a users password. (#4538)/Revert progress listeners (#4414)/
,,0.1446,realm-java,Use `clang-format` to format C++ code (#4307) * Formatting C++ source code using clang-format using cores rules. * How to format C++ code * Curly braces around single lines/
,,0.1427,realm-java,Use `clang-format` to format C++ code (#4307) * Formatting C++ source code using clang-format using cores rules. * How to format C++ code * Curly braces around single lines/
,,0.1408,realm-java,Use `clang-format` to format C++ code (#4307) * Formatting C++ source code using clang-format using cores rules. * How to format C++ code * Curly braces around single lines/
,,0.1408,realm-java,Use `clang-format` to format C++ code (#4307) * Formatting C++ source code using clang-format using cores rules. * How to format C++ code * Curly braces around single lines/
,,0.1408,realm-java,Use `clang-format` to format C++ code (#4307) * Formatting C++ source code using clang-format using cores rules. * How to format C++ code * Curly braces around single lines/
,,0.1408,realm-java,Use `clang-format` to format C++ code (#4307) * Formatting C++ source code using clang-format using cores rules. * How to format C++ code * Curly braces around single lines/
,,0.1382,realm-java,Clean up SharedRealm source Remove unused methods. Fix double negatives. Use auto& to avoid creating temp objects./Add JNI helper class JavaGlabalRef and JavaClass (#4365) Added two class to help manage the jobject lifecycle. Use a static local JavaClass for SyncManager./Correctly report Client Reset (#4313)/Use `clang-format` to format C++ code (#4307) * Formatting C++ source code using clang-format using cores rules. * How to format C++ code * Curly braces around single lines/Using ObjectStore SyncManager & Session (#4214) Using ObjectStores SyncManager & Session/
,,0.1408,realm-java,Use `clang-format` to format C++ code (#4307) * Formatting C++ source code using clang-format using cores rules. * How to format C++ code * Curly braces around single lines/
,,0.1408,realm-java,Use `clang-format` to format C++ code (#4307) * Formatting C++ source code using clang-format using cores rules. * How to format C++ code * Curly braces around single lines/
,,0.1548,realm-java,Ignore callbacks from Object Store if waiting was canceled. (#4989)/Permission APIs (#4558) Add PermissionManager as a convenience API on top of the __permission and __management realms. This PR adds support for Listing permissions Changing permissions Creating offers Accepting offers Revoking offers/Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/
,,0.154,realm-java,Upgrade to Sync-RC21 and ROS 2.0.0-alpha.34 (#5277)/Permission APIs (#4558) Add PermissionManager as a convenience API on top of the __permission and __management realms. This PR adds support for Listing permissions Changing permissions Creating offers Accepting offers Revoking offers/
,,0.1362,realm-java,Support offline client reset (#5297) * Exposing a `SyncConfiguration` that allows a user to open the backup Realm after the client reset (#4759)./Client reset fixes (#5159) * Exposing a `SyncConfiguration` that allows a user to open the backup Realm after the client reset (#4759)./Permission APIs (#4558) Add PermissionManager as a convenience API on top of the __permission and __management realms. This PR adds support for Listing permissions Changing permissions Creating offers Accepting offers Revoking offers/
,,0.0669,realm-java,Add support for Object Level Permissions (#5729)/
,,0.0657,rocksdb,use mmap on 64-bit machines to speed-up reads; small build fixes/
,,0.2793,rocksdb,"[rocksdb] Memtable Log Referencing and Prepared Batch Recovery Summary: This diff is built on top of WriteBatch modification: and adds the required functionality to rocksdb core necessary for rocksdb to support 2PC. modfication of DBImpl::WriteImpl() added two arguments *uint64_t log_used nullptr, uint64_t log_ref 0; *log_used is an output argument which will return the log number which the incoming batch was inserted into, 0 if no WAL insert took place. log_ref is a supplied log_number which all memtables inserted into will reference after the batch insert takes place. This number will reside in FindMinPrepLogReferencedByMemTable() until all Memtables insertinto have flushed. Recovery/writepath is now aware of prepared batches and commit and rollback markers. Test Plan: There is currently no test on this diff. All testing of this functionality takes place in the Transaction layer/diff but I will add some testing. Reviewers: IslamAbdelRahman, sdong Subscribers: leveldb, santoshb, andrewkr, vasilep, dhruba, hermanlee4 Differential Revision: memory allocation counters Summary: Introduced option to dump malloc statistics using new option flag. Added new command line option to db_bench tool to enable this funtionality. Also extended build to support environments with/without jemalloc. Test Plan: 1) Build rocksdb using `make` command. Launch the following command `./db_bench end verified that jemalloc dump is present in LOG file. 2) Build rocksdb using `DISABLE_JEMALLOC=1 make db_bench and ran the same db_bench tool and found the following message in LOG file: ""Please compile with jemalloc to enable malloc dump"". 3) Also built rocksdb using `make` command on MacOS to verify behavior in non-FB environment. Also to debug build configuration change temporary changed AM_DEFAULT_VERBOSITY 1 in Makefile to see compiler and build tools output. For case 1) was present in compiler command line. For both 2) and 3) this flag was not present. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: pin_l0_filter_and_index_blocks_in_cache feature and related fixes. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. Test Plan: export TEST_TMPDIR=/dev/shm/ && DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check is OK. I didnt run the Java tests, I dont have Java set up on my devserver. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision: parsing of missing DB options Summary: There are a few options in struct DBOptions that arent handled by options_helper.cc. Add those missing options so they can be used by GetDBOptionsFromString() and friends. Test Plan: Updated options_test.cc, reran all tests. Reviewers: sdong, yhchiang Reviewed By: yhchiang Subscribers: dhruba, leveldb Differential Revision:"
,,0.3446,rocksdb,"Adding pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision:"
,,0.3956,rocksdb,"Adding pin_l0_filter_and_index_blocks_in_cache feature and related fixes. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. Test Plan: export TEST_TMPDIR=/dev/shm/ && DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check is OK. I didnt run the Java tests, I dont have Java set up on my devserver. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: settable tests to use a different special charactor Summary: Something changed and the special charactor seems to be conflict with an exisitng value. Change it to unblock the build. Test Plan: Run the test and make sure it passes Reviewers: kradhakrishnan Reviewed By: kradhakrishnan Subscribers: leveldb, andrewkr, dhruba Differential Revision: ""Adding pin_l0_filter_and_index_blocks_in_cache feature."" This reverts commit 522de4f59e6314698286cf29d8a325a284d81778. It has bug of index block cleaning up./Adding pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision: parsing of missing DB options Summary: There are a few options in struct DBOptions that arent handled by options_helper.cc. Add those missing options so they can be used by GetDBOptionsFromString() and friends. Test Plan: Updated options_test.cc, reran all tests. Reviewers: sdong, yhchiang Reviewed By: yhchiang Subscribers: dhruba, leveldb Differential Revision:"
,,0.237,rocksdb,"Shared dictionary compression using reference block Summary: This adds a new metablock containing a shared dictionary that is used to compress all data blocks in the SST file. The size of the shared dictionary is configurable in CompressionOptions and defaults to 0. Its currently only used for zlib/lz4/lz4hc, but the block will be stored in the SST regardless of the compression type if the user chooses a nonzero dictionary size. During compaction, computes the dictionary by randomly sampling the first output file in each subcompaction. It pre-computes the intervals to sample by assuming the output file will have the maximum allowable length. In case the file is smaller, some of the pre-computed sampling intervals can be beyond end-of-file, in which case we skip over those samples and the dictionary will be a bit smaller. After the dictionary is generated using the first file in a subcompaction, it is loaded into the compression library before writing each block in each subsequent file of that subcompaction. On the read path, gets the dictionary from the metablock, if it exists. Then, loads that dictionary into the compression library before reading each block. Test Plan: new unit test Reviewers: yhchiang, IslamAbdelRahman, cyan, sdong Reviewed By: sdong Subscribers: andrewkr, yoshinorim, kradhakrishnan, dhruba, leveldb Differential Revision: pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision:"
,,0.3351,rocksdb,"Adding pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision:"
,,0.3434,rocksdb,"Adding pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision:"
,,0.3949,rocksdb,"Adding pin_l0_filter_and_index_blocks_in_cache feature and related fixes. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. Test Plan: export TEST_TMPDIR=/dev/shm/ && DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check is OK. I didnt run the Java tests, I dont have Java set up on my devserver. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: ""Adding pin_l0_filter_and_index_blocks_in_cache feature."" This reverts commit 522de4f59e6314698286cf29d8a325a284d81778. It has bug of index block cleaning up./Adding pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision: Reader should not be reused after DB restart Summary: In block based table reader, wow we put index reader to block cache, which can be retrieved after DB restart. However, index reader may reference internal comparator, which can be destroyed after DB restarts, causing problems. Fix it by making cache key identical per table reader. Test Plan: Add a new test which failed with out the commit but now pass. Reviewers: IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: maro, yhchiang, kradhakrishnan, leveldb, andrewkr, dhruba Differential Revision:"
,,0.4306,rocksdb,"Adding pin_l0_filter_and_index_blocks_in_cache feature and related fixes. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. Test Plan: export TEST_TMPDIR=/dev/shm/ && DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check is OK. I didnt run the Java tests, I dont have Java set up on my devserver. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision:"
,,0.3229,rocksdb,"Shared dictionary compression using reference block Summary: This adds a new metablock containing a shared dictionary that is used to compress all data blocks in the SST file. The size of the shared dictionary is configurable in CompressionOptions and defaults to 0. Its currently only used for zlib/lz4/lz4hc, but the block will be stored in the SST regardless of the compression type if the user chooses a nonzero dictionary size. During compaction, computes the dictionary by randomly sampling the first output file in each subcompaction. It pre-computes the intervals to sample by assuming the output file will have the maximum allowable length. In case the file is smaller, some of the pre-computed sampling intervals can be beyond end-of-file, in which case we skip over those samples and the dictionary will be a bit smaller. After the dictionary is generated using the first file in a subcompaction, it is loaded into the compression library before writing each block in each subsequent file of that subcompaction. On the read path, gets the dictionary from the metablock, if it exists. Then, loads that dictionary into the compression library before reading each block. Test Plan: new unit test Reviewers: yhchiang, IslamAbdelRahman, cyan, sdong Reviewed By: sdong Subscribers: andrewkr, yoshinorim, kradhakrishnan, dhruba, leveldb Differential Revision: pin_l0_filter_and_index_blocks_in_cache feature and related fixes. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. Test Plan: export TEST_TMPDIR=/dev/shm/ && DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check is OK. I didnt run the Java tests, I dont have Java set up on my devserver. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: ""Adding pin_l0_filter_and_index_blocks_in_cache feature."" This reverts commit 522de4f59e6314698286cf29d8a325a284d81778. It has bug of index block cleaning up./Adding pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision:"
,,0.1956,rocksdb,"Shared dictionary compression using reference block Summary: This adds a new metablock containing a shared dictionary that is used to compress all data blocks in the SST file. The size of the shared dictionary is configurable in CompressionOptions and defaults to 0. Its currently only used for zlib/lz4/lz4hc, but the block will be stored in the SST regardless of the compression type if the user chooses a nonzero dictionary size. During compaction, computes the dictionary by randomly sampling the first output file in each subcompaction. It pre-computes the intervals to sample by assuming the output file will have the maximum allowable length. In case the file is smaller, some of the pre-computed sampling intervals can be beyond end-of-file, in which case we skip over those samples and the dictionary will be a bit smaller. After the dictionary is generated using the first file in a subcompaction, it is loaded into the compression library before writing each block in each subsequent file of that subcompaction. On the read path, gets the dictionary from the metablock, if it exists. Then, loads that dictionary into the compression library before reading each block. Test Plan: new unit test Reviewers: yhchiang, IslamAbdelRahman, cyan, sdong Reviewed By: sdong Subscribers: andrewkr, yoshinorim, kradhakrishnan, dhruba, leveldb Differential Revision: column family name in SST file Summary: Added the column family name to the properties block. This property is omitted only if the property is unavailable, such as when RepairDB() writes SST files. In a next diff, I will change RepairDB to use this new property for deciding to which column family an existing SST file belongs. If this property is missing, it will add it to the ""unknown"" column family (same as its existing behavior). Test Plan: New unit test: $ ./db_table_properties_test Reviewers: IslamAbdelRahman, yhchiang, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision: ""Adding pin_l0_filter_and_index_blocks_in_cache feature."" This reverts commit 522de4f59e6314698286cf29d8a325a284d81778. It has bug of index block cleaning up./Adding pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision: warnings and ensure correct int behavior on 32-bit platforms./"
,,0.3434,rocksdb,"Adding pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision:"
,,0.4432,rocksdb,"Adding pin_l0_filter_and_index_blocks_in_cache feature and related fixes. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. Test Plan: export TEST_TMPDIR=/dev/shm/ && DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check is OK. I didnt run the Java tests, I dont have Java set up on my devserver. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: ""Adding pin_l0_filter_and_index_blocks_in_cache feature."" This reverts commit 522de4f59e6314698286cf29d8a325a284d81778. It has bug of index block cleaning up./Adding pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision:"
,,0.35200000000000004,rocksdb,"Enable configurable readahead for iterators Summary: Add an option `iterator_readahead_size` to `ReadOptions` to enable configurable readahead for iterators similar to the corresponding option for compaction. Test Plan: ``` make commit_prereq ``` Reviewers: kumar.rangarajan, ott, igor, sdong Reviewed By: sdong Subscribers: yiwu, andrewkr, dhruba Differential Revision: pin_l0_filter_and_index_blocks_in_cache feature and related fixes. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. Test Plan: export TEST_TMPDIR=/dev/shm/ && DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check is OK. I didnt run the Java tests, I dont have Java set up on my devserver. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: ""Adding pin_l0_filter_and_index_blocks_in_cache feature."" This reverts commit 522de4f59e6314698286cf29d8a325a284d81778. It has bug of index block cleaning up./Adding pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision: to have an option to fail Cache::Insert() when full Summary: Cache to have an option to fail Cache::Insert() when full. Update call sites to check status and handle error. I totally have no idea whats correct behavior of all the call sites when they encounter error. Please let me know if you see something wrong or more unit test is needed. Test Plan: make check see tests pass. Reviewers: anthony, yhchiang, andrewkr, IslamAbdelRahman, kradhakrishnan, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.3174,rocksdb,"Rename options.compaction_measure_io_stats to options.report_bg_io_stats and include flush too. Summary: It is useful to print out IO stats in flush jobs too. Extend options.compaction_measure_io_stats to flush jobs and raname it. Test Plan: Try db_bench and see the stats are printed out. Reviewers: yhchiang Reviewed By: yhchiang Subscribers: kradhakrishnan, yiwu, IslamAbdelRahman, leveldb, andrewkr, dhruba Differential Revision: a bug in RocksDB Statistics where flush is considered as compaction Summary: Fixed a bug in RocksDB Statistics where flush is considered as compaction Test Plan: unit test Reviewers: sdong, IslamAbdelRahman, rven, kradhakrishnan, andrewkr Reviewed By: andrewkr Subscribers: andrewkr, dhruba, leveldb Differential Revision: column family name in SST file Summary: Added the column family name to the properties block. This property is omitted only if the property is unavailable, such as when RepairDB() writes SST files. In a next diff, I will change RepairDB to use this new property for deciding to which column family an existing SST file belongs. If this property is missing, it will add it to the ""unknown"" column family (same as its existing behavior). Test Plan: New unit test: $ ./db_table_properties_test Reviewers: IslamAbdelRahman, yhchiang, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision: pin_l0_filter_and_index_blocks_in_cache feature and related fixes. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. Test Plan: export TEST_TMPDIR=/dev/shm/ && DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check is OK. I didnt run the Java tests, I dont have Java set up on my devserver. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: ""Adding pin_l0_filter_and_index_blocks_in_cache feature."" This reverts commit 522de4f59e6314698286cf29d8a325a284d81778. It has bug of index block cleaning up./Adding pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision:"
,,0.3186,rocksdb,"Added EventListener::OnTableFileCreationStarted() callback Summary: Added EventListener::OnTableFileCreationStarted. EventListener::OnTableFileCreated will be called on failure case. User can check creation status via TableFileCreationInfo::status. Test Plan: unit test. Reviewers: dhruba, yhchiang, ott, sdong Reviewed By: sdong Subscribers: sdong, kradhakrishnan, IslamAbdelRahman, andrewkr, yhchiang, leveldb, ott, dhruba Differential Revision: dictionary compression using reference block Summary: This adds a new metablock containing a shared dictionary that is used to compress all data blocks in the SST file. The size of the shared dictionary is configurable in CompressionOptions and defaults to 0. Its currently only used for zlib/lz4/lz4hc, but the block will be stored in the SST regardless of the compression type if the user chooses a nonzero dictionary size. During compaction, computes the dictionary by randomly sampling the first output file in each subcompaction. It pre-computes the intervals to sample by assuming the output file will have the maximum allowable length. In case the file is smaller, some of the pre-computed sampling intervals can be beyond end-of-file, in which case we skip over those samples and the dictionary will be a bit smaller. After the dictionary is generated using the first file in a subcompaction, it is loaded into the compression library before writing each block in each subsequent file of that subcompaction. On the read path, gets the dictionary from the metablock, if it exists. Then, loads that dictionary into the compression library before reading each block. Test Plan: new unit test Reviewers: yhchiang, IslamAbdelRahman, cyan, sdong Reviewed By: sdong Subscribers: andrewkr, yoshinorim, kradhakrishnan, dhruba, leveldb Differential Revision: pin_l0_filter_and_index_blocks_in_cache feature and related fixes. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. Test Plan: export TEST_TMPDIR=/dev/shm/ && DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check is OK. I didnt run the Java tests, I dont have Java set up on my devserver. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: ""Adding pin_l0_filter_and_index_blocks_in_cache feature."" This reverts commit 522de4f59e6314698286cf29d8a325a284d81778. It has bug of index block cleaning up./Adding pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision:"
,,0.3271,rocksdb,"Shared dictionary compression using reference block Summary: This adds a new metablock containing a shared dictionary that is used to compress all data blocks in the SST file. The size of the shared dictionary is configurable in CompressionOptions and defaults to 0. Its currently only used for zlib/lz4/lz4hc, but the block will be stored in the SST regardless of the compression type if the user chooses a nonzero dictionary size. During compaction, computes the dictionary by randomly sampling the first output file in each subcompaction. It pre-computes the intervals to sample by assuming the output file will have the maximum allowable length. In case the file is smaller, some of the pre-computed sampling intervals can be beyond end-of-file, in which case we skip over those samples and the dictionary will be a bit smaller. After the dictionary is generated using the first file in a subcompaction, it is loaded into the compression library before writing each block in each subsequent file of that subcompaction. On the read path, gets the dictionary from the metablock, if it exists. Then, loads that dictionary into the compression library before reading each block. Test Plan: new unit test Reviewers: yhchiang, IslamAbdelRahman, cyan, sdong Reviewed By: sdong Subscribers: andrewkr, yoshinorim, kradhakrishnan, dhruba, leveldb Differential Revision: pin_l0_filter_and_index_blocks_in_cache feature and related fixes. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. Test Plan: export TEST_TMPDIR=/dev/shm/ && DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check is OK. I didnt run the Java tests, I dont have Java set up on my devserver. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision: ""Adding pin_l0_filter_and_index_blocks_in_cache feature."" This reverts commit 522de4f59e6314698286cf29d8a325a284d81778. It has bug of index block cleaning up./Adding pin_l0_filter_and_index_blocks_in_cache feature. Summary: When a block based table file is opened, if prefetch_index_and_filter is true, it will prefetch the index and filter blocks, putting them into the block cache. What this feature adds: when a L0 block based table file is opened, if pin_l0_filter_and_index_blocks_in_cache is true in the options (and prefetch_index_and_filter is true), then the filter and index blocks arent released back to the block cache at the end of BlockBasedTableReader::Open(). Instead the table reader takes ownership of them, hence pinning them, ie. the LRU cache will never push them out. Meanwhile in the table reader, further accesses will not hit the block cache, thus avoiding lock contention. When the table reader is destroyed, it releases the pinned blocks (if there were any). This has to happen before the cache is destroyed, so I had to introduce a TableReader::Close(), to guarantee the order of destruction. Test Plan: Added two unit tests for this. Existing unit tests run fine (default is pin_l0_filter_and_index_blocks_in_cache=false). DISABLE_JEMALLOC=1 OPT=-g make all valgrind_check Mac: OK. Linux: with D55287 patched in its OK. Reviewers: sdong Reviewed By: sdong Subscribers: andrewkr, leveldb, dhruba Differential Revision:"
,,0.0874,rocksdb,Add utility class Defer (#6382) Summary: Add a utility class `Defer` to defer the execution of a function until the Defer object goes out of scope. Used in VersionSet:: ProcessManifestWrites as an example. The inline comments for class `Defer` have more details. Pull Request resolved: Test Plan: `make defer_test version_set_test && ./defer_test && ./version_set_test` Differential Revision: D19797538 Pulled By: cheng-chang fbshipit-source-id: b1a9b7306e4fd4f48ec2ab55783caa561a315f0f/
