Topic_no,Keywords,Contrib,System,Text
12,"dcps_transport, transport_framework, message, cpp, transport, inl_dds, dcps, transport_simpletcp, fix, change, reader, participant, writer, update, time, add, send, task, security, topic",0.066,frostwire,"[desktop] ignore mplauer VDecoder init failed message, nothing we can do/"
,,0.0653,frostwire,"[all] after so much time, it does not make sense to have a dedicated package for the single class Logger/"
,,0.0634,frostwire,"[all] after so much time, it does not make sense to have a dedicated package for the single class Logger/"
,,0.063,frostwire,[desktop] azureus dead code cleanup/
,,0.0673,frostwire,[desktop] azureus dead code cleanup/
,,0.0621,frostwire,[desktop] enforce immutability where possible/
,,0.0643,frostwire,[desktop] enforce immutability where possible/
,,0.063,javacpp,Initial commit/
,,0.0616,jna,avoid negative interactions with system install of JNA/
,,0.0664,jna,add test for GetLastError interception/
,,0.0652,jna,removed some warnings/
,,0.0775,jna,"Make Netapi32Utils.getUserInfo(String,String) work. Netapi32Utils.getUserInfo was ignoring the parameter for the domain name, which caused it to fail when the ""domain"" name was not actually a domain controller. On fixing that, I got an error about the SID being in an invalid format. It seems like JNAs ""PSID"" is actually just the SID, so to get PSID you have to use ""PSID.ByReference"". This is bound to confuse someone else in the future so it might be worth renaming PSID to SID?/Making fields on USER_INFO_23 public so that it might actually be possible to use it/"
,,0.0652,jna,removed some warnings/
,,0.0625,jna,restored because of lost source code/some changes regarding typelib/
,,0.0911,jna,"Thread Implementation that runs a Windows Message Loop This is intended to be used in conjunction with APIs, that need a spinning message loop. One example for this are the DDE functions, that can only be used if a message loop is present./"
,,0.0769,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.0713,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.0673,OpenDDS,Mon Sep 11 07:13:48 UTC 2006 Yan Dai Sep 8 06:19:22 UTC 2006 Yan Dai Sep 7 06:59:35 UTC 2006 Yan Dai Aug 11 18:13:54 UTC 2006 Yan Dai
,,0.4315,OpenDDS,Fri Dec 8 22:31:28 UTC 2006 Ciju John The DataWriter & DataReader Listener now have an additional callback API on_connection_deleted. This gets invoked when the assiciated connection gets closed. This patch was contributed by Yan Dai. * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DdsDcpsPublication.idl: * dds/DdsDcpsSubscription.idl: Add new Listner callback on_connection_deleted. * DevGuideExamples/DDS/Messenger/DataReaderListener.h: * DevGuideExamples/DDS/Messenger/DataReaderListener.cpp: * tests/DCPS/FooTest3_0/DataWriterListener.h: * tests/DCPS/FooTest3_0/DataWriterListener.cpp: * tests/DCPS/FooTest4_0/DataReaderListener.h: * tests/DCPS/FooTest4_0/DataReaderListener.cpp: * tests/DCPS/FooTest5/DataReaderListener.h: * tests/DCPS/FooTest5/DataReaderListener.cpp: * tests/DCPS/LivelinessTest/DataReaderListener.h: * tests/DCPS/LivelinessTest/DataReaderListener.cpp: * tests/DCPS/MultiTopicTest/DataReaderListener.h: * tests/DCPS/MultiTopicTest/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataReaderListener.h: * tests/DCPS/Reconnect/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataWriterListener.h: * tests/DCPS/Reconnect/DataWriterListener.cpp: * tests/DCPS/Reconnect/publisher.cpp: * tests/DCPS/Reconnect/run_test.pl: The concrete Listeners needs to implement the new on_connection_deleted method. The reconnect test restart_pub tests the the new connection closure callback. * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: Cleaning up debugging messages./
,,0.4353,OpenDDS,Fri Dec 8 22:31:28 UTC 2006 Ciju John The DataWriter & DataReader Listener now have an additional callback API on_connection_deleted. This gets invoked when the assiciated connection gets closed. This patch was contributed by Yan Dai. * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DdsDcpsPublication.idl: * dds/DdsDcpsSubscription.idl: Add new Listner callback on_connection_deleted. * DevGuideExamples/DDS/Messenger/DataReaderListener.h: * DevGuideExamples/DDS/Messenger/DataReaderListener.cpp: * tests/DCPS/FooTest3_0/DataWriterListener.h: * tests/DCPS/FooTest3_0/DataWriterListener.cpp: * tests/DCPS/FooTest4_0/DataReaderListener.h: * tests/DCPS/FooTest4_0/DataReaderListener.cpp: * tests/DCPS/FooTest5/DataReaderListener.h: * tests/DCPS/FooTest5/DataReaderListener.cpp: * tests/DCPS/LivelinessTest/DataReaderListener.h: * tests/DCPS/LivelinessTest/DataReaderListener.cpp: * tests/DCPS/MultiTopicTest/DataReaderListener.h: * tests/DCPS/MultiTopicTest/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataReaderListener.h: * tests/DCPS/Reconnect/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataWriterListener.h: * tests/DCPS/Reconnect/DataWriterListener.cpp: * tests/DCPS/Reconnect/publisher.cpp: * tests/DCPS/Reconnect/run_test.pl: The concrete Listeners needs to implement the new on_connection_deleted method. The reconnect test restart_pub tests the the new connection closure callback. * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: Cleaning up debugging messages./
,,0.4306,OpenDDS,Fri Dec 8 22:31:28 UTC 2006 Ciju John The DataWriter & DataReader Listener now have an additional callback API on_connection_deleted. This gets invoked when the assiciated connection gets closed. This patch was contributed by Yan Dai. * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DdsDcpsPublication.idl: * dds/DdsDcpsSubscription.idl: Add new Listner callback on_connection_deleted. * DevGuideExamples/DDS/Messenger/DataReaderListener.h: * DevGuideExamples/DDS/Messenger/DataReaderListener.cpp: * tests/DCPS/FooTest3_0/DataWriterListener.h: * tests/DCPS/FooTest3_0/DataWriterListener.cpp: * tests/DCPS/FooTest4_0/DataReaderListener.h: * tests/DCPS/FooTest4_0/DataReaderListener.cpp: * tests/DCPS/FooTest5/DataReaderListener.h: * tests/DCPS/FooTest5/DataReaderListener.cpp: * tests/DCPS/LivelinessTest/DataReaderListener.h: * tests/DCPS/LivelinessTest/DataReaderListener.cpp: * tests/DCPS/MultiTopicTest/DataReaderListener.h: * tests/DCPS/MultiTopicTest/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataReaderListener.h: * tests/DCPS/Reconnect/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataWriterListener.h: * tests/DCPS/Reconnect/DataWriterListener.cpp: * tests/DCPS/Reconnect/publisher.cpp: * tests/DCPS/Reconnect/run_test.pl: The concrete Listeners needs to implement the new on_connection_deleted method. The reconnect test restart_pub tests the the new connection closure callback. * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: Cleaning up debugging messages./
,,0.4315,OpenDDS,Fri Dec 8 22:31:28 UTC 2006 Ciju John The DataWriter & DataReader Listener now have an additional callback API on_connection_deleted. This gets invoked when the assiciated connection gets closed. This patch was contributed by Yan Dai. * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DdsDcpsPublication.idl: * dds/DdsDcpsSubscription.idl: Add new Listner callback on_connection_deleted. * DevGuideExamples/DDS/Messenger/DataReaderListener.h: * DevGuideExamples/DDS/Messenger/DataReaderListener.cpp: * tests/DCPS/FooTest3_0/DataWriterListener.h: * tests/DCPS/FooTest3_0/DataWriterListener.cpp: * tests/DCPS/FooTest4_0/DataReaderListener.h: * tests/DCPS/FooTest4_0/DataReaderListener.cpp: * tests/DCPS/FooTest5/DataReaderListener.h: * tests/DCPS/FooTest5/DataReaderListener.cpp: * tests/DCPS/LivelinessTest/DataReaderListener.h: * tests/DCPS/LivelinessTest/DataReaderListener.cpp: * tests/DCPS/MultiTopicTest/DataReaderListener.h: * tests/DCPS/MultiTopicTest/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataReaderListener.h: * tests/DCPS/Reconnect/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataWriterListener.h: * tests/DCPS/Reconnect/DataWriterListener.cpp: * tests/DCPS/Reconnect/publisher.cpp: * tests/DCPS/Reconnect/run_test.pl: The concrete Listeners needs to implement the new on_connection_deleted method. The reconnect test restart_pub tests the the new connection closure callback. * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: Cleaning up debugging messages./
,,0.4315,OpenDDS,Fri Dec 8 22:31:28 UTC 2006 Ciju John The DataWriter & DataReader Listener now have an additional callback API on_connection_deleted. This gets invoked when the assiciated connection gets closed. This patch was contributed by Yan Dai. * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DdsDcpsPublication.idl: * dds/DdsDcpsSubscription.idl: Add new Listner callback on_connection_deleted. * DevGuideExamples/DDS/Messenger/DataReaderListener.h: * DevGuideExamples/DDS/Messenger/DataReaderListener.cpp: * tests/DCPS/FooTest3_0/DataWriterListener.h: * tests/DCPS/FooTest3_0/DataWriterListener.cpp: * tests/DCPS/FooTest4_0/DataReaderListener.h: * tests/DCPS/FooTest4_0/DataReaderListener.cpp: * tests/DCPS/FooTest5/DataReaderListener.h: * tests/DCPS/FooTest5/DataReaderListener.cpp: * tests/DCPS/LivelinessTest/DataReaderListener.h: * tests/DCPS/LivelinessTest/DataReaderListener.cpp: * tests/DCPS/MultiTopicTest/DataReaderListener.h: * tests/DCPS/MultiTopicTest/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataReaderListener.h: * tests/DCPS/Reconnect/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataWriterListener.h: * tests/DCPS/Reconnect/DataWriterListener.cpp: * tests/DCPS/Reconnect/publisher.cpp: * tests/DCPS/Reconnect/run_test.pl: The concrete Listeners needs to implement the new on_connection_deleted method. The reconnect test restart_pub tests the the new connection closure callback. * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: Cleaning up debugging messages./
,,0.7728,OpenDDS,"Mon Nov 13 16:55:56 UTC 2006 Ciju John * dds/DCPS/DataWriterImpl.cpp: Add new log messages. * dds/DCPS/transport/framework/EntryExit.h: * dds/DCPS/transport/framework/TransportDebug.h: Modifications to set all old-style debug statements to low priority. * dds/DCPS/transport/framework/TransportInterface.inl: Changed log level. * dds/DCPS/transport/framework/TransportReceiveStrategy.cpp: Decoment behavior. * dds/DCPS/transport/framework/TransportSendStrategy.h: The allocators were of the wrong types. Fixed them. * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Fixed an array initialization problem for non-GNU compilers. * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: If ReConnect task fails to reconnect, it needed to inform the Connection object. * dds/InfoRepo/DCPSInfoRepo.cpp: Fixed build problems from missing header files./Tue Nov 7 22:08:50 UTC 2006 Ciju John * dds/DCPS/Cached_Allocator_With_Overflow_T.h: * dds/DCPS/Dynamic_Cached_Allocator_With_Overflow_T.h: * dds/DCPS/WriteDataContainer.h: * dds/DCPS/WriteDataContainer.cpp: * dds/DCPS/transport/framework/BuildChainVisitor.inl: * dds/DCPS/transport/framework/BuildChainVisitor.cpp: * dds/DCPS/transport/framework/QueueTaskBase_T.h: cosmetic fixes (spaces / new lines) * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLinkSet.h: * dds/DCPS/transport/framework/DataLinkSetMap.h: Added code comments. * dds/DCPS/transport/framework/DataLink.inl: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/framework/DataLinkSet.inl: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy.inl: * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Add locks to protect shared data. Better usage of locks and reference counting, rather than hold locks for extended invocations. In TransportSendStrategy set DELAY_NOTIFICATION to be default for direct_send(). This could delay things a bit in the normal case but doing an immediate notification has been observed to deadlock in the DCPS layer in stress conditions. This occurs when the data_deliverd () call winds its way from the transport to DCPS layer while another thread is winding its way up. * dds/DCPS/transport/framework/DataLinkSetMap.cpp: Renamed lock_ to map_lock_ to make it self-documenting. * dds/DCPS/transport/framework/EntryExit.h: The EntryExit class does a run-time check before initializing any data members. Use a set size array, rather than ACE_CString data members. Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. This coupled with the run-time check should speed up things. The new design tries to minimize the performnace hit of logging. * dds/DCPS/transport/framework/TransportDebug.h: Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/NetworkAddress.inl: * dds/DCPS/transport/framework/NullSynch.inl: * dds/DCPS/transport/framework/NullSynch.cpp: * dds/DCPS/transport/framework/NullSynchStrategy.cpp: * dds/DCPS/transport/framework/PacketRemoveVisitor.inl: * dds/DCPS/transport/framework/PacketRemoveVisitor.cpp: * dds/DCPS/transport/framework/PerConnectionSynch.inl: * dds/DCPS/transport/framework/PerConnectionSynch.cpp: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.inl: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.cpp: * dds/DCPS/transport/framework/PoolSynch.inl: * dds/DCPS/transport/framework/PoolSynch.cpp: * dds/DCPS/transport/framework/PoolSynchStrategy.inl: * dds/DCPS/transport/framework/PoolSynchStrategy.cpp: * dds/DCPS/transport/framework/QueueRemoveVisitor.inl: * dds/DCPS/transport/framework/QueueRemoveVisitor.cpp: * dds/DCPS/transport/framework/ReceiveListenerSet.inl: * dds/DCPS/transport/framework/ReceiveListenerSet.cpp: * dds/DCPS/transport/framework/ReceiveListenerSetMap.inl: * dds/DCPS/transport/framework/ReceiveListenerSetMap.cpp: * dds/DCPS/transport/framework/ReceivedDataSample.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.cpp: * dds/DCPS/transport/framework/RepoIdSet.inl: * dds/DCPS/transport/framework/RepoIdSet.cpp: * dds/DCPS/transport/framework/RepoIdSetMap.inl: * dds/DCPS/transport/framework/RepoIdSetMap.cpp: * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.cpp: * dds/DCPS/transport/framework/ThreadSynch.inl: * dds/DCPS/transport/framework/ThreadSynch.cpp: * dds/DCPS/transport/framework/ThreadSynchResource.inl: * dds/DCPS/transport/framework/ThreadSynchResource.cpp: * dds/DCPS/transport/framework/ThreadSynchStrategy.inl: * dds/DCPS/transport/framework/ThreadSynchStrategy.cpp: * dds/DCPS/transport/framework/ThreadSynchWorker.inl: * dds/DCPS/transport/framework/ThreadSynchWorker.cpp: * dds/DCPS/transport/framework/TransportConfiguration.inl: * dds/DCPS/transport/framework/TransportConfiguration.cpp: * dds/DCPS/transport/framework/TransportControlElement.cpp: * dds/DCPS/transport/framework/TransportFactory.inl: * dds/DCPS/transport/framework/TransportFactory.cpp: * dds/DCPS/transport/framework/TransportHeader.inl: * dds/DCPS/transport/framework/TransportImpl.inl: * dds/DCPS/transport/framework/TransportImpl.cpp: * dds/DCPS/transport/framework/TransportImplFactory.inl: * dds/DCPS/transport/framework/TransportImplFactory.cpp: * dds/DCPS/transport/framework/TransportInterface.inl: * dds/DCPS/transport/framework/TransportInterface.cpp: * dds/DCPS/transport/framework/TransportQueueElement.inl: * dds/DCPS/transport/framework/TransportQueueElement.cpp: * dds/DCPS/transport/framework/TransportReactorTask.cpp: * dds/DCPS/transport/framework/TransportReceiveListener.cpp: * dds/DCPS/transport/framework/TransportReceiveStrategy.inl: * dds/DCPS/transport/framework/TransportReceiveStrategy.cpp: * dds/DCPS/transport/framework/TransportReplacedElement.inl: * dds/DCPS/transport/framework/TransportReplacedElement.cpp: * dds/DCPS/transport/framework/TransportSendControlElement.inl: * dds/DCPS/transport/framework/TransportSendControlElement.cpp: * dds/DCPS/transport/framework/TransportSendElement.inl: * dds/DCPS/transport/framework/TransportSendElement.cpp: * dds/DCPS/transport/framework/TransportSendListener.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpAcceptor.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnectionReplaceTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSendStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSynchResource.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.cpp: Logging macro usage modified. * dds/DdsDcpsDomain.idl: cosmetic fixes/"
,,0.8614,OpenDDS,"Fri Dec 8 19:38:39 UTC 2006 Ciju John Rework thread-per-connection (TPC) to be able to remove transitions elements in the tpc queue. This was contributed by Yan Dai to fix potential memory leaks in TPC logic. * dds/DCPS/transport/framework/DataLink.inl: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/framework/ThreadPerConRemoveVisitor.h: * dds/DCPS/transport/framework/ThreadPerConRemoveVisitor.inl: * dds/DCPS/transport/framework/ThreadPerConRemoveVisitor.cpp: * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.h: * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.cpp: * dds/DdsDcps.mpc: TPC rework changes. * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: Timeout logic was misbehaving in a multi-pub environment. Fixed. * dds/DCPS/RcObject_T.h: * dds/DCPS/transport/framework/RepoIdSetMap.cpp: * dds/DCPS/transport/framework/DataLinkSet.inl: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/transport/framework/RepoIdSetMap.cpp: cosmetic changes. * dds/DCPS/transport/framework/TransportImpl.cpp: Fixed memory leak. Acknowledged RepoIdSet werent being cleaned up correctly./Thu Dec 7 15:18:32 UTC 2006 Ciju John * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLink.cpp: New API release_resources (called by concrete transport object upon DataLink disconnection). This just forwards the message to the TransportImpl object. * dds/DCPS/transport/framework/DataLinkCleanupTask.h: * dds/DCPS/transport/framework/DataLinkCleanupTask.cpp: A dedicated task belonging to the TransportImpl object. The TransportImpl adds safe (ref counted) DataLinks to the task. The task then cleans up any resources associated with the DataLink. This mechanism (top level dedicated thread) was preffered as we were able to reuse most of the remove_association logic even though the triger is comming up from the transport-specific ReConnection logic. * dds/DCPS/transport/framework/TransportControlElement.cpp: Initialize the TransportControlElement with loan count of 1 (instead of 0 as before). This is because the Control Element is to be sent to only one DataLink. * dds/DCPS/transport/framework/TransportDebug.h: Change Default debug level to 1. * dds/DCPS/transport/framework/TransportImpl.h: * dds/DCPS/transport/framework/TransportImpl.inl: * dds/DCPS/transport/framework/TransportImpl.cpp: Change find_publication/find_subscription API to optionally return a safe copy (ref incremented) of the target DataWriter/DataReader. This prevents the DataWriter getting wipped out during a send. New API release_link_resources (called by shutdown DataLink). This bumps up the DataLink ref count and adds it to the DataLinkCleanup task (which in turn cleans up DataLink resources). * dds/DCPS/transport/framework/TransportQueueElement.h: * dds/DCPS/transport/framework/TransportQueueElement.inl: Change variable names to better reflect usage. Also take out the loan count assert in production code. * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Fix race condition in send_delayed_notifications. The delayed notification count was being read outside the guard. This could change before guard acquisition. Now the read is done after guard acquisition. Change clear API to accept an optional next SendMode. The default is still MODE_DIRECT. * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.h: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.cpp: New configuration option passive_connect_duration to set timeout on initial passive connection establishment. Setting this prevents deadlock when the InfoRepo directs us to connect with a bogus/dead publisher. * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.h: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: The reconnect task gets cleaned up in the Connection object destructor, no need for shutdown() to cleanup. The shutdown cleanup was a temporary fix (for cleaning threads) to deal with subscriber crashes. Now we have a dedicated top-level thread to cleanup any associated DataLink resources upon subscriber crash. This will cleanup the Connection object as well as the associated Reconnect task. Added new API (called by the reconnect task) to inform the DataLink regards loss of its connection. * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.cpp: Fix race-condition in sending graceful disconnect message. If mode is queue, the heap element will get queued and a race begins as to which thread (worker thread/ORB thread) will delete the element. Now DataLink gets terminated right after sending the graceful disconnect message. Once the DataLink is terminated the worker thread bows out of the race and the element can be safely deleted by the original creator (ORB thread). * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.cpp: Add entry-exit debug macro * dds/DCPS/RcObject_T.h: Comment out a debugging accessor function. * dds/DCPS/transport/framework/TransportSendStrategy.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: * dds/DCPS/transport/framework/TransportQueueElement.cpp: * dds/DCPS/transport/framework/TransportInterface.cpp: * dds/DCPS/transport/framework/ThreadSynch.inl: * dds/DCPS/transport/framework/ReceiveListenerSetMap.cpp: * dds/DCPS/transport/framework/PerConnectionSynch.cpp: * dds/DCPS/transport/framework/DataLinkSetMap.cpp: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/WriteDataContainer.cpp: * dds/DCPS/Registered_Data_Types.cpp: * dds/DCPS/DataWriterImpl.cpp: cosmetic changes * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: Add passive connection timeout logic * dds/DdsDcps.mpc: Add DataLinkCleanupTask.* files./Tue Nov 7 22:08:50 UTC 2006 Ciju John * dds/DCPS/Cached_Allocator_With_Overflow_T.h: * dds/DCPS/Dynamic_Cached_Allocator_With_Overflow_T.h: * dds/DCPS/WriteDataContainer.h: * dds/DCPS/WriteDataContainer.cpp: * dds/DCPS/transport/framework/BuildChainVisitor.inl: * dds/DCPS/transport/framework/BuildChainVisitor.cpp: * dds/DCPS/transport/framework/QueueTaskBase_T.h: cosmetic fixes (spaces / new lines) * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLinkSet.h: * dds/DCPS/transport/framework/DataLinkSetMap.h: Added code comments. * dds/DCPS/transport/framework/DataLink.inl: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/framework/DataLinkSet.inl: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy.inl: * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Add locks to protect shared data. Better usage of locks and reference counting, rather than hold locks for extended invocations. In TransportSendStrategy set DELAY_NOTIFICATION to be default for direct_send(). This could delay things a bit in the normal case but doing an immediate notification has been observed to deadlock in the DCPS layer in stress conditions. This occurs when the data_deliverd () call winds its way from the transport to DCPS layer while another thread is winding its way up. * dds/DCPS/transport/framework/DataLinkSetMap.cpp: Renamed lock_ to map_lock_ to make it self-documenting. * dds/DCPS/transport/framework/EntryExit.h: The EntryExit class does a run-time check before initializing any data members. Use a set size array, rather than ACE_CString data members. Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. This coupled with the run-time check should speed up things. The new design tries to minimize the performnace hit of logging. * dds/DCPS/transport/framework/TransportDebug.h: Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/NetworkAddress.inl: * dds/DCPS/transport/framework/NullSynch.inl: * dds/DCPS/transport/framework/NullSynch.cpp: * dds/DCPS/transport/framework/NullSynchStrategy.cpp: * dds/DCPS/transport/framework/PacketRemoveVisitor.inl: * dds/DCPS/transport/framework/PacketRemoveVisitor.cpp: * dds/DCPS/transport/framework/PerConnectionSynch.inl: * dds/DCPS/transport/framework/PerConnectionSynch.cpp: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.inl: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.cpp: * dds/DCPS/transport/framework/PoolSynch.inl: * dds/DCPS/transport/framework/PoolSynch.cpp: * dds/DCPS/transport/framework/PoolSynchStrategy.inl: * dds/DCPS/transport/framework/PoolSynchStrategy.cpp: * dds/DCPS/transport/framework/QueueRemoveVisitor.inl: * dds/DCPS/transport/framework/QueueRemoveVisitor.cpp: * dds/DCPS/transport/framework/ReceiveListenerSet.inl: * dds/DCPS/transport/framework/ReceiveListenerSet.cpp: * dds/DCPS/transport/framework/ReceiveListenerSetMap.inl: * dds/DCPS/transport/framework/ReceiveListenerSetMap.cpp: * dds/DCPS/transport/framework/ReceivedDataSample.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.cpp: * dds/DCPS/transport/framework/RepoIdSet.inl: * dds/DCPS/transport/framework/RepoIdSet.cpp: * dds/DCPS/transport/framework/RepoIdSetMap.inl: * dds/DCPS/transport/framework/RepoIdSetMap.cpp: * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.cpp: * dds/DCPS/transport/framework/ThreadSynch.inl: * dds/DCPS/transport/framework/ThreadSynch.cpp: * dds/DCPS/transport/framework/ThreadSynchResource.inl: * dds/DCPS/transport/framework/ThreadSynchResource.cpp: * dds/DCPS/transport/framework/ThreadSynchStrategy.inl: * dds/DCPS/transport/framework/ThreadSynchStrategy.cpp: * dds/DCPS/transport/framework/ThreadSynchWorker.inl: * dds/DCPS/transport/framework/ThreadSynchWorker.cpp: * dds/DCPS/transport/framework/TransportConfiguration.inl: * dds/DCPS/transport/framework/TransportConfiguration.cpp: * dds/DCPS/transport/framework/TransportControlElement.cpp: * dds/DCPS/transport/framework/TransportFactory.inl: * dds/DCPS/transport/framework/TransportFactory.cpp: * dds/DCPS/transport/framework/TransportHeader.inl: * dds/DCPS/transport/framework/TransportImpl.inl: * dds/DCPS/transport/framework/TransportImpl.cpp: * dds/DCPS/transport/framework/TransportImplFactory.inl: * dds/DCPS/transport/framework/TransportImplFactory.cpp: * dds/DCPS/transport/framework/TransportInterface.inl: * dds/DCPS/transport/framework/TransportInterface.cpp: * dds/DCPS/transport/framework/TransportQueueElement.inl: * dds/DCPS/transport/framework/TransportQueueElement.cpp: * dds/DCPS/transport/framework/TransportReactorTask.cpp: * dds/DCPS/transport/framework/TransportReceiveListener.cpp: * dds/DCPS/transport/framework/TransportReceiveStrategy.inl: * dds/DCPS/transport/framework/TransportReceiveStrategy.cpp: * dds/DCPS/transport/framework/TransportReplacedElement.inl: * dds/DCPS/transport/framework/TransportReplacedElement.cpp: * dds/DCPS/transport/framework/TransportSendControlElement.inl: * dds/DCPS/transport/framework/TransportSendControlElement.cpp: * dds/DCPS/transport/framework/TransportSendElement.inl: * dds/DCPS/transport/framework/TransportSendElement.cpp: * dds/DCPS/transport/framework/TransportSendListener.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpAcceptor.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnectionReplaceTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSendStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSynchResource.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.cpp: Logging macro usage modified. * dds/DdsDcpsDomain.idl: cosmetic fixes/"
,,0.7588,OpenDDS,"Tue Nov 7 22:08:50 UTC 2006 Ciju John * dds/DCPS/Cached_Allocator_With_Overflow_T.h: * dds/DCPS/Dynamic_Cached_Allocator_With_Overflow_T.h: * dds/DCPS/WriteDataContainer.h: * dds/DCPS/WriteDataContainer.cpp: * dds/DCPS/transport/framework/BuildChainVisitor.inl: * dds/DCPS/transport/framework/BuildChainVisitor.cpp: * dds/DCPS/transport/framework/QueueTaskBase_T.h: cosmetic fixes (spaces / new lines) * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLinkSet.h: * dds/DCPS/transport/framework/DataLinkSetMap.h: Added code comments. * dds/DCPS/transport/framework/DataLink.inl: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/framework/DataLinkSet.inl: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy.inl: * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Add locks to protect shared data. Better usage of locks and reference counting, rather than hold locks for extended invocations. In TransportSendStrategy set DELAY_NOTIFICATION to be default for direct_send(). This could delay things a bit in the normal case but doing an immediate notification has been observed to deadlock in the DCPS layer in stress conditions. This occurs when the data_deliverd () call winds its way from the transport to DCPS layer while another thread is winding its way up. * dds/DCPS/transport/framework/DataLinkSetMap.cpp: Renamed lock_ to map_lock_ to make it self-documenting. * dds/DCPS/transport/framework/EntryExit.h: The EntryExit class does a run-time check before initializing any data members. Use a set size array, rather than ACE_CString data members. Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. This coupled with the run-time check should speed up things. The new design tries to minimize the performnace hit of logging. * dds/DCPS/transport/framework/TransportDebug.h: Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/NetworkAddress.inl: * dds/DCPS/transport/framework/NullSynch.inl: * dds/DCPS/transport/framework/NullSynch.cpp: * dds/DCPS/transport/framework/NullSynchStrategy.cpp: * dds/DCPS/transport/framework/PacketRemoveVisitor.inl: * dds/DCPS/transport/framework/PacketRemoveVisitor.cpp: * dds/DCPS/transport/framework/PerConnectionSynch.inl: * dds/DCPS/transport/framework/PerConnectionSynch.cpp: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.inl: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.cpp: * dds/DCPS/transport/framework/PoolSynch.inl: * dds/DCPS/transport/framework/PoolSynch.cpp: * dds/DCPS/transport/framework/PoolSynchStrategy.inl: * dds/DCPS/transport/framework/PoolSynchStrategy.cpp: * dds/DCPS/transport/framework/QueueRemoveVisitor.inl: * dds/DCPS/transport/framework/QueueRemoveVisitor.cpp: * dds/DCPS/transport/framework/ReceiveListenerSet.inl: * dds/DCPS/transport/framework/ReceiveListenerSet.cpp: * dds/DCPS/transport/framework/ReceiveListenerSetMap.inl: * dds/DCPS/transport/framework/ReceiveListenerSetMap.cpp: * dds/DCPS/transport/framework/ReceivedDataSample.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.cpp: * dds/DCPS/transport/framework/RepoIdSet.inl: * dds/DCPS/transport/framework/RepoIdSet.cpp: * dds/DCPS/transport/framework/RepoIdSetMap.inl: * dds/DCPS/transport/framework/RepoIdSetMap.cpp: * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.cpp: * dds/DCPS/transport/framework/ThreadSynch.inl: * dds/DCPS/transport/framework/ThreadSynch.cpp: * dds/DCPS/transport/framework/ThreadSynchResource.inl: * dds/DCPS/transport/framework/ThreadSynchResource.cpp: * dds/DCPS/transport/framework/ThreadSynchStrategy.inl: * dds/DCPS/transport/framework/ThreadSynchStrategy.cpp: * dds/DCPS/transport/framework/ThreadSynchWorker.inl: * dds/DCPS/transport/framework/ThreadSynchWorker.cpp: * dds/DCPS/transport/framework/TransportConfiguration.inl: * dds/DCPS/transport/framework/TransportConfiguration.cpp: * dds/DCPS/transport/framework/TransportControlElement.cpp: * dds/DCPS/transport/framework/TransportFactory.inl: * dds/DCPS/transport/framework/TransportFactory.cpp: * dds/DCPS/transport/framework/TransportHeader.inl: * dds/DCPS/transport/framework/TransportImpl.inl: * dds/DCPS/transport/framework/TransportImpl.cpp: * dds/DCPS/transport/framework/TransportImplFactory.inl: * dds/DCPS/transport/framework/TransportImplFactory.cpp: * dds/DCPS/transport/framework/TransportInterface.inl: * dds/DCPS/transport/framework/TransportInterface.cpp: * dds/DCPS/transport/framework/TransportQueueElement.inl: * dds/DCPS/transport/framework/TransportQueueElement.cpp: * dds/DCPS/transport/framework/TransportReactorTask.cpp: * dds/DCPS/transport/framework/TransportReceiveListener.cpp: * dds/DCPS/transport/framework/TransportReceiveStrategy.inl: * dds/DCPS/transport/framework/TransportReceiveStrategy.cpp: * dds/DCPS/transport/framework/TransportReplacedElement.inl: * dds/DCPS/transport/framework/TransportReplacedElement.cpp: * dds/DCPS/transport/framework/TransportSendControlElement.inl: * dds/DCPS/transport/framework/TransportSendControlElement.cpp: * dds/DCPS/transport/framework/TransportSendElement.inl: * dds/DCPS/transport/framework/TransportSendElement.cpp: * dds/DCPS/transport/framework/TransportSendListener.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpAcceptor.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnectionReplaceTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSendStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSynchResource.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.cpp: Logging macro usage modified. * dds/DdsDcpsDomain.idl: cosmetic fixes/Fri Oct 6 22:25:25 UTC 2006 Ciju John * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: The Reconnection Task belongs to the Connection object and hence should be cleaned up by it before exiting. This fixes a race condition which was causing application cores (rt 9123). * tests/DCPS/Reconnect/run_test.pl: Further fixes to the regression test added in: Thu Oct 5 19:55:42 UTC 2006 Ciju John"
,,0.8434,OpenDDS,"Fri Dec 8 22:31:28 UTC 2006 Ciju John The DataWriter & DataReader Listener now have an additional callback API on_connection_deleted. This gets invoked when the assiciated connection gets closed. This patch was contributed by Yan Dai. * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DdsDcpsPublication.idl: * dds/DdsDcpsSubscription.idl: Add new Listner callback on_connection_deleted. * DevGuideExamples/DDS/Messenger/DataReaderListener.h: * DevGuideExamples/DDS/Messenger/DataReaderListener.cpp: * tests/DCPS/FooTest3_0/DataWriterListener.h: * tests/DCPS/FooTest3_0/DataWriterListener.cpp: * tests/DCPS/FooTest4_0/DataReaderListener.h: * tests/DCPS/FooTest4_0/DataReaderListener.cpp: * tests/DCPS/FooTest5/DataReaderListener.h: * tests/DCPS/FooTest5/DataReaderListener.cpp: * tests/DCPS/LivelinessTest/DataReaderListener.h: * tests/DCPS/LivelinessTest/DataReaderListener.cpp: * tests/DCPS/MultiTopicTest/DataReaderListener.h: * tests/DCPS/MultiTopicTest/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataReaderListener.h: * tests/DCPS/Reconnect/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataWriterListener.h: * tests/DCPS/Reconnect/DataWriterListener.cpp: * tests/DCPS/Reconnect/publisher.cpp: * tests/DCPS/Reconnect/run_test.pl: The concrete Listeners needs to implement the new on_connection_deleted method. The reconnect test restart_pub tests the the new connection closure callback. * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: Cleaning up debugging messages./Fri Dec 8 19:38:39 UTC 2006 Ciju John Rework thread-per-connection (TPC) to be able to remove transitions elements in the tpc queue. This was contributed by Yan Dai to fix potential memory leaks in TPC logic. * dds/DCPS/transport/framework/DataLink.inl: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/framework/ThreadPerConRemoveVisitor.h: * dds/DCPS/transport/framework/ThreadPerConRemoveVisitor.inl: * dds/DCPS/transport/framework/ThreadPerConRemoveVisitor.cpp: * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.h: * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.cpp: * dds/DdsDcps.mpc: TPC rework changes. * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: Timeout logic was misbehaving in a multi-pub environment. Fixed. * dds/DCPS/RcObject_T.h: * dds/DCPS/transport/framework/RepoIdSetMap.cpp: * dds/DCPS/transport/framework/DataLinkSet.inl: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/transport/framework/RepoIdSetMap.cpp: cosmetic changes. * dds/DCPS/transport/framework/TransportImpl.cpp: Fixed memory leak. Acknowledged RepoIdSet werent being cleaned up correctly./Thu Dec 7 15:18:32 UTC 2006 Ciju John * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLink.cpp: New API release_resources (called by concrete transport object upon DataLink disconnection). This just forwards the message to the TransportImpl object. * dds/DCPS/transport/framework/DataLinkCleanupTask.h: * dds/DCPS/transport/framework/DataLinkCleanupTask.cpp: A dedicated task belonging to the TransportImpl object. The TransportImpl adds safe (ref counted) DataLinks to the task. The task then cleans up any resources associated with the DataLink. This mechanism (top level dedicated thread) was preffered as we were able to reuse most of the remove_association logic even though the triger is comming up from the transport-specific ReConnection logic. * dds/DCPS/transport/framework/TransportControlElement.cpp: Initialize the TransportControlElement with loan count of 1 (instead of 0 as before). This is because the Control Element is to be sent to only one DataLink. * dds/DCPS/transport/framework/TransportDebug.h: Change Default debug level to 1. * dds/DCPS/transport/framework/TransportImpl.h: * dds/DCPS/transport/framework/TransportImpl.inl: * dds/DCPS/transport/framework/TransportImpl.cpp: Change find_publication/find_subscription API to optionally return a safe copy (ref incremented) of the target DataWriter/DataReader. This prevents the DataWriter getting wipped out during a send. New API release_link_resources (called by shutdown DataLink). This bumps up the DataLink ref count and adds it to the DataLinkCleanup task (which in turn cleans up DataLink resources). * dds/DCPS/transport/framework/TransportQueueElement.h: * dds/DCPS/transport/framework/TransportQueueElement.inl: Change variable names to better reflect usage. Also take out the loan count assert in production code. * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Fix race condition in send_delayed_notifications. The delayed notification count was being read outside the guard. This could change before guard acquisition. Now the read is done after guard acquisition. Change clear API to accept an optional next SendMode. The default is still MODE_DIRECT. * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.h: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.cpp: New configuration option passive_connect_duration to set timeout on initial passive connection establishment. Setting this prevents deadlock when the InfoRepo directs us to connect with a bogus/dead publisher. * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.h: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: The reconnect task gets cleaned up in the Connection object destructor, no need for shutdown() to cleanup. The shutdown cleanup was a temporary fix (for cleaning threads) to deal with subscriber crashes. Now we have a dedicated top-level thread to cleanup any associated DataLink resources upon subscriber crash. This will cleanup the Connection object as well as the associated Reconnect task. Added new API (called by the reconnect task) to inform the DataLink regards loss of its connection. * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.cpp: Fix race-condition in sending graceful disconnect message. If mode is queue, the heap element will get queued and a race begins as to which thread (worker thread/ORB thread) will delete the element. Now DataLink gets terminated right after sending the graceful disconnect message. Once the DataLink is terminated the worker thread bows out of the race and the element can be safely deleted by the original creator (ORB thread). * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.cpp: Add entry-exit debug macro * dds/DCPS/RcObject_T.h: Comment out a debugging accessor function. * dds/DCPS/transport/framework/TransportSendStrategy.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: * dds/DCPS/transport/framework/TransportQueueElement.cpp: * dds/DCPS/transport/framework/TransportInterface.cpp: * dds/DCPS/transport/framework/ThreadSynch.inl: * dds/DCPS/transport/framework/ReceiveListenerSetMap.cpp: * dds/DCPS/transport/framework/PerConnectionSynch.cpp: * dds/DCPS/transport/framework/DataLinkSetMap.cpp: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/WriteDataContainer.cpp: * dds/DCPS/Registered_Data_Types.cpp: * dds/DCPS/DataWriterImpl.cpp: cosmetic changes * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: Add passive connection timeout logic * dds/DdsDcps.mpc: Add DataLinkCleanupTask.* files./Tue Nov 7 22:08:50 UTC 2006 Ciju John * dds/DCPS/Cached_Allocator_With_Overflow_T.h: * dds/DCPS/Dynamic_Cached_Allocator_With_Overflow_T.h: * dds/DCPS/WriteDataContainer.h: * dds/DCPS/WriteDataContainer.cpp: * dds/DCPS/transport/framework/BuildChainVisitor.inl: * dds/DCPS/transport/framework/BuildChainVisitor.cpp: * dds/DCPS/transport/framework/QueueTaskBase_T.h: cosmetic fixes (spaces / new lines) * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLinkSet.h: * dds/DCPS/transport/framework/DataLinkSetMap.h: Added code comments. * dds/DCPS/transport/framework/DataLink.inl: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/framework/DataLinkSet.inl: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy.inl: * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Add locks to protect shared data. Better usage of locks and reference counting, rather than hold locks for extended invocations. In TransportSendStrategy set DELAY_NOTIFICATION to be default for direct_send(). This could delay things a bit in the normal case but doing an immediate notification has been observed to deadlock in the DCPS layer in stress conditions. This occurs when the data_deliverd () call winds its way from the transport to DCPS layer while another thread is winding its way up. * dds/DCPS/transport/framework/DataLinkSetMap.cpp: Renamed lock_ to map_lock_ to make it self-documenting. * dds/DCPS/transport/framework/EntryExit.h: The EntryExit class does a run-time check before initializing any data members. Use a set size array, rather than ACE_CString data members. Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. This coupled with the run-time check should speed up things. The new design tries to minimize the performnace hit of logging. * dds/DCPS/transport/framework/TransportDebug.h: Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/NetworkAddress.inl: * dds/DCPS/transport/framework/NullSynch.inl: * dds/DCPS/transport/framework/NullSynch.cpp: * dds/DCPS/transport/framework/NullSynchStrategy.cpp: * dds/DCPS/transport/framework/PacketRemoveVisitor.inl: * dds/DCPS/transport/framework/PacketRemoveVisitor.cpp: * dds/DCPS/transport/framework/PerConnectionSynch.inl: * dds/DCPS/transport/framework/PerConnectionSynch.cpp: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.inl: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.cpp: * dds/DCPS/transport/framework/PoolSynch.inl: * dds/DCPS/transport/framework/PoolSynch.cpp: * dds/DCPS/transport/framework/PoolSynchStrategy.inl: * dds/DCPS/transport/framework/PoolSynchStrategy.cpp: * dds/DCPS/transport/framework/QueueRemoveVisitor.inl: * dds/DCPS/transport/framework/QueueRemoveVisitor.cpp: * dds/DCPS/transport/framework/ReceiveListenerSet.inl: * dds/DCPS/transport/framework/ReceiveListenerSet.cpp: * dds/DCPS/transport/framework/ReceiveListenerSetMap.inl: * dds/DCPS/transport/framework/ReceiveListenerSetMap.cpp: * dds/DCPS/transport/framework/ReceivedDataSample.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.cpp: * dds/DCPS/transport/framework/RepoIdSet.inl: * dds/DCPS/transport/framework/RepoIdSet.cpp: * dds/DCPS/transport/framework/RepoIdSetMap.inl: * dds/DCPS/transport/framework/RepoIdSetMap.cpp: * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.cpp: * dds/DCPS/transport/framework/ThreadSynch.inl: * dds/DCPS/transport/framework/ThreadSynch.cpp: * dds/DCPS/transport/framework/ThreadSynchResource.inl: * dds/DCPS/transport/framework/ThreadSynchResource.cpp: * dds/DCPS/transport/framework/ThreadSynchStrategy.inl: * dds/DCPS/transport/framework/ThreadSynchStrategy.cpp: * dds/DCPS/transport/framework/ThreadSynchWorker.inl: * dds/DCPS/transport/framework/ThreadSynchWorker.cpp: * dds/DCPS/transport/framework/TransportConfiguration.inl: * dds/DCPS/transport/framework/TransportConfiguration.cpp: * dds/DCPS/transport/framework/TransportControlElement.cpp: * dds/DCPS/transport/framework/TransportFactory.inl: * dds/DCPS/transport/framework/TransportFactory.cpp: * dds/DCPS/transport/framework/TransportHeader.inl: * dds/DCPS/transport/framework/TransportImpl.inl: * dds/DCPS/transport/framework/TransportImpl.cpp: * dds/DCPS/transport/framework/TransportImplFactory.inl: * dds/DCPS/transport/framework/TransportImplFactory.cpp: * dds/DCPS/transport/framework/TransportInterface.inl: * dds/DCPS/transport/framework/TransportInterface.cpp: * dds/DCPS/transport/framework/TransportQueueElement.inl: * dds/DCPS/transport/framework/TransportQueueElement.cpp: * dds/DCPS/transport/framework/TransportReactorTask.cpp: * dds/DCPS/transport/framework/TransportReceiveListener.cpp: * dds/DCPS/transport/framework/TransportReceiveStrategy.inl: * dds/DCPS/transport/framework/TransportReceiveStrategy.cpp: * dds/DCPS/transport/framework/TransportReplacedElement.inl: * dds/DCPS/transport/framework/TransportReplacedElement.cpp: * dds/DCPS/transport/framework/TransportSendControlElement.inl: * dds/DCPS/transport/framework/TransportSendControlElement.cpp: * dds/DCPS/transport/framework/TransportSendElement.inl: * dds/DCPS/transport/framework/TransportSendElement.cpp: * dds/DCPS/transport/framework/TransportSendListener.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpAcceptor.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnectionReplaceTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSendStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSynchResource.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.cpp: Logging macro usage modified. * dds/DdsDcpsDomain.idl: cosmetic fixes/"
,,0.7693,OpenDDS,"Tue Nov 7 22:08:50 UTC 2006 Ciju John * dds/DCPS/Cached_Allocator_With_Overflow_T.h: * dds/DCPS/Dynamic_Cached_Allocator_With_Overflow_T.h: * dds/DCPS/WriteDataContainer.h: * dds/DCPS/WriteDataContainer.cpp: * dds/DCPS/transport/framework/BuildChainVisitor.inl: * dds/DCPS/transport/framework/BuildChainVisitor.cpp: * dds/DCPS/transport/framework/QueueTaskBase_T.h: cosmetic fixes (spaces / new lines) * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLinkSet.h: * dds/DCPS/transport/framework/DataLinkSetMap.h: Added code comments. * dds/DCPS/transport/framework/DataLink.inl: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/framework/DataLinkSet.inl: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy.inl: * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Add locks to protect shared data. Better usage of locks and reference counting, rather than hold locks for extended invocations. In TransportSendStrategy set DELAY_NOTIFICATION to be default for direct_send(). This could delay things a bit in the normal case but doing an immediate notification has been observed to deadlock in the DCPS layer in stress conditions. This occurs when the data_deliverd () call winds its way from the transport to DCPS layer while another thread is winding its way up. * dds/DCPS/transport/framework/DataLinkSetMap.cpp: Renamed lock_ to map_lock_ to make it self-documenting. * dds/DCPS/transport/framework/EntryExit.h: The EntryExit class does a run-time check before initializing any data members. Use a set size array, rather than ACE_CString data members. Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. This coupled with the run-time check should speed up things. The new design tries to minimize the performnace hit of logging. * dds/DCPS/transport/framework/TransportDebug.h: Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/NetworkAddress.inl: * dds/DCPS/transport/framework/NullSynch.inl: * dds/DCPS/transport/framework/NullSynch.cpp: * dds/DCPS/transport/framework/NullSynchStrategy.cpp: * dds/DCPS/transport/framework/PacketRemoveVisitor.inl: * dds/DCPS/transport/framework/PacketRemoveVisitor.cpp: * dds/DCPS/transport/framework/PerConnectionSynch.inl: * dds/DCPS/transport/framework/PerConnectionSynch.cpp: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.inl: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.cpp: * dds/DCPS/transport/framework/PoolSynch.inl: * dds/DCPS/transport/framework/PoolSynch.cpp: * dds/DCPS/transport/framework/PoolSynchStrategy.inl: * dds/DCPS/transport/framework/PoolSynchStrategy.cpp: * dds/DCPS/transport/framework/QueueRemoveVisitor.inl: * dds/DCPS/transport/framework/QueueRemoveVisitor.cpp: * dds/DCPS/transport/framework/ReceiveListenerSet.inl: * dds/DCPS/transport/framework/ReceiveListenerSet.cpp: * dds/DCPS/transport/framework/ReceiveListenerSetMap.inl: * dds/DCPS/transport/framework/ReceiveListenerSetMap.cpp: * dds/DCPS/transport/framework/ReceivedDataSample.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.cpp: * dds/DCPS/transport/framework/RepoIdSet.inl: * dds/DCPS/transport/framework/RepoIdSet.cpp: * dds/DCPS/transport/framework/RepoIdSetMap.inl: * dds/DCPS/transport/framework/RepoIdSetMap.cpp: * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.cpp: * dds/DCPS/transport/framework/ThreadSynch.inl: * dds/DCPS/transport/framework/ThreadSynch.cpp: * dds/DCPS/transport/framework/ThreadSynchResource.inl: * dds/DCPS/transport/framework/ThreadSynchResource.cpp: * dds/DCPS/transport/framework/ThreadSynchStrategy.inl: * dds/DCPS/transport/framework/ThreadSynchStrategy.cpp: * dds/DCPS/transport/framework/ThreadSynchWorker.inl: * dds/DCPS/transport/framework/ThreadSynchWorker.cpp: * dds/DCPS/transport/framework/TransportConfiguration.inl: * dds/DCPS/transport/framework/TransportConfiguration.cpp: * dds/DCPS/transport/framework/TransportControlElement.cpp: * dds/DCPS/transport/framework/TransportFactory.inl: * dds/DCPS/transport/framework/TransportFactory.cpp: * dds/DCPS/transport/framework/TransportHeader.inl: * dds/DCPS/transport/framework/TransportImpl.inl: * dds/DCPS/transport/framework/TransportImpl.cpp: * dds/DCPS/transport/framework/TransportImplFactory.inl: * dds/DCPS/transport/framework/TransportImplFactory.cpp: * dds/DCPS/transport/framework/TransportInterface.inl: * dds/DCPS/transport/framework/TransportInterface.cpp: * dds/DCPS/transport/framework/TransportQueueElement.inl: * dds/DCPS/transport/framework/TransportQueueElement.cpp: * dds/DCPS/transport/framework/TransportReactorTask.cpp: * dds/DCPS/transport/framework/TransportReceiveListener.cpp: * dds/DCPS/transport/framework/TransportReceiveStrategy.inl: * dds/DCPS/transport/framework/TransportReceiveStrategy.cpp: * dds/DCPS/transport/framework/TransportReplacedElement.inl: * dds/DCPS/transport/framework/TransportReplacedElement.cpp: * dds/DCPS/transport/framework/TransportSendControlElement.inl: * dds/DCPS/transport/framework/TransportSendControlElement.cpp: * dds/DCPS/transport/framework/TransportSendElement.inl: * dds/DCPS/transport/framework/TransportSendElement.cpp: * dds/DCPS/transport/framework/TransportSendListener.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpAcceptor.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnectionReplaceTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSendStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSynchResource.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.cpp: Logging macro usage modified. * dds/DdsDcpsDomain.idl: cosmetic fixes/"
,,0.7652,OpenDDS,"Tue Nov 7 22:08:50 UTC 2006 Ciju John * dds/DCPS/Cached_Allocator_With_Overflow_T.h: * dds/DCPS/Dynamic_Cached_Allocator_With_Overflow_T.h: * dds/DCPS/WriteDataContainer.h: * dds/DCPS/WriteDataContainer.cpp: * dds/DCPS/transport/framework/BuildChainVisitor.inl: * dds/DCPS/transport/framework/BuildChainVisitor.cpp: * dds/DCPS/transport/framework/QueueTaskBase_T.h: cosmetic fixes (spaces / new lines) * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLinkSet.h: * dds/DCPS/transport/framework/DataLinkSetMap.h: Added code comments. * dds/DCPS/transport/framework/DataLink.inl: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/framework/DataLinkSet.inl: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy.inl: * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Add locks to protect shared data. Better usage of locks and reference counting, rather than hold locks for extended invocations. In TransportSendStrategy set DELAY_NOTIFICATION to be default for direct_send(). This could delay things a bit in the normal case but doing an immediate notification has been observed to deadlock in the DCPS layer in stress conditions. This occurs when the data_deliverd () call winds its way from the transport to DCPS layer while another thread is winding its way up. * dds/DCPS/transport/framework/DataLinkSetMap.cpp: Renamed lock_ to map_lock_ to make it self-documenting. * dds/DCPS/transport/framework/EntryExit.h: The EntryExit class does a run-time check before initializing any data members. Use a set size array, rather than ACE_CString data members. Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. This coupled with the run-time check should speed up things. The new design tries to minimize the performnace hit of logging. * dds/DCPS/transport/framework/TransportDebug.h: Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/NetworkAddress.inl: * dds/DCPS/transport/framework/NullSynch.inl: * dds/DCPS/transport/framework/NullSynch.cpp: * dds/DCPS/transport/framework/NullSynchStrategy.cpp: * dds/DCPS/transport/framework/PacketRemoveVisitor.inl: * dds/DCPS/transport/framework/PacketRemoveVisitor.cpp: * dds/DCPS/transport/framework/PerConnectionSynch.inl: * dds/DCPS/transport/framework/PerConnectionSynch.cpp: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.inl: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.cpp: * dds/DCPS/transport/framework/PoolSynch.inl: * dds/DCPS/transport/framework/PoolSynch.cpp: * dds/DCPS/transport/framework/PoolSynchStrategy.inl: * dds/DCPS/transport/framework/PoolSynchStrategy.cpp: * dds/DCPS/transport/framework/QueueRemoveVisitor.inl: * dds/DCPS/transport/framework/QueueRemoveVisitor.cpp: * dds/DCPS/transport/framework/ReceiveListenerSet.inl: * dds/DCPS/transport/framework/ReceiveListenerSet.cpp: * dds/DCPS/transport/framework/ReceiveListenerSetMap.inl: * dds/DCPS/transport/framework/ReceiveListenerSetMap.cpp: * dds/DCPS/transport/framework/ReceivedDataSample.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.cpp: * dds/DCPS/transport/framework/RepoIdSet.inl: * dds/DCPS/transport/framework/RepoIdSet.cpp: * dds/DCPS/transport/framework/RepoIdSetMap.inl: * dds/DCPS/transport/framework/RepoIdSetMap.cpp: * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.cpp: * dds/DCPS/transport/framework/ThreadSynch.inl: * dds/DCPS/transport/framework/ThreadSynch.cpp: * dds/DCPS/transport/framework/ThreadSynchResource.inl: * dds/DCPS/transport/framework/ThreadSynchResource.cpp: * dds/DCPS/transport/framework/ThreadSynchStrategy.inl: * dds/DCPS/transport/framework/ThreadSynchStrategy.cpp: * dds/DCPS/transport/framework/ThreadSynchWorker.inl: * dds/DCPS/transport/framework/ThreadSynchWorker.cpp: * dds/DCPS/transport/framework/TransportConfiguration.inl: * dds/DCPS/transport/framework/TransportConfiguration.cpp: * dds/DCPS/transport/framework/TransportControlElement.cpp: * dds/DCPS/transport/framework/TransportFactory.inl: * dds/DCPS/transport/framework/TransportFactory.cpp: * dds/DCPS/transport/framework/TransportHeader.inl: * dds/DCPS/transport/framework/TransportImpl.inl: * dds/DCPS/transport/framework/TransportImpl.cpp: * dds/DCPS/transport/framework/TransportImplFactory.inl: * dds/DCPS/transport/framework/TransportImplFactory.cpp: * dds/DCPS/transport/framework/TransportInterface.inl: * dds/DCPS/transport/framework/TransportInterface.cpp: * dds/DCPS/transport/framework/TransportQueueElement.inl: * dds/DCPS/transport/framework/TransportQueueElement.cpp: * dds/DCPS/transport/framework/TransportReactorTask.cpp: * dds/DCPS/transport/framework/TransportReceiveListener.cpp: * dds/DCPS/transport/framework/TransportReceiveStrategy.inl: * dds/DCPS/transport/framework/TransportReceiveStrategy.cpp: * dds/DCPS/transport/framework/TransportReplacedElement.inl: * dds/DCPS/transport/framework/TransportReplacedElement.cpp: * dds/DCPS/transport/framework/TransportSendControlElement.inl: * dds/DCPS/transport/framework/TransportSendControlElement.cpp: * dds/DCPS/transport/framework/TransportSendElement.inl: * dds/DCPS/transport/framework/TransportSendElement.cpp: * dds/DCPS/transport/framework/TransportSendListener.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpAcceptor.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnectionReplaceTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSendStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSynchResource.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.cpp: Logging macro usage modified. * dds/DdsDcpsDomain.idl: cosmetic fixes/"
,,0.8509,OpenDDS,"Thu Dec 7 15:18:32 UTC 2006 Ciju John * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLink.cpp: New API release_resources (called by concrete transport object upon DataLink disconnection). This just forwards the message to the TransportImpl object. * dds/DCPS/transport/framework/DataLinkCleanupTask.h: * dds/DCPS/transport/framework/DataLinkCleanupTask.cpp: A dedicated task belonging to the TransportImpl object. The TransportImpl adds safe (ref counted) DataLinks to the task. The task then cleans up any resources associated with the DataLink. This mechanism (top level dedicated thread) was preffered as we were able to reuse most of the remove_association logic even though the triger is comming up from the transport-specific ReConnection logic. * dds/DCPS/transport/framework/TransportControlElement.cpp: Initialize the TransportControlElement with loan count of 1 (instead of 0 as before). This is because the Control Element is to be sent to only one DataLink. * dds/DCPS/transport/framework/TransportDebug.h: Change Default debug level to 1. * dds/DCPS/transport/framework/TransportImpl.h: * dds/DCPS/transport/framework/TransportImpl.inl: * dds/DCPS/transport/framework/TransportImpl.cpp: Change find_publication/find_subscription API to optionally return a safe copy (ref incremented) of the target DataWriter/DataReader. This prevents the DataWriter getting wipped out during a send. New API release_link_resources (called by shutdown DataLink). This bumps up the DataLink ref count and adds it to the DataLinkCleanup task (which in turn cleans up DataLink resources). * dds/DCPS/transport/framework/TransportQueueElement.h: * dds/DCPS/transport/framework/TransportQueueElement.inl: Change variable names to better reflect usage. Also take out the loan count assert in production code. * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Fix race condition in send_delayed_notifications. The delayed notification count was being read outside the guard. This could change before guard acquisition. Now the read is done after guard acquisition. Change clear API to accept an optional next SendMode. The default is still MODE_DIRECT. * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.h: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.cpp: New configuration option passive_connect_duration to set timeout on initial passive connection establishment. Setting this prevents deadlock when the InfoRepo directs us to connect with a bogus/dead publisher. * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.h: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: The reconnect task gets cleaned up in the Connection object destructor, no need for shutdown() to cleanup. The shutdown cleanup was a temporary fix (for cleaning threads) to deal with subscriber crashes. Now we have a dedicated top-level thread to cleanup any associated DataLink resources upon subscriber crash. This will cleanup the Connection object as well as the associated Reconnect task. Added new API (called by the reconnect task) to inform the DataLink regards loss of its connection. * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.cpp: Fix race-condition in sending graceful disconnect message. If mode is queue, the heap element will get queued and a race begins as to which thread (worker thread/ORB thread) will delete the element. Now DataLink gets terminated right after sending the graceful disconnect message. Once the DataLink is terminated the worker thread bows out of the race and the element can be safely deleted by the original creator (ORB thread). * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.cpp: Add entry-exit debug macro * dds/DCPS/RcObject_T.h: Comment out a debugging accessor function. * dds/DCPS/transport/framework/TransportSendStrategy.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: * dds/DCPS/transport/framework/TransportQueueElement.cpp: * dds/DCPS/transport/framework/TransportInterface.cpp: * dds/DCPS/transport/framework/ThreadSynch.inl: * dds/DCPS/transport/framework/ReceiveListenerSetMap.cpp: * dds/DCPS/transport/framework/PerConnectionSynch.cpp: * dds/DCPS/transport/framework/DataLinkSetMap.cpp: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/WriteDataContainer.cpp: * dds/DCPS/Registered_Data_Types.cpp: * dds/DCPS/DataWriterImpl.cpp: cosmetic changes * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: Add passive connection timeout logic * dds/DdsDcps.mpc: Add DataLinkCleanupTask.* files./Mon Nov 13 16:55:56 UTC 2006 Ciju John * dds/DCPS/DataWriterImpl.cpp: Add new log messages. * dds/DCPS/transport/framework/EntryExit.h: * dds/DCPS/transport/framework/TransportDebug.h: Modifications to set all old-style debug statements to low priority. * dds/DCPS/transport/framework/TransportInterface.inl: Changed log level. * dds/DCPS/transport/framework/TransportReceiveStrategy.cpp: Decoment behavior. * dds/DCPS/transport/framework/TransportSendStrategy.h: The allocators were of the wrong types. Fixed them. * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Fixed an array initialization problem for non-GNU compilers. * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: If ReConnect task fails to reconnect, it needed to inform the Connection object. * dds/InfoRepo/DCPSInfoRepo.cpp: Fixed build problems from missing header files./ChangeLogTag: Mon Nov 13 12:32:18 UTC 2006 Chad Elliott Nov 7 22:08:50 UTC 2006 Ciju John * dds/DCPS/Cached_Allocator_With_Overflow_T.h: * dds/DCPS/Dynamic_Cached_Allocator_With_Overflow_T.h: * dds/DCPS/WriteDataContainer.h: * dds/DCPS/WriteDataContainer.cpp: * dds/DCPS/transport/framework/BuildChainVisitor.inl: * dds/DCPS/transport/framework/BuildChainVisitor.cpp: * dds/DCPS/transport/framework/QueueTaskBase_T.h: cosmetic fixes (spaces / new lines) * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLinkSet.h: * dds/DCPS/transport/framework/DataLinkSetMap.h: Added code comments. * dds/DCPS/transport/framework/DataLink.inl: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/framework/DataLinkSet.inl: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy.inl: * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Add locks to protect shared data. Better usage of locks and reference counting, rather than hold locks for extended invocations. In TransportSendStrategy set DELAY_NOTIFICATION to be default for direct_send(). This could delay things a bit in the normal case but doing an immediate notification has been observed to deadlock in the DCPS layer in stress conditions. This occurs when the data_deliverd () call winds its way from the transport to DCPS layer while another thread is winding its way up. * dds/DCPS/transport/framework/DataLinkSetMap.cpp: Renamed lock_ to map_lock_ to make it self-documenting. * dds/DCPS/transport/framework/EntryExit.h: The EntryExit class does a run-time check before initializing any data members. Use a set size array, rather than ACE_CString data members. Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. This coupled with the run-time check should speed up things. The new design tries to minimize the performnace hit of logging. * dds/DCPS/transport/framework/TransportDebug.h: Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/NetworkAddress.inl: * dds/DCPS/transport/framework/NullSynch.inl: * dds/DCPS/transport/framework/NullSynch.cpp: * dds/DCPS/transport/framework/NullSynchStrategy.cpp: * dds/DCPS/transport/framework/PacketRemoveVisitor.inl: * dds/DCPS/transport/framework/PacketRemoveVisitor.cpp: * dds/DCPS/transport/framework/PerConnectionSynch.inl: * dds/DCPS/transport/framework/PerConnectionSynch.cpp: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.inl: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.cpp: * dds/DCPS/transport/framework/PoolSynch.inl: * dds/DCPS/transport/framework/PoolSynch.cpp: * dds/DCPS/transport/framework/PoolSynchStrategy.inl: * dds/DCPS/transport/framework/PoolSynchStrategy.cpp: * dds/DCPS/transport/framework/QueueRemoveVisitor.inl: * dds/DCPS/transport/framework/QueueRemoveVisitor.cpp: * dds/DCPS/transport/framework/ReceiveListenerSet.inl: * dds/DCPS/transport/framework/ReceiveListenerSet.cpp: * dds/DCPS/transport/framework/ReceiveListenerSetMap.inl: * dds/DCPS/transport/framework/ReceiveListenerSetMap.cpp: * dds/DCPS/transport/framework/ReceivedDataSample.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.cpp: * dds/DCPS/transport/framework/RepoIdSet.inl: * dds/DCPS/transport/framework/RepoIdSet.cpp: * dds/DCPS/transport/framework/RepoIdSetMap.inl: * dds/DCPS/transport/framework/RepoIdSetMap.cpp: * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.cpp: * dds/DCPS/transport/framework/ThreadSynch.inl: * dds/DCPS/transport/framework/ThreadSynch.cpp: * dds/DCPS/transport/framework/ThreadSynchResource.inl: * dds/DCPS/transport/framework/ThreadSynchResource.cpp: * dds/DCPS/transport/framework/ThreadSynchStrategy.inl: * dds/DCPS/transport/framework/ThreadSynchStrategy.cpp: * dds/DCPS/transport/framework/ThreadSynchWorker.inl: * dds/DCPS/transport/framework/ThreadSynchWorker.cpp: * dds/DCPS/transport/framework/TransportConfiguration.inl: * dds/DCPS/transport/framework/TransportConfiguration.cpp: * dds/DCPS/transport/framework/TransportControlElement.cpp: * dds/DCPS/transport/framework/TransportFactory.inl: * dds/DCPS/transport/framework/TransportFactory.cpp: * dds/DCPS/transport/framework/TransportHeader.inl: * dds/DCPS/transport/framework/TransportImpl.inl: * dds/DCPS/transport/framework/TransportImpl.cpp: * dds/DCPS/transport/framework/TransportImplFactory.inl: * dds/DCPS/transport/framework/TransportImplFactory.cpp: * dds/DCPS/transport/framework/TransportInterface.inl: * dds/DCPS/transport/framework/TransportInterface.cpp: * dds/DCPS/transport/framework/TransportQueueElement.inl: * dds/DCPS/transport/framework/TransportQueueElement.cpp: * dds/DCPS/transport/framework/TransportReactorTask.cpp: * dds/DCPS/transport/framework/TransportReceiveListener.cpp: * dds/DCPS/transport/framework/TransportReceiveStrategy.inl: * dds/DCPS/transport/framework/TransportReceiveStrategy.cpp: * dds/DCPS/transport/framework/TransportReplacedElement.inl: * dds/DCPS/transport/framework/TransportReplacedElement.cpp: * dds/DCPS/transport/framework/TransportSendControlElement.inl: * dds/DCPS/transport/framework/TransportSendControlElement.cpp: * dds/DCPS/transport/framework/TransportSendElement.inl: * dds/DCPS/transport/framework/TransportSendElement.cpp: * dds/DCPS/transport/framework/TransportSendListener.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpAcceptor.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnectionReplaceTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSendStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSynchResource.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.cpp: Logging macro usage modified. * dds/DdsDcpsDomain.idl: cosmetic fixes/"
,,0.7484,OpenDDS,"Thu Dec 7 15:18:32 UTC 2006 Ciju John * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLink.cpp: New API release_resources (called by concrete transport object upon DataLink disconnection). This just forwards the message to the TransportImpl object. * dds/DCPS/transport/framework/DataLinkCleanupTask.h: * dds/DCPS/transport/framework/DataLinkCleanupTask.cpp: A dedicated task belonging to the TransportImpl object. The TransportImpl adds safe (ref counted) DataLinks to the task. The task then cleans up any resources associated with the DataLink. This mechanism (top level dedicated thread) was preffered as we were able to reuse most of the remove_association logic even though the triger is comming up from the transport-specific ReConnection logic. * dds/DCPS/transport/framework/TransportControlElement.cpp: Initialize the TransportControlElement with loan count of 1 (instead of 0 as before). This is because the Control Element is to be sent to only one DataLink. * dds/DCPS/transport/framework/TransportDebug.h: Change Default debug level to 1. * dds/DCPS/transport/framework/TransportImpl.h: * dds/DCPS/transport/framework/TransportImpl.inl: * dds/DCPS/transport/framework/TransportImpl.cpp: Change find_publication/find_subscription API to optionally return a safe copy (ref incremented) of the target DataWriter/DataReader. This prevents the DataWriter getting wipped out during a send. New API release_link_resources (called by shutdown DataLink). This bumps up the DataLink ref count and adds it to the DataLinkCleanup task (which in turn cleans up DataLink resources). * dds/DCPS/transport/framework/TransportQueueElement.h: * dds/DCPS/transport/framework/TransportQueueElement.inl: Change variable names to better reflect usage. Also take out the loan count assert in production code. * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Fix race condition in send_delayed_notifications. The delayed notification count was being read outside the guard. This could change before guard acquisition. Now the read is done after guard acquisition. Change clear API to accept an optional next SendMode. The default is still MODE_DIRECT. * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.h: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.cpp: New configuration option passive_connect_duration to set timeout on initial passive connection establishment. Setting this prevents deadlock when the InfoRepo directs us to connect with a bogus/dead publisher. * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.h: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: The reconnect task gets cleaned up in the Connection object destructor, no need for shutdown() to cleanup. The shutdown cleanup was a temporary fix (for cleaning threads) to deal with subscriber crashes. Now we have a dedicated top-level thread to cleanup any associated DataLink resources upon subscriber crash. This will cleanup the Connection object as well as the associated Reconnect task. Added new API (called by the reconnect task) to inform the DataLink regards loss of its connection. * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.cpp: Fix race-condition in sending graceful disconnect message. If mode is queue, the heap element will get queued and a race begins as to which thread (worker thread/ORB thread) will delete the element. Now DataLink gets terminated right after sending the graceful disconnect message. Once the DataLink is terminated the worker thread bows out of the race and the element can be safely deleted by the original creator (ORB thread). * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.cpp: Add entry-exit debug macro * dds/DCPS/RcObject_T.h: Comment out a debugging accessor function. * dds/DCPS/transport/framework/TransportSendStrategy.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: * dds/DCPS/transport/framework/TransportQueueElement.cpp: * dds/DCPS/transport/framework/TransportInterface.cpp: * dds/DCPS/transport/framework/ThreadSynch.inl: * dds/DCPS/transport/framework/ReceiveListenerSetMap.cpp: * dds/DCPS/transport/framework/PerConnectionSynch.cpp: * dds/DCPS/transport/framework/DataLinkSetMap.cpp: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/WriteDataContainer.cpp: * dds/DCPS/Registered_Data_Types.cpp: * dds/DCPS/DataWriterImpl.cpp: cosmetic changes * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: Add passive connection timeout logic * dds/DdsDcps.mpc: Add DataLinkCleanupTask.* files./"
,,0.18600000000000003,OpenDDS,Mon Dec 11 23:18:37 UTC 2006 Ciju John * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.cpp: * dds/DCPS/transport/framework/TransportControlElement.cpp: The TransportControlElement is now responsible for its own life cycle management. TransportQueueElements cleanup needs to be thread-aware. * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Was missing one of the variable length parameters. * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DCPS/PublisherImpl.cpp: cosmetic changes/
,,0.7631,OpenDDS,"Tue Nov 7 22:08:50 UTC 2006 Ciju John * dds/DCPS/Cached_Allocator_With_Overflow_T.h: * dds/DCPS/Dynamic_Cached_Allocator_With_Overflow_T.h: * dds/DCPS/WriteDataContainer.h: * dds/DCPS/WriteDataContainer.cpp: * dds/DCPS/transport/framework/BuildChainVisitor.inl: * dds/DCPS/transport/framework/BuildChainVisitor.cpp: * dds/DCPS/transport/framework/QueueTaskBase_T.h: cosmetic fixes (spaces / new lines) * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLinkSet.h: * dds/DCPS/transport/framework/DataLinkSetMap.h: Added code comments. * dds/DCPS/transport/framework/DataLink.inl: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/framework/DataLinkSet.inl: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy.inl: * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Add locks to protect shared data. Better usage of locks and reference counting, rather than hold locks for extended invocations. In TransportSendStrategy set DELAY_NOTIFICATION to be default for direct_send(). This could delay things a bit in the normal case but doing an immediate notification has been observed to deadlock in the DCPS layer in stress conditions. This occurs when the data_deliverd () call winds its way from the transport to DCPS layer while another thread is winding its way up. * dds/DCPS/transport/framework/DataLinkSetMap.cpp: Renamed lock_ to map_lock_ to make it self-documenting. * dds/DCPS/transport/framework/EntryExit.h: The EntryExit class does a run-time check before initializing any data members. Use a set size array, rather than ACE_CString data members. Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. This coupled with the run-time check should speed up things. The new design tries to minimize the performnace hit of logging. * dds/DCPS/transport/framework/TransportDebug.h: Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/NetworkAddress.inl: * dds/DCPS/transport/framework/NullSynch.inl: * dds/DCPS/transport/framework/NullSynch.cpp: * dds/DCPS/transport/framework/NullSynchStrategy.cpp: * dds/DCPS/transport/framework/PacketRemoveVisitor.inl: * dds/DCPS/transport/framework/PacketRemoveVisitor.cpp: * dds/DCPS/transport/framework/PerConnectionSynch.inl: * dds/DCPS/transport/framework/PerConnectionSynch.cpp: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.inl: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.cpp: * dds/DCPS/transport/framework/PoolSynch.inl: * dds/DCPS/transport/framework/PoolSynch.cpp: * dds/DCPS/transport/framework/PoolSynchStrategy.inl: * dds/DCPS/transport/framework/PoolSynchStrategy.cpp: * dds/DCPS/transport/framework/QueueRemoveVisitor.inl: * dds/DCPS/transport/framework/QueueRemoveVisitor.cpp: * dds/DCPS/transport/framework/ReceiveListenerSet.inl: * dds/DCPS/transport/framework/ReceiveListenerSet.cpp: * dds/DCPS/transport/framework/ReceiveListenerSetMap.inl: * dds/DCPS/transport/framework/ReceiveListenerSetMap.cpp: * dds/DCPS/transport/framework/ReceivedDataSample.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.cpp: * dds/DCPS/transport/framework/RepoIdSet.inl: * dds/DCPS/transport/framework/RepoIdSet.cpp: * dds/DCPS/transport/framework/RepoIdSetMap.inl: * dds/DCPS/transport/framework/RepoIdSetMap.cpp: * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.cpp: * dds/DCPS/transport/framework/ThreadSynch.inl: * dds/DCPS/transport/framework/ThreadSynch.cpp: * dds/DCPS/transport/framework/ThreadSynchResource.inl: * dds/DCPS/transport/framework/ThreadSynchResource.cpp: * dds/DCPS/transport/framework/ThreadSynchStrategy.inl: * dds/DCPS/transport/framework/ThreadSynchStrategy.cpp: * dds/DCPS/transport/framework/ThreadSynchWorker.inl: * dds/DCPS/transport/framework/ThreadSynchWorker.cpp: * dds/DCPS/transport/framework/TransportConfiguration.inl: * dds/DCPS/transport/framework/TransportConfiguration.cpp: * dds/DCPS/transport/framework/TransportControlElement.cpp: * dds/DCPS/transport/framework/TransportFactory.inl: * dds/DCPS/transport/framework/TransportFactory.cpp: * dds/DCPS/transport/framework/TransportHeader.inl: * dds/DCPS/transport/framework/TransportImpl.inl: * dds/DCPS/transport/framework/TransportImpl.cpp: * dds/DCPS/transport/framework/TransportImplFactory.inl: * dds/DCPS/transport/framework/TransportImplFactory.cpp: * dds/DCPS/transport/framework/TransportInterface.inl: * dds/DCPS/transport/framework/TransportInterface.cpp: * dds/DCPS/transport/framework/TransportQueueElement.inl: * dds/DCPS/transport/framework/TransportQueueElement.cpp: * dds/DCPS/transport/framework/TransportReactorTask.cpp: * dds/DCPS/transport/framework/TransportReceiveListener.cpp: * dds/DCPS/transport/framework/TransportReceiveStrategy.inl: * dds/DCPS/transport/framework/TransportReceiveStrategy.cpp: * dds/DCPS/transport/framework/TransportReplacedElement.inl: * dds/DCPS/transport/framework/TransportReplacedElement.cpp: * dds/DCPS/transport/framework/TransportSendControlElement.inl: * dds/DCPS/transport/framework/TransportSendControlElement.cpp: * dds/DCPS/transport/framework/TransportSendElement.inl: * dds/DCPS/transport/framework/TransportSendElement.cpp: * dds/DCPS/transport/framework/TransportSendListener.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpAcceptor.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnectionReplaceTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSendStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSynchResource.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.cpp: Logging macro usage modified. * dds/DdsDcpsDomain.idl: cosmetic fixes/"
,,0.7708,OpenDDS,"Tue Nov 7 22:08:50 UTC 2006 Ciju John * dds/DCPS/Cached_Allocator_With_Overflow_T.h: * dds/DCPS/Dynamic_Cached_Allocator_With_Overflow_T.h: * dds/DCPS/WriteDataContainer.h: * dds/DCPS/WriteDataContainer.cpp: * dds/DCPS/transport/framework/BuildChainVisitor.inl: * dds/DCPS/transport/framework/BuildChainVisitor.cpp: * dds/DCPS/transport/framework/QueueTaskBase_T.h: cosmetic fixes (spaces / new lines) * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLinkSet.h: * dds/DCPS/transport/framework/DataLinkSetMap.h: Added code comments. * dds/DCPS/transport/framework/DataLink.inl: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/framework/DataLinkSet.inl: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy.inl: * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Add locks to protect shared data. Better usage of locks and reference counting, rather than hold locks for extended invocations. In TransportSendStrategy set DELAY_NOTIFICATION to be default for direct_send(). This could delay things a bit in the normal case but doing an immediate notification has been observed to deadlock in the DCPS layer in stress conditions. This occurs when the data_deliverd () call winds its way from the transport to DCPS layer while another thread is winding its way up. * dds/DCPS/transport/framework/DataLinkSetMap.cpp: Renamed lock_ to map_lock_ to make it self-documenting. * dds/DCPS/transport/framework/EntryExit.h: The EntryExit class does a run-time check before initializing any data members. Use a set size array, rather than ACE_CString data members. Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. This coupled with the run-time check should speed up things. The new design tries to minimize the performnace hit of logging. * dds/DCPS/transport/framework/TransportDebug.h: Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/NetworkAddress.inl: * dds/DCPS/transport/framework/NullSynch.inl: * dds/DCPS/transport/framework/NullSynch.cpp: * dds/DCPS/transport/framework/NullSynchStrategy.cpp: * dds/DCPS/transport/framework/PacketRemoveVisitor.inl: * dds/DCPS/transport/framework/PacketRemoveVisitor.cpp: * dds/DCPS/transport/framework/PerConnectionSynch.inl: * dds/DCPS/transport/framework/PerConnectionSynch.cpp: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.inl: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.cpp: * dds/DCPS/transport/framework/PoolSynch.inl: * dds/DCPS/transport/framework/PoolSynch.cpp: * dds/DCPS/transport/framework/PoolSynchStrategy.inl: * dds/DCPS/transport/framework/PoolSynchStrategy.cpp: * dds/DCPS/transport/framework/QueueRemoveVisitor.inl: * dds/DCPS/transport/framework/QueueRemoveVisitor.cpp: * dds/DCPS/transport/framework/ReceiveListenerSet.inl: * dds/DCPS/transport/framework/ReceiveListenerSet.cpp: * dds/DCPS/transport/framework/ReceiveListenerSetMap.inl: * dds/DCPS/transport/framework/ReceiveListenerSetMap.cpp: * dds/DCPS/transport/framework/ReceivedDataSample.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.cpp: * dds/DCPS/transport/framework/RepoIdSet.inl: * dds/DCPS/transport/framework/RepoIdSet.cpp: * dds/DCPS/transport/framework/RepoIdSetMap.inl: * dds/DCPS/transport/framework/RepoIdSetMap.cpp: * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.cpp: * dds/DCPS/transport/framework/ThreadSynch.inl: * dds/DCPS/transport/framework/ThreadSynch.cpp: * dds/DCPS/transport/framework/ThreadSynchResource.inl: * dds/DCPS/transport/framework/ThreadSynchResource.cpp: * dds/DCPS/transport/framework/ThreadSynchStrategy.inl: * dds/DCPS/transport/framework/ThreadSynchStrategy.cpp: * dds/DCPS/transport/framework/ThreadSynchWorker.inl: * dds/DCPS/transport/framework/ThreadSynchWorker.cpp: * dds/DCPS/transport/framework/TransportConfiguration.inl: * dds/DCPS/transport/framework/TransportConfiguration.cpp: * dds/DCPS/transport/framework/TransportControlElement.cpp: * dds/DCPS/transport/framework/TransportFactory.inl: * dds/DCPS/transport/framework/TransportFactory.cpp: * dds/DCPS/transport/framework/TransportHeader.inl: * dds/DCPS/transport/framework/TransportImpl.inl: * dds/DCPS/transport/framework/TransportImpl.cpp: * dds/DCPS/transport/framework/TransportImplFactory.inl: * dds/DCPS/transport/framework/TransportImplFactory.cpp: * dds/DCPS/transport/framework/TransportInterface.inl: * dds/DCPS/transport/framework/TransportInterface.cpp: * dds/DCPS/transport/framework/TransportQueueElement.inl: * dds/DCPS/transport/framework/TransportQueueElement.cpp: * dds/DCPS/transport/framework/TransportReactorTask.cpp: * dds/DCPS/transport/framework/TransportReceiveListener.cpp: * dds/DCPS/transport/framework/TransportReceiveStrategy.inl: * dds/DCPS/transport/framework/TransportReceiveStrategy.cpp: * dds/DCPS/transport/framework/TransportReplacedElement.inl: * dds/DCPS/transport/framework/TransportReplacedElement.cpp: * dds/DCPS/transport/framework/TransportSendControlElement.inl: * dds/DCPS/transport/framework/TransportSendControlElement.cpp: * dds/DCPS/transport/framework/TransportSendElement.inl: * dds/DCPS/transport/framework/TransportSendElement.cpp: * dds/DCPS/transport/framework/TransportSendListener.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpAcceptor.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnectionReplaceTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSendStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSynchResource.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.cpp: Logging macro usage modified. * dds/DdsDcpsDomain.idl: cosmetic fixes/"
,,0.4325,OpenDDS,Fri Dec 8 22:31:28 UTC 2006 Ciju John The DataWriter & DataReader Listener now have an additional callback API on_connection_deleted. This gets invoked when the assiciated connection gets closed. This patch was contributed by Yan Dai. * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DdsDcpsPublication.idl: * dds/DdsDcpsSubscription.idl: Add new Listner callback on_connection_deleted. * DevGuideExamples/DDS/Messenger/DataReaderListener.h: * DevGuideExamples/DDS/Messenger/DataReaderListener.cpp: * tests/DCPS/FooTest3_0/DataWriterListener.h: * tests/DCPS/FooTest3_0/DataWriterListener.cpp: * tests/DCPS/FooTest4_0/DataReaderListener.h: * tests/DCPS/FooTest4_0/DataReaderListener.cpp: * tests/DCPS/FooTest5/DataReaderListener.h: * tests/DCPS/FooTest5/DataReaderListener.cpp: * tests/DCPS/LivelinessTest/DataReaderListener.h: * tests/DCPS/LivelinessTest/DataReaderListener.cpp: * tests/DCPS/MultiTopicTest/DataReaderListener.h: * tests/DCPS/MultiTopicTest/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataReaderListener.h: * tests/DCPS/Reconnect/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataWriterListener.h: * tests/DCPS/Reconnect/DataWriterListener.cpp: * tests/DCPS/Reconnect/publisher.cpp: * tests/DCPS/Reconnect/run_test.pl: The concrete Listeners needs to implement the new on_connection_deleted method. The reconnect test restart_pub tests the the new connection closure callback. * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: Cleaning up debugging messages./
,,0.7402,OpenDDS,"Thu Dec 7 15:18:32 UTC 2006 Ciju John * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLink.cpp: New API release_resources (called by concrete transport object upon DataLink disconnection). This just forwards the message to the TransportImpl object. * dds/DCPS/transport/framework/DataLinkCleanupTask.h: * dds/DCPS/transport/framework/DataLinkCleanupTask.cpp: A dedicated task belonging to the TransportImpl object. The TransportImpl adds safe (ref counted) DataLinks to the task. The task then cleans up any resources associated with the DataLink. This mechanism (top level dedicated thread) was preffered as we were able to reuse most of the remove_association logic even though the triger is comming up from the transport-specific ReConnection logic. * dds/DCPS/transport/framework/TransportControlElement.cpp: Initialize the TransportControlElement with loan count of 1 (instead of 0 as before). This is because the Control Element is to be sent to only one DataLink. * dds/DCPS/transport/framework/TransportDebug.h: Change Default debug level to 1. * dds/DCPS/transport/framework/TransportImpl.h: * dds/DCPS/transport/framework/TransportImpl.inl: * dds/DCPS/transport/framework/TransportImpl.cpp: Change find_publication/find_subscription API to optionally return a safe copy (ref incremented) of the target DataWriter/DataReader. This prevents the DataWriter getting wipped out during a send. New API release_link_resources (called by shutdown DataLink). This bumps up the DataLink ref count and adds it to the DataLinkCleanup task (which in turn cleans up DataLink resources). * dds/DCPS/transport/framework/TransportQueueElement.h: * dds/DCPS/transport/framework/TransportQueueElement.inl: Change variable names to better reflect usage. Also take out the loan count assert in production code. * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Fix race condition in send_delayed_notifications. The delayed notification count was being read outside the guard. This could change before guard acquisition. Now the read is done after guard acquisition. Change clear API to accept an optional next SendMode. The default is still MODE_DIRECT. * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.h: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.cpp: New configuration option passive_connect_duration to set timeout on initial passive connection establishment. Setting this prevents deadlock when the InfoRepo directs us to connect with a bogus/dead publisher. * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.h: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: The reconnect task gets cleaned up in the Connection object destructor, no need for shutdown() to cleanup. The shutdown cleanup was a temporary fix (for cleaning threads) to deal with subscriber crashes. Now we have a dedicated top-level thread to cleanup any associated DataLink resources upon subscriber crash. This will cleanup the Connection object as well as the associated Reconnect task. Added new API (called by the reconnect task) to inform the DataLink regards loss of its connection. * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.cpp: Fix race-condition in sending graceful disconnect message. If mode is queue, the heap element will get queued and a race begins as to which thread (worker thread/ORB thread) will delete the element. Now DataLink gets terminated right after sending the graceful disconnect message. Once the DataLink is terminated the worker thread bows out of the race and the element can be safely deleted by the original creator (ORB thread). * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.cpp: Add entry-exit debug macro * dds/DCPS/RcObject_T.h: Comment out a debugging accessor function. * dds/DCPS/transport/framework/TransportSendStrategy.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: * dds/DCPS/transport/framework/TransportQueueElement.cpp: * dds/DCPS/transport/framework/TransportInterface.cpp: * dds/DCPS/transport/framework/ThreadSynch.inl: * dds/DCPS/transport/framework/ReceiveListenerSetMap.cpp: * dds/DCPS/transport/framework/PerConnectionSynch.cpp: * dds/DCPS/transport/framework/DataLinkSetMap.cpp: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/WriteDataContainer.cpp: * dds/DCPS/Registered_Data_Types.cpp: * dds/DCPS/DataWriterImpl.cpp: cosmetic changes * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: Add passive connection timeout logic * dds/DdsDcps.mpc: Add DataLinkCleanupTask.* files./"
,,0.76,OpenDDS,"Fri Dec 8 22:31:28 UTC 2006 Ciju John The DataWriter & DataReader Listener now have an additional callback API on_connection_deleted. This gets invoked when the assiciated connection gets closed. This patch was contributed by Yan Dai. * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DdsDcpsPublication.idl: * dds/DdsDcpsSubscription.idl: Add new Listner callback on_connection_deleted. * DevGuideExamples/DDS/Messenger/DataReaderListener.h: * DevGuideExamples/DDS/Messenger/DataReaderListener.cpp: * tests/DCPS/FooTest3_0/DataWriterListener.h: * tests/DCPS/FooTest3_0/DataWriterListener.cpp: * tests/DCPS/FooTest4_0/DataReaderListener.h: * tests/DCPS/FooTest4_0/DataReaderListener.cpp: * tests/DCPS/FooTest5/DataReaderListener.h: * tests/DCPS/FooTest5/DataReaderListener.cpp: * tests/DCPS/LivelinessTest/DataReaderListener.h: * tests/DCPS/LivelinessTest/DataReaderListener.cpp: * tests/DCPS/MultiTopicTest/DataReaderListener.h: * tests/DCPS/MultiTopicTest/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataReaderListener.h: * tests/DCPS/Reconnect/DataReaderListener.cpp: * tests/DCPS/Reconnect/DataWriterListener.h: * tests/DCPS/Reconnect/DataWriterListener.cpp: * tests/DCPS/Reconnect/publisher.cpp: * tests/DCPS/Reconnect/run_test.pl: The concrete Listeners needs to implement the new on_connection_deleted method. The reconnect test restart_pub tests the the new connection closure callback. * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: Cleaning up debugging messages./Mon Nov 13 16:55:56 UTC 2006 Ciju John * dds/DCPS/DataWriterImpl.cpp: Add new log messages. * dds/DCPS/transport/framework/EntryExit.h: * dds/DCPS/transport/framework/TransportDebug.h: Modifications to set all old-style debug statements to low priority. * dds/DCPS/transport/framework/TransportInterface.inl: Changed log level. * dds/DCPS/transport/framework/TransportReceiveStrategy.cpp: Decoment behavior. * dds/DCPS/transport/framework/TransportSendStrategy.h: The allocators were of the wrong types. Fixed them. * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Fixed an array initialization problem for non-GNU compilers. * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: If ReConnect task fails to reconnect, it needed to inform the Connection object. * dds/InfoRepo/DCPSInfoRepo.cpp: Fixed build problems from missing header files./Tue Nov 7 22:08:50 UTC 2006 Ciju John * dds/DCPS/Cached_Allocator_With_Overflow_T.h: * dds/DCPS/Dynamic_Cached_Allocator_With_Overflow_T.h: * dds/DCPS/WriteDataContainer.h: * dds/DCPS/WriteDataContainer.cpp: * dds/DCPS/transport/framework/BuildChainVisitor.inl: * dds/DCPS/transport/framework/BuildChainVisitor.cpp: * dds/DCPS/transport/framework/QueueTaskBase_T.h: cosmetic fixes (spaces / new lines) * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLinkSet.h: * dds/DCPS/transport/framework/DataLinkSetMap.h: Added code comments. * dds/DCPS/transport/framework/DataLink.inl: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/framework/DataLinkSet.inl: * dds/DCPS/transport/framework/DataLinkSet.cpp: * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy.inl: * dds/DCPS/transport/framework/TransportSendStrategy.cpp: Add locks to protect shared data. Better usage of locks and reference counting, rather than hold locks for extended invocations. In TransportSendStrategy set DELAY_NOTIFICATION to be default for direct_send(). This could delay things a bit in the normal case but doing an immediate notification has been observed to deadlock in the DCPS layer in stress conditions. This occurs when the data_deliverd () call winds its way from the transport to DCPS layer while another thread is winding its way up. * dds/DCPS/transport/framework/DataLinkSetMap.cpp: Renamed lock_ to map_lock_ to make it self-documenting. * dds/DCPS/transport/framework/EntryExit.h: The EntryExit class does a run-time check before initializing any data members. Use a set size array, rather than ACE_CString data members. Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. This coupled with the run-time check should speed up things. The new design tries to minimize the performnace hit of logging. * dds/DCPS/transport/framework/TransportDebug.h: Defined a set of macros for logging levels. This allows logs above a sepecified level to be compiled out. * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/transport/framework/NetworkAddress.inl: * dds/DCPS/transport/framework/NullSynch.inl: * dds/DCPS/transport/framework/NullSynch.cpp: * dds/DCPS/transport/framework/NullSynchStrategy.cpp: * dds/DCPS/transport/framework/PacketRemoveVisitor.inl: * dds/DCPS/transport/framework/PacketRemoveVisitor.cpp: * dds/DCPS/transport/framework/PerConnectionSynch.inl: * dds/DCPS/transport/framework/PerConnectionSynch.cpp: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.inl: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.cpp: * dds/DCPS/transport/framework/PoolSynch.inl: * dds/DCPS/transport/framework/PoolSynch.cpp: * dds/DCPS/transport/framework/PoolSynchStrategy.inl: * dds/DCPS/transport/framework/PoolSynchStrategy.cpp: * dds/DCPS/transport/framework/QueueRemoveVisitor.inl: * dds/DCPS/transport/framework/QueueRemoveVisitor.cpp: * dds/DCPS/transport/framework/ReceiveListenerSet.inl: * dds/DCPS/transport/framework/ReceiveListenerSet.cpp: * dds/DCPS/transport/framework/ReceiveListenerSetMap.inl: * dds/DCPS/transport/framework/ReceiveListenerSetMap.cpp: * dds/DCPS/transport/framework/ReceivedDataSample.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.inl: * dds/DCPS/transport/framework/RemoveAllVisitor.cpp: * dds/DCPS/transport/framework/RepoIdSet.inl: * dds/DCPS/transport/framework/RepoIdSet.cpp: * dds/DCPS/transport/framework/RepoIdSetMap.inl: * dds/DCPS/transport/framework/RepoIdSetMap.cpp: * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.cpp: * dds/DCPS/transport/framework/ThreadSynch.inl: * dds/DCPS/transport/framework/ThreadSynch.cpp: * dds/DCPS/transport/framework/ThreadSynchResource.inl: * dds/DCPS/transport/framework/ThreadSynchResource.cpp: * dds/DCPS/transport/framework/ThreadSynchStrategy.inl: * dds/DCPS/transport/framework/ThreadSynchStrategy.cpp: * dds/DCPS/transport/framework/ThreadSynchWorker.inl: * dds/DCPS/transport/framework/ThreadSynchWorker.cpp: * dds/DCPS/transport/framework/TransportConfiguration.inl: * dds/DCPS/transport/framework/TransportConfiguration.cpp: * dds/DCPS/transport/framework/TransportControlElement.cpp: * dds/DCPS/transport/framework/TransportFactory.inl: * dds/DCPS/transport/framework/TransportFactory.cpp: * dds/DCPS/transport/framework/TransportHeader.inl: * dds/DCPS/transport/framework/TransportImpl.inl: * dds/DCPS/transport/framework/TransportImpl.cpp: * dds/DCPS/transport/framework/TransportImplFactory.inl: * dds/DCPS/transport/framework/TransportImplFactory.cpp: * dds/DCPS/transport/framework/TransportInterface.inl: * dds/DCPS/transport/framework/TransportInterface.cpp: * dds/DCPS/transport/framework/TransportQueueElement.inl: * dds/DCPS/transport/framework/TransportQueueElement.cpp: * dds/DCPS/transport/framework/TransportReactorTask.cpp: * dds/DCPS/transport/framework/TransportReceiveListener.cpp: * dds/DCPS/transport/framework/TransportReceiveStrategy.inl: * dds/DCPS/transport/framework/TransportReceiveStrategy.cpp: * dds/DCPS/transport/framework/TransportReplacedElement.inl: * dds/DCPS/transport/framework/TransportReplacedElement.cpp: * dds/DCPS/transport/framework/TransportSendControlElement.inl: * dds/DCPS/transport/framework/TransportSendControlElement.cpp: * dds/DCPS/transport/framework/TransportSendElement.inl: * dds/DCPS/transport/framework/TransportSendElement.cpp: * dds/DCPS/transport/framework/TransportSendListener.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpAcceptor.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConfiguration.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpConnectionReplaceTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpDataLink.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpFactory.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.inl: * dds/DCPS/transport/simpleTCP/SimpleTcpReceiveStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpReconnectTask.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSendStrategy.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpSynchResource.cpp: * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpConfiguration.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpDataLink.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpFactory.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpReceiveStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSendStrategy.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpSocket.cpp: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.inl: * dds/DCPS/transport/simpleUDP/SimpleUdpTransport.cpp: Logging macro usage modified. * dds/DdsDcpsDomain.idl: cosmetic fixes/"
,,0.0849,OpenDDS,Sun Jul 20 18:16:57 UTC 2008 Yan Dai Jul 16 22:34:10 UTC 2008 Yan Dai Jul 3 00:28:51 UTC 2008 Yan Dai May 9 00:16:55 UTC 2008 Yan Dai
,,0.0982,OpenDDS,Thu Apr 9 21:41:50 UTC 2009 Mike Martinez Apr 8 21:59:22 UTC 2009 Mike Martinez Apr 8 01:30:15 UTC 2009 Mike Martinez Apr 1 02:18:37 UTC 2009 Mike Martinez Mar 13 20:19:27 UTC 2009 Steven Stallion Feb 12 19:45:38 UTC 2009 Steven Stallion Jan 30 23:28:13 UTC 2009 Mike Martinez Jan 30 03:56:16 UTC 2009 Steven Stallion
,,0.289,OpenDDS,Wed Sep 2 20:30:43 UTC 2009 Mike Martinez Aug 28 19:30:37 UTC 2009 Steven Stallion Aug 27 22:31:11 UTC 2009 Steven Stallion Aug 25 23:14:53 UTC 2009 Steven Stallion Aug 24 20:44:02 UTC 2009 Steven Stallion Aug 19 23:10:11 UTC 2009 Steven Stallion Aug 14 22:54:02 UTC 2009 Steven Stallion Aug 13 22:17:02 UTC 2009 Steven Stallion Aug 13 04:41:21 UTC 2009 Yan Dai Aug 11 17:29:31 UTC 2009 Yan Dai Aug 7 16:03:10 UTC 2009 Steven Stallion Aug 4 02:46:26 UTC 2009 Yan Dai Aug 3 19:18:22 UTC 2009 Steven Stallion Jul 30 23:24:42 UTC 2009 Yan Dai Jul 30 02:08:33 UTC 2009 Yan Dai Jul 16 21:03:27 UTC 2009 Steven Stallion Jul 14 19:41:07 UTC 2009 Steven Stallion Fri Jun 19 22:14:25 UTC 2009 Adam Mitz Fri Jun 12 18:55:57 UTC 2009 Adam Mitz Tue Jun 9 20:48:07 UTC 2009 Adam Mitz
,,0.161,OpenDDS,Wed Sep 2 20:30:43 UTC 2009 Mike Martinez Aug 25 21:38:02 UTC 2009 Yan Dai Aug 20 23:57:23 UTC 2009 Steven Stallion Aug 18 23:56:02 UTC 2009 Steven Stallion Aug 11 22:26:53 UTC 2009 Steven Stallion Aug 11 04:42:34 UTC 2009 Yan Dai Aug 5 17:15:08 UTC 2009 Steven Stallion Aug 4 02:46:26 UTC 2009 Yan Dai Jul 30 23:24:42 UTC 2009 Yan Dai Jul 30 02:08:33 UTC 2009 Yan Dai Tue Jun 9 20:48:07 UTC 2009 Adam Mitz
,,0.1484,OpenDDS,Thu Sep 3 16:39:21 UTC 2009 Mike Martinez Sep 2 20:30:43 UTC 2009 Mike Martinez Aug 25 21:38:02 UTC 2009 Yan Dai Aug 20 23:57:23 UTC 2009 Steven Stallion Aug 19 23:10:11 UTC 2009 Steven Stallion Aug 13 04:41:21 UTC 2009 Yan Dai Aug 11 22:26:53 UTC 2009 Steven Stallion Aug 11 04:42:34 UTC 2009 Yan Dai Aug 5 17:15:08 UTC 2009 Steven Stallion Aug 4 02:46:26 UTC 2009 Yan Dai Aug 3 19:18:22 UTC 2009 Steven Stallion Jul 30 23:24:42 UTC 2009 Yan Dai Jul 30 02:08:33 UTC 2009 Yan Dai Jul 27 23:20:44 UTC 2009 Steven Stallion Mon Jun 22 18:45:04 UTC 2009 Adam Mitz Fri Jun 19 22:14:25 UTC 2009 Adam Mitz Fri Jun 12 18:55:57 UTC 2009 Adam Mitz Tue Jun 9 20:48:07 UTC 2009 Adam Mitz
,,0.0833,OpenDDS,Sat Nov 28 00:23:46 UTC 2009 Steven Stallion Sep 10 01:16:24 UTC 2009 Steven Stallion
,,0.1,OpenDDS,Sat Dec 5 20:02:21 UTC 2009 Steven Stallion Nov 28 00:23:46 UTC 2009 Steven Stallion Sep 10 01:16:24 UTC 2009 Steven Stallion
,,0.0673,OpenDDS,Sat Nov 28 00:23:46 UTC 2009 Steven Stallion
,,0.0673,OpenDDS,Sat Nov 28 00:23:46 UTC 2009 Steven Stallion
,,0.0673,OpenDDS,Sat Nov 28 00:23:46 UTC 2009 Steven Stallion
,,0.0833,OpenDDS,Sat Nov 28 00:23:46 UTC 2009 Steven Stallion Sep 10 01:16:24 UTC 2009 Steven Stallion
,,0.0965,OpenDDS,Mon Dec 7 05:07:38 UTC 2009 Paul Calabrese Nov 23 14:28:01 UTC 2009 Paul Calabrese Nov 3 21:39:22 UTC 2009 Steven Stallion Oct 30 22:09:19 UTC 2009 Steven Stallion Oct 7 16:07:02 UTC 2009 Paul Calabrese Sep 10 01:16:24 UTC 2009 Steven Stallion
,,0.0673,OpenDDS,Thu Jan 28 16:02:50 UTC 2010 Steven Stallion Dec 12 00:35:19 UTC 2009 Steven Stallion
,,0.1182,OpenDDS,Sat Feb 20 00:14:23 UTC 2010 Steven Stallion Jan 27 23:37:53 UTC 2010 Steven Stallion Jan 19 22:55:47 UTC 2010 Steven Stallion Jan 19 22:22:48 UTC 2010 Steven Stallion
,,0.0865,OpenDDS,Fri Feb 5 02:18:21 UTC 2010 Yan Dai Jan 20 22:07:26 UTC 2010 Steven Stallion Dec 10 22:45:18 UTC 2009 Steven Stallion
,,0.0686,OpenDDS,Mon Feb 1 15:12:09 UTC 2010 Steven Stallion
,,0.0673,OpenDDS,Sat Feb 13 23:18:43 UTC 2010 Steven Stallion
,,0.0664,OpenDDS,Wed Feb 24 20:36:48 UTC 2010 Yan Dai Dec 11 23:30:18 UTC 2009 Steven Stallion
,,0.0849,OpenDDS,Wed Feb 3 23:52:09 UTC 2010 Steven Stallion Jan 19 22:47:38 UTC 2010 Steven Stallion Jan 16 00:14:19 UTC 2010 Steven Stallion
,,0.1,OpenDDS,"Thu Nov 4 19:11:05 UTC 2010 Don Hudson Nov 3 15:29:11 UTC 2010 Don Hudson Removed DataReaderImpl::operator<<(ostream& str, WriterInfo::WriterState value) since it didnt function as intended on some platforms because WriterState is an enum nad replaced it with get_state_str(). Added type ENTITYKIND_OPENDDS_NIL_WRITER for use in infrastructure testing where there is no writer. Changed FooTest4 to use ENTITYKIND_OPENDDS_NIL_WRITER since the test has no writer by design. This eliminates multiple warnings ""failed to find publication data for ..."" that are misleading for this test./"
,,0.1231,OpenDDS,"Improved support for tesing with entities, collocated in-process, in-domain (participant), in-publisher (in-subscriber)/"
,,0.0833,OpenDDS,work-in-progress on transport refactoring: replacing TransportInterface with TransportClient/
,,0.0818,OpenDDS,work-in-progress on transport refactoring: replacing TransportInterface with TransportClient/ChangeLogTag: Thu Jun 30 22:29:35 UTC 2011 Adam Mitz
,,0.096,OpenDDS,work-in-progress for durability support in RTPS transport/ChangeLogTag: Wed Jan 4 20:49:39 UTC 2012 Adam Mitz
,,0.0929,OpenDDS,work-in-progress for durability support in RTPS transport/Fri Jan 27 17:48:31 UTC 2012 Jeff Schmitz Mon Jan 23 18:25:25 UTC 2012 Adam Mitz Thu Jan 19 16:11:04 UTC 2012 Adam Mitz Wed Jan 4 20:49:39 UTC 2012 Adam Mitz Dec 12 21:16:25 UTC 2011 Jeff Schmitz
,,0.3456,OpenDDS,"Thu Mar 22 21:00:21 UTC 2012 Don Hudson * dds/DCPS/transport/multicast/MulticastDataLink.h: * dds/DCPS/transport/multicast/MulticastDataLink.inl: * dds/DCPS/transport/multicast/MulticastInst.h: * dds/DCPS/transport/multicast/MulticastInst.cpp: * dds/DCPS/transport/multicast/MulticastSendStrategy.h: * dds/DCPS/transport/multicast/MulticastSendStrategy.cpp: * dds/DCPS/transport/multicast/MulticastTransport.cpp: Added optional async send on Windows platforms that supported it. New configuration parameter is async_send. Defaults to false. * dds/DCPS/transport/framework/TransportImpl.h: * dds/DCPS/transport/framework/TransportImpl.cpp: * dds/DCPS/transport/framework/TransportReactorTask.h: * dds/DCPS/transport/framework/TransportReactorTask.inl: * dds/DCPS/transport/framework/TransportReactorTask.cpp: Added proactor when optional async send is used and setup integrated proactor/reactor event loops. When async send is used, changed reactor to ACE_WFMO_Reactor because its required for the event loop integration and the features of the additional features of the ACE_Select_Reactor arent required. * bin/dcps_tests.lst: * tests/DCPS/LargeSample/pub_multicast_async.ini: * tests/DCPS/LargeSample/run_test.pl: Added run of LargeSample multicast test with publishers sending async./"
,,0.3435,OpenDDS,"Thu Mar 22 21:00:21 UTC 2012 Don Hudson * dds/DCPS/transport/multicast/MulticastDataLink.h: * dds/DCPS/transport/multicast/MulticastDataLink.inl: * dds/DCPS/transport/multicast/MulticastInst.h: * dds/DCPS/transport/multicast/MulticastInst.cpp: * dds/DCPS/transport/multicast/MulticastSendStrategy.h: * dds/DCPS/transport/multicast/MulticastSendStrategy.cpp: * dds/DCPS/transport/multicast/MulticastTransport.cpp: Added optional async send on Windows platforms that supported it. New configuration parameter is async_send. Defaults to false. * dds/DCPS/transport/framework/TransportImpl.h: * dds/DCPS/transport/framework/TransportImpl.cpp: * dds/DCPS/transport/framework/TransportReactorTask.h: * dds/DCPS/transport/framework/TransportReactorTask.inl: * dds/DCPS/transport/framework/TransportReactorTask.cpp: Added proactor when optional async send is used and setup integrated proactor/reactor event loops. When async send is used, changed reactor to ACE_WFMO_Reactor because its required for the event loop integration and the features of the additional features of the ACE_Select_Reactor arent required. * bin/dcps_tests.lst: * tests/DCPS/LargeSample/pub_multicast_async.ini: * tests/DCPS/LargeSample/run_test.pl: Added run of LargeSample multicast test with publishers sending async./"
,,0.3465,OpenDDS,"Fri Mar 23 15:23:26 UTC 2012 Don Hudson * dds/DCPS/transport/framework/TransportReactorTask.cpp: Changed stop() method to only delete proactor and reactor if proactor exists. Otherwise, deletion is left to dtor./Thu Mar 22 21:00:21 UTC 2012 Don Hudson * dds/DCPS/transport/multicast/MulticastDataLink.h: * dds/DCPS/transport/multicast/MulticastDataLink.inl: * dds/DCPS/transport/multicast/MulticastInst.h: * dds/DCPS/transport/multicast/MulticastInst.cpp: * dds/DCPS/transport/multicast/MulticastSendStrategy.h: * dds/DCPS/transport/multicast/MulticastSendStrategy.cpp: * dds/DCPS/transport/multicast/MulticastTransport.cpp: Added optional async send on Windows platforms that supported it. New configuration parameter is async_send. Defaults to false. * dds/DCPS/transport/framework/TransportImpl.h: * dds/DCPS/transport/framework/TransportImpl.cpp: * dds/DCPS/transport/framework/TransportReactorTask.h: * dds/DCPS/transport/framework/TransportReactorTask.inl: * dds/DCPS/transport/framework/TransportReactorTask.cpp: Added proactor when optional async send is used and setup integrated proactor/reactor event loops. When async send is used, changed reactor to ACE_WFMO_Reactor because its required for the event loop integration and the features of the additional features of the ACE_Select_Reactor arent required. * bin/dcps_tests.lst: * tests/DCPS/LargeSample/pub_multicast_async.ini: * tests/DCPS/LargeSample/run_test.pl: Added run of LargeSample multicast test with publishers sending async./"
,,0.066,OpenDDS,committing work in progress on moving the ORB to the inforepodiscovery library/
,,0.0789,OpenDDS,remove from BIT on the tasks thread; support discovery messages with D=0 and K=0; clean up GUI code; initialize availableBuiltinEndpoints/ChangeLogTag: Tue Mar 13 20:09:45 UTC 2012 Adam Mitz
,,0.066,OpenDDS,committing work in progress on moving the ORB to the inforepodiscovery library/
,,0.0849,OpenDDS,Work in progress for generating DATA_FRAG RTPS submessages/
,,0.1274,OpenDDS,"ChangeLogTag: Tue Sep 4 22:00:50 UTC 2012 Adam Mitz Jun 22 08:02:31 UTC 2012 Johnny Willemsen * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/DomainParticipantImpl.h: * dds/DCPS/DomainParticipantImpl.cpp: * dds/DCPS/PublisherImpl.h: * dds/DCPS/PublisherImpl.cpp: * dds/DCPS/SubscriberImpl.h: * dds/DCPS/SubscriberImpl.cpp: * dds/DCPS/TopicImpl.h: * dds/DCPS/TopicImpl.cpp: Removed fast_listener_, not used anymore/Thu Jun 14 11:02:17 UTC 2012 Johnny Willemsen * dds/DCPS/DataReaderImpl.cpp: Fixed compile error/ChangeLogTag: Wed Jun 13 21:41:24 UTC 2012 Trevor Fields Tue Jun 12 21:32:52 UTC 2012 Adam Mitz"
,,0.08,OpenDDS,Wed Jun 13 07:51:57 UTC 2012 Johnny Willemsen * dds/DCPS/QOS_XML_Handler/QOS_XML_Loader.h: * dds/DCPS/QOS_XML_Handler/QOS_XML_Loader.cpp: Fixed valgrind errors * tests/DCPS/QoS_XML/dump/run_test.pl: Simplified this script/
,,0.0798,OpenDDS,completed fragment-level reliability (resends)/
,,0.0657,OpenDDS,continued implementing resend of DataFrag due to NackFrag/
,,0.0636,OpenDDS,continued implementing resend of DataFrag due to NackFrag/
,,0.073,OpenDDS,Thu Apr 25 08:29:16 UTC 2013 Johnny Willemsen * dds/DCPS/DataReaderImpl.cpp: Decouple the DataReader from the ContentFilteredTopic as part of the delete_datareader call instead of doing it in the destructor./Wed Apr 10 20:19:29 UTC 2013 Byron Harris
,,0.0865,OpenDDS,work in progress on async associations/
,,0.0865,OpenDDS,work in progress on async associations/
,,0.0865,OpenDDS,work in progress on async associations/
,,0.0865,OpenDDS,work in progress on async associations/
,,0.0865,OpenDDS,work in progress on async associations/
,,0.0865,OpenDDS,work in progress on async associations/
,,0.0865,OpenDDS,work in progress on async associations/
,,0.0865,OpenDDS,work in progress on async associations/
,,0.0844,OpenDDS,work in progress on async associations/
,,0.0751,OpenDDS,use a Priority typedef instead of CORBA::Long inside the transport directory; made active/passive part of the PriorityKey comparison in order to fix a bug where both sides were passive/
,,0.1747,OpenDDS,"more work in progress, udp transport compiles, fixed locking in TransportClient/use a Priority typedef instead of CORBA::Long inside the transport directory; made active/passive part of the PriorityKey comparison in order to fix a bug where both sides were passive/"
,,0.1837,OpenDDS,"more work in progress, udp transport compiles, fixed locking in TransportClient/use a Priority typedef instead of CORBA::Long inside the transport directory; made active/passive part of the PriorityKey comparison in order to fix a bug where both sides were passive/"
,,0.0977,OpenDDS,fixed bugs in locking and reactor interactions/
,,0.14300000000000002,OpenDDS,"more work in progress, udp transport compiles, fixed locking in TransportClient/improved error indication from specific transport to framework/"
,,0.122,OpenDDS,"more work in progress, udp transport compiles, fixed locking in TransportClient/"
,,0.2833,OpenDDS,"more work in progress, udp transport compiles, fixed locking in TransportClient/use a Priority typedef instead of CORBA::Long inside the transport directory; made active/passive part of the PriorityKey comparison in order to fix a bug where both sides were passive/improved error indication from specific transport to framework/fixed bugs in locking and reactor interactions/fixed logging and use of local addr during connect/more work in progress, implementing async assoc within tcp transport (ACE nonblocking connect, etc)/"
,,0.098,OpenDDS,"more work in progress, implementing async assoc within tcp transport (ACE nonblocking connect, etc)/"
,,0.2247,OpenDDS,"more work in progress, udp transport compiles, fixed locking in TransportClient/use a Priority typedef instead of CORBA::Long inside the transport directory; made active/passive part of the PriorityKey comparison in order to fix a bug where both sides were passive/more work in progress, implementing async assoc within tcp transport (ACE nonblocking connect, etc)/"
,,0.21,OpenDDS,"use a Priority typedef instead of CORBA::Long inside the transport directory; made active/passive part of the PriorityKey comparison in order to fix a bug where both sides were passive/fixed bugs in locking and reactor interactions/fixed logging and use of local addr during connect/more work in progress, implementing async assoc within tcp transport (ACE nonblocking connect, etc)/"
,,0.0772,OpenDDS,use a Priority typedef instead of CORBA::Long inside the transport directory; made active/passive part of the PriorityKey comparison in order to fix a bug where both sides were passive/
,,0.098,OpenDDS,"more work in progress, implementing async assoc within tcp transport (ACE nonblocking connect, etc)/"
,,0.0813,OpenDDS,use a Priority typedef instead of CORBA::Long inside the transport directory; made active/passive part of the PriorityKey comparison in order to fix a bug where both sides were passive/
,,0.126,OpenDDS,"more work in progress, udp transport compiles, fixed locking in TransportClient/"
,,0.0673,OpenDDS,Implemented updates to MulticastTransport for async_assoc/
,,0.0673,OpenDDS,Implemented updates to MulticastTransport for async_assoc/
,,0.1026,OpenDDS,"BranchChangeLogTag: Fri May 9 18:13:43 UTC 2014 Peter Oschwald FAILED in debug statements/working to fix deadlock during association between reactor lock and transportclient lock_, ACE_DEBUG comments abound/"
,,0.0916,OpenDDS,"working to fix deadlock during association between reactor lock and transportclient lock_, ACE_DEBUG comments abound/"
,,0.0686,OpenDDS,BranchChangeLogTag: Thu May 8 20:28:39 UTC 2014 Peter Oschwald
,,0.11199999999999999,OpenDDS,"Changed type from bool to int to match return type in TcpConnection/working to fix deadlock during association between reactor lock and transportclient lock_, ACE_DEBUG comments abound/"
,,0.0936,OpenDDS,"working to fix deadlock during association between reactor lock and transportclient lock_, ACE_DEBUG comments abound/"
,,0.0916,OpenDDS,"working to fix deadlock during association between reactor lock and transportclient lock_, ACE_DEBUG comments abound/"
,,0.0686,OpenDDS,ChangeLogTag: Tue Jul 8 21:27:30 UTC 2014 Peter Oschwald
,,0.0673,OpenDDS,ChangeLogTag: Tue Jul 22 16:47:33 UTC 2014 Peter Oschwald Tue Jul 8 21:27:30 UTC 2014 Peter Oschwald
,,0.0673,OpenDDS,ChangeLogTag: Wed Jul 2 20:55:49 UTC 2014 Peter Oschwald
,,0.0686,OpenDDS,ChangeLogTag: Thu Jul 3 14:21:14 UTC 2014 Peter Oschwald
,,0.0686,OpenDDS,ChangeLogTag: Tue Jul 22 16:47:33 UTC 2014 Peter Oschwald
,,0.0686,OpenDDS,ChangeLogTag: Mon Dec 15 15:44:19 UTC 2014 Peter Oschwald
,,0.0673,OpenDDS,BranchChangeLogTag: Fri Nov 14 20:43:11 UTC 2014 Peter Oschwald Mon Nov 10 23:16:12 UTC 2014 Adam Mitz
,,0.0686,OpenDDS,ChangeLogTag: Wed Nov 26 19:20:55 UTC 2014 Peter Oschwald
,,0.0686,OpenDDS,ChangeLogTag: Mon Dec 15 20:25:37 UTC 2014 Peter Oschwald
,,0.0686,OpenDDS,BranchChangeLogTag: Fri Nov 14 20:43:11 UTC 2014 Peter Oschwald Tue Oct 28 21:56:09 UTC 2014 Jeff Schmitz
,,0.0686,OpenDDS,ChangeLogTag: Tue Feb 10 17:45:44 UTC 2015 Peter Oschwald
,,0.0883,OpenDDS,"opendds_idl: rename existing ""FACE"" functionality to ""FACE TS"", continued adding support for specialized language mappings (with FACE C++ being the first one)./"
,,0.1349,OpenDDS,"convert std::map to OPENDDS_MAP and OPENDDS_MAP_CMP/When not deleting the datareader, schedule associations for removal using RemoveAssociationSweeper to allow reader to finish processing information from active writer before removing/Tue Jan 27 21:24:16 UTC 2015 wilsonj"
,,0.0801,OpenDDS,Initial pass at converting all std::set to OPENDDS_SET(_CMP)/Convert GuidConverter to OPENDDS_STRING/
,,0.0686,OpenDDS,Initial pass at converting all std::set to OPENDDS_SET(_CMP)/
,,0.0884,OpenDDS,"Remove std::string from rtps_udp/Created common interface to allow stop_associating to be called with a set of readers or writers guids. Added call to stop_associating in DataReaderImpl::remove_all_associations/First commit of changes for wait_for_ack to branch/Thu Jan 29 15:24:14 UTC 2015 Justin Wilson Jan 28 18:42:02 UTC 2015 Justin Wilson Tue Jan 27 23:52:45 UTC 2015 Peter Oschwald Jan 23 22:08:38 UTC 2015 Paul Calabrese to send_links, pending_data, and get_unsent_data with add_sending_data/Creating Branch/Thu Jan 15 16:56:30 UTC 2015 Justin Wilson"
,,0.0686,OpenDDS,Initial pass at converting all std::set to OPENDDS_SET(_CMP)/
,,0.0673,OpenDDS,Initial pass at converting all std::set to OPENDDS_SET(_CMP)/convert std::map to OPENDDS_MAP and OPENDDS_MAP_CMP/
,,0.0686,OpenDDS,Initial pass at converting all std::multimap to OPENDDS_MULTIMAP(_CMP)/Initial pass at converting all std::set to OPENDDS_SET(_CMP)/
,,0.0673,OpenDDS,Initial pass at converting all std::set to OPENDDS_SET(_CMP)/ChangeLogTag: Fri Feb 13 21:09:37 UTC 2015 Adam Mitz
,,0.0664,OpenDDS,Initial pass at converting all std::set to OPENDDS_SET(_CMP)/
,,0.11199999999999999,OpenDDS,Need to allow do_remove_sample to reach down to the RtpsUdpDataLink and remove reference to the sample being removed by the DCPS layer before transport has signalled being finished with the sample (delivered/dropped)./ChangeLogTag: Fri Jan 9 21:36:18 UTC 2015 Adam Mitz
,,0.1174,OpenDDS,Need to allow do_remove_sample to reach down to the RtpsUdpDataLink and remove reference to the sample being removed by the DCPS layer before transport has signalled being finished with the sample (delivered/dropped)./
,,0.147,OpenDDS,Initial pass at converting all std::set to OPENDDS_SET(_CMP)/Initial pass at converint all std::vector to OPENDDS_VECTOR/convert std::map to OPENDDS_MAP and OPENDDS_MAP_CMP/Need to allow do_remove_sample to reach down to the RtpsUdpDataLink and remove reference to the sample being removed by the DCPS layer before transport has signalled being finished with the sample (delivered/dropped)./Convert GuidConverter to OPENDDS_STRING/Destructor for RtpsWriter to call data_delivered on any remaining elements that havent been acked yet/First commit of changes for wait_for_ack to branch/Thu Jan 22 23:15:46 UTC 2015 Justin Wilson
,,0.0686,OpenDDS,ChangeLogTag: Tue Feb 24 15:22:55 UTC 2015 Peter Oschwald
,,0.0782,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/Thu Jan 8 23:03:23 UTC 2015 Paul Calabrese
,,0.1427,OpenDDS,"Convert strings to OPENDS_STRING in dds/DCPS/When not deleting the datareader, schedule associations for removal using RemoveAssociationSweeper to allow reader to finish processing information from active writer before removing/ChangeLogTag: Wed Jan 28 01:58:41 UTC 2015 Adam Mitz"
,,0.1418,OpenDDS,"convert std::map to OPENDDS_MAP and OPENDDS_MAP_CMP/Convert strings to OPENDS_STRING in dds/DCPS/When not deleting the datareader, schedule associations for removal using RemoveAssociationSweeper to allow reader to finish processing information from active writer before removing/ChangeLogTag: Wed Jan 28 01:58:41 UTC 2015 Adam Mitz"
,,0.11199999999999999,OpenDDS,"First commit of changes for wait_for_ack to branch/ChangeLogTag: Fri Jan 30 19:02:26 UTC 2015 Adam Mitz delivered flag to DataSampleElement for use when sample is still on loan to dw when transport signals delivered/Changes to send_links, pending_data, and get_unsent_data with add_sending_data/Creating Branch/ChangeLogTag: Wed Jan 14 22:10:07 UTC 2015 Peter Oschwald"
,,0.0819,OpenDDS,Thu Jan 29 21:25:05 UTC 2015 Justin Wilson Jan 26 21:48:39 UTC 2015 Justin Wilson some commenting in prep for merge back to trunk. Added DomainParticipantImpl changes to avoid deadlock with liveliness timers while calling delete_contained_entities/
,,0.1734,OpenDDS,"When not deleting the datareader, schedule associations for removal using RemoveAssociationSweeper to allow reader to finish processing information from active writer before removing/Created common interface to allow stop_associating to be called with a set of readers or writers guids. Added call to stop_associating in DataReaderImpl::remove_all_associations/Fixed locking in DataReaderImpl so that Federation did not get hung up, and allow more time in test for Federated Info Repos to shutdown/First commit of changes for wait_for_ack to branch/ChangeLogTag: Wed Jan 28 01:58:41 UTC 2015 Adam Mitz Jan 27 21:24:16 UTC 2015 wilsonj Jan 27 18:15:04 UTC 2015 Justin Wilson Jan 22 23:15:46 UTC 2015 Justin Wilson to send_links, pending_data, and get_unsent_data with add_sending_data/"
,,0.0686,OpenDDS,Convert RTPS Discovery to OPENDDS_STRING/Thu Jan 22 23:15:46 UTC 2015 Justin Wilson
,,0.11599999999999999,OpenDDS,Convert RTPS Discovery to OPENDDS_STRING/Use DONT_DELETE flag to let Sedp know when it is safe to release a transport queue element or only when to delete its continuation block/Sedp allocate message block on heap for unregister dispose message/Fri Jan 23 15:39:21 UTC 2015 Justin Wilson Jan 22 23:15:46 UTC 2015 Justin Wilson
,,0.0756,OpenDDS,Convert strings to OPENDS_STRING in dds/DCPS/removed some commenting in prep for merge back to trunk. Added DomainParticipantImpl changes to avoid deadlock with liveliness timers while calling delete_contained_entities/Mon Jan 19 15:54:56 UTC 2015 Justin Wilson
,,0.0786,OpenDDS,Convert GuidConverter to OPENDDS_STRING/Mon Jan 19 15:54:56 UTC 2015 Justin Wilson
,,0.0686,OpenDDS,Initial pass at converting all std::set to OPENDDS_SET(_CMP)/
,,0.1632,OpenDDS,"Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/Added returning OK immediately from wait_for_acknowledgments for non reliable writers as per Spec/First commit of changes for wait_for_ack to branch/ChangeLogTag: Wed Feb 4 18:55:22 UTC 2015 Peter Oschwald Jan 23 22:08:38 UTC 2015 Paul Calabrese holding DWI/WDC lock while sending control messages; when dispose/unregister happen at the same time use a single message/Changes to send_links, pending_data, and get_unsent_data with add_sending_data/Creating Branch/Wed Jan 21 17:59:22 UTC 2015 Justin Wilson Jan 20 21:11:35 UTC 2015 Justin Wilson Jan 20 19:11:12 UTC 2015 Justin Wilson Jan 19 15:54:56 UTC 2015 Justin Wilson"
,,0.0833,OpenDDS,"Add reliabitliy, create individual transports when using RTPS/"
,,0.0818,OpenDDS,"restore old settingd/Add reliabitliy, create individual transports when using RTPS/"
,,0.1539,OpenDDS,Use ACE logging instead of iostreams in FACE Messenger test./Update Callback to use statuss MESSAGE and MAX_MESSAGE fields to provide the message_type_id and message size type to the callback. Print out these two new fields in Messenger tests callback function/Test fixed data in FACE Messenger./
,,0.2153,OpenDDS,"Limit number of retries to 40 for timedout writes to avoid infinite loop/Added timeout param to FACE::TS::Create_Connection now that the conformance test suite has it./Add logging for initial timeout validation tests for timeoud out writes/Fix warnings about missing initializer for Message deci/Fixed problem with publisher not using send_counter in normal send, thus causing duplication of 0 and 1 in messages./Add processing of timeout in send_message to report an error if less than a reliable writers max_blocking_time as well as add cases to Reliability test to verify success/error combinations/Fixed warning in FACE Reliability test, uses the same IDL as the messenger test/Change resend log message, log non-zero status./"
,,0.1719,OpenDDS,"convert std::string to use OPENDDS_STRING macro for safety profile compliance/Converting/updating transport logging having to do with association to be at DCPSTransportDebugLevel 1 instead of DCPSDebugLevel or DCPSTransportDebugLevel 3/Additional logging for active side particularly on the initiation of a connection/Added logging at the DCPSDebugLevel for TransportClient associate, initiate_connect, and use_datalink_i to include specific log messages without needing DCPSTransportDebugLevel/"
,,0.2295,OpenDDS,"Work to solve durability issue in Rtps where a durable reader could potentially receive data before it has received durable data due to being added after the evaluation of readers to exclude had been done. Reversed the logic to specify which readers should receive data instead of which should not receive the data to avoid this race. Had to leave logic processing the same for discovery, however, as it seems to rely on allowing all known about readers to be told instead of only those which were evaluated./"
,,0.2374,OpenDDS,"Work to solve durability issue in Rtps where a durable reader could potentially receive data before it has received durable data due to being added after the evaluation of readers to exclude had been done. Reversed the logic to specify which readers should receive data instead of which should not receive the data to avoid this race. Had to leave logic processing the same for discovery, however, as it seems to rely on allowing all known about readers to be told instead of only those which were evaluated./"
,,0.2644,OpenDDS,"When removing from elems_not_acked_, make sure protected by RtpsUdpDataLinks lock_. Cannot hold lock_ when calling data_(delivered, dropped...) on the TransportQueueElement, but need to reacquire the lock to remove from writers send_buff. Make sure TransportQueueElement is released through release_buffer up in the WriteDataContainer prior to removing its data in the send_buffer/Work to solve durability issue in Rtps where a durable reader could potentially receive data before it has received durable data due to being added after the evaluation of readers to exclude had been done. Reversed the logic to specify which readers should receive data instead of which should not receive the data to avoid this race. Had to leave logic processing the same for discovery, however, as it seems to rely on allowing all known about readers to be told instead of only those which were evaluated./"
,,0.0686,OpenDDS,Additional logging in reconnect code/
,,0.0784,OpenDDS,Some additional logging in the TcpTransport and TcpDataLink for tracking passive side actions/
,,0.0865,OpenDDS,convert RecorderImpl to use ReactorInterceptor for removal of associations./
,,0.0806,OpenDDS,Increase debug level for datawriter liveliness message logging and add identifiers for writer and reader in log msg/Remove use of streams when interacting with Guid and GuidConverter. Added header for stream includes allowed/not allowed in SafetyProfile/
,,0.0865,OpenDDS,convert RecorderImpl to use ReactorInterceptor for removal of associations./
,,0.0623,OpenDDS,"Added logging for successful path through transport_assoc_done/Additional logging for paths of association to ascertain why association_complete_i is not being called in certain instances, when association_complete is recorded/"
,,0.0758,OpenDDS,Build with FACE Conformance Test Suite./
,,0.0872,OpenDDS,Refactor config file QOS settings. Consistent datawriter and datareader naming./Build with FACE Conformance Test Suite./
,,0.0639,OpenDDS,Refactor config file QOS settings. Consistent datawriter and datareader naming./
,,0.0758,OpenDDS,Build with FACE Conformance Test Suite./
,,0.3726,OpenDDS,"Validate max message size in TS API for receive message and register callback/Add virtual destructor for FaceReceiver/TS API Update Get_Connection_Parameters to support WAITING_PROCESSES_OR_MESSAGES is number of unread samples for datareader, 0 for datawriter. Will return NOT_AVAILABLE until a Receive_Message or Register_Callback operation has happened to give message type knowledge to the receiver. Add test for Get_Connection_Parameters functionality/Add Dcps_debug_level guards around logging. Add typedefs for Entitiess maps/Add populating header from on_data_available in a registered callback. When populating header update statistics in the FaceReceiver. Added DDSAdapter as initial parent of FaceReceiver and FaceSender and made the collection of writers house FaceSenders instead of only DataWriter_var(s). Support message latency statistics for connection status. Get_Connection_Parameters updated to query actual statistics now, however returns NOT_AVAILABLE if a receive message, register_callback, or send_message has not yet occured to allow statistics to be populated. Properly specify instance for reading from built in topics to get lifespan qos and user_data. Populate_header_received now takes params by const ref. Updated some test conditions in FACE/Messenger for updates to Get_Connection_Parameters/TS API Update Add Receive_Message for receiving message header, add MessageHeader type. Map SOURCE_GUID back to writer using Built In Topics. Check validity of message against current time, source timestamp and lifespan qos of the datawriter found in the Built In Topics to set MESSAGE_VALIDITY. Currently can only receive header for the last message received, and only if specifying the transaction_id for that message obtained when it was received. Add test for receiving header and some testing of header fields/Consolidated traits. Moved impl templates to OpenDDS::DCPS. Removed HTemplate.txt./TS API Update: If multiple callbacks are registered, all should get a copy of the message. Adapt Messenger test to register 2 callbacks instead of just one./"
,,0.3835,OpenDDS,"Added test for multiple domains in FACE publisher and subscriber. Added support for assigning connections to particular transports./Validate max message size in TS API for receive message and register callback/Use receiver reference instead of accessing through entities.receivers each time/When using FACE API, configure pool size earlier/TS API Update Get_Connection_Parameters to support WAITING_PROCESSES_OR_MESSAGES is number of unread samples for datareader, 0 for datawriter. Will return NOT_AVAILABLE until a Receive_Message or Register_Callback operation has happened to give message type knowledge to the receiver. Add test for Get_Connection_Parameters functionality/Add Dcps_debug_level guards around logging. Add typedefs for Entitiess maps/TS API Update Allow reuse of particpant/publisher/subscriber with identical qos values. Because multiple readers/writers (connections) can be using same participant/pub/sub need to change cleanup as well to only delete entities when no longer in use/Add populating header from on_data_available in a registered callback. When populating header update statistics in the FaceReceiver. Added DDSAdapter as initial parent of FaceReceiver and FaceSender and made the collection of writers house FaceSenders instead of only DataWriter_var(s). Support message latency statistics for connection status. Get_Connection_Parameters updated to query actual statistics now, however returns NOT_AVAILABLE if a receive message, register_callback, or send_message has not yet occured to allow statistics to be populated. Properly specify instance for reading from built in topics to get lifespan qos and user_data. Populate_header_received now takes params by const ref. Updated some test conditions in FACE/Messenger for updates to Get_Connection_Parameters/TS API Update Add Receive_Message for receiving message header, add MessageHeader type. Map SOURCE_GUID back to writer using Built In Topics. Check validity of message against current time, source timestamp and lifespan qos of the datawriter found in the Built In Topics to set MESSAGE_VALIDITY. Currently can only receive header for the last message received, and only if specifying the transaction_id for that message obtained when it was received. Add test for receiving header and some testing of header fields/Refactor config file QOS settings. Consistent datawriter and datareader naming./Build with FACE Conformance Test Suite./TS API Update: Get_Connection_Parameters() Treat name and ID as both optional. If not provided, fill in, if both provided, validate, if neither provided, error. Connection_Id is only out param if specified as 0 otherwise will assume connection id has been specified. Updated Messenger tests get connection params validation section with a couple additional scenarios to test new functionality./Removed work-arounds for old LynxOS-178 toolchain./"
,,0.1121,OpenDDS,Rework TestFramework for more flexibility. Allow Shared transport to run with multiple writers and to use rtps/
,,0.1083,OpenDDS,Rework TestFramework for more flexibility. Allow Shared transport to run with multiple writers and to use rtps/
,,0.1177,OpenDDS,Rework TestFramework for more flexibility. Allow Shared transport to run with multiple writers and to use rtps/
,,0.1158,OpenDDS,Rework TestFramework for more flexibility. Allow Shared transport to run with multiple writers and to use rtps/
,,0.1133,OpenDDS,"TS API Update: create message_instance_guid when populating header from information in sample info. Update Header test to check message_instance_guid. Gave Header test its own message type to pass message_instance_guid from writer to reader for ease of checking. Added field to SampleInfo for opendds_reserved_publication_seq, to pass the sequence number. Updated where sample info is populated to include sequence number/"
,,0.1573,OpenDDS,Handle datalinks supporting notify_on_connection_deleted by storing off associations in released_assoc_by_local_. Check for presence of associations before datalink processes notifications to the listeners listener might only be waiting for the connection_deleted callback/Reworked DataLink::pub_map_ and sub_map_ replacing custom classes RepoIdSet and RepoIdSetMap with STL. Use a common typedef for std::map<RepoId> throughout./
,,0.2713,OpenDDS,"Fix bug in how callbacks are tracked and invoked./Support for detecting reader/writer disconnect with static discovery./Fix deadlocks from scheduling timer while holding lock./Remove timer based processing of acknowledgments. Mutate internal datalink tracking of messages awaiting acknowledgment withing the scope of the lock, but do actual delivery/dropping of messages outside of lock. Process acknowledgments as they occur. Allow shutdown operations to take ownership of elements which are in the process of being delivered, and take responsibility of delivering them in proper order of shutdown operations so samples are not stranded and lifetimes are controlled during shutdown/deletion. Provide implementation for pre_stop_i hook for RtpsUdpDatalink to handle messages still in progress./"
,,0.2701,OpenDDS,"Update type of ttl to be consistent (using unsigned char)/Fix bug in how callbacks are tracked and invoked./Updated latest static discovery changes for compatibility with SunCC/RtpsUdpDataLink: access interesting_readers_ and interesting_writers with lock/Support for detecting reader/writer disconnect with static discovery./Remove durability debugging information that is no longer necessary/Cover edge cases in processing heartbeats and sending heartbeat replies revolving around durability./Change the non-directed Gap into multiple directed gaps to prevent delivering to currently undiscovered readers/Fixed hex conversion errors. Fixed multiple calls to write_subscription_data and write_publication-data./Revert ""Revert ""Static discovery""""/Avoid calling release_acked on the send buffer multiple times for same sequence number (sns may appear multiple times in multimap due to fragmentation, but all will be acknowledged at the same time. release_acked need only be called once per sequence number\)/Fix compiler warnings on multimap insert for sun os/Remove timer based processing of acknowledgments. Mutate internal datalink tracking of messages awaiting acknowledgment withing the scope of the lock, but do actual delivery/dropping of messages outside of lock. Process acknowledgments as they occur. Allow shutdown operations to take ownership of elements which are in the process of being delivered, and take responsibility of delivering them in proper order of shutdown operations so samples are not stranded and lifetimes are controlled during shutdown/deletion. Provide implementation for pre_stop_i hook for RtpsUdpDatalink to handle messages still in progress./"
,,0.0865,OpenDDS,convert RecorderImpl to use ReactorInterceptor for removal of associations./
,,0.1385,OpenDDS,"Provide WriteDataContainer the ability to track samples which it has signalled the transport layer to remove, but transport layer was unable to remove due to being in the process of dropping/delivering. Push these samples onto new collection orphaned_to_transport which will be cleaned up as soon as the transport finishes the in-progress processing of the elements/"
,,0.0774,OpenDDS,"Prefix parameter with DCPS, always check for CDR alignment, fix fuzz, test inclusion/Create and use reset_alignmenrt method on serializer/Seriailize/deserialize according to observed RTI serialization logic for RTPS when configured to do so./Fixed wchar logging bugs./"
,,0.066,OpenDDS,Renamed transport to config in connection settings./
,,0.066,OpenDDS,Renamed transport to config in connection settings./
,,0.08800000000000001,OpenDDS,"TS API Update: Per Redmine Question 2387 answer Due to type mismatch between MESSAGE_RANGE_TYPE and MESSAGE_TYPE_GUID, store 0 for MESSAGE field in TRANSPORT_CONNECTION_STATUS_TYPE (returned to Get_Connection_Parameters), but store off platform_view_guid to use for MessageHeader and callback/"
,,0.2191,OpenDDS,"FACE Get_Connection_Parameters: only use last_msg_header after a message has been received./Protect against reference count leaks/TS API Update: create message_instance_guid when populating header from information in sample info. Update Header test to check message_instance_guid. Gave Header test its own message type to pass message_instance_guid from writer to reader for ease of checking. Added field to SampleInfo for opendds_reserved_publication_seq, to pass the sequence number. Updated where sample info is populated to include sequence number/Renamed transport to config in connection settings./Revert ""Revert ""Static discovery""""/Add logging of Invalid Param outputs from receive_header/Use domain participant factorys built in lookup_participant functionality rather than iterating over all readers/writers inspecting their participants/TS API Update: In absence of transformations, use config file max message size to set the MAX_MESSAGE field in the transport connection status/TS API Update: Per Redmine Question 2387 answer Due to type mismatch between MESSAGE_RANGE_TYPE and MESSAGE_TYPE_GUID, store 0 for MESSAGE field in TRANSPORT_CONNECTION_STATUS_TYPE (returned to Get_Connection_Parameters), but store off platform_view_guid to use for MessageHeader and callback/"
,,0.1392,OpenDDS,SharedTransport test: Fix test to wait for correct number of messages to be delivered in cases where command line specified more than one writer/publisher./SharedTransport TestCase: Update wait for data available to a do/while loop in case messages are already all arrived by the time the readcondition wait would be created./SharedTransportUpdates: Use a WaitSet to determine all samples have been delivered prior to taking. Updates to TestFramework to allow use of read conditions. Set DCPSPendingTimeout for test./
,,0.0744,OpenDDS,Additional StaticDiscovery Logging/
,,0.0954,OpenDDS,Allow code to reach clean-up stage instead of returning directly from switch. Clean up publisher and subscriber entities before returning from do_(reader/writer) helpers. Replace some magic numbers with sleep constants./
,,0.0673,OpenDDS,FooTest5 logging/
,,0.2087,OpenDDS,Change Multicast transport: Prevent out of order messages for reliable sessions Allow for naking and ack_nacking the beginning of a sequence to make sure no prior messages were missed to guarantee reliable delivery Remove do/while loop from passive_connection and use safer iteration over the callbacks. Change how passive_connection and session acking can be recognized and completed based on the receipt of any packet. Decrease nak delay for SharedTransport multicast test/
,,0.2215,OpenDDS,Change multimap insertion operation for sunos compatible way./Change Multicast transport: Prevent out of order messages for reliable sessions Allow for naking and ack_nacking the beginning of a sequence to make sure no prior messages were missed to guarantee reliable delivery Remove do/while loop from passive_connection and use safer iteration over the callbacks. Change how passive_connection and session acking can be recognized and completed based on the receipt of any packet. Decrease nak delay for SharedTransport multicast test/
,,0.2115,OpenDDS,Change Multicast transport: Prevent out of order messages for reliable sessions Allow for naking and ack_nacking the beginning of a sequence to make sure no prior messages were missed to guarantee reliable delivery Remove do/while loop from passive_connection and use safer iteration over the callbacks. Change how passive_connection and session acking can be recognized and completed based on the receipt of any packet. Decrease nak delay for SharedTransport multicast test/
,,0.0686,OpenDDS,"log errno, rather than message/"
,,0.2146,OpenDDS,"Send acknack when reader is going away The following sequence was observed in the StaticDiscovery test: Writer Reader Send last sample ... Process last sample ... Terminate ... Wait for acks ... Timeout The goal is to avoid the timeout. There are three options: 1. Decrease the WaitForAck timeout. 2. Add a delay to the reader so that it will receive a heartbeat from the writer and send an acknack. 3. Have the reader send an acknack before it goes away. If the writer receives it then it will not timeout. This commit implements option 3. The StaticDiscoveryTest was modified to set the history depth when available./Remove use of reverse lock and use individual release/acquire calls so that if the transport client it shut down while the lock is released, upon return from connect_datalink (should fail) the lock will not be automatically accessed. If datalink fails to connect in associate, return false./Additional checking for shutting down conditions to halt a late joining association./"
,,0.2335,OpenDDS,Send acknack when reader is going away The following sequence was observed in the StaticDiscovery test: Writer Reader Send last sample ... Process last sample ... Terminate ... Wait for acks ... Timeout The goal is to avoid the timeout. There are three options: 1. Decrease the WaitForAck timeout. 2. Add a delay to the reader so that it will receive a heartbeat from the writer and send an acknack. 3. Have the reader send an acknack before it goes away. If the writer receives it then it will not timeout. This commit implements option 3. The StaticDiscoveryTest was modified to set the history depth when available./
,,0.073,OpenDDS,Additional GUID logging for static discovery/
,,0.0681,OpenDDS,One more fix to DataLink ref counting when interacting with Reactor/
,,0.0681,OpenDDS,Fixed reference counting bugs/
,,0.1684,OpenDDS,"Updated use of ace/Auto_ptr.h/Release buffers for resent samples upon callback to WDC/Updated handling of QoS in WriteDataContainer: RESOURCE_LIMITS.max_samples_per_instance controls total samples that can be stored per instance, independent of HISTORY HISTORY.depth controls number of samples (per instance) that will be made available to late-joining readers if DURABILITY is enabled KEEP_ALL history uses max_samples_per_instance as its depth WriteDataContainer is more eager to remove samples that are no longer needed WriteDataContainer will not remove samples that are required to implement DURABILITY, hence if RELIABILITY is enabled this can block a write() just like other ""no resource available"" scenarios/"
,,0.0887,OpenDDS,DataLink::notify_connection_deleted needs to access the send/recv listener maps with the correct lock. Required changing TransportSendListener to use a similar refcount mechanism to TransportReceiveListener./
,,0.6459999999999999,OpenDDS,More versioned namespace macros * dds/DCPS/AssociationData.h: * dds/DCPS/AstNodeWrapper.h: * dds/DCPS/BuiltInTopicUtils.h: * dds/DCPS/CoherentChangeControl.h: * dds/DCPS/Comparator_T.h: * dds/DCPS/ConditionImpl.h: * dds/DCPS/ConfigUtils.h: * dds/DCPS/ContentFilteredTopicImpl.h: * dds/DCPS/DCPS_Utils.h: * dds/DCPS/DataCollector_T.cpp: * dds/DCPS/DataCollector_T.h: * dds/DCPS/DataCollector_T.inl: * dds/DCPS/DataDurabilityCache.h: * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl_T.h: * dds/DCPS/DataSampleElement.h: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl_T.h: * dds/DCPS/DiscoveryBase.h: * dds/DCPS/DisjointSequence.h: * dds/DCPS/DurabilityArray.h: * dds/DCPS/DurabilityQueue.h: * dds/DCPS/Dynamic_Cached_Allocator_With_Overflow_T.h: * dds/DCPS/EntityImpl.h: * dds/DCPS/FilterEvaluator.h: * dds/DCPS/FilterExpressionGrammar.h: * dds/DCPS/GroupRakeData.h: * dds/DCPS/GuidBuilder.h: * dds/DCPS/GuidConverter.h: * dds/DCPS/InstanceState.h: * dds/DCPS/MessageTracker.h: * dds/DCPS/MonitorFactory.h: * dds/DCPS/PoolAllocator.h: * dds/DCPS/Qos_Helper.inl: * dds/DCPS/ReactorInterceptor.h: * dds/DCPS/ReceivedDataElementList.h: * dds/DCPS/ReceivedDataStrategy.h: * dds/DCPS/Replayer.h: * dds/DCPS/Service_Participant.h: * dds/DCPS/Stats_T.h: * dds/DCPS/SubscriptionInstance.h: * dds/DCPS/TopicDescriptionImpl.h: * dds/DCPS/TopicExpressionGrammar.h: * dds/DCPS/TopicImpl.h: * dds/DCPS/WriterInfo.h: * dds/DCPS/transport/framework/BasicQueueLinkAllocator_T.h: * dds/DCPS/transport/framework/BasicQueueLinkChunk_T.h: * dds/DCPS/transport/framework/BasicQueueLinkPool_T.h: * dds/DCPS/transport/framework/BasicQueueLink_T.h: * dds/DCPS/transport/framework/BasicQueueVisitor_T.h: * dds/DCPS/transport/framework/BasicQueue_T.h: * dds/DCPS/transport/framework/BuildChainVisitor.h: * dds/DCPS/transport/framework/CopyChainVisitor.h: * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLinkCleanupTask.h: * dds/DCPS/transport/framework/DataLinkSet.h: * dds/DCPS/transport/framework/DataLinkSet_rch.h: * dds/DCPS/transport/framework/DataLinkWatchdog_T.h: * dds/DCPS/transport/framework/DataLink_rch.h: * dds/DCPS/transport/framework/DirectPriorityMapper.h: * dds/DCPS/transport/framework/NetworkAddress.h: * dds/DCPS/transport/framework/NullSynch.h: * dds/DCPS/transport/framework/NullSynchStrategy.h: * dds/DCPS/transport/framework/PacketRemoveVisitor.h: * dds/DCPS/transport/framework/PerConnectionSynch.h: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.h: * dds/DCPS/transport/framework/PoolSynch.h: * dds/DCPS/transport/framework/PoolSynchStrategy.h: * dds/DCPS/transport/framework/PriorityKey.h: * dds/DCPS/transport/framework/PriorityMapper.h: * dds/DCPS/transport/framework/QueueRemoveVisitor.h: * dds/DCPS/transport/framework/QueueTaskBase_T.h: * dds/DCPS/transport/framework/ReactorSynch.h: * dds/DCPS/transport/framework/ReactorSynchStrategy.h: * dds/DCPS/transport/framework/ReceiveListenerSet.h: * dds/DCPS/transport/framework/ReceiveListenerSetMap.h: * dds/DCPS/transport/framework/ReceiveListenerSet_rch.h: * dds/DCPS/transport/framework/ReceivedDataSample.h: * dds/DCPS/transport/framework/RemoveAllVisitor.h: * dds/DCPS/transport/framework/ScheduleOutputHandler.h: * dds/DCPS/transport/framework/SendResponseListener.h: * dds/DCPS/transport/framework/ThreadPerConRemoveVisitor.h: * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.h: * dds/DCPS/transport/framework/ThreadSynch.h: * dds/DCPS/transport/framework/ThreadSynchResource.h: * dds/DCPS/transport/framework/ThreadSynchStrategy.h: * dds/DCPS/transport/framework/ThreadSynchStrategy_rch.h: * dds/DCPS/transport/framework/ThreadSynchWorker.h: * dds/DCPS/transport/framework/TransportClient.cpp: * dds/DCPS/transport/framework/TransportClient.h: * dds/DCPS/transport/framework/TransportConfig.h: * dds/DCPS/transport/framework/TransportConfig_rch.h: * dds/DCPS/transport/framework/TransportControlElement.h: * dds/DCPS/transport/framework/TransportCustomizedElement.h: * dds/DCPS/transport/framework/TransportDebug.h: * dds/DCPS/transport/framework/TransportExceptions.h: * dds/DCPS/transport/framework/TransportHeader.h: * dds/DCPS/transport/framework/TransportImpl.h: * dds/DCPS/transport/framework/TransportInst.h: * dds/DCPS/transport/framework/TransportQueueElement.h: * dds/DCPS/transport/framework/TransportReactorTask.h: * dds/DCPS/transport/framework/TransportReactorTask_rch.h: * dds/DCPS/transport/framework/TransportReassembly.h: * dds/DCPS/transport/framework/TransportReceiveListener.h: * dds/DCPS/transport/framework/TransportReceiveStrategy_T.h: * dds/DCPS/transport/framework/TransportReceiveStrategy_rch.h: * dds/DCPS/transport/framework/TransportRegistry.h: * dds/DCPS/transport/framework/TransportReplacedElement.h: * dds/DCPS/transport/framework/TransportRetainedElement.h: * dds/DCPS/transport/framework/TransportSendBuffer.h: * dds/DCPS/transport/framework/TransportSendControlElement.h: * dds/DCPS/transport/framework/TransportSendElement.h: * dds/DCPS/transport/framework/TransportSendListener.h: * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy_rch.h: * dds/DCPS/transport/framework/TransportStrategy.h: * dds/DCPS/transport/framework/TransportStrategy_rch.h: * dds/DCPS/transport/framework/TransportType.h: * dds/DCPS/transport/framework/TransportType_rch.h:/
,,0.1823,OpenDDS,"Allow durable writer to GAP all the way up to the first durable sample it has available when sending durability gaps. Speeds up newly joining durable readers ability to catch up with current samples, especially when associating with a rapidly publishing writer./"
,,0.1339,OpenDDS,More versioned namespace macros * dds/DCPS/BitPubListenerImpl.cpp: * dds/DCPS/BitPubListenerImpl.h: * dds/DCPS/DataReaderCallbacks.h: * dds/DCPS/DataSampleHeader.h: * dds/DCPS/DataWriterCallbacks.h: * dds/DCPS/Discovery.h: * dds/DCPS/DiscoveryListener.h: * dds/DCPS/DomainParticipantFactoryImpl.h: * dds/DCPS/DomainParticipantImpl.h: * dds/DCPS/GuidUtils.h: * dds/DCPS/Qos_Helper.h: * dds/DCPS/RawDataSample.cpp: * dds/DCPS/RawDataSample.h: * dds/DCPS/Recorder.h: * dds/DCPS/SafetyProfilePool.h: * dds/DCPS/ZeroCopyAllocator_T.cpp: * dds/DCPS/ZeroCopyAllocator_T.h: * dds/DCPS/ZeroCopyAllocator_T.inl: * dds/DCPS/ZeroCopyInfoSeq_T.h: * dds/DCPS/ZeroCopySeq_T.h:/
,,0.5587,OpenDDS,Versioned namespace changes * dds/DCPS/ConditionImpl.h: * dds/DCPS/DataReaderImpl_T.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/DataWriterImpl_T.h: * dds/DCPS/DomainParticipantImpl.cpp: * dds/DCPS/Marked_Default_Qos.h: * dds/DCPS/RecorderImpl.cpp: * dds/DCPS/RecorderImpl.h: * dds/DCPS/ReplayerImpl.cpp: * dds/DCPS/ReplayerImpl.h: * dds/DCPS/TypeSupportImpl_T.h: * dds/DCPS/WaitSet.h:/Versioned namespace support * dds/DCPS/BuiltInTopicUtils.cpp: * dds/DCPS/CoherentChangeControl.cpp: * dds/DCPS/CoherentChangeControl.inl: * dds/DCPS/ConditionImpl.cpp: * dds/DCPS/ConfigUtils.cpp: * dds/DCPS/ContentFilteredTopicImpl.cpp: * dds/DCPS/DCPS_Utils.cpp: * dds/DCPS/DataDurabilityCache.cpp: * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataReaderImpl.inl: * dds/DCPS/DataReaderImpl_T.h: * dds/DCPS/DataSampleElement.cpp: * dds/DCPS/DataSampleElement.inl: * dds/DCPS/DataSampleHeader.cpp: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/Discovery.cpp: * dds/DCPS/DisjointSequence.cpp: * dds/DCPS/DisjointSequence.inl: * dds/DCPS/DomainParticipantFactoryImpl.cpp: * dds/DCPS/DomainParticipantImpl.cpp: * dds/DCPS/EntityImpl.cpp: * dds/DCPS/FileSystemStorage.cpp: * dds/DCPS/FileSystemStorage.h: * dds/DCPS/FilterEvaluator.cpp: * dds/DCPS/GroupRakeData.cpp: * dds/DCPS/GuardCondition.cpp: * dds/DCPS/GuardCondition.h: * dds/DCPS/GuidBuilder.cpp: * dds/DCPS/GuidBuilder.inl: * dds/DCPS/GuidConverter.cpp: * dds/DCPS/GuidUtils.cpp: * dds/DCPS/InstanceDataSampleList.cpp: * dds/DCPS/InstanceDataSampleList.h: * dds/DCPS/InstanceDataSampleList.inl: * dds/DCPS/InstanceHandle.cpp: * dds/DCPS/InstanceHandle.h: * dds/DCPS/InstanceState.cpp: * dds/DCPS/InstanceState.inl: * dds/DCPS/Marked_Default_Qos.cpp: * dds/DCPS/MemoryPool.cpp: * dds/DCPS/MessageTracker.cpp: * dds/DCPS/MonitorFactory.cpp: * dds/DCPS/MultiTopicDataReaderBase.cpp: * dds/DCPS/MultiTopicDataReaderBase.h: * dds/DCPS/MultiTopicDataReader_T.cpp: * dds/DCPS/MultiTopicDataReader_T.h: * dds/DCPS/MultiTopicImpl.cpp: * dds/DCPS/MultiTopicImpl.h: * dds/DCPS/OfferedDeadlineWatchdog.cpp: * dds/DCPS/OwnershipManager.cpp: * dds/DCPS/OwnershipManager.h: * dds/DCPS/PublicationInstance.h: * dds/DCPS/PublisherImpl.cpp: * dds/DCPS/PublisherImpl.h: * dds/DCPS/QueryConditionImpl.cpp: * dds/DCPS/QueryConditionImpl.h: * dds/DCPS/RakeData.h: * dds/DCPS/RakeResults_T.cpp: * dds/DCPS/RakeResults_T.h: * dds/DCPS/ReadConditionImpl.cpp: * dds/DCPS/ReadConditionImpl.h: * dds/DCPS/Registered_Data_Types.cpp: * dds/DCPS/Registered_Data_Types.h: * dds/DCPS/RemoveAssociationSweeper.h: * dds/DCPS/SafetyProfileStreams.cpp: * dds/DCPS/SafetyProfileStreams.h: * dds/DCPS/SendStateDataSampleList.h: * dds/DCPS/Service_Participant.h: * dds/DCPS/StatusConditionImpl.cpp: * dds/DCPS/StatusConditionImpl.h: * dds/DCPS/SubscriberImpl.cpp: * dds/DCPS/SubscriberImpl.h: * dds/DCPS/Transient_Kludge.h: * dds/DCPS/TypeSupportImpl.h: * dds/DCPS/TypeSupportImpl_T.h: * dds/DCPS/Util.h: * dds/DCPS/V8TypeConverter.h: * dds/DCPS/WaitSet.h: * dds/DCPS/WriteDataContainer.h: * dds/DCPS/WriterDataSampleList.h: * dds/DCPS/debug.cpp: * dds/DdsDcpsInfrastructure.idl: * dds/DdsDcpsTopic.idl: * dds/idl/keys_generator.cpp: * dds/idl/ts_generator.cpp:/
,,0.6452,OpenDDS,More versioned namespace macros * dds/DCPS/AssociationData.h: * dds/DCPS/AstNodeWrapper.h: * dds/DCPS/BuiltInTopicUtils.h: * dds/DCPS/CoherentChangeControl.h: * dds/DCPS/Comparator_T.h: * dds/DCPS/ConditionImpl.h: * dds/DCPS/ConfigUtils.h: * dds/DCPS/ContentFilteredTopicImpl.h: * dds/DCPS/DCPS_Utils.h: * dds/DCPS/DataCollector_T.cpp: * dds/DCPS/DataCollector_T.h: * dds/DCPS/DataCollector_T.inl: * dds/DCPS/DataDurabilityCache.h: * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl_T.h: * dds/DCPS/DataSampleElement.h: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl_T.h: * dds/DCPS/DiscoveryBase.h: * dds/DCPS/DisjointSequence.h: * dds/DCPS/DurabilityArray.h: * dds/DCPS/DurabilityQueue.h: * dds/DCPS/Dynamic_Cached_Allocator_With_Overflow_T.h: * dds/DCPS/EntityImpl.h: * dds/DCPS/FilterEvaluator.h: * dds/DCPS/FilterExpressionGrammar.h: * dds/DCPS/GroupRakeData.h: * dds/DCPS/GuidBuilder.h: * dds/DCPS/GuidConverter.h: * dds/DCPS/InstanceState.h: * dds/DCPS/MessageTracker.h: * dds/DCPS/MonitorFactory.h: * dds/DCPS/PoolAllocator.h: * dds/DCPS/Qos_Helper.inl: * dds/DCPS/ReactorInterceptor.h: * dds/DCPS/ReceivedDataElementList.h: * dds/DCPS/ReceivedDataStrategy.h: * dds/DCPS/Replayer.h: * dds/DCPS/Service_Participant.h: * dds/DCPS/Stats_T.h: * dds/DCPS/SubscriptionInstance.h: * dds/DCPS/TopicDescriptionImpl.h: * dds/DCPS/TopicExpressionGrammar.h: * dds/DCPS/TopicImpl.h: * dds/DCPS/WriterInfo.h: * dds/DCPS/transport/framework/BasicQueueLinkAllocator_T.h: * dds/DCPS/transport/framework/BasicQueueLinkChunk_T.h: * dds/DCPS/transport/framework/BasicQueueLinkPool_T.h: * dds/DCPS/transport/framework/BasicQueueLink_T.h: * dds/DCPS/transport/framework/BasicQueueVisitor_T.h: * dds/DCPS/transport/framework/BasicQueue_T.h: * dds/DCPS/transport/framework/BuildChainVisitor.h: * dds/DCPS/transport/framework/CopyChainVisitor.h: * dds/DCPS/transport/framework/DataLink.h: * dds/DCPS/transport/framework/DataLinkCleanupTask.h: * dds/DCPS/transport/framework/DataLinkSet.h: * dds/DCPS/transport/framework/DataLinkSet_rch.h: * dds/DCPS/transport/framework/DataLinkWatchdog_T.h: * dds/DCPS/transport/framework/DataLink_rch.h: * dds/DCPS/transport/framework/DirectPriorityMapper.h: * dds/DCPS/transport/framework/NetworkAddress.h: * dds/DCPS/transport/framework/NullSynch.h: * dds/DCPS/transport/framework/NullSynchStrategy.h: * dds/DCPS/transport/framework/PacketRemoveVisitor.h: * dds/DCPS/transport/framework/PerConnectionSynch.h: * dds/DCPS/transport/framework/PerConnectionSynchStrategy.h: * dds/DCPS/transport/framework/PoolSynch.h: * dds/DCPS/transport/framework/PoolSynchStrategy.h: * dds/DCPS/transport/framework/PriorityKey.h: * dds/DCPS/transport/framework/PriorityMapper.h: * dds/DCPS/transport/framework/QueueRemoveVisitor.h: * dds/DCPS/transport/framework/QueueTaskBase_T.h: * dds/DCPS/transport/framework/ReactorSynch.h: * dds/DCPS/transport/framework/ReactorSynchStrategy.h: * dds/DCPS/transport/framework/ReceiveListenerSet.h: * dds/DCPS/transport/framework/ReceiveListenerSetMap.h: * dds/DCPS/transport/framework/ReceiveListenerSet_rch.h: * dds/DCPS/transport/framework/ReceivedDataSample.h: * dds/DCPS/transport/framework/RemoveAllVisitor.h: * dds/DCPS/transport/framework/ScheduleOutputHandler.h: * dds/DCPS/transport/framework/SendResponseListener.h: * dds/DCPS/transport/framework/ThreadPerConRemoveVisitor.h: * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.h: * dds/DCPS/transport/framework/ThreadSynch.h: * dds/DCPS/transport/framework/ThreadSynchResource.h: * dds/DCPS/transport/framework/ThreadSynchStrategy.h: * dds/DCPS/transport/framework/ThreadSynchStrategy_rch.h: * dds/DCPS/transport/framework/ThreadSynchWorker.h: * dds/DCPS/transport/framework/TransportClient.cpp: * dds/DCPS/transport/framework/TransportClient.h: * dds/DCPS/transport/framework/TransportConfig.h: * dds/DCPS/transport/framework/TransportConfig_rch.h: * dds/DCPS/transport/framework/TransportControlElement.h: * dds/DCPS/transport/framework/TransportCustomizedElement.h: * dds/DCPS/transport/framework/TransportDebug.h: * dds/DCPS/transport/framework/TransportExceptions.h: * dds/DCPS/transport/framework/TransportHeader.h: * dds/DCPS/transport/framework/TransportImpl.h: * dds/DCPS/transport/framework/TransportInst.h: * dds/DCPS/transport/framework/TransportQueueElement.h: * dds/DCPS/transport/framework/TransportReactorTask.h: * dds/DCPS/transport/framework/TransportReactorTask_rch.h: * dds/DCPS/transport/framework/TransportReassembly.h: * dds/DCPS/transport/framework/TransportReceiveListener.h: * dds/DCPS/transport/framework/TransportReceiveStrategy_T.h: * dds/DCPS/transport/framework/TransportReceiveStrategy_rch.h: * dds/DCPS/transport/framework/TransportRegistry.h: * dds/DCPS/transport/framework/TransportReplacedElement.h: * dds/DCPS/transport/framework/TransportRetainedElement.h: * dds/DCPS/transport/framework/TransportSendBuffer.h: * dds/DCPS/transport/framework/TransportSendControlElement.h: * dds/DCPS/transport/framework/TransportSendElement.h: * dds/DCPS/transport/framework/TransportSendListener.h: * dds/DCPS/transport/framework/TransportSendStrategy.h: * dds/DCPS/transport/framework/TransportSendStrategy_rch.h: * dds/DCPS/transport/framework/TransportStrategy.h: * dds/DCPS/transport/framework/TransportStrategy_rch.h: * dds/DCPS/transport/framework/TransportType.h: * dds/DCPS/transport/framework/TransportType_rch.h:/
,,0.0702,OpenDDS,Versioned namespace changes * dds/DCPS/ConditionImpl.h: * dds/DCPS/DataReaderImpl_T.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/DataWriterImpl_T.h: * dds/DCPS/DomainParticipantImpl.cpp: * dds/DCPS/Marked_Default_Qos.h: * dds/DCPS/RecorderImpl.cpp: * dds/DCPS/RecorderImpl.h: * dds/DCPS/ReplayerImpl.cpp: * dds/DCPS/ReplayerImpl.h: * dds/DCPS/TypeSupportImpl_T.h: * dds/DCPS/WaitSet.h:/
,,0.0669,OpenDDS,Initial wireshark fixes for debugging (not final)/
,,0.0844,OpenDDS,Added make_rch() template functions/
,,0.0697,OpenDDS,Simplified key generated code * dds/idl/keys_generator.cpp:/
,,0.1194,OpenDDS,Use global scoping to fix namespace compiler test * dds/idl/ts_generator.cpp:/Addressed review comments * dds/DCPS/RTPS/BaseMessageUtils.h: * dds/idl/marshal_generator.cpp: * dds/idl/ts_generator.cpp:/
,,0.1141,OpenDDS,Reduced namespace scoping * dds/DCPS/DiscoveryBase.h: * dds/DCPS/RTPS/Spdp.cpp: * dds/DCPS/RTPS/Spdp.h:/
,,0.1528,OpenDDS,"Split out filter_instance into ownership_filter_instance and time_based_filter_instance to allow DataReaderImpl_T::store_instance_data to identify when time based filtering causes samples to be filtered for a reliable data reader. Split out accept_sample_processing from data_received, to allow the delayed samples to have the same processing done on the timer callback. Broke out qos_change from set_qos to allow the qos change processing to be handled also in DataReaderImpl_T to allow the time based filter timers to be cancelled or reset for time based filter minimum separation changes. Also made cleanup virtual to allow DataReaderImpl_T to perform time based filter cleanup./Introduce a new Loaner interface which is now used as part of the zero copy sequences so that they dont pull in the full reader implementation, see issue * dds/DCPS/Loaner.h: Added. * dds/DCPS/DataReaderImpl.h: * dds/DCPS/MultiTopicDataReaderBase.h: * dds/DCPS/WriterInfo.h: * dds/DCPS/ZeroCopySeq_T.h: * dds/DCPS/ZeroCopySeq_T.inl:/"
,,0.1252,OpenDDS,Added make_rch() template functions/move send strategy and receive strategies into the constructors of DataLink/
,,0.0844,OpenDDS,Rename shared_from_this() to rchandle_from()/Added make_rch() template functions/
,,0.1083,OpenDDS,Refactor more manual reference counting code/Added make_rch() template functions/Change RcHandle constructor to take inc_count() and keep_count() instead of bool as second parameter/Fix DataWriterImpl accessed after deletion bug/
,,0.0865,OpenDDS,Added make_rch() template functions/
,,0.066,OpenDDS,Remove manual reference counting from TransportSendStrategy/
,,0.1086,OpenDDS,Rename shared_from_this() to rchandle_from()/Added make_rch() template functions/Refactor TransportSendListener and TransportReceiveListener This commit refactor all the usages of TransportSendListener and TransportReceiveListener to remove manual reference counting on those objects. Conflicts: dds/DCPS/transport/framework/ReceiveListenerSetMap.inl/Fixed compile problem with sun cc/
,,0.0951,OpenDDS,Refactor TransportSendListener and TransportReceiveListener This commit refactor all the usages of TransportSendListener and TransportReceiveListener to remove manual reference counting on those objects. Conflicts: dds/DCPS/transport/framework/ReceiveListenerSetMap.inl/
,,0.0681,OpenDDS,Remove unnecessary reference bumping of TransportInst objects/
,,0.066,OpenDDS,Remove manual reference counting from TransportSendStrategy/
,,0.1311,OpenDDS,Refactor more manual reference counting code/Refactor RcEventHandler with RcHandle RcEventHandler becomes ACE_Event_Handler with reference counting strategy enabled and provides _add_ref() _remove_ref() to be used by RcHandle./Use ACE_Event_Handler reference counting policy for ReactorInterceptor to manage its object lifetime./
,,0.0965,OpenDDS,move send strategy and receive strategies into the constructors of DataLink/
,,0.1121,OpenDDS,Refactor more manual reference counting code/Added make_rch() template functions/Use ACE_Event_Handler reference counting policy for ReactorInterceptor to manage its object lifetime./
,,0.2929,OpenDDS,Replace some manual _add_ref() _remove_ref() with RcHandle objects. Conflicts: dds/DCPS/RemoveAssociationSweeper.h dds/DCPS/transport/multicast/MulticastDataLink.cpp dds/DCPS/transport/multicast/MulticastDataLink.h dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp dds/DCPS/transport/shmem/ShmemDataLink.h dds/DCPS/transport/shmem/ShmemTransport.cpp dds/DCPS/transport/tcp/TcpConnection.cpp dds/DCPS/transport/tcp/TcpDataLink.h dds/DCPS/transport/tcp/TcpReceiveStrategy.cpp dds/DCPS/transport/tcp/TcpSendStrategy.cpp dds/DCPS/transport/tcp/TcpTransport.cpp dds/DCPS/transport/tcp/TcpTransport.h dds/DCPS/transport/udp/UdpTransport.cpp/
,,0.066,OpenDDS,Remove unnecessary reference bumping of TransportInst objects/
,,0.2995,OpenDDS,Replace some manual _add_ref() _remove_ref() with RcHandle objects. Conflicts: dds/DCPS/RemoveAssociationSweeper.h dds/DCPS/transport/multicast/MulticastDataLink.cpp dds/DCPS/transport/multicast/MulticastDataLink.h dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp dds/DCPS/transport/shmem/ShmemDataLink.h dds/DCPS/transport/shmem/ShmemTransport.cpp dds/DCPS/transport/tcp/TcpConnection.cpp dds/DCPS/transport/tcp/TcpDataLink.h dds/DCPS/transport/tcp/TcpReceiveStrategy.cpp dds/DCPS/transport/tcp/TcpSendStrategy.cpp dds/DCPS/transport/tcp/TcpTransport.cpp dds/DCPS/transport/tcp/TcpTransport.h dds/DCPS/transport/udp/UdpTransport.cpp/Change RcHandle constructor to take inc_count() and keep_count() instead of bool as second parameter/
,,0.2944,OpenDDS,Replace some manual _add_ref() _remove_ref() with RcHandle objects. Conflicts: dds/DCPS/RemoveAssociationSweeper.h dds/DCPS/transport/multicast/MulticastDataLink.cpp dds/DCPS/transport/multicast/MulticastDataLink.h dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp dds/DCPS/transport/shmem/ShmemDataLink.h dds/DCPS/transport/shmem/ShmemTransport.cpp dds/DCPS/transport/tcp/TcpConnection.cpp dds/DCPS/transport/tcp/TcpDataLink.h dds/DCPS/transport/tcp/TcpReceiveStrategy.cpp dds/DCPS/transport/tcp/TcpSendStrategy.cpp dds/DCPS/transport/tcp/TcpTransport.cpp dds/DCPS/transport/tcp/TcpTransport.h dds/DCPS/transport/udp/UdpTransport.cpp/
,,0.2995,OpenDDS,Replace some manual _add_ref() _remove_ref() with RcHandle objects. Conflicts: dds/DCPS/RemoveAssociationSweeper.h dds/DCPS/transport/multicast/MulticastDataLink.cpp dds/DCPS/transport/multicast/MulticastDataLink.h dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp dds/DCPS/transport/shmem/ShmemDataLink.h dds/DCPS/transport/shmem/ShmemTransport.cpp dds/DCPS/transport/tcp/TcpConnection.cpp dds/DCPS/transport/tcp/TcpDataLink.h dds/DCPS/transport/tcp/TcpReceiveStrategy.cpp dds/DCPS/transport/tcp/TcpSendStrategy.cpp dds/DCPS/transport/tcp/TcpTransport.cpp dds/DCPS/transport/tcp/TcpTransport.h dds/DCPS/transport/udp/UdpTransport.cpp/Change RcHandle constructor to take inc_count() and keep_count() instead of bool as second parameter/
,,0.3045,OpenDDS,Rename shared_from_this() to rchandle_from()/Refactor more manual reference counting code/Replace some manual _add_ref() _remove_ref() with RcHandle objects. Conflicts: dds/DCPS/RemoveAssociationSweeper.h dds/DCPS/transport/multicast/MulticastDataLink.cpp dds/DCPS/transport/multicast/MulticastDataLink.h dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp dds/DCPS/transport/shmem/ShmemDataLink.h dds/DCPS/transport/shmem/ShmemTransport.cpp dds/DCPS/transport/tcp/TcpConnection.cpp dds/DCPS/transport/tcp/TcpDataLink.h dds/DCPS/transport/tcp/TcpReceiveStrategy.cpp dds/DCPS/transport/tcp/TcpSendStrategy.cpp dds/DCPS/transport/tcp/TcpTransport.cpp dds/DCPS/transport/tcp/TcpTransport.h dds/DCPS/transport/udp/UdpTransport.cpp/Change RcHandle constructor to take inc_count() and keep_count() instead of bool as second parameter/
,,0.0833,OpenDDS,Stop ShmemTransport read task before shutting down the transport/Remove unnecessary reference bumping of TransportInst objects/Avoid implicit conversion from pointer to RcHandle/
,,0.0865,OpenDDS,Added make_rch() template functions/
,,0.1234,OpenDDS,Merge branch master into RcHandle Conflicts: dds/DCPS/DataReaderImpl.cpp dds/DCPS/DataReaderImpl.h dds/DCPS/DataReaderImpl_T.h/Fixed errors and added detaching FilterDelayedHandler from DataReaderImpl_T./Changes to conform to DDS code style guide and review suggestions./Added typename to fix gcc build errors./Added FilterDelayedHandler to process samples that are filtered by the Time Based Filter QOS and retained to be possibly delivered later for Reliable Data Readers./Some small indentation changes * FACE/types.hpp: * dds/DCPS/DataReaderImpl_T.h:/
,,0.2029,OpenDDS,"Merge branch master into RcHandle Conflicts: dds/DCPS/DataReaderImpl.cpp dds/DCPS/DataReaderImpl.h dds/DCPS/DataReaderImpl_T.h/Changes to conform to DDS code style guide and review suggestions./Split out filter_instance into ownership_filter_instance and time_based_filter_instance to allow DataReaderImpl_T::store_instance_data to identify when time based filtering causes samples to be filtered for a reliable data reader. Split out accept_sample_processing from data_received, to allow the delayed samples to have the same processing done on the timer callback. Broke out qos_change from set_qos to allow the qos change processing to be handled also in DataReaderImpl_T to allow the time based filter timers to be cancelled or reset for time based filter minimum separation changes. Also made cleanup virtual to allow DataReaderImpl_T to perform time based filter cleanup./Added make_rch() template functions/Refactor RcEventHandler with RcHandle RcEventHandler becomes ACE_Event_Handler with reference counting strategy enabled and provides _add_ref() _remove_ref() to be used by RcHandle./Fix SubscriptionInstance/PublicationInstance being accessed by watchdogs after deletion/Use ACE_Event_Handler reference counting policy for ReactorInterceptor to manage its object lifetime./"
,,0.0935,OpenDDS,Added make_rch() template functions/Allow configurable override of which interfaces MAC addr is used for RTPS GUID generator (Linux only for now)./Fixed warning by assigning a default value * dds/DCPS/RTPS/RtpsDiscovery.cpp:/
,,0.0865,OpenDDS,Added make_rch() template functions/
,,0.1163,OpenDDS,Addressed review comments * dds/DCPS/RTPS/BaseMessageUtils.h: * dds/idl/marshal_generator.cpp: * dds/idl/ts_generator.cpp:/
,,0.0945,OpenDDS,ACE_OS::NULL_thread is the portable way to init ACE_thread_t./Addressed review comments * dds/DCPS/BitPubListenerImpl.h: * dds/DCPS/Qos_Helper.inl: * dds/DCPS/Service_Participant.cpp: * dds/DCPS/Util.h: * dds/DCPS/WaitSet.h: * dds/DdsDcpsInfrastructure.idl:/
,,0.1165,OpenDDS,Fix SubscriptionInstance/PublicationInstance being accessed by watchdogs after deletion/Introduce a new MarshalTraits which contains gen_is_bounded_size and gen_is_bounded_key_size which now can be used without the need to pass an instance of the type. This saves the construction of some temporaries to just determine whether the type or key is bound. Similar approach can probably be used for the max marshaled size but that needs some more structural rework. * dds/DCPS/DataWriterImpl_T.h: * dds/DCPS/RTPS/BaseMessageUtils.h: * dds/DCPS/TypeSupportImpl.h: * dds/idl/marshal_generator.cpp: * dds/idl/ts_generator.cpp:/
,,0.0818,OpenDDS,Added unregister_type method to OpenDDS::DCPS::Data_Types_Register to allow removal of types prior to singleton destruction./
,,0.098,OpenDDS,Make use of %T# to log an ACE_Time_Value * dds/DCPS/MessageTracker.cpp: * dds/DCPS/MessageTracker.h:/
,,0.0984,OpenDDS,Fix deadlock issue in RtpsUdpDataLink/rtps_udp transport: updated starting sequence number for non-durable reader/
,,0.0833,OpenDDS,Fix issues with the interaction with DataWriterConatiner/Fix TCP wait_for_acknowledgements() bug/
,,0.1139,OpenDDS,Added logic to clean pending REQUEST_ACK messages on premature transport disconnection./
,,0.0895,OpenDDS,Make use of %#T to log a time * dds/DCPS/MessageTracker.cpp: * dds/DCPS/WriteDataContainer.cpp:/
,,0.0857,OpenDDS,"Check whether we have an instance in a few places, fixes the crashing of the samplelost test * dds/DCPS/DataReaderImpl.cpp:/Revert another line * dds/DCPS/DataReaderImpl.cpp:/"
,,0.22,OpenDDS,"Logging fixes * dds/DCPS/DataWriterImpl_T.h:/Use %C for logging ascii strings, %s is for ACE_TCHAR * dds/DCPS/DataWriterImpl_T.h: * dds/DCPS/DomainParticipantFactoryImpl.cpp: * dds/DCPS/MessageTracker.cpp: * dds/DCPS/StaticDiscovery.cpp: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/tcp/TcpDataLink.cpp: * dds/FACE/config/QosSettings.cpp: * dds/monitor/MonitorFactoryImpl.cpp:/Fix tools/modeling/tests/Arrays serialization error/"
,,0.2197,OpenDDS,"Use %C for logging ascii strings, %s is for ACE_TCHAR * dds/DCPS/DataWriterImpl_T.h: * dds/DCPS/DomainParticipantFactoryImpl.cpp: * dds/DCPS/MessageTracker.cpp: * dds/DCPS/StaticDiscovery.cpp: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/tcp/TcpDataLink.cpp: * dds/FACE/config/QosSettings.cpp: * dds/monitor/MonitorFactoryImpl.cpp:/"
,,0.2197,OpenDDS,"Use %C for logging ascii strings, %s is for ACE_TCHAR * dds/DCPS/DataWriterImpl_T.h: * dds/DCPS/DomainParticipantFactoryImpl.cpp: * dds/DCPS/MessageTracker.cpp: * dds/DCPS/StaticDiscovery.cpp: * dds/DCPS/transport/framework/DataLink.cpp: * dds/DCPS/transport/tcp/TcpDataLink.cpp: * dds/FACE/config/QosSettings.cpp: * dds/monitor/MonitorFactoryImpl.cpp:/"
,,0.0849,OpenDDS,Adding checks after dynamic_cast to address coverity defect reports./
,,0.087,OpenDDS,Adding checks after dynamic_cast to address coverity defect reports./
,,0.1069,OpenDDS,"Guard several generated methods with OPENDDS_NO_MULTI_TOPIC, they are not necessary when the user has disabled multitopics. Extend travis-ci build with a configuration to also build with multi topic disabled * .travis.yml: * dds/DCPS/FilterEvaluator.h: * dds/idl/metaclass_generator.cpp:/"
,,0.4372,OpenDDS,"Use ACE_ERROR together with LM_ERROR, see issue * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/DiscoveryBase.h: * dds/DCPS/MultiTopicDataReaderBase.cpp: * dds/DCPS/RTPS/ParameterListConverter.cpp: * dds/DCPS/RTPS/Sedp.cpp: * dds/DCPS/RTPS/Spdp.cpp: * dds/DCPS/ReactorInterceptor.cpp: * dds/DCPS/RecorderImpl.cpp: * dds/DCPS/ReplayerImpl.cpp: * dds/DCPS/StaticDiscovery.cpp: * dds/DCPS/transport/framework/ReceiveListenerSet.cpp: * dds/DCPS/transport/multicast/MulticastTransport.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp: * dds/DCPS/transport/shmem/ShmemTransport.cpp: * dds/DCPS/transport/tcp/TcpTransport.cpp: * dds/DCPS/transport/udp/UdpTransport.cpp: * dds/FACE/config/QosSettings.cpp: * dds/idl/ts_generator.cpp: * performance-tests/DCPS/MulticastListenerTest/Writer.cpp: * performance-tests/DCPS/SimpleE2ETest/Reader.cpp: * performance-tests/DCPS/SimpleE2ETest/Writer.cpp: * performance-tests/DCPS/TCPListenerTest/Writer.cpp: * performance-tests/DCPS/UDPListenerTest/Writer.cpp: * performance-tests/DCPS/UDPNoKeyTest/Reader.cpp: * performance-tests/DCPS/UDPNoKeyTest/Writer.cpp: * tests/DCPS/Compiler/idl_test1_main/main.cpp: * tests/DCPS/Compiler/idl_test3_main/main.cpp: * tests/DCPS/FooTest5/DataReaderListener.cpp: * tests/DCPS/ManyToMany/publisher.cpp: * tests/DCPS/ManyToMany/subscriber.cpp: * tests/DCPS/NotifyTest/subscriber.cpp: * tests/DCPS/Ownership/DataReaderListener.cpp: * tests/DCPS/Ownership/subscriber.cpp: * tests/DCPS/Presentation/main.cpp: * tests/DCPS/RtpsDiscovery/RtpsDiscoveryTest.cpp: * tests/DCPS/StaticDiscovery/DataReaderListenerImpl.cpp: * tests/FACE/Compiler/idl_test1_main/main.cpp: * tests/FACE/Compiler/idl_test3_main/main.cpp: * tests/FACE/Unit/test_check.h: * tests/transport/rtps/subscriber.cpp: * tests/transport/rtps_reliability/rtps_reliability.cpp:/"
,,0.1837,OpenDDS,"DataReader and DataWriter are local objects so we can just pass this when we need a reference to a reader/writer, no need to store a seperate _var/_ptr for the reader/writer * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl.inl: * dds/DCPS/DataReaderImpl_T.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl_T.h: * dds/DCPS/DiscoveryBase.h: * dds/DCPS/MultiTopicDataReaderBase.cpp: * dds/DCPS/OfferedDeadlineWatchdog.cpp: * dds/DCPS/OfferedDeadlineWatchdog.h: * dds/DCPS/PublisherImpl.cpp: * dds/DCPS/RecorderImpl.cpp: * dds/DCPS/ReplayerImpl.cpp: * dds/DCPS/RequestedDeadlineWatchdog.cpp: * dds/DCPS/RequestedDeadlineWatchdog.h: * dds/DCPS/SubscriberImpl.cpp: * dds/DCPS/SubscriberImpl.h:/"
,,0.0778,OpenDDS,fix problem with multiple transports in configuration file/
,,0.4405,OpenDDS,"Fixed return value for RtpsUdpDataLink::remove_sample in case lock fails/Updated locking for RtpsUdpDataLink::remove_sample/Use ACE_ERROR together with LM_ERROR, see issue * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/DiscoveryBase.h: * dds/DCPS/MultiTopicDataReaderBase.cpp: * dds/DCPS/RTPS/ParameterListConverter.cpp: * dds/DCPS/RTPS/Sedp.cpp: * dds/DCPS/RTPS/Spdp.cpp: * dds/DCPS/ReactorInterceptor.cpp: * dds/DCPS/RecorderImpl.cpp: * dds/DCPS/ReplayerImpl.cpp: * dds/DCPS/StaticDiscovery.cpp: * dds/DCPS/transport/framework/ReceiveListenerSet.cpp: * dds/DCPS/transport/multicast/MulticastTransport.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp: * dds/DCPS/transport/shmem/ShmemTransport.cpp: * dds/DCPS/transport/tcp/TcpTransport.cpp: * dds/DCPS/transport/udp/UdpTransport.cpp: * dds/FACE/config/QosSettings.cpp: * dds/idl/ts_generator.cpp: * performance-tests/DCPS/MulticastListenerTest/Writer.cpp: * performance-tests/DCPS/SimpleE2ETest/Reader.cpp: * performance-tests/DCPS/SimpleE2ETest/Writer.cpp: * performance-tests/DCPS/TCPListenerTest/Writer.cpp: * performance-tests/DCPS/UDPListenerTest/Writer.cpp: * performance-tests/DCPS/UDPNoKeyTest/Reader.cpp: * performance-tests/DCPS/UDPNoKeyTest/Writer.cpp: * tests/DCPS/Compiler/idl_test1_main/main.cpp: * tests/DCPS/Compiler/idl_test3_main/main.cpp: * tests/DCPS/FooTest5/DataReaderListener.cpp: * tests/DCPS/ManyToMany/publisher.cpp: * tests/DCPS/ManyToMany/subscriber.cpp: * tests/DCPS/NotifyTest/subscriber.cpp: * tests/DCPS/Ownership/DataReaderListener.cpp: * tests/DCPS/Ownership/subscriber.cpp: * tests/DCPS/Presentation/main.cpp: * tests/DCPS/RtpsDiscovery/RtpsDiscoveryTest.cpp: * tests/DCPS/StaticDiscovery/DataReaderListenerImpl.cpp: * tests/FACE/Compiler/idl_test1_main/main.cpp: * tests/FACE/Compiler/idl_test3_main/main.cpp: * tests/FACE/Unit/test_check.h: * tests/transport/rtps/subscriber.cpp: * tests/transport/rtps_reliability/rtps_reliability.cpp:/"
,,0.4364,OpenDDS,"Use ACE_ERROR together with LM_ERROR, see issue * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/DiscoveryBase.h: * dds/DCPS/MultiTopicDataReaderBase.cpp: * dds/DCPS/RTPS/ParameterListConverter.cpp: * dds/DCPS/RTPS/Sedp.cpp: * dds/DCPS/RTPS/Spdp.cpp: * dds/DCPS/ReactorInterceptor.cpp: * dds/DCPS/RecorderImpl.cpp: * dds/DCPS/ReplayerImpl.cpp: * dds/DCPS/StaticDiscovery.cpp: * dds/DCPS/transport/framework/ReceiveListenerSet.cpp: * dds/DCPS/transport/multicast/MulticastTransport.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp: * dds/DCPS/transport/shmem/ShmemTransport.cpp: * dds/DCPS/transport/tcp/TcpTransport.cpp: * dds/DCPS/transport/udp/UdpTransport.cpp: * dds/FACE/config/QosSettings.cpp: * dds/idl/ts_generator.cpp: * performance-tests/DCPS/MulticastListenerTest/Writer.cpp: * performance-tests/DCPS/SimpleE2ETest/Reader.cpp: * performance-tests/DCPS/SimpleE2ETest/Writer.cpp: * performance-tests/DCPS/TCPListenerTest/Writer.cpp: * performance-tests/DCPS/UDPListenerTest/Writer.cpp: * performance-tests/DCPS/UDPNoKeyTest/Reader.cpp: * performance-tests/DCPS/UDPNoKeyTest/Writer.cpp: * tests/DCPS/Compiler/idl_test1_main/main.cpp: * tests/DCPS/Compiler/idl_test3_main/main.cpp: * tests/DCPS/FooTest5/DataReaderListener.cpp: * tests/DCPS/ManyToMany/publisher.cpp: * tests/DCPS/ManyToMany/subscriber.cpp: * tests/DCPS/NotifyTest/subscriber.cpp: * tests/DCPS/Ownership/DataReaderListener.cpp: * tests/DCPS/Ownership/subscriber.cpp: * tests/DCPS/Presentation/main.cpp: * tests/DCPS/RtpsDiscovery/RtpsDiscoveryTest.cpp: * tests/DCPS/StaticDiscovery/DataReaderListenerImpl.cpp: * tests/FACE/Compiler/idl_test1_main/main.cpp: * tests/FACE/Compiler/idl_test3_main/main.cpp: * tests/FACE/Unit/test_check.h: * tests/transport/rtps/subscriber.cpp: * tests/transport/rtps_reliability/rtps_reliability.cpp:/"
,,0.1985,OpenDDS,"Small cleanup after PR merge/Log how many entities still exist at shutdown * dds/DCPS/PublisherImpl.cpp: * dds/DCPS/SubscriberImpl.cpp:/DataReader and DataWriter are local objects so we can just pass this when we need a reference to a reader/writer, no need to store a seperate _var/_ptr for the reader/writer * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl.inl: * dds/DCPS/DataReaderImpl_T.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl_T.h: * dds/DCPS/DiscoveryBase.h: * dds/DCPS/MultiTopicDataReaderBase.cpp: * dds/DCPS/OfferedDeadlineWatchdog.cpp: * dds/DCPS/OfferedDeadlineWatchdog.h: * dds/DCPS/PublisherImpl.cpp: * dds/DCPS/RecorderImpl.cpp: * dds/DCPS/ReplayerImpl.cpp: * dds/DCPS/RequestedDeadlineWatchdog.cpp: * dds/DCPS/RequestedDeadlineWatchdog.h: * dds/DCPS/SubscriberImpl.cpp: * dds/DCPS/SubscriberImpl.h:/"
,,0.0903,OpenDDS,Updating style per guidelines./Adding checks after dynamic_cast to address coverity defect reports./
,,0.1757,OpenDDS,"Revert part of PR testing whether this solves the hang on windows * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataReaderImpl.h: * dds/DCPS/SubscriberImpl.cpp: * dds/DCPS/SubscriberImpl.h:/Const change * dds/DCPS/DataReaderImpl.cpp:/It is only necessary to calculate the latency budget when the user has enabled statistics or has specified a latency budget. In case the qos latency budget is zero we shouldnt call back to the on_budget_exceeded callback on the listener * dds/DCPS/DataReaderImpl.cpp:/DataReader and DataWriter are local objects so we can just pass this when we need a reference to a reader/writer, no need to store a seperate _var/_ptr for the reader/writer * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl.inl: * dds/DCPS/DataReaderImpl_T.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl_T.h: * dds/DCPS/DiscoveryBase.h: * dds/DCPS/MultiTopicDataReaderBase.cpp: * dds/DCPS/OfferedDeadlineWatchdog.cpp: * dds/DCPS/OfferedDeadlineWatchdog.h: * dds/DCPS/PublisherImpl.cpp: * dds/DCPS/RecorderImpl.cpp: * dds/DCPS/ReplayerImpl.cpp: * dds/DCPS/RequestedDeadlineWatchdog.cpp: * dds/DCPS/RequestedDeadlineWatchdog.h: * dds/DCPS/SubscriberImpl.cpp: * dds/DCPS/SubscriberImpl.h:/"
,,0.4724,OpenDDS,"Another fix for wchar./fix wchar build/Updating style per guidelines./Adding checks after dynamic_cast to address coverity defect reports./DataReader and DataWriter are local objects so we can just pass this when we need a reference to a reader/writer, no need to store a seperate _var/_ptr for the reader/writer * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl.inl: * dds/DCPS/DataReaderImpl_T.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl_T.h: * dds/DCPS/DiscoveryBase.h: * dds/DCPS/MultiTopicDataReaderBase.cpp: * dds/DCPS/OfferedDeadlineWatchdog.cpp: * dds/DCPS/OfferedDeadlineWatchdog.h: * dds/DCPS/PublisherImpl.cpp: * dds/DCPS/RecorderImpl.cpp: * dds/DCPS/ReplayerImpl.cpp: * dds/DCPS/RequestedDeadlineWatchdog.cpp: * dds/DCPS/RequestedDeadlineWatchdog.h: * dds/DCPS/SubscriberImpl.cpp: * dds/DCPS/SubscriberImpl.h:/Use ACE_ERROR together with LM_ERROR, see issue * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/DiscoveryBase.h: * dds/DCPS/MultiTopicDataReaderBase.cpp: * dds/DCPS/RTPS/ParameterListConverter.cpp: * dds/DCPS/RTPS/Sedp.cpp: * dds/DCPS/RTPS/Spdp.cpp: * dds/DCPS/ReactorInterceptor.cpp: * dds/DCPS/RecorderImpl.cpp: * dds/DCPS/ReplayerImpl.cpp: * dds/DCPS/StaticDiscovery.cpp: * dds/DCPS/transport/framework/ReceiveListenerSet.cpp: * dds/DCPS/transport/multicast/MulticastTransport.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp: * dds/DCPS/transport/shmem/ShmemTransport.cpp: * dds/DCPS/transport/tcp/TcpTransport.cpp: * dds/DCPS/transport/udp/UdpTransport.cpp: * dds/FACE/config/QosSettings.cpp: * dds/idl/ts_generator.cpp: * performance-tests/DCPS/MulticastListenerTest/Writer.cpp: * performance-tests/DCPS/SimpleE2ETest/Reader.cpp: * performance-tests/DCPS/SimpleE2ETest/Writer.cpp: * performance-tests/DCPS/TCPListenerTest/Writer.cpp: * performance-tests/DCPS/UDPListenerTest/Writer.cpp: * performance-tests/DCPS/UDPNoKeyTest/Reader.cpp: * performance-tests/DCPS/UDPNoKeyTest/Writer.cpp: * tests/DCPS/Compiler/idl_test1_main/main.cpp: * tests/DCPS/Compiler/idl_test3_main/main.cpp: * tests/DCPS/FooTest5/DataReaderListener.cpp: * tests/DCPS/ManyToMany/publisher.cpp: * tests/DCPS/ManyToMany/subscriber.cpp: * tests/DCPS/NotifyTest/subscriber.cpp: * tests/DCPS/Ownership/DataReaderListener.cpp: * tests/DCPS/Ownership/subscriber.cpp: * tests/DCPS/Presentation/main.cpp: * tests/DCPS/RtpsDiscovery/RtpsDiscoveryTest.cpp: * tests/DCPS/StaticDiscovery/DataReaderListenerImpl.cpp: * tests/FACE/Compiler/idl_test1_main/main.cpp: * tests/FACE/Compiler/idl_test3_main/main.cpp: * tests/FACE/Unit/test_check.h: * tests/transport/rtps/subscriber.cpp: * tests/transport/rtps_reliability/rtps_reliability.cpp:/"
,,0.4356,OpenDDS,"Use ACE_ERROR together with LM_ERROR, see issue * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/DiscoveryBase.h: * dds/DCPS/MultiTopicDataReaderBase.cpp: * dds/DCPS/RTPS/ParameterListConverter.cpp: * dds/DCPS/RTPS/Sedp.cpp: * dds/DCPS/RTPS/Spdp.cpp: * dds/DCPS/ReactorInterceptor.cpp: * dds/DCPS/RecorderImpl.cpp: * dds/DCPS/ReplayerImpl.cpp: * dds/DCPS/StaticDiscovery.cpp: * dds/DCPS/transport/framework/ReceiveListenerSet.cpp: * dds/DCPS/transport/multicast/MulticastTransport.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp: * dds/DCPS/transport/shmem/ShmemTransport.cpp: * dds/DCPS/transport/tcp/TcpTransport.cpp: * dds/DCPS/transport/udp/UdpTransport.cpp: * dds/FACE/config/QosSettings.cpp: * dds/idl/ts_generator.cpp: * performance-tests/DCPS/MulticastListenerTest/Writer.cpp: * performance-tests/DCPS/SimpleE2ETest/Reader.cpp: * performance-tests/DCPS/SimpleE2ETest/Writer.cpp: * performance-tests/DCPS/TCPListenerTest/Writer.cpp: * performance-tests/DCPS/UDPListenerTest/Writer.cpp: * performance-tests/DCPS/UDPNoKeyTest/Reader.cpp: * performance-tests/DCPS/UDPNoKeyTest/Writer.cpp: * tests/DCPS/Compiler/idl_test1_main/main.cpp: * tests/DCPS/Compiler/idl_test3_main/main.cpp: * tests/DCPS/FooTest5/DataReaderListener.cpp: * tests/DCPS/ManyToMany/publisher.cpp: * tests/DCPS/ManyToMany/subscriber.cpp: * tests/DCPS/NotifyTest/subscriber.cpp: * tests/DCPS/Ownership/DataReaderListener.cpp: * tests/DCPS/Ownership/subscriber.cpp: * tests/DCPS/Presentation/main.cpp: * tests/DCPS/RtpsDiscovery/RtpsDiscoveryTest.cpp: * tests/DCPS/StaticDiscovery/DataReaderListenerImpl.cpp: * tests/FACE/Compiler/idl_test1_main/main.cpp: * tests/FACE/Compiler/idl_test3_main/main.cpp: * tests/FACE/Unit/test_check.h: * tests/transport/rtps/subscriber.cpp: * tests/transport/rtps_reliability/rtps_reliability.cpp:/"
,,0.4349,OpenDDS,"Use ACE_ERROR together with LM_ERROR, see issue * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/DiscoveryBase.h: * dds/DCPS/MultiTopicDataReaderBase.cpp: * dds/DCPS/RTPS/ParameterListConverter.cpp: * dds/DCPS/RTPS/Sedp.cpp: * dds/DCPS/RTPS/Spdp.cpp: * dds/DCPS/ReactorInterceptor.cpp: * dds/DCPS/RecorderImpl.cpp: * dds/DCPS/ReplayerImpl.cpp: * dds/DCPS/StaticDiscovery.cpp: * dds/DCPS/transport/framework/ReceiveListenerSet.cpp: * dds/DCPS/transport/multicast/MulticastTransport.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpDataLink.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpSendStrategy.cpp: * dds/DCPS/transport/rtps_udp/RtpsUdpTransport.cpp: * dds/DCPS/transport/shmem/ShmemTransport.cpp: * dds/DCPS/transport/tcp/TcpTransport.cpp: * dds/DCPS/transport/udp/UdpTransport.cpp: * dds/FACE/config/QosSettings.cpp: * dds/idl/ts_generator.cpp: * performance-tests/DCPS/MulticastListenerTest/Writer.cpp: * performance-tests/DCPS/SimpleE2ETest/Reader.cpp: * performance-tests/DCPS/SimpleE2ETest/Writer.cpp: * performance-tests/DCPS/TCPListenerTest/Writer.cpp: * performance-tests/DCPS/UDPListenerTest/Writer.cpp: * performance-tests/DCPS/UDPNoKeyTest/Reader.cpp: * performance-tests/DCPS/UDPNoKeyTest/Writer.cpp: * tests/DCPS/Compiler/idl_test1_main/main.cpp: * tests/DCPS/Compiler/idl_test3_main/main.cpp: * tests/DCPS/FooTest5/DataReaderListener.cpp: * tests/DCPS/ManyToMany/publisher.cpp: * tests/DCPS/ManyToMany/subscriber.cpp: * tests/DCPS/NotifyTest/subscriber.cpp: * tests/DCPS/Ownership/DataReaderListener.cpp: * tests/DCPS/Ownership/subscriber.cpp: * tests/DCPS/Presentation/main.cpp: * tests/DCPS/RtpsDiscovery/RtpsDiscoveryTest.cpp: * tests/DCPS/StaticDiscovery/DataReaderListenerImpl.cpp: * tests/FACE/Compiler/idl_test1_main/main.cpp: * tests/FACE/Compiler/idl_test3_main/main.cpp: * tests/FACE/Unit/test_check.h: * tests/transport/rtps/subscriber.cpp: * tests/transport/rtps_reliability/rtps_reliability.cpp:/"
,,0.2005,OpenDDS,"Adding checks after dynamic_cast to address coverity defect reports./Updated logging lines * dds/DCPS/DomainParticipantImpl.cpp:/Address review comments * dds/DCPS/DomainParticipantImpl.cpp:/Simplify topic implementation, store the number of entities used in the topic description, removed not necessary dynamic casts, use _var * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/DomainParticipantImpl.cpp: * dds/DCPS/TopicDescriptionImpl.cpp: * dds/DCPS/TopicDescriptionImpl.h: * dds/DCPS/TopicImpl.cpp: * dds/DCPS/TopicImpl.h:/"
,,0.0843,OpenDDS,"Explicitly close the transport registry singleton so that we cleanup any instance, even when it has been created by the shutdown, like in the tests/DCPS/KeyTest test * dds/DCPS/Service_Participant.cpp: * dds/DCPS/transport/framework/TransportRegistry.cpp: * dds/DCPS/transport/framework/TransportRegistry.h:/"
,,0.0849,OpenDDS,Adding checks after dynamic_cast to address coverity defect reports./
,,0.0673,OpenDDS,Revert layout change * dds/DCPS/GroupRakeData.cpp:/
,,0.1837,OpenDDS,"DataReader and DataWriter are local objects so we can just pass this when we need a reference to a reader/writer, no need to store a seperate _var/_ptr for the reader/writer * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl.inl: * dds/DCPS/DataReaderImpl_T.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl_T.h: * dds/DCPS/DiscoveryBase.h: * dds/DCPS/MultiTopicDataReaderBase.cpp: * dds/DCPS/OfferedDeadlineWatchdog.cpp: * dds/DCPS/OfferedDeadlineWatchdog.h: * dds/DCPS/PublisherImpl.cpp: * dds/DCPS/RecorderImpl.cpp: * dds/DCPS/ReplayerImpl.cpp: * dds/DCPS/RequestedDeadlineWatchdog.cpp: * dds/DCPS/RequestedDeadlineWatchdog.h: * dds/DCPS/SubscriberImpl.cpp: * dds/DCPS/SubscriberImpl.h:/"
,,0.0648,OpenDDS,Log how many entities still exist at shutdown * dds/DCPS/PublisherImpl.cpp: * dds/DCPS/SubscriberImpl.cpp:/
,,0.1923,OpenDDS,"According to the DDS specification get_key_value should return RETCODE_BAD_PARAMETER at the moment an unknown handle is passed. This fixes issue * dds/DCPS/DataReaderImpl_T.h: * dds/DCPS/DataWriterImpl_T.h: * tests/DCPS/FooTest3_0/PubDriver.cpp: * tests/DCPS/FooTest4/Reader.cpp: * tests/DCPS/MultiTopic/MultiTopicTest.cpp:/DataReader and DataWriter are local objects so we can just pass this when we need a reference to a reader/writer, no need to store a seperate _var/_ptr for the reader/writer * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/DataReaderImpl.h: * dds/DCPS/DataReaderImpl.inl: * dds/DCPS/DataReaderImpl_T.h: * dds/DCPS/DataWriterImpl.cpp: * dds/DCPS/DataWriterImpl.h: * dds/DCPS/DataWriterImpl_T.h: * dds/DCPS/DiscoveryBase.h: * dds/DCPS/MultiTopicDataReaderBase.cpp: * dds/DCPS/OfferedDeadlineWatchdog.cpp: * dds/DCPS/OfferedDeadlineWatchdog.h: * dds/DCPS/PublisherImpl.cpp: * dds/DCPS/RecorderImpl.cpp: * dds/DCPS/ReplayerImpl.cpp: * dds/DCPS/RequestedDeadlineWatchdog.cpp: * dds/DCPS/RequestedDeadlineWatchdog.h: * dds/DCPS/SubscriberImpl.cpp: * dds/DCPS/SubscriberImpl.h:/"
,,0.1667,OpenDDS,Adding checks after dynamic_cast to address coverity defect reports./Implement the marked domain participant qos similarly to the other qos settings * dds/DCPS/DomainParticipantFactoryImpl.cpp: * dds/DCPS/Marked_Default_Qos.cpp: * dds/DCPS/MonitorFactory.h:/
,,0.066,OpenDDS,Use RAII to access topic objects by reader/writer impls/remove FilterDelayedHandler reference cycle/
,,0.073,OpenDDS,RtpsUdpDataLink: track lock state correctly/
,,0.1066,OpenDDS,Avoid storing TcpConnection pointer in TcpReceiveStrategy/Remove TransportStrategy from the data members of TcpConnection/Break reference cycle between TcpDataLink and TcpConnection/
,,0.0804,OpenDDS,Remove TransportStrategy from the data members of TcpConnection/Add WeakRcHandle support for RcObject subclasses/
,,0.0865,OpenDDS,Remove TransportStrategy from the data members of TcpConnection/
,,0.08800000000000001,OpenDDS,Fix race condition for accessing ownership manager/Remove the reference cycle in RequestDeadlineWatchdog/Use WeakRcHandle for entity parent/Fix circular reference problem when deadline is enabled/
,,0.0818,OpenDDS,Fix race condition for accessing ownership manager/Use WeakRcHandle for entity parent/
,,0.0672,OpenDDS,replace some plain pointers with unique_ptr/Break reference cycle inside DataWriterImpl/Use WeakRcHandle for entity parent/Fix circular reference problem when deadline is enabled/Rename scope_ptr to unique_ptr/
,,0.1599,OpenDDS,Implemented write_volatile_message_secure/Implemented write_stateless_message; refactored send-sample logic/Liveliness signals are now sent to a secure variant/Added stubs for new participant-message-secure endpoint/Implemented DCPSParticipantVolatileMessageSecure builtin endpoint/Adding missing pieces to stubs which handle ParticipantStatelessMessage/
,,0.1,OpenDDS,Load default security plugins and connect to DomainParticipantImpl/
,,0.0975,OpenDDS,"Fixes for tests/DCPS/Reconnect This test hides the program output. Huangming had changed it in 373f41cff7bb3bf3b3f1f93249e9a1560dc7cd9a from collecting individual program output in a single file to having one for each program, except the InfoRepo. I added an InfoRepo log file and did some cleanup/small improvements. For sub_init_crash the publisher has always (or at least in the commit before the WeakRcHandle PR) waited for subscribers until the test script timedout, killed it and reported it as an error. The fact that no more subscribers are spawned seems to be intentional, as it just tries to see if the publisher will crash but it was also hidden before the PR. Now it is killed and it shouldnt report an error unless the publisher returns a non zero status./"
,,0.1219,OpenDDS,"fixing bug in parameter list converter, setting up local permissions and governance files for Messenger test with correct domain, temporary work around for missing permissions CA cert file/Adding some inital qos properties to Messenger test for testing, fixing a few bugs discovered in the process, more to follow./"
,,0.0846,OpenDDS,"temporary fix for missing permissions cert/Adding some inital qos properties to Messenger test for testing, fixing a few bugs discovered in the process, more to follow./"
,,0.0818,OpenDDS,Combined crypto implementations: its one plugin with three interfaces./
,,0.3848,OpenDDS,"adding initial support for auth requests by various plugin implementations, changing spdp security enabled checking, putting pre_auth_associate call behind security enable check/checking security attributes of local user endpoints before sending crypto tokens, per 8.8.9/adding initial implemenation for auth retry and timeout, needs more testing/intermediate infrastructure stuff for 8.8.9/adding a few security attribute checks for 8.8.8.4/creating preauth associate, fixing data reader / writer qos property issue/Adding calls to register local datareader/writer and moving sedp associate call prior to handshake attempt for authentication/Security spec makes a breaking change to how GUIDs relate to VendorIds/another intermediate commit on the way towards 8.8.2, adds security fields to DiscoveredParticipant and fixes a few testing issues/ParticipantCryptoHandle integration with transport BLOB for rtps_udp/Added topic-security-attributes to LocalSubscription; Sedp write_subscription_data now directs to secure channel/Added topic-security-attributes to LocalPublication; Sedp write_publication_data now directs to secure channel/"
,,0.0948,OpenDDS,crypto transform for payload-level decrpytion/pass the participants crypto handle down to the transport/
,,0.2429,OpenDDS,using same rules to determine log warning vs error as control messages/applied the same errno checks when sending control messages/adding check for send failure to RtpsUdpSendStrategy to avoid putting base class into SUSPEND state (cherry picked from commit 3a6fc90a35dfe83f52df1f179408477bd29b2ba7)/adding check for send failure to RtpsUdpSendStrategy to avoid putting base class into SUSPEND state/crypto plugin: submsg encryption (bug fixes)/crypto plugin: submsg encryption/Crypto handles integration with transport; support for per-reader submessage encryption (for Volatile)/transport CryptoTransform integration: encoding payload and submessage/
,,0.2228,OpenDDS,crypto plugin: payload-level encode/decode/bug fixes and improved logging for submessage crypto/crypto plugin: decryption of submessages/Crypto Transform: decode datawriter submessages/fixed an error on older compilers/crypto transform for payload-level decrpytion/Transport calls to crypto transform (recv side)/continued adding Crypto Plugin support to the transport/pass the participants crypto handle down to the transport/
,,0.1238,OpenDDS,ParticipantCryptoHandle integration with transport BLOB for rtps_udp/pass the participants crypto handle down to the transport/
,,0.0759,OpenDDS,ParticipantCryptoHandle integration with transport BLOB for rtps_udp/
,,0.2288,OpenDDS,Crypto handles integration with transport; support for per-reader submessage encryption (for Volatile)/transport CryptoTransform integration: encoding payload and submessage/continued adding Crypto Plugin support to the transport/fixed stuff/pass the participants crypto handle down to the transport/
,,0.12300000000000001,OpenDDS,RTPS protocol changes for security; started parsing security submessages; new way of tracking crypto handles for built-in endpoints/
,,0.1215,OpenDDS,TcpConnection: Fix Error Message/TcpConnection: Print Reconnect State as Name/Fix tcp deadlock/Changes for Codacy/
,,0.0648,OpenDDS,better support for running without security enabled/
,,0.0738,OpenDDS,Added topic rules to permissions cache/Implemented get_permission_credential_token/Added support for QoS property reads for validate_local_permissions/
,,0.22399999999999998,OpenDDS,"Fixing some parameter list conversion routines to correctly identify security extensions/fixing bug in parameter list converter, setting up local permissions and governance files for Messenger test with correct domain, temporary work around for missing permissions CA cert file/intermediate checkin for 8.8.2, mostly surrounding initiating handshake/Added boilerplate for new dcps-participant-secure reader/writer/intermediate checkin, parts of spdp for 8.8.1/Implemented from_parameter_list for secure publish/subscribe data/Added stubs for reading secure publication/subscription data/"
,,0.2564,OpenDDS,"adding add_security_info() for builtins and fixing associtaion order, wrapping up 8.8.9.2 and 8.8.9.3 ... still need to handle exchange for builtins/intermediate infrastructure stuff for 8.8.9/added registration of remote datareaders/writers and appropriate storage/lookups for add_security_info()/Security spec makes a breaking change to how GUIDs relate to VendorIds/intermediate checkin for 8.8.2, mostly surrounding initiating handshake/Added boilerplate for new dcps-participant-secure reader/writer/"
,,0.0756,OpenDDS,"Adding some inital qos properties to Messenger test for testing, fixing a few bugs discovered in the process, more to follow./"
,,0.2271,OpenDDS,"adding initial implemenation for auth retry and timeout, needs more testing/Crypto handles integration with transport; support for per-reader submessage encryption (for Volatile)/a bit of code cleanup to preserve spdp/sedp boundaries/Security spec makes a breaking change to how GUIDs relate to VendorIds/intermediate checkin for 8.8.2, mostly surrounding initiating handshake/intermediate checkin, parts of spdp for 8.8.1/"
,,0.4316,OpenDDS,"initial attempt at caching datareader/writer crypto tokens/testing submessage encryption/fixed class name in logging/dont send token messages when token sequence length is zero/moving builtin writer associations and all volatile message writes to background task/adding token exchange for secure builtins, minor bug fix with builtin handle caching, fixing error text in crypto and elsewhere/adding add_security_info() for builtins and fixing associtaion order, wrapping up 8.8.9.2 and 8.8.9.3 ... still need to handle exchange for builtins/fixing a few deadlock issues (Spdp and Sedp share their global lock... who knew?\) and fixing a participant repoid lookup for generating reader / writer handles/intermediate infrastructure stuff for 8.8.9/adding participant crypto token exchange via volatile builtin (8.8.9.1)/a bit of code cleanup to preserve spdp/sedp boundaries/stateless message field fixes/Updated add_security_info to have the inputs it needs, updated comments Removed unneeded namespace qualification./Security spec makes a breaking change to how GUIDs relate to VendorIds/continued implementing remote ParticipantCryptoHandle support for transport/another intermediate commit on the way towards 8.8.2, adds security fields to DiscoveredParticipant and fixes a few testing issues/intermediate checkin for 8.8.2, mostly surrounding initiating handshake/Added boilerplate for new dcps-participant-secure reader/writer/Added EndpointSecurityAttributes to discovered publications/subscriptions/Moved secure associations out of non-secure-association pathway/Added association logic for secure publications/subscriptions/Added stubs for reading secure publication/subscription data/Implemented paramlist serialization for secure publication/subscription/Added stub for write_publication_data_secure/Added proper constructor calls for secure publication/subscription builtins/Added security initialization functionality/"
,,0.23,OpenDDS,"Revert ""Revert ""Fixing some parameter list conversion routines to correctly identify security extensions"""" This reverts commit 87299e42dda14f0017b94e8e5f335e4178508061./intermediate checkin for 8.8.2, mostly surrounding initiating handshake/Added boilerplate for new dcps-participant-secure reader/writer/intermediate checkin, parts of spdp for 8.8.1/Added stubs for reading secure publication/subscription data/Implemented paramlist serialization for secure publication/subscription/"
,,0.4107,OpenDDS,"updating stateless resend logic to avoid immediate resends/add support for authentication timeout degrating to unauthenticated matching/adding initial support for auth requests by various plugin implementations, changing spdp security enabled checking, putting pre_auth_associate call behind security enable check/Adding a bit more debugging for auth attempts and timeouts, switching to use remove_discovered_participant() on timeout/Updated debug logging. Its expected that some participant announcements will not have security parameters (unsecured participants on the same domain)./switching message_identity.source_guid to participant guid for stateless messages (despite contradictory spec)/setting / checking related_message_identity fields for handshake messages/adding initial implemenation for auth retry and timeout, needs more testing/dont send token messages when token sequence length is zero/Continued interop fixes/fixing a few deadlock issues (Spdp and Sedp share their global lock... who knew?\) and fixing a participant repoid lookup for generating reader / writer handles/adding participant crypto token exchange via volatile builtin (8.8.9.1)/a bit of code cleanup to preserve spdp/sedp boundaries/added registration of remote datareaders/writers and appropriate storage/lookups for add_security_info()/check for handshakes from undiscovered participants and ignore, switch participant lookup to _participant_ guid/Adding calls to register local datareader/writer and moving sedp associate call prior to handshake attempt for authentication/Security spec makes a breaking change to how GUIDs relate to VendorIds/switching away from identity status token version of from_param_list in Spdp, as unsecure discovery wont have identity status token/fixing error/debug message typos/fixing compiler warnings/initial implementation for message-processing side of handshakes complete/re-adding 8.8.2 changes with DiscoveredParticipant changes, not sure how these got lost/another intermediate commit on the way towards 8.8.2, adds security fields to DiscoveredParticipant and fixes a few testing issues/adding back missing non-security path code, fixing one run_test.pl execute permissions/intermediate checkin for 8.8.2, mostly surrounding initiating handshake/Initial write impl of secure discovery parameters now in place/intermediate checkin, parts of spdp for 8.8.1/Fixed C++98 build error by removing delegate constructor/Added security initialization functionality/"
,,0.078,OpenDDS,ParticipantCryptoHandle integration with transport BLOB for rtps_udp/
,,0.1676,OpenDDS,"removing security builtin topics from filter for check_create_topic, adding topic name to debug output/filter out built in topics from calls to check_create_topic/Adding call to check_create_topic for local topics/Adding check that security config was properly loaded when security flags been set/allow Topics to be created by disabled DomainParticipants/Updating DomainParticipantFactory to check that enable returned successfully now that discovery participant creation has been defered to enable/Adding Support for DCPSSecurity runtime flag (disabled by default), fixing DomainParticipant return codes, adding temporary unique guid generation to builtin auth plugin/Fixing compiler warnings from incorrect ACE logging flags / types/fixing signature and stubbing add_domain_participant_secure to other discovery types, adding/updating security plugin calls to DomainParticipant/Moving add_domain_participant from DomainParticipantFactory to DomainParticipant::enable, creating secure add_domain_participant variant stub/"
,,0.0982,OpenDDS,MultiTopic: use Topics QoS when creating constituent data readers/
,,0.2217,OpenDDS,"Removed extra headers in top-level dds directory, simplified namespaces./adding support for 8.8.7.1 (unauth) and fixing half_sec test issues (also unauth)/initial implemenation for 8.8.7.2 remote topic and reader and writer checks/Initial implementation of 8.8.5 and rest of 8.8.6, changes to tests & script & dds log messages to allow for failure test/backing out addition of domain id to several calls, adding virtual methods and getters to allow use of domain ID in endpoint manager calls/partial implementation of 8.8.5, still need to handle security attributes, eventually will need checks for register and dispose instance/"
,,0.0681,OpenDDS,code review changes in transport/
,,0.0883,OpenDDS,transport review: use named constants for RTPS flags; other review renamings/fixed review comments in transport/
,,0.1381,OpenDDS,Updates to work with changes from master/transport review: use named constants for RTPS flags; other review renamings/Make proper use of Builtin Entity Kinds for RTPS/transport support for secure-volatile builtin peer-to-peer reliable messages/
,,0.0842,OpenDDS,Changes Made for Code Review Removed sstream Replaced std::string with OPENDDS_STRING Adjusted Log Levels Made InstanceState::instance_state_string() and TcpConnection::reconnect_state_string() more consistent with each other/
,,0.0825,OpenDDS,Changes Made for Code Review Removed sstream Replaced std::string with OPENDDS_STRING Adjusted Log Levels Made InstanceState::instance_state_string() and TcpConnection::reconnect_state_string() more consistent with each other/
,,0.0972,OpenDDS,Refactored internal Auth data structures/Added guard to prevent GUIDs from being remotely-validated multiple times/
,,0.1016,OpenDDS,Added multiple-participant support to local-credential-data/Moved handshake-data guards out of accessor into calling methods/Various Authentication changes/
,,0.1289,OpenDDS,Temporary commit for merge resolution/Task 3631: Completed code for scheduling timer and then to call on_revoke_permissions() in the handle_timeout() function./Task 3637: Corrected the handling of the UTC time zone adjustment./Task 3630: Added code to check for partitions. Task 3627: Moved check of default value to the end of the functions after all the elements of a grant have been checked./
,,0.0756,OpenDDS,crypto unregister/return methods/Crypto Transform: auth-only for submessages/Improve OpenSSL 1.0 Compatibility Add legacy init and cleanup calls Did some cleanup in OpenSSL_legacy.h/
,,0.1836,OpenDDS,"Make proper use of Builtin Entity Kinds for RTPS/Use Builtin Entity Types for BIT Domain Entities In otherwords use c2/c7 in the BIT reader/writers GUIDs for DCPS. Also marks the BIT with a different enitity type, but this might have to change. This work is not complete in this commit, as it seems only the BITs and BIT Publisher Readers are getting the correct entity types at this time./"
,,0.0842,OpenDDS,Changes Made for Code Review Removed sstream Replaced std::string with OPENDDS_STRING Adjusted Log Levels Made InstanceState::instance_state_string() and TcpConnection::reconnect_state_string() more consistent with each other/
,,0.1554,OpenDDS,"Removed extra headers in top-level dds directory, simplified namespaces./participant discovery data type refactoring, parameter converter list cleanup/Resolving review comments for ParameterListConverter and RtpsCore IDL/Even more code review resolutions/"
,,0.155,OpenDDS,"Added more ifdefs/Removed extra headers in top-level dds directory, simplified namespaces./correctly sending / handling secure participant messages/"
,,0.2904,OpenDDS,"Removed extra headers in top-level dds directory, simplified namespaces./Merge remote-tracking branch upstream/master into security/secure endpoint discovery fixes / cleanup/correctly sending / handling secure participant messages/participant discovery data type refactoring, parameter converter list cleanup/reducing worst-offender line lengths in Sedp per review comments/Temporary commit for merge resolution/fixing more error messages for test scripts/initial implemenation for 8.8.7.2 remote topic and reader and writer checks/failed remote topic permissions check should be a warning (not an error)/only checking remote topics on participants with access control enabled/Initial implementation of 8.8.5 and rest of 8.8.6, changes to tests & script & dds log messages to allow for failure test/Adding calls to get_dataXer_sec_attr for security builtin topics. Still need changes in AccessControlBuiltin to support plugin_endpoint_attributes./"
,,0.1332,OpenDDS,"Removed extra headers in top-level dds directory, simplified namespaces./participant discovery data type refactoring, parameter converter list cleanup/"
,,0.1724,OpenDDS,"Removed extra headers in top-level dds directory, simplified namespaces./correctly sending / handling secure participant messages/participant discovery data type refactoring, parameter converter list cleanup/"
,,0.0842,OpenDDS,"Resolving review comments for DomainParticipantImpl/Temporary commit for merge resolution/Even more code review resolutions/partial implementation of 8.8.5, still need to handle security attributes, eventually will need checks for register and dispose instance/"
,,0.0859,OpenDDS,Changes Made for Code Review Removed sstream Replaced std::string with OPENDDS_STRING Adjusted Log Levels Made InstanceState::instance_state_string() and TcpConnection::reconnect_state_string() more consistent with each other/
,,0.0673,OpenDDS,Force a GUID to be a certain value or type/
,,0.0877,OpenDDS,Changes Made for Code Review Removed sstream Replaced std::string with OPENDDS_STRING Adjusted Log Levels Made InstanceState::instance_state_string() and TcpConnection::reconnect_state_string() more consistent with each other/DomainParticipantFactoryImpl.cpp: log create partic./
,,0.2722,OpenDDS,adding durability / history depth to fix occassional test failure under load. adding per-writer message tracking. adding support for binding generated transport configs even when using rtps discovery to help with debugging./adding durability / history depth to fix occassional test failure under load. adding per-writer message tracking. adding support for binding generated transport configs even when using rtps discovery to help with debugging./
,,0.2679,OpenDDS,adding durability / history depth to fix occassional test failure under load. adding per-writer message tracking. adding support for binding generated transport configs even when using rtps discovery to help with debugging./adding durability / history depth to fix occassional test failure under load. adding per-writer message tracking. adding support for binding generated transport configs even when using rtps discovery to help with debugging./
,,0.2637,OpenDDS,adding durability / history depth to fix occassional test failure under load. adding per-writer message tracking. adding support for binding generated transport configs even when using rtps discovery to help with debugging./adding durability / history depth to fix occassional test failure under load. adding per-writer message tracking. adding support for binding generated transport configs even when using rtps discovery to help with debugging./
,,0.08,OpenDDS,"fixing code style issues and timing mechanisms for deadline tests, avoiding set_qos for reader/"
,,0.0673,OpenDDS,Added ifdefs for rtps_udp transport/
,,0.0694,OpenDDS,Added ifdefs for rtps_udp transport/
,,0.0716,OpenDDS,Response to Comments in PR
,,0.1271,OpenDDS,"Actually, lets have send_builtin_crypto_tokens() check for all types of readers instead, including builtin readers. And lets update the comments for KIND_READER and KIND_WRITER to make it clear the builtins readers and writers are no longer included in those kinds./"
,,0.078,OpenDDS,Init IR BIT entities first So that they always have the same GUIDs acess InfoRepo Persistence. This does not solve the ongoing problem with the persistent repo BIT test as hoped though./
,,0.0923,OpenDDS,Init IR BIT entities first So that they always have the same GUIDs acess InfoRepo Persistence. This does not solve the ongoing problem with the persistent repo BIT test as hoped though./
,,0.066,OpenDDS,Infrastructure For Support Also Added
,,0.075,OpenDDS,opendds_idl: Support for Nested Keyyed Union/Fixed issues with compiling C++11 Messenger IDL; Added export file./Initial IDL-Generator changes migrated from issue-994-cpp11-mapping./
,,0.4141,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./several performance improvements for rtps discovery / association: allow association to immediately reschedule heartbeat timer, delay heartbeat messages for durable writers until durable data is ready, immediately ack/nack first real heartbeat data from writers/"
,,0.3621,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./"
,,0.4387,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./only prevent initial heartbeats for durable writers matching durable readers (not all readers)/several performance improvements for rtps discovery / association: allow association to immediately reschedule heartbeat timer, delay heartbeat messages for durable writers until durable data is ready, immediately ack/nack first real heartbeat data from writers/"
,,0.0818,OpenDDS,Assign variable as value when declaring it * dds/DCPS/GuidUtils.cpp:/
,,0.1727,OpenDDS,"several performance improvements for rtps discovery / association: allow association to immediately reschedule heartbeat timer, delay heartbeat messages for durable writers until durable data is ready, immediately ack/nack first real heartbeat data from writers/"
,,0.3581,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./"
,,0.3581,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./"
,,0.3864,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./Fixed subcription typo * dds/DCPS/RTPS/Sedp.cpp: * dds/DCPS/transport/framework/DataLink.h: * dds/InfoRepo/DCPS_IR_Topic.h: * dds/InfoRepo/DCPS_IR_Topic_Description.cpp:/"
,,0.3635,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./"
,,0.0818,OpenDDS,DiscoveryBash.h: Fix Formatting/DiscoveryBase.h: Reduce Line Length/
,,0.3176,OpenDDS,"Make other changes from PR/Fix Auth/Key Exchange ""Race Condition"" In security, there is a three way handshake which makes up authentication and precedes key exchange. The participant that is predetermined to be the initiator will finish the handshake first and will continue on to key exchange. If the speeds are matched between the two participants this is not a problem. However if the non-initiator is much slower, then as of writing it is possible that the volatile reader that does key exchange will not be ready to decrypt messages. Because of how durability works reliability doesnt help because key exchange happened before the reader could see anything. The solution used here is to resend keys on the first AckNack from the key exchange reader, after we know the reader can decrypt them. They are the same keys in new messages so it gets around the problem caused by volatile durability./"
,,0.0669,OpenDDS,Security: Misc Changes/Sedp.cpp&RtpsUdpReceiveStrategy.cpp Line Length/
,,0.2954,OpenDDS,"Make other changes from PR/Fix Auth/Key Exchange ""Race Condition"" In security, there is a three way handshake which makes up authentication and precedes key exchange. The participant that is predetermined to be the initiator will finish the handshake first and will continue on to key exchange. If the speeds are matched between the two participants this is not a problem. However if the non-initiator is much slower, then as of writing it is possible that the volatile reader that does key exchange will not be ready to decrypt messages. Because of how durability works reliability doesnt help because key exchange happened before the reader could see anything. The solution used here is to resend keys on the first AckNack from the key exchange reader, after we know the reader can decrypt them. They are the same keys in new messages so it gets around the problem caused by volatile durability./Fix log points from last commit/Log Security Key Ids/updated for change from master/Addressed TODO comments; no need for separate library in RtpsRelay/"
,,0.0993,OpenDDS,Security Debug Options/Fix log points from last commit/Log Security Key Ids/Fix QOS Conflicts on Security Endpoints/
,,0.1176,OpenDDS,"removing cached pointer to ServiceParticipant reactor timer from AccessControlBuiltinImpl::RevokePermissionsTimer in order to avoid segfault during shutdown (canceling a timer thats already been canceled, since the reactor was destroyed)/"
,,0.0751,OpenDDS,ReactorInterceptor: wait() can run after reactor shutdown/
,,0.1156,OpenDDS,Problem: Participant properties do not get sent without security Solution: Add properties to relevant data structures and the parameter list converter./
,,0.0673,OpenDDS,Make other changes from PR/Security Debug Options/Add missing declarations/
,,0.3269,OpenDDS,"Make other changes from PR/Security: Fix Part QOS Update Not Sending/Fixes for previous commit/Fix Auth/Key Exchange ""Race Condition"" In security, there is a three way handshake which makes up authentication and precedes key exchange. The participant that is predetermined to be the initiator will finish the handshake first and will continue on to key exchange. If the speeds are matched between the two participants this is not a problem. However if the non-initiator is much slower, then as of writing it is possible that the volatile reader that does key exchange will not be ready to decrypt messages. Because of how durability works reliability doesnt help because key exchange happened before the reader could see anything. The solution used here is to resend keys on the first AckNack from the key exchange reader, after we know the reader can decrypt them. They are the same keys in new messages so it gets around the problem caused by volatile durability./Sedp: remove transport when were done also some simple local var renames for consistency/Sedp.cpp&RtpsUdpReceiveStrategy.cpp Line Length/Various Minor Fixes/Addressed TODO comments; no need for separate library in RtpsRelay/"
,,0.11199999999999999,OpenDDS,Rtps Discovery: log port numbers as unsigned/Problem: Participant properties do not get sent without security Solution: Add properties to relevant data structures and the parameter list converter./
,,0.0962,OpenDDS,"Adding cleanup of SecurityRegistry to ServiceParticipant, similar to TransportRegistry, in order to remove leak warnings/Security Debug Options/Service_Participant.cpp: Refactor Config Override Messages/fixed safety profile and other build issues/Support restarting the same Service_Participant object after shutdown() Updated RtpsUdpLoader to have an easy way to reload the transport./"
,,0.1121,OpenDDS,Increase size of the RTPS relay beacon message The beacon message size was increased to be 4 bytes. The content of the message is just zeriozed data./
,,0.1906,OpenDDS,fixup Problem: Data(Reader|Writer)Impl dont check that topic is enabled/Problem: Data(Reader|Writer)Impl dont check that topic is enabled Solution: Return PRECONDITION_NOT_MET if the topic is not enabled./
,,0.1351,OpenDDS,Problem: Data(Reader|Writer)Impl dont check that topic is enabled Solution: Return PRECONDITION_NOT_MET if the topic is not enabled./
,,0.2771,OpenDDS,"Problem: Inconsistent topic only discovered with local reader/writer A participant can only get inconconsistent topic when it has a local reader or writer on that topic. While usual, a participant should be able to create a topic and then get inconsistent topic on it without creating readers and writers. This also lead to a race condition in earlier versions of the InconsistentTopic test which made it fail sporadically. Solution: Track local and remote topics and link the local topic to its impl through callbacks so that inconsistent topic can be reported without a reader or writer./"
,,0.066,OpenDDS,No DCPS_DATA_TYPE Warnings for OpenDDS itself/Refactor Topic Type Code/
,,0.066,OpenDDS,Apply suggestions from code review Co-Authored-By: Adam Mitz Topic Type Code/
,,0.1293,OpenDDS,Merge branch master into rtps_udp_unlocking_reader_dispatch_and_bundled_ack_nacks/resolving PR review comments/initial attempt to free up locking from writer side of RtpsUdpDataLink/
,,0.1255,OpenDDS,resolving PR review comments/initial attempt to free up locking from writer side of RtpsUdpDataLink/
,,0.0621,OpenDDS,resolving PR review comments/
,,0.2948,OpenDDS,"rename Response to MetaSubmessage/protect / isolate on_start_callbacks to make transport_assoc_done accurately reflect acknack status for reliable writers, use delayed association inside sedp for durable builtin data, allow heartbeats without final flag and zero last SN to prompt initial acknacks, respond to all non-final heartbeats if they are valid according to the spec/resolving PR comments creating struct to help organize / track bundle sizes/resolving PR review comments/locking changes around add_reader/writer and remove_reader/writer to prevent race conditions on discovery & cleanup/fixing lock release for first_acknowledged_by_reader, which will eventually call back into this writer/fixing bug setting prev_dst in send_bundled_responses, switching static discovery acknacks to use send_bundled_replies, adding mutex protection to static discovery test listener/initial attempt to free up locking from writer side of RtpsUdpDataLink/switching from local zero-guid to GUID_UNKNOWN/skipping send_bundled_responses for empty response vectors, removing testing assertion, setting default max_bundle_size to be big (udp_max_message_size rtps header size), making max_bundle_size configurable (per rtps_udp instance)/turning send_ack_nacks into a more generic send_bundled_responses which also has max bundled packet size, to eventually be used by other (writer) methods for their responses/initial commit for draft pull request... rtpsreaders and rtpswriters now use RCH, have own locking, datareader_dispatch unlocks early, locator access is limited / protected, user write no longer needs datalink mutex prior to send strategy call/Increase size of the RTPS relay beacon message The beacon message size was increased to be 4 bytes. The content of the message is just zeriozed data./Fixed an issue in with fragmentation/cleaning up a few double-lookup instances (maps count() + []) in RtpsUdpDataLink.cpp/"
,,0.2798,OpenDDS,"Problem: Inconsistent topic only discovered with local reader/writer A participant can only get inconconsistent topic when it has a local reader or writer on that topic. While usual, a participant should be able to create a topic and then get inconsistent topic on it without creating readers and writers. This also lead to a race condition in earlier versions of the InconsistentTopic test which made it fail sporadically. Solution: Track local and remote topics and link the local topic to its impl through callbacks so that inconsistent topic can be reported without a reader or writer./"
,,0.1361,OpenDDS,Problem: Data(Reader|Writer)Impl dont check that topic is enabled Solution: Return PRECONDITION_NOT_MET if the topic is not enabled./Changes Requested for 1094/
,,0.2784,OpenDDS,"Problem: Inconsistent topic only discovered with local reader/writer A participant can only get inconconsistent topic when it has a local reader or writer on that topic. While usual, a participant should be able to create a topic and then get inconsistent topic on it without creating readers and writers. This also lead to a race condition in earlier versions of the InconsistentTopic test which made it fail sporadically. Solution: Track local and remote topics and link the local topic to its impl through callbacks so that inconsistent topic can be reported without a reader or writer./"
,,0.1557,OpenDDS,Problem: Data(Reader|Writer)Impl dont check that topic is enabled Solution: Return PRECONDITION_NOT_MET if the topic is not enabled./Fixed comment/Update dds/DCPS/DataWriterImpl.cpp Co-Authored-By: Adam Mitz use of retcode_to_string * dds/DCPS/DataWriterImpl.cpp:/
,,0.35200000000000004,OpenDDS,"Relay addresses not updated when client changes servers Previously, the relay addresses were bundled with the reader and writer entries. Suppose there are two relays A and B and a client connects to A, switches to B, and then switches back to A before the participant lease duration. This causes A to write entries for the participant and then B will write entries for the participant. However, the client is associated with A but the topic says it should be associated with B. To solve this problem, remove the relay addresses from the reader and writer entries and create a new topic for participant to relay pairings (Responsible Relay). The relays maintain the Responsible Relay topic based on the traffic that they are observing. The Reader and Writer entries are just for matching. For this change, we had to remove the local/remote distinction in the QosIndex. This means that every relay must maintain a complete association table./Review/Add support for routing based on INFO_DST/RtpsRelay: Message validation (#1322) * Message validation * Simplify message parsing and add checks * Reduce security conditionals * Use Monotonic time * Add check for content length in parseSubmessageHeader/Add locking to RtpsRelay/RtpsRelay: Implement rapid association (#1317) * Implement rapid association * Install the RtpsRelay library * Fixes from review * Fix whitespace * Fix control flow * Fix Coverity/RtpsRelay: Add QoS indexing (#1302) * Add qos indexing/Use BIT for RtpsRelay routing (#1286) Use BIT for routing in RtpsRelay/Add an application participant to RtpsRelay/"
,,0.3407,OpenDDS,"Relay addresses not updated when client changes servers Previously, the relay addresses were bundled with the reader and writer entries. Suppose there are two relays A and B and a client connects to A, switches to B, and then switches back to A before the participant lease duration. This causes A to write entries for the participant and then B will write entries for the participant. However, the client is associated with A but the topic says it should be associated with B. To solve this problem, remove the relay addresses from the reader and writer entries and create a new topic for participant to relay pairings (Responsible Relay). The relays maintain the Responsible Relay topic based on the traffic that they are observing. The Reader and Writer entries are just for matching. For this change, we had to remove the local/remote distinction in the QosIndex. This means that every relay must maintain a complete association table./Add test for a late joining relay (#1342) * Add test for a late joining relay/Disable builtin SEDP writers/Add support for routing based on INFO_DST/RtpsRelay: Implement rapid association (#1317) * Implement rapid association * Install the RtpsRelay library * Fixes from review * Fix whitespace * Fix control flow * Fix Coverity/Use BIT for RtpsRelay routing (#1286) Use BIT for routing in RtpsRelay/Add an application participant to RtpsRelay/"
,,0.3627,OpenDDS,"Relay addresses not updated when client changes servers Previously, the relay addresses were bundled with the reader and writer entries. Suppose there are two relays A and B and a client connects to A, switches to B, and then switches back to A before the participant lease duration. This causes A to write entries for the participant and then B will write entries for the participant. However, the client is associated with A but the topic says it should be associated with B. To solve this problem, remove the relay addresses from the reader and writer entries and create a new topic for participant to relay pairings (Responsible Relay). The relays maintain the Responsible Relay topic based on the traffic that they are observing. The Reader and Writer entries are just for matching. For this change, we had to remove the local/remote distinction in the QosIndex. This means that every relay must maintain a complete association table./Review/Add support for routing based on INFO_DST/RtpsRelay: Message validation (#1322) * Message validation * Simplify message parsing and add checks * Reduce security conditionals * Use Monotonic time * Add check for content length in parseSubmessageHeader/RtpsRelay: Allow participants to have multiple addresses (#1321) * Allow participants to have multiple addresses/RtpsRelay: Implement rapid association (#1317) * Implement rapid association * Install the RtpsRelay library * Fixes from review * Fix whitespace * Fix control flow * Fix Coverity/Use BIT for RtpsRelay routing (#1286) Use BIT for routing in RtpsRelay/Add an application participant to RtpsRelay/"
,,0.1011,OpenDDS,"updating DpShutdown test to work for all transports, updating run_test.pl and test lists to use all transport types/"
,,0.0854,OpenDDS,Use BIT for RtpsRelay routing (#1286) Use BIT for routing in RtpsRelay/
,,0.1102,OpenDDS,completed the receiving side of full message protection also checks for unprotected sub/messages that should have been protected/
,,0.1305,OpenDDS,"updating TcpReconnectTask to protect TcpTransport / Reactor during reconnect actions, updating TcpConnection to use ReactorInterceptor/migrating TcpReconnectTask to use ACE_Task_Base, removing TcpConnection spawn thread + ref-counting in favor of TcpTransport_rch & TcpReconnectTask members/"
,,0.2199,OpenDDS,"resolving pr comments, adding RcHandle to commands to prevent destruction while active, giving transport RcHandle to ReconnectTask (while active) in order to prevent task from self-destruction/updating TcpReconnectTask to protect TcpTransport / Reactor during reconnect actions, updating TcpConnection to use ReactorInterceptor/"
,,0.2376,OpenDDS,"SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./Correct ReactorTask/Use Monotonic for Internal Timing Have OpenDDS use monotonic timing where possible to protect OpenDDS from changes to the system clock./"
,,0.0676,OpenDDS,attempting to fix corruption in DomainParticipantFactoryImpl::delete_participant during call to Util::remove on participants_ by increasing scope of locks for participants_protector_/
,,0.0669,OpenDDS,Refactor message parsing per review comment/
,,0.1412,OpenDDS,Use BIT for RtpsRelay routing (#1286) Use BIT for routing in RtpsRelay/moving Sedp::Writer call of association_complete to enqueued ReactorInterceptor call to avoid deadlock/
,,0.0616,OpenDDS,fixing wchar support for xerces and security builds/
,,0.0636,OpenDDS,fixing wchar support for xerces and security builds/
,,0.0677,OpenDDS,fixing wchar support for xerces and security builds/
,,0.0713,OpenDDS,attempting to fix corruption in DomainParticipantFactoryImpl::delete_participant during call to Util::remove on participants_ by increasing scope of locks for participants_protector_/
,,0.0673,OpenDDS,Fix compiler warnings around RtpsRelay/
,,0.066,OpenDDS,Add user_data to RtpsRelay/Add a built-in STUN server to the RtpsRelay/
,,0.0673,OpenDDS,Fix compiler warnings in RtpsRelay/
,,0.0673,OpenDDS,Fix compiler warnings in RtpsRelay/
,,0.0823,OpenDDS,added correct sequence numbers to tests/transport/rtps/
,,0.0765,OpenDDS,Messengers: Use EXIT_* values/
,,0.09699999999999999,OpenDDS,"Populate sequence with memset/As per Trello card: ""RTPS 2.4 Add & Apply Security Flag to DATA & DATAFRAG Submessages"". Also modified Attributes Test app for variable message size to allow testing with Fragments./"
,,0.0833,OpenDDS,Preliminary ParticipantLocation (expose connection endpoint) example./
,,0.3526,OpenDDS,"Modify ParticipantLocation to use octet[] for guid. Modify ParticipantLocation test to report a failure if the test exits without checking location. Fix spacing in DiscoveryBase.h./RTPS discovery and transport cannot handle network changes (#1365) * RTPS discovery and transport cannot handle network changes The locators determined by RTPS discovery and used by the RTPS transport are set at start time. This prevents OpenDDS from be used in situations where the network configuration is expected to change like mobile phones, tablets, etc. To solve this problem, code was added to detect network changes and update the locators announced by SPDP and SEDP. Support was also added for checking for changed locators and updating the RTPS transport to use the new locators. ICE was also updated so that the published AgentInfo is updated when the network configuration changes. Only Linux is supported at this time. Diagnostic logging for these features can be turned on with DCPSDebugLevel > 4./local and relay work/"
,,0.35100000000000003,OpenDDS,"RTPS discovery and transport cannot handle network changes (#1365) * RTPS discovery and transport cannot handle network changes The locators determined by RTPS discovery and used by the RTPS transport are set at start time. This prevents OpenDDS from be used in situations where the network configuration is expected to change like mobile phones, tablets, etc. To solve this problem, code was added to detect network changes and update the locators announced by SPDP and SEDP. Support was also added for checking for changed locators and updating the RTPS transport to use the new locators. ICE was also updated so that the published AgentInfo is updated when the network configuration changes. Only Linux is supported at this time. Diagnostic logging for these features can be turned on with DCPSDebugLevel > 4./"
,,0.0669,OpenDDS,added intersect_sorted_ranges and intersect; modified debug codeî/separate DirectedWrite code from RtpsUdpDataLink/
,,0.3533,OpenDDS,"fixing locking order issue (causes deadlock) between packet removal and reliable packet resend/fixing coverity issues/resolving review comments allow data to initialize reader, remove missing.front() check for gaps, reinstate treating hb_low movement as gap insertion/scalability fixes for these reliability / durability changes based on bench testing/RTPS discovery and transport cannot handle network changes (#1365) * RTPS discovery and transport cannot handle network changes The locators determined by RTPS discovery and used by the RTPS transport are set at start time. This prevents OpenDDS from be used in situations where the network configuration is expected to change like mobile phones, tablets, etc. To solve this problem, code was added to detect network changes and update the locators announced by SPDP and SEDP. Support was also added for checking for changed locators and updating the RTPS transport to use the new locators. ICE was also updated so that the published AgentInfo is updated when the network configuration changes. Only Linux is supported at this time. Diagnostic logging for these features can be turned on with DCPSDebugLevel > 4./"
,,0.1017,OpenDDS,"As per Trello card: ""RTPS 2.4 Add & Apply Security Flag to DATA & DATAFRAG Submessages"". Also modified Attributes Test app for variable message size to allow testing with Fragments./"
,,0.2654,OpenDDS,"fix debug message formatting problem/fix missing connection lost notification issue/Remove tcp reconnect task/try to fix null pointer issue in handle_close/Fix the tcp reconnect deadlock problem/Normalize Enum-like Values to String Functions Normalize these enum-like value to string functions, by making them return `const char *` instead of `OPENDDS_STRING` (Fix for and having them behave the same when an invalid value is passed: `DataSampleHeader.cpp`: `to_string(MessageId)` `to_string(SubMessageId)` `InstanceState.cpp`: `InstanceState::instance_state_string(DDS::InstanceStateKind)` `InstanceState::instance_state_string()` `Sedp.cpp`: `Sedp::Msg::msgTypeToString(MsgType)` `Sedp::Msg::msgTypeToString()` `SafetyProfileStreams.cpp`: `retcode_to_string(DDS::ReturnCode_t)` `WriterInfo.cpp`: `WriterInfo::get_state_str()` `security/CommonUtilities.cpp`: `ctk_to_dds_string(const CryptoTransformKind&)` `transport/tcp/TcpConnection.cpp`: `TcpConnection::reconnect_state_string()` Remove logging single spaces before newlines in `DataWriterImpl.cpp` Try to fix style in `DataWriterImpl_T.h`/"
,,0.0849,OpenDDS,Remove tcp reconnect task/
,,0.0786,OpenDDS,Sedp: transport may still have a reference to Writers during shutdown/
,,0.1102,OpenDDS,Merge branch master into connect_method Conflicts: bin/dcps_tests.lst dds/DCPS/RTPS/ICE/AgentImpl.cpp dds/DCPS/RTPS/ICE/AgentImpl.h dds/DCPS/RTPS/ICE/EndpointManager.h dds/DCPS/RTPS/ParameterListConverter.h dds/DCPS/RTPS/Spdp.cpp dds/DCPS/RTPS/Spdp.h/
,,0.2951,OpenDDS,"Spdp uses destructed lock on shutdown (#1354) * Spdp uses destructed lock on shutdown The SPDP transports sends unregister/dispose messages as part of shutdown. If it is using the RtpsRelay, then it must acquire the lock for the address. However, the lock has already been destroyed. The solution was to move all of the configuration for RtpsDiscovery to a separate configuration object that will not be destroyed until the Spdp object is destroyed./"
,,0.1045,OpenDDS,Merge branch master into connect_method Conflicts: bin/dcps_tests.lst dds/DCPS/RTPS/ICE/AgentImpl.cpp dds/DCPS/RTPS/ICE/AgentImpl.h dds/DCPS/RTPS/ICE/EndpointManager.h dds/DCPS/RTPS/ParameterListConverter.h dds/DCPS/RTPS/Spdp.cpp dds/DCPS/RTPS/Spdp.h/
,,0.3349,OpenDDS,"Add durability to secure participant discovery and process ICE updates from secure participant discovery/Sedp: transport may still have a reference to Writers during shutdown/WIP/Normalize Enum-like Values to String Functions Normalize these enum-like value to string functions, by making them return `const char *` instead of `OPENDDS_STRING` (Fix for and having them behave the same when an invalid value is passed: `DataSampleHeader.cpp`: `to_string(MessageId)` `to_string(SubMessageId)` `InstanceState.cpp`: `InstanceState::instance_state_string(DDS::InstanceStateKind)` `InstanceState::instance_state_string()` `Sedp.cpp`: `Sedp::Msg::msgTypeToString(MsgType)` `Sedp::Msg::msgTypeToString()` `SafetyProfileStreams.cpp`: `retcode_to_string(DDS::ReturnCode_t)` `WriterInfo.cpp`: `WriterInfo::get_state_str()` `security/CommonUtilities.cpp`: `ctk_to_dds_string(const CryptoTransformKind&)` `transport/tcp/TcpConnection.cpp`: `TcpConnection::reconnect_state_string()` Remove logging single spaces before newlines in `DataWriterImpl.cpp` Try to fix style in `DataWriterImpl_T.h`/ICE Agent Info exchanged in the clear when security is enabled When security is enabled for a participant, only include the ICE agent info in the secure SPDP messages./"
,,0.4831,OpenDDS,"Add SPDP ICE endpoint before SEDP is initialized This is to address a start-up condition where SEDP is already engaged in ICE and needs the local agent info for SPDP but SPDP has not added its endpoint to the ICE agent./From review/Add participant_key to participant location topic To make the user experience nicer, the location updates are deferred until the participant is written to the ParticipantData BIT. This means the should be able to take the key and then look up the user_data for that participant./RTPS discovery and transport cannot handle network changes (#1365) * RTPS discovery and transport cannot handle network changes The locators determined by RTPS discovery and used by the RTPS transport are set at start time. This prevents OpenDDS from be used in situations where the network configuration is expected to change like mobile phones, tablets, etc. To solve this problem, code was added to detect network changes and update the locators announced by SPDP and SEDP. Support was also added for checking for changed locators and updating the RTPS transport to use the new locators. ICE was also updated so that the published AgentInfo is updated when the network configuration changes. Only Linux is supported at this time. Diagnostic logging for these features can be turned on with DCPSDebugLevel > 4./WIP/local and relay work/ICE Agent Info exchanged in the clear when security is enabled When security is enabled for a participant, only include the ICE agent info in the secure SPDP messages./Spdp uses destructed lock on shutdown (#1354) * Spdp uses destructed lock on shutdown The SPDP transports sends unregister/dispose messages as part of shutdown. If it is using the RtpsRelay, then it must acquire the lock for the address. However, the lock has already been destroyed. The solution was to move all of the configuration for RtpsDiscovery to a separate configuration object that will not be destroyed until the Spdp object is destroyed./"
,,0.0809,OpenDDS,Fix memory leak. Remove unnecessary counter./Modify DomainParticipantImpl::is_clean() to use topicIsBit() rather than a static count of BIT topics./
,,0.0652,OpenDDS,fixing inappropriate malloc usage for wchar/
,,0.0982,OpenDDS,Add statistics topics to RtpsRelay/Improve logging in the RtpsRelay/
,,0.0982,OpenDDS,From review/Add statistics topics to RtpsRelay/Improve logging in the RtpsRelay/
,,0.0673,OpenDDS,Add statistics topics to RtpsRelay/
,,0.1335,OpenDDS,"back off first_data_delivered updates to only cases where were unlikely to be able to nack/fixing rtps reader-side association lookup for handshakes and sedp assocations/add MultiTask for an adjustable timer in the vein of Sporadic/PeriodicTask, update SPDPs send_listener_ and RTPSs heartbeat_ to use it/Peer review updates/rtps_udp 2.4 interop fixes allow heartbeats with the ""first"" number one larger than the ""last"" for volatile durability, first received data is delivered/"
,,0.107,OpenDDS,"Tweak Security Logging Tweak security logging categories and bring some more logging points under the control of them./protect iterators in auth_deadlines_ from match_unauthenticated()/Fixes for Secure Participant Discovery/add MultiTask for an adjustable timer in the vein of Sporadic/PeriodicTask, update SPDPs send_listener_ and RTPSs heartbeat_ to use it/"
,,0.0686,pljava,*** empty log message ***/
,,0.0724,pljava,Changed all places where code and declartions where mixed/Initial revision/
,,0.076,pljava,Changed all places where code and declartions where mixed/General clean-up of threading and fence mechanisms./Added classes to handle SPI cursors and complex set parameters./Initial revision/
,,0.1226,pljava,Changed all places where code and declartions where mixed/*** empty log message ***/*** empty log message ***/General clean-up of threading and fence mechanisms./Initial revision/
,,0.0673,pljava,Improved JNI linking. No loadLibrary necessary now./
,,0.0664,pljava,*** empty log message ***/
,,0.0652,pljava,Improved JNI linking. No loadLibrary necessary now./
,,0.0652,pljava,Improved JNI linking. No loadLibrary necessary now./
,,0.0673,pljava,Improved JNI linking. No loadLibrary necessary now./
,,0.0652,pljava,Improved JNI linking. No loadLibrary necessary now./
,,0.0673,pljava,Improved JNI linking. No loadLibrary necessary now./
,,0.0673,pljava,Improved JNI linking. No loadLibrary necessary now./
,,0.0673,pljava,Improved JNI linking. No loadLibrary necessary now./
,,0.0844,pljava,GCJ improvements/*** empty log message ***/*** empty log message ***/
,,0.0686,pljava,*** empty log message ***/
,,0.0664,pljava,*** empty log message ***/
,,0.0664,pljava,*** empty log message ***/
,,0.1179,pljava,*** empty log message ***/*** empty log message ***/*** empty log message ***/Added class resource handling and example of use./*** empty log message ***/
,,0.0664,pljava,*** empty log message ***/
,,0.0643,pljava,*** empty log message ***/
,,0.0865,pljava,*** empty log message ***/*** empty log message ***/
,,0.0686,pljava,*** empty log message ***/
,,0.0823,pljava,*** empty log message ***/*** empty log message ***/
,,0.0686,pljava,*** empty log message ***/
,,0.0686,pljava,*** empty log message ***/
,,0.0686,pljava,*** empty log message ***/
,,0.0686,pljava,*** empty log message ***/
,,0.0664,pljava,*** empty log message ***/
,,0.0664,pljava,*** empty log message ***/
,,0.0664,pljava,*** empty log message ***/
,,0.0664,pljava,*** empty log message ***/
,,0.0686,pljava,*** empty log message ***/
,,0.0759,pljava,Rewrite of fence mechanism/
,,0.0823,pljava,Rewrite of fence mechanism/
,,0.0759,pljava,Rewrite of fence mechanism/
,,0.0844,pljava,Rewrite of fence mechanism/
,,0.0823,pljava,Rewrite of fence mechanism/
,,0.1002,pljava,Rewrite of fence mechanism/Dropped support for versions prior to 8.0. Fixed bug causing stack check failur when backend was called from thread other than main Fixed stability issue related to GC and MemoryContexts/
,,0.08800000000000001,pljava,Fixed bug causing crash after fence rewrite when returning tuples./Changes needed in order to compile with 8.0.x/Rewrite of fence mechanism/
,,0.0855,pljava,Reinstated Exception traces when log level >= DEBUG1 Merged Invocation and CallContext Cleanup and refactoring/Rewrite of fence mechanism/
,,0.0844,pljava,Rewrite of fence mechanism/
,,0.0801,pljava,Rewrite of fence mechanism/
,,0.078,pljava,Rewrite of fence mechanism/
,,0.0844,pljava,Rewrite of fence mechanism/
,,0.0801,pljava,Rewrite of fence mechanism/
,,0.0758,pljava,Changes needed in order to compile with 8.0.x/Rewrite of fence mechanism/
,,0.0848,pljava,Removed JavaHandle and complex MemoryContext stuff that was no longer needed./Rewrite of fence mechanism/
,,0.078,pljava,Rewrite of fence mechanism/
,,0.0833,pljava,Refactoring and cleaning up./Rewrite of fence mechanism/
,,0.0609,pljava,Fixed some memory leaks/
,,0.0616,realm-java,Added experimental method to Table: findSortedLong(). NOTICE it does not return if the value was actually found or not you have to check that through a get() afterwards for now./
,,0.0775,realm-java,First working version. TODO: * Make the kotlin example work with the plugin (and re-enable it in the settings.grade file) * Make the plugin make sure itís applied after the android plugin (app or library) * Modify the model classes in the unit tests of the realm-library project * Write unit tests for the Gradle plugin/
,,0.0673,realm-java,Modify Java docs and comments. (#4124) * Remove unnecessary an addtional space. * Modify Java docs and comments. * PR feedback. * PR feedback./
,,0.0697,realm-java,"Waiting longer time for checking auth server (#3913) From log i saw sometimes the ros testing server fails to send the response, maybe 20+50 1s sometimes is too short when the docker host is under heave loading./"
,,0.0863,realm-java,Nh/update secure store example (#4482) * update secure-store example/
,,0.0673,realm-java,fixes (#4862) * fixes encryption with Sync (#4746)/
,,0.0648,realm-java,Add support for Connection State listeners (#6091)/
,,0.0652,rocksdb,[RocksJava] Integrated review comments from adamretter in D28209/
,,0.0652,rocksdb,[RocksJava] Integrated review comments from adamretter in D28209/
,,0.2679,rocksdb,"Shared dictionary compression using reference block Summary: This adds a new metablock containing a shared dictionary that is used to compress all data blocks in the SST file. The size of the shared dictionary is configurable in CompressionOptions and defaults to 0. Its currently only used for zlib/lz4/lz4hc, but the block will be stored in the SST regardless of the compression type if the user chooses a nonzero dictionary size. During compaction, computes the dictionary by randomly sampling the first output file in each subcompaction. It pre-computes the intervals to sample by assuming the output file will have the maximum allowable length. In case the file is smaller, some of the pre-computed sampling intervals can be beyond end-of-file, in which case we skip over those samples and the dictionary will be a bit smaller. After the dictionary is generated using the first file in a subcompaction, it is loaded into the compression library before writing each block in each subsequent file of that subcompaction. On the read path, gets the dictionary from the metablock, if it exists. Then, loads that dictionary into the compression library before reading each block. Test Plan: new unit test Reviewers: yhchiang, IslamAbdelRahman, cyan, sdong Reviewed By: sdong Subscribers: andrewkr, yoshinorim, kradhakrishnan, dhruba, leveldb Differential Revision: XPRESS compresssion on Windows. (#1081) Comparable with Snappy on comp ratio. Implemented using Windows API, does not require external package. Avaiable since Windows 8 and server 2012. Use with CMake to enable./"
,,0.2037,rocksdb,"Add bottommost_compression option Summary: Add a new option that can be used to set a specific compression algorithm for bottommost level. This option will only affect levels larger than base level. I have also updated CompactionJobInfo to include the compression algorithm used in compaction Test Plan: added new unittest existing unittests Reviewers: andrewkr, yhchiang, sdong Reviewed By: sdong Subscribers: lightmark, andrewkr, dhruba, yoshinorim Differential Revision: dictionary compression using reference block Summary: This adds a new metablock containing a shared dictionary that is used to compress all data blocks in the SST file. The size of the shared dictionary is configurable in CompressionOptions and defaults to 0. Its currently only used for zlib/lz4/lz4hc, but the block will be stored in the SST regardless of the compression type if the user chooses a nonzero dictionary size. During compaction, computes the dictionary by randomly sampling the first output file in each subcompaction. It pre-computes the intervals to sample by assuming the output file will have the maximum allowable length. In case the file is smaller, some of the pre-computed sampling intervals can be beyond end-of-file, in which case we skip over those samples and the dictionary will be a bit smaller. After the dictionary is generated using the first file in a subcompaction, it is loaded into the compression library before writing each block in each subsequent file of that subcompaction. On the read path, gets the dictionary from the metablock, if it exists. Then, loads that dictionary into the compression library before reading each block. Test Plan: new unit test Reviewers: yhchiang, IslamAbdelRahman, cyan, sdong Reviewed By: sdong Subscribers: andrewkr, yoshinorim, kradhakrishnan, dhruba, leveldb Differential Revision: options.compaction_measure_io_stats to options.report_bg_io_stats and include flush too. Summary: It is useful to print out IO stats in flush jobs too. Extend options.compaction_measure_io_stats to flush jobs and raname it. Test Plan: Try db_bench and see the stats are printed out. Reviewers: yhchiang Reviewed By: yhchiang Subscribers: kradhakrishnan, yiwu, IslamAbdelRahman, leveldb, andrewkr, dhruba Differential Revision: some RocksDB default options Summary: Change some RocksDB default options to make it more friendly to server workloads. Test Plan: Run all existing tests Reviewers: yhchiang, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: sumeet, muthu, benj, MarkCallaghan, igor, leveldb, andrewkr, dhruba Differential Revision: typo in options logging/"
,,0.2475,rocksdb,"OptimizeForSmallDb(): revert some options whose defaults were just changed Summary: We changed default options of max_open_files and max_file_opening_threads but didnt revert it in OptimizeForSmallDb(). Test Plan: Add a unit test Reviewers: igor, yhchiang, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: leveldb, andrewkr, dhruba Differential Revision: dictionary compression using reference block Summary: This adds a new metablock containing a shared dictionary that is used to compress all data blocks in the SST file. The size of the shared dictionary is configurable in CompressionOptions and defaults to 0. Its currently only used for zlib/lz4/lz4hc, but the block will be stored in the SST regardless of the compression type if the user chooses a nonzero dictionary size. During compaction, computes the dictionary by randomly sampling the first output file in each subcompaction. It pre-computes the intervals to sample by assuming the output file will have the maximum allowable length. In case the file is smaller, some of the pre-computed sampling intervals can be beyond end-of-file, in which case we skip over those samples and the dictionary will be a bit smaller. After the dictionary is generated using the first file in a subcompaction, it is loaded into the compression library before writing each block in each subsequent file of that subcompaction. On the read path, gets the dictionary from the metablock, if it exists. Then, loads that dictionary into the compression library before reading each block. Test Plan: new unit test Reviewers: yhchiang, IslamAbdelRahman, cyan, sdong Reviewed By: sdong Subscribers: andrewkr, yoshinorim, kradhakrishnan, dhruba, leveldb Differential Revision: some RocksDB default options Summary: Change some RocksDB default options to make it more friendly to server workloads. Test Plan: Run all existing tests Reviewers: yhchiang, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: sumeet, muthu, benj, MarkCallaghan, igor, leveldb, andrewkr, dhruba Differential Revision:"
,,0.2373,rocksdb,"Shared dictionary compression using reference block Summary: This adds a new metablock containing a shared dictionary that is used to compress all data blocks in the SST file. The size of the shared dictionary is configurable in CompressionOptions and defaults to 0. Its currently only used for zlib/lz4/lz4hc, but the block will be stored in the SST regardless of the compression type if the user chooses a nonzero dictionary size. During compaction, computes the dictionary by randomly sampling the first output file in each subcompaction. It pre-computes the intervals to sample by assuming the output file will have the maximum allowable length. In case the file is smaller, some of the pre-computed sampling intervals can be beyond end-of-file, in which case we skip over those samples and the dictionary will be a bit smaller. After the dictionary is generated using the first file in a subcompaction, it is loaded into the compression library before writing each block in each subsequent file of that subcompaction. On the read path, gets the dictionary from the metablock, if it exists. Then, loads that dictionary into the compression library before reading each block. Test Plan: new unit test Reviewers: yhchiang, IslamAbdelRahman, cyan, sdong Reviewed By: sdong Subscribers: andrewkr, yoshinorim, kradhakrishnan, dhruba, leveldb Differential Revision: column family name in SST file Summary: Added the column family name to the properties block. This property is omitted only if the property is unavailable, such as when RepairDB() writes SST files. In a next diff, I will change RepairDB to use this new property for deciding to which column family an existing SST file belongs. If this property is missing, it will add it to the ""unknown"" column family (same as its existing behavior). Test Plan: New unit test: $ ./db_table_properties_test Reviewers: IslamAbdelRahman, yhchiang, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.2911,rocksdb,"Shared dictionary compression using reference block Summary: This adds a new metablock containing a shared dictionary that is used to compress all data blocks in the SST file. The size of the shared dictionary is configurable in CompressionOptions and defaults to 0. Its currently only used for zlib/lz4/lz4hc, but the block will be stored in the SST regardless of the compression type if the user chooses a nonzero dictionary size. During compaction, computes the dictionary by randomly sampling the first output file in each subcompaction. It pre-computes the intervals to sample by assuming the output file will have the maximum allowable length. In case the file is smaller, some of the pre-computed sampling intervals can be beyond end-of-file, in which case we skip over those samples and the dictionary will be a bit smaller. After the dictionary is generated using the first file in a subcompaction, it is loaded into the compression library before writing each block in each subsequent file of that subcompaction. On the read path, gets the dictionary from the metablock, if it exists. Then, loads that dictionary into the compression library before reading each block. Test Plan: new unit test Reviewers: yhchiang, IslamAbdelRahman, cyan, sdong Reviewed By: sdong Subscribers: andrewkr, yoshinorim, kradhakrishnan, dhruba, leveldb Differential Revision:"
,,0.1782,rocksdb,"[rocksdb] Memtable Log Referencing and Prepared Batch Recovery Summary: This diff is built on top of WriteBatch modification: and adds the required functionality to rocksdb core necessary for rocksdb to support 2PC. modfication of DBImpl::WriteImpl() added two arguments *uint64_t log_used nullptr, uint64_t log_ref 0; *log_used is an output argument which will return the log number which the incoming batch was inserted into, 0 if no WAL insert took place. log_ref is a supplied log_number which all memtables inserted into will reference after the batch insert takes place. This number will reside in FindMinPrepLogReferencedByMemTable() until all Memtables insertinto have flushed. Recovery/writepath is now aware of prepared batches and commit and rollback markers. Test Plan: There is currently no test on this diff. All testing of this functionality takes place in the Transaction layer/diff but I will add some testing. Reviewers: IslamAbdelRahman, sdong Subscribers: leveldb, santoshb, andrewkr, vasilep, dhruba, hermanlee4 Differential Revision:"
,,0.1845,rocksdb,"[rocksdb] Memtable Log Referencing and Prepared Batch Recovery Summary: This diff is built on top of WriteBatch modification: and adds the required functionality to rocksdb core necessary for rocksdb to support 2PC. modfication of DBImpl::WriteImpl() added two arguments *uint64_t log_used nullptr, uint64_t log_ref 0; *log_used is an output argument which will return the log number which the incoming batch was inserted into, 0 if no WAL insert took place. log_ref is a supplied log_number which all memtables inserted into will reference after the batch insert takes place. This number will reside in FindMinPrepLogReferencedByMemTable() until all Memtables insertinto have flushed. Recovery/writepath is now aware of prepared batches and commit and rollback markers. Test Plan: There is currently no test on this diff. All testing of this functionality takes place in the Transaction layer/diff but I will add some testing. Reviewers: IslamAbdelRahman, sdong Subscribers: leveldb, santoshb, andrewkr, vasilep, dhruba, hermanlee4 Differential Revision:"
,,0.1339,rocksdb,"[rocksdb] 2PC double recovery bug fix Summary: 1. prepare() 2. crash 3. recover 4. commit() 5. crash 6. data is lost This is due to the transaction data still only residing in the WAL but because the logs were flushed on the first recovery the data is ignored on the second recovery. We must scan all logs found on recovery and only ignore redundant data at the time of replay. It is not possible to know which logs still contain relevant data at time of recovery. We cannot simply ignore a log because all of the non-2pc data it contains has already been written to L0. The changes made to MemTableInserter are to ensure that prepared sections are still recovered even if all of the non-2pc data in that log has already been flushed to L0. Test Plan: Provided test. Reviewers: sdong Subscribers: andrewkr, hermanlee4, dhruba, leveldb Differential Revision: Memtable Log Referencing and Prepared Batch Recovery Summary: This diff is built on top of WriteBatch modification: and adds the required functionality to rocksdb core necessary for rocksdb to support 2PC. modfication of DBImpl::WriteImpl() added two arguments *uint64_t log_used nullptr, uint64_t log_ref 0; *log_used is an output argument which will return the log number which the incoming batch was inserted into, 0 if no WAL insert took place. log_ref is a supplied log_number which all memtables inserted into will reference after the batch insert takes place. This number will reside in FindMinPrepLogReferencedByMemTable() until all Memtables insertinto have flushed. Recovery/writepath is now aware of prepared batches and commit and rollback markers. Test Plan: There is currently no test on this diff. All testing of this functionality takes place in the Transaction layer/diff but I will add some testing. Reviewers: IslamAbdelRahman, sdong Subscribers: leveldb, santoshb, andrewkr, vasilep, dhruba, hermanlee4 Differential Revision: lines to adhere to 80 char limit/"
,,0.1678,rocksdb,"[rocksdb] Memtable Log Referencing and Prepared Batch Recovery Summary: This diff is built on top of WriteBatch modification: and adds the required functionality to rocksdb core necessary for rocksdb to support 2PC. modfication of DBImpl::WriteImpl() added two arguments *uint64_t log_used nullptr, uint64_t log_ref 0; *log_used is an output argument which will return the log number which the incoming batch was inserted into, 0 if no WAL insert took place. log_ref is a supplied log_number which all memtables inserted into will reference after the batch insert takes place. This number will reside in FindMinPrepLogReferencedByMemTable() until all Memtables insertinto have flushed. Recovery/writepath is now aware of prepared batches and commit and rollback markers. Test Plan: There is currently no test on this diff. All testing of this functionality takes place in the Transaction layer/diff but I will add some testing. Reviewers: IslamAbdelRahman, sdong Subscribers: leveldb, santoshb, andrewkr, vasilep, dhruba, hermanlee4 Differential Revision: warnings and ensure correct int behavior on 32-bit platforms./"
,,0.1521,rocksdb,"[rocksdb] Memtable Log Referencing and Prepared Batch Recovery Summary: This diff is built on top of WriteBatch modification: and adds the required functionality to rocksdb core necessary for rocksdb to support 2PC. modfication of DBImpl::WriteImpl() added two arguments *uint64_t log_used nullptr, uint64_t log_ref 0; *log_used is an output argument which will return the log number which the incoming batch was inserted into, 0 if no WAL insert took place. log_ref is a supplied log_number which all memtables inserted into will reference after the batch insert takes place. This number will reside in FindMinPrepLogReferencedByMemTable() until all Memtables insertinto have flushed. Recovery/writepath is now aware of prepared batches and commit and rollback markers. Test Plan: There is currently no test on this diff. All testing of this functionality takes place in the Transaction layer/diff but I will add some testing. Reviewers: IslamAbdelRahman, sdong Subscribers: leveldb, santoshb, andrewkr, vasilep, dhruba, hermanlee4 Differential Revision: should not be used if there is outstanding WAL files Summary: CompactedDB skips memtable. So we shouldnt use compacted DB if there is outstanding WAL files. Test Plan: Change to options.max_open_files perf context test to create a compacted DB, which we shouldnt do. Reviewers: yhchiang, kradhakrishnan, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: leveldb, andrewkr, dhruba Differential Revision:"
,,0.1794,rocksdb,"[rocksdb] Memtable Log Referencing and Prepared Batch Recovery Summary: This diff is built on top of WriteBatch modification: and adds the required functionality to rocksdb core necessary for rocksdb to support 2PC. modfication of DBImpl::WriteImpl() added two arguments *uint64_t log_used nullptr, uint64_t log_ref 0; *log_used is an output argument which will return the log number which the incoming batch was inserted into, 0 if no WAL insert took place. log_ref is a supplied log_number which all memtables inserted into will reference after the batch insert takes place. This number will reside in FindMinPrepLogReferencedByMemTable() until all Memtables insertinto have flushed. Recovery/writepath is now aware of prepared batches and commit and rollback markers. Test Plan: There is currently no test on this diff. All testing of this functionality takes place in the Transaction layer/diff but I will add some testing. Reviewers: IslamAbdelRahman, sdong Subscribers: leveldb, santoshb, andrewkr, vasilep, dhruba, hermanlee4 Differential Revision:"
,,0.1708,rocksdb,"Fix calling GetCurrentMutableCFOptions in CompactionJob::ProcessKeyValueCompaction() Summary: GetCurrentMutableCFOptions() can only be called when DB mutex is held so we cannot call it in CompactionJob::ProcessKeyValueCompaction() since its not holding the db mutex Test Plan: make check Reviewers: sdong, andrewkr Reviewed By: andrewkr Subscribers: andrewkr, dhruba Differential Revision: EventListener::OnTableFileCreationStarted() callback Summary: Added EventListener::OnTableFileCreationStarted. EventListener::OnTableFileCreated will be called on failure case. User can check creation status via TableFileCreationInfo::status. Test Plan: unit test. Reviewers: dhruba, yhchiang, ott, sdong Reviewed By: sdong Subscribers: sdong, kradhakrishnan, IslamAbdelRahman, andrewkr, yhchiang, leveldb, ott, dhruba Differential Revision: dictionary compression using reference block Summary: This adds a new metablock containing a shared dictionary that is used to compress all data blocks in the SST file. The size of the shared dictionary is configurable in CompressionOptions and defaults to 0. Its currently only used for zlib/lz4/lz4hc, but the block will be stored in the SST regardless of the compression type if the user chooses a nonzero dictionary size. During compaction, computes the dictionary by randomly sampling the first output file in each subcompaction. It pre-computes the intervals to sample by assuming the output file will have the maximum allowable length. In case the file is smaller, some of the pre-computed sampling intervals can be beyond end-of-file, in which case we skip over those samples and the dictionary will be a bit smaller. After the dictionary is generated using the first file in a subcompaction, it is loaded into the compression library before writing each block in each subsequent file of that subcompaction. On the read path, gets the dictionary from the metablock, if it exists. Then, loads that dictionary into the compression library before reading each block. Test Plan: new unit test Reviewers: yhchiang, IslamAbdelRahman, cyan, sdong Reviewed By: sdong Subscribers: andrewkr, yoshinorim, kradhakrishnan, dhruba, leveldb Differential Revision: data race issue when sub-compaction is used in CompactionJob Summary: When subcompaction is used, all subcompactions share the same Compaction pointer in CompactionJob while each subcompaction all keeps their mutable stats in SubcompactionState. However, therere still some mutable part that is currently store in the shared Compaction pointer. This patch makes two changes: 1. Make the shared Compaction pointer const so that it can never be modified during the compaction. 2. Move necessary states from Compaction to SubcompactionState. 3. Make functions of Compaction const if the function does not modify its internal state. Test Plan: rocksdb and MyRocks test Reviewers: sdong, kradhakrishnan, andrewkr, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: andrewkr, dhruba, yoshinorim, gunnarku, leveldb Differential Revision: SstFileManager::SetMaxAllowedSpaceUsage() to cap disk space usage Summary: Introude SstFileManager::SetMaxAllowedSpaceUsage() that can be used to limit the maximum space usage allowed for RocksDB. When this limit is exceeded WriteImpl() will fail and return Status::Aborted() Test Plan: unit testing Reviewers: yhchiang, anthony, andrewkr, sdong Reviewed By: sdong Subscribers: dhruba Differential Revision:"
