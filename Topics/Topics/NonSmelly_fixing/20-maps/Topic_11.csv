Topic_no,Keywords,Contrib,System,Text
11,"android, add, cleanup, fix, issue, file, update, remove, work, refactor, make, bug, check, status, avoid, time, change, detail, build, android_transfer",0.0891,conscrypt,"Remove all remaining Android"" tags. Ive fixed a few typos, and removed a few of the more egregiously nonsensical or incorrect comments that were nearby. Change-Id: I35851baebd532f949cc269f4738a26eeb9b6e697/"
,,0.0718,conscrypt,Provide key context Bug: 6249185 Make the key context available. Change-Id: I51967e2a164b3f83d5d5096add7199c3a121da06/
,,0.0731,conscrypt,NativeCrypto: throw instead of return null We should not return null for items that cannot be extracted. Instead throw UnsupportedOperationException so we dont break the API contract. Change-Id: I09b0854c36f02b5b7ead2fb802f1454353b4cf6e/
,,0.0824,conscrypt,NativeCrypto: throw instead of return null We should not return null for items that cannot be extracted. Instead throw UnsupportedOperationException so we dont break the API contract. Change-Id: I09b0854c36f02b5b7ead2fb802f1454353b4cf6e/
,,0.1802,conscrypt,"am 760b14cc: am da8fb260: am dd9517dc: OpenSSLRandom: throw exception when seed null * commit 760b14cc3b74e4ee8e7c5bcf6ac501d8e6dada7e: OpenSSLRandom: throw exception when seed null/am da8fb260: am dd9517dc: OpenSSLRandom: throw exception when seed null * commit da8fb260da6ead44742f0a18bb18a698d060babe: OpenSSLRandom: throw exception when seed null/am dd9517dc: OpenSSLRandom: throw exception when seed null * commit dd9517dc39949ad6e7eac56e6960cf2b77927186: OpenSSLRandom: throw exception when seed null/OpenSSLRandom: throw exception when seed null Even though we dont really pay attention to the seed given to us, we should throw NullPointerException since someone calling with a null parameter is probably making a mistake anyway. Bug: 20521744 Change-Id: Ib274c4abc059b6e4d3eb6cf95d30fec605284948/"
,,0.0776,conscrypt,"OpenSSLX509CertPath: add null check in fromEncoding(InputStream) Note the null check was in fromEncoding(InputStream, String) already. Bug: 25926066 Change-Id: Ic4a0d514c6b8e6d8af349a8202f26854f6975cd6/"
,,0.0725,conscrypt,Remove unused imports left over from removing OpenSSL code Test: lunch aosp_bullhead-userdebug; make Change-Id: I5b8cdcfbe45a866005209ed2e6f365a1378d46d5/
,,0.0657,conscrypt,OpenSSLRandom: remove unused field Test: lunch aosp_bullhead-userdebug; make Change-Id: I1784de74d2cbab1a6a7f85deaeaff8bde32ef109/
,,0.0687,conscrypt,Remove unused imports left over from removing OpenSSL code Test: lunch aosp_bullhead-userdebug; make Change-Id: I5b8cdcfbe45a866005209ed2e6f365a1378d46d5/
,,0.0782,conscrypt,Remove unused imports left over from removing OpenSSL code Test: lunch aosp_bullhead-userdebug; make Change-Id: I5b8cdcfbe45a866005209ed2e6f365a1378d46d5/
,,0.0929,conscrypt,Improve performance of OpenSSLEngine Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I947bd3701e90bd65104f8f5c07ba218c4e051944/
,,0.0687,conscrypt,Deprecate PSKKeyManager PSKKeyManager does not work with upcoming TLS 1.3. The abstraction is likely to be completely removed in the future. Test: mmm external/conscrypt Bug: 30978706 Change-Id: Ide79411828ca35da2212713681e3f4c80213abcd/
,,0.091,conscrypt,Improve performance of OpenSSLEngine Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Change-Id: I947bd3701e90bd65104f8f5c07ba218c4e051944/
,,0.1438,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1419,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1419,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1438,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1359,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1214,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes Use a PreloadHolder Use a PreloadHolder to separate device-specific static initialization from generic initialization. Bug: 34956610 Test: m Test: Device boots Change-Id: I450f21e3bb3d1c4f00c0291799034803fc59e853/"
,,0.1399,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1478,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1498,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1399,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1458,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1438,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1458,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1478,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1399,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1478,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1458,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1419,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1458,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1419,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1478,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1438,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1438,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1399,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1438,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1379,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1689,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/Specify the class explicitly in SSLSocket test Otherwise this causes compile errors on the Android compiler: error: incompatible types: List<SocketType> cannot be converted to Iterable<Object>/"
,,0.1478,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1458,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1525,conscrypt,"Benchmark fixes and various cleanup. (#188)/Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes error-prone and fix all the errors (#146)/Configure OCSP and SCTs on the SSL, not SSL_CTX. As Conscrypt is currently set up, one SSL_CTX (owned, ultimately, by the SSLContext) may correspond to multiple SSLParameters which, in the Java API, are configured on the SSLSocket or SSLEngine directly. Thus we should use the SSL versions of the APIs which now exist. This avoids mutating an SSL_CTX which may be shared by multiple SSLs with different configurations. Change-Id: I19485c316087004c6050d85520b0169f2ca0d493/Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/"
,,0.1,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.098,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.096,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.1,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.098,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.098,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.1,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.1281,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/Fixing various javadoc issues. (#124) Also locking down access to a couple utility classes./
,,0.1,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.1,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.098,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.1,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.096,conscrypt,Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/
,,0.1351,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes error-prone and fix all the errors (#146)/"
,,0.1438,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.2083,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/Fixing various javadoc issues. (#124) Also locking down access to a couple utility classes./"
,,0.1478,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1667,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes OCSP and SCTs on the SSL, not SSL_CTX. As Conscrypt is currently set up, one SSL_CTX (owned, ultimately, by the SSLContext) may correspond to multiple SSLParameters which, in the Java API, are configured on the SSLSocket or SSLEngine directly. Thus we should use the SSL versions of the APIs which now exist. This avoids mutating an SSL_CTX which may be shared by multiple SSLs with different configurations. Change-Id: I19485c316087004c6050d85520b0169f2ca0d493/Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/Fixing various javadoc issues. (#124) Also locking down access to a couple utility classes./"
,,0.1438,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1438,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1438,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1438,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1867,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/"
,,0.1478,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1498,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1849,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/"
,,0.1438,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1438,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.2149,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/Fixing various javadoc issues. (#124) Also locking down access to a couple utility classes./"
,,0.1827,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes Java 7 compatibility A platform that Conscrypt is built on still uses Java 7, so keep compatibility with it. To avoid ErrorProne warnings, suppress the check for this./Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/Implement X509Certificate.verify(PublicKey, Provider). Removed NoSuchProvider from verifyOpenSSL(OpenSSLKey pkey), native code underneath doesnt throw it. Changed unblundled version to current to fix the breakage due to missing verify method in earlier API. (cherry picked from commit f881571464b8b989d000fcd33846ae2a653fb2cf) Test: CtsLibcoreTestCases Bug: 31294527 Change-Id: Ide755ccc0ad1163ac8dafc9bce762f680671a488/"
,,0.1399,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1438,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1478,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1812,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/"
,,0.1498,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.138,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes Error-Prone warnings These warnings are not useful here, so suppress them./"
,,0.1794,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/"
,,0.1419,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.16399999999999998,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes SSLHandshakeException for bad certs. (#147) Also expanding some of the test coverage in OpenSSLEngineImplTest./Make SSLUtils public for testing but On Android the class-under-test is going to be in the bootclasspath ClassLoader, but the test-class will be in the ""app"" ClassLoader. This means that you cant directly test package-scoped classes or methods. Make this public so we can test it on Android, but marked so it doesnt end up in the Javadocs. Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I127693e1092fa9016c4a5d89218cc8de0c3421a5/Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/Less restrictive output buffer size in wrap() (#114) We currently require that the output buffer be >= MAX_PACKET_SIZE. This is needlessly strict and causes the Netty tests to fail, since they only use 2k buffers. This PR copies over some of the recent changes from Netty to handle this properly./"
,,0.1458,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1379,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1458,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1831,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/"
,,0.1812,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/"
,,0.1458,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.2149,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/Fixing various javadoc issues. (#124) Also locking down access to a couple utility classes./"
,,0.1806,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes RuntimeException catching This is a silly catch/rethrow that does nothing besides potentially creating confusion. Remove it./Merge upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/"
,,0.1469,conscrypt,"Adding all factory methods for engine socket. (#192) Also properly throwing SSLHandshakeException in some cases. Fixes down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/"
,,0.2067,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes upstream master Test: cts-tradefed run cts CtsLibcoreOkHttpTestCases arm64-v8a Test: cts-tradefed run cts CtsLibcoreTestCases arm64-v8a Change-Id: I2c0020c76b48f549b898e09be0612710616ea602/Fixing various javadoc issues. (#124) Also locking down access to a couple utility classes./"
,,0.1399,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1419,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1478,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1419,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.1458,conscrypt,"Locking down public APIs (#157) Tried to be as aggressive as I could, so this probably deserves a fairly thorough review. I left most of OpenSSLSocketImpl public, because I think its needed by a few external projects. I also did some cleanup work to get rid of a bunch of compiler warnings that we seem to have accumulated. Fixes"
,,0.0789,conscrypt,Fix back-compat issue from recent import. (#318) Also fixing a couple of new compiler warnings./
,,0.0731,conscrypt,Fix back-compat issue from recent import. (#318) Also fixing a couple of new compiler warnings./
,,0.1066,conscrypt,"Add SHA1 signature algorithms to the OID blacklist (#463) SHA1 is known weak and deprecated in publicly trusted certificates since 2014, Android should not trust these certificates. Android bug: 77901166/"
,,0.1029,conscrypt,"Add SHA1 signature algorithms to the OID blacklist (#463) SHA1 is known weak and deprecated in publicly trusted certificates since 2014, Android should not trust these certificates. Android bug: 77901166/"
,,0.1047,conscrypt,"Add SHA1 signature algorithms to the OID blacklist (#463) SHA1 is known weak and deprecated in publicly trusted certificates since 2014, Android should not trust these certificates. Android bug: 77901166/"
,,0.129,conscrypt,"Stop using InetAddress.isNumeric() (#588) This method is likely to be blacklisted from reflective access on Android, and we have an implementation that works acceptably./"
,,0.066,frostwire,[desktop] Fixed desktop compilation/
,,0.1339,frostwire,[desktop] Fixed copyright panel for new licenses type/[desktop] Fixing compilation issues with new Licenses type/
,,0.0751,frostwire,[common] Should fix Monova search. Issue (tested only on desktop)/
,,0.0932,frostwire,[common] Removed encodeHexString to avoid android compatibility issues [android] Fixed compilation/
,,0.066,frostwire,[desktop] Fixed desktop compilation/
,,0.096,frostwire,[common] Fixes EZTV search (Issue
,,0.0772,frostwire,[common] Should fix Monova search. Issue (tested only on desktop)/
,,0.0906,frostwire,[common] more dry refactor on size calculation. compilation issues fixed./
,,0.0848,frostwire,[common] more dry refactor on size calculation. compilation issues fixed./
,,0.0887,frostwire,[common] more dry refactor on size calculation. compilation issues fixed./
,,0.0809,frostwire,[common] more dry refactor on size calculation. compilation issues fixed./
,,0.129,frostwire,[common] Fixes EZTV search (Issue Should fix Monova search. Issue (tested only on desktop)/
,,0.0989,frostwire,"[android] almost ready to merge, cleaning up, fixes./[android] next batch of fragment refactors and fixes./"
,,0.0854,frostwire,[android] next batch of fragment refactors and fixes./
,,0.1466,frostwire,[android] fixes on playlist handling./[android] avoid crash NavUtils.openArtistProfile()/[android] avoid crash NavUtils.openArtistProfile()/
,,0.439,frostwire,"[android/apollo] Bug fix. Now a playlist can be created out of More by artist songs./[android] Fixes issue update My files headers on file deletion. Updates ""My Files"" header file count when: File is removed from ""My Files"" File is/are removed from ""My Music"", context menu actions. File is removed from Music Player screen during playback. File is/are removed from a finished transfer./[android] build 242 Fixes refresh issues adding/removing playlists. Refactors, cleanup./[android] crash fix on array out of bounds./[android] fixes on playlist handling./[android] fix display of recents, refactor on albumLoader./[android] fixes on favorite fragment, adding to favorites./[android] next batch of fragment refactors and fixes./"
,,0.21100000000000002,frostwire,"[android] fixes issue with adapters adding null extra element at the end/[android] fixed scrolling issue on profile adapters./[android] mistery solved, several fixes, lots of logging to find it./[android] next batch of fragment refactors and fixes./"
,,0.1345,frostwire,"[android] Fixes issue creating playlist off of artist./[android] mistery solved, several fixes, lots of logging to find it./[android] next batch of fragment refactors and fixes./"
,,0.1743,frostwire,"[android] fixes issue with adapters adding null extra element at the end/[android] crash on startup fix./[android] fixed scrolling issue on profile adapters./[android] mistery solved, several fixes, lots of logging to find it./"
,,0.075,frostwire,"[android] almost ready to merge, cleaning up, fixes./[android] mistery solved, several fixes, lots of logging to find it./"
,,0.3056,frostwire,"[android] fixed scrolling issue on profile adapters./[android] dont call refresh() inside restartLoader. minor optimizations. hunting for bug on favoritefragment./[android] fixes issue where last added favorite wasnt displaying. other refresh issues remain./[android] fix display of recents, refactor on albumLoader./[android] almost ready to merge, cleaning up, fixes./[android] mistery solved, several fixes, lots of logging to find it./[android] cleanup, build fix./[android] next batch of fragment refactors and fixes./"
,,0.22699999999999998,frostwire,"[android] fixed scrolling issue on profile adapters./[android] dont call refresh() inside restartLoader. minor optimizations. hunting for bug on favoritefragment./[android] fixes issue where last added favorite wasnt displaying. other refresh issues remain./[android] almost ready to merge, cleaning up, fixes./[android] mistery solved, several fixes, lots of logging to find it./"
,,0.1355,frostwire,"[android] build 242 Fixes refresh issues adding/removing playlists. Refactors, cleanup./"
,,0.2023,frostwire,"[android] last fixes on create/rename playlist dialog./[android] build 242 Fixes refresh issues adding/removing playlists. Refactors, cleanup./"
,,0.1936,frostwire,"[android] last fixes on create/rename playlist dialog./[android] build 242 Fixes refresh issues adding/removing playlists. Refactors, cleanup./"
,,0.087,frostwire,"[android] cleanup, build fix./"
,,0.1158,frostwire,"[android] fix display of recents, refactor on albumLoader./[android] mistery solved, several fixes, lots of logging to find it./"
,,0.122,frostwire,"[android] fixes on favorite fragment, adding to favorites./"
,,0.172,frostwire,"[android] fixes crash on long pressing special playlists./[android] fixes on favorite fragment, adding to favorites./"
,,0.2113,frostwire,"[android] multiple fixes and cleanup. Back arrow on top bar and back button behave the same goBack(). If user is inside an album view, it goes back to the artist profile, otherwise it finishes the task. When an album is removed list of albums is refreshed and songs are removed from recent./[android] mistery solved, several fixes, lots of logging to find it./[android] next batch of fragment refactors and fixes./"
,,0.0895,frostwire,[common] Removed encodeHexString to avoid android compatibility issues [android] Fixed compilation/
,,0.2757,frostwire,"[android] Fixes issue update My files headers on file deletion. Updates ""My Files"" header file count when: File is removed from ""My Files"" File is/are removed from ""My Music"", context menu actions. File is removed from Music Player screen during playback. File is/are removed from a finished transfer./[android] fixed vpn urls./"
,,0.077,frostwire,[android] Cast exception was preventing proper function of image cache/
,,0.0863,frostwire,"[android] Fixed android compilation, implemented AndroidSettings/"
,,0.1554,frostwire,[android] search and other torrent downloads now support partial download dialog. edge cases to fix./
,,0.2537,frostwire,"[android] Fixes issue update My files headers on file deletion. Updates ""My Files"" header file count when: File is removed from ""My Files"" File is/are removed from ""My Music"", context menu actions. File is removed from Music Player screen during playback. File is/are removed from a finished transfer./[android] Avoiding crash while opening an url/"
,,0.1494,frostwire,"[android] Shows descriptive error on Internet dropped (Issue Clears errored cloud transfers./[android] Not using File.renameTo, it fails in Android if mount points are different/[android] SoundCloud transfers were not reporting progress correctly due to unknown file size. Fixes Issue"
,,0.2797,frostwire,"[android] Fixes issue update My files headers on file deletion. Updates ""My Files"" header file count when: File is removed from ""My Files"" File is/are removed from ""My Music"", context menu actions. File is removed from Music Player screen during playback. File is/are removed from a finished transfer./[android] Fixed NPE/[android] Updates file count after files are deleted. Fixes"
,,0.2346,frostwire,"[android] Fixes issue update My files headers on file deletion. Updates ""My Files"" header file count when: File is removed from ""My Files"" File is/are removed from ""My Music"", context menu actions. File is removed from Music Player screen during playback. File is/are removed from a finished transfer./[android] Updates file count after files are deleted. Fixes"
,,0.2415,frostwire,[android] fixed Illegal state exception with FragmentManager when showing AbstractConfirmListDialog./[android] copyright fixes. DRY refactor with dlg.setStyle()/[android] search and other torrent downloads now support partial download dialog. edge cases to fix./[android] cast crash fixed./[android] cast crash fixed./
,,0.1497,frostwire,[android] search and other torrent downloads now support partial download dialog. edge cases to fix./
,,0.2258,frostwire,"[android] Fixes issue update My files headers on file deletion. Updates ""My Files"" header file count when: File is removed from ""My Files"" File is/are removed from ""My Music"", context menu actions. File is removed from Music Player screen during playback. File is/are removed from a finished transfer./"
,,0.3619,frostwire,"[android] Fixes issue update My files headers on file deletion. Updates ""My Files"" header file count when: File is removed from ""My Files"" File is/are removed from ""My Music"", context menu actions. File is removed from Music Player screen during playback. File is/are removed from a finished transfer./[android] import cleanup, fixes broken build./[android] multiple fixes and cleanup. Back arrow on top bar and back button behave the same goBack(). If user is inside an album view, it goes back to the artist profile, otherwise it finishes the task. When an album is removed list of albums is refreshed and songs are removed from recent./"
,,0.2644,frostwire,"[android] Fixes issue update My files headers on file deletion. Updates ""My Files"" header file count when: File is removed from ""My Files"" File is/are removed from ""My Music"", context menu actions. File is removed from Music Player screen during playback. File is/are removed from a finished transfer./[android] Fixes possible issue removing files from SDCard in Lollypop file system. changelog./"
,,0.1023,frostwire,[android] Updated to jlibtorrent 1.1.0.21 and fixed issues with common changes/
,,0.0689,frostwire,[desktop] defensive NPE checks on BTDownloadMediator::doRefresh()/
,,0.1014,frostwire,[desktop] avoid touching the UI from a background thread (that could freeze the application)/[desktop] logic bug settting trackers/trackerless making torrent/
,,0.1043,frostwire,[desktop] Show update download progress on Tools menu. Fixes
,,0.1776,frostwire,[common] Construction of xpe parameters in magnet uri taking care of edge cases and memory issues/[common] Its better to debug jlibtorrent issues in the frostwire-jlibtorrent project/[android] fixing conflicts./[common] Synchronous stop of BTEngine (using destructor of native session)/
,,0.0712,frostwire,[android] fixing conflicts./[common] Fixed BTInfoAdditionalMetadataHolder with new preformatted_t entry type/
,,0.0967,frostwire,[android] Closes more descriptive error on Connection timed out for cloud transfers./
,,0.122,frostwire,[android] Fixed eztv (its better to use android.net.Uri)/
,,0.1269,frostwire,[android] try to stop and dismiss music faster. avoid issue of music that stopped coming back on next session./
,,0.2096,frostwire,[android] Fixes temporary fix to the Add to Playlist submenu in MyMusic Removed the old header. Looks more consistent with other dialogs. Will attempt to add a custom header later./[android] temporary fix to the Add to Playlist submenu in MyMusic Removed the old header. Looks more consistent with other dialogs. Will attempt to add a custom header later./
,,0.1103,frostwire,"Merge pull request from grzesiekrzaca/moving_playlist_double_list_modification_iside_a_critical_section [android] issue repositioning songs in playlist new branch/Everyting was ""ok"" in the View. The problem lay with no listener that would change the adapter (and data in system). Problem with the adapter is that it uses a copy of the data other than the one in ArryAdaper (why? 0.o) so that copy also has to be updated./"
,,0.1606,frostwire,[android] constant fix/[android] PREF_KEY_GUI_SUPPORT_FROSTWIRE wasnt fixed all the way/[android] better handling of action view intent (minor issue left with second open)/[android] Fixes
,,0.1061,frostwire,[android] Fixed network type in AndroidPlatform/
,,0.2274,frostwire,"[android] Multiple fixes. Respects ""Show Transfers"" preference for cloud downloads. based torrents search results work again. Shows a toast to appeace user in case torrent fetching takes a while when a torrent search result is clicked./"
,,0.0702,frostwire,[android] fixing conflicts./
,,0.0716,frostwire,[android] Fixes
,,0.2791,frostwire,"[android] Fixed eztv (its better to use android.net.Uri)/[android] Multiple fixes. Respects ""Show Transfers"" preference for cloud downloads. based torrents search results work again. Shows a toast to appeace user in case torrent fetching takes a while when a torrent search result is clicked./"
,,0.2606,frostwire,"[android] PREF_KEY_GUI_SUPPORT_FROSTWIRE wasnt fixed all the way/[android] settings activity shows message right after purchase. arithmetic error fixed on days left calculation. ads not turned off after purchase for some reason, seems like the store refreshing logic has changed and it broke./[android] avoid use of blocking queryInventory, keeping inventory for advance logic/[android] fail it you try to get days from an unsupported sku (returning is dangerous), refactor for a more terse code/[android] preference bug fixed, refactor, testing tool. PlayStore.purchasedProducts() fixed. Makes sure when a purchase has finished succesfully that all adnetworks are stopped immediatly. Preference to remove ads no longer disabled after purchase, click is handled appropiately. Added new testing use function to consume all one-time consumables. It is invoked after 20 clicks on the Remove Ads preferences after user has made a one-time purchase. s/LOGGER/LOG on RemoveAdsNetwork.java/[android] NPE fix/"
,,0.0923,frostwire,[android] improved Buy interaction. click issues gone./
,,0.0694,frostwire,[android] Fixes
,,0.0865,frostwire,[android] Dont fail due to failure in fd sync/[android] Workaround for timing issues related to SD card and media scanning/
,,0.1343,frostwire,[desktop] fixes bug where transfers wouldnt be shown upon a download starting./[common/desktop] should fix issues with FW not opening .TORRENT files/
,,0.1339,frostwire,[desktop] minor issue when resetting open source licenses checkbox on create torrent dialog/
,,0.071,frostwire,[desktop] fixes playback broken running from source./
,,0.1528,frostwire,[android] More edge cases and better shutdown. MusicUtils.mService renamed to MusicUtils.musicPlaybackServices Fixed log entry on Offers.dismissAndOrShutdownIfNecessary Cleanup/
,,0.2668,frostwire,"[android] fixed compilation/[android] MusicUtils, avoid NPEs/[android] NPE on MusicUtils.clearQueue/[android] fixes premature music service stop during music playback, refactor, much better shutdown./[android] More edge cases and better shutdown. MusicUtils.mService renamed to MusicUtils.musicPlaybackServices Fixed log entry on Offers.dismissAndOrShutdownIfNecessary Cleanup/"
,,0.106,frostwire,"[android] MusicUtils, avoid NPEs/"
,,0.1528,frostwire,[android] More edge cases and better shutdown. MusicUtils.mService renamed to MusicUtils.musicPlaybackServices Fixed log entry on Offers.dismissAndOrShutdownIfNecessary Cleanup/
,,0.223,frostwire,"[android] finish or shutdown on dismiss DRY refactor All ad networks reuse logic to handle dismiss or shutdown, fixing possible case where app wouldnt be shutdown on one of the networks. Future proofing improvement on Offers.getActiveNetworks() for new network codes or configuration typos./"
,,0.2108,frostwire,"[android] finish or shutdown on dismiss DRY refactor All ad networks reuse logic to handle dismiss or shutdown, fixing possible case where app wouldnt be shutdown on one of the networks. Future proofing improvement on Offers.getActiveNetworks() for new network codes or configuration typos./"
,,0.4703,frostwire,"[android] More edge cases and better shutdown. MusicUtils.mService renamed to MusicUtils.musicPlaybackServices Fixed log entry on Offers.dismissAndOrShutdownIfNecessary Cleanup/[android] Offers updates. (warning removal) Use static call for Banners.setLocation(false) (protection) Make sure other networks can be stopped even if one fails Avoid double .finish() in case finishAfterDimiss=true and shutdownAfter=true. the shutdown logic is responsible for the MainActivity finish() (protection) Avoid possible NPE in case both the activity and application parameters are null/[android] if a network has been passed and were shutting down, stop it/[android] mobfox hack not needed, issue fixed by mobfox/[android] avoid double finish/[android] finish or shutdown on dismiss DRY refactor All ad networks reuse logic to handle dismiss or shutdown, fixing possible case where app wouldnt be shutdown on one of the networks. Future proofing improvement on Offers.getActiveNetworks() for new network codes or configuration typos./[android] possible NPE loggin/[android] finish or shutdown on dismiss DRY refactor All ad networks reuse logic to handle dismiss or shutdown, fixing possible case where app wouldnt be shutdown on one of the networks. Future proofing improvement on Offers.getActiveNetworks() for new network codes or configuration typos./[android] fixed bug where ads couldnt be turned off on intellij build. simplification/"
,,0.0859,frostwire,[android] new preference to avoid asking over and over for location permission/
,,0.1822,frostwire,[android] fixed detection of plus flavor in Constants.IS_PLUS_OR_DEBUG/[android] new preference to avoid asking over and over for location permission/[android] fixed bug where ads couldnt be turned off on intellij build. simplification/
,,0.1485,frostwire,"[android] fixes premature music service stop during music playback, refactor, much better shutdown./[android] useful method for debugging purposes/"
,,0.0912,frostwire,[android] fix filter of fetch magnet background downloads/
,,0.1539,frostwire,[android] license headers fixes and cleanup/[android] fixed bug where ads couldnt be turned off on intellij build. simplification/
,,0.2321,frostwire,"[android] More edge cases and better shutdown. MusicUtils.mService renamed to MusicUtils.musicPlaybackServices Fixed log entry on Offers.dismissAndOrShutdownIfNecessary Cleanup/[android] Fixes auto-restarting on exit issue. the issue was MusicPlaybackServices shutdown logic. The way this service shuts itself down is by receiving a delayed PendingIntent (this is a way to start a service at a later time even if the app isnt running) via Androids AlarmManager. This shutdown was being scheduled in 60 seconds. If the service is started normally with Context.startService() its onStartCommand() method returns START_STICKY, but if its started with the special SHUTDOWN command, it checks if theres anything playing, and if its not playing, it releases everything and returns START_NOT_STICKY./"
,,0.223,frostwire,"[android] fixes premature music service stop during music playback, refactor, much better shutdown./[android] More edge cases and better shutdown. MusicUtils.mService renamed to MusicUtils.musicPlaybackServices Fixed log entry on Offers.dismissAndOrShutdownIfNecessary Cleanup/"
,,0.0823,frostwire,[android] less misleading debug message/[android] more robust NPE protection/[android] IabHelper NPE fix/
,,0.1894,frostwire,[desktop] playlist handling bug fixes bugfix: dragging starred track from some playlist onto another playlist would unmark track as starred bugfix: dragging starred track from starred woudl remove from starred accepts drops on starred/
,,0.1827,frostwire,[desktop] playlist handling bug fixes bugfix: dragging starred track from some playlist onto another playlist would unmark track as starred bugfix: dragging starred track from starred woudl remove from starred accepts drops on starred/
,,0.2483,frostwire,"[desktop] fixes bug dropping to starred playlist node/[desktop] playlist handling bug fixes bugfix: dragging starred track from some playlist onto another playlist would unmark track as starred bugfix: dragging starred track from starred woudl remove from starred accepts drops on starred/[desktop] fixes case when dropping from starred to regular playlist/[desktop] old bugfix, drag and drop files to Starred playlist item works/"
,,0.0724,frostwire,[desktop] Fixes bug with InstallerUpdater. Shows update message on first run. Reduces complexity/
,,0.1528,frostwire,"[android/crashfix] BTDownload, avoid executing code on invalid torrent handles. (#313)/[common] fixed issue of new added trackers not saved/[common] avoid pause and resume errors on invalid torrent handler/"
,,0.0843,frostwire,[common] better error reporting when downloading torrents from itorrents./
,,0.0843,frostwire,[common] better error reporting when downloading torrents from itorrents./
,,0.0879,frostwire,[common] fixed monova engine using the http torrent url/
,,0.4252,frostwire,"Merge pull request from gubatron/issue225_ringtone_playback_enchancement [android] Issues with ringtone playback (#225, Allow simple playback of ringtones without adversly affecting the users current playback and incidental stop/play status fix for file lists (affects both ringtone and music playback): something is playing and a ringtone is to be played the current played music will be paused a ringtone is playing and music playback is resumed/started then the ringtone will be stopped one ringtone can be played at the same time. Starting new playback will stop the old one. a ringtone that is being played will stop the playback out of the fragment or changing the tab carusel will stop playback of a ringtone. (User can no longer see the stop button, so its stopped for him)/"
,,0.162,frostwire,[android] cleanup and issues with custom views and android studio layout preview fixed on AudioPlayerActivity/
,,0.1583,frostwire,[android] cleanup and issues with custom views and android studio layout preview fixed on AudioPlayerActivity/
,,0.1583,frostwire,[android] cleanup and issues with custom views and android studio layout preview fixed on AudioPlayerActivity/
,,0.1415,frostwire,"[android] no more broadcast receiver leaks, improved abstractions, brainfart refactors/[android] WIP, AdNetworks abstraction refactor, starting, stopping and all common logic moved up to new AbstractAdNetwork/"
,,0.0887,frostwire,"[android] WIP, AdNetworks abstraction refactor, starting, stopping and all common logic moved up to new AbstractAdNetwork/"
,,0.4219,frostwire,"Merge pull request from gubatron/issue225_ringtone_playback_enchancement [android] Issues with ringtone playback (#225, Allow simple playback of ringtones without adversly affecting the users current playback and incidental stop/play status fix for file lists (affects both ringtone and music playback): something is playing and a ringtone is to be played the current played music will be paused a ringtone is playing and music playback is resumed/started then the ringtone will be stopped one ringtone can be played at the same time. Starting new playback will stop the old one. a ringtone that is being played will stop the playback out of the fragment or changing the tab carusel will stop playback of a ringtone. (User can no longer see the stop button, so its stopped for him)/"
,,0.172,frostwire,"[android] InMobi/Offers maintenance after 0 impressions from InMobi Moved InMobi constant to InMobiAdNetwork UIUtils.inUIThread() new convenience method InMobi checks/flags to avoid double interstitial loading Offer checks to avoid too rapid network re-initialization Raised InMobi reload period from 20secs to 60secs InMobiInterstitialListener now implements InMobiInterstitial.InterstitialAdListener2, as InMobiInterstitial.InterstitialAdListener is now deprecated and will be phased out soon InMobi InterstitialReloader avoids double interstitial loading It seems InMobi changed account parameters, everything should be working but error says to contact partner. I believe there was a conflict between MoPub and InMobi and thats why we were getting the double loading of InMobi interstitials, most likely will remove InMobi manual integration next (while leaving the libraries for MoPub to use)/[android] WIP, AdNetworks abstraction refactor, starting, stopping and all common logic moved up to new AbstractAdNetwork/[android] frostwire_features_all_downloads link fixed layout height, linked to frostwire.com/"
,,0.0765,frostwire,Wizard activity material update fix (#305)/
,,0.1763,frostwire,[android] feature/mobile data protection fix (#338) * [android] check if torrents should be resumed when on mobile data and mobile data saving is on * [android] seeding while on mobile data saving and no wifi/
,,0.25,frostwire,"[android] refactor on promo adapter, no more crash on plus/[android] multiple fixes with promo views/adapter makes sure remove ads offer isnt shown if user removed ads ads touch to frostwire features black background title view refactors WIP: crashing for some reason on plus build/[android] frostwire_features_all_downloads link fixed layout height, linked to frostwire.com/[android] no special offers in horizontal mode. fix number of slides when in landscape mode to always have an even number/[android] fixes index out of bounds for plus/"
,,0.0936,frostwire,"Merge pull request from gubatron/issue225_ringtone_playback_enchancement [android] Issues with ringtone playback (#225,"
,,0.4458,frostwire,"Merge pull request from gubatron/issue225_ringtone_playback_enchancement [android] Issues with ringtone playback (#225, Allow simple playback of ringtones without adversly affecting the users current playback and incidental stop/play status fix for file lists (affects both ringtone and music playback): something is playing and a ringtone is to be played the current played music will be paused a ringtone is playing and music playback is resumed/started then the ringtone will be stopped one ringtone can be played at the same time. Starting new playback will stop the old one. a ringtone that is being played will stop the playback out of the fragment or changing the tab carusel will stop playback of a ringtone. (User can no longer see the stop button, so its stopped for him)/[android] Fix for ringtone item selection and context menu the ability to check multiple ringtones by hiding the checkboxes there are no items for the context menu dont show it menu ignores other checked files (always can play and set as ringtone)/"
,,0.4241,frostwire,"Merge pull request from gubatron/issue225_ringtone_playback_enchancement [android] Issues with ringtone playback (#225, Allow simple playback of ringtones without adversly affecting the users current playback and incidental stop/play status fix for file lists (affects both ringtone and music playback): something is playing and a ringtone is to be played the current played music will be paused a ringtone is playing and music playback is resumed/started then the ringtone will be stopped one ringtone can be played at the same time. Starting new playback will stop the old one. a ringtone that is being played will stop the playback out of the fragment or changing the tab carusel will stop playback of a ringtone. (User can no longer see the stop button, so its stopped for him)/"
,,0.2391,frostwire,"[android] refactor on promo adapter, no more crash on plus/[android] multiple fixes with promo views/adapter makes sure remove ads offer isnt shown if user removed ads ads touch to frostwire features black background title view refactors WIP: crashing for some reason on plus build/[android] NPE proof and short-circuit execution after clicks are handled/[android] frostwire_features_all_downloads link fixed layout height, linked to frostwire.com/"
,,0.4351,frostwire,"Merge pull request from gubatron/issue225_ringtone_playback_enchancement [android] Issues with ringtone playback (#225, Allow simple playback of ringtones without adversly affecting the users current playback and incidental stop/play status fix for file lists (affects both ringtone and music playback): something is playing and a ringtone is to be played the current played music will be paused a ringtone is playing and music playback is resumed/started then the ringtone will be stopped one ringtone can be played at the same time. Starting new playback will stop the old one. a ringtone that is being played will stop the playback out of the fragment or changing the tab carusel will stop playback of a ringtone. (User can no longer see the stop button, so its stopped for him)/"
,,0.0813,frostwire,"[android] do not stop btEngine, the app never assumes btEngine is stopped./"
,,0.0972,frostwire,[desktop] Fixes issue on some macs where the netstat command could not be found We perform a lazy check on the existence of /usr/sbin/netstat if we are on macosx. It seems some macs may not have /usr/sbin in their PATH environment variable./
,,0.068,frostwire,"[desktop] use Loggers for debugging output/[desktop] avoid double call to BTEngine stop, one possible run in UI/"
,,0.1219,frostwire,"[common] Monova fixed. Monova no longer provides seeds. Since seeds tend to be always out of date, Ive provided a random number between 50 and 100. Monova no longer provides .torrent urls, well have to settle for magnet uris only/"
,,0.1318,frostwire,"[common] Monova fixed. Monova no longer provides seeds. Since seeds tend to be always out of date, Ive provided a random number between 50 and 100. Monova no longer provides .torrent urls, well have to settle for magnet uris only/"
,,0.1044,frostwire,"[android] avoid mixing v4 and native fragments, fix player orientation issue/"
,,0.1455,frostwire,"[android] Ensure all file descriptors have the right MIME Fixes issues related to Open action not being available on .torrents, .pdfs and other files/"
,,0.0879,frostwire,[android] change of 3g/4g option to wifi only option (#344) minor fix in AbstractActivity/
,,0.1326,frostwire,[android] Killed Screen Rotation lock feature Fragmentation seems to be a problem when it comes to reporting the right orientation of the device at the right moment./[android] fixes Branch rebased Missing license headers and EOF newline NavigationMenu is now final Missing removal of Constatns.AD_NETWORK_SHORTCODE_INMOBI references/[android] change of 3g/4g option to wifi only option (#344) minor fix in AbstractActivity/
,,0.1385,frostwire,[android] Killed Screen Rotation lock feature Fragmentation seems to be a problem when it comes to reporting the right orientation of the device at the right moment./[android] fixes Branch rebased Missing license headers and EOF newline NavigationMenu is now final Missing removal of Constatns.AD_NETWORK_SHORTCODE_INMOBI references/[android] change of 3g/4g option to wifi only option (#344) minor fix in AbstractActivity/
,,0.0899,frostwire,[android] change of 3g/4g option to wifi only option (#344) minor fix in AbstractActivity/
,,0.096,frostwire,[android] change of 3g/4g option to wifi only option (#344) minor fix in AbstractActivity/
,,0.0998,frostwire,[android] fixes FrostWire Plus Plus bug/
,,0.2235,frostwire,"[android] GridView for My Files Images and Audio (Issue UIUtils.openFile(..., boolean useFileProvider) To solve issue of FrostWire not knowing how to handle its own .apk update. Works on Android 7.0, need to test on Android 4.0, 5.0 and 6.0/[android] Fixes file opening issues for default storage (#414) * [android] Fixes file opening issues for default storage It seems that after SDK 24 we cannot pass a file:// URI to another app via Intent data since all the permissions to interact with such file are a responsability of our app android now decided we need to have a content provider for the files we send to other intents This is working so far for our default save location, but its problematic when the user changes the default save location to say an external storage device since the FileProvider documentation says that we must provide the directories before-hand when we declare the provider in the manifest. it is my hope that well find a way to manipulate such paths programatically somehow. Perhaps youve read about this already * [android] this works on the AVD sd card When you dream about the solution/[android] refactor to avoid one more type/"
,,0.096,frostwire,[android] change of 3g/4g option to wifi only option (#344) minor fix in AbstractActivity/
,,0.0673,frostwire,[android] drawable fix on AddToThisPlaylistMenuAction/
,,0.1826,frostwire,"[android] MyFiles new action toolbar on selection mode (#413) Brings out action mode on long press styled ActionMode toolbar Handles visibility of menu action depending on different factors like, number of files checked, file type, SAF Bug fix: When seeding was only enabled for WiFi, the file would still be added to transfers in Finished state. Now it doesnt add the file and it stays in the same screen as it was originally./"
,,0.1783,frostwire,"[android] UIUtils.openFile(..., boolean useFileProvider) To solve issue of FrostWire not knowing how to handle its own .apk update. Works on Android 7.0, need to test on Android 4.0, 5.0 and 6.0/"
,,0.3278,frostwire,"[android] GridView for My Files Images and Audio (Issue UIUtils.openFile(..., boolean useFileProvider) To solve issue of FrostWire not knowing how to handle its own .apk update. Works on Android 7.0, need to test on Android 4.0, 5.0 and 6.0/[android] Ensure all file descriptors have the right MIME Fixes issues related to Open action not being available on .torrents, .pdfs and other files/[android] MyFiles new action toolbar on selection mode (#413) Brings out action mode on long press styled ActionMode toolbar Handles visibility of menu action depending on different factors like, number of files checked, file type, SAF Bug fix: When seeding was only enabled for WiFi, the file would still be added to transfers in Finished state. Now it doesnt add the file and it stays in the same screen as it was originally./"
,,0.0899,frostwire,[android] change of 3g/4g option to wifi only option (#344) minor fix in AbstractActivity/
,,0.0879,frostwire,[android] change of 3g/4g option to wifi only option (#344) minor fix in AbstractActivity/
,,0.1367,frostwire,"[android] Ensure all file descriptors have the right MIME Fixes issues related to Open action not being available on .torrents, .pdfs and other files/"
,,0.1208,frostwire,"[android] dont crash at runtime if SecurityException happens in deleteTracks, documented future approach/[android] catch and log (useless) NPE in MusicUtils#playAll/[android] dont crash on SecurityException (MusicUtils.setRingtone)/"
,,0.21600000000000003,frostwire,"Apollo playlist ui update (#481) * [android] set up for updated UI in playlist tab * [android] added ënew empty playlistí functionality to the playlist tab on apollo * [android] added padding to TabLayout and increased size of Toolbar text * [android] deleted unused imports * [android] fixed double rendering bug on playlist adapter, refactor/"
,,0.0681,frostwire,"[android] catch SecurityException, avoid RuntimeException/"
,,0.2443,frostwire,"[android] fixes bug what crashed the app on deleting ëLast addedí playlist (#485) There was an issue with positioning of the playlists, and in consequence the delete option was now available on ëLast Addedí playlist. And it should not be available. In consequence deleting it crashed the app./Apollo playlist ui update (#481) * [android] set up for updated UI in playlist tab * [android] added ënew empty playlistí functionality to the playlist tab on apollo * [android] added padding to TabLayout and increased size of Toolbar text * [android] deleted unused imports * [android] fixed double rendering bug on playlist adapter, refactor/"
,,0.0854,frostwire,[android] one more potential context leak fixed/
,,0.3326,frostwire,"[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.0758,frostwire,[android] fix update path security issue for Nougat/
,,0.3241,frostwire,"[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.3226,frostwire,"[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.2201,frostwire,[android] avoid possible ANR loading torrents LollipopFileSystem.getDocument()s query can take too long on the main thread/[android] most likely a bug on new TransferManager.isResumable()/[android] fix of menu logic in TransfersFragment/[android] fixed issue of all transfers go to seeding/[android] fix resume of finished torrents while not seeding enable/[android] one more logic fix in getActiveUploads/[android] fixed logic in getActiveUploads/
,,0.3212,frostwire,"[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.0723,frostwire,[android] ringtone/audio playback from menu issue fixed/
,,0.3734,frostwire,"[android] MenuBuilder/FileListAdapter onclick NPE/[android] avoid leaking Picasso types in our API/[android] ringtone/audio playback from menu issue fixed/[android] necessary to use picasso 3.0.0-SNAPSHOT because of the head marker issue, using uri from MediaStore instead of internal one/[android] removed ImageLoader priority argument. It leaks picasso API, it does nothing if not using the internal picasso thread pool and its only useful in situations like an image stream feed, for which picasso is not good as a whole/[android] using extra key to pass file descriptor to image viewer to avoid mixing/override with an already stored data/[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.3167,frostwire,"[android] bug fix on filtered results. more on keywordtagview event handling there is still a bug when trying to change inclusion mode for a second tag, works fine with the first one only/[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.0854,frostwire,[android] fixed VPN discovery for android 7/
,,0.3127,frostwire,"[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.1384,frostwire,[android] avoid tree query when refreshing play/pause button in mini player/
,,0.3184,frostwire,"[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.3283,frostwire,"[android] ImageViewer fragment (#437) * [android] ImageViewer activity, Video/Pic grid improvements * [android] Fixes selection mode issues on grids, Media Overlay View, Pinch and Zoom * [android] ads metadata to image viewer fragment * [android] set wallpaper action non-blocking * [android] ImageLoader asyncload wraps fetch() to use Picassos background threads * [android] New FileInformation action shows file information dialog * [android] add preview screen listener * [android] Cleanup and bug fixes. Fixes bug on ImageViewerFragment where after renaming an image and rotating the screen, the window title would revert to the original file name. Cleanup, license headers./"
,,0.0824,frostwire,[android] custom main thread pool for Engine with runtime debug protections (commented to work on it)/
,,0.0789,frostwire,[common] avoid costly and redundant calls in BTDownload#getProgress()/
,,0.183,frostwire,"[android] Issue revert last commit, refactor, copy list before submitting to thread/[common] handle/avoid possible NPE on KeywordDetector.updateHistogramTokenCount/[common] avoid ConcurrentModificationException/[android] using execute instead of submit to avoid unused creation of Future objects/[common] avoid android code dependencies in common/"
,,0.1339,frostwire,[common] using magnet url for yi-fi if torrent url fails/[common] fix/refactor yi-fi size/[common] fixed yi-fi creation time/[common] fixed yi-fi thumbnail url/
,,0.073,frostwire,"[common] ZooqleTempSearchResult, no more referer[sic] encoding issues/"
,,0.1843,frostwire,[android] avoid context leak int StopListener#stopMusicAsync background task/[android] bug fix on song fragments clicking on a song that was already being played would not open the music player screen. other cleanups/
,,0.1695,frostwire,[android] bug fix on song fragments clicking on a song that was already being played would not open the music player screen. other cleanups/
,,0.0814,frostwire,[android] using execute instead of submit to avoid unused creation of Future objects/
,,0.1199,frostwire,"[android] Apollo::MusicUtils.java, handle possible android.database.CursorIndexOutOfBoundsException/[android] crash fix at MusicUtils.getSongListForPlaylist/"
,,0.0795,frostwire,[android] using execute instead of submit to avoid unused creation of Future objects/
,,0.1519,frostwire,"[android] avoid ANR caused by ConfigurationManager.putLong()/[android] Less interstitial ads MainActivity and Search interstitials now share the same timestamp, this way we avoid all possibility of back to back interstitials/"
,,0.381,frostwire,"[android] change key name to avoid possible crashes on updates/[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/[android] Less interstitial ads MainActivity and Search interstitials now share the same timestamp, this way we avoid all possibility of back to back interstitials/"
,,0.07,frostwire,"[android] avoid picasso internal logic duplication/[android] removed not useful calculateDiskCacheSize The nature of this app is heavy use of disk, increasing or decreasing, the target shouldt change in each app start, also, the phone will more likely to fail before we reach the ~120MB max specified./"
,,0.0677,frostwire,[android] avoid picasso internal logic duplication/
,,0.3461,frostwire,"[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/"
,,0.1909,frostwire,"[android] issue 594, shows transfer while fetching torrent (#596) Also, when transfers are removed the transfer list is now refreshed immediatly./"
,,0.3554,frostwire,"[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/"
,,0.3593,frostwire,"[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/[android] fixed showing of double snackbar on enabling VPN-drop protection (#565)/"
,,0.3455,frostwire,"[android] actual implementation of start/stop of DHT/[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/"
,,0.073,frostwire,[android] avoid crashes with NotificationManager (SecurityExceptions Issue
,,0.1266,frostwire,[android] DirectionDetectorScrollListener context leak fix and refactor/[android] using execute instead of submit to avoid unused creation of Future objects/
,,0.0996,frostwire,[android] DirectionDetectorScrollListener context leak fix and refactor/
,,0.1285,frostwire,[android] no need to wrap exceptions in MainApplication#onCreate/[android] using execute instead of submit to avoid unused creation of Future objects/[android] actual implementation of start/stop of DHT/
,,0.1873,frostwire,"[android] issue 594, shows transfer while fetching torrent (#596) Also, when transfers are removed the transfer list is now refreshed immediatly./"
,,0.1944,frostwire,"[android] issue 594, shows transfer while fetching torrent (#596) Also, when transfers are removed the transfer list is now refreshed immediatly./"
,,0.4307,frostwire,"[android] issue 594, shows transfer while fetching torrent (#596) Also, when transfers are removed the transfer list is now refreshed immediatly./[android] avoid context leak in restore downloads background task/[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/"
,,0.1417,frostwire,[android] using execute instead of submit to avoid unused creation of Future objects/[android] remove deprecation warning on NotificationCompat.Builder Note: the build() call is causing a freeze on some Android 6 devices/[android] better ignore only SecurityException when dealing with NotificationManager (something new in Android 7)/[android] avoid crashes with NotificationManager (SecurityExceptions Issue crash fix on NotificationUpdateDemon/
,,0.0833,frostwire,[android] using execute instead of submit to avoid unused creation of Future objects/
,,0.0685,frostwire,[android] NPE on OpenMenuAction/[android] Issue ImageViewerActivity: Swipe to the next/previous picture (#612)/
,,0.0697,frostwire,[android] Issue ImageViewerActivity: Swipe to the next/previous picture (#612)/
,,0.3461,frostwire,"[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/"
,,0.0843,frostwire,[android] NPE on FingerTask/[android] avoid context leak in Peer#finger/
,,0.3779,frostwire,"[android] avoid context leak in NetworkManager#notifyNetworkStatusListeners/[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/"
,,0.1891,frostwire,"[android] issue 594, shows transfer while fetching torrent (#596) Also, when transfers are removed the transfer list is now refreshed immediatly./"
,,0.4513,frostwire,"[android] avoid context leak in NetworkManager#notifyNetworkStatusListeners/[android] Transfers > Seeding Views to encourage seeding Makes the new Seeding tab user experience a lot better when we can detect things like: is seeding disabled? or are there any transfers we should be seeding? Cleanup and fixes on TransfersFragment/[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/"
,,0.0883,frostwire,[android] Fixed context leak detected in SeedAction.onClick()/
,,0.1619,frostwire,[android] bug fix on song fragments clicking on a song that was already being played would not open the music player screen. other cleanups/
,,0.374,frostwire,"[android] avoid context leak in NetworkManager#notifyNetworkStatusListeners/[WIP] additional ëno resultsí text on search for when connection Ö (#567) * [android] additional ëno resultsí text on search for when connection is not available. only when no Wifi and Data are available at the moment. * [android] NetworkManager broadcast listener refactor, integration with SearchProgressView (1st leg) * [android] wording on more results * [android] get rid of extra broadcast receiver, thanks * [android] show snackbar on search fragment when connection dropped Transfers already have a few way of showing, so not adding it there yet * [android] update link to more results url * [android] flip string checks, add default switch case * [android] NetworkManager parameter refactor, url fix/"
,,0.1806,frostwire,"[android] restored commented context leak check in EngineThreadPool/[android] commenting temporarily the context leak check in EngineThreadPool#submit until all uses are fixed/[android] fix that by using ThreadPool#submit, the context leak detection was circumvented/"
,,0.0737,frostwire,[android] Issue ImageViewerActivity: Swipe to the next/previous picture (#612)/
,,0.9225,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/"
,,0.9213,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/"
,,0.9211,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/"
,,0.3657,frostwire,"[android/issue-637] Showing songs instead of albums in recent player tab (#638) * [android][WIP] issue 637 Showing song instead of albums in recent player tab * [WIP] Code compiles. Having problems with closing a cursor. * [WIP] Project compiles. Add songs to the Recent Fragment and plays as expected. Need more work to put song related information on screen * [WIP] Changes to save track duration correctly * [WIP] Fixes in RecentSongLoader * [WIP] Reusing existent interface to get song field names * [WIP] Adding licenses and cleaning up * [WIP] Removing unnecessary classes to save some symbols. RecentSongLoader removed, all the functionality was added to RecentLoader. RecentSongStore class removed, all funcionality was added to RecentStore * [WIP] Removed BaseSongFragment. RecentFragment inherits from ApolloFragment directly. Removed menu for View as in Recent tab * Removed getLastSongForArtist because isnt used * [WIP] Cleaning up * More cleaning. Updating docstring * [WIP] choosing a better name for last time played column. * Minor Fixes requested by * [WIP] Calling restartLoader using force equals in order to update the Recent list without reload the Fragment * [WIP] Almost there, fixing odd behavior in Recent List * [android] lambda refactor, NPE checks on SongAdapter * exec improvements. reloading data in a different thread./"
,,0.3825,frostwire,"[android/issue-637] Showing songs instead of albums in recent player tab (#638) * [android][WIP] issue 637 Showing song instead of albums in recent player tab * [WIP] Code compiles. Having problems with closing a cursor. * [WIP] Project compiles. Add songs to the Recent Fragment and plays as expected. Need more work to put song related information on screen * [WIP] Changes to save track duration correctly * [WIP] Fixes in RecentSongLoader * [WIP] Reusing existent interface to get song field names * [WIP] Adding licenses and cleaning up * [WIP] Removing unnecessary classes to save some symbols. RecentSongLoader removed, all the functionality was added to RecentLoader. RecentSongStore class removed, all funcionality was added to RecentStore * [WIP] Removed BaseSongFragment. RecentFragment inherits from ApolloFragment directly. Removed menu for View as in Recent tab * Removed getLastSongForArtist because isnt used * [WIP] Cleaning up * More cleaning. Updating docstring * [WIP] choosing a better name for last time played column. * Minor Fixes requested by * [WIP] Calling restartLoader using force equals in order to update the Recent list without reload the Fragment * [WIP] Almost there, fixing odd behavior in Recent List * [android] lambda refactor, NPE checks on SongAdapter * exec improvements. reloading data in a different thread./"
,,0.9205,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/"
,,0.1141,frostwire,[android] removal of static Context reference in Librarian to avoid memory leaks/
,,0.9216,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/"
,,0.12,frostwire,[android] removal of static Context reference in Librarian to avoid memory leaks/
,,0.9189,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/"
,,0.9214,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/"
,,0.9215,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/[android] removal of static Context reference in Librarian to avoid memory leaks/"
,,0.1602,frostwire,"[android] avoid direct access to file system during NetworkManager creation/[android] lambda enclosure has access to all variables in scope, Context was still being leaked. Thanks removal of static Context reference in Librarian to avoid memory leaks/"
,,0.9201,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/"
,,0.1161,frostwire,[android] removal of static Context reference in Librarian to avoid memory leaks/
,,0.9233,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/"
,,0.9211,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/"
,,0.9224,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/"
,,0.9179999999999999,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/[android] removal of static Context reference in Librarian to avoid memory leaks/"
,,0.9193,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/[android] dont fail silently. avoid context leak on thread/[android] removal of static Context reference in Librarian to avoid memory leaks/"
,,0.9217,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/"
,,0.124,frostwire,[android] removal of static Context reference in Librarian to avoid memory leaks/
,,0.1475,frostwire,"[android] NetworkManager getConnectivityManager() optimization This expensive .getSystemService call was invoked on every onTime() call and causing ANRs, more work to be done as this is all still happening on the main thread, but this should help since this is precisely what triggers the actual ANR according to error logs/[android] using current ConnectivityManager in NetworkManager#isNetworkTypeUp, this API is deprecated in current android version, and due to the blocking nature of it, we should avoid it with future refactors/[android] avoid direct access to file system during NetworkManager creation/[android] static leak and DRY refactor in NetworkManager/"
,,0.087,frostwire,"[android] minor cleanups, npe prevention, lambda refactors/"
,,0.0704,frostwire,"[android] Dataflow issues, inverted methods that were always used in negation/"
,,0.0933,frostwire,"[android] minor cleanups, npe prevention, lambda refactors/"
,,0.1101,frostwire,[android] removal of static Context reference in Librarian to avoid memory leaks/
,,0.0704,frostwire,"[android] Dataflow issues, inverted methods that were always used in negation/"
,,0.919,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/"
,,0.9211,frostwire,"[WIP] Frostwire 2.0 (#624) * [android] new layouts for the transfer detail pages * [android] initial set up for the transfer detail activity * [android] added toolbar menu to TransferDetails * [android] Extended AbstractFragment from the remaining transfer detail screens * [android] cleanup in TransferDetailActivity * [android] added status tab to transfer details, code cleanup * [android] added status layout to torrent details, layout code cleanup and headers * [android] added resource values for transfer detail activity * [android] removed unnecessary styles * [android] adjusted style of the view_transfer_list_item * [android] replaced missing style in view_transfer_item_list_item.xml * [android] minor adjustement in dividers of view_transfer_list_item.xml * [android] Transfer detail fragments reused. cleanup on fragment classes * [android] TransferDetailActivity refactor. New AbstractTransferDetailFragment. * [android] remove setContext hack, do it the android way * [android] cleanup * [android] TransferManager::getBittorrentDownload(String infoHash) * [android] plugged BittorrentDownload object all the way to fragments Common section with title and progress plugged. Next transfer status and upload/download speed in that common section * [android] plugged transfer status string into common progress component New TransferStateStrings singleton class to map transfer states to strings TransferListAdapter refactored to use new TransferStateStrings * [android] plugged download and upload speeds on common progress panel * [android] transfer detail > status > Completed plugged renamed some of the textviews to have a _label suffix * [desktop] CommonUtils cleanup * [android] Transfer Detail > Status > Time remaining plugged * [android] Transfer Details, Status tab done * [android] abort updateDetailProgress when transfer is null * [android] transfer details layout cleanup * [android] adding a recyclerview to Details, moved mock layout for its views to fragment_transfer_detail_files_recyclerview_item.xml * [android] plugged number of files and total download size on FILES tab * [android] started pluggin ReciclerView, still not working * [android] got files showing on details > files. main transfer list broken, might transition to recycler view here too, testing with ListViewCompat (v7) * [android] cleanup * [android] cleanup * [android] TransferFragment RecyclerView refactor (broken) * [android] RecyclerView on TransfersFragment working * [android] cleanup, component lookup optimization in Transfers Fragment * [android] Progress on Transfer Detail > Details fragment * [common] BTDownload.getTorrentHandle() * [android] Details > Details > Comment section handled * [android] Transfer Detail > Details tab. Just have an issue with the Sequential Download checkbox * [android] updated torrent_details_files * [android] progress on Transfers Details > Trackers tab * [android] updated transfer detail trackers fragment layout * [android] new UIUtils.showEditTextDialog * [android] Transfer Detail > Trackers can add trackers to torrent * [android] fixed width issues with individual tracker layout * [android] minor refactor on TransferManager * [android] TransferDetailStatusFragment doesnt crash on rotation * [android] broken progress towards adding/editing trackers * [android] fix another on rotation crash * [android] uiBittorrentDownload is serialized and deserialized on screen rotation * [android] set adapter after youve set the layout manager * [android] adds and deletes trackers * [android] trackers can be removed. edit text dialog can be configured for single/multi line * [android] fixes issue where recycler views would not show items when tabs switched * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android/build] build.gradle flavorDimensions update for Android 3.0 * [android] Transfer Details > Peers tab working * [andriod] fixed build.gradle to use new plugin 3.0.0 DSL * [android] Details tab cleanup. Removed Seeding On checkbox. That can be handled with action bar controls for seeding/pausing Dialog button handlers now use lambdas * [android] dont refresh tab if not visible cleanup * [android] Transfer Details > Pieces tab (not working correctly) Also lint cleanup on the activity and related fragments * [android] few minor changes to transfer detail layouts * [android] added and updated icons for the view_transfer_list_item * [android] set up for the right side transfer item actions * [android] pieces colors work, had to do r.getColor(). refactor * [android] First pass at setting the media type icon on transfer list items * [common] BittorrentDownload::getPredominantFileExtension() * [android] uses BittorrentDownloads getPredominantFileExtension() to determine transfer media icon * [android] show missing /s on transfer detail speed indicators * [android] warning cleanup on ClickAdapter<T> * [android] Details button on TransferListAdapter works. TransferListAdapter refactored so that we only have a single instance for every click listener, not individual listeners for every view created * [android] found inconsistency between download and upload rate unlimited values in libtorrent, cleanup * [android] fixed overlapping of the text on view_transfer_detail_peer_item * [android] updated TransferDetailDetails dialog title * [android] added appropriate padding to the pieces view in transfer detail * [android] fixes rotation crashes. refactors to deal with rotation if for some reason getting pieces takes a while, an indeterminate progress bar is shown in place of the pieces other rotation bugs fixed, more robust behavior * [android] files becomes the first, and default selected tab * [android] remove timer subscription responsibility from fragments Use only one TimeObserver subscriber defined in the TransferDetailActivity. Fragments still implement TimerObserver, have the single subscriber instance invoke the fragments onTime method only on the currently active fragment * [android] SectionsPagerAdapter doesnt need to keep a reference to activity Just pass a SparseArray with the string resources it actually needs Implements a new OnPageChangeListener that keeps track of what the current fragment is When current fragment changes invoke onTime() on it Implements TimerObserver on the activity which delegates an onTime() call to the current fragment * [android] isVisible() check no longer necessary also found out that in some cases, isVisible() would give a false negative * [android] more work towards avoiding issues on rotation and fast tab changes * [android] import cleanup, if unwraps * [android] stick to empty default constructors on YouTubeDownloadDialog * [android] lint warnings, import cleanups * [android] semi-aldenization of fragment code, still rotation issues * [android] move all init calls to initComponents * [android] cleanup. still issues on rotation, fragments not being added after rotation * [android] finally resolved rotation issue It seems the pager adapter and the programatic approach to adding transfers ended up in fragments not being able to be tracked correctly by their tags when the activity was reloaded. Some of the fragments we ended up with inside detailFragments[] wouldnt be added, however, we luckily have methods in the parent AbstractFragment class to keep track of fragments that have been added (since Android only provides these after API 21 or so), by looking at the added fragments Im able to find the correct instance and replace it inside our internal detailFragments array. Writing this commit message makes me want to use that list, and get rid of the internal detailFragments array, to keep track of the fragments used, they could easily be filtered if theyre instances of AbstractTransferDetailFragment * [android] edit text dialog is now an extension of AbstractDialog * [android] EditTextDialog moved to its own file, handles screen rotation * [android] removed unused vars * [android] rotation bug finally fixed * [android] inline call * [android] Transfer > Status > Time left only shown when downloading * [android] transfer detail tab layout cleanup * [android] transfer details details speed limit dialog issues When transfers are first created their upload/download rate limits come as When you want to set them to for unlimited, this does not go well. You have to use 0 for unlimited, after that, they return 0 Added a dialog closed listener that refreshes the fragment on close so new rate limit is reflected on the ui right away * [android] remove tracker dialog look is uniform. UIUtil.showYesNoDialog now uses YesNoDialog. * [android] dont hide time left textview, show 0 instead * [android] progress with transfer details action bar menu * [android] logic fix with pause/resume action bar action * [android] updated action bar icons, added new resume aciton bar icon * [android] removed double resume action That action is not on the main branch, it was added later it said resume but it was starting to seed even with seeding settings off. * [android] updated icons for resume and cancel context menu action * [android] added action bar seed icon * [android] removed repeating action menu option * [android] fixed and updated action_bar_seed icons Sorry saved them with a wrong setting, looked pixelated * [android] better logic on pause, resume, seed * [android] added clear option on details. cancel menu action uses the proper icon depending on the parameters * [android] removed Open action from details, files are already there for individual access * [android] added action_bar_stop_transfer icon * [android] seeding|pausing made left most action. delete transfer sent to the context menu and cancel transfer the 2nd action shown only if room is available * [android] use SeedAction when seedable * [android] Update Translation: Spanish * [android] Update Translation: Portuguese * [android] start of HexHiveView for piece display, bye RecyclerView in this fragment * [android] detail pieces layout cleanup * [android] updated files and trackers layouts RecyclerViewer no longer moves independently from the rest of hte scroll view better user experience on small screens and horizontal views. Fixed the files tab to open lower then top of the page. The issue was connected to recycleviewer receiving the focus. * [android] calculate height of other components to correctly measure height for hexhiveview * [android] HexHiveView sizing issues fixed No need to manually calculate bounds when the containing layout is simpler fragment_transfer_detail_pieces no longer inside ScrollView, no need to scroll as our HexHiveView will only use remaining vertical space To make this work, view_transfer_detail_progress now has a fixed height, otherwise the folder icon would go towards the center of the screen * [android] fix to the height of the detail_progress layout * [android] very wip hex drawing experiments * [android] Update Translations: French and Italian * [android] HexView advances New DrawingProperties object is used to create buffer objects and useful constants for drawing the hexagonal hive drawing functions refactored to reduce the number of parameter copies on each onDraw iteration more cleanup to be done, gotta take into consideration real pixel width of hexagon borders when moving along the hive * [android] hex fill logic implemented, wip, more fixes needed to calculate right max hex side length * [android] fixed color assigment bug, only repaint when number of pieces downloaded has changed * [android] made debug drawing an XML attribute. Better aproximation on desired hexagon length, still need to account for maximum rows. * [android] simplifications * [android] unneded file * [android] 2.0.0 (beta) build 473 * [android] stricter checks initializing UIBittorrentDownload * [android] no need to import Objects * [android] Update Translation: German * [android] NPE bullet proofing My guess is that the NPE reported on detailProgressStatusTextView.setText(transferStateStrings.get(uiBittorrentDownload.getState())); wasnt due to the view being null, but to the transferStateStrings object being null due to possible synchronization issues with TransferStateStrings.getInstance() To make sure this doesnt happen, I perform another check later on, and if weve been wrongly assigned a null value, we request the singleton again. * [android] rebasing left-overs * [android] math brainfart calculating Y position of rows fixed * [android] hex hive drawing fixes * [android] cube-piece drawing support * [android] upgrades dont animate tabs when touching tab title new CubePaint object extends Paint and calculates and keeps colors for dark left cube face and light top face out of the given fill color which is used on the right side face * [android] adds URL validation when adding or editing trackers * [android] fix bug with active time and seeding time calculation when context menu actions are invoked they invoke onTime() on the underlying activity (Context that implements TimerObserver) cleanup * [android] s/delete/remove torrent and data/ menu entry * [android] cleanup * [android] avoid Runtime error trying to open transfer with no infoHash/"
,,0.1045,frostwire,[android] NPE on EngineBroadcastReceiver::reopenNetworkSockets. Error wording clarification/[android] removal of static Context reference in Librarian to avoid memory leaks/
,,0.1591,frostwire,"[android] removal of static Context reference in Librarian to avoid memory leaks/[android] minor cleanups, npe prevention, lambda refactors/"
,,0.1577,frostwire,"[android] lambda enclosure has access to all variables in scope, Context was still being leaked. Thanks dont fail silently. avoid context leak on thread/[android] removal of static Context reference in Librarian to avoid memory leaks/"
,,0.0789,frostwire,[desktop] removed non-functional (and completely broken code) related notifications display/
,,0.075,frostwire,[desktop] removed non-functional (and completely broken code) related notifications display/
,,0.0828,frostwire,[desktop] removed non-functional (and completely broken code) related notifications display/
,,0.077,frostwire,[desktop] removed non-functional (and completely broken code) related notifications display/
,,0.0828,frostwire,[desktop] removed non-functional (and completely broken code) related notifications display/
,,0.0897,frostwire,[desktop] avoid native crash in VPN detection due to start/stop (not best) logic/[desktop] fixed CactusVPN detection in Windows/[desktop] ExpressVPN detection fixed. build 253. changelog/
,,0.0723,frostwire,[desktop] Clean shutdown of VPNStatusRefresher thread Issue
,,0.0702,frostwire,[desktop] Clean shutdown of VPNStatusRefresher thread Issue
,,0.0937,frostwire,"[common] avoid .yt extension in feedSearchResults/[common] avoid double call of toLowerCase in KeywordDetector/[common] dont hide NPE, crash instead in updateHistogramTokenCount/[android] should solve issue with non-responding keyword filter first time its flipped to negation/"
,,0.0599,frostwire,[android] StopListener async refactor/
,,0.1473,frostwire,"[android] NPE on ImageWorker. Unused code cleanup/[android] Activity shouldnt be null, dont hide the problem/[android] Apollo ImageFetcher NPE protections/[android] fix type resolution in ApolloUtils#execute/"
,,0.282,frostwire,"[android] Issue When audio files are deleted from My Files theyre cleared from Recents in My Music We make sure all deletion logic occurs in a background thread, including the adapters internal collections are modified in the background AbstractListAdapters addItem(item) and deleteItem(item) methods only call notifyDataSetChanged() if on the main thread. This way we can call addItem or deleteItem from a background thread multiple times without trying to communicate with main thread and then we can invoke adapter.notifyDataSetChanged() once on the main thread when were finished License header updates Librarian.deleteFiles() uses MusicUtils.deleteTracks() if the files passed are audio files MusicUtils.deleteTracks() had a bug where it tried to delete the Recents cache using the wrong data field, I believe this is because in the past Recents would display Recent albums, not recent tracks./"
,,0.0899,frostwire,[android] fixed context leak in custom AlarmReceiver/
,,0.0948,frostwire,[android] EngineThreadPool disables task queue size verification when the debugger is connected. Renamed .isEnable to .isEnabled (English grammar fix)/
,,0.2277,frostwire,"[android] batch editor configuration changes in resetToDefaults to avoid unncessary acall to apply/[android] consider Application class as a context with no-leak issue/[android] avoid double background of setting apply task/[android] removed bad File API from settings, detected and fixed bug that PREF_KEY_GUI_LAST_MEDIA_TYPE_FILTER was never saved to start with/[android] ConfigurationManager fixes. 1. There should be only a single call to ConfigurationManager.create(Application) My theory is that ConfigurationManager.preferences was null because PreferenceManager.getDefaultSharedPreferences(Context context) was failing in the case where somehow EngineService was the one calling ConfigurationManager.create(getApplication() invalid object here) The correct place for that call is on MainApplication.onCreate(), now theres only one call 2. ConfigurationManager getter methods now throw IllegalStateException if the preferences property is null, the application simply cant work without this, dont hide errors 3. Moved BTEngineInitializer thread a bit later in case too early of an initialization was causing the NPE issue on the ConfigurationManager (doubt it but it doesnt hurt to move it after Engine.instance().onApplicationCreate/[android] ConfigurationManager NPE protections/[android] latch cant be in outer thread object was being accessed as CREATED and it wasnt really created thus creating NPEs when the preference editor was being accessed prematurely/[android] No more Runtime error on ConfigurationManager.create() ConfigurationManager.instance() may have been called while ConfigurationManager.create() was still busy.Added an AtomicReference<State> to synchronize the creation of the singleton and wait for it if necessary with a countdown latch (only once, if this situation ever occured). The IO portion of the creation of the configuration manager is forced to a background thread. We also ensure every editor.apply() background call does not occur in the main thread. Even though SharedPreferencesImpl is supposed to make the .apply() call in a background thread, theres a countdown latch that is blocking the main thread. We make sure our class is not guilty of making this happen. I have to check if Apollo uses a preference editor on the main thread./"
,,0.0883,frostwire,"[android] removed bad File API from settings, detected and fixed bug that PREF_KEY_GUI_LAST_MEDIA_TYPE_FILTER was never saved to start with/"
,,0.2025,frostwire,"[android] Android Oreo(8) notification issues fixed/[android] build 509. VPN Page fixes One more MusicPlaybackService recentsStoreAddSongIdTask async cleanup build 509 Adjusted view_vpn_status_detail to look good all the way down to 3.7 screens removed unused old vpn strings All Wi-Fi strings are now spelled uniformly Fixed VPN copy, more concise, no etcs, brought back Privacy is a fundamental human right Renamed VPN constants to denote that they represent urls with _URL suffixes SoftwareUpdater cleanup Click listeners turned to lambdas on VPNStatusDetailActivity Updated date in license header to 2018/"
,,0.1649,frostwire,"[android] refactor to extract run strict logic out of Debug/[android] dont disable Debug when debugger connected only disable verifyTasks/[android] EngineThreadPool disables task queue size verification when the debugger is connected. Renamed .isEnable to .isEnabled (English grammar fix)/[android] avoid direct use of class LocaleList to avoid problems due to API level/[android] allow to see errors in Debug#hasContext when migrating to Android P/[android] import cleanup in Debug class/[android] improved correctnes of context detection in Debug#hashContext, listing all fields and avoiding self references/[android] removed not so useful and sometimes confusing logging from Debug, stack trace has the advantage of being clickable in the IDE/[android] removed unnecessary method in Debug, in android we can use Log#getStackTraceString/[android] consider Application class as a context with no-leak issue/[android] new Debug.getCallingMethodInfo() The String output of this method can be used to do poor mans tracing of where a method youre debugging is being called from. It includes the .java file name, the method 1 level down on the stack from where were invoking Debug.getCallingMethodInfo(), the line number and the thread name and id where this is happening/"
,,0.0786,frostwire,[android] s/StartDownloadTask/AsyncStartDownload refactor Favors use of Asyncs api over buggy ContextTask/
,,0.1222,frostwire,"[android] Simplification and refactor in TransferDetailTrackersFragment 1. No need to pass FragmentManager reference to TrackerItemViewHolder, this reference can be obtained through the adapter reference it already has 2. Parameter fixes after UIUtils.showYesNoDialog parameter updates to use the fragment manager reference/"
,,0.096,frostwire,[android] Android Oreo(8) notification issues fixed/
,,0.1829,frostwire,"[android] dont crash if you cant get drawing cache/[android] remove stack-overflow causing brainfart on YesNoDialog/[android] Avoid possible NPE taking screenshot/[android] Indirect parameter fix on UIUtils.showEditTextDialog/[android] UIUtils.showYesNoDialog parameter fix If the method needs a FragmentManager it should receive a FragmentManager, not a Context that is an instance of Activity to then obtain a FragmentManager from it/[android] ANR on ephemereal playlist fixed. Issue"
,,0.1595,frostwire,"[android] refactor to extract run strict logic out of Debug/[android] Context leak at com.frostwire.android.gui.MainApplication.onCreateSafe(MainApplication.java:102)/[android] ConfigurationManager fixes. 1. There should be only a single call to ConfigurationManager.create(Application) My theory is that ConfigurationManager.preferences was null because PreferenceManager.getDefaultSharedPreferences(Context context) was failing in the case where somehow EngineService was the one calling ConfigurationManager.create(getApplication() invalid object here) The correct place for that call is on MainApplication.onCreate(), now theres only one call 2. ConfigurationManager getter methods now throw IllegalStateException if the preferences property is null, the application simply cant work without this, dont hide errors 3. Moved BTEngineInitializer thread a bit later in case too early of an initialization was causing the NPE issue on the ConfigurationManager (doubt it but it doesnt hurt to move it after Engine.instance().onApplicationCreate/[android] MainApplication starts BTEngine in individual thread When simulating a slow BTEngineInitializer taking up to a minute to start and running this Runnable on the Engine Blocking Thread Pool, it would make the Thread Pool queue up more than 20 tasks very quickly, which in production I believe would lead to OOM errors. After moving this very neural initialization to a thread of its own the issue no longer occurs since other Runnables in the threadpool are free to continue (Except for those waiting for the context latch) I believe that such Runnables that make use of BTEngine.instance() calls should only make such use if the application cannot function without them, for example, when registering setting listeners and other startup/bootstrap related tasks. If a Runnable makes use of BTEngine.instance() and its not a life/death use of BTEngine, it should end its thread if it encounters that BTEngine hasnt been initialized yet (ctx null)/[android] Issue Freeze on startup instantiating DiskCrawlCache/"
,,0.1397,frostwire,[android] Android Oreo(8) notification issues fixed/[android] Notifications work on Android 8.0 Issue ANR on NotificationUpdateDemon fixed It was moronically creating a thread only to do all the hard work on the main thread later./
,,0.0874,frostwire,[android] fixed context leak in SetAsWallpaperMenuAction#onClick/
,,0.098,frostwire,[android] ANR on ephemereal playlist fixed. Issue
,,0.1622,frostwire,[android] Issue fix VPNs detected on less permissive ANdroid 8.0 devices/[android] Context leak at com.frostwire.android.gui.MainApplication.onCreateSafe(MainApplication.java:102)/
,,0.0926,frostwire,[android] make AbstractTransferDetailFragment#transferStateStrings field private and local as possible to avoid workarounds of lifecycle issues/[android] No more static runnables to get out of Context Leak hell/[android] ANR fix on TransferDetails A reported ANR on TransferDetailFilesFragment.java:175 return new TransferDetailFilesTransferItemViewHolder( lead to a fix that might avoid similar ANRs on all AbstractTransferDetail implementations/
,,0.1765,frostwire,[android] Context leak at com.frostwire.android.gui.MainApplication.onCreateSafe(MainApplication.java:102)/[android] avoid context leak in EngineBroadcastReceiver async tasks/[android] Context Leak fixed and refactor on EngineBroadcastReceiver upon connection events/
,,0.094,frostwire,"[android] ConfigurationManager NPE protections/[android] Handle SecurityException with message for user when starting EngineService Also start the engine service and the vibrator, expensive getSystemService call and the service initialization and binding in a background thread/"
,,0.3143,frostwire,"[android] optimization in Librarian#getNumFiles, just count and avoid cursor iteration/[android] ConfigurationManager NPE protections/[android] cant replicate Zombie Torrent issue anymore It seems the ContentResolver didnt perform the physical file deletion when it came to .torrent files Also fixed NPE on UIBittorrentDownload/[android] avoid RuntimeException on Librarian.instance()/[android] Issue When audio files are deleted from My Files theyre cleared from Recents in My Music We make sure all deletion logic occurs in a background thread, including the adapters internal collections are modified in the background AbstractListAdapters addItem(item) and deleteItem(item) methods only call notifyDataSetChanged() if on the main thread. This way we can call addItem or deleteItem from a background thread multiple times without trying to communicate with main thread and then we can invoke adapter.notifyDataSetChanged() once on the main thread when were finished License header updates Librarian.deleteFiles() uses MusicUtils.deleteTracks() if the files passed are audio files MusicUtils.deleteTracks() had a bug where it tried to delete the Recents cache using the wrong data field, I believe this is because in the past Recents would display Recent albums, not recent tracks./"
,,0.1808,frostwire,"[android] ConfigurationManager fixes. 1. There should be only a single call to ConfigurationManager.create(Application) My theory is that ConfigurationManager.preferences was null because PreferenceManager.getDefaultSharedPreferences(Context context) was failing in the case where somehow EngineService was the one calling ConfigurationManager.create(getApplication() invalid object here) The correct place for that call is on MainApplication.onCreate(), now theres only one call 2. ConfigurationManager getter methods now throw IllegalStateException if the preferences property is null, the application simply cant work without this, dont hide errors 3. Moved BTEngineInitializer thread a bit later in case too early of an initialization was causing the NPE issue on the ConfigurationManager (doubt it but it doesnt hurt to move it after Engine.instance().onApplicationCreate/"
,,0.4164,frostwire,"[desktop] New: Send Feedback Dialog * [issue-632] Adding Send Feedback Dialog * [issue-632]Adding Send Feedback Dialog * [desktop] temp * [desktop][issue-632] Adding Send Feedback action * [desktop][issue-632] Updated endpoint * [desktop][issue-632] warning fixes * [desktop][issue-632] Adding Your Name field to SendFeedback Dialog * [desktop][issue-632] Adding validations to Dialog * [desktop][issue-632] improvements to Send Feedback Dialog * [desktop][issue-632] misc fixes & refactors * [desktop][issue-632] system info output in HTML or not * [desktop][issue-632] Feedback interval to 5 mins, make sure user can copy & paste long messages and layout doesnt break * [desktop] cleanup/"
,,0.2214,frostwire,[desktop] last 2 usability bugs with transfers fixed It will correctly scroll to the last selected transfer after the details component is shown It will not wait for the next refresh to update the details component the first time its shown/[desktop] avoid NPE when detailed transfers tab unavailable/
,,0.4143,frostwire,"[desktop] New: Send Feedback Dialog * [issue-632] Adding Send Feedback Dialog * [issue-632]Adding Send Feedback Dialog * [desktop] temp * [desktop][issue-632] Adding Send Feedback action * [desktop][issue-632] Updated endpoint * [desktop][issue-632] warning fixes * [desktop][issue-632] Adding Your Name field to SendFeedback Dialog * [desktop][issue-632] Adding validations to Dialog * [desktop][issue-632] improvements to Send Feedback Dialog * [desktop][issue-632] misc fixes & refactors * [desktop][issue-632] system info output in HTML or not * [desktop][issue-632] Feedback interval to 5 mins, make sure user can copy & paste long messages and layout doesnt break * [desktop] cleanup/"
,,0.0804,frostwire,"[desktop] build 263 bumping in advance, theres still the splitpane bug to fix on transfers tab/"
,,0.4175,frostwire,"[desktop] New: Send Feedback Dialog * [issue-632] Adding Send Feedback Dialog * [issue-632]Adding Send Feedback Dialog * [desktop] temp * [desktop][issue-632] Adding Send Feedback action * [desktop][issue-632] Updated endpoint * [desktop][issue-632] warning fixes * [desktop][issue-632] Adding Your Name field to SendFeedback Dialog * [desktop][issue-632] Adding validations to Dialog * [desktop][issue-632] improvements to Send Feedback Dialog * [desktop][issue-632] misc fixes & refactors * [desktop][issue-632] system info output in HTML or not * [desktop][issue-632] Feedback interval to 5 mins, make sure user can copy & paste long messages and layout doesnt break * [desktop] cleanup/"
,,0.42700000000000005,frostwire,"[desktop] New: Send Feedback Dialog * [issue-632] Adding Send Feedback Dialog * [issue-632]Adding Send Feedback Dialog * [desktop] temp * [desktop][issue-632] Adding Send Feedback action * [desktop][issue-632] Updated endpoint * [desktop][issue-632] warning fixes * [desktop][issue-632] Adding Your Name field to SendFeedback Dialog * [desktop][issue-632] Adding validations to Dialog * [desktop][issue-632] improvements to Send Feedback Dialog * [desktop][issue-632] misc fixes & refactors * [desktop][issue-632] system info output in HTML or not * [desktop][issue-632] Feedback interval to 5 mins, make sure user can copy & paste long messages and layout doesnt break * [desktop] cleanup/"
,,0.4206,frostwire,"[desktop] New: Send Feedback Dialog * [issue-632] Adding Send Feedback Dialog * [issue-632]Adding Send Feedback Dialog * [desktop] temp * [desktop][issue-632] Adding Send Feedback action * [desktop][issue-632] Updated endpoint * [desktop][issue-632] warning fixes * [desktop][issue-632] Adding Your Name field to SendFeedback Dialog * [desktop][issue-632] Adding validations to Dialog * [desktop][issue-632] improvements to Send Feedback Dialog * [desktop][issue-632] misc fixes & refactors * [desktop][issue-632] system info output in HTML or not * [desktop][issue-632] Feedback interval to 5 mins, make sure user can copy & paste long messages and layout doesnt break * [desktop] cleanup/"
,,0.1063,frostwire,[common] eztv fixed seeds number and phantom search results/
,,0.0716,frostwire,"[common] limetorrents fix, now it needs to use magnet/"
,,0.0772,frostwire,[common] fixed TorrentDownloads by switching to magnet/
,,0.0944,frostwire,"[common] yifi fix, back to /movie/ page/[common] Yifi, dont crash if unable to parse seeds/[common/desktop] Yify search fixes/"
,,0.2727,frostwire,"[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/"
,,0.1503,frostwire,[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./
,,0.1521,frostwire,[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./
,,0.1503,frostwire,[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./
,,0.1503,frostwire,[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./
,,0.1503,frostwire,[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./
,,0.1425,frostwire,"[android] using internal PrebidManager application context in calls to attachBids. It happens that although not documented, the context in attachBids is used in multiple places internally, and a context leak is possible if its not an application context./[android] fix in PrebidManager singleton creation/"
,,0.3264,frostwire,"[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/"
,,0.3538,frostwire,"[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/[android] Fix empty message for playlist detailed view (#721) * [android] Fix empty message for playlist detailed view * [android] Changing empty text for PlaylistSongFragment * [android] Cleaning up imports. Using the default constructor/"
,,0.0673,frostwire,[android] import cleanup in Debug class/
,,0.0989,frostwire,[android] avoid display of BuyActivity with no data from local Play Store cache/
,,0.1869,frostwire,"[android] ConfigurationManager bootstrapping refactor No NPE should be possible on instance(), if instance is null, it means we need to wait for create to finish creating instance No Future necessary, use simple wait/notify synchronization mechanism Moved called to .create earlier in MainApplication.onCreateSafe/[android] LocalSearchEngine.instance() refactor A refactor to avoid a rare NPE getting the instance, also should slightly improve app startup time. Removes LocalSearchEngine.onCreate() LocalSearchEngine.instance() should never return null, uses synchronization only once in most cases and in the rare event it will somehow be called at the same time during startup. The bug probably existed because instance() was somehow being called before MainApplication.onCreate()/"
,,0.2814,frostwire,"[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/"
,,0.2829,frostwire,"[android] Less intrusive interstitial ads (#726) * [android] No more interstitial on resume No interstitial should be done before a transitional action, otherwise its too annoying and gets in the way of the user experience [android * [android] ok pro-guard rules * [android] interstitial logic on back pressed * [android] interstitial logic on nav menu other fixes and code added for APIs completion and consistency on MainController and MainActivity/"
,,0.0818,frostwire,"[android] simpler hex height calculation, arithmetic fix/"
,,0.1503,frostwire,[android] Music player saves shuffle preferences Fixes also an array out of bound when trying to play the first song of a playlist when the last shuffle mode was true. Other refactors./
,,0.2699,frostwire,"[android] Prebid instantiation can fail, protect MoPub banner dispatchers found: 08-07 15:56:37.631 29218 29218 I PrebidManager: Creating PrebidManager singleton 08-07 15:56:37.632 29218 29218 I Prebid : Initializing with a list of AdUnits 08-07 15:56:37.634 29218 29218 W System.err: org.prebid.mobile.core.PrebidException: Unable to instantiating the adapter. 08-07 15:56:37.636 29218 29218 W System.err: at org.prebid.mobile.core.Prebid.init(Prebid.java:141) 08-07 15:56:37.636 29218 29218 W System.err: at com.frostwire.android.offers.PrebidManager.initializePrebid(PrebidManager.java:186) 08-07 15:56:37.636 29218 29218 W System.err: at com.frostwire.android.offers.PrebidManager.<init>(PrebidManager.java:107) 08-07 15:56:37.636 29218 29218 W System.err: at com.frostwire.android.offers.PrebidManager.getInstance(PrebidManager.java:84) 08-07 15:56:37.636 29218 29218 W System.err: at com.frostwire.android.offers.Offers.initAdNetworks(Offers.java:79) 08-07 15:56:37.636 29218 29218 W System.err: at com.frostwire.android.gui.activities.MainActivity.onResume(MainActivity.java:355) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.Instrumentation.callActivityOnResume(Instrumentation.java:1361) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.Activity.performResume(Activity.java:7344) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.performResumeActivity(ActivityThread.java:3763) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.handleResumeActivity(ActivityThread.java:3828) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3036) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.-wrap11(Unknown Source:0) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.handleMessage(ActivityThread.java:1696) 08-07 15:56:37.636 29218 29218 W System.err: at android.os.Handler.dispatchMessage(Handler.java:105) 08-07 15:56:37.636 29218 29218 W System.err: at android.os.Looper.loop(Looper.java:164) 08-07 15:56:37.636 29218 29218 W System.err: at android.app.ActivityThread.main(ActivityThread.java:6938) 08-07 15:56:37.636 29218 29218 W System.err: at java.lang.reflect.Method.invoke(Native Method) 08-07 15:56:37.636 29218 29218 W System.err: at com.android.internal.os.Zygote.run(Zygote.java:327) 08-07 15:56:37.636 29218 29218 W System.err: at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1374)/"
,,0.0807,frostwire,[common] EZTV Search fix/
,,0.0849,frostwire,[android] SQLiteException on MusicUtils.getAlbumIdForSong/
,,0.0823,frostwire,[android] Android O crash when using headset controls fixed/
,,0.1373,frostwire,"[android] SwitchPreference rendering issues fixed after sdk 28 min sdk bumped from 16 to 19 (android 4.4, app didnt really work on 4.1 and very little installs)/[android] play-services-ads update 17.1.1 17.1.2 Also, bring back ability to consume purchase on debug build/"
,,0.0929,frostwire,"[android] SwitchPreference rendering issues fixed after sdk 28 min sdk bumped from 16 to 19 (android 4.4, app didnt really work on 4.1 and very little installs)/"
,,0.1102,frostwire,[android] Transfers > Clear all finished update It will also clear errored transfers/
,,0.0807,frostwire,"[desktop] more deprecation fixes, NPE catches, cleanup/"
,,0.0828,frostwire,"[desktop] more deprecation fixes, NPE catches, cleanup/"
,,0.0849,frostwire,"[desktop] more deprecation fixes, NPE catches, cleanup/"
,,0.0828,frostwire,"[desktop] more deprecation fixes, NPE catches, cleanup/"
,,0.0849,frostwire,"[desktop] more deprecation fixes, NPE catches, cleanup/"
,,0.063,frostwire,"[desktop] cleanup, refactors, deprecation fixes/"
,,0.0716,frostwire,"[desktop] cleanup, refactors, deprecation fixes/"
,,0.063,frostwire,"[desktop] cleanup, refactors, deprecation fixes/"
,,0.0694,frostwire,"[desktop] cleanup, refactors, deprecation fixes/"
,,0.1353,frostwire,"[android] SERVER_UPDATE_URL must now be based, update broken in last build/[android] b585. Fixes promos url parameter passing, other promo display on androdi issue/"
,,0.0891,frostwire,[desktop] javadoc issues cleanup/
,,0.0933,frostwire,[desktop] javadoc issues cleanup/
,,0.0912,frostwire,[desktop] javadoc issues cleanup/
,,0.0919,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0686,frostwire,[desktop] azureus debug code cleanup/
,,0.1081,frostwire,"[desktop] azureus debug code cleanup/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.0744,frostwire,"[desktop] cleanup empty methods, encapsulation fixes/"
,,0.1162,frostwire,"[desktop] azureus debug code cleanup/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.10400000000000001,frostwire,"[desktop] azureus debug code cleanup/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.10400000000000001,frostwire,"[desktop] azureus debug code cleanup/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.1101,frostwire,"[desktop] azureus debug code cleanup/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.0989,frostwire,"[desktop] azureus debug code cleanup/[desktop] java7 explicit types fix/[desktop] unboxing and loop style fixes/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.1101,frostwire,"[desktop] azureus debug code cleanup/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.11599999999999999,frostwire,"[desktop] azureus debug code cleanup/[desktop] unboxing and loop style fixes/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.1082,frostwire,"[desktop] unboxing and loop style fixes/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.0723,frostwire,"[desktop] cleanup empty methods, encapsulation fixes/"
,,0.10400000000000001,frostwire,"[desktop] azureus debug code cleanup/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.1121,frostwire,"[desktop] azureus debug code cleanup/[desktop] java7 explicit types fix/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.0857,frostwire,"[desktop] azureus debug code cleanup/[desktop] final field initialization fixes, formatting/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.1121,frostwire,"[desktop] declaration access fixes/[desktop] azureus debug code cleanup/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.1082,frostwire,"[desktop] declaration access fixes/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.1081,frostwire,"[desktop] azureus debug code cleanup/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.098,frostwire,"[desktop] azureus debug code cleanup/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.0951,frostwire,"[desktop] azureus debug code cleanup/[desktop] java7 explicit types fix/[desktop] unboxing and loop style fixes/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.102,frostwire,"[desktop] azureus debug code cleanup/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.0723,frostwire,"[desktop] cleanup empty methods, encapsulation fixes/"
,,0.0977,frostwire,"[desktop] azureus debug code cleanup/[desktop] unboxing and loop style fixes/[desktop] final field initialization fixes, formatting/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.10400000000000001,frostwire,"[desktop] azureus debug code cleanup/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.1061,frostwire,"[desktop] azureus debug code cleanup/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.10300000000000001,frostwire,"[desktop] declaration access fixes/[desktop] final field initialization fixes, formatting/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.102,frostwire,"[desktop] azureus debug code cleanup/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.1061,frostwire,"[desktop] azureus debug code cleanup/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.1062,frostwire,"[desktop] azureus debug code cleanup/[desktop] unboxing and loop style fixes/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.1062,frostwire,"[desktop] unboxing and loop style fixes/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.1043,frostwire,"[desktop] azureus debug code cleanup/[desktop] unboxing and loop style fixes/[desktop] cleanup empty methods, encapsulation fixes/"
,,0.1,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0891,frostwire,[desktop] javadoc issues cleanup/
,,0.0912,frostwire,[desktop] javadoc issues cleanup/
,,0.073,frostwire,[desktop] declaration access fixes/[desktop] azureus debug code cleanup/
,,0.0891,frostwire,[desktop] javadoc issues cleanup/
,,0.098,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0669,frostwire,[desktop] declaration access fixes/[desktop] azureus debug code cleanup/
,,0.0664,frostwire,[desktop] azureus debug code cleanup/
,,0.0933,frostwire,[desktop] javadoc issues cleanup/
,,0.0933,frostwire,[desktop] javadoc issues cleanup/
,,0.0879,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0891,frostwire,[desktop] javadoc issues cleanup/
,,0.0939,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0939,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0954,frostwire,[desktop] javadoc issues cleanup/
,,0.0954,frostwire,[desktop] javadoc issues cleanup/
,,0.098,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.096,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.096,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0939,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.1,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.102,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0939,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0899,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.087,frostwire,[desktop] javadoc issues cleanup/
,,0.096,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0919,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.096,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0859,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.096,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.0933,frostwire,[desktop] javadoc issues cleanup/
,,0.0996,frostwire,[desktop] javadoc issues cleanup/
,,0.0891,frostwire,[desktop] javadoc issues cleanup/
,,0.0933,frostwire,[desktop] javadoc issues cleanup/
,,0.0859,frostwire,[desktop] declaration access fixes/[desktop] javadoc issues cleanup/
,,0.1004,frostwire,[android] IllegalStateException firing up an intent to MusicPlaybackService/[android] fixes on EngineService startup/shutdown/
,,0.0673,frostwire,[android] fixes on EngineService startup/shutdown/
,,0.0887,frostwire,[android] purchase flow bug on new billing sdk fixed/
,,0.0801,frostwire,[android] Issue NotificationUpdateDemon ArrayIndexOutOfBoundsException/
,,0.0673,frostwire,[android] fixes on EngineService startup/shutdown/
,,0.0765,frostwire,[android] Fixes issue
,,0.2094,frostwire,"[desktop] Fixes issues w/NetworkInterfacePanelItem, startBittorrentCore fixes Code to select network interfaces and port in Initializer.startBittorrentCore() and NetworkInterfacePanelItem.applyOptions() refactored to avoid code repetition. A crash and a on NetworkInterfacePanelItem.applyOptions() prevented FrostWire from saving the preferred network interface NetworkInterfacePanelItem now shows the network interfaces that make sense. Excludes localLink addresses, loopback or other ineligible network interfaces. RouterConfigurationPaneItem port range picking refactored org.limewire.util.NetworkUtils gets new functions public static int getPortInRange(boolean useManualRange, int defaultPort0, int defaultPort1, int manualPort0, int manualPort1) public static String getLibtorrentFormattedNetworkInterface(boolean useCustomNetworkInterface, String defaultInetAddress, String customInetAddress, final int port) public static boolean isLinkLocal(Address address)/"
,,0.1822,frostwire,"[desktop] Fix false negative detecting CyberGhost VPN on macOS mojave jlibtorrents enum_net network interfaces is coming short enumerating the network interfaces like before, at least with CyberGhost VPN, in case of a negative result from the jlibtorrent layer, if were on Posix, we do a netstat check and look for default and ipsec strings on the netstat interface entries/"
,,0.0685,frostwire,[desktop] make sure SC.getDownloadURL() never happens on main thread other fixes for copy paste url downloads/
,,0.2057,frostwire,"[desktop] Fixes issues w/NetworkInterfacePanelItem, startBittorrentCore fixes Code to select network interfaces and port in Initializer.startBittorrentCore() and NetworkInterfacePanelItem.applyOptions() refactored to avoid code repetition. A crash and a on NetworkInterfacePanelItem.applyOptions() prevented FrostWire from saving the preferred network interface NetworkInterfacePanelItem now shows the network interfaces that make sense. Excludes localLink addresses, loopback or other ineligible network interfaces. RouterConfigurationPaneItem port range picking refactored org.limewire.util.NetworkUtils gets new functions public static int getPortInRange(boolean useManualRange, int defaultPort0, int defaultPort1, int manualPort0, int manualPort1) public static String getLibtorrentFormattedNetworkInterface(boolean useCustomNetworkInterface, String defaultInetAddress, String customInetAddress, final int port) public static boolean isLinkLocal(Address address)/"
,,0.207,frostwire,"[desktop] Fixes issues w/NetworkInterfacePanelItem, startBittorrentCore fixes Code to select network interfaces and port in Initializer.startBittorrentCore() and NetworkInterfacePanelItem.applyOptions() refactored to avoid code repetition. A crash and a on NetworkInterfacePanelItem.applyOptions() prevented FrostWire from saving the preferred network interface NetworkInterfacePanelItem now shows the network interfaces that make sense. Excludes localLink addresses, loopback or other ineligible network interfaces. RouterConfigurationPaneItem port range picking refactored org.limewire.util.NetworkUtils gets new functions public static int getPortInRange(boolean useManualRange, int defaultPort0, int defaultPort1, int manualPort0, int manualPort1) public static String getLibtorrentFormattedNetworkInterface(boolean useCustomNetworkInterface, String defaultInetAddress, String customInetAddress, final int port) public static boolean isLinkLocal(Address address)/"
,,0.2033,frostwire,"[desktop] Fixes issues w/NetworkInterfacePanelItem, startBittorrentCore fixes Code to select network interfaces and port in Initializer.startBittorrentCore() and NetworkInterfacePanelItem.applyOptions() refactored to avoid code repetition. A crash and a on NetworkInterfacePanelItem.applyOptions() prevented FrostWire from saving the preferred network interface NetworkInterfacePanelItem now shows the network interfaces that make sense. Excludes localLink addresses, loopback or other ineligible network interfaces. RouterConfigurationPaneItem port range picking refactored org.limewire.util.NetworkUtils gets new functions public static int getPortInRange(boolean useManualRange, int defaultPort0, int defaultPort1, int manualPort0, int manualPort1) public static String getLibtorrentFormattedNetworkInterface(boolean useCustomNetworkInterface, String defaultInetAddress, String customInetAddress, final int port) public static boolean isLinkLocal(Address address)/"
,,0.1855,frostwire,"[desktop] Fix false negative detecting CyberGhost VPN on macOS mojave jlibtorrents enum_net network interfaces is coming short enumerating the network interfaces like before, at least with CyberGhost VPN, in case of a negative result from the jlibtorrent layer, if were on Posix, we do a netstat check and look for default and ipsec strings on the netstat interface entries/"
,,0.1903,frostwire,"[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/"
,,0.1368,frostwire,"[android/common] Fixed synchronization issues with Keyword detector Tried: Minimize synchronized block spans Dont synchronize the collection object, use an Object as the monitor instead The issue was that on one end the submission time was measured with SystemClock.elapsedRealtime, and on the other end with System.currentTimeMillis I might just remove all mentions of SystemClock.ellapsedRealtime from the code base to avoid these issues in the future Some cleanups/"
,,0.1142,frostwire,[android] dont consider errored transfers for status notification count/
,,0.1039,frostwire,[android] dont consider errored transfers for status notification count/
,,0.1984,frostwire,"[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/[android] apollo StopListener cleanup/"
,,0.3974,frostwire,"[android] Major MusicPlaybackService overhaul The most important playback issues are gone, playback continues through playlist, repeat modes work Theres still a glitch on the very first song played, gotta hit play again, will fix Now MusicPlaybackService is supposed to receive all of its background calls, or perhaps, all calls routed through its MusicPlayerHandler Thread/Loop. If all calls are routed through this queue, there should be no need to synchronize any resource and there should be no unexpected behaviors. No more expensive synchronized blocks, no more deadlocks. synchronized is evil. Also, no more anonymous callbacks, or nested callbacks. Since everything is done on the background and it doesnt block the UI thread, all methods that used to receive callbacks now return boolean, true for sucess, false for failure, usually on success callbacks are acted upon. Some callbacks used to get boolean results, its now very functional or a la go-lang, keep it simple stupid. anonymous callbacks, dynamic runnables and lambdas are also hard to debug/trace, its perhaps a bit more verbose but its clean and easy to read in stack traces and to step through in the debugger. Still a lot more to fix: album art not loading properly in song adapter or music activity/"
,,0.1922,frostwire,"[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/"
,,0.47100000000000003,frostwire,"[android] add to playlist should happen in handler thread also fixes infinite loop bug/[android] Save to playlist fixed, build 624/[android] Major MusicPlaybackService overhaul The most important playback issues are gone, playback continues through playlist, repeat modes work Theres still a glitch on the very first song played, gotta hit play again, will fix Now MusicPlaybackService is supposed to receive all of its background calls, or perhaps, all calls routed through its MusicPlayerHandler Thread/Loop. If all calls are routed through this queue, there should be no need to synchronize any resource and there should be no unexpected behaviors. No more expensive synchronized blocks, no more deadlocks. synchronized is evil. Also, no more anonymous callbacks, or nested callbacks. Since everything is done on the background and it doesnt block the UI thread, all methods that used to receive callbacks now return boolean, true for sucess, false for failure, usually on success callbacks are acted upon. Some callbacks used to get boolean results, its now very functional or a la go-lang, keep it simple stupid. anonymous callbacks, dynamic runnables and lambdas are also hard to debug/trace, its perhaps a bit more verbose but its clean and easy to read in stack traces and to step through in the debugger. Still a lot more to fix: album art not loading properly in song adapter or music activity/[android] Fixes issue where player would stop at the end of a song MusicPlaybackService is now decoupled from Asyncs.async/EngineThreadPool Do not compromise the performance of search and download when using the music player. Sending all background requests to a single HandlerThread in MusicPlaybackService makes things a lot simpler, less chances for race conditions if all requests are executed in the order theyre requested given all the synchronized blocks we inherited from Apollos codebase More fine grained intervals when notifying music player changes, depending on the change being notified There are still glitches with Repeat song mode, this code is full of overcomplexities that are hard to track down. My Music / Art Albums not loading Started debugging and doing a few fixes, album art isnt loading correctly for some reason/[android] fixes after crash reports from 618 relaxed syncrhonization on entire MusicPlaybackService simplifications and cleanups multiplayer got lost (null)/[android] cleanup and crashes starting music player from my music gone Tested all the way from Android 5.0 to Android 10/[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/"
,,0.4544,frostwire,"[android] Major MusicPlaybackService overhaul The most important playback issues are gone, playback continues through playlist, repeat modes work Theres still a glitch on the very first song played, gotta hit play again, will fix Now MusicPlaybackService is supposed to receive all of its background calls, or perhaps, all calls routed through its MusicPlayerHandler Thread/Loop. If all calls are routed through this queue, there should be no need to synchronize any resource and there should be no unexpected behaviors. No more expensive synchronized blocks, no more deadlocks. synchronized is evil. Also, no more anonymous callbacks, or nested callbacks. Since everything is done on the background and it doesnt block the UI thread, all methods that used to receive callbacks now return boolean, true for sucess, false for failure, usually on success callbacks are acted upon. Some callbacks used to get boolean results, its now very functional or a la go-lang, keep it simple stupid. anonymous callbacks, dynamic runnables and lambdas are also hard to debug/trace, its perhaps a bit more verbose but its clean and easy to read in stack traces and to step through in the debugger. Still a lot more to fix: album art not loading properly in song adapter or music activity/[android] cleanup and crashes starting music player from my music gone Tested all the way from Android 5.0 to Android 10/[android] Fixes player notification bug where play/pause button wasnt refreshed on pause/[android] fix double notification issue/"
,,0.161,frostwire,[android] cleanup and crashes starting music player from my music gone Tested all the way from Android 5.0 to Android 10/
,,0.0977,frostwire,[android] Fixes crash when searching within My Music/
,,0.2384,frostwire,"[android] fixes after crash reports from 618 relaxed syncrhonization on entire MusicPlaybackService simplifications and cleanups multiplayer got lost (null)/[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/"
,,0.1121,frostwire,[android] avoid context leak initializing AppLovinAdNetwork Now that we use the EngineThreadPool we have context leak detection built in./
,,0.063,frostwire,[android] NPE Fix on PlayStore subscription list query/
,,0.0792,frostwire,[android] remove .bin extension from finished downloaded files (Issue This seems to help/
,,0.1,frostwire,[android] Fixes Broken Transfers Notification/
,,0.2417,frostwire,"[android] Fixes issue where an existing partial torrent transfer could not add more items from a .torrent in My files its not working 100% of the way, trying to figure out why the uiBittorrentDownload in the Transfer Detail fragment isnt updated all the times, it works most of the times. Gets wonky if the transfer is paused sometimes, but if you try again it will add all of the specified files. Gotta come back to this/[android] dont let the main looper crash with one of the async tasks/"
,,0.5127,frostwire,"[android] UIBittorrentDownload not always had a listener set Refactor: Moved UIBittorrentDownload.StatusListener to its own class UIBTDownloadListener. Made sure that the BTDownload inside the UIBittorrentDownload always has a UIBTDownloadListener to notify of important events, like finishing. Made sure we perform a finalCleanup if were not seeding after a download finishes. Theres still an issue with 1 out of N files not being scanned upon download finishing./[android] array out of bounds issue adding uiTransfer to TransferManager, mopub banner on basic home/[android] Major MusicPlaybackService overhaul The most important playback issues are gone, playback continues through playlist, repeat modes work Theres still a glitch on the very first song played, gotta hit play again, will fix Now MusicPlaybackService is supposed to receive all of its background calls, or perhaps, all calls routed through its MusicPlayerHandler Thread/Loop. If all calls are routed through this queue, there should be no need to synchronize any resource and there should be no unexpected behaviors. No more expensive synchronized blocks, no more deadlocks. synchronized is evil. Also, no more anonymous callbacks, or nested callbacks. Since everything is done on the background and it doesnt block the UI thread, all methods that used to receive callbacks now return boolean, true for sucess, false for failure, usually on success callbacks are acted upon. Some callbacks used to get boolean results, its now very functional or a la go-lang, keep it simple stupid. anonymous callbacks, dynamic runnables and lambdas are also hard to debug/trace, its perhaps a bit more verbose but its clean and easy to read in stack traces and to step through in the debugger. Still a lot more to fix: album art not loading properly in song adapter or music activity/[android] Fixes issue creating ephemeral playlist/[android] cleanup and crashes starting music player from my music gone Tested all the way from Android 5.0 to Android 10/[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/[android] NPE on UIUtils.isScreenLocked found in the wild/"
,,0.3695,frostwire,"[android] UIBittorrentDownload not always had a listener set Refactor: Moved UIBittorrentDownload.StatusListener to its own class UIBTDownloadListener. Made sure that the BTDownload inside the UIBittorrentDownload always has a UIBTDownloadListener to notify of important events, like finishing. Made sure we perform a finalCleanup if were not seeding after a download finishes. Theres still an issue with 1 out of N files not being scanned upon download finishing./[android] array out of bounds issue adding uiTransfer to TransferManager, mopub banner on basic home/[android] fixed sync issues with TransferFragment/[android] Fixes issue where an existing partial torrent transfer could not add more items from a .torrent in My files its not working 100% of the way, trying to figure out why the uiBittorrentDownload in the Transfer Detail fragment isnt updated all the times, it works most of the times. Gets wonky if the transfer is paused sometimes, but if you try again it will add all of the specified files. Gotta come back to this/[android] dont consider errored transfers for status notification count/"
,,0.0974,frostwire,"[android] NotificationUpdateDemon TimerSubscription fix When the application is exited having a static TimerSubscription instance avoids an issue on which on Exit, a new EngineService is created and in the process a new NotificationUpdateDemon, which has a new instance of TimerSubscription which we cannot unsubscribe. By keeping a single static instance, when we mark it as unsubscribed all the logic works. Also we re-use the instance to resubscribe./"
,,0.4049,frostwire,"[android] Major MusicPlaybackService overhaul The most important playback issues are gone, playback continues through playlist, repeat modes work Theres still a glitch on the very first song played, gotta hit play again, will fix Now MusicPlaybackService is supposed to receive all of its background calls, or perhaps, all calls routed through its MusicPlayerHandler Thread/Loop. If all calls are routed through this queue, there should be no need to synchronize any resource and there should be no unexpected behaviors. No more expensive synchronized blocks, no more deadlocks. synchronized is evil. Also, no more anonymous callbacks, or nested callbacks. Since everything is done on the background and it doesnt block the UI thread, all methods that used to receive callbacks now return boolean, true for sucess, false for failure, usually on success callbacks are acted upon. Some callbacks used to get boolean results, its now very functional or a la go-lang, keep it simple stupid. anonymous callbacks, dynamic runnables and lambdas are also hard to debug/trace, its perhaps a bit more verbose but its clean and easy to read in stack traces and to step through in the debugger. Still a lot more to fix: album art not loading properly in song adapter or music activity/[android] Fixes issue creating ephemeral playlist/[android] NPE on FileListeAdapter/[android] NPE on FileListAdapter/"
,,0.4069,frostwire,"[android] array out of bounds issue adding uiTransfer to TransferManager, mopub banner on basic home/[android] Major MusicPlaybackService overhaul The most important playback issues are gone, playback continues through playlist, repeat modes work Theres still a glitch on the very first song played, gotta hit play again, will fix Now MusicPlaybackService is supposed to receive all of its background calls, or perhaps, all calls routed through its MusicPlayerHandler Thread/Loop. If all calls are routed through this queue, there should be no need to synchronize any resource and there should be no unexpected behaviors. No more expensive synchronized blocks, no more deadlocks. synchronized is evil. Also, no more anonymous callbacks, or nested callbacks. Since everything is done on the background and it doesnt block the UI thread, all methods that used to receive callbacks now return boolean, true for sucess, false for failure, usually on success callbacks are acted upon. Some callbacks used to get boolean results, its now very functional or a la go-lang, keep it simple stupid. anonymous callbacks, dynamic runnables and lambdas are also hard to debug/trace, its perhaps a bit more verbose but its clean and easy to read in stack traces and to step through in the debugger. Still a lot more to fix: album art not loading properly in song adapter or music activity/"
,,0.075,frostwire,"[android] catch more exceptions on messages sent to main looper, warnings, cleanup/"
,,0.1263,frostwire,"[android] catch more exceptions on messages sent to main looper, warnings, cleanup/[android] Fixes Broken Transfers Notification/"
,,0.4284,frostwire,"[android] Major MusicPlaybackService overhaul The most important playback issues are gone, playback continues through playlist, repeat modes work Theres still a glitch on the very first song played, gotta hit play again, will fix Now MusicPlaybackService is supposed to receive all of its background calls, or perhaps, all calls routed through its MusicPlayerHandler Thread/Loop. If all calls are routed through this queue, there should be no need to synchronize any resource and there should be no unexpected behaviors. No more expensive synchronized blocks, no more deadlocks. synchronized is evil. Also, no more anonymous callbacks, or nested callbacks. Since everything is done on the background and it doesnt block the UI thread, all methods that used to receive callbacks now return boolean, true for sucess, false for failure, usually on success callbacks are acted upon. Some callbacks used to get boolean results, its now very functional or a la go-lang, keep it simple stupid. anonymous callbacks, dynamic runnables and lambdas are also hard to debug/trace, its perhaps a bit more verbose but its clean and easy to read in stack traces and to step through in the debugger. Still a lot more to fix: album art not loading properly in song adapter or music activity/[android] cleanup and crashes starting music player from my music gone Tested all the way from Android 5.0 to Android 10/"
,,0.2307,frostwire,"[android] Fixes issue where an existing partial torrent transfer could not add more items from a .torrent in My files its not working 100% of the way, trying to figure out why the uiBittorrentDownload in the Transfer Detail fragment isnt updated all the times, it works most of the times. Gets wonky if the transfer is paused sometimes, but if you try again it will add all of the specified files. Gotta come back to this/"
,,0.1287,frostwire,"[android] rare NPE/[android] rare (single ocurrence) NPE on ProductPaymentsOptionsView Seen in Android 8, build 620/"
,,0.0828,frostwire,"[android] catch more exceptions on messages sent to main looper, warnings, cleanup/"
,,0.0932,frostwire,"[android] EngineService recovers BTEngine perfectly on exit/restart In the process: Made boolean state volatile Added thread safety mechanisms to change state. A lock and an updateState method which was used to debug what was happening Nothing was making sense because every time we talked to the service for stopping or shutting down, it seems as if we were working with a new instance of the service, so you dont really want to keep states in the service and expect it will remain, therefore the solution was to make state a static private variable for EngineService/"
,,0.1019,frostwire,"[android] EngineService recovers BTEngine perfectly on exit/restart In the process: Made boolean state volatile Added thread safety mechanisms to change state. A lock and an updateState method which was used to debug what was happening Nothing was making sense because every time we talked to the service for stopping or shutting down, it seems as if we were working with a new instance of the service, so you dont really want to keep states in the service and expect it will remain, therefore the solution was to make state a static private variable for EngineService/"
,,0.2037,frostwire,"[android] syntax error/[android] protect UI thread from unexpected crashes when posting to main looper if ran on development environment the crash still happens, should lower to some extent a lot of vague crashes posting messages from unknown locations to the main thread/[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/[android] illegal state starting music playback service on 9,10 fix attempt/"
,,0.2407,frostwire,"[android] Fixes issue creating ephemeral playlist/[android/apollo] Simplification of MusicPlaybackService lifecycle. Instead of constantly trying to cancel a shutdown alarm, the service is not started until its needed and stopped as soon as playback is fully stopped. Removed a bunch of unncessary stuff around that old logic/"
,,0.1399,frostwire,"[android] silence debug output Its been very useful automatically renaming the threads submitted to the EngineThreadPool to understand which thread might be problematic/[android/common] Fixed synchronization issues with Keyword detector Tried: Minimize synchronized block spans Dont synchronize the collection object, use an Object as the monitor instead The issue was that on one end the submission time was measured with SystemClock.elapsedRealtime, and on the other end with System.currentTimeMillis I might just remove all mentions of SystemClock.ellapsedRealtime from the code base to avoid these issues in the future Some cleanups/[android] raise max debug queued tasks to 100 I see it peaking up to 80 or 90 when doing music playback, lots of async calls coming from different places, trying to use Throttle to curb them/[android] EngineThreadPool logging and adjustments in debug queue size/"
,,0.1869,frostwire,"[android] Fixes crash opening My Music search result the so called fancy undocumented search hack no longer works, no data1, data2 column available on the table were using for search. Also, made sure that we startMusicPlaybackService when playing from these search results for the first time/"
,,0.1844,frostwire,"[android] rare NPE on AudioPlayerActivity/[android] AudioPlaybackActivity.initPlaybackControls NPE, reoderdering of initializaitons/[android] AudioPlayerActivity NPE fix/[android] rare NPE on AudioPlayerActivity initPlaybackControls is called from onResume and onCreate. The reported NPE is coming from the AudioPlayerActivity.onCreate stack. Views that are assigned to mutable properties in the class are yielding null values. Reported only by 13 users./"
,,0.1809,frostwire,"[android] Fixes crash opening My Music search result the so called fancy undocumented search hack no longer works, no data1, data2 column available on the table were using for search. Also, made sure that we startMusicPlaybackService when playing from these search results for the first time/"
,,0.1719,frostwire,"[android] Fixes crash opening My Music search result the so called fancy undocumented search hack no longer works, no data1, data2 column available on the table were using for search. Also, made sure that we startMusicPlaybackService when playing from these search results for the first time/"
,,0.0639,frostwire,[android] search header banner dismiss button logic fix/
,,0.066,frostwire,[android] wording fix in parameter/
,,0.071,frostwire,[android] class cast issue on UIBittorrentDownload::equals/
,,0.0902,frostwire,"[android] error log if null info hash BTDownloads are added to BTEngine/[android] dont break if infoHash is null, bug adding slide transfers/"
,,0.0751,frostwire,"[android] no longer throw IndexOutOfBoundsException, avoid it/"
,,0.0686,frostwire,[android] IndexOutOfBoundsException/
,,0.0566,javacpp,* Fix on `Loader.load()` the default library name of classes without global=...)`/
,,0.0599,jna,fix issue 133 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0653,jna,fix failing tests in StructureTest (avoid returning self when sharing memory)/
,,0.0887,jna,Diagnostic for temp jnidispatch file creation Nesting underlying exception will provide more insight on what may caused an error./fixes file perms/fix build on w32/fix file perms/
,,0.0833,jna,fix snprintf on windows/fix library load error w/unicode/fix amd64 native thread cleanup test/fix dll callbacks inline asm with msvc/fix 32-bit build under MSVC 10/fix FP callback args on ARM/
,,0.0609,jna,fix missing import/
,,0.0694,jna,fix struct layout cacheing in Union/
,,0.0778,jna,Merge branch master of Pulling master back to get compilation fixes./fix union sizing/layout issue/
,,0.0669,jna,fix file perms/address issue
,,0.0673,jna,ARM VFP fix for old toolchains/
,,0.1173,jna,"Update W32Service#stopService to be more resilent to delayed status updates If the service asked to be stopped does not immediatly update its state in response to a stop command, the stopService method raised an exception. This change follows a sample on MSDN: It only uses the status query to determine the final state and not to see if the services reacted to the stop request. Closes:"
,,0.1173,jna,"Update W32Service#stopService to be more resilent to delayed status updates If the service asked to be stopped does not immediatly update its state in response to a stop command, the stopService method raised an exception. This change follows a sample on MSDN: It only uses the status query to determine the final state and not to see if the services reacted to the stop request. Closes:"
,,0.0872,jna,Merge pull request from alexvsimon/master fix of issue#503 Add supporting of Linux-sparcv9 platform/fix of issue#503 Add supporting of Linux-sparcv9 platform/
,,0.0692,jna,Fix for free data handle in DdemlUtil. Adding additional comment for DdeAccessData binding./
,,0.0807,jna,Fixed a typo in DdemlUtilTest (quitely quietly)/
,,0.08,OpenDDS,Added spdp shutdown checks to avoid race condition in task enqueue methods./
,,0.0596,OpenDDS,Provide some context for Redmine Issue# 1446 error message logging/
,,0.0744,OpenDDS,"fix fuzz errors, remove tabs/"
,,0.0702,OpenDDS,"fix fuzz errors, remove tabs/"
,,0.0653,OpenDDS,Merge pull request from jwillemsen/master Add include to try to fix a build on the scoreboard/Add include to tr yto fix a build on the scoreboard * dds/DCPS/DiscoveryBase.h:/
,,0.0937,OpenDDS,Merge pull request from huangminghuang/shutdown_fix Fix memory access issue when shutting down/Fix memory access issue when shutting down/Avoid implicit conversion from pointer to RcHandle/Merge pull request from huangminghuang/transport_client_fix Fix build problem for Sun C++ 5.9/Fix build problem for Sun C++ 5.9/Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.0833,OpenDDS,Merge pull request from mitza-oci/master Fixed RTPS ParticipantMessageData entityIds/Fixed RTPS ParticipantMessageData entityIds/
,,0.0716,OpenDDS,Merge pull request from jwillemsen/master Fixed typos/Fixed typo * dds/DCPS/DataCollector_T.h:/
,,0.0689,OpenDDS,Merge pull request from jwillemsen/master Fixed typos/Fixed typo * dds/DCPS/OwnershipManager.h:/
,,0.0556,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0588,OpenDDS,Coverity Scan Defects: Dereference after null check fixes./
,,0.0556,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0556,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0588,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./Merge pull request from huangminghuang/StaticDiscovery_Fix Static discovery fix/
,,0.0577,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0556,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0577,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0599,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0643,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0577,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0545,OpenDDS,Coverity Scan Defects: Dereference after null check fixes./
,,0.0657,OpenDDS,Merge branch jwi-gendirbug/Merge branch master into issue460-multidim Conflicts: .travis.yml/Merge pull request from jwillemsen/jwi-gendirbug Cleanup in various files/
,,0.0599,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0577,OpenDDS,Fix deadlock issue in RtpsUdpDataLink/Merge pull request from huangminghuang/StaticDiscovery_Fix Static discovery fix/
,,0.0806,OpenDDS,"Merge pull request from jwillemsen/master Fixed crashes as reported with issue that we have an instance before using it, solves the crashes as seen with issue * dds/DCPS/DataReaderImpl.cpp: * dds/DCPS/RequestedDeadlineWatchdog.cpp:/"
,,0.0657,OpenDDS,Merge branch jwi-gendirbug/Merge branch master into issue460-multidim Conflicts: .travis.yml/Merge pull request from jwillemsen/jwi-gendirbug Cleanup in various files/
,,0.0891,OpenDDS,"Merge pull request from jwillemsen/jwi-shutdown-565 Fixed memory leaks/valgrind issues when having a double shutdown, issue"
,,0.0852,OpenDDS,"Merge pull request from jwillemsen/jwi-shutdown-565 Fixed memory leaks/valgrind issues when having a double shutdown, issue"
,,0.0948,OpenDDS,"Merge pull request from jwillemsen/jwi-shutdown-565 Fixed memory leaks/valgrind issues when having a double shutdown, issue"
,,0.0692,OpenDDS,Merge pull request from PaulCalabrese/master Fix Monitor library and test/Add new DCPSMonitor configuration option to initialize monitor functionality. Fix bug in DCPSRTISerialization command line option./
,,0.0941,OpenDDS,Merge pull request from PaulCalabrese/master Fix Monitor library and test/Fix RtiSerialization test. Clean up some monitor library code. More improvements to the monitor test./Add new DCPSMonitor configuration option to initialize monitor functionality. Fix bug in DCPSRTISerialization command line option./Updated order of steps for Service_Participant::shutdown() Now reactor_task_ is stopped before discoveryMap_.clear() to avoid an issue where TAO_ORB_Cores TSS for that reactor thread is still allocated at when the process ends./
,,0.0639,OpenDDS,Ignore orb shutdown exceptions/
,,0.0712,OpenDDS,Updated RTPS AckNack final flag interpretation based on OMG issue DDSIRTP23-36/
,,0.0597,OpenDDS,Merge pull request from huangminghuang/deadlock-fix Deadlock fix/Fix deadlock issue/fixed stuff/
,,0.0818,OpenDDS,fixed build error with precompiled header/
,,0.063,OpenDDS,secure endpoint discovery fixes / cleanup/
,,0.0843,OpenDDS,fixed a bug in the FACE mapping accidentally introduced during the C++11 changes/
,,0.0648,OpenDDS,post-merge cleanup; fixed method names in logging statements/
,,0.069,OpenDDS,Merge pull request from simpsont-oci/unit_tests_and_valgrind_issues_cleanup Unit tests and valgrind issues cleanup/fixing several issues caught during valgrind run of scalability testing/
,,0.069,OpenDDS,Merge pull request from simpsont-oci/unit_tests_and_valgrind_issues_cleanup Unit tests and valgrind issues cleanup/fixing several issues caught during valgrind run of scalability testing/
,,0.0653,OpenDDS,TransportRegistry::remove_inst() calls shutdown on the transport to avoid threads it created outliving it/
,,0.0738,OpenDDS,"fixing bug setting prev_dst in send_bundled_responses, switching static discovery acknacks to use send_bundled_replies, adding mutex protection to static discovery test listener/"
,,0.0702,OpenDDS,Merge pull request from jrw972/master Make inconsistent topic tests fail predictably/
,,0.0774,OpenDDS,"fixing bug setting prev_dst in send_bundled_responses, switching static discovery acknacks to use send_bundled_replies, adding mutex protection to static discovery test listener/"
,,0.0634,OpenDDS,Merge pull request from objectcomputing/tcp-reconnect-fix fix missing connection lost notification issue/
,,0.0648,OpenDDS,Merge pull request from jonesc-oci/network-config Fix conditional compilation of LinuxNetworkConfigMonitor/Fix spelling./
,,0.0681,pljava,Fixed copy/paste mistakes/
,,0.0636,realm-java,Removed all the generated source files (issue
,,0.0636,realm-java,Removed all the generated source files (issue
,,0.0636,realm-java,Removed all the generated source files (issue
,,0.0686,realm-java,Fix incorrect import in android example/
,,0.0596,realm-java,Removed all the generated source files (issue
,,0.0596,realm-java,Removed all the generated source files (issue
,,0.0616,realm-java,Removed all the generated source files (issue
,,0.0648,realm-java,Adjusted docs and examples to the refactoring (issue and issue
,,0.0639,realm-java,Minor style fix/Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/line breaks/
,,0.0689,realm-java,Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/
,,0.0706,realm-java,Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/Merge branch master of github.com:Tightdb/tightdb_java into group-readonly-bug/fixed constructor issue in test case/
,,0.063,realm-java,Merge branch master into cm-bug-clear/
,,0.0599,realm-java,Minor fix/
,,0.0577,realm-java,More fixes for the AP/
,,0.3493,realm-java,"Fixed RealmList not creating DynamicRealmObject of the correct type./Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Fix unit test/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Adding jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/"
,,0.3024,realm-java,"Merge pull request from realm/mc/bug/1945 Access to RealmResults based on deleted RealmList/Access to RealmResults based on deleted RealmList * When the original RealmList is deleted, for most methods of RealmResults should just work without crash by just treat it like an empty RealmResults. * RealmResults.where() throws IllegalStateExecption in this case. * RealmResults.isValid() returns false in this case. This is a temp fix, check for more details. Close branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Adding jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/kg/bug/lessthan-on-arm Unit test: Comparing with negative numbers triggered ARM bug/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/"
,,0.3599,realm-java,"Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Adding jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/"
,,0.3617,realm-java,"Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Adding jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/"
,,0.3769,realm-java,"Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Adding jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and"
,,0.3899,realm-java,"Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Adding jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and"
,,0.3254,realm-java,"Merge pull request from realm/mc/bug/1945 Access to RealmResults based on deleted RealmList/Access to RealmResults based on deleted RealmList * When the original RealmList is deleted, for most methods of RealmResults should just work without crash by just treat it like an empty RealmResults. * RealmResults.where() throws IllegalStateExecption in this case. * RealmResults.isValid() returns false in this case. This is a temp fix, check for more details. Close branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Adding jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/my/fix/memory-leak-in-jni fix potential memory leak in jni code. and skip copying back to native array to java array if native array has not been changed./fix potential memory leak in jni code and skip copying back to java array if native array is not modified./"
,,0.3815,realm-java,"Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Adding jni layer interop code to utilize find method. Testing Adding header file Checking to ensure were on the right Realm before performing the contains check. Adding changlog Adding table view code and changing return types to jlong so we can use them in the indexOf Adding multi-realm test Removing code that should not have been in the commit Changing LinkView.cpp method to use commonly used Macro and udpated null checks. Changing LinkView.cpp method to use commonly used Macro and udpated null checks and moved contains method to override instead of overload. Using instance of instead of assignable from and using long value instead of returning a boolean. Checking for row and index validity in the cpp layer. Also removing the not found constant in order to the use the constant in TableOrView Checking for managed mode. Falling back to default impl. Updating changelog. Reverting back to to_jlong_or_not_found Fixing a few compilation issues as well as applying code review updates. Fixing managed mode bug that I accidentally introduced. Updates as per recommended, issues listed below. After changing cpp code to return tests started failing items were not found. Im on the fence if this is expected or not. Im not to familiar wit the underlying core to know if should be needed. Also added tests to check to see if a query or list contains an item that is in the same Realm, but from another query/result. This test creates a native crash. I tried to identify the root cause by pulling the tombstone and performing `ndk-stack` and `addr2line` on it but I could not properly identify the symbols and where they might be. Inspiration and HOWTO to debug NDK from here: Adding nativePtr to JNI call. Also added isLoaded() call. Not contained test failing on out of bounds exception on row indexes. Changing TableOrView#find() name to TableOrView#sourceRowIndex() as per recommendation of Adding check for parent table and re-enabled the other jni targets and fixed incorrect test. Received help with this from and"
,,0.0987,realm-java,Merge pull request from realm/cm/lint-warnings-rxjava Fixed lint warnings in RxJava example/Fixed lint warnings in RxJava example/
,,0.1063,realm-java,Merge pull request from realm/cm/lint-warnings-rxjava Fixed lint warnings in RxJava example/Fixed lint warnings in RxJava example/
,,0.1044,realm-java,Merge pull request from realm/cm/lint-warnings-rxjava Fixed lint warnings in RxJava example/Fixed lint warnings in RxJava example/
,,0.0967,realm-java,Merge pull request from realm/cm/lint-warnings-rxjava Fixed lint warnings in RxJava example/Fixed lint warnings in RxJava example/
,,0.1063,realm-java,Merge pull request from realm/cm/lint-warnings-rxjava Fixed lint warnings in RxJava example/Fixed lint warnings in RxJava example/
,,0.0987,realm-java,Merge pull request from realm/cm/lint-warnings-rxjava Fixed lint warnings in RxJava example/Fixed lint warnings in RxJava example/
,,0.0854,realm-java,Merge pull request from realm/my/lint/unitTestExample fix lint rawnings in unitTestExample/fix lint rawnings in unitTestExample/
,,0.2824,realm-java,"Finalizer optimization: Replace hashmap Problems we had by using hashmap: 1. Hashmap is not thread save and we access the same hashmap in finalizer thread and caller thread of Rows constructor. 2. Removing reference from the hashmap is a little bit slower when there are many references waited to be GCed. Refactor the NativeObjectReference, make it as a final class and calling native resources deallocation directly inside the class. This is needed for further optimization, like batch delete native pointers to avoid multiple JNI calls. Some benchmark comparison using the array solution vs hashmap solution: (Benchmark running on Genymotion Nexus 6 5.1.0) (hashmap) Creating 200000 rows in avg 10000 rows takes 65ms (array) Creating 200000 rows in avg 10000 rows takes 67ms (hashmap) Deleting 200000 rows in avg 10000 rows takes 8ms (array) Deleting 200000 rows in avg 10000 rows takes 4ms (hashmap) Creating 2000000 rows in avg 10000 rows takes 30ms (array) Creating 2000000 rows in avg 10000 rows takes 28ms (hashmap) Deleting 200000 rows in avg 10000 rows takes 95ms (array) Deleting 200000 rows in avg 10000 rows takes 46ms (hashmap) Creating 10000000 rows in avg 10000 rows takes 33ms (array) Creating 10000000 rows in avg 10000 rows takes 28ms (hashmap) Deleting 1000000 rows in avg 10000 rows takes 62ms (array) Deleting 1000000 rows in avg 10000 rows takes 23ms/"
,,0.2847,realm-java,"Finalizer optimization: Replace hashmap Problems we had by using hashmap: 1. Hashmap is not thread save and we access the same hashmap in finalizer thread and caller thread of Rows constructor. 2. Removing reference from the hashmap is a little bit slower when there are many references waited to be GCed. Refactor the NativeObjectReference, make it as a final class and calling native resources deallocation directly inside the class. This is needed for further optimization, like batch delete native pointers to avoid multiple JNI calls. Some benchmark comparison using the array solution vs hashmap solution: (Benchmark running on Genymotion Nexus 6 5.1.0) (hashmap) Creating 200000 rows in avg 10000 rows takes 65ms (array) Creating 200000 rows in avg 10000 rows takes 67ms (hashmap) Deleting 200000 rows in avg 10000 rows takes 8ms (array) Deleting 200000 rows in avg 10000 rows takes 4ms (hashmap) Creating 2000000 rows in avg 10000 rows takes 30ms (array) Creating 2000000 rows in avg 10000 rows takes 28ms (hashmap) Deleting 200000 rows in avg 10000 rows takes 95ms (array) Deleting 200000 rows in avg 10000 rows takes 46ms (hashmap) Creating 10000000 rows in avg 10000 rows takes 33ms (array) Creating 10000000 rows in avg 10000 rows takes 28ms (hashmap) Deleting 1000000 rows in avg 10000 rows takes 62ms (array) Deleting 1000000 rows in avg 10000 rows takes 23ms/"
,,0.0657,realm-java,Save LogCat files on CI in case of test failures (#3058)/
,,0.063,realm-java,Minor grammar fixes (#3722)/Fix examples/
,,0.3444,realm-java,"Move JNI build to cmake (#2960) * This requires AS 2.2 beta2+ to build. * Also NDK_HOME needs to be set. * The com.android.tools.build:gradle:2.2.0-beta2 requires java8 * The JNI header files are not maintained in the repo, instead, it will be generated from classes directly before native build. project realm-jni is not needed anymore. All native build is handled by CMake which will be supported by Android gradle 2.2.0+. We were using CMake 3.4 shipped by Android SDK manager when started this PR. Now the version bumped to 3.6. Unfortunately google decided to rewrite a whole new ??android.toolchain.cmake which has a few bugs and doesnt work with NDK r10e. So we ship a copy of ??android.toolchain.cmake from CMake 3.4 (the one from with some modifications to make it work with the cmake android gradle changes ("
,,0.3561,realm-java,"Move JNI build to cmake (#2960) * This requires AS 2.2 beta2+ to build. * Also NDK_HOME needs to be set. * The com.android.tools.build:gradle:2.2.0-beta2 requires java8 * The JNI header files are not maintained in the repo, instead, it will be generated from classes directly before native build. project realm-jni is not needed anymore. All native build is handled by CMake which will be supported by Android gradle 2.2.0+. We were using CMake 3.4 shipped by Android SDK manager when started this PR. Now the version bumped to 3.6. Unfortunately google decided to rewrite a whole new ??android.toolchain.cmake which has a few bugs and doesnt work with NDK r10e. So we ship a copy of ??android.toolchain.cmake from CMake 3.4 (the one from with some modifications to make it work with the cmake android gradle changes ("
,,0.3456,realm-java,"Move JNI build to cmake (#2960) * This requires AS 2.2 beta2+ to build. * Also NDK_HOME needs to be set. * The com.android.tools.build:gradle:2.2.0-beta2 requires java8 * The JNI header files are not maintained in the repo, instead, it will be generated from classes directly before native build. project realm-jni is not needed anymore. All native build is handled by CMake which will be supported by Android gradle 2.2.0+. We were using CMake 3.4 shipped by Android SDK manager when started this PR. Now the version bumped to 3.6. Unfortunately google decided to rewrite a whole new ??android.toolchain.cmake which has a few bugs and doesnt work with NDK r10e. So we ship a copy of ??android.toolchain.cmake from CMake 3.4 (the one from with some modifications to make it work with the cmake android gradle changes ("
,,0.3538,realm-java,"Move JNI build to cmake (#2960) * This requires AS 2.2 beta2+ to build. * Also NDK_HOME needs to be set. * The com.android.tools.build:gradle:2.2.0-beta2 requires java8 * The JNI header files are not maintained in the repo, instead, it will be generated from classes directly before native build. project realm-jni is not needed anymore. All native build is handled by CMake which will be supported by Android gradle 2.2.0+. We were using CMake 3.4 shipped by Android SDK manager when started this PR. Now the version bumped to 3.6. Unfortunately google decided to rewrite a whole new ??android.toolchain.cmake which has a few bugs and doesnt work with NDK r10e. So we ship a copy of ??android.toolchain.cmake from CMake 3.4 (the one from with some modifications to make it work with the cmake android gradle changes ("
,,0.355,realm-java,"Move JNI build to cmake (#2960) * This requires AS 2.2 beta2+ to build. * Also NDK_HOME needs to be set. * The com.android.tools.build:gradle:2.2.0-beta2 requires java8 * The JNI header files are not maintained in the repo, instead, it will be generated from classes directly before native build. project realm-jni is not needed anymore. All native build is handled by CMake which will be supported by Android gradle 2.2.0+. We were using CMake 3.4 shipped by Android SDK manager when started this PR. Now the version bumped to 3.6. Unfortunately google decided to rewrite a whole new ??android.toolchain.cmake which has a few bugs and doesnt work with NDK r10e. So we ship a copy of ??android.toolchain.cmake from CMake 3.4 (the one from with some modifications to make it work with the cmake android gradle changes ("
,,0.3503,realm-java,"Move JNI build to cmake (#2960) * This requires AS 2.2 beta2+ to build. * Also NDK_HOME needs to be set. * The com.android.tools.build:gradle:2.2.0-beta2 requires java8 * The JNI header files are not maintained in the repo, instead, it will be generated from classes directly before native build. project realm-jni is not needed anymore. All native build is handled by CMake which will be supported by Android gradle 2.2.0+. We were using CMake 3.4 shipped by Android SDK manager when started this PR. Now the version bumped to 3.6. Unfortunately google decided to rewrite a whole new ??android.toolchain.cmake which has a few bugs and doesnt work with NDK r10e. So we ship a copy of ??android.toolchain.cmake from CMake 3.4 (the one from with some modifications to make it work with the cmake android gradle changes ("
,,0.3503,realm-java,"Move JNI build to cmake (#2960) * This requires AS 2.2 beta2+ to build. * Also NDK_HOME needs to be set. * The com.android.tools.build:gradle:2.2.0-beta2 requires java8 * The JNI header files are not maintained in the repo, instead, it will be generated from classes directly before native build. project realm-jni is not needed anymore. All native build is handled by CMake which will be supported by Android gradle 2.2.0+. We were using CMake 3.4 shipped by Android SDK manager when started this PR. Now the version bumped to 3.6. Unfortunately google decided to rewrite a whole new ??android.toolchain.cmake which has a few bugs and doesnt work with NDK r10e. So we ship a copy of ??android.toolchain.cmake from CMake 3.4 (the one from with some modifications to make it work with the cmake android gradle changes ("
,,0.3433,realm-java,"Move JNI build to cmake (#2960) * This requires AS 2.2 beta2+ to build. * Also NDK_HOME needs to be set. * The com.android.tools.build:gradle:2.2.0-beta2 requires java8 * The JNI header files are not maintained in the repo, instead, it will be generated from classes directly before native build. project realm-jni is not needed anymore. All native build is handled by CMake which will be supported by Android gradle 2.2.0+. We were using CMake 3.4 shipped by Android SDK manager when started this PR. Now the version bumped to 3.6. Unfortunately google decided to rewrite a whole new ??android.toolchain.cmake which has a few bugs and doesnt work with NDK r10e. So we ship a copy of ??android.toolchain.cmake from CMake 3.4 (the one from with some modifications to make it work with the cmake android gradle changes ("
,,0.3468,realm-java,"Move JNI build to cmake (#2960) * This requires AS 2.2 beta2+ to build. * Also NDK_HOME needs to be set. * The com.android.tools.build:gradle:2.2.0-beta2 requires java8 * The JNI header files are not maintained in the repo, instead, it will be generated from classes directly before native build. project realm-jni is not needed anymore. All native build is handled by CMake which will be supported by Android gradle 2.2.0+. We were using CMake 3.4 shipped by Android SDK manager when started this PR. Now the version bumped to 3.6. Unfortunately google decided to rewrite a whole new ??android.toolchain.cmake which has a few bugs and doesnt work with NDK r10e. So we ship a copy of ??android.toolchain.cmake from CMake 3.4 (the one from with some modifications to make it work with the cmake android gradle changes ("
,,0.0883,realm-java,"Merge pull request from realm/merge-461c15-to-master Fix merge from 461c15 to master/Nh/init metadata (#4053) * init ObjectStore metadata, to store File Action * avoid null pointer exception, by passing empty strings/"
,,0.1381,realm-java,Merge pull request from realm/merge-a94bb3-to-master Fix merge from a94bb3 to master/Enable and fix warnings (#3961) Adapt the same warning options from object store/removed includedescriptorclasses option to supprt built-in shrinker of Android Gradle Plugin (#3776) * removed includedescriptorclasses option to supprt built-in shrinker of Android Gradle Plugin * fix typo/
,,0.1083,realm-java,"Fix lots of minor issues/Wire the ""like"" predicate into RealmQuery (#3992) * Wire the ""like"" predicate into RealmQuery Fixes useless code and fix one missed findAllxxx function./"
,,0.1427,realm-java,removed includedescriptorclasses option to supprt built-in shrinker of Android Gradle Plugin (#3776) * removed includedescriptorclasses option to supprt built-in shrinker of Android Gradle Plugin * fix typo/
,,0.0566,realm-java,Update Object Store (#4522) To dfddfa7f7bf5 Fix
,,0.0804,realm-java,Merge pull request from abennsir/feat/fixTest fix roboelectric unit test/fix roboelectric unit test 4698/
,,0.0784,realm-java,Merge pull request from abennsir/feat/fixTest fix roboelectric unit test/fix roboelectric unit test 4698/
,,0.0774,realm-java,Merge pull request from realm/merge-f2144d-to-master-4.0 Fix merge from f2144d to master-4.0/fixes (#5000) * fixes (#4862) * fixes support ssl (#4591) * Expose two new SyncConfiguration options to 1: Disable TLS verification. 2: provide the trusted root CA to validate the RealmObjectServer TLS connection (since OpenSSL doesnt have access to Android keystore) fixes
,,0.0661,rocksdb,Fixing Makefile issue reported in Issue 15 (misspelled flag) git-svn-id: 62dab493-f737-651d-591e-8d6aee1b9529/
,,0.0686,rocksdb,Fix some lint warnings/
,,0.0577,rocksdb,Fix more gflag namespace issues/
,,0.0772,rocksdb,Merge pull request from fyrz/JavaDoc-Cleanup JavaDoc fixes & enhancements RocksJava/
,,0.0833,rocksdb,Merge pull request from fyrz/JavaDoc-Cleanup JavaDoc fixes & enhancements RocksJava/
,,0.0813,rocksdb,Merge pull request from fyrz/JavaDoc-Cleanup JavaDoc fixes & enhancements RocksJava/
,,0.0813,rocksdb,Merge pull request from fyrz/JavaDoc-Cleanup JavaDoc fixes & enhancements RocksJava/
,,0.0738,rocksdb,Fixed a Lint problem/[RocksJava] Comparator tests for CF Added AbstractComparatorTest. Fixed a bug in the JNI Part about Java comparators/
,,0.0665,rocksdb,Merge pull request from fyrz/RocksJava-Test-Fix [RocksJava] Fix JTest issues with enabled assertions. Closes Fix ColumnFamily tests Cleanup column family memory cleanup/
,,0.0774,rocksdb,Merge pull request from fyrz/RocksJava-Test-Fix [RocksJava] Fix JTest issues with enabled assertions. Closes Fix ColumnFamily tests Cleanup column family memory cleanup/
,,0.0738,rocksdb,Merge pull request from fyrz/RocksJava-Test-Fix [RocksJava] Fix JTest issues with enabled assertions. Closes Fix ColumnFamily tests Cleanup column family memory cleanup/
,,0.0957,rocksdb,"env_mirror: fix a few leaks (#1363) * env_mirror: fix leak from LockFile Signed-off-by: Sage Weil * env_mirror: instruct EnvMirror whether mirrored Envs should be destroyed The lifecycle rules for Env are frustrating and undocumented. Notably, Env::Default() should *not* be freed, but any Env instances we created should be. Explicitly instruct EnvMirror whether to clean up child Env instances. Default to false so that we do not affect existing callers. Signed-off-by: Sage Weil"
,,0.1046,rocksdb,"Add missing copyright header Summary: ""examples/c_simple_example.c"" did not have a proper copyright header. Closes Differential Revision: D4327445 Pulled By: yiwu-arbug fbshipit-source-id: a70389e/"
,,0.0954,rocksdb,"Add missing copyright header Summary: ""examples/c_simple_example.c"" did not have a proper copyright header. Closes Differential Revision: D4327445 Pulled By: yiwu-arbug fbshipit-source-id: a70389e/"
,,0.1086,rocksdb,"port: updated PhysicalCoreID() Summary: Updated PhysicalCoreID() to use sched_getcpu() on x86_64 for glibc >= 2.22. Added a new function named GetCPUID() that calls sched_getcpu(), to avoid repeated code. This change is done as per the comments of PR: Signed-off-by: Jos Collin Closes Differential Revision: D5025734 Pulled By: ajkr fbshipit-source-id: f4cca68c12573cafcf8531e7411a1e733bbf8eef/"
,,0.0725,rocksdb,gcc-7/i386: markup intentional fallthroughs Summary: Markup i386 code paths resolving compilation failure under i386 with gcc-7. Signed-off-by: James Page Closes Differential Revision: D5583047 Pulled By: maysamyabandeh fbshipit-source-id: fe31bcfeaf7cd2d3f51b55f5ae0b3b0cb3788fbc/
,,0.126,rocksdb,Use total charge in MaintainPoolSize (#5813) Summary: charges the block cache with the total of user-provided charge plus the metadata charge. It had a bug where in MaintainPoolSize the user-provided charge was used instead of the total charge. The patch fixes that. Pull Request resolved: Differential Revision: D17412783 Pulled By: maysamyabandeh fbshipit-source-id: 45c0ac9f1e2233760db5ccd61399605cd74edc87/
,,0.0816,rocksdb,"Disable folly_synchronization_distributed_mutex_test on ARM for now (#6126) Summary: This test is crashing on ARM but is not yet production code. Lets not let it block ARM CI. See PR Pull Request resolved: Test Plan: ./folly_synchronization_distributed_mutex_test, on Linux/ARM, on Linux/x86_64, and with LITE=1 on Linux/x86_64 (also disabled) Differential Revision: D18836576 Pulled By: pdillinger fbshipit-source-id: d8a36eea2f048e8330411d994435d1c58a15d978/"
