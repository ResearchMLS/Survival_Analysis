Topic_no,Keywords,Contrib,System,Text
8,"merge, readseq_micro, unit, fix, test, realm, master, bug, add, close, make, update, result, find, throw, using_relinker, improving_loading, issue, pull_request, correct",0.0787,conscrypt,NativeCrypto: throw instead of return null We should not return null for items that cannot be extracted. Instead throw UnsupportedOperationException so we dont break the API contract. Change-Id: I09b0854c36f02b5b7ead2fb802f1454353b4cf6e/
,,0.1133,conscrypt,"Parse ASN1_TIME structures in constructors. (#446) The legacy OpenSSL APIs in BoringSSL dont parse ASN1_TIME values until theyre used, which means that the existing code could explode in the middle of X509Certificate.getNotAfter() and similar Date-returning calls, and those calls arent declared to throw anything. Instead, read and cache the values in the constructor, where we can throw a relevant exception if necessary. We have to clone the Date values when returning them because Date is mutable./"
,,0.1235,conscrypt,"Parse ASN1_TIME structures in constructors. (#446) The legacy OpenSSL APIs in BoringSSL dont parse ASN1_TIME values until theyre used, which means that the existing code could explode in the middle of X509Certificate.getNotAfter() and similar Date-returning calls, and those calls arent declared to throw anything. Instead, read and cache the values in the constructor, where we can throw a relevant exception if necessary. We have to clone the Date values when returning them because Date is mutable./"
,,0.1177,conscrypt,"Parse ASN1_TIME structures in constructors. (#446) The legacy OpenSSL APIs in BoringSSL dont parse ASN1_TIME values until theyre used, which means that the existing code could explode in the middle of X509Certificate.getNotAfter() and similar Date-returning calls, and those calls arent declared to throw anything. Instead, read and cache the values in the constructor, where we can throw a relevant exception if necessary. We have to clone the Date values when returning them because Date is mutable./"
,,0.1177,conscrypt,"Parse ASN1_TIME structures in constructors. (#446) The legacy OpenSSL APIs in BoringSSL dont parse ASN1_TIME values until theyre used, which means that the existing code could explode in the middle of X509Certificate.getNotAfter() and similar Date-returning calls, and those calls arent declared to throw anything. Instead, read and cache the values in the constructor, where we can throw a relevant exception if necessary. We have to clone the Date values when returning them because Date is mutable./"
,,0.1189,conscrypt,"Fixes for issues found by lgtm.com (#706) * KeyManagerFactoryImpl: close opened file stream lgtm.com found an issue where FileInputStream was not closed when setting up a KeyManagerFactoryImpl. * FileClientSessionCache: use IoUtils.closeQuietly lgtm.com found a useless null check because FileInputStream never returns null. However, we can just use our utility function IoUtils.closeQuietly to achieve the same thing that was intended here./"
,,0.066,frostwire,[desktop] compilation fix. mplayer still works./
,,0.0648,frostwire,[common] time out unit bug fixed./
,,0.0677,frostwire,"[common] More coding in SearchManager2, added onError to listener/"
,,0.0669,frostwire,[common] one more little fix in limetorrents creation date/
,,0.0818,frostwire,[desktop] fixed mplayer path in windows development/
,,0.0818,frostwire,[android] dont stop music playback on applovin video ads indentation also/
,,0.0778,frostwire,[android] dont stop music playback on applovin video ads indentation also/
,,0.066,frostwire,[android] catch SQLiteException on PlaylistLoader.makePlaylistCursor/
,,0.1057,frostwire,"[common/android] crash fix due to libtorrent.generate_fingerprint param intake the last int tag parameter has to be a number between 0-19, otherwise the string returned contains a character that makes androids crash due to incompatible UTF being generated by libtorrent/"
,,0.0609,frostwire,"[desktop] cleanup, refactors, deprecation fixes/"
,,0.0673,frostwire,[android] NPE on FileListAdapter.getListItemView()/[android] NPE on FileListAdapter.getListItemView()/
,,0.0795,jna,"find proper c library automatically, avoids ubuntu crash git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/add last error exception for direct calls git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Handle last error as an exception if declared git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0669,jna,Merge pull request from mrotteveel/structure_read_write_doc Fix mix-up of when autoRead and autoWrite is applied/Fixes mix-up of when autoRead and autoWrite is applied/
,,0.1319,jna,"Check attach result before using resulting JNIEnv pointer in callback code The success of attaching to the JVM was checked to late in callback.c. After trying to attach the native thread to the JVM, the JNIEnv pointer is passed to `get_thread_storage`, which uses it to access the JVM. At this point it is assumed, that the JNIEnv pointer is valid and can be used. This is not correct, as the attach can fail and if so the JNIEnv pointer is not valid. The pointer is later validated, but to late, so a SEGFAULT occurs. The result check needs to be moved directly after the attachment code, to be effective. Forward port of c23cde6f477cc63456c33d6759abdf99d0ad337f/"
,,0.1379,jna,"Fix GCC8 warnings/Check attach result before using resulting JNIEnv pointer in callback code The success of attaching to the JVM was checked to late in callback.c. After trying to attach the native thread to the JVM, the JNIEnv pointer is passed to `get_thread_storage`, which uses it to access the JVM. At this point it is assumed, that the JNIEnv pointer is valid and can be used. This is not correct, as the attach can fail and if so the JNIEnv pointer is not valid. The pointer is later validated, but to late, so a SEGFAULT occurs. The result check needs to be moved directly after the attachment code, to be effective. Forward port of c23cde6f477cc63456c33d6759abdf99d0ad337f/"
,,0.1689,jna,"Added `com.sun.jna.platform.WindowUtils.getAllWindows`, `getWindowIcon`, `getIconSize`, `getWindowTitle`, `getPRocessFilePath` and `getWindowLocationAndSize`. Request textual message of current last error code `com.sun.jna.platform.win32.Kernel32Util.getLastErrorMessage`. Added `com.sun.jna.platform.win32.GDI32.GetObject`. Added `com.sun.jna.platform.win32.Psapi` with `GetModuleFileNameEx`- Added `com.sun.jna.platform.win32.User32.GetIconInfo`, `SendMessageTimeout`, `GetClassLongPtr`. Added `com.sun.jna.platform.win32.WinGDI.ICONINFO` and `BITMAP`. Added process-specific access rights constants in `com.sun.jna.platform.win32.WinNT`. Added specific constants for request of icon settings in `com.sun.jna.platform.win32.WinUser`. Added constants for `GetClassLong`, `SendMessageTimeout` and `GetIconInfo` in `com.sun.jna.platform.win32.WinUser`./"
,,0.1614,jna,"Added `com.sun.jna.platform.WindowUtils.getAllWindows`, `getWindowIcon`, `getIconSize`, `getWindowTitle`, `getPRocessFilePath` and `getWindowLocationAndSize`. Request textual message of current last error code `com.sun.jna.platform.win32.Kernel32Util.getLastErrorMessage`. Added `com.sun.jna.platform.win32.GDI32.GetObject`. Added `com.sun.jna.platform.win32.Psapi` with `GetModuleFileNameEx`- Added `com.sun.jna.platform.win32.User32.GetIconInfo`, `SendMessageTimeout`, `GetClassLongPtr`. Added `com.sun.jna.platform.win32.WinGDI.ICONINFO` and `BITMAP`. Added process-specific access rights constants in `com.sun.jna.platform.win32.WinNT`. Added specific constants for request of icon settings in `com.sun.jna.platform.win32.WinUser`. Added constants for `GetClassLong`, `SendMessageTimeout` and `GetIconInfo` in `com.sun.jna.platform.win32.WinUser`./"
,,0.1533,jna,"Check attach result before using resulting JNIEnv pointer in callback code The success of attaching to the JVM was checked to late in callback.c. After trying to attach the native thread to the JVM, the JNIEnv pointer is passed to `get_thread_storage`, which uses it to access the JVM. At this point it is assumed, that the JNIEnv pointer is valid and can be used. This is not correct, as the attach can fail and if so the JNIEnv pointer is not valid. The pointer is later validated, but to late, so a SEGFAULT occurs. The result check needs to be moved directly after the attachment code, to be effective. Forward port of c23cde6f477cc63456c33d6759abdf99d0ad337f/"
,,0.1614,jna,"Fix under JRE the process is java.exe, not javaw.exe./Added `com.sun.jna.platform.WindowUtils.getAllWindows`, `getWindowIcon`, `getIconSize`, `getWindowTitle`, `getPRocessFilePath` and `getWindowLocationAndSize`. Request textual message of current last error code `com.sun.jna.platform.win32.Kernel32Util.getLastErrorMessage`. Added `com.sun.jna.platform.win32.GDI32.GetObject`. Added `com.sun.jna.platform.win32.Psapi` with `GetModuleFileNameEx`- Added `com.sun.jna.platform.win32.User32.GetIconInfo`, `SendMessageTimeout`, `GetClassLongPtr`. Added `com.sun.jna.platform.win32.WinGDI.ICONINFO` and `BITMAP`. Added process-specific access rights constants in `com.sun.jna.platform.win32.WinNT`. Added specific constants for request of icon settings in `com.sun.jna.platform.win32.WinUser`. Added constants for `GetClassLong`, `SendMessageTimeout` and `GetIconInfo` in `com.sun.jna.platform.win32.WinUser`./"
,,0.0857,jna,Fix for resource leak on exception (#917) * Using try-with-resources to avoid resource leak * Reader closing in finnaly block/
,,0.1206,jna,"Merge pull request from jglick/master Accepted fix for memory leak/""Leaking WeakHashMap"" canned analysis from NB Profiler turns up: NativeMappedConverter.converters: java.util.WeakHashMap#116 is wrong: key java.lang.Class#5600 is reachable from value com.sun.jna.NativeMappedConverter#3 Indeed the value type strongly refers to the key type so a WeakHashMap is a potentially major memory leak. Since Java lacks ephemerons, need to either eliminate the cache, or make the values be soft references./"
,,0.1345,jna,"Check attach result before using resulting JNIEnv pointer in callback code The success of attaching to the JVM was checked to late in callback.c. After trying to attach the native thread to the JVM, the JNIEnv pointer is passed to `get_thread_storage`, which uses it to access the JVM. At this point it is assumed, that the JNIEnv pointer is valid and can be used. This is not correct, as the attach can fail and if so the JNIEnv pointer is not valid. The pointer is later validated, but to late, so a SEGFAULT occurs. The result check needs to be moved directly after the attachment code, to be effective. Forward port of c23cde6f477cc63456c33d6759abdf99d0ad337f/"
,,0.1929,jna,Merge pull request from trejkaz/master Third attempt at fixing Netapi32Util.getDomainTrusts()/Third attempt at fixing Netapi32Util.getDomainTrusts()./Merge pull request from trejkaz/master Fixing crash in Netapi32Util (or anyone who calls DsEnumerateDomainTrusts)/Second attempt at fixing the crash in Netapi32Util. This time we change the definition of Netapi32.DsEnumerateDomainTrusts. Crash is still not happening and this fix is more likely to be correct./
,,0.0689,jna,Fixed exception thrown when querying for the existence of a REG_QWORD./
,,0.1956,jna,"Merge pull request from trejkaz/master Third attempt at fixing Netapi32Util.getDomainTrusts()/Third attempt at fixing Netapi32Util.getDomainTrusts()./Merge pull request from trejkaz/master Fixing crash in Netapi32Util (or anyone who calls DsEnumerateDomainTrusts)/Second attempt at fixing the crash in Netapi32Util. This time we change the definition of Netapi32.DsEnumerateDomainTrusts. Crash is still not happening and this fix is more likely to be correct./Fixing a crash when trying to free the wrong pointer in Netapi32Util./Fix: NPE platform.win32.Netapi32Util.getDomainTrusts./Make Netapi32Utils.getUserInfo(String,String) work. Netapi32Utils.getUserInfo was ignoring the parameter for the domain name, which caused it to fail when the ""domain"" name was not actually a domain controller. On fixing that, I got an error about the SID being in an invalid format. It seems like JNAs ""PSID"" is actually just the SID, so to get PSID you have to use ""PSID.ByReference"". This is bound to confuse someone else in the future so it might be worth renaming PSID to SID?/"
,,0.066,jna,Fix: Netapi32Test broken./
,,0.0965,jna,"Merge pull request from danwi/registry_get_empty_values Add fix for issue in Advapi32Util (reading empty values)/Add fix for issue in Advapi32Util (reading empty values) With this fix it is possible to read values from registry of the following types even when the size of the value is 0: REG_SZ REG_EXPAND_SZ REG_MULTI_SZ REG_NONE REG_BINARY (fixed by earlier committer) Advapi32UtilTest updated with unit test triggering the bug./Merge pull request from phailwhale22/master Closes issue for issue (continued yet again) Im failing hard... ok to merge? Indentation was fixed and I removed the try block./fix for issue (continued) Some stuff that was missing from my previous commit. Sorry for the hurdles, this is my first time contributing to a project. Updated the appropriate unit test and CHANGES.md for version 3.4.3./"
,,0.1644,jna,"Added `com.sun.jna.platform.WindowUtils.getAllWindows`, `getWindowIcon`, `getIconSize`, `getWindowTitle`, `getPRocessFilePath` and `getWindowLocationAndSize`. Request textual message of current last error code `com.sun.jna.platform.win32.Kernel32Util.getLastErrorMessage`. Added `com.sun.jna.platform.win32.GDI32.GetObject`. Added `com.sun.jna.platform.win32.Psapi` with `GetModuleFileNameEx`- Added `com.sun.jna.platform.win32.User32.GetIconInfo`, `SendMessageTimeout`, `GetClassLongPtr`. Added `com.sun.jna.platform.win32.WinGDI.ICONINFO` and `BITMAP`. Added process-specific access rights constants in `com.sun.jna.platform.win32.WinNT`. Added specific constants for request of icon settings in `com.sun.jna.platform.win32.WinUser`. Added constants for `GetClassLong`, `SendMessageTimeout` and `GetIconInfo` in `com.sun.jna.platform.win32.WinUser`./"
,,0.0838,jna,Merge pull request from trejkaz/master Fixing crash in Netapi32Util (or anyone who calls DsEnumerateDomainTrusts)/Second attempt at fixing the crash in Netapi32Util. This time we change the definition of Netapi32.DsEnumerateDomainTrusts. Crash is still not happening and this fix is more likely to be correct./
,,0.1614,jna,"Added `com.sun.jna.platform.WindowUtils.getAllWindows`, `getWindowIcon`, `getIconSize`, `getWindowTitle`, `getPRocessFilePath` and `getWindowLocationAndSize`. Request textual message of current last error code `com.sun.jna.platform.win32.Kernel32Util.getLastErrorMessage`. Added `com.sun.jna.platform.win32.GDI32.GetObject`. Added `com.sun.jna.platform.win32.Psapi` with `GetModuleFileNameEx`- Added `com.sun.jna.platform.win32.User32.GetIconInfo`, `SendMessageTimeout`, `GetClassLongPtr`. Added `com.sun.jna.platform.win32.WinGDI.ICONINFO` and `BITMAP`. Added process-specific access rights constants in `com.sun.jna.platform.win32.WinNT`. Added specific constants for request of icon settings in `com.sun.jna.platform.win32.WinUser`. Added constants for `GetClassLong`, `SendMessageTimeout` and `GetIconInfo` in `com.sun.jna.platform.win32.WinUser`./"
,,0.1814,jna,Merge pull request from trejkaz/master Third attempt at fixing Netapi32Util.getDomainTrusts()/Third attempt at fixing Netapi32Util.getDomainTrusts()./Merge pull request from trejkaz/master Fixing crash in Netapi32Util (or anyone who calls DsEnumerateDomainTrusts)/
,,0.0756,jna,Fixing the DOMAIN_CONTROLLER_INFO structure. It was missing a field declaration. This should fix the getDC method and unit test/Fix: Netapi32Test broken./address issue
,,0.1599,jna,"Added `com.sun.jna.platform.WindowUtils.getAllWindows`, `getWindowIcon`, `getIconSize`, `getWindowTitle`, `getPRocessFilePath` and `getWindowLocationAndSize`. Request textual message of current last error code `com.sun.jna.platform.win32.Kernel32Util.getLastErrorMessage`. Added `com.sun.jna.platform.win32.GDI32.GetObject`. Added `com.sun.jna.platform.win32.Psapi` with `GetModuleFileNameEx`- Added `com.sun.jna.platform.win32.User32.GetIconInfo`, `SendMessageTimeout`, `GetClassLongPtr`. Added `com.sun.jna.platform.win32.WinGDI.ICONINFO` and `BITMAP`. Added process-specific access rights constants in `com.sun.jna.platform.win32.WinNT`. Added specific constants for request of icon settings in `com.sun.jna.platform.win32.WinUser`. Added constants for `GetClassLong`, `SendMessageTimeout` and `GetIconInfo` in `com.sun.jna.platform.win32.WinUser`./"
,,0.1629,jna,"Added `com.sun.jna.platform.WindowUtils.getAllWindows`, `getWindowIcon`, `getIconSize`, `getWindowTitle`, `getPRocessFilePath` and `getWindowLocationAndSize`. Request textual message of current last error code `com.sun.jna.platform.win32.Kernel32Util.getLastErrorMessage`. Added `com.sun.jna.platform.win32.GDI32.GetObject`. Added `com.sun.jna.platform.win32.Psapi` with `GetModuleFileNameEx`- Added `com.sun.jna.platform.win32.User32.GetIconInfo`, `SendMessageTimeout`, `GetClassLongPtr`. Added `com.sun.jna.platform.win32.WinGDI.ICONINFO` and `BITMAP`. Added process-specific access rights constants in `com.sun.jna.platform.win32.WinNT`. Added specific constants for request of icon settings in `com.sun.jna.platform.win32.WinUser`. Added constants for `GetClassLong`, `SendMessageTimeout` and `GetIconInfo` in `com.sun.jna.platform.win32.WinUser`./"
,,0.1659,jna,"Added `com.sun.jna.platform.WindowUtils.getAllWindows`, `getWindowIcon`, `getIconSize`, `getWindowTitle`, `getPRocessFilePath` and `getWindowLocationAndSize`. Request textual message of current last error code `com.sun.jna.platform.win32.Kernel32Util.getLastErrorMessage`. Added `com.sun.jna.platform.win32.GDI32.GetObject`. Added `com.sun.jna.platform.win32.Psapi` with `GetModuleFileNameEx`- Added `com.sun.jna.platform.win32.User32.GetIconInfo`, `SendMessageTimeout`, `GetClassLongPtr`. Added `com.sun.jna.platform.win32.WinGDI.ICONINFO` and `BITMAP`. Added process-specific access rights constants in `com.sun.jna.platform.win32.WinNT`. Added specific constants for request of icon settings in `com.sun.jna.platform.win32.WinUser`. Added constants for `GetClassLong`, `SendMessageTimeout` and `GetIconInfo` in `com.sun.jna.platform.win32.WinUser`./"
,,0.1629,jna,"Added `com.sun.jna.platform.WindowUtils.getAllWindows`, `getWindowIcon`, `getIconSize`, `getWindowTitle`, `getPRocessFilePath` and `getWindowLocationAndSize`. Request textual message of current last error code `com.sun.jna.platform.win32.Kernel32Util.getLastErrorMessage`. Added `com.sun.jna.platform.win32.GDI32.GetObject`. Added `com.sun.jna.platform.win32.Psapi` with `GetModuleFileNameEx`- Added `com.sun.jna.platform.win32.User32.GetIconInfo`, `SendMessageTimeout`, `GetClassLongPtr`. Added `com.sun.jna.platform.win32.WinGDI.ICONINFO` and `BITMAP`. Added process-specific access rights constants in `com.sun.jna.platform.win32.WinNT`. Added specific constants for request of icon settings in `com.sun.jna.platform.win32.WinUser`. Added constants for `GetClassLong`, `SendMessageTimeout` and `GetIconInfo` in `com.sun.jna.platform.win32.WinUser`./"
,,0.0645,jna,Variant and TlbImp Fix Small fixes to answer support calls/
,,0.0669,jna,some fixed and extension for Variant date/
,,0.0665,jna,Variant and TlbImp Fix Small fixes to answer support calls/
,,0.0697,jna,"Merge pull request from lwahonen/master Small COM fixes/Com might already initialized, its not a problem see"
,,0.0957,jna,Merge pull request from matthiasblaesing/tlbcodegenerator_nullpointer Fix NullPointer Exception in TlbCodegenerator/Fix NullPointer Exception in TlbCodegenerator/
,,0.0936,jna,Merge pull request from matthiasblaesing/tlbcodegenerator_nullpointer Fix NullPointer Exception in TlbCodegenerator/Fix NullPointer Exception in TlbCodegenerator/
,,0.065,jna,some small bug fixes to TLB generating/some changes to find the bug/some changes to find issue with JNA 4/
,,0.0763,jna,some small bug fixes to TLB generating/some changes to find the bug/some changes to find issue with JNA 4/
,,0.0685,jna,Variant and TlbImp Fix Small fixes to answer support calls/
,,0.0621,OpenDDS,fix spelling/
,,0.0849,OpenDDS,Merge remote branch upstream/master into face-conf-test-suite Conflicts: dds/CORBA/tao/BasicSequences.cpp dds/CORBA/tao/ORB_Misc.cpp dds/CORBA/tao/OctetSeqC.cpp dds/CORBA/tao/SystemException.cpp/Merge pull request from mitza-oci/idl-fixed-FACE Support for IDL fixed data type in FACE code generation./Corrected code generation for detection of fixed support./
,,0.10800000000000001,OpenDDS,Merge pull request from objectcomputing/ts_api_updates_redmine_2334 TS API Updates per answered redmine issue questions 2424 and 2387./
,,0.0776,OpenDDS,Merge pull request from mitza-oci/master FACE bug fixes/FACE String_var: fixed bug in operator=/
,,0.1413,OpenDDS,"Merge pull request from mitza-oci/master Visual C++ warning fixes, another round./Visual C++ warning fixes, another round./"
,,0.1335,OpenDDS,"Merge pull request from mitza-oci/master Visual C++ warning fixes, another round./Visual C++ warning fixes, another round./"
,,0.1316,OpenDDS,"Merge pull request from mitza-oci/master Visual C++ warning fixes, another round./Visual C++ warning fixes, another round./"
,,0.1316,OpenDDS,"Merge pull request from mitza-oci/master Visual C++ warning fixes, another round./Visual C++ warning fixes, another round./"
,,0.1296,OpenDDS,"Merge pull request from mitza-oci/master Visual C++ warning fixes, another round./Visual C++ warning fixes, another round./"
,,0.1316,OpenDDS,"Merge pull request from mitza-oci/master Visual C++ warning fixes, another round./Visual C++ warning fixes, another round./"
,,0.1296,OpenDDS,"Merge pull request from mitza-oci/master Visual C++ warning fixes, another round./Visual C++ warning fixes, another round./"
,,0.1335,OpenDDS,"Merge pull request from mitza-oci/master Visual C++ warning fixes, another round./Visual C++ warning fixes, another round./"
,,0.1394,OpenDDS,"Merge pull request from mitza-oci/master Visual C++ warning fixes, another round./Visual C++ warning fixes, another round./"
,,0.1288,OpenDDS,Merge pull request from mitza-oci/master Fixed runtime problems in safety profile introduced by the recent code generation change./Fixed runtime problems in safety profile introduced by the recent code generation change./
,,0.1322,OpenDDS,Merge pull request from mitza-oci/master Fixed runtime problems in safety profile introduced by the recent code generation change./Fixed runtime problems in safety profile introduced by the recent code generation change./
,,0.1296,OpenDDS,"Merge pull request from mitza-oci/master Visual C++ warning fixes, another round./Visual C++ warning fixes, another round./"
,,0.1355,OpenDDS,"Merge pull request from mitza-oci/master Visual C++ warning fixes, another round./Visual C++ warning fixes, another round./"
,,0.1271,OpenDDS,Merge pull request from mitza-oci/master Fixed runtime problems in safety profile introduced by the recent code generation change./Fixed runtime problems in safety profile introduced by the recent code generation change./
,,0.1277,OpenDDS,"Merge pull request from mitza-oci/master Visual C++ warning fixes, another round./Visual C++ warning fixes, another round./"
,,0.106,OpenDDS,Merge pull request from objectcomputing/ts_api_updates_redmine_2334 TS API Updates per answered redmine issue questions 2424 and 2387./
,,0.10800000000000001,OpenDDS,Merge pull request from objectcomputing/ts_api_updates_redmine_2334 TS API Updates per answered redmine issue questions 2424 and 2387./
,,0.1828,OpenDDS,Merge pull request from objectcomputing/ts_api_updates_redmine_2334 Fix calls to Receive_Message for MessageHeaders to provide the correcÖ/Fix calls to Receive_Message for MessageHeaders to provide the correct size of the header/Merge pull request from objectcomputing/ts_api_updates_redmine_2334 TS API Updates per answered redmine issue questions 2424 and 2387./
,,0.0998,OpenDDS,"Merge pull request from mitza-oci/master Visual C++ warning fixes, another round./"
,,0.1359,OpenDDS,Merge pull request from mitza-oci/master Warnings fixes for SunCC./Warnings fixes for SunCC./Merge pull request from mitza-oci/master Fixed runtime problems in safety profile introduced by the recent code generation change./Fixed runtime problems in safety profile introduced by the recent code generation change./fixed fuzz error/
,,0.0792,OpenDDS,Merge pull request from mitza-oci/master Fixes to build static discovery changes on Visual C++/Avoid IDL sequence typedefs equivalent to those in other modules./
,,0.0838,OpenDDS,Merge pull request from mitza-oci/master Static discovery bug fixes/
,,0.106,OpenDDS,Merge pull request from objectcomputing/ts_api_updates_redmine_2334 TS API Updates per answered redmine issue questions 2424 and 2387./
,,0.1039,OpenDDS,Merge pull request from objectcomputing/ts_api_updates_redmine_2334 TS API Updates per answered redmine issue questions 2424 and 2387./
,,0.1521,OpenDDS,Merge pull request from objectcomputing/ts_api_updates_redmine_2334 Fix calls to Receive_Message for MessageHeaders to provide the correcÖ/Merge pull request from objectcomputing/ts_api_updates_redmine_2334 TS API Updates per answered redmine issue questions 2424 and 2387./
,,0.1479,OpenDDS,Merge pull request from objectcomputing/ts_api_updates_redmine_2334 Fix compiler issues with how message_instance_guid was being created/Fix compiler issues with how message_instance_guid was being created/Protect against reference count leaks/Merge pull request from objectcomputing/ts_api_updates_redmine_2334 Fix calls to Receive_Message for MessageHeaders to provide the correcÖ/Merge pull request from objectcomputing/ts_api_updates_redmine_2334 TS API Updates per answered redmine issue questions 2424 and 2387./
,,0.0926,OpenDDS,Merge pull request from mitza-oci/master Liveliness fix to DataWriterImpl and ManualAssertLiveliness test/ManualAssertLiveliness test: cleaned up logging datatype mismatches log timestamps for all messages attempt to return nonzero on failure/
,,0.1181,OpenDDS,Merge pull request from mitza-oci/master Fixed a warning in the ManualAssertLiveliness test./Fixed a warning in the ManualAssertLiveliness test./Merge pull request from mitza-oci/master Liveliness fix to DataWriterImpl and ManualAssertLiveliness test/ManualAssertLiveliness test: cleaned up logging datatype mismatches log timestamps for all messages attempt to return nonzero on failure/
,,0.0977,OpenDDS,Merge pull request from mitza-oci/master Liveliness fix to DataWriterImpl and ManualAssertLiveliness test/
,,0.0895,OpenDDS,Merge pull request from mitza-oci/master Liveliness fix to DataWriterImpl and ManualAssertLiveliness test/
,,0.0926,OpenDDS,Merge pull request from mitza-oci/master Liveliness fix to DataWriterImpl and ManualAssertLiveliness test/ManualAssertLiveliness test: cleaned up logging datatype mismatches log timestamps for all messages attempt to return nonzero on failure/
,,0.0751,OpenDDS,Merge pull request from objectcomputing/multicast_reliability_updates Fix check for link being nil/Fix check for link being nil/
,,0.0814,OpenDDS,Merge pull request from mitza-oci/master Interop fix: account for ParticipantMessageData key-only messages./Interop fix: account for ParticipantMessageData key-only messages./
,,0.0962,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.1002,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.1269,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/Fixed reference counting bugs in MultiRepoTest/
,,0.1306,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/Fixed reference counting bugs in MultiRepoTest/
,,0.0962,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.1062,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.0987,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/More reference counting fixes./
,,0.0872,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/More reference counting fixes./
,,0.1002,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.0929,OpenDDS,Merge pull request from mitza-oci/master Continued bug fixing for pull request more fix for WDC buffer management with resends/Merge pull request from mitza-oci/master Portability and memory fixes for pull request
,,0.154,OpenDDS,Merge pull request from mitza-oci/master WriteDataContainer and DataLink bug fixes/One more fix to DataLink ref counting when interacting with Reactor/Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/Fixed reference counting bugs/
,,0.1022,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.0967,OpenDDS,Merge pull request from mitza-oci/master WriteDataContainer and DataLink bug fixes/One more fix to DataLink ref counting when interacting with Reactor/
,,0.1042,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.1347,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/Fixed reference counting bugs/
,,0.0982,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.1301,OpenDDS,Merge pull request from mitza-oci/master WriteDataContainer and DataLink bug fixes/Merge pull request from mitza-oci/master Continued bug fixing for pull request more fix for WDC buffer management with resends/Merge pull request from mitza-oci/master Portability and memory fixes for pull request order of operations in WDC buffer management/
,,0.0982,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.0962,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.1002,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.1042,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.0967,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/More reference counting fixes./
,,0.0982,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.1234,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/Fixed trailing whitespace./
,,0.0962,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.0982,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.0942,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.1022,OpenDDS,Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.0643,OpenDDS,Fix spelling./
,,0.0648,OpenDDS,Initial wireshark fixes for debugging (not final)/
,,0.1425,OpenDDS,"Merge pull request from mitza-oci/master Added ACE includes to fix static linking problem, needed template instantiations/Added ACE includes to fix static linking problem, needed template instantiations/"
,,0.1353,OpenDDS,"Merge pull request from mitza-oci/master Added ACE includes to fix static linking problem, needed template instantiations/Added ACE includes to fix static linking problem, needed template instantiations/"
,,0.1371,OpenDDS,"Merge pull request from mitza-oci/master Added ACE includes to fix static linking problem, needed template instantiations/Added ACE includes to fix static linking problem, needed template instantiations/"
,,0.1461,OpenDDS,"Merge pull request from mitza-oci/master Added ACE includes to fix static linking problem, needed template instantiations/Added ACE includes to fix static linking problem, needed template instantiations/"
,,0.1066,OpenDDS,Merge pull request from jwillemsen/master Minor typo and doxygen fixes/Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.0995,OpenDDS,Merge pull request from jwillemsen/master Minor typo and doxygen fixes/Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.0814,OpenDDS,Merge pull request from mitza-oci/master Fixed the same issue as PR (TypeSupport::get_type_name) in a Java test/Fixed the same issue as PR (TypeSupport::get_type_name) in a Java test/
,,0.0837,OpenDDS,Merge pull request from mitza-oci/master ishapes: fixed to work with recent change to TypeSupport::get_type_name()/ishapes: fixed to work with recent change to TypeSupport::get_type_name()/Merge pull request from mitza-oci/ishapes-cxx11-v2 configure and MPC support for C++11 version of ishapes; fixed a bug/
,,0.0699,OpenDDS,"Merge pull request from mitza-oci/master Fixed RTPS ParticipantMessageData entityIds/Remove debug log message for config file, its not helpful at this level./"
,,0.1012,OpenDDS,"Merge pull request from objectcomputing/reliable_time_based_filter Time Based Filter QoS (support for reliable readers) Issue SubscriptionInstance/PublicationInstance being accessed by watchdogs after deletion/Merge pull request from jwillemsen/master Minor typo and doxygen fixes/Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Introduce a new Loaner interface which is now used as part of the zero copy sequences so that they dont pull in the full reader implementation, see issue * dds/DCPS/Loaner.h: Added. * dds/DCPS/DataReaderImpl.h: * dds/DCPS/MultiTopicDataReaderBase.h: * dds/DCPS/WriterInfo.h: * dds/DCPS/ZeroCopySeq_T.h: * dds/DCPS/ZeroCopySeq_T.inl:/Fixed typo * dds/DCPS/DataReaderImpl.h:/Fix DataWriterImpl accessed after deletion bug/"
,,0.0987,OpenDDS,Avoid implicit conversion from pointer to RcHandle/Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.0905,OpenDDS,Merge pull request from huangminghuang/multicast_shutdown_fix Multicast shutdown fix/Fix multicast transport error report issue/Avoid implicit conversion from pointer to RcHandle/Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.092,OpenDDS,"Fix JNI compile errors/Merge pull request from oschwaldp-oci/coverity_issues_fixes Coverity issues fixes/Addressing Coverity Scan CID: 1088048. Check that some ack data was actually sent, else log failure./Avoid implicit conversion from pointer to RcHandle/Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/"
,,0.0782,OpenDDS,Avoid implicit conversion from pointer to RcHandle/Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fixed compiler problem in MSVC/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.1121,OpenDDS,Avoid implicit conversion from pointer to RcHandle/Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.0947,OpenDDS,Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Merge pull request from huangminghuang/safty_profile_mem_alloc_fix Fixed the memory allocation problem when safety profile is enabled/Fixed the memory allocation problem when safety profile is enabled/Merge pull request from mitza-oci/master TransportClient allow fallback to next transport impl when active side fails to connect on the first/
,,0.0948,OpenDDS,Avoid implicit conversion from pointer to RcHandle/Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.0926,OpenDDS,Fix MSVC compile issue about incomplete type/Avoid implicit conversion from pointer to RcHandle/Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.091,OpenDDS,Avoid implicit conversion from pointer to RcHandle/Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.0872,OpenDDS,Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.1006,OpenDDS,Avoid implicit conversion from pointer to RcHandle/Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.08199999999999999,OpenDDS,Stop ShmemTransport read task before shutting down the transport/Avoid implicit conversion from pointer to RcHandle/Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.1082,OpenDDS,Fix DataWriterImpl accessed after deletion bug/Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.0948,OpenDDS,Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.0932,OpenDDS,Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Versioned namespaces * dds/DCPS/InfoRepoDiscovery/DataReaderRemoteImpl.cpp: * dds/DCPS/InfoRepoDiscovery/DataReaderRemoteImpl.h: * dds/DCPS/InfoRepoDiscovery/DataWriterRemoteImpl.cpp: * dds/DCPS/InfoRepoDiscovery/DataWriterRemoteImpl.h: * dds/DCPS/InfoRepoDiscovery/FailoverListener.cpp: * dds/DCPS/InfoRepoDiscovery/FailoverListener.h: * dds/DCPS/InfoRepoDiscovery/InfoRepoDiscovery.cpp: * dds/DCPS/InfoRepoDiscovery/InfoRepoDiscovery.h: * dds/DCPS/InfoRepoDiscovery/InfoRepoDiscovery.mpc:/
,,0.0974,OpenDDS,Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix race condition in DataWriterRemoteImpl/Fix DataWriterImpl accessed after deletion bug/Fix race condition in DataWriterRemoteImpl/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Versioned namespaces * dds/DCPS/InfoRepoDiscovery/DataReaderRemoteImpl.cpp: * dds/DCPS/InfoRepoDiscovery/DataReaderRemoteImpl.h: * dds/DCPS/InfoRepoDiscovery/DataWriterRemoteImpl.cpp: * dds/DCPS/InfoRepoDiscovery/DataWriterRemoteImpl.h: * dds/DCPS/InfoRepoDiscovery/FailoverListener.cpp: * dds/DCPS/InfoRepoDiscovery/FailoverListener.h: * dds/DCPS/InfoRepoDiscovery/InfoRepoDiscovery.cpp: * dds/DCPS/InfoRepoDiscovery/InfoRepoDiscovery.h: * dds/DCPS/InfoRepoDiscovery/InfoRepoDiscovery.mpc:/
,,0.1006,OpenDDS,Avoid implicit conversion from pointer to RcHandle/Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.0948,OpenDDS,Merge pull request from huangminghuang/transport_client_fix Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/Fix DataWriterImpl accessed after deletion bug/
,,0.077,OpenDDS,Merge branch jwi-gendirbug/Merge pull request from mitza-oci/issue460-multidim Fix for issue multi-dimensional arrays of primitive types./
,,0.0818,OpenDDS,Coverity Scan Defects: Addressing Uncaught Exceptions/Merge branch master into issue460-multidim Conflicts: .travis.yml/Merge branch jwi-gendirbug of into jwi-gendirbug/Merge branch master into jwi-gendirbug/
,,0.0685,OpenDDS,Merge branch jwi-gendirbug/Merge pull request from huangminghuang/tcp_wait_for_acks Fix TCP wait_for_acknowledgements() bug/Fix TCP wait_for_acknowledgements() bug/Merge branch jwi-gendirbug of into jwi-gendirbug/Merge branch master into jwi-gendirbug/
,,0.0717,OpenDDS,Merge branch jwi-gendirbug/Merge branch master into issue460-multidim Conflicts: .travis.yml/Merge pull request from jwillemsen/jwi-gendirbug Cleanup in various files/
,,0.1244,OpenDDS,Merge pull request from huangminghuang/master Fix generating IPv6 text representation/Fix IPv6 address text representation for TCP UDP and RtpsUdp/Merge pull request from huangminghuang/master Fix send buffer size too small problem for rtps udp transport/Fix send buffer size too small problem for rtps udp transport/
,,0.1176,OpenDDS,Merge pull request from huangminghuang/ipv6_addr-fix Fix IPv6 address text representation problem/Fix IPv6 address text representation problem/Merge pull request from huangminghuang/master Fix generating IPv6 text representation/Fix typo/Fix IPv6 address text representation for TCP UDP and RtpsUdp/
,,0.1071,OpenDDS,Merge pull request from huangminghuang/suncc-fix Fix std::count with Sun CC/Fix std::count with Sun CC/Merge pull request from huangminghuang/master Fix missing include/Fix missing include/Merge pull request from huangminghuang/master Fix snprintf not found problem/Fix snprintf not found problem/Merge pull request from huangminghuang/ipv6_addr-fix Fix IPv6 address text representation problem/Fix ushort unavailable on Windows/Fix IPv6 address text representation problem/
,,0.0697,OpenDDS,Merge branch jwi-gendirbug/Merge pull request from huangminghuang/tcp_wait_for_acks Fix TCP wait_for_acknowledgements() bug/Fix TCP wait_for_acknowledgements() bug/
,,0.0804,OpenDDS,Merge pull request from huangminghuang/ipv6_addr-fix Fix IPv6 address text representation problem/Fix ushort unavailable on Windows/Fix IPv6 address text representation problem/
,,0.1019,OpenDDS,Merge pull request from huangminghuang/master Fix generating IPv6 text representation/Fix IPv6 address text representation for TCP UDP and RtpsUdp/
,,0.0837,OpenDDS,Merge pull request from huangminghuang/master Fix send buffer size too small problem for rtps udp transport/Fix send buffer size too small problem for rtps udp transport/
,,0.0793,OpenDDS,"Fix deadlock issue in RtpsUdpDataLink/Merge pull request from huangminghuang/StaticDiscovery_Fix Static discovery fix/Fix incorrect mutex usage In the original code, the mutex ìcî wonít be released if readerDoesNotExistsCallbacks_ is empty./Merge pull request from huangminghuang/master Fix send buffer size too small problem for rtps udp transport/Fix send buffer size too small problem for rtps udp transport/"
,,0.1392,OpenDDS,Merge pull request from huangminghuang/ipv6_addr-fix Fix IPv6 address text representation problem/Fix IPv6 address text representation problem/Merge pull request from huangminghuang/master Fix generating IPv6 text representation/Fix typo/Fix IPv6 address text representation for TCP UDP and RtpsUdp/Merge pull request from huangminghuang/master Fix send buffer size too small problem for rtps udp transport/Fix send buffer size too small problem for rtps udp transport/
,,0.0998,OpenDDS,Merge pull request from huangminghuang/master Fix generating IPv6 text representation/Fix IPv6 address text representation for TCP UDP and RtpsUdp/
,,0.0657,OpenDDS,Merge branch jwi-gendirbug/Merge pull request from huangminghuang/tcp_wait_for_acks Fix TCP wait_for_acknowledgements() bug/Fix TCP wait_for_acknowledgements() bug/
,,0.1598,OpenDDS,Merge pull request from huangminghuang/ipv6_addr-fix Fix IPv6 address text representation problem/Fix IPv6 address text representation problem/Merge pull request from huangminghuang/master Fix generating IPv6 text representation/Fix IPv6 address text representation for TCP UDP and RtpsUdp/Add error handling for TcpInst::local_address_set_port()/Fix TcpInst::set_port_number() wchar build/Fix generating IPv6 text representation/
,,0.0639,OpenDDS,Merge branch jwi-gendirbug/Merge pull request from huangminghuang/tcp_wait_for_acks Fix TCP wait_for_acknowledgements() bug/
,,0.0692,OpenDDS,Merge branch jwi-gendirbug/Merge pull request from huangminghuang/tcp_wait_for_acks Fix TCP wait_for_acknowledgements() bug/Fix issues with the interaction with DataWriterConatiner/Fix TCP wait_for_acknowledgements() bug/
,,0.0804,OpenDDS,Merge pull request from mitza-oci/master Fixed compiler warnings/Fixed compiler warnings/
,,0.0804,OpenDDS,Merge pull request from mitza-oci/master Fixed compiler warnings/Fixed compiler warnings/
,,0.0872,OpenDDS,Merge pull request from mitza-oci/master Attempt to fix a problem in versioned namespace build/Attempt to fix a problem in versioned namespace build/
,,0.0744,OpenDDS,Merge pull request from mitza-oci/master Fixed formatting where ACE_GUARD was on the same line as {/Fixed formatting where ACE_GUARD was on the same line as {/
,,0.066,OpenDDS,Merge pull request from huangminghuang/master Third batch of memory leak fixes/Fix ambiguous call for clang/Fix WriteDataConainerTest memory leak/
,,0.0786,OpenDDS,Merge pull request from mitza-oci/master Attempting to fix GCC7 warnings/
,,0.077,OpenDDS,Added unit test to expose issue with PropertySeq serialization/
,,0.066,OpenDDS,Use link to xsc repo for reporting issues * docs/schema/xsc-banner.cpp: * docs/schema/xsc-banner.h:/
,,0.066,OpenDDS,Use link to xsc repo for reporting issues * docs/schema/xsc-banner.cpp: * docs/schema/xsc-banner.h:/
,,0.0677,OpenDDS,Corrected permissions loading errors. Completed get_topic_security_attributes and check_create_topic/
,,0.0599,OpenDDS,Fix SSL Unit Test on OpenSSL 1.0/
,,0.1061,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1162,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1061,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.102,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.096,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1081,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.102,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1121,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.10400000000000001,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1121,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.098,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1061,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1081,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1141,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.10400000000000001,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1101,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.102,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1061,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1061,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1101,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1081,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1081,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.102,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1061,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1061,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.102,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.102,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1121,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.10400000000000001,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1121,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1081,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1101,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.102,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.10400000000000001,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.102,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.10400000000000001,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.10400000000000001,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1141,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1081,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.102,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1246,OpenDDS,Merge pull request from simpsont-oci/master Fixes for Deadline Test timing issues/Merge pull request from simpsont-oci/master Fixes for Deadline Test timing issues/
,,0.1061,OpenDDS,Merge pull request from mitza-oci/master security post-merge fixes/
,,0.1011,OpenDDS,"Merge branch master into fix-local-acl-data/fixed warnings, style issues, OpenSSL 1.0.x compat/Merge pull request from mitza-oci/master security post-merge fixes/fixed coverity issues in new code/"
,,0.0676,OpenDDS,"Incorporated fixes from PR review The beacon message was changed to be a valid RTPS Pad submessage, and the RelayHandler now tests for the value of the first byte as well as the length./"
,,0.0616,OpenDDS,Merge pull request from mitza-oci/disjoint-range DisjointSequence fill_bitmap_range bug fix/Test for DisjointSequence fill_bitmap_range bug fix for high_bit 31 (cherry picked from commit f8fe9b1f76789cdc7ed97c0407dd95475880872d)/
,,0.0763,OpenDDS,Merge pull request from mitza-oci/master fixed warnings and unit test from recent security change/
,,0.1025,OpenDDS,"Bug fix + test app for: ""create_new_topic(), called near the end of cÖ (#1355) * Bug fix + test app for: ""create_new_topic(), called near the end of create_topic_i(), can return nullptr. This needs to be checked before attempting to enable() it.""/"
,,0.1013,OpenDDS,"Minor fixes for Warnings/Bug fix + test app for: ""create_new_topic(), called near the end of cÖ (#1355) * Bug fix + test app for: ""create_new_topic(), called near the end of create_topic_i(), can return nullptr. This needs to be checked before attempting to enable() it.""/"
,,0.1136,OpenDDS,Merge pull request from mitza-oci/master idl2jni: fixed relative path to Version.h/idl2jni: fixed relative path to Version.h/Fix slash issue in idl2jni Fix issue that was putting IDL results in TAO_ROOT/tao instead of the current directory. Also do some minor work in idl2jni and opendds_idl./
,,0.0872,OpenDDS,Merge pull request from xieshuaix/fix/macro_naming_conflicts Remove macros: DUP and NO_DUP to avoid naming conflicts./Remove macros: DUP and NO_DUP to avoid naming conflicts with other libraries./
,,0.114,OpenDDS,Merge pull request from objectcomputing/tcp-reconnect-fix fix Windows non-blocking close issue/Fix issue to delete datawriter in suspended mode/
,,0.1102,OpenDDS,Merge pull request from objectcomputing/tcp-reconnect-fix fix Windows non-blocking close issue/Fix issue to delete datawriter in suspended mode/
,,0.1006,OpenDDS,Merge pull request from objectcomputing/tcp-reconnect-fix fix Windows non-blocking close issue/Fix issue to delete datawriter in suspended mode/
,,0.0929,OpenDDS,Merge pull request from objectcomputing/tcp-reconnect-fix fix Windows non-blocking close issue/Fix issue to delete datawriter in suspended mode/
,,0.092,OpenDDS,Merge pull request from simpsont-oci/fix_transport_client_pending_association_timeout_issue Fix TransportClient::PendingAssoc Timeout SEGV Issues/fix pending association timeout segv issues/Merge pull request from objectcomputing/tcp-reconnect-fix fix Windows non-blocking close issue/Fix issue to delete datawriter in suspended mode/
,,0.0987,OpenDDS,Merge pull request from objectcomputing/tcp-reconnect-fix fix Windows non-blocking close issue/Fix issue to delete datawriter in suspended mode/
,,0.1025,OpenDDS,Merge pull request from objectcomputing/tcp-reconnect-fix fix Windows non-blocking close issue/Fix issue to delete datawriter in suspended mode/
,,0.1044,OpenDDS,Merge pull request from objectcomputing/tcp-reconnect-fix fix Windows non-blocking close issue/Fix issue to delete datawriter in suspended mode/
,,0.1102,OpenDDS,Merge pull request from objectcomputing/many-to-many-test-fix fix ACE_Connector::close issue/fix ACE_Connector::close issue/
,,0.1139,OpenDDS,Merge pull request from objectcomputing/many-to-many-test-fix fix ACE_Connector::close issue/fix ACE_Connector::close issue/
,,0.0948,OpenDDS,Merge pull request from objectcomputing/tcp-reconnect-fix fix Windows non-blocking close issue/Fix issue to delete datawriter in suspended mode/
,,0.1093,OpenDDS,Merge pull request from objectcomputing/tcp-reconnect-fix fix Windows non-blocking close issue/Fix issue to delete datawriter in suspended mode/fix Windows non-blocking close issue/Merge pull request from objectcomputing/tcp-reconnect-fix Fix asynchronous connect error checking on Windows/fix issue when the connect becomes synchronous/Fix asynchronous. connect error checking in windows/Merge pull request from objectcomputing/tcp-reconnect-fix Fix TcpReconnect Test/Fix TcpReconnect Test/Merge pull request from objectcomputing/tcp-reconnect-fix fix missing connection lost notification issue/
,,0.1025,OpenDDS,Merge pull request from iguessthislldo/igtd/1453-fix ParameterListConverter: Fix Indentation/ParameterListConverter: Fix Indentation Fix from changing `int`s to `bool`s in This is why I dont like indentation thats not based on tab stops./
,,0.1044,OpenDDS,Merge pull request from iguessthislldo/igtd/1453-fix ParameterListConverter: Fix Indentation/ParameterListConverter: Fix Indentation Fix from changing `int`s to `bool`s in This is why I dont like indentation thats not based on tab stops./
,,0.1044,OpenDDS,Merge pull request from objectcomputing/tcp-reconnect-fix fix Windows non-blocking close issue/Fix issue to delete datawriter in suspended mode/
,,0.0588,pljava,Fixed bug
,,0.063,pljava,Fixed bug 1558/
,,0.1136,pljava,"fix SETOF SETOF VARCHAR in autogenerated SQL The annotation complexType ""SETOF VARCHAR"" ) was expanded to ""SETOF SETOF VARCHAR"" by the DDRWriter/Merge commit bd6f79ced00ccb0f81c55b3cbda99f0646b674bd of into jdk7 Sorry Im doing my first steps. Unfortunately I messed with the master branch I hope my attempt to resolve this mishap does not worsen things. Finally I would like to have the changes by sptrakesh, gdmSISouth and me integrated into tada/pljava presumably after some more fixes and polishing./"
,,0.11199999999999999,realm-java,"Change C++ header suffix from .h to .hpp since this selects the correct syntax highlighting mode in editors as well as in code browsers such as GitHub/String conversion in both directions is complete except for an important FIXME in to_jstring() in util.h/WIP: Updated with float, double support. Still a crash./"
,,0.0987,realm-java,"Change C++ header suffix from .h to .hpp since this selects the correct syntax highlighting mode in editors as well as in code browsers such as GitHub/WIP: Updated with float, double support. Still a crash./"
,,0.1085,realm-java,"Merge remote-tracking branch Tightdb/move_last_over Conflicts: tightdb-java-core/src/main/java/com/tightdb/typed/AbstractTable.java Contains BUG FIX: GetBinaryData() could throw when empty BinaryData. AFTER Merge: Contains new move_last_over method (currently disabled) Removed the graph example./Change C++ header suffix from .h to .hpp since this selects the correct syntax highlighting mode in editors as well as in code browsers such as GitHub/WIP: Updated with float, double support. Still a crash./"
,,0.11199999999999999,realm-java,"Change C++ header suffix from .h to .hpp since this selects the correct syntax highlighting mode in editors as well as in code browsers such as GitHub/String conversion in both directions is complete except for an important FIXME in to_jstring() in util.h/WIP: Updated with float, double support. Still a crash./"
,,0.1058,realm-java,"Merge remote-tracking branch Tightdb/move_last_over Conflicts: tightdb-java-core/src/main/java/com/tightdb/typed/AbstractTable.java Contains BUG FIX: GetBinaryData() could throw when empty BinaryData. AFTER Merge: Contains new move_last_over method (currently disabled) Removed the graph example./Change C++ header suffix from .h to .hpp since this selects the correct syntax highlighting mode in editors as well as in code browsers such as GitHub/String conversion in both directions is complete except for an important FIXME in to_jstring() in util.h/WIP: Updated with float, double support. Still a crash./"
,,0.1082,realm-java,"Change C++ header suffix from .h to .hpp since this selects the correct syntax highlighting mode in editors as well as in code browsers such as GitHub/WIP: Updated with float, double support. Still a crash./"
,,0.1154,realm-java,"Merge remote-tracking branch Tightdb/move_last_over Conflicts: tightdb-java-core/src/main/java/com/tightdb/typed/AbstractTable.java Contains BUG FIX: GetBinaryData() could throw when empty BinaryData. AFTER Merge: Contains new move_last_over method (currently disabled) Removed the graph example./Change C++ header suffix from .h to .hpp since this selects the correct syntax highlighting mode in editors as well as in code browsers such as GitHub/WIP: Updated with float, double support. Still a crash./"
,,0.1044,realm-java,"Change C++ header suffix from .h to .hpp since this selects the correct syntax highlighting mode in editors as well as in code browsers such as GitHub/WIP: Updated with float, double support. Still a crash./"
,,0.0689,realm-java,"WIP: Updated with float, double support. Still a crash./"
,,0.0689,realm-java,"WIP: Updated with float, double support. Still a crash./"
,,0.0673,realm-java,Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/Merge branch master of github.com:Tightdb/tightdb_java into group-readonly-bug/fixed merge conflicts/
,,0.0639,realm-java,fixed merge-conflicts/
,,0.1519,realm-java,Merge branch master into cm-file-permission-error Conflicts: changelog.txt/Merge branch master of github.com:realm/realm-java into kg-utf-more-debug/Merge branch master into cm-bug-close Conflicts: changelog.txt/fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/fixed some conflicts/
,,0.5325,realm-java,"Style fixes./Merge branch master of github.com:realm/realm-java into kg-utf-more-debug/Merge branch master into cm-bug-close Conflicts: changelog.txt/Fix the examples and tests accordingly/Merge branch master into cm-bug-sort-breaks-query-chaining Conflicts: changelog.txt/Merge pull request from realm/kg-bugfix-proxy-class-imports Avoid ambiguous references in proxy classes/copyToRealm method implemented + unit tests. Style fixes to unit tests./Only import required classes in the proxy classes in order to avoid ambiguous references./Update RealmProxyClassGenerator.java Setting relationship to null throws NullPointerException, because setter method does not exit where it should, trying to access null value instead./PR comment fixes: Cleanup example, method comments has been made better. Regexp for checking date syntax./fixed conflicts from merging with master/Fixed annotation processor unit test./Merge remote-tracking branch origin/master into ez-fail-write/Merge pull request from realm/cm-fix-equals Fixed bug in RealmObject.equals()/Fixed bug in RealmObject.equals()/Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge pull request from realm/ez-file-size Mitigate the file size growing problem/Mitigate the file size growing problem This change does the following: * disables the caching of Realm instances in threads without an event loop * makes the Realm class implement Closable * does reference counting for closing Realm instances * checks if the Realm instance has not been closed before any operation/Fixed build warnings + Realm cache lookup./Cleanup + fixed merge mistake./Added unit tests and fixes bug found on the way/"
,,0.0689,realm-java,fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/
,,0.0751,realm-java,fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/
,,0.0751,realm-java,fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/
,,0.0669,realm-java,fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/
,,0.0792,realm-java,fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/
,,0.073,realm-java,fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/
,,0.071,realm-java,fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/
,,0.073,realm-java,fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/
,,0.56,realm-java,"fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master into cm-utf8-test * master: (34 commits) Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Added copyright Added Realm.close(). Cleanup unit tests. Fixed unit test. Fix minor issues Added Realm.close() to all examples. Streamlined activity and app names. Revert ""Update SimpleRealmProxy.java"" Update SimpleRealmProxy.java Update changelog.txt Fix annotation processor test Updated changelog. Modify the unit tests to comply to Realm.close() Fixed merge mistake. Align ListIterator with standard Java behaviour. Fix RealmTest for Realm.close() Added support for remove in RealmResults iterators. Additional unit tests for their usage. ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/"
,,0.5447,realm-java,"Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master into cm-utf8-test * master: (34 commits) Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Added copyright Added Realm.close(). Cleanup unit tests. Fixed unit test. Fix minor issues Added Realm.close() to all examples. Streamlined activity and app names. Revert ""Update SimpleRealmProxy.java"" Update SimpleRealmProxy.java Update changelog.txt Fix annotation processor test Updated changelog. Modify the unit tests to comply to Realm.close() Fixed merge mistake. Align ListIterator with standard Java behaviour. Fix RealmTest for Realm.close() Added support for remove in RealmResults iterators. Additional unit tests for their usage. ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/"
,,0.1019,realm-java,Merge branch master of github.com:realm/realm-java into kg-utf-more-debug/Merge branch master into cm-bug-close Conflicts: changelog.txt/
,,0.0673,realm-java,Merge pull request from realm/kg-bugfix-sort Changing sort()/
,,0.4069,realm-java,Merge pull request from realm/kg-bugfix-sort Changing sort()/Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Catching standard exceptions./Merge pull request from realm/kg-bugfix-removefromrealm Extending removeFromRealm() to be able to remove last object/
,,0.5587,realm-java,"Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master into cm-utf8-test * master: (34 commits) Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Added copyright Added Realm.close(). Cleanup unit tests. Fixed unit test. Fix minor issues Added Realm.close() to all examples. Streamlined activity and app names. Revert ""Update SimpleRealmProxy.java"" Update SimpleRealmProxy.java Update changelog.txt Fix annotation processor test Updated changelog. Modify the unit tests to comply to Realm.close() Fixed merge mistake. Align ListIterator with standard Java behaviour. Fix RealmTest for Realm.close() Added support for remove in RealmResults iterators. Additional unit tests for their usage. ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/"
,,0.0686,realm-java,Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/
,,0.10800000000000001,realm-java,Merge branch master of github.com:realm/realm-java into kg-utf-more-debug/Merge branch master into cm-bug-close Conflicts: changelog.txt/
,,0.0998,realm-java,Merge branch master of github.com:realm/realm-java into kg-utf-more-debug/Merge branch master into cm-bug-close Conflicts: changelog.txt/
,,0.5744,realm-java,"spacing fix/fixed speelinx mistake/Merge pull request from realm/kg-bugfix-sort Changing sort()/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master into cm-utf8-test * master: (34 commits) Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Added copyright Added Realm.close(). Cleanup unit tests. Fixed unit test. Fix minor issues Added Realm.close() to all examples. Streamlined activity and app names. Revert ""Update SimpleRealmProxy.java"" Update SimpleRealmProxy.java Update changelog.txt Fix annotation processor test Updated changelog. Modify the unit tests to comply to Realm.close() Fixed merge mistake. Align ListIterator with standard Java behaviour. Fix RealmTest for Realm.close() Added support for remove in RealmResults iterators. Additional unit tests for their usage. ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/JNI sync now throws proper exceptions. CamelCased unit tests./Merge pull request from realm/kg-bugfix-nonlatin-chars Use to_jstring() everywhere at the JNI layer/"
,,0.1181,realm-java,Merge branch master into cm-bug-sort-breaks-query-chaining Conflicts: changelog.txt/Merge pull request from realm/cm-bug-move RealmList.move() updated with better error messages + unit tests./Fixed bug in JNI type./Spelling mistakes fixed./Moved error checking to JNI./
,,0.4203,realm-java,Merge branch master of github.com:realm/realm-java into kg-utf-more-debug/Merge branch master into cm-bug-close Conflicts: changelog.txt/Merge pull request from realm/tg-exception-bloat Cut down on the size of the library a bit/Move C++ Java exception mapping to a function/Fix for logging is disabled./Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/We should know where the exception is thrown/Merge pull request from realm/kg-bugfix-removefromrealm Extending removeFromRealm() to be able to remove last object/fixed some conflicts/
,,0.1175,realm-java,Merge pull request from realm/cm-file-permission-error Better error reporting opening Realms/fixed conflicts from merging with master/
,,0.6229,realm-java,"Fixed spacing/Merge branch master into cm-bug-sort-breaks-query-chaining Conflicts: changelog.txt/Throw NoSuchMethodError when RealmResults.indexOf() is called as the method is not implemented./Merge pull request from realm/cm-bug-sort-childobject Improve error message for sorting by child object/Refactored sort so using a null fieldname always throw an exception./fixed conflicts from merging with master/Merge pull request from realm/ez-fail-write Add a unit test about editing a RealmObject outside of a transaction/Merge pull request from realm/kg-bugfix-sort Changing sort()/Merge branch master into kg-bugfix-sort Conflicts: changelog.txt realm/src/androidTest/java/io/realm/RealmResultsTest.java/Fixed bug in equalTo() for date. Updated testcases/In sort() throw exception if field name does not exist./Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master into cm-utf8-test * master: (34 commits) Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Added copyright Added Realm.close(). Cleanup unit tests. Fixed unit test. Fix minor issues Added Realm.close() to all examples. Streamlined activity and app names. Revert ""Update SimpleRealmProxy.java"" Update SimpleRealmProxy.java Update changelog.txt Fix annotation processor test Updated changelog. Modify the unit tests to comply to Realm.close() Fixed merge mistake. Align ListIterator with standard Java behaviour. Fix RealmTest for Realm.close() Added support for remove in RealmResults iterators. Additional unit tests for their usage. ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Fix minor issues/Merge branch master of github.com:realm/realm-java into kg-bugfix-removefromrealm Conflicts: changelog.txt/Merge pull request from realm/kg-bugfix-incorrect-cast Subquerying RealmResults/Merge branch master of github.com:realm/realm-java into kg-bugfix-removefromrealm/Merge branch master of github.com:realm/realm-java into kg-bugfix-incorrect-cast Conflicts: realm/src/androidTest/java/io/realm/RealmResultsTest.java/Querying RealmResults with where() returns a query object but resolving field name to column index throwed an exception since it didnt cast correctly./Added unit tests for detecting cyclic issues in toString(), hashcode(), equals(). Added design document with proposed solution./Changed fail messages/Merge pull request from realm/kg-bugfix-nonlatin-chars Use to_jstring() everywhere at the JNI layer/Merge pull request from realm/kg-bugfix-maxdate maxDate was not correct./"
,,0.6318,realm-java,"Merge branch master of github.com:realm/realm-java into kg-utf-more-debug/Merge branch master into cm-bug-close Conflicts: changelog.txt/Fixed unit tests./Merge branch master into cm-bug-sort-breaks-query-chaining Conflicts: changelog.txt/Merge pull request from realm/kg-bugfix-proxy-class-imports Avoid ambiguous references in proxy classes/Only import required classes in the proxy classes in order to avoid ambiguous references./fixed conflicts from merging with master/Merge pull request from realm/ez-fail-write Add a unit test about editing a RealmObject outside of a transaction/Merge remote-tracking branch origin/master into ez-fail-write/Merge pull request from realm/cm-fix-equals Fixed bug in RealmObject.equals()/Fixed equals unit test./Fixed bug in RealmObject.equals()/Merge branch master into kg-bugfix-sort Conflicts: changelog.txt realm/src/androidTest/java/io/realm/RealmResultsTest.java/Fixed bug in equalTo() for date. Updated testcases/Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master into cm-utf8-test * master: (34 commits) Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Added copyright Added Realm.close(). Cleanup unit tests. Fixed unit test. Fix minor issues Added Realm.close() to all examples. Streamlined activity and app names. Revert ""Update SimpleRealmProxy.java"" Update SimpleRealmProxy.java Update changelog.txt Fix annotation processor test Updated changelog. Modify the unit tests to comply to Realm.close() Fixed merge mistake. Align ListIterator with standard Java behaviour. Fix RealmTest for Realm.close() Added support for remove in RealmResults iterators. Additional unit tests for their usage. ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge pull request from realm/kg-bugfix-removefromrealm Extending removeFromRealm() to be able to remove last object/Merge branch master of github.com:realm/realm-java into kg-bugfix-removefromrealm Conflicts: changelog.txt/Added unit tests for detecting cyclic issues in toString(), hashcode(), equals(). Added design document with proposed solution./fixed some conflicts/Updated and fixed test/"
,,0.1281,realm-java,Merge branch master into cm-bug-sort-breaks-query-chaining Conflicts: changelog.txt/Merge pull request from realm/cm-bug-move RealmList.move() updated with better error messages + unit tests./
,,0.4512,realm-java,"Merge branch master into cm-bug-sort-breaks-query-chaining Conflicts: changelog.txt/Merge pull request from realm/cm-bug-move RealmList.move() updated with better error messages + unit tests./Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Added unit tests for detecting cyclic issues in toString(), hashcode(), equals(). Added design document with proposed solution./"
,,0.0972,realm-java,Merge remote-tracking branch origin/master into ez-fail-write/Merge pull request from realm/cm-rotation-crash Handlers for closed Realms are now properly removed/
,,0.5728,realm-java,"Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master into cm-utf8-test * master: (34 commits) Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Added copyright Added Realm.close(). Cleanup unit tests. Fixed unit test. Fix minor issues Added Realm.close() to all examples. Streamlined activity and app names. Revert ""Update SimpleRealmProxy.java"" Update SimpleRealmProxy.java Update changelog.txt Fix annotation processor test Updated changelog. Modify the unit tests to comply to Realm.close() Fixed merge mistake. Align ListIterator with standard Java behaviour. Fix RealmTest for Realm.close() Added support for remove in RealmResults iterators. Additional unit tests for their usage. ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master of github.com:realm/realm-java into kg-bugfix-removefromrealm Conflicts: changelog.txt/Merge pull request from realm/kg-bugfix-incorrect-cast Subquerying RealmResults/fixed some conflicts/Merge pull request from realm/bp-test-link-queries bug fixed and test added/Added fail()/bug fixed and test added/Merge branch master of github.com:realm/realm-java into kg-bugfix-maxdate Conflicts: changelog.txt/"
,,0.5959,realm-java,"Merge pull request from realm/ez-delete-check Throw an exception if deleting an open Realm file/Merge pull request from realm/cm-file-permission-error Better error reporting opening Realms/Merge branch master into cm-file-permission-error Conflicts: changelog.txt realm/src/androidTest/java/io/realm/RealmTest.java/minor fix to error message/Add comments and improve exception catching/Merge pull request from realm/ez-key-caching Fail when instantiating a Realm with the wrong key/Fail when instantiating a Realm with the wrong key/Throw an exception if deleting an open Realm file/Error handling now uses exception thrown from core where it makes sense./Unit test style fixes. IOError now being thrown instead of OutOfMemory when opening Realms fail./Better error reporting for error cases when creating a Realm using the File constructors./Merge branch master of github.com:realm/realm-java into kg-utf-more-debug/Merge pull request from realm/cm-bug-close Realm.close() now works correctly when called too many times. Added internal RealmLogger for Realm logoutput./Merge branch master into cm-bug-close Conflicts: changelog.txt/Fixed reference counting bug./Fix the examples and tests accordingly/Merge pull request from realm/cm-bug-sort-breaks-query-chaining Subqueries on RealmLists now use the proper tablespec/Fixed unit tests./copyToRealm method implemented + unit tests. Style fixes to unit tests./Fixed bug when querying a RealmList. Added unit test. Improved error message for wrong query types./Remove old realm file or unit test might fail./fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/Merge pull request from realm/cm-rotation-crash Handlers for closed Realms are now properly removed/process shouldnt crash now/Merge pull request from realm/kg-bugfix-sort Changing sort()/Merge branch master into kg-bugfix-sort Conflicts: changelog.txt realm/src/androidTest/java/io/realm/RealmResultsTest.java/Fixed bug in equalTo() for date. Updated testcases/Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master into cm-utf8-test * master: (34 commits) Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Added copyright Added Realm.close(). Cleanup unit tests. Fixed unit test. Fix minor issues Added Realm.close() to all examples. Streamlined activity and app names. Revert ""Update SimpleRealmProxy.java"" Update SimpleRealmProxy.java Update changelog.txt Fix annotation processor test Updated changelog. Modify the unit tests to comply to Realm.close() Fixed merge mistake. Align ListIterator with standard Java behaviour. Fix RealmTest for Realm.close() Added support for remove in RealmResults iterators. Additional unit tests for their usage. ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Fix minor issues/We should know where the exception is thrown/Adding better error messages when converting to Java string/Merge pull request from realm/ez-file-size Mitigate the file size growing problem/Fix RealmTest for Realm.close()/Merge branch master of github.com:realm/realm-java into kg-bugfix-removefromrealm/Merge branch master of github.com:realm/realm-java into kg-bugfix-incorrect-cast Conflicts: realm/src/androidTest/java/io/realm/RealmResultsTest.java/fixed some conflicts/added extra checks and corrected a error/Merge pull request from realm/bp-update-queries-field Corrected format, added fail() and updated changelog/Corrected format, added fail() and updated changelog/Updated and fixed test/Merge pull request from realm/cm-bugfix-realmcache Fixed Realm cache not working/Fixed Realm cache not working./Merge branch master of github.com:realm/realm-java into kg-bugfix-maxdate Conflicts: changelog.txt/"
,,0.5664,realm-java,"Fix merge mistake + style fixes./Merge branch master into kg-bugfix-sort Conflicts: changelog.txt realm/src/androidTest/java/io/realm/RealmResultsTest.java/Fixed bug in equalTo() for date. Updated testcases/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master into cm-utf8-test * master: (34 commits) Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Added copyright Added Realm.close(). Cleanup unit tests. Fixed unit test. Fix minor issues Added Realm.close() to all examples. Streamlined activity and app names. Revert ""Update SimpleRealmProxy.java"" Update SimpleRealmProxy.java Update changelog.txt Fix annotation processor test Updated changelog. Modify the unit tests to comply to Realm.close() Fixed merge mistake. Align ListIterator with standard Java behaviour. Fix RealmTest for Realm.close() Added support for remove in RealmResults iterators. Additional unit tests for their usage. ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Fixed broken unit tests in RealmAnnotationsTest./It is no longer possible to manually set 0 or """" in primary key fields. Refactored error checking so it is more maintainable./"
,,0.0998,realm-java,Merge branch master of github.com:realm/realm-java into kg-utf-more-debug/Merge branch master into cm-bug-close Conflicts: changelog.txt/
,,0.5851,realm-java,"Merge pull request from realm/ez-delete-check Throw an exception if deleting an open Realm file/Set the flag after closing the realm to avoid timing issues/Merge pull request from realm/cm-bug-handler-removed Thread handler no longer gets removed too soon./Merge pull request from realm/cm-api-fixes Small API fixes to RealmList + more extensive unittests of same./Disables randomly failing unit test until we can figure out why./Merge pull request from realm/cm-concurrency-example Fixed bug causing refresh to be called on closed Realms./Merge branch master into cm-bug-close Conflicts: changelog.txt/Fixed bug causing refresh on closed Realms on background threads with loopers./Fix the examples and tests accordingly/Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master into cm-utf8-test * master: (34 commits) Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Added copyright Added Realm.close(). Cleanup unit tests. Fixed unit test. Fix minor issues Added Realm.close() to all examples. Streamlined activity and app names. Revert ""Update SimpleRealmProxy.java"" Update SimpleRealmProxy.java Update changelog.txt Fix annotation processor test Updated changelog. Modify the unit tests to comply to Realm.close() Fixed merge mistake. Align ListIterator with standard Java behaviour. Fix RealmTest for Realm.close() Added support for remove in RealmResults iterators. Additional unit tests for their usage. ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Fix minor issues/Merge pull request from realm/ez-file-size Mitigate the file size growing problem/"
,,0.4774,realm-java,Fix findFirst() for queried RealmList/Grammar fixes./Merge pull request from realm/cm-api-fixes Small API fixes to RealmList + more extensive unittests of same./Fix for RealmList.last()/first() crashing on empty lists + added unit tests./Merge branch master of github.com:realm/realm-java into kg-utf-more-debug/Merge branch master into cm-bug-close Conflicts: changelog.txt/Merge branch master into cm-bug-sort-breaks-query-chaining Conflicts: changelog.txt/copyToRealm method implemented + unit tests. Style fixes to unit tests./Added unit tests for RealmList. Throw better errors if not used correctly./Merge pull request from realm/cm-bug-move RealmList.move() updated with better error messages + unit tests./Moved error checking to JNI./Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/
,,0.0689,realm-java,Grammar and small fixes./Grammar fixes./
,,0.5669,realm-java,"Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master into cm-utf8-test * master: (34 commits) Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Added copyright Added Realm.close(). Cleanup unit tests. Fixed unit test. Fix minor issues Added Realm.close() to all examples. Streamlined activity and app names. Revert ""Update SimpleRealmProxy.java"" Update SimpleRealmProxy.java Update changelog.txt Fix annotation processor test Updated changelog. Modify the unit tests to comply to Realm.close() Fixed merge mistake. Align ListIterator with standard Java behaviour. Fix RealmTest for Realm.close() Added support for remove in RealmResults iterators. Additional unit tests for their usage. ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master of github.com:realm/realm-java into kg-bugfix-removefromrealm Conflicts: changelog.txt/Merge pull request from realm/kg-bugfix-incorrect-cast Subquerying RealmResults/"
,,0.1083,realm-java,Merge remote-tracking branch origin/master into ez-fail-write/Merge pull request from realm/cm-rotation-crash Handlers for closed Realms are now properly removed/
,,0.4081,realm-java,"Merge branch master into cm-file-permission-error Conflicts: changelog.txt/Grammar and small fixes./Grammar fixes./Merge branch master of github.com:realm/realm-java into kg-utf-more-debug/Merge branch master into cm-bug-close Conflicts: changelog.txt/Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Added unit tests for detecting cyclic issues in toString(), hashcode(), equals(). Added design document with proposed solution./Use moveLastOver instead of Remove This is important especially in the light or recent changes in core. It will also increase performance and fix potential problems with deletes and links./"
,,0.08,realm-java,Merge pull request from realm/cm-file-permission-error Better error reporting opening Realms/Better error reporting for error cases when creating a Realm using the File constructors./
,,0.3993,realm-java,"Fix findFirst() for queried RealmList/Grammar and small fixes./Grammar fixes./Merge pull request from realm/cm-subquery Fix RealmQuery scope issue/Fix subquery scope not working properly./Merge pull request from realm/cm-bug-sort-breaks-query-chaining Subqueries on RealmLists now use the proper tablespec/Style fix + using already cached column positions instead./Fixed bug when querying a RealmList. Added unit test. Improved error message for wrong query types./Merge pull request from realm/kg-bugfix-sort Changing sort()/Merge branch master into kg-bugfix-sort Conflicts: changelog.txt realm/src/androidTest/java/io/realm/RealmResultsTest.java/Fixed bug in equalTo() for date. Updated testcases/Merge branch master of github.com:realm/realm-java into kg-bugfix-removefromrealm Conflicts: changelog.txt/Merge pull request from realm/kg-bugfix-incorrect-cast Subquerying RealmResults/Merge branch kg-bugfix-incorrect-cast of github.com:realm/realm-java into kg-bugfix-incorrect-cast/Querying RealmResults with where() returns a query object but resolving field name to column index throwed an exception since it didnt cast correctly./fixed some conflicts/Merge pull request from realm/bp-update-queries-field Corrected format, added fail() and updated changelog/Corrected format, added fail() and updated changelog/Merge pull request from realm/bp-test-link-queries bug fixed and test added/bug fixed and test added/Merge branch master of github.com:realm/realm-java into kg-bugfix-maxdate Conflicts: changelog.txt/"
,,0.5667,realm-java,"Merge pull request from realm/ez-delete-check Throw an exception if deleting an open Realm file/Merge pull request from realm/cm-file-permission-error Better error reporting opening Realms/Merge branch master into cm-file-permission-error Conflicts: changelog.txt realm/src/androidTest/java/io/realm/RealmTest.java/Remove a useless AssertionException/Merge pull request from realm/ez-key-caching Fail when instantiating a Realm with the wrong key/Fail when instantiating a Realm with the wrong key/Grammar and small fixes./Fixed message id description back/Throw an exception if deleting an open Realm file/Error handling now uses exception thrown from core where it makes sense./Better error reporting for error cases when creating a Realm using the File constructors./Grammar fixes./Merge pull request from realm/cm-bug-asyncloaders Call to close() replaced by warning in Realm finalizer./Merge branch master into cm-bug-asyncloaders Conflicts: changelog.txt/Updated error description and changelog./Fixed issue with Realm cache not being cleared during a RealmMigrationNeededException + Added unit test./minor style fix/Merge pull request from realm/cm-bug-handler-removed Thread handler no longer gets removed too soon./Merge pull request from realm/cm-concurrency-example Fixed bug causing refresh to be called on closed Realms./Merge branch master of github.com:realm/realm-java into kg-utf-more-debug/Merge pull request from realm/cm-bug-close Realm.close() now works correctly when called too many times. Added internal RealmLogger for Realm logoutput./Merge branch master into cm-bug-close Conflicts: changelog.txt/Fixed potential null pointer./Fixed bug causing refresh on closed Realms on background threads with loopers./Fixed bug when calling close too many times. Added RealmLog class./Fixed reference counting bug./Fix Javadoc/Updated JavaDoc and error messages./copyToRealm method implemented + unit tests. Style fixes to unit tests./PR comment fixes: Cleanup example, method comments has been made better. Regexp for checking date syntax./fixed conflicts from merging with master/Merge remote-tracking branch origin/master into ez-fail-write/Merge pull request from realm/cm-rotation-crash Handlers for closed Realms are now properly removed/Merge pull request from realm/kg-bugfix-sort Changing sort()/Merge branch master of github.com:realm/realm-java into kg-bugfix-sort Conflicts: changelog.txt/Merge branch master into bp-case * master: (62 commits) Close realms in tests Disable UTF8 test which is slow... Remove rowIndex from RealmObject.toString() Stylistic updates Improve javadocs for Realm constructors Delete design document. Cleanup unit tests. Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleanup examples. Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Update Realm.java Removed unnecessary object. Added copyright Added Realm.close(). Cleanup unit tests. Catching standard exceptions. Fixed unit test. Fix minor issues ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge branch master into cm-utf8-test * master: (34 commits) Update RealmTest.java Add unit test exposing more solid reference counter Make the reference counter depend on the realm path Cleaned up unit tests and iterators. Fixed unit test so it now properly closes its resources. Added copyright Added Realm.close(). Cleanup unit tests. Fixed unit test. Fix minor issues Added Realm.close() to all examples. Streamlined activity and app names. Revert ""Update SimpleRealmProxy.java"" Update SimpleRealmProxy.java Update changelog.txt Fix annotation processor test Updated changelog. Modify the unit tests to comply to Realm.close() Fixed merge mistake. Align ListIterator with standard Java behaviour. Fix RealmTest for Realm.close() Added support for remove in RealmResults iterators. Additional unit tests for their usage. ... Conflicts: realm/src/androidTest/java/io/realm/RealmTest.java/Merge pull request from realm/ez-file-size Mitigate the file size growing problem/Mitigate the file size growing problem This change does the following: * disables the caching of Realm instances in threads without an event loop * makes the Realm class implement Closable * does reference counting for closing Realm instances * checks if the Realm instance has not been closed before any operation/fixed some conflicts/Merge pull request from realm/cm-bugfix-realmcache Fixed Realm cache not working/Fixed Realm cache not working./Moved bug fix to another PR./Fixed build warnings + Realm cache lookup./"
,,0.4868,realm-java,Merge branch master into cm-bug-null-primarykey Conflicts: changelog.txt/Merge pull request from realm/cm-realmpath RealmMigrationNeededException can now return the path to the Realm/Merge branch master into cm-bug-null-primarykey Conflicts: changelog.txt/Merge pull request from realm/cm-bug-hashcode Realm IDs are now its canonical path instead of its hashcode/Adds RealmPath to RealmMigrationNeedException/Realm IDs are now strings to avoid hash collisions./Merge pull request from realm/cm-bug-createorupdatefromjson Realm.copyOrUpdateFromJson shouldnt update unset properties/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Fixed unclear error message./Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge pull request from realm/cm-bug-copytorealm Realm.copyToRealm() now ignore referenced Realm objects/Merge branch master into cm-bug-copytorealm Conflicts: changelog.txt/Fixed annotation processor unit tests./Merge pull request from realm/cm-bug-migration Column indices are now cached pr. Realm/Fixed annotation processor unit test./Merge branch master into cm-bug-migration Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java realm/src/main/java/io/realm/Realm.java realm/src/main/java/io/realm/RealmQuery.java/Merge pull request from realm/cm-bug-json-long-null Fix support for Json NULL values/Fixed annotation processor unit tests./Merge pull request from realm/cm-bug-copy-primarykey Fix crash when using copyToRealmOrUpdate with complex object graph/Only lookup in hash map once. Fixed generics./Fix annotation-processor unit tests./Merge pull request from realm/cm-bug-copyorupdate Child objects with PK are now updated/copied correctly/Fixed annotation processor unit test./Fixed annotation processor unit tests./
,,0.4728,realm-java,Merge branch master into cm-bug-null-primarykey Conflicts: changelog.txt/Merge pull request from realm/cm-realmpath RealmMigrationNeededException can now return the path to the Realm/Merge branch master into cm-bug-null-primarykey Conflicts: changelog.txt/Merge pull request from realm/cm-bug-hashcode Realm IDs are now its canonical path instead of its hashcode/Adds RealmPath to RealmMigrationNeedException/Realm IDs are now strings to avoid hash collisions./Merge pull request from realm/cm-bug-createorupdatefromjson Realm.copyOrUpdateFromJson shouldnt update unset properties/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Fixed unclear error message./Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge pull request from realm/cm-bug-copytorealm Realm.copyToRealm() now ignore referenced Realm objects/Merge branch master into cm-bug-copytorealm Conflicts: changelog.txt/Fixed annotation processor unit tests./Merge pull request from realm/cm-bug-migration Column indices are now cached pr. Realm/Fixed annotation processor unit test./Merge branch master into cm-bug-migration Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java realm/src/main/java/io/realm/Realm.java realm/src/main/java/io/realm/RealmQuery.java/Merge pull request from realm/cm-bug-json-long-null Fix support for Json NULL values/Fixed annotation processor unit tests./Merge pull request from realm/cm-bug-copy-primarykey Fix crash when using copyToRealmOrUpdate with complex object graph/Only lookup in hash map once. Fixed generics./Fix annotation-processor unit tests./Merge pull request from realm/cm-bug-copyorupdate Child objects with PK are now updated/copied correctly/Fixed annotation processor unit test./Fixed annotation processor unit tests./
,,0.544,realm-java,Fixed Date and byte[] being updated by mistake when updating from Json/Merge pull request from realm/cm-bug-null-primarykey Throw exception if using copyToRealmOrUpdate with a null primary key value/Merge branch master into cm-bug-null-primarykey Conflicts: changelog.txt/Merge pull request from realm/cm-realmpath RealmMigrationNeededException can now return the path to the Realm/Merge branch master into cm-bug-null-primarykey Conflicts: changelog.txt/Merge pull request from realm/cm-bug-hashcode Realm IDs are now its canonical path instead of its hashcode/Adds RealmPath to RealmMigrationNeedException/Using copyToRealmOrUpdate with a Null primary key now throws a proper exception instead of crashing./Realm IDs are now strings to avoid hash collisions./Merge pull request from realm/cm-bug-createorupdatefromjson Realm.copyOrUpdateFromJson shouldnt update unset properties/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Fixed unclear error message./Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge pull request from realm/cm-bug-copytorealm Realm.copyToRealm() now ignore referenced Realm objects/Merge branch master into cm-bug-copytorealm Conflicts: changelog.txt/Fixed annotation processor unit tests./Merge branch master into cm-bug-migration Conflicts: realm/src/androidTest/java/io/realm/RealmMigrationTests.java/Fixed annotation processor unit test./Merge branch master into cm-bug-migration Conflicts: changelog.txt/Merge pull request from realm/cm-bug-copytorealm-primarykey Fixed bug in Realm.copyToRealm() with primary key values/Merge branch master into cm-bug-migration Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java realm/src/main/java/io/realm/Realm.java realm/src/main/java/io/realm/RealmQuery.java/Fixed unit test./Merge pull request from realm/cm-bug-json-long-null Fix support for Json NULL values/Merge branch master into cm-bug-json-long-null Conflicts: changelog.txt realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java/Fixed annotation processor unit tests./Merge branch master into cm-bug-realmlist-remove Conflicts: changelog.txt/Merge pull request from realm/cm-bug-copy-primarykey Fix crash when using copyToRealmOrUpdate with complex object graph/Only lookup in hash map once. Fixed generics./Fix annotation-processor unit tests./Merge pull request from realm/cm-bug-copyorupdate Child objects with PK are now updated/copied correctly/Fixed annotation processor unit test./Fixed annotation processor unit tests./
,,0.0716,realm-java,Merge branch master into cm-bug-json-long-null Conflicts: changelog.txt realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java/Merge branch master into cm-bug-realmlist-remove Conflicts: changelog.txt/
,,0.1639,realm-java,"Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Merge pull request from realm/cm-better-table-error Annotation processor now fails if a RealmObject contains no fields./Annotation processor now fails if a RealmObject contains no fields./Merge branch master into cm-bug-compactfile/Merge pull request from kboyarshinov/kb-error-reporting Better error reporting for custom getters and setters/Better error reporting for custom getters and setters/Merge branch master into cm-bug-json-long-null Conflicts: changelog.txt realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java/Merge branch master into cm-bug-realmlist-remove Conflicts: changelog.txt/Fixed issue in annotation processor with field names called ""name""./"
,,0.4909,realm-java,Merge pull request from realm/cm-bug-null-primarykey Throw exception if using copyToRealmOrUpdate with a null primary key value/Merge branch master into cm-bug-null-primarykey Conflicts: changelog.txt/Merge pull request from realm/cm-realmpath RealmMigrationNeededException can now return the path to the Realm/Merge branch master into cm-bug-null-primarykey Conflicts: changelog.txt/Merge pull request from realm/cm-bug-hashcode Realm IDs are now its canonical path instead of its hashcode/Adds RealmPath to RealmMigrationNeedException/Using copyToRealmOrUpdate with a Null primary key now throws a proper exception instead of crashing./Realm IDs are now strings to avoid hash collisions./Merge pull request from realm/cm-bug-createorupdatefromjson Realm.copyOrUpdateFromJson shouldnt update unset properties/Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Fixed unclear error message./Merge pull request from realm/ez-fix-comparison Fix wrong String comparison/Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge pull request from realm/cm-bug-copytorealm Realm.copyToRealm() now ignore referenced Realm objects/Fix wrong String comparison/Merge branch master into cm-bug-copytorealm Conflicts: changelog.txt/Merge branch master into cm-bug-migration Conflicts: realm/src/androidTest/java/io/realm/RealmMigrationTests.java/Merge branch master into cm-bug-migration Conflicts: changelog.txt/Merge pull request from realm/cm-bug-copytorealm-primarykey Fixed bug in Realm.copyToRealm() with primary key values/Merge branch master into cm-bug-migration Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java realm/src/main/java/io/realm/Realm.java realm/src/main/java/io/realm/RealmQuery.java/Fixed bug where copyToRealm() crashed when copying objects with primary key data./Merge branch master into cm-bug-json-long-null Conflicts: changelog.txt realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java/Merge branch master into cm-bug-realmlist-remove Conflicts: changelog.txt/Fixed issues with object references in copy/update methods./Fix merge mistake./Merge pull request from realm/cm-bug-copy-primarykey Fix crash when using copyToRealmOrUpdate with complex object graph/Only lookup in hash map once. Fixed generics./Cyclic data structures no longer crash copyToRealm/Merge pull request from realm/cm-bug-copyorupdate Child objects with PK are now updated/copied correctly/Now properly propagates update or copy flag + fixed unit tests./RealmJsonImpl imports now come in the correct order. Fixed Realm JavaDoc. Removed non-standard string.join() method./
,,0.0865,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.0865,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.0865,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.1439,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Merge pull request from realm/cm-better-table-error Annotation processor now fails if a RealmObject contains no fields./Fixed unit test./Annotation processor now fails if a RealmObject contains no fields./Style fixes./
,,0.1102,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge pull request from realm/cm-bug-compactfile Made Realm.compactRealmFile() more failure resilient./Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Improved error checking and unit test./
,,0.0865,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.0865,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.0865,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.0865,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.0865,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.0865,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.0865,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.0865,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.1083,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Merge branch master into cm-bug-json-long-null Conflicts: changelog.txt realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java/Merge pull request from realm/cm-bug-realmlist-remove Bugfix for removing last element in RealmList/Fixed bug removing last item from RealmList/
,,0.1875,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master of github.com:realm/realm-java into cm-bug-compactfile/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Merge pull request from realm/cm-better-table-error Annotation processor now fails if a RealmObject contains no fields./Fixed unit test./Merge branch master into cm-bug-json-long-null Conflicts: changelog.txt realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java/Merge pull request from realm/cm-bug-realmlist-remove Bugfix for removing last element in RealmList/Fixed bug removing last item from RealmList/
,,0.0844,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.0939,realm-java,Merge branch master into cm-bug-json-long-null Conflicts: changelog.txt realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java/Merge pull request from realm/cm-bug-realmlist-remove Bugfix for removing last element in RealmList/
,,0.0879,realm-java,Merge branch master into cm-bug-json-long-null Conflicts: changelog.txt realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java/Merge pull request from realm/cm-bug-realmlist-remove Bugfix for removing last element in RealmList/
,,0.0865,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.1156,realm-java,Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Merge branch master into cm-bug-migration Conflicts: changelog.txt/Merge pull request from realm/cm-bug-copytorealm-primarykey Fixed bug in Realm.copyToRealm() with primary key values/Fixed bug where copyToRealm() crashed when copying objects with primary key data./
,,0.1633,realm-java,Merge branch master into cm-bug-null-primarykey Conflicts: changelog.txt/Merge pull request from realm/cm-realmpath RealmMigrationNeededException can now return the path to the Realm/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-copytorealm Conflicts: changelog.txt/Merge pull request from realm/cm-bug-migration Column indices are now cached pr. Realm/Merge branch master into cm-bug-migration Conflicts: realm/src/androidTest/java/io/realm/RealmMigrationTests.java/Fixed unit tests./Fixed unit tests./
,,0.1444,realm-java,Fixed Date and byte[] being updated by mistake when updating from Json/Merge pull request from realm/cm-bug-createorupdatefromjson Realm.copyOrUpdateFromJson shouldnt update unset properties/Merge pull request from realm/cm-bug-json-long-null Fix support for Json NULL values/Fixed unit test./
,,0.4069,realm-java,"Merge pull request from realm/cm-bug-null-primarykey Throw exception if using copyToRealmOrUpdate with a null primary key value/Merge branch master into cm-bug-null-primarykey Conflicts: changelog.txt/Merge pull request from realm/cm-bug-hashcode Realm IDs are now its canonical path instead of its hashcode/Using copyToRealmOrUpdate with a Null primary key now throws a proper exception instead of crashing./Realm IDs are now strings to avoid hash collisions./Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge pull request from realm/cm-bug-compactfile Made Realm.compactRealmFile() more failure resilient./Compacting encrypted Realms fail on some devices, and it is disabled temporarily./Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge pull request from realm/cm-bug-copytorealm Realm.copyToRealm() now ignore referenced Realm objects/Merge branch master into cm-bug-copytorealm Conflicts: changelog.txt/Disable breaking unit test./Merge branch master into cm-bug-migration Conflicts: changelog.txt/Merge pull request from realm/cm-bug-copytorealm-primarykey Fixed bug in Realm.copyToRealm() with primary key values/Fixed bug where copyToRealm() crashed when copying objects with primary key data./Merge pull request from realm/cm-bug-cache-invalidation Realms are now only cached if correctly opened./Fixed unit tests. Renamed version to SchemaVersion/Revert tmp fix./Potential tmp fix for unit test./Improved error checking and unit test./Fixed unit test./Make Realm.getTable(class) work with proxy classes as well. This solves an issue occurring when trying to update a Realm backed object./Merge branch master into cm-bug-json-long-null Conflicts: changelog.txt realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java/Cosmetic fixes/Merge pull request from realm/cm-bug-copy-primarykey Fix crash when using copyToRealmOrUpdate with complex object graph/Cyclic data structures no longer crash copyToRealm/Merge pull request from realm/cm-bug-copyorupdate Child objects with PK are now updated/copied correctly/Now properly propagates update or copy flag + fixed unit tests./Fixed unit tests./"
,,0.0702,realm-java,Merge pull request from chibatching/master Fix findFirst() for queried RealmList/
,,0.1062,realm-java,Merge pull request from realm/cm-bug-copy-primarykey Fix crash when using copyToRealmOrUpdate with complex object graph/
,,0.128,realm-java,Merge branch master into cm-bug-null-primarykey Conflicts: changelog.txt/Merge pull request from realm/cm-bug-hashcode Realm IDs are now its canonical path instead of its hashcode/
,,0.0865,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.0865,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/
,,0.1101,realm-java,Merge branch master into cm-bug-null-primarykey Conflicts: changelog.txt/Merge pull request from realm/cm-realmpath RealmMigrationNeededException can now return the path to the Realm/Adds RealmPath to RealmMigrationNeedException/
,,0.1121,realm-java,Merge branch master into cm-bug-null-primarykey Conflicts: changelog.txt/Merge pull request from realm/cm-realmpath RealmMigrationNeededException can now return the path to the Realm/Adds RealmPath to RealmMigrationNeedException/
,,0.1998,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master of github.com:realm/realm-java into cm-bug-compactfile/Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge branch master into cm-bug-copytorealm Conflicts: changelog.txt/Merge pull request from realm/cm-bug-migration Column indices are now cached pr. Realm/Cleanup + fix merge mistake./Merge branch master into cm-bug-migration Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java realm/src/main/java/io/realm/Realm.java realm/src/main/java/io/realm/RealmQuery.java/Merge pull request from chibatching/master Fix findFirst() for queried RealmList/
,,0.4544,realm-java,"Merge pull request from realm/cm-bug-null-primarykey Throw exception if using copyToRealmOrUpdate with a null primary key value/Merge branch master into cm-bug-null-primarykey Conflicts: changelog.txt/Merge pull request from realm/cm-realmpath RealmMigrationNeededException can now return the path to the Realm/Merge branch master into cm-bug-null-primarykey Conflicts: changelog.txt/Merge pull request from realm/cm-bug-hashcode Realm IDs are now its canonical path instead of its hashcode/Adds RealmPath to RealmMigrationNeedException/Using copyToRealmOrUpdate with a Null primary key now throws a proper exception instead of crashing./Realm IDs are now strings to avoid hash collisions./Merge pull request from realm/cm-bug-createorupdatefromjson Realm.copyOrUpdateFromJson shouldnt update unset properties/Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge pull request from realm/cm-bug-compactfile Made Realm.compactRealmFile() more failure resilient./Compacting encrypted Realms fail on some devices, and it is disabled temporarily./Merge branch master into cm-bug-compactfile Conflicts: changelog.txt/Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge pull request from realm/cm-bug-copytorealm Realm.copyToRealm() now ignore referenced Realm objects/Merge branch master into cm-bug-copytorealm Conflicts: changelog.txt/Merge pull request from realm/cm-bug-migration Column indices are now cached pr. Realm/Merge branch master into cm-bug-migration Conflicts: changelog.txt/Merge pull request from realm/cm-bug-copytorealm-primarykey Fixed bug in Realm.copyToRealm() with primary key values/Cleanup + fix merge mistake./Merge branch master into cm-bug-migration Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.java realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java realm-annotations-processor/src/test/resources/io/realm/BooleansRealmProxy.java realm-annotations-processor/src/test/resources/io/realm/SimpleRealmProxy.java realm/src/main/java/io/realm/Realm.java realm/src/main/java/io/realm/RealmQuery.java/Merge branch cm-bug-migration of into cm-bug-migration/Fixed bug where copyToRealm() crashed when copying objects with primary key data./Merge pull request from realm/cm-bug-cache-invalidation Realms are now only cached if correctly opened./Fixed whitespace/Fixed unit tests. Renamed version to SchemaVersion/Fix merge mistake./Made compact file more failure resilient./Make Realm.getTable(class) work with proxy classes as well. This solves an issue occurring when trying to update a Realm backed object./Merge pull request from realm/ez-fix-javadoc Fix javadoc issues/Fix javadoc issues Fixes branch master into cm-bug-json-long-null Conflicts: changelog.txt realm-annotations-processor/src/test/resources/io/realm/AllTypesRealmProxy.java/Only lookup in hash map once. Fixed generics./Cyclic data structures no longer crash copyToRealm/Merge pull request from realm/cm-fix-build Fix JavaDoc generation./Fix JavaDoc generation./RealmJsonImpl imports now come in the correct order. Fixed Realm JavaDoc. Removed non-standard string.join() method./"
,,0.2192,realm-java,Handle null value for String in Json when updating Fix Update the objects String field to empty string when the corresponding field in Json is null./Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge remote-tracking branch upstream/master into bug-remove-weak-ref/Merge pull request from realm/cm-bug-realmlist Adding objects using a RealmLists now properly clears any previous data./Merge pull request from realm/kg-bug-migrate-linkview Tighter check when validating tables with links/Better error messages/Merge branch master into cm-bug-clear/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/Merge pull request from realm/cm-bug-updatejson-date Fix Date and byte[] being reset when using createOrUpdateFromJson/
,,0.0908,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from realm/kg-bug-missing-generic-type Checking for missing generic type during annotation processing/
,,0.2439,realm-java,"Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Support search indexing for column int, bool, date 1. Enable the search index annotation on byte, short, int, long, boolean, and Date. 2. Enable add/remove search index in java. 3. Annotation processor test to support better detailed test cases. 4. Modify JNI test cases. 5. Update doc. 6. Add AnnotationIndexTypes to avoid polluting other test cases. This is the first PR for Implicit index to int primary keys will be handled in another PR./Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from realm/kg-bug-missing-generic-type Checking for missing generic type during annotation processing/Fixed bug when specifying individual classes. Added unit tests./Merge branch master into cm-bug-clear/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/"
,,0.3255,realm-java,"Handle null value for String in Json when updating Fix Update the objects String field to empty string when the corresponding field in Json is null./Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Support search indexing for column int, bool, date 1. Enable the search index annotation on byte, short, int, long, boolean, and Date. 2. Enable add/remove search index in java. 3. Annotation processor test to support better detailed test cases. 4. Modify JNI test cases. 5. Update doc. 6. Add AnnotationIndexTypes to avoid polluting other test cases. This is the first PR for Implicit index to int primary keys will be handled in another PR./Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from realm/ez-findbugs-hunt Add support for Findbugs and fix the issues found/Add support for Findbugs and fix the issues found/Merge remote-tracking branch upstream/master into bug-remove-weak-ref/Merge pull request from realm/cm-bug-realmlist Adding objects using a RealmLists now properly clears any previous data./Merge pull request from realm/kg-bug-migrate-linkview Tighter check when validating tables with links/Better error messages/Merge branch master into cm-bug-clear/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/"
,,0.1785,realm-java,Handle null value for String in Json when updating Fix Update the objects String field to empty string when the corresponding field in Json is null./Avoid wildcard imports and execute in the background/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from realm/kg-bug-missing-generic-type Checking for missing generic type during annotation processing/Merge branch master into cm-bug-clear/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/
,,0.0823,realm-java,Merge branch master into cm-bug-clear/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/
,,0.0844,realm-java,Merge branch master into cm-bug-clear/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/
,,0.192,realm-java,"Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Support search indexing for column int, bool, date 1. Enable the search index annotation on byte, short, int, long, boolean, and Date. 2. Enable add/remove search index in java. 3. Annotation processor test to support better detailed test cases. 4. Modify JNI test cases. 5. Update doc. 6. Add AnnotationIndexTypes to avoid polluting other test cases. This is the first PR for Implicit index to int primary keys will be handled in another PR./Merge branch master into cm-bug-clear/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/"
,,0.128,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/minor tweaks to the concurrency example (fix possible Liveness issue)/
,,0.198,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/minor tweaks to the concurrency example (fix possible Liveness issue)/
,,0.1855,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/minor tweaks to the concurrency example (fix possible Liveness issue)/
,,0.12,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/minor tweaks to the concurrency example (fix possible Liveness issue)/
,,0.126,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/minor tweaks to the concurrency example (fix possible Liveness issue)/
,,0.1944,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/minor tweaks to the concurrency example (fix possible Liveness issue)/
,,0.0723,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.066,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.066,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.1121,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from realm/cm-update-migration-example Fixed migration example/
,,0.0681,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.0639,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.1767,realm-java,"Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Support search indexing for column int, bool, date 1. Enable the search index annotation on byte, short, int, long, boolean, and Date. 2. Enable add/remove search index in java. 3. Annotation processor test to support better detailed test cases. 4. Modify JNI test cases. 5. Update doc. 6. Add AnnotationIndexTypes to avoid polluting other test cases. This is the first PR for Implicit index to int primary keys will be handled in another PR./Merge branch master into cm-realmlist-add-errormessage Conflicts: changelog.txt/"
,,0.0577,realm-java,Merge branch master into cm-realmlist-add-errormessage Conflicts: changelog.txt/
,,0.0664,realm-java,Merge branch master into cm-realmlist-add-errormessage Conflicts: changelog.txt/
,,0.1119,realm-java,Merge pull request from realm/kg-bug-throw-error Introducing RealmError/Unspecified exception (std::exception) should be a RealmError/Realm will now throw a RealmError when Realm Core enters an unrecoverable error condition./
,,0.1819,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/minor tweaks to the concurrency example (fix possible Liveness issue)/
,,0.235,realm-java,"Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Support search indexing for column int, bool, date 1. Enable the search index annotation on byte, short, int, long, boolean, and Date. 2. Enable add/remove search index in java. 3. Annotation processor test to support better detailed test cases. 4. Modify JNI test cases. 5. Update doc. 6. Add AnnotationIndexTypes to avoid polluting other test cases. This is the first PR for Implicit index to int primary keys will be handled in another PR./Merge pull request from realm/ez-findbugs-hunt Add support for Findbugs and fix the issues found/Add support for Findbugs and fix the issues found/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/"
,,0.1252,realm-java,Merge pull request from realm/ez-findbugs-hunt Add support for Findbugs and fix the issues found/Add support for Findbugs and fix the issues found/
,,0.1844,realm-java,"Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/using std::unique_ptr for handover + remove unnecessary begin_read in a spearate JNI call + latest fixes from fsa_handover_demo (untyped query etc.)/Merge branch master into cm-bug-attached-check Conflicts: changelog.txt/Changing logic to handover the query from caller to background thread, handle different failure points (begin_read, import_handover), update UnitTests/"
,,0.1676,realm-java,Merge pull request from realm/ez-findbugs-hunt Add support for Findbugs and fix the issues found/Add support for Findbugs and fix the issues found/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/
,,0.0634,realm-java,"Changing logic to handover the query from caller to background thread, handle different failure points (begin_read, import_handover), update UnitTests/"
,,0.1479,realm-java,Merge pull request from realm/kg-bug-multiple-queries Querying RealmResults can crash/Prevent GC release TableView and Query Parsed native backtrace can be found at . 1. Add references to TableView and TableQuery in order to prevent premature garbage collection. 2. Add test helper function to trigger GC. 3. Add relevant test case./
,,0.0692,realm-java,"Changing logic to handover the query from caller to background thread, handle different failure points (begin_read, import_handover), update UnitTests/"
,,0.2795,realm-java,"Merge pull request from realm/kg-bug-throw-error Introducing RealmError/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/using std::unique_ptr for handover + remove unnecessary begin_read in a spearate JNI call + latest fixes from fsa_handover_demo (untyped query etc.)/Merge pull request from realm/cm-bug-attached-check Accessing deleted objects throw IllegalStateException/Unspecified exception (std::exception) should be a RealmError/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Changing logic to handover the query from caller to background thread, handle different failure points (begin_read, import_handover), update UnitTests/Support UnreachableVersionException from Core/Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/"
,,0.2353,realm-java,"Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/using std::unique_ptr for handover + remove unnecessary begin_read in a spearate JNI call + latest fixes from fsa_handover_demo (untyped query etc.)/Merge branch master into cm-bug-attached-check Conflicts: changelog.txt/Changing logic to handover the query from caller to background thread, handle different failure points (begin_read, import_handover), update UnitTests/Merge pull request from realm/ez-findbugs-hunt Add support for Findbugs and fix the issues found/Add support for Findbugs and fix the issues found/"
,,0.2958,realm-java,Merge pull request from realm/cm-bug-cache-wrong-key No longer caches the wrong encryption key/Merge pull request from realm/kg-bug-multiple-queries Querying RealmResults can crash/Prevent GC release TableView and Query Parsed native backtrace can be found at . 1. Add references to TableView and TableQuery in order to prevent premature garbage collection. 2. Add test helper function to trigger GC. 3. Add relevant test case./Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master into cm-bug-attached-check Conflicts: changelog.txt/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/Merge pull request from realm/cm-bug-clear RealmList methods now fail if not within a write transaction/
,,0.2123,realm-java,Merge pull request from realm/cm-realmlist-add-errormessage Standalone objects can now be added to managed RealmLists/Merge remote-tracking branch upstream/master into bug-remove-weak-ref/Merge pull request from realm/cm-bug-realmlist Adding objects using a RealmLists now properly clears any previous data./Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/Merge pull request from realm/cm-bug-clear RealmList methods now fail if not within a write transaction/Style and name fixes./
,,0.2435,realm-java,"Documenting that RealmResults.{first,last} throw exception if result is empty./Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/Merge pull request from realm/cm-bug-clear RealmList methods now fail if not within a write transaction/Added unit test for RealmList.clear() potential crash./"
,,0.1875,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from realm/cm-bug-attached-check Accessing deleted objects throw IllegalStateException/Added unit test verifying the problem./Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.0702,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.1365,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master into cm-bug-attached-check Conflicts: changelog.txt/
,,0.3077,realm-java,"Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Support search indexing for column int, bool, date 1. Enable the search index annotation on byte, short, int, long, boolean, and Date. 2. Enable add/remove search index in java. 3. Annotation processor test to support better detailed test cases. 4. Modify JNI test cases. 5. Update doc. 6. Add AnnotationIndexTypes to avoid polluting other test cases. This is the first PR for Implicit index to int primary keys will be handled in another PR./Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from realm/kg-bug-findfirst-null-values Added a check for null values in io.realm.internal.Table.findFirst{String,Date}()./Catch correct exception. Test an empty string/Merge pull request from realm/ez-findbugs-hunt Add support for Findbugs and fix the issues found/Add support for Findbugs and fix the issues found/"
,,0.1238,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/
,,0.0744,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.129,realm-java,Merge pull request from realm/ez-findbugs-hunt Add support for Findbugs and fix the issues found/Add support for Findbugs and fix the issues found/
,,0.0702,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.2455,realm-java,Merge pull request from realm/kg-fix-migration-tests Check that the right exception is thrown/Check that the right exception is thrown/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from realm/kg-bug-migrate-linkview Tighter check when validating tables with links/Merge branch master into cm-bug-clear/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/
,,0.0784,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master into cm-bug-clear/
,,0.1873,realm-java,Handle null value for String in Json when updating Fix Update the objects String field to empty string when the corresponding field in Json is null./Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/Merge pull request from realm/cm-bug-clear RealmList methods now fail if not within a write transaction/Merge pull request from realm/cm-bug-updatejson-date Fix Date and byte[] being reset when using createOrUpdateFromJson/
,,0.3041,realm-java,"Merge pull request from realm/cm-bug-cache-wrong-key No longer caches the wrong encryption key/Better error message and make test smaller and faster/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/fix tests/Merge branch master into cm-bug-attached-check Conflicts: changelog.txt/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from realm/mc-close-realm-ex Throw exception when close called on a diff thread./Fix typo and exception thrown in testcases thread/Throw exception when close called on a diff thread. Without checking the thread in close, some weird logic could be triggered which is really hard to think about./Merge pull request from realm/nh-fix-memoryleak fix memory leak issue with the FinalizerRunnable/fix memory leak issue with the FinalizerRunnable/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/Merge pull request from realm/cm-bug-clear RealmList methods now fail if not within a write transaction/Fixed unit test/Merge branch master into cm-bug-clear/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/Style and name fixes./"
,,0.1874,realm-java,"Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Support search indexing for column int, bool, date 1. Enable the search index annotation on byte, short, int, long, boolean, and Date. 2. Enable add/remove search index in java. 3. Annotation processor test to support better detailed test cases. 4. Modify JNI test cases. 5. Update doc. 6. Add AnnotationIndexTypes to avoid polluting other test cases. This is the first PR for Implicit index to int primary keys will be handled in another PR./Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/"
,,0.1322,realm-java,Merge pull request from realm/kg-bug-multiple-queries Querying RealmResults can crash/Prevent GC release TableView and Query Parsed native backtrace can be found at . 1. Add references to TableView and TableQuery in order to prevent premature garbage collection. 2. Add test helper function to trigger GC. 3. Add relevant test case./
,,0.0823,realm-java,Merge pull request from realm/cm-realmlist-add-errormessage Standalone objects can now be added to managed RealmLists/
,,0.0764,realm-java,Merge pull request from realm/cm-realmlist-add-errormessage Standalone objects can now be added to managed RealmLists/
,,0.3232,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from beeender/bug-remove-weak-ref Do remove the RealmChangeListener weak reference/Fix uncertain test cases caused by WeakReference Someone has to hold a strong reference to make sure the listener wont be destroyed when transaction committed./Fix notifcation related comments And make the testAddRemoveListenerConcurrency more readable./Fix concurrency problem when add/remove listener 1. CopyOnWriteArrayList is used to solve the concurrency problem when the addChangeListener/removeChangeListener gets called in onChange. 2. Expose the changeListeners for unit test. 3. Testing for change listener weak-reference auto removal. 4. Testing for concurrency add/remove/onChange./Merge pull request from beeender/sendNotifications-twice Fix sendNotifications called twice/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/
,,0.1357,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from realm/cm-bug-realmlist-size size() now respect the Collection.size() contract./Merge pull request from realm/cm-realmlist-add-errormessage Standalone objects can now be added to managed RealmLists/
,,0.078,realm-java,Merge branch master into cm-bug-clear/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/
,,0.1446,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/
,,0.129,realm-java,Merge pull request from realm/ez-findbugs-hunt Add support for Findbugs and fix the issues found/Add support for Findbugs and fix the issues found/
,,0.0758,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from PavelSynek/logger-bug Fixes loggers/
,,0.1234,realm-java,Merge pull request from realm/ez-findbugs-hunt Add support for Findbugs and fix the issues found/Add support for Findbugs and fix the issues found/
,,0.1641,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master into cm-bug-attached-check Conflicts: changelog.txt/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/PR fixes./PR comment fixes./
,,0.0949,realm-java,"using std::unique_ptr for handover + remove unnecessary begin_read in a spearate JNI call + latest fixes from fsa_handover_demo (untyped query etc.)/Changing logic to handover the query from caller to background thread, handle different failure points (begin_read, import_handover), update UnitTests/Fix hyphens in Javadoc/"
,,0.4438,realm-java,"Merge pull request from realm/cm-bug-cache-wrong-key No longer caches the wrong encryption key/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master into cm-bug-attached-check Conflicts: changelog.txt/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from realm/mc-close-realm-ex Throw exception when close called on a diff thread./Add synchronized block to Realm.close This should fix and The Realm creation is protected by static synchronized, but Realm close is not. This means there is a chance globalOpenInstanceCounter is removed when it has a value 1./Throw exception when close called on a diff thread. Without checking the thread in close, some weird logic could be triggered which is really hard to think about./Changing logic to handover the query from caller to background thread, handle different failure points (begin_read, import_handover), update UnitTests/Merge pull request from realm/cm-update-migration-example Fixed migration example/Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/Merge branch master of github.com:realm/realm-java into kg-bug-findfirst-null-values/Merge pull request from realm/cm-bug-javadoc Fix JavaDoc errors./Fix JavaDoc errors./Merge pull request from realm/ez-findbugs-hunt Add support for Findbugs and fix the issues found/Add support for Findbugs and fix the issues found/Merge pull request from realm/cm-realmlist-add-errormessage Standalone objects can now be added to managed RealmLists/Improved error message for objects not part of the schema./Merge pull request from beeender/bug-remove-weak-ref Do remove the RealmChangeListener weak reference/Fix notifcation related comments And make the testAddRemoveListenerConcurrency more readable./Fix concurrency problem when add/remove listener 1. CopyOnWriteArrayList is used to solve the concurrency problem when the addChangeListener/removeChangeListener gets called in onChange. 2. Expose the changeListeners for unit test. 3. Testing for change listener weak-reference auto removal. 4. Testing for concurrency add/remove/onChange./Merge pull request from zaki50/zaki-add_throws_to_javadoc_comment Add Javadoc comment which specifies that Realm.deleteRealmFile(...) throws IllegalStateException if target Reealm file is not closed./Merge pull request from beeender/sendNotifications-twice Fix sendNotifications called twice/Merge pull request from realm/bm-spelling-fix Fix spelling./Fix spelling./Fix sendNotifications called twice This is caused by 54501237b3 which doesnt seem to be right behaviour./Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/Merge branch master into cm-bug-clear/Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/Adding addModule and setModules. Removed schema from Realm and added it as debug method on RealmConfiguration./Merge branch master into cm-bug-clear/Merge pull request from realm/ez-adapter-leak Fix a memory leak in RealmBaseAdapter/Fix a memory leak in RealmBaseAdapter Fixes We now use WeakReferences to store the change listeners. This allows the Garbage Collector to clean up the adapters./Merge branch master of github.com:realm/realm-java into kg-bug-migrate-linkview/Merge pull request from zaki50/zaki_add_package_prefix Document that compactRealmFile can throw a IllegalStateException./Add java.lang prefix to comment to avoid ambiguity./Add Javadoc comment which specifies that Realm.deleteRealmFile(...) throws IllegalStateException if target Reealm file is not closed. closed"
,,0.0702,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.11199999999999999,realm-java,Fix migration example. Table.add is not public anymore and should be removed soon/Fix migration example. Table.add is not public anymore and should be removed soon/Merge pull request from horie1024/fix_typo_migration_example Fixed typo of migration example code./Fixed typo of migration example code./
,,0.0972,realm-java,Fixed a bug in RealmQuery.isNull() and RealmQuery.isNotNull() which validated the query prematurely./Merge pull request from zaki50/fix_typo fix typos/fix typos/
,,0.08199999999999999,realm-java,Merge pull request from realm/cm/bug/migrate-open-realm Prevent migration of open Realms/Merge pull request from realm/cm-bug-testQueriesFailWithInvalidDataTypes Remove potential race condition + cleanup/
,,0.1861,realm-java,Merge branch master of github.com:realm/realm-java into kg/bugfix-binary-isnotnull/Merge pull request from realm/cm/jsondate_timezone Fix for JsonUtils stringToDate to support Microsoft Dates with TimeZones/Fix for JsonUtils stringToDate to support Microsoft Dates with TimeZones/
,,0.2367,realm-java,"Merge pull request from realm/lk-formatting Fix an indentation of testCopyOrUpdateIterable/Fix an indentation of testCopyOrUpdateIterable/Merge pull request from realm/my/fix-1646 fix possible null assignment to Realm.columnIndices./fix Problem: `Realm#lastLocalInstanceClosed()` which is called by `Realm#close() can remove entries from `validatedRealmFiles` while other thread is executing `Realm#createAndValidate()`. This might lead to `null` assignment to `Realm.columnIndices`. Solution: Modified to deal with `validatedRealmFiles` in synchronized block of `Realm.class`./Merge branch master into cm/bug/migrate-open-realm/write transaction transaction to avoid confusing users. write transaction transaction. Some write transactions with read transactinos remain. Realm.isInWriteTransaction Realm.isInTrasaction./remove conf path from exception message/Reference equality for empty RealmLists, fix Async tests/fix javadoc, revert getByIndex to Realm.get, remove ArgumentsHolder fron public package/Merge pull request from realm/my-fix_checkValid Fix BaseRealm#checkIfValid() which does not throw Exception after close()./Fix BaseRealm#checkIfValid() which does not throw Exception after close()./Merge pull request from realm/cm-bug-columnindicies ColumnIndices are now setup correctly for all Realms/Added fix for column indices/Merge pull request from realm/cm-bug-testQueriesFailWithInvalidDataTypes Remove potential race condition + cleanup/Merge pull request from zaki50/fix_typo fix typos/fix typos/Merge pull request from realm/nh-fix-1466 add fix for tests as per feedback/add fix for fix for pull request from realm/ez-listeners-on-refresh Fixes Process listeners after refresh()/Fixed unit tests./Merge pull request from realm/mc-test-case-fix Test case fix/Test case fix/"
,,0.1173,realm-java,Make security copies of the key in RealmConfiguration Saving and providing a mutable reference of the key is both a security threat and possibly the origin of subtle bugs. We now make security copies of the byte arrays to solve the issue./Merge pull request from realm/my-fix-1490 Fix . Changed the return type of RealmProxyMediator#getModelClasses() to Set in order to guarantee its contents unordered and unique./Merge branch master into lk-primary-key-constraint-exception/Merge pull request from realm/my-fix-ambiguous-null-to-var-arg fix ambiguous null to variable length arguments./fix ambiguous null to variable length arguments./Merge pull request from realm/cm-bug-testQueriesFailWithInvalidDataTypes Remove potential race condition + cleanup/
,,0.1631,realm-java,"Merge pull request from realm/cm/bug/deep-link-query Upgraded core to 0.94.4/Merge pull request from realm/kg/bugfix-binary-isnotnull Bugfix binary isnotnull/Fixing a bug in RealmQuery.isNotNull() for binary data/Add RealmQuery.isValid(), RealmResults#isValid() and RealmList#isValid(). fixes tests/Merge pull request from realm/kg-bug-timeout Unit test to expose timeout in finalizer/Merge branch kg-bug-timeout of github.com:realm/realm-java into kg-bug-timeout/Fixes"
,,0.106,realm-java,Merge pull request from realm/cm-bug-closed-handler Fixed handler not being removed when using setAutoRefresh(false)/Fixed handler not being removed when using setAutoRefresh(false)/Merge pull request from realm/nh-fix-1467 fix for race condition in test/Better error reporting./Handler is now package protected. Refactored unit test to test actual bug./fix for tests/
,,0.0704,realm-java,unloded Row throws now IllegalStateException/unloaded RealmObject setters throws Exception now/
,,0.1917,realm-java,Merge branch master of github.com:realm/realm-java into kg/bugfix-binary-isnotnull/Merge pull request from realm/cm/jsondate_timezone Fix for JsonUtils stringToDate to support Microsoft Dates with TimeZones/Fix for JsonUtils stringToDate to support Microsoft Dates with TimeZones/
,,0.1588,realm-java,"Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Adding unit test example project with PowerMock, mockito, robolectric, and Junit4 Adding more indepth Robolectric tests with Realm mocking. Clean up and renaming. Comments Creating final tests to click on button and verify state and behavior. Adding readme and image. Removing comment. Adding note about junit4 runner. Removing unnecessary product flavors. Updating copyright. Changing package name and adding copyright on test files. Also fixed issue wiht incorrect test name in the instrumentation tests. Changing package name Adding more notes for JVM Adding another source link. Adding note about running tests. Fixing typos that kneth found :)/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/"
,,0.0975,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0996,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.3027,realm-java,More fixes for the AP/Fix the AP unit tests/Fix the unit tests of the annotations processor. Also remove one unit test which makes no sense now that users can write model classes in any way they like./Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/cm/bug/copyorupdate-primarykey copyObjectFromJson now works correctly with PrimaryKey/Merge pull request from realm/my/add-check-to-link-setter Setters for RealmObject and RealmList now throw IllegalArgumentException if the value contains an invalid object./fix typo/
,,0.2752,realm-java,More fixes for the AP/Fix the AP unit tests/Fix the unit tests of the annotations processor. Also remove one unit test which makes no sense now that users can write model classes in any way they like./Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/my/add-check-to-link-setter Setters for RealmObject and RealmList now throw IllegalArgumentException if the value contains an invalid object./
,,0.0975,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0847,realm-java,More fixes for the AP/Fix the unit tests of the annotations processor. Also remove one unit test which makes no sense now that users can write model classes in any way they like./
,,0.2639,realm-java,More fixes for the AP/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/cm/bug/copyorupdate-primarykey copyObjectFromJson now works correctly with PrimaryKey/Merge pull request from realm/my/add-check-to-link-setter Setters for RealmObject and RealmList now throw IllegalArgumentException if the value contains an invalid object./fix typo/
,,0.0954,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1403,realm-java,Fix support for ignored fields/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0996,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1017,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.364,realm-java,Fix more unit tests/Merge pull request from realm/cm/improve-unittest-reports Improve error reporting from failed unit tests./Better error reporting when using RunInLooperThread/Converted RealmTests to JUnit4 + Fixed Findbugs issues/Merge pull request from realm/mc/bug/isolate-test-realm-file Isolate test Realm files/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/fix-1884-listener-trigger Nh/fix 1884 listener trigger/fix 1884 listener trigger/Merge pull request from realm/mc/bug/close-in-listener Fix crash when close Realm in listener/Fix crash when closing a Realm in listener branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Checking to see if a transaction is currently in progress for sync and async transaction pathways. Also adding logging. Added a test helper to assist with log assertion. Fixes Fixing typo. Removing logger after testing Removing extra line Fixing tests and adding change log message. Adding breaking change message Small cosmetic changes Adding punctuation formatting Fixing unit test./
,,0.4099,realm-java,Merge pull request from realm/nh/fixes_2130_exception_in_transac Using separate interfaces for async transaction also fixes separate interfaces for async transaction also fixes branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/mc/bug/async-test-fix-release Fix async test strong reference problem/Fix async test strong reference problem/Merge pull request from realm/nh/test_1717_core_fix fixes unit test to expose the fixed issue in Core remove test/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/mc/bug/close-in-listener Fix crash when close Realm in listener/Fix crash when closing a Realm in listener pull request from realm/nh/fix-1851-async-badversion-crash fix1851 async badversion crash/add batch update for async queries to fix branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Checking to see if a transaction is currently in progress for sync and async transaction pathways. Also adding logging. Added a test helper to assist with log assertion. Fixes Fixing typo. Removing logger after testing Removing extra line Fixing tests and adding change log message. Adding breaking change message Small cosmetic changes Adding punctuation formatting Fixing unit test./
,,0.2778,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/cm/bug/copyorupdate-primarykey copyObjectFromJson now works correctly with PrimaryKey/Merge pull request from realm/my/add-check-to-link-setter Setters for RealmObject and RealmList now throw IllegalArgumentException if the value contains an invalid object./
,,0.0933,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1608,realm-java,Merge pull request from realm/kg/bug/improving-so-loading-using-relinker Improving .so loading by using the ReLinker library/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1017,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0954,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0996,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0975,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0954,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1038,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0954,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0996,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0975,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0975,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0975,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0933,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0996,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1569,realm-java,Merge pull request from realm/kg/bug/improving-so-loading-using-relinker Improving .so loading by using the ReLinker library/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0996,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1628,realm-java,Merge pull request from realm/kg/bug/improving-so-loading-using-relinker Improving .so loading by using the ReLinker library/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1798,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1294,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/mc/bug/1775 Buffer overwritten caused PK migration failure/Buffer overwritten caused PK migration failure Close A String or Binary pointer retrieved from Realm is invalidated when set_string called./
,,0.1017,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0996,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0975,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0996,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.17800000000000002,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0954,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0975,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1855,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1017,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0975,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0933,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0954,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1017,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0954,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1893,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0954,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0996,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0933,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0975,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1855,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.3117,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/fix copilation error in model classes in unit test/Merge pull request from realm/nh/fix-1884-listener-trigger Nh/fix 1884 listener trigger/fix 1884 listener trigger/Adding ISO8601 date parsing Also Adding json util tests for existing code to ensure no regressions Adding ISO8601 JSON file test Adding Json Utils license. Adding comments Fixing typo Updating changelog Setting parse position to constant to help reduce object initialization during large JSON imports. Adding link to original source code Fixing tests and using regext to test instead of catching exception for logical operation of json date parsing. Adding source link Accepting negative times for pre 1970 dates Using a static field and resettting the parse position each time. Fixing whitespace Fixing tests and adding change log message. Moving item in changelog/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/cm/bug/copyorupdate-primarykey copyObjectFromJson now works correctly with PrimaryKey/
,,0.4723,realm-java,Merge pull request from realm/mc/bug/flaky-test-fix Fix flaky tests related with async transaction/Fix flaky tests related with async transaction * Background realm needs to be closed before notifying other threads in async transaction. * Latch needs to be called after Realm closed./Merge pull request from realm/cm/bug/copyfromrealm-dynamicrealmobject IllegalArgumentException when calling copyFromRealm(dynamicRealmObject)/IllegalArgumentException now being thrown when calling copyFromRealm(dynamicRealmObject)/Merge pull request from realm/mc/bug/isolate-test-realm-file Isolate test Realm files/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/mc/test-case/testProcessLocalListenersAfterRefresh testProcessLocalListenersAfterRefresh fix/testProcessLocalListenersAfterRefresh fix Timing issue with testProcessLocalListenersAfterRefresh. RealmResults should be created before trasaction. Otherwise it fails by same TableView version. And a minor typo fix./Merge pull request from realm/hohnamkung/fix-remove-listener Hohnamkung/fix remove listener/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/mc/bug/close-in-listener Fix crash when close Realm in listener/Fix crash when closing a Realm in listener pull request from realm/mc/bug/delete-wrong-file log files are not deleted by deleteRealm/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/cm/bug/copyorupdate-primarykey copyObjectFromJson now works correctly with PrimaryKey/Merge pull request from realm/lk-fixes-tests Fix some test files/Fix typo./Checking to see if a transaction is currently in progress for sync and async transaction pathways. Also adding logging. Added a test helper to assist with log assertion. Fixes Fixing typo. Removing logger after testing Removing extra line Fixing tests and adding change log message. Adding breaking change message Small cosmetic changes Adding punctuation formatting Fixing unit test./Checking for transaction in Realm.refresh and throwing if inside of Transaction as the Realm is always kept up to date. Fixes per code reviews. Adding update to changelog Fixing indentation. Updating change log to show correct exception/Merge pull request from realm/mc-linkview-leak Release LinkView native pointers/Release LinkView native pointers Fix * Add abstract method to NativeObjectReference for native resource releasing. * Implement NativeObjectReference.cleanup for UncheckRow and LinkView/
,,0.0954,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0954,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0996,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0996,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0996,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.3314,realm-java,Fixed RealmList not creating DynamicRealmObject of the correct type./Merge pull request from realm/my/fix_concat_StringData_and_C_string Fix field name in the message of IllegalArgumentException throw by the accessors of DynamicRealmObject/Fix field name in the message of IllegalArgumentException throw by the accessors of DynamicRealmObject/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/hohnamkung/fix-remove-listener Hohnamkung/fix remove listener/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/cm/bug/dynamic-setobject Fixed DynamicRealmObject.getObject()/setObject() using the wrong table/Fixed DynamicRealmObject.getObject()/setObject() using the wrong target class./Adding ISO8601 date parsing Also Adding json util tests for existing code to ensure no regressions Adding ISO8601 JSON file test Adding Json Utils license. Adding comments Fixing typo Updating changelog Setting parse position to constant to help reduce object initialization during large JSON imports. Adding link to original source code Fixing tests and using regext to test instead of catching exception for logical operation of json date parsing. Adding source link Accepting negative times for pre 1970 dates Using a static field and resettting the parse position each time. Fixing whitespace Fixing tests and adding change log message. Moving item in changelog/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.4874,realm-java,Merge pull request from realm/mc/bug/2057 Better exception message when sort on sub object/Better exception message when sort on sub object Close branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk/fix-realmquery-isnotempty Fix RealmQuery.isNotEmpty() correctly./Fix RealmQuery.isNotEmpty(). It is fix for Fix the native method + Renaming./Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/my/fix-findFirst-for-TableView fixed a bug in RealmQuery.findFirst()/fixed a bug where RealmQuery.findFirst() returned a wrong result if the RealmQuery had been created from RealmResults.where() (#1905)./Merge pull request from realm/my/fix-findFirst-for-TableView_0_86 fixed a bug in RealmQuery.findFirst()/fixed a bug where RealmQuery.findFirst() returned a wrong result if the RealmQuery had been created from RealmResults.where() (#1905)./Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/cm/avg-unittests Fixed unit tests for avg/Fixed unit tests./
,,0.1241,realm-java,fix compilation error in model classes in unit test/fix copilation error in model classes in unit test/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1121,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fixes-tests Fix some test files/
,,0.1489,realm-java,Fix more unit tests/Merge pull request from realm/cm/enable-rollback-unittest Convert RealmSchemaTests to JUnit4 + reenable fixed unit test./Convert RealmSchemaTests to JUnit4 + reenable fixed unit test./fix copilation error in model classes in unit test/
,,0.1008,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fixes-tests Fix some test files/
,,0.1043,realm-java,fix copilation error in model classes in unit test/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1236,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/fix copilation error in model classes in unit test/
,,0.276,realm-java,"Fix more unit tests/Merge pull request from realm/mc/bug/1945 Access to RealmResults based on deleted RealmList/Access to RealmResults based on deleted RealmList * When the original RealmList is deleted, for most methods of RealmResults should just work without crash by just treat it like an empty RealmResults. * RealmResults.where() throws IllegalStateExecption in this case. * RealmResults.isValid() returns false in this case. This is a temp fix, check for more details. Close RealmList not creating DynamicRealmObject of the correct type./fix copilation error in model classes in unit test/"
,,0.114,realm-java,fix copilation error in model classes in unit test/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1101,realm-java,fix copilation error in model classes in unit test/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0954,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.3514,realm-java,Fix more unit tests/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/cm/bug/copyonwritelister Fixed weak change listeners being removed correctly/Fixed weak change listeners being removed correctly/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/listener-strong-ref fix RealmChangeListener are strong reference now./
,,0.1661,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Checking to see if a transaction is currently in progress for sync and async transaction pathways. Also adding logging. Added a test helper to assist with log assertion. Fixes Fixing typo. Removing logger after testing Removing extra line Fixing tests and adding change log message. Adding breaking change message Small cosmetic changes Adding punctuation formatting Fixing unit test./Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.1081,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.0577,realm-java,Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.4881,realm-java,"Converted RealmTests to JUnit4 + Fixed Findbugs issues/Merge pull request from realm/mc/bug/flaky-test-fix Fix flaky tests related with async transaction/Fix flaky tests related with async transaction * Background realm needs to be closed before notifying other threads in async transaction. * Latch needs to be called after Realm closed./Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Adding declarations to javadocs for BaseRealm, Realm and DynamicRealm Applying changes from review. Adding updated javadoc Removing RuntimeException declaration and adding grammar fix./Merge pull request from realm/hohnamkung/fix-remove-listener Hohnamkung/fix remove listener/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/fix-1884-listener-trigger Nh/fix 1884 listener trigger/fix 1884 listener trigger/Merge pull request from realm/mc/bug/delete-wrong-file log files are not deleted by deleteRealm/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/listener-strong-ref fix RealmChangeListener are strong reference now./Checking for transaction in Realm.refresh and throwing if inside of Transaction as the Realm is always kept up to date. Fixes per code reviews. Adding update to changelog Fixing indentation. Updating change log to show correct exception/Merge pull request from realm/lk-fix-javadoc Fix javadocs/"
,,0.2352,realm-java,Merge pull request from realm/kg/bug/improving-so-loading-using-relinker Improving .so loading by using the ReLinker library/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Removing a FIXME/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.1594,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/listener-strong-ref fix RealmChangeListener are strong reference now./Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.1801,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/fix-1884-listener-trigger Nh/fix 1884 listener trigger/fix 1884 listener trigger/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.0996,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0975,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0599,realm-java,Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.0599,realm-java,Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.1171,realm-java,Merge pull request from realm/mc-linkview-leak Release LinkView native pointers/Release LinkView native pointers Fix * Add abstract method to NativeObjectReference for native resource releasing. * Implement NativeObjectReference.cleanup for UncheckRow and LinkView/
,,0.2315,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/fix-1851-async-badversion-crash fix1851 async badversion crash/add batch update for async queries to fix branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.102,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.0599,realm-java,Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.1675,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/mc-linkview-leak Release LinkView native pointers/Release LinkView native pointers Fix * Add abstract method to NativeObjectReference for native resource releasing. * Implement NativeObjectReference.cleanup for UncheckRow and LinkView/
,,0.1081,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.102,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.1017,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1162,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.10400000000000001,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.2648,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/hohnamkung/fix-remove-listener Hohnamkung/fix remove listener/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Adding ISO8601 date parsing Also Adding json util tests for existing code to ensure no regressions Adding ISO8601 JSON file test Adding Json Utils license. Adding comments Fixing typo Updating changelog Setting parse position to constant to help reduce object initialization during large JSON imports. Adding link to original source code Fixing tests and using regext to test instead of catching exception for logical operation of json date parsing. Adding source link Accepting negative times for pre 1970 dates Using a static field and resettting the parse position each time. Fixing whitespace Fixing tests and adding change log message. Moving item in changelog/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.1017,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0975,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0996,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.2049,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.1855,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0954,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.3625,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/fix_1894_changelistener_not_called Nh/fix 1894 changelistener not called/fix 1894 changelistener not called/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.0975,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0599,realm-java,Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.1061,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.5055,realm-java,Merge pull request from realm/mc/bug/2057 Better exception message when sort on sub object/Better exception message when sort on sub object Close branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk/fix-realmquery-isnotempty Fix RealmQuery.isNotEmpty() correctly./Fix RealmQuery.isNotEmpty(). It is fix for Fix the native method + Renaming./Merge pull request from realm/mc/bug/close-in-object-query Always close shared group first before async msg/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/fix-1884-listener-trigger Nh/fix 1884 listener trigger/fix 1884 listener trigger/Merge pull request from realm/nh/fix-1851-async-badversion-crash fix1851 async badversion crash/add batch update for async queries to fix pull request from realm/my/fix-findFirst-for-TableView fixed a bug in RealmQuery.findFirst()/fixed a bug where RealmQuery.findFirst() returned a wrong result if the RealmQuery had been created from RealmResults.where() (#1905)./Merge pull request from realm/my/fix-findFirst-for-TableView_0_86 fixed a bug in RealmQuery.findFirst()/fixed a bug where RealmQuery.findFirst() returned a wrong result if the RealmQuery had been created from RealmResults.where() (#1905)./Fixed unit tests/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.1061,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.2363,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/listener-strong-ref fix RealmChangeListener are strong reference now./Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.4057,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/mc/bug/dont-force-gc Removed explicit GC call when commit transaction/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Merge pull request from realm/mc/bug/concurrent-modification-exception Fix ConcurrentModificationException in listeners/Fix ConcurrentModificationException in listeners * It should be legal to modify realmObjects map in listener. * It should be legal to modify syncRealmResults/asyncRealmResults map in listener. Close branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/fix-1884-listener-trigger Nh/fix 1884 listener trigger/fix 1884 listener trigger/Merge pull request from realm/mc/bug/close-in-listener Fix crash when close Realm in listener/Fix crash when closing a Realm in listener pull request from realm/cm/bug/copyonwritelister Fixed weak change listeners being removed correctly/Fixed weak change listeners being removed correctly/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.2681,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master into kg/bug/improving-so-loading-using-relinker Conflicts: changelog.txt/Merge pull request from realm/mc/bug/required-when-primary-key addField PRIMARY_KEY should also apply REQUIRED/addField PRIMARY_KEY should also apply REQUIRED Fix branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.1017,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.2149,realm-java,"Merge pull request from realm/my/fix_data_usage_of_StringData Fix wrong usages of StringData.data()./Fix wrong usages of StringData.data(). `StringData.data()` does not guarantee the null termination of returned char array. We must use `size()` information to properly handle the char array in the StringData such as `std::string(str.data(), str.size())`./Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/mc/bug/1775 Buffer overwritten caused PK migration failure/Buffer overwritten caused PK migration failure Close A String or Binary pointer retrieved from Realm is invalidated when set_string called./Merge pull request from realm/my/fix/memory-leak-in-jni fix potential memory leak in jni code. and skip copying back to native array to java array if native array has not been changed./fix potential memory leak in jni code and skip copying back to java array if native array is not modified./"
,,0.1038,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0975,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.0975,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/
,,0.2296,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/lk/fix-realmquery-isnotempty Fix RealmQuery.isNotEmpty() correctly./Fix RealmQuery.isNotEmpty(). It is fix for Fix the native method + Renaming./Merge remote-tracking branch origin/mc/bug/leak-fix/Merge pull request from realm/mc/bug/leak-fix Leak fix/Leak fix SetLongArrayRegion will do a memcpy and queries might be leaked if exception happens./Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/fix-1851-async-badversion-crash fix1851 async badversion crash/add batch update for async queries to fix pull request from realm/my/fix/memory-leak-in-jni fix potential memory leak in jni code. and skip copying back to native array to java array if native array has not been changed./fix potential memory leak in jni code and skip copying back to java array if native array is not modified./
,,0.2508,realm-java,Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/nh/fix-1851-async-badversion-crash fix1851 async badversion crash/add batch update for async queries to fix
,,0.2402,realm-java,"Merge pull request from realm/mc/bug/1945 Access to RealmResults based on deleted RealmList/Access to RealmResults based on deleted RealmList * When the original RealmList is deleted, for most methods of RealmResults should just work without crash by just treat it like an empty RealmResults. * RealmResults.where() throws IllegalStateExecption in this case. * RealmResults.isValid() returns false in this case. This is a temp fix, check for more details. Close branch master of github.com:realm/realm-java into kg/bug/improving-so-loading-using-relinker/Merge pull request from realm/my/fix/memory-leak-in-jni fix potential memory leak in jni code. and skip copying back to native array to java array if native array has not been changed./fix potential memory leak in jni code and skip copying back to java array if native array is not modified./"
,,0.085,realm-java,Fix failure in unitTestExample introduced in (f6b02b9) (#2677)/Merge pull request from realm/mc/bug/unit-test-example-fix Fix unit test example mocks/Fix unit test example mocks/Merge pull request from realm/mc/bug/deprecate-getInstance Deprecate Realm.getInstance(Context)/
,,0.1064,realm-java,Merge pull request from realm/my/lint/migrationExample fix lint warnings in migrationExample/fix lint warnings in migrationExample/Merge pull request from realm/mc/bug/2316 migrateRealm throws when db doesnt exsit/
,,0.4247,realm-java,"Fix using RealmModel as a field (#2666) * Modify and rename isRealmObject to isRealmModel. * Modify annotation processor to allow RealmModel as a field. Fix in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/Integer/Long type can be null. 2. The object with nil primary key can be updated. 3. Migration checks if existing nullable type is set to be nullable in existing file. If not, throws RealmMigrationNeeded. 4. Duplicated null as PrimaryKey throws RealmPrimaryKeyConstraintException. 5. When a new empty row is added, the default value checked for duplicated is still the same empty string ("""") at Table.addEmptyRow() 6. Since there isnt equivalent term for Optional in Java 7 yet, nullable PK types are configured as following in this PR. | String PK | Number PK | Primitive PK | Table Column | Nullable | Nullable | Not Nullable |/Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/mc/bug/threading-check-copy-to-realm Thread check for copyToRealm/copyToRealmOrUpdate/Merge pull request from realm/mc/bug/2354 Fix the cast in proxy generator for CacheData/Fix the cast in proxy generator for CacheData Close pull request from realm/my/naming_restriction_2255 allow realm and row as a field name of model class. This fixes realm and row as a field name of model class. This fixes"
,,0.4187,realm-java,"Fix using RealmModel as a field (#2666) * Modify and rename isRealmObject to isRealmModel. * Modify annotation processor to allow RealmModel as a field. Fix in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/Integer/Long type can be null. 2. The object with nil primary key can be updated. 3. Migration checks if existing nullable type is set to be nullable in existing file. If not, throws RealmMigrationNeeded. 4. Duplicated null as PrimaryKey throws RealmPrimaryKeyConstraintException. 5. When a new empty row is added, the default value checked for duplicated is still the same empty string ("""") at Table.addEmptyRow() 6. Since there isnt equivalent term for Optional in Java 7 yet, nullable PK types are configured as following in this PR. | String PK | Number PK | Primitive PK | Table Column | Nullable | Nullable | Not Nullable |/Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/mc/bug/threading-check-copy-to-realm Thread check for copyToRealm/copyToRealmOrUpdate/Merge pull request from realm/mc/bug/2354 Fix the cast in proxy generator for CacheData/Fix the cast in proxy generator for CacheData Close pull request from realm/my/naming_restriction_2255 allow realm and row as a field name of model class. This fixes realm and row as a field name of model class. This fixes"
,,0.2662,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/"
,,0.3538,realm-java,"Fix using RealmModel as a field (#2666) * Modify and rename isRealmObject to isRealmModel. * Modify annotation processor to allow RealmModel as a field. Fix as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/my/naming_restriction_2255 allow realm and row as a field name of model class. This fixes realm and row as a field name of model class. This fixes"
,,0.4135,realm-java,"Fix using RealmModel as a field (#2666) * Modify and rename isRealmObject to isRealmModel. * Modify annotation processor to allow RealmModel as a field. Fix in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/Integer/Long type can be null. 2. The object with nil primary key can be updated. 3. Migration checks if existing nullable type is set to be nullable in existing file. If not, throws RealmMigrationNeeded. 4. Duplicated null as PrimaryKey throws RealmPrimaryKeyConstraintException. 5. When a new empty row is added, the default value checked for duplicated is still the same empty string ("""") at Table.addEmptyRow() 6. Since there isnt equivalent term for Optional in Java 7 yet, nullable PK types are configured as following in this PR. | String PK | Number PK | Primitive PK | Table Column | Nullable | Nullable | Not Nullable |/Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/mc/bug/threading-check-copy-to-realm Thread check for copyToRealm/copyToRealmOrUpdate/Merge pull request from realm/mc/bug/2354 Fix the cast in proxy generator for CacheData/Fix the cast in proxy generator for CacheData Close pull request from realm/my/naming_restriction_2255 allow realm and row as a field name of model class. This fixes realm and row as a field name of model class. This fixes"
,,0.3477,realm-java,"Fix using RealmModel as a field (#2666) * Modify and rename isRealmObject to isRealmModel. * Modify annotation processor to allow RealmModel as a field. Fix as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/lk/fix-doc Fix javadoc/Fix javadoc/"
,,0.3923,realm-java,"Fix using RealmModel as a field (#2666) * Modify and rename isRealmObject to isRealmModel. * Modify annotation processor to allow RealmModel as a field. Fix in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/Integer/Long type can be null. 2. The object with nil primary key can be updated. 3. Migration checks if existing nullable type is set to be nullable in existing file. If not, throws RealmMigrationNeeded. 4. Duplicated null as PrimaryKey throws RealmPrimaryKeyConstraintException. 5. When a new empty row is added, the default value checked for duplicated is still the same empty string ("""") at Table.addEmptyRow() 6. Since there isnt equivalent term for Optional in Java 7 yet, nullable PK types are configured as following in this PR. | String PK | Number PK | Primitive PK | Table Column | Nullable | Nullable | Not Nullable |/Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/lk/fix-doc Fix javadoc/Fix javadoc/"
,,0.259,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/"
,,0.5751,realm-java,"Add to realmObjects when addChangeListener called (#2723) * Only add the RealmObject to HandlerController.realmObjects when addChangeListener called. This will avoid we have too many objects in the map. * addToRealmObjects missed reference queue which would lead to the map grows always without cleaning. Close potentially a fix to ./RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Take latches for RunInLooperThread.testComplete And fix more test cases./Fix flaky test/"
,,0.1713,realm-java,"in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/"
,,0.0795,realm-java,Handle PK when calling RealmSchemas remove/rename (#2663) * Handle PK when calling RealmSchemas remove/rename * RealmSchema.remove() should remove the field from PK table. * RealmSchema.rename() should change the corresponding row in the PK table. Fix
,,0.5766,realm-java,"Add to realmObjects when addChangeListener called (#2723) * Only add the RealmObject to HandlerController.realmObjects when addChangeListener called. This will avoid we have too many objects in the map. * addToRealmObjects missed reference queue which would lead to the map grows always without cleaning. Close potentially a fix to ./RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/my/naming_restriction_2255 allow realm and row as a field name of model class. This fixes realm and row as a field name of model class. This fixes pull request from realm/mc/bug/2316 migrateRealm throws when db doesnt exsit/"
,,0.4834,realm-java,"RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/Merge pull request from realm/cm/bug/badversionexception Fix BadVersionException/Fixed race condition causing BadVersionException/Merge pull request from realm/nh/bug/2115_async_badversion fixes IllegalStateException Caller thread behind the worker thread/fixes IllegalStateException Caller thread behind the worker thread/Take latches for RunInLooperThread.testComplete And fix more test cases./"
,,0.1657,realm-java,"in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/"
,,0.1676,realm-java,"in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/"
,,0.1382,realm-java,"Merge pull request from realm/my/fix_2439 Fix the String from DynamicRealmObject.toString()./fix the String from DynamicRealmObject.toString(). Now DynamicRealmObject.toString() shows null value as ""null"". ""class_"" prefix is removed from type name in that String. Align the format to the String from typed RealmObject./Merge pull request from realm/mc/bug/2368 Correct checking in DynamicRealmObject.setList/Correct checking in DynamicRealmObject.setList * Fix * Check equality of Realm in DynamicRealmObject setters to avoid risks mentioned 2) in"
,,0.1152,realm-java,Merge pull request from realm/cm/bug/oberservable-gc RealmResults/Objects are no longer accidentially GCed/Merge pull request from realm/cm/rxjava-close-bug Realm Observables now holds a Realm instance reference/
,,0.1713,realm-java,"in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/"
,,0.1349,realm-java,Merge pull request from realm/cm/rxjava-close-bug Realm Observables now holds a Realm instance reference/Take latches for RunInLooperThread.testComplete And fix more test cases./
,,0.2497,realm-java,"Handle PK when calling RealmSchemas remove/rename (#2663) * Handle PK when calling RealmSchemas remove/rename * RealmSchema.remove() should remove the field from PK table. * RealmSchema.rename() should change the corresponding row in the PK table. Fix in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/Integer/Long type can be null. 2. The object with nil primary key can be updated. 3. Migration checks if existing nullable type is set to be nullable in existing file. If not, throws RealmMigrationNeeded. 4. Duplicated null as PrimaryKey throws RealmPrimaryKeyConstraintException. 5. When a new empty row is added, the default value checked for duplicated is still the same empty string ("""") at Table.addEmptyRow() 6. Since there isnt equivalent term for Optional in Java 7 yet, nullable PK types are configured as following in this PR. | String PK | Number PK | Primitive PK | Table Column | Nullable | Nullable | Not Nullable |/"
,,0.493,realm-java,"RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/"
,,0.4108,realm-java,"Implementation of SharedGroup::wait_for_change() method. (#2386) Goal 1. Add BaseRealm.waitForChange() which blocks until a change is available, then advance the Realm and continue without triggering RealmChangeListeners. 2. Add BaseRealm.stopWaitForChange() that makes any current waitForChange() return false immediately. 3. Deprecated BaseRealm.refresh(). Behaviors 1. waitForChange() will throw IllegalStateException within a transaction. 2. BaseRealm cannot wait in a thread with Looper. IllegalStateException will be thrown. 3. Once stopWaitForChange is called, all future calls to waitForChange will immediately return false. For detailed discussions, please refer Realm.createObject(Class,PrimaryKey) public (#2622) This method is a way to solve the problem that people might have data with a primary key that is is the default value for that type, e.g a long primary key with the value 0. Once this object is saved in Realm any calls to the normal Realm.createObject() would throw an exception as it would try to assign the default value (zero) to the object before the user could set it to something else. With this method that is no longer a problem. Internally we already use this method and it is already public in the Dynamic API. The reason for not making this public earlier was due to fear of mis-use since there is no type-safe guarantee at compile time. However since it is already public in the Dynamic API and we havent seen any indication of that being misused we feel it should be safe to make this public. Also our Query API is also semi-threadsafe so there is precedence there as well./Only throw RealmException if absolutely necessary (#2618) We should avoid wrapping lower level exceptions in RealmExceptions unless there is a good reason for it. We had multiple support issues where people were confused about the RealmException and didnt understand they had to dig through the stack trace for the original exception. This change alters the behaviour of all our JSON methods so they now only convert JSONException to RealmException in order to prevent checked exceptions to reach the user. All other exceptions should be thrown directly./RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/Integer/Long type can be null. 2. The object with nil primary key can be updated. 3. Migration checks if existing nullable type is set to be nullable in existing file. If not, throws RealmMigrationNeeded. 4. Duplicated null as PrimaryKey throws RealmPrimaryKeyConstraintException. 5. When a new empty row is added, the default value checked for duplicated is still the same empty string ("""") at Table.addEmptyRow() 6. Since there isnt equivalent term for Optional in Java 7 yet, nullable PK types are configured as following in this PR. | String PK | Number PK | Primitive PK | Table Column | Nullable | Nullable | Not Nullable |/Merge pull request from realm/mc/bug/threading-check-copy-to-realm Thread check for copyToRealm/copyToRealmOrUpdate/Merge pull request from realm/my/fix_NPE_when_RxJava_unavailable Fix NPE in RealmConfiguration.equals() when RxJava is unavailable./fix NPE in RealmConfiguration.equals() when RxJava is unavailable./Merge pull request from realm/mc/bug/2381 More checkings when modify RealmList/More checkings when modify RealmList Fix * New method LinkView.getTargetTable(). * Proper checking to add DynamicRealmObject to RealmList. * Disallow modifying with RealmObject belongs to another Realm instance./"
,,0.486,realm-java,"RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/"
,,0.5856,realm-java,"RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/mc/bug/2381 More checkings when modify RealmList/More checkings when modify RealmList Fix * New method LinkView.getTargetTable(). * Proper checking to add DynamicRealmObject to RealmList. * Disallow modifying with RealmObject belongs to another Realm instance./"
,,0.1657,realm-java,"in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/"
,,0.1909,realm-java,Merge pull request from realm/mc/bug/2381 More checkings when modify RealmList/More checkings when modify RealmList Fix * New method LinkView.getTargetTable(). * Proper checking to add DynamicRealmObject to RealmList. * Disallow modifying with RealmObject belongs to another Realm instance./
,,0.1039,realm-java,Merge pull request from realm/mc/bug/2316 migrateRealm throws when db doesnt exsit/
,,0.2446,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/"
,,0.491,realm-java,"RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/"
,,0.5516,realm-java,"Nh/fix listener generics (#2726) * Fix generics when attaching RealmChangeListener for Realm & DynamicRealm/Add to realmObjects when addChangeListener called (#2723) * Only add the RealmObject to HandlerController.realmObjects when addChangeListener called. This will avoid we have too many objects in the map. * addToRealmObjects missed reference queue which would lead to the map grows always without cleaning. Close potentially a fix to ./ StopWaitForChange exception in Javadoc (#2721) Missing Javadoc about BaseRealm.stopWaitForChange()s Exception added./Implementation of SharedGroup::wait_for_change() method. (#2386) Goal 1. Add BaseRealm.waitForChange() which blocks until a change is available, then advance the Realm and continue without triggering RealmChangeListeners. 2. Add BaseRealm.stopWaitForChange() that makes any current waitForChange() return false immediately. 3. Deprecated BaseRealm.refresh(). Behaviors 1. waitForChange() will throw IllegalStateException within a transaction. 2. BaseRealm cannot wait in a thread with Looper. IllegalStateException will be thrown. 3. Once stopWaitForChange is called, all future calls to waitForChange will immediately return false. For detailed discussions, please refer iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/mc/bug/threading-check-copy-to-realm Thread check for copyToRealm/copyToRealmOrUpdate/Merge pull request from realm/cm/bug/badversionexception Fix BadVersionException/Fixed race condition causing BadVersionException/Merge pull request from realm/mc/bug/2316 migrateRealm throws when db doesnt exsit/"
,,0.5853,realm-java,"Merge pull request from realm/mc/javadoc-fix Fix wrong method link in javadoc/Fix wrong method link in javadoc/RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Fix RealmList.isValid Javadoc/Merge pull request from realm/cm/realmlist-javadoc Fix RealmList.isValid Javadoc/Fix RealmList.isValid Javadoc/Merge pull request from realm/mc/bug/2381 More checkings when modify RealmList/More checkings when modify RealmList Fix * New method LinkView.getTargetTable(). * Proper checking to add DynamicRealmObject to RealmList. * Disallow modifying with RealmObject belongs to another Realm instance./"
,,0.304,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/aAInitial dataset for a Realm (#2602) * Support creating an initial dataset for a Realm * PR fixes for initial data set/Merge pull request from realm/lk/fix-doc Fix javadoc/Fix javadoc/reflect hash code of rxObservableFactory in RealmConfiguration.hashCode(). This fixes pull request from realm/my/fix_NPE_when_RxJava_unavailable Fix NPE in RealmConfiguration.equals() when RxJava is unavailable./fix NPE in RealmConfiguration.equals() when RxJava is unavailable./Merge pull request from realm/mc/bug/1990 Only load RealmObservableFactory when RxJava exist/Only load RealmObservableFactory when RxJava exist Close * Check RxJava existence only once. * Dont load RealmObservableFactory if RxJava doesnt exist. NOTE: When reflection called on the RealmObject/RealmResults, crash will still happen because of Observable doesnt exist in the class path. In such a case, a dummy rx.Observable is still needed as a workaround./"
,,0.3809,realm-java,"Handle PK when calling RealmSchemas remove/rename (#2663) * Handle PK when calling RealmSchemas remove/rename * RealmSchema.remove() should remove the field from PK table. * RealmSchema.rename() should change the corresponding row in the PK table. Fix as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/mc/bug/2381 More checkings when modify RealmList/More checkings when modify RealmList Fix * New method LinkView.getTargetTable(). * Proper checking to add DynamicRealmObject to RealmList. * Disallow modifying with RealmObject belongs to another Realm instance./"
,,0.2539,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/lk/fix-doc Fix javadoc/Fix javadoc/"
,,0.2431,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/"
,,0.2609,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/lk/fix-doc Fix javadoc/Fix javadoc/"
,,0.0681,realm-java,Merge pull request from realm/cm/bug/badversionexception Fix BadVersionException/Fixed race condition causing BadVersionException/
,,0.2403,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/"
,,0.1579,realm-java,"Merge pull request from realm/mc/bug/deleted-linkview-release-branch Adapt core fix for the delete RealmList/Adapt core fix for the delete RealmList Update core to 0.96.1. No more exception will be thrown when access RealmResults if the base RealmList has be deleted. Instead, it will be treated as an empty RealmResults forever./"
,,0.4582,realm-java,"RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/Merge pull request from realm/lk/fix-doc Fix javadoc/Fix javadoc/"
,,0.24600000000000002,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/"
,,0.2576,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/"
,,0.3618,realm-java,"Add to realmObjects when addChangeListener called (#2723) * Only add the RealmObject to HandlerController.realmObjects when addChangeListener called. This will avoid we have too many objects in the map. * addToRealmObjects missed reference queue which would lead to the map grows always without cleaning. Close potentially a fix to ./Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/mc/bug/1990 Only load RealmObservableFactory when RxJava exist/Only load RealmObservableFactory when RxJava exist Close * Check RxJava existence only once. * Dont load RealmObservableFactory if RxJava doesnt exist. NOTE: When reflection called on the RealmObject/RealmResults, crash will still happen because of Observable doesnt exist in the class path. In such a case, a dummy rx.Observable is still needed as a workaround./Merge pull request from realm/my/naming_restriction_2255 allow realm and row as a field name of model class. This fixes realm and row as a field name of model class. This fixes"
,,0.1888,realm-java,"Better exception message when using custom migrations (#2715) Custom migration classes has been a source of quite a few support questions. This commit adds an extra check for that specific case in order to generate a better exception message that also points to a fix. The alternative was to ignore the Migration class when comparing RealmConfigurations, and even though that would be very unlikely it could also lead to some very subtle bugs. By doing it this way, we stick to the normal semantics of Java equality./Implementation of SharedGroup::wait_for_change() method. (#2386) Goal 1. Add BaseRealm.waitForChange() which blocks until a change is available, then advance the Realm and continue without triggering RealmChangeListeners. 2. Add BaseRealm.stopWaitForChange() that makes any current waitForChange() return false immediately. 3. Deprecated BaseRealm.refresh(). Behaviors 1. waitForChange() will throw IllegalStateException within a transaction. 2. BaseRealm cannot wait in a thread with Looper. IllegalStateException will be thrown. 3. Once stopWaitForChange is called, all future calls to waitForChange will immediately return false. For detailed discussions, please refer pull request from realm/lk/fix-doc Fix javadoc/Fix javadoc/"
,,0.5797,realm-java,"Add to realmObjects when addChangeListener called (#2723) * Only add the RealmObject to HandlerController.realmObjects when addChangeListener called. This will avoid we have too many objects in the map. * addToRealmObjects missed reference queue which would lead to the map grows always without cleaning. Close potentially a fix to ./RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/cm/bug/badversionexception Fix BadVersionException/Fixed race condition causing BadVersionException/"
,,0.4012,realm-java,"Nh/fix listener generics (#2726) * Fix generics when attaching RealmChangeListener for Realm & DynamicRealm/Add to realmObjects when addChangeListener called (#2723) * Only add the RealmObject to HandlerController.realmObjects when addChangeListener called. This will avoid we have too many objects in the map. * addToRealmObjects missed reference queue which would lead to the map grows always without cleaning. Close potentially a fix to ./Make Realm.createObject(Class,PrimaryKey) public (#2622) This method is a way to solve the problem that people might have data with a primary key that is is the default value for that type, e.g a long primary key with the value 0. Once this object is saved in Realm any calls to the normal Realm.createObject() would throw an exception as it would try to assign the default value (zero) to the object before the user could set it to something else. With this method that is no longer a problem. Internally we already use this method and it is already public in the Dynamic API. The reason for not making this public earlier was due to fear of mis-use since there is no type-safe guarantee at compile time. However since it is already public in the Dynamic API and we havent seen any indication of that being misused we feel it should be safe to make this public. Also our Query API is also semi-threadsafe so there is precedence there as well./RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/Merge pull request from realm/lk/fix-doc Fix javadoc/Fix javadoc/"
,,0.3807,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/my/fix_2439 Fix the String from DynamicRealmObject.toString()./fix the String from DynamicRealmObject.toString(). Now DynamicRealmObject.toString() shows null value as ""null"". ""class_"" prefix is removed from type name in that String. Align the format to the String from typed RealmObject./Merge pull request from realm/mc/bug/2381 More checkings when modify RealmList/More checkings when modify RealmList Fix * New method LinkView.getTargetTable(). * Proper checking to add DynamicRealmObject to RealmList. * Disallow modifying with RealmObject belongs to another Realm instance./Merge pull request from realm/mc/bug/2368 Correct checking in DynamicRealmObject.setList/Correct checking in DynamicRealmObject.setList * Fix * Check equality of Realm in DynamicRealmObject setters to avoid risks mentioned 2) in"
,,0.2547,realm-java,"Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/"
,,0.579,realm-java,"Add to realmObjects when addChangeListener called (#2723) * Only add the RealmObject to HandlerController.realmObjects when addChangeListener called. This will avoid we have too many objects in the map. * addToRealmObjects missed reference queue which would lead to the map grows always without cleaning. Close potentially a fix to ./RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/Merge pull request from realm/cm/bug/badversionexception Fix BadVersionException/Fixed race condition causing BadVersionException/"
,,0.1909,realm-java,Merge pull request from realm/mc/bug/2381 More checkings when modify RealmList/More checkings when modify RealmList Fix * New method LinkView.getTargetTable(). * Proper checking to add DynamicRealmObject to RealmList. * Disallow modifying with RealmObject belongs to another Realm instance./
,,0.1676,realm-java,"in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/"
,,0.491,realm-java,"RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/"
,,0.1586,realm-java,"Implementation of SharedGroup::wait_for_change() method. (#2386) Goal 1. Add BaseRealm.waitForChange() which blocks until a change is available, then advance the Realm and continue without triggering RealmChangeListeners. 2. Add BaseRealm.stopWaitForChange() that makes any current waitForChange() return false immediately. 3. Deprecated BaseRealm.refresh(). Behaviors 1. waitForChange() will throw IllegalStateException within a transaction. 2. BaseRealm cannot wait in a thread with Looper. IllegalStateException will be thrown. 3. Once stopWaitForChange is called, all future calls to waitForChange will immediately return false. For detailed discussions, please refer"
,,0.1602,realm-java,"in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/"
,,0.4922,realm-java,"RealmCollection iterators are now stable (#2124) This commit changes the semantics of how live RealmResults really are. Before this commit RealmResults where live _all the time_, which meant that code like the below didnt work as expected (only half the elements would be deleted): ``` for (int i 0; i results.size(); i++) { results.get(i).deleteFromRealm(); } ``` The rather unintuitive work-around was counting backwards: ``` for (int i results.size() i >=0; i--) { results.get(i).deleteFromRealm(); } ``` This commit changes the behaviour of RealmResults, so they no longer are automatically up to date. They are instead refreshed using Looper events just like changes from other threads. RealmList iterators are not live in the same way that RealmResults are but act more like standard ArrayLists, so they dont suffer from the same liveness issues. The high-level arguments for doing this change was: Pros: * All iterators now work as you would normally expect (ease of use). * The liveness of Realm objects are now all controlled through the Looper (simpler internal code / easier to document Realm behaviour). Cons: * There is a small chance that people can accidentally reference a deleted RealmObject in a RealmResult. (Can be checked through use of `RealmObject.isValid()`)/Merge pull request from realm/mc/bug/deleted-linkview-release-branch Adapt core fix for the delete RealmList/Adapt core fix for the delete RealmList Update core to 0.96.1. No more exception will be thrown when access RealmResults if the base RealmList has be deleted. Instead, it will be treated as an empty RealmResults forever./"
,,0.1944,realm-java,Merge pull request from realm/mc/bug/2381 More checkings when modify RealmList/More checkings when modify RealmList Fix * New method LinkView.getTargetTable(). * Proper checking to add DynamicRealmObject to RealmList. * Disallow modifying with RealmObject belongs to another Realm instance./
,,0.177,realm-java,"Merge pull request from realm/mc/bug/deleted-linkview-release-branch Adapt core fix for the delete RealmList/Adapt core fix for the delete RealmList Update core to 0.96.1. No more exception will be thrown when access RealmResults if the base RealmList has be deleted. Instead, it will be treated as an empty RealmResults forever./"
,,0.16399999999999998,realm-java,"Implementation of SharedGroup::wait_for_change() method. (#2386) Goal 1. Add BaseRealm.waitForChange() which blocks until a change is available, then advance the Realm and continue without triggering RealmChangeListeners. 2. Add BaseRealm.stopWaitForChange() that makes any current waitForChange() return false immediately. 3. Deprecated BaseRealm.refresh(). Behaviors 1. waitForChange() will throw IllegalStateException within a transaction. 2. BaseRealm cannot wait in a thread with Looper. IllegalStateException will be thrown. 3. Once stopWaitForChange is called, all future calls to waitForChange will immediately return false. For detailed discussions, please refer"
,,0.1676,realm-java,"in String, Byte, Short, Integer, and Long types can be null. (#2634) is allowed to be null for String and Boxed primitive types. Features part of this commit are 1. A annotated field in java.lang.String/Byte/Short/"
,,0.0724,realm-java,add a null check to addChangeListener and removeChangeListener (#2805) * add a null check to addChangeListener and removeChangeListener in Realm and DynamicRealm (fixes * reflect review comments/Fixed unit tests./
,,0.0814,realm-java,add a null check to addChangeListener and removeChangeListener (#2805) * add a null check to addChangeListener and removeChangeListener in Realm and DynamicRealm (fixes * reflect review comments/Fix unit test/Fixed unit tests./
,,0.0618,realm-java,Fixed unit tests./
,,0.0618,realm-java,Fixed unit tests./
,,0.0597,realm-java,Fixed unit tests./
,,0.0618,realm-java,Fixed unit tests./
,,0.0639,realm-java,Fixed unit tests./
,,0.0639,realm-java,Fixed unit tests./
,,0.0664,realm-java,Merge pull request from realm/merge-78ccde-to-master Fix merge from 78ccde to master/
,,0.0599,realm-java,Merge pull request from realm/merge-78ccde-to-master Fix merge from 78ccde to master/
,,0.0599,realm-java,Merge pull request from realm/merge-78ccde-to-master Fix merge from 78ccde to master/
,,0.0664,realm-java,Merge pull request from realm/merge-78ccde-to-master Fix merge from 78ccde to master/
,,0.0621,realm-java,Merge pull request from realm/merge-78ccde-to-master Fix merge from 78ccde to master/
,,0.0786,realm-java,Minor grammar fixes (#3722)/
,,0.0621,realm-java,Merge pull request from realm/merge-78ccde-to-master Fix merge from 78ccde to master/
,,0.0648,realm-java,Fix unit tests./fix merge mistakes/
,,0.0621,realm-java,Merge pull request from realm/merge-78ccde-to-master Fix merge from 78ccde to master/
,,0.0609,realm-java,Fix various minor issues/
,,0.198,realm-java,"Fix tests/Fix LinkView based RealmResultss tests behaviour The original tests for deleted LinkView based RealmResults are incorrect. Before the next event loop, even if the LinkView is not valid anymore, for the purpose of maintaining the stable iterator, the RealmResults has to stay the same without calling sync_if_needed. The results becomes empty only if the we enter into the next event loop and reattach to the original TableView. Also, a core bug was found during changing the tests, see returns a new RealmResults Doing distinct on the original results creates lots of problems: It is not supported by OS. It wont play well with fine grained notifications. It has a different behaviour compared with RealmResults.sort()./Fix tests for RealmResults.distinctAsync()/"
,,0.0677,realm-java,"Java doc, comments & exception message fix/Async transaction to avoid endless recursion/"
,,0.0744,realm-java,Throw correct exception for multiple logged in users (#3921)/
,,0.1311,realm-java,"SyncCredentials.accessToken + Integration tests (#4018) This PR adds support for SyncCredentials.accessToken() which is required for I also found a number of issues with the integration tests. They have been fixed as well./Merge pull request from realm/merge-71855f-to-master Fix merge from 71855f to master/Ignore exceptions (#4028) * Ignore exceptions/Convert to annotations for findbugs exceptions * Clean up code in SyncUser to eliminate FB exception * Add usage for the config files, to the top level README.md * Note UT findbugs failures/Throw correct exception for multiple logged in users (#3921)/Fix SyncConfiguration.toString() (#3792)/"
,,0.1013,realm-java,"Convert to annotations for findbugs exceptions * Clean up code in SyncUser to eliminate FB exception * Add usage for the config files, to the top level README.md * Note UT findbugs failures/"
,,0.0733,realm-java,"Wire the ""like"" predicate into RealmQuery (#3992) * Wire the ""like"" predicate into RealmQuery Fixes and fix warnings (#3961) Adapt the same warning options from object store/RAII wrapper for some JNI resources (#3959) * Move the global jvm pointer to JniUtils and add some helper functions. * Wrapper for jmethodID, global weak ref. * Refactor the wrapper for the local ref. * Before using the global weak ref, always try to acquire a local ref first since until Android 4.0 weak global references could only be passed to NewLocalRef, NewGlobalRef, and DeleteWeakGlobalRef. See for more details. This fix ./Merge pull request from realm/merge-a8d647-to-master Fix merge from a8d647 to master/"
,,0.1021,realm-java,Implement fine gained notification (#4191) Add RealmObservable and RealmCollectionObservable interfaces. Enable detailed change information for RealmResults through OrderedCollectionChange interface. Fix a bug in the ObserverPairList which could cause the removed listener gets called if it was removed during previous listener iteration. Fix
,,0.1934,realm-java,Clean up SharedRealm source Remove unused methods. Fix double negatives. Use auto& to avoid creating temp objects./Dont reset SharedRealm ptr (#4478) Keep the SharedRealm ptr valid when close it. To allow the is_closed checking could throw in the Object Store and it can be converted to a friendly Java exception. Check if SharedRealm is closed when create collection iterator. Throw an ISE if it is. Fix ./Merge pull request from realm/merge-7ac0a9-to-master Fix merge from 7ac0a9 to master/Trigger collection listeners when commit (#4368) The listeners on RealmList/RealmResults will be tiggered immediately when the transaction committed on the same thread if the collections are changed or the async query should return. Listeners on the RealmObject will have same behaviour after merged. This is to solve the problem for predictive UI animations and local transactions. Fix pull request from realm/merge-dc09d5-to-master Fix merge from dc09d5 to master/Fix compacting on external storage Fix Update Object Store to 37a2ba42b./
,,0.0609,realm-java,Merge pull request from realm/merge-fe9048-to-master Fix merge from fe9048 to master/Fixes (#4548)/Merge pull request from realm/merge-dc09d5-to-master Fix merge from dc09d5 to master/
,,0.1043,realm-java,Merge pull request from realm/merge-6a01b2-to-master Fix merge from 6a01b2 to master/Fix queries not working on proguarded Realms model classes (#4690)/
,,0.1718,realm-java,quick fix (#4745)/Backlink queries (#4704) * Fixing unit tests for backlink queries. * Reintroducing of a native implementation of isNotEmpty(). * Moving inverse relationships out of beta stage./
,,0.3479,realm-java,"Verify schema for backlinks by OS Add computed properties in the proxys expected schema info, so the schema validation in Object Store will check for linking objects. Throw IllegalStateException if the backlink schema validation fails. ISE is more suitable here since backlink does not exist in the schema. Normally the way to handle this issue is not by adding a migration block, instead, just changing the declaration in the model class. Rewrite and enable the tests which are related to the linking objects schema validation by mocking the expected schema info./Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./Merge pull request from realm/merge-ea02c9-to-master Fix merge from ea02c9 to master/Merge pull request from realm/merge-8d3e17-to-master Fix merge from 8d3e17 to master/Make the proxy toString methods reveal themselves (#4623) * Make the proxy toString methods reveal themselves * Fix preprocessor UTs * Address PR comments/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.0643,realm-java,Merge pull request from realm/merge-fbb711-to-master Fix merge from fbb711 to master/
,,0.0869,realm-java,Add RealmObject.getRealm() and DynamicRealmObject.getDynamicRealm(). (#4778) * Add RealmObject.getConfiguration(RealmModel) (#4720). * revert a change in Realm.java * check exception message * Now RealmObject.getConfiguration(RealmModel) returns null if the model is unmanaged * add RealmObject.getConfiguration() * implement RealmObject#getRealm() and DynamicRealmObject#getDynamicRealm() * fix markup * remove empty tests * fix tests/
,,0.0577,realm-java,Merge pull request from realm/merge-fbb711-to-master Fix merge from fbb711 to master/
,,0.0643,realm-java,Merge pull request from realm/merge-fbb711-to-master Fix merge from fbb711 to master/
,,0.0577,realm-java,Merge pull request from realm/merge-fbb711-to-master Fix merge from fbb711 to master/
,,0.0643,realm-java,Merge pull request from realm/merge-fbb711-to-master Fix merge from fbb711 to master/
,,0.0577,realm-java,Merge pull request from realm/merge-fbb711-to-master Fix merge from fbb711 to master/
,,0.3769,realm-java,More minor fixes to pave the way for fixing UTs/Merge pull request from realm/merge-fbb711-to-master Fix merge from fbb711 to master/Explicitly specify Locale for String.format() in our annotation processor (#4853) * add Locale on formatting strings in our annotation processor. * fix formatting/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3194,realm-java,"copyToRealmOrUpdate cause dup values in list field (#5023) Close We are using HashMap to maintain a cache of added managed RealmObject when doing copyOrUpdate. But if the given object graph contains objects which have same PK but are different java object, cache missing will happen. That caused the object got set multiple times. For non-list fields, it is not a problem since it will eventually has the expected value if users objects graph is consistent. For list, that results the elements in the list are added multiple times since we dont clear the RealmList in copy()./Verify schema for backlinks by OS Add computed properties in the proxys expected schema info, so the schema validation in Object Store will check for linking objects. Throw IllegalStateException if the backlink schema validation fails. ISE is more suitable here since backlink does not exist in the schema. Normally the way to handle this issue is not by adding a migration block, instead, just changing the declaration in the model class. Rewrite and enable the tests which are related to the linking objects schema validation by mocking the expected schema info./Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./Explicitly specify Locale for String.format() in our annotation processor (#4853) * add Locale on formatting strings in our annotation processor. * fix formatting/Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./Merge pull request from realm/merge-ea02c9-to-master Fix merge from ea02c9 to master/Converting nullable PK fields with null values (#4798) RealmObjectSchema.setRequired() will throw if the PK field has null values stored. Call set_xxx_unique when converting nullability on a PK field. Remove useless check in the proxy generator which caused inconsistency exception. Add relevant test cases./Merge pull request from realm/merge-8d3e17-to-master Fix merge from 8d3e17 to master/Make the proxy toString methods reveal themselves (#4623) * Make the proxy toString methods reveal themselves * Fix preprocessor UTs * Address PR comments/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.3461,realm-java,Explicitly specify Locale for String.format() in our annotation processor (#4853) * add Locale on formatting strings in our annotation processor. * fix formatting/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3511,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3707,realm-java,"Fix a bug that RealmSchema.remove() and RealmSchema.rename() dont update internal cache (#5037) * fix a bug that RealmSchema.remove() and RealmSchema.rename() dont update internal cache * remove tests for removed or renamed class. Ill add those tests again in another PR * remove tests for removed or renamed class. Ill add those tests again in another PR * check RealmObjectSchema is valid before obtaining target class name * add target class name check * fix class name check * make dynamicClassToSchema private/Merge pull request from realm/merge-7fbccc-to-master-4.0 Fix merge from 7fbccc to master-4.0/fix failing tests/fix failing tests/Update failing tests/Fix class name length check (#5019) * fix class name length check * fix the value of TABLE_NAME_MAX_LENGTH * fix failed tests * fix failed tests * fix failed tests/Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./Fix test case with missing linking object schema Those tests pass with current schema implementation since currently it will create extra object schemas which are not in the module. This behaviour is not right and will fail those tests in the future schema refactor. So always define all the needed object schemas in the module./Split createTable & getTable (#4689) To support Stable IDs, the primary key has to be created while the table is created. This will require a new internal API createTableWithPK in the future. The previous getTable behaviour would be quite confusing to support that. getTable will only return the table if it exists. createTable is the one to be used to create tables. Add JavaExceptionDef to have all common Java exception names in a single place. Remove useless tests./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.2338,realm-java,"Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./Add RealmObject.getRealm() and DynamicRealmObject.getDynamicRealm(). (#4778) * Add RealmObject.getConfiguration(RealmModel) (#4720). * revert a change in Realm.java * check exception message * Now RealmObject.getConfiguration(RealmModel) returns null if the model is unmanaged * add RealmObject.getConfiguration() * implement RealmObject#getRealm() and DynamicRealmObject#getDynamicRealm() * fix markup * remove empty tests * fix tests/Merge pull request from realm/merge-8d3e17-to-master Fix merge from 8d3e17 to master/Make the proxy toString methods reveal themselves (#4623) * Make the proxy toString methods reveal themselves * Fix preprocessor UTs * Address PR comments/"
,,0.3568,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3428,realm-java,"Enable Kotlin for unit tests and move benchmarks to separate library Kotlin has been added to the unit test suite. In order to not break the dex limit, the benchmarks have been moved to a separate library./Merge pull request from realm/merge-6a01b2-to-master Fix merge from 6a01b2 to master/Fix queries not working on proguarded Realms model classes (#4690)/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.1103,realm-java,Fix test case with missing linking object schema Those tests pass with current schema implementation since currently it will create extra object schemas which are not in the module. This behaviour is not right and will fail those tests in the future schema refactor. So always define all the needed object schemas in the module./
,,0.1484,realm-java,"Merge pull request from realm/merge-ea02c9-to-master Fix merge from ea02c9 to master/Split createTable & getTable (#4689) To support Stable IDs, the primary key has to be created while the table is created. This will require a new internal API createTableWithPK in the future. The previous getTable behaviour would be quite confusing to support that. getTable will only return the table if it exists. createTable is the one to be used to create tables. Add JavaExceptionDef to have all common Java exception names in a single place. Remove useless tests./"
,,0.1415,realm-java,"Split createTable & getTable (#4689) To support Stable IDs, the primary key has to be created while the table is created. This will require a new internal API createTableWithPK in the future. The previous getTable behaviour would be quite confusing to support that. getTable will only return the table if it exists. createTable is the one to be used to create tables. Add JavaExceptionDef to have all common Java exception names in a single place. Remove useless tests./"
,,0.3656,realm-java,"Merge pull request from realm/merge-ea02c9-to-master Fix merge from ea02c9 to master/Split createTable & getTable (#4689) To support Stable IDs, the primary key has to be created while the table is created. This will require a new internal API createTableWithPK in the future. The previous getTable behaviour would be quite confusing to support that. getTable will only return the table if it exists. createTable is the one to be used to create tables. Add JavaExceptionDef to have all common Java exception names in a single place. Remove useless tests./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.3616,realm-java,"Split createTable & getTable (#4689) To support Stable IDs, the primary key has to be created while the table is created. This will require a new internal API createTableWithPK in the future. The previous getTable behaviour would be quite confusing to support that. getTable will only return the table if it exists. createTable is the one to be used to create tables. Add JavaExceptionDef to have all common Java exception names in a single place. Remove useless tests./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.1102,realm-java,Fix ErrorProne warnings/Merge pull request from realm/merge-ea02c9-to-master Fix merge from ea02c9 to master/fix ambiguous method calls warned by Java 8 compiler (#4647) * fix ambiguous method calls warned by Java 8 compiler * fix more/
,,0.3099,realm-java,Merge pull request from realm/merge-ea02c9-to-master Fix merge from ea02c9 to master/Suppress warnings in JNIQueryTest and JNITableInsertTest (#4815) * suppress warnings in JNIQueryTest and JNITableInsertTest * stop suppressing deprecation warnings/use fail() instead of assert(false). (#4814)/fix ambiguous method calls warned by Java 8 compiler (#4647) * fix ambiguous method calls warned by Java 8 compiler * fix more/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.14,realm-java,"Split createTable & getTable (#4689) To support Stable IDs, the primary key has to be created while the table is created. This will require a new internal API createTableWithPK in the future. The previous getTable behaviour would be quite confusing to support that. getTable will only return the table if it exists. createTable is the one to be used to create tables. Add JavaExceptionDef to have all common Java exception names in a single place. Remove useless tests./"
,,0.2245,realm-java,"Merge pull request from realm/merge-7fbccc-to-master-4.0 Fix merge from 7fbccc to master-4.0/Fix class name length check (#5019) * fix class name length check * fix the value of TABLE_NAME_MAX_LENGTH * fix failed tests * fix failed tests * fix failed tests/Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./PR fix/Clean up pre-null related tests created in 0.83.0 From 0.83.0, we begin to support the nullable fields. But because of a bug, the Realm file which was created in 0.82.2 contains all schemas defined in the project instead of those only defined in the RealmModule. This will cause lots of troubles after we fix this bug and move to Object Stores schema. Create string-only-pre-null-0.82.2.realm with 0.82.2 which only contains StringOnly class. Create string-only-required-pre-null-0.82.2.realm with 0.82.2 which only contains StringOnlyRequired class. Use dynamic API to rewrite migrationException_realmListChanged. Remove default-before-migration.realm./Remove outdated addSearchIndexTwice RealmObjectSchema.addIndex() is not idempotent. The test was created in for issue which was using Table.addSearchIndex(). RealmObjectSchema.addIndex() will just throw when called twice, it is guaranteed by test addIndexFieldModifier_alreadyIndexedThrows. The test can accidentally pass is just because of default-before-migration.realm was created before 0.82 when the primary key was not auto-indexed yet./Converting nullable PK fields with null values (#4798) RealmObjectSchema.setRequired() will throw if the PK field has null values stored. Call set_xxx_unique when converting nullability on a PK field. Remove useless check in the proxy generator which caused inconsistency exception. Add relevant test cases./Fix test case with missing linking object schema Those tests pass with current schema implementation since currently it will create extra object schemas which are not in the module. This behaviour is not right and will fail those tests in the future schema refactor. So always define all the needed object schemas in the module./"
,,0.1566,realm-java,Add RealmObject.getRealm() and DynamicRealmObject.getDynamicRealm(). (#4778) * Add RealmObject.getConfiguration(RealmModel) (#4720). * revert a change in Realm.java * check exception message * Now RealmObject.getConfiguration(RealmModel) returns null if the model is unmanaged * add RealmObject.getConfiguration() * implement RealmObject#getRealm() and DynamicRealmObject#getDynamicRealm() * fix markup * remove empty tests * fix tests/Fix ErrorProne warnings/fix ambiguous method calls warned by Java 8 compiler (#4647) * fix ambiguous method calls warned by Java 8 compiler * fix more/Merge pull request from realm/merge-8d3e17-to-master Fix merge from 8d3e17 to master/Make the proxy toString methods reveal themselves (#4623) * Make the proxy toString methods reveal themselves * Fix preprocessor UTs * Address PR comments/
,,0.3497,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.4092,realm-java,Backlink queries (#4704) * Fixing unit tests for backlink queries. * Reintroducing of a native implementation of isNotEmpty(). * Moving inverse relationships out of beta stage./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3523,realm-java,Fix ErrorProne warnings/fix ambiguous method calls warned by Java 8 compiler (#4647) * fix ambiguous method calls warned by Java 8 compiler * fix more/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3757,realm-java,"More minor fixes to pave the way for fixing UTs/Verify schema for backlinks by OS Add computed properties in the proxys expected schema info, so the schema validation in Object Store will check for linking objects. Throw IllegalStateException if the backlink schema validation fails. ISE is more suitable here since backlink does not exist in the schema. Normally the way to handle this issue is not by adding a migration block, instead, just changing the declaration in the model class. Rewrite and enable the tests which are related to the linking objects schema validation by mocking the expected schema info./PR fix/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.3107,realm-java,"Fix flaky emptyChangeSet_findAllAsync (#4913) There is no guarantee that async query will be finished later after the transaction. So the original assertEquals(9, collection.size()) might not be true always. Just remove the object deletion logic since it has nothing to do with the test purpose./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.408,realm-java,Backlink queries (#4704) * Fixing unit tests for backlink queries. * Reintroducing of a native implementation of isNotEmpty(). * Moving inverse relationships out of beta stage./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.4033,realm-java,"Merge pull request from realm/merge-7fbccc-to-master-4.0 Fix merge from 7fbccc to master-4.0/Fix class name length check (#5019) * fix class name length check * fix the value of TABLE_NAME_MAX_LENGTH * fix failed tests * fix failed tests * fix failed tests/Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./Converting nullable PK fields with null values (#4798) RealmObjectSchema.setRequired() will throw if the PK field has null values stored. Call set_xxx_unique when converting nullability on a PK field. Remove useless check in the proxy generator which caused inconsistency exception. Add relevant test cases./Merge pull request from realm/merge-411cba-to-master Fix merge from 411cba to master/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.3526,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.2467,realm-java,"copyToRealmOrUpdate cause dup values in list field (#5023) Close We are using HashMap to maintain a cache of added managed RealmObject when doing copyOrUpdate. But if the given object graph contains objects which have same PK but are different java object, cache missing will happen. That caused the object got set multiple times. For non-list fields, it is not a problem since it will eventually has the expected value if users objects graph is consistent. For list, that results the elements in the list are added multiple times since we dont clear the RealmList in copy()./Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./Link to debug core lib for debug build (#4221) Ideally we should run CI testing with debug enabled for core. But because of the assertions slow down the testing too much (1 hour for one flavour testing), we just add a opt-out gradle option to enable it when needed. So CI would just have the same speed as before by linking with release core. But I suggest we enable it on our develop env all the time. Since a lot of issues will just assert earlier and all the debug symbols in core make debugging much easier for daily life. just add below to your ~/.gradle/gradle.properties enableDebugCore=true/Fix tests: Thread#run Thread#start (#4929)/Add CompactOnLaunch. (#4857) * Implement CompactOnLaunch. This commit adds RealmConfiguration.compactOnLaunch and RealmConfiguration.Builder.compactOnLaunch(CompactOnLaunchCallback). It makes a Realm determines if it should be compacted. * Throw an exception if it is read-only Realm. * Add readOnly_compactOnLaunch_throws * Fix a wrong signature. * Add tests to check compactOnLaunch. * Fix tests. * Add Javadoc. * Updated CHANGELOG>md * Fix a typo * PR feedback. * PR feedback: Improve tests. * PR feedback. * Improve Javadocs sentences. * Support Proguard. * Rename more accurate. * PR feedback. * Fix Proguard. * Fix JNI code. * PR feedback: Remove 2 createConfiguration. * PR feedback * Add RealmConfiguration.Builder.compactOnLaunch(). * Fix a bug of JNI code. * Add more tests. * Improve Javadoc. * PR feedback: Add a test to check a bug. * add a test to check a bug where compactOnLaunch is called each time a Realm is opened on a new thread. * PR feedback * Imporve Javadoc. * Fix a test (Thread). * PR: fix a test./Fix ErrorProne warnings/Helper class for throwing java exception from JNI (#4636)/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.3277,realm-java,"Update sync 2.0.0-rc12 (#4928) There are some breaking changes from sync/core in this release: Object ID column name has been renamed from __OID to OID Instead of hardcoding it in java, we read it from sync if it is built with sync. Otherwise hardcode it in JNI. Since core started using cmake, the openssl objects are not a part of core release anymore. Instead, it will be released to s3 independently. Update ROS to 2.0.0-rc2-285/Merge pull request from realm/merge-4b67e1-to-master-4.0 Fix merge from 4b67e1 to master-4.0/4788 is not fixed on master 4.0/Upgrade Realm Core to 2.8.6 (#4934) Upgrade Realm Core to 2.8.6, sync to 1.10.5. Add test case to Expose bug when querying an indexed field with Case.INSENSITIVE. Adapt DescriptorOdering changes from Object Store. See Update Object Store to 7c12b340e0/Backlink queries (#4704) * Fixing unit tests for backlink queries. * Reintroducing of a native implementation of isNotEmpty(). * Moving inverse relationships out of beta stage./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.0833,realm-java,Add RealmObject.getRealm() and DynamicRealmObject.getDynamicRealm(). (#4778) * Add RealmObject.getConfiguration(RealmModel) (#4720). * revert a change in Realm.java * check exception message * Now RealmObject.getConfiguration(RealmModel) returns null if the model is unmanaged * add RealmObject.getConfiguration() * implement RealmObject#getRealm() and DynamicRealmObject#getDynamicRealm() * fix markup * remove empty tests * fix tests/
,,0.1103,realm-java,Fix test case with missing linking object schema Those tests pass with current schema implementation since currently it will create extra object schemas which are not in the module. This behaviour is not right and will fail those tests in the future schema refactor. So always define all the needed object schemas in the module./
,,0.3469,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.1056,realm-java,Fix test case with missing linking object schema Those tests pass with current schema implementation since currently it will create extra object schemas which are not in the module. This behaviour is not right and will fail those tests in the future schema refactor. So always define all the needed object schemas in the module./
,,0.3483,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3077,realm-java,"Fix multi-processes tests When running remote service test, the remote service is killed in after function. It is too early when running it together with looper thread test./Fix ErrorProne warnings/Fix logging for RunTestInLooperThreadTests integration tests. (#4780) Fix logging for RunTestInLooperThreadTests integration tests./Fix admin users not connection correctly to ROS (#4760)/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.1889,realm-java,"Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/fix failing tests/fix failing test/fix failing tests/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./"
,,0.358,realm-java,Add SyncUser.allSessions() (#5047) * Add SyncUser.allSessions. * Update CHANGELOG.md * Update SyncUser.allSessions test. * PR feedback * Fix allSessions to exclude sessions in error state. * PR feedback * Update CHANGELOG.md/fixes (#4862) * fixes queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3355,realm-java,fixes (#4862) * fixes queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.1644,realm-java,"Cherry pick OS fix (#5030) Update object store to 4b12f29145. Prepare for beta2 snapshot release./Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./fixes (#4862) * fixes pull request from realm/merge-5ab06b-to-master Fix merge from 5ab06b to master/"
,,0.1176,realm-java,Add SyncUser.allSessions() (#5047) * Add SyncUser.allSessions. * Update CHANGELOG.md * Update SyncUser.allSessions test. * PR feedback * Fix allSessions to exclude sessions in error state. * PR feedback * Update CHANGELOG.md/Merge pull request from realm/merge-f2144d-to-master-4.0 Fix merge from f2144d to master-4.0/fixes (#5000) * fixes (#4862) * fixes
,,0.3483,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3584,realm-java,"Split createTable & getTable (#4689) To support Stable IDs, the primary key has to be created while the table is created. This will require a new internal API createTableWithPK in the future. The previous getTable behaviour would be quite confusing to support that. getTable will only return the table if it exists. createTable is the one to be used to create tables. Add JavaExceptionDef to have all common Java exception names in a single place. Remove useless tests./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.3511,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3483,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.4223,realm-java,"Fix a bug that RealmSchema.remove() and RealmSchema.rename() dont update internal cache (#5037) * fix a bug that RealmSchema.remove() and RealmSchema.rename() dont update internal cache * remove tests for removed or renamed class. Ill add those tests again in another PR * remove tests for removed or renamed class. Ill add those tests again in another PR * check RealmObjectSchema is valid before obtaining target class name * add target class name check * fix class name check * make dynamicClassToSchema private/fix internal method name (#5016)/Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./add Nullable annotation to methods that can return null (#4999) * add Nullable annotation to methods that can return null * add changelog entry for introfucinf annotation. * fix Kotlin example * fix Kotlin test/Merge pull request from realm/merge-6a01b2-to-master Fix merge from 6a01b2 to master/Fix queries not working on proguarded Realms model classes (#4690)/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.3454,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.2773,realm-java,"Work around jmethod bug with Android cherry-pick to enabled debug in menifest which caused a crash described in Removed API to create JavaMethod from jobject/class name string. There seems to be a bug in Android JVM when getting the method by: jclass cls env->GetObjectClass(obj); jmethodID method env->GetMethodID(cls, ""xxx"", ""xxx"") The methodID retrieved by the above way triggers a strange bug in JVM, it reports the method cannot be found on a non-relevant object. Like: "" cant call boolean io.realm.DefaultCompactOnLaunchCallback.shouldCompact(long, long) on instance of io.realm.RealmTests$6 "" Where RealmTest$6 has nothing to do with that JNI call. It is not because of the local ref of cls has been deleted Even if it is deleted, the methodID should still be valid according to the doc: The class references, field IDs, and method IDs are guaranteed valid until the class is unloaded. Classes are only unloaded if all classes associated with a ClassLoader can be garbage collected, which is rare but will not be impossible in Android. The class should never be unload in this case For safety reasons, the JavaMethod should only be created from a JavaClass right now to avoid future surprise. Close pull request from realm/merge-4b67e1-to-master-4.0 Fix merge from 4b67e1 to master-4.0/Upgrade Realm Core to 2.8.6 (#4934) Upgrade Realm Core to 2.8.6, sync to 1.10.5. Add test case to Expose bug when querying an indexed field with Case.INSENSITIVE. Adapt DescriptorOdering changes from Object Store. See Update Object Store to 7c12b340e0/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.3469,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.4076,realm-java,add Nullable annotation to methods that can return null (#4999) * add Nullable annotation to methods that can return null * add changelog entry for introfucinf annotation. * fix Kotlin example * fix Kotlin test/Merge pull request from realm/merge-6a01b2-to-master Fix merge from 6a01b2 to master/Fix queries not working on proguarded Realms model classes (#4690)/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.0702,realm-java,Remove io.realm.internal.OutOfMemoryError/Fix ErrorProne warnings/
,,0.1199,realm-java,add Nullable annotation to methods that can return null (#4999) * add Nullable annotation to methods that can return null * add changelog entry for introfucinf annotation. * fix Kotlin example * fix Kotlin test/
,,0.3511,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3469,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3469,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.0833,realm-java,Add RealmObject.getRealm() and DynamicRealmObject.getDynamicRealm(). (#4778) * Add RealmObject.getConfiguration(RealmModel) (#4720). * revert a change in Realm.java * check exception message * Now RealmObject.getConfiguration(RealmModel) returns null if the model is unmanaged * add RealmObject.getConfiguration() * implement RealmObject#getRealm() and DynamicRealmObject#getDynamicRealm() * fix markup * remove empty tests * fix tests/
,,0.3824,realm-java,"Fix a bug that RealmSchema.remove() and RealmSchema.rename() dont update internal cache (#5037) * fix a bug that RealmSchema.remove() and RealmSchema.rename() dont update internal cache * remove tests for removed or renamed class. Ill add those tests again in another PR * remove tests for removed or renamed class. Ill add those tests again in another PR * check RealmObjectSchema is valid before obtaining target class name * add target class name check * fix class name check * make dynamicClassToSchema private/Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./add Nullable annotation to methods that can return null (#4999) * add Nullable annotation to methods that can return null * add changelog entry for introfucinf annotation. * fix Kotlin example * fix Kotlin test/Nh/android support ssl (#4591) * Expose two new SyncConfiguration options to 1: Disable TLS verification. 2: provide the trusted root CA to validate the RealmObjectServer TLS connection (since OpenSSL doesnt have access to Android keystore) fixes queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.1218,realm-java,add Nullable annotation to methods that can return null (#4999) * add Nullable annotation to methods that can return null * add changelog entry for introfucinf annotation. * fix Kotlin example * fix Kotlin test/
,,0.3273,realm-java,"Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./Update sync 2.0.0-rc12 (#4928) There are some breaking changes from sync/core in this release: Object ID column name has been renamed from __OID to OID Instead of hardcoding it in java, we read it from sync if it is built with sync. Otherwise hardcode it in JNI. Since core started using cmake, the openssl objects are not a part of core release anymore. Instead, it will be released to s3 independently. Update ROS to 2.0.0-rc2-285/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.379,realm-java,add Nullable annotation to methods that can return null (#4999) * add Nullable annotation to methods that can return null * add changelog entry for introfucinf annotation. * fix Kotlin example * fix Kotlin test/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.4003,realm-java,"Merge pull request from realm/merge-407e6a-to-master-4.0 Fix merge from 407e6a to master-4.0/Merge pull request from realm/merge-e1d802-to-master Fix merge from e1d802 to master/Immutable RealmSchema and RealmObjectSchema (#5003) Before this change, Realm.getSchema() and DynamicRealm.getSchema() both return a mutable version RealmSchema object. That would cause issue when changing the typed Realms schema then continue to use typed inferface to access the Realm where the column indices might be changed already and had not been refreshed before the transaction commited. After this change: Realm.getSchema() returns an immutable RealmSchema object. And all RealmObjectSchema objects retrieved from that will be immutable as well./Merge pull request from realm/merge-ea02c9-to-master Fix merge from ea02c9 to master/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/"
,,0.3974,realm-java,add Nullable annotation to methods that can return null (#4999) * add Nullable annotation to methods that can return null * add changelog entry for introfucinf annotation. * fix Kotlin example * fix Kotlin test/Add RealmObject.getRealm() and DynamicRealmObject.getDynamicRealm(). (#4778) * Add RealmObject.getConfiguration(RealmModel) (#4720). * revert a change in Realm.java * check exception message * Now RealmObject.getConfiguration(RealmModel) returns null if the model is unmanaged * add RealmObject.getConfiguration() * implement RealmObject#getRealm() and DynamicRealmObject#getDynamicRealm() * fix markup * remove empty tests * fix tests/Merge pull request from realm/merge-8d3e17-to-master Fix merge from 8d3e17 to master/Make the proxy toString methods reveal themselves (#4623) * Make the proxy toString methods reveal themselves * Fix preprocessor UTs * Address PR comments/LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.3483,realm-java,LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.1168,realm-java,Merge pull request from realm/merge-ea02c9-to-master Fix merge from ea02c9 to master/Converting nullable PK fields with null values (#4798) RealmObjectSchema.setRequired() will throw if the PK field has null values stored. Call set_xxx_unique when converting nullability on a PK field. Remove useless check in the proxy generator which caused inconsistency exception. Add relevant test cases./Merge pull request from realm/merge-411cba-to-master Fix merge from 411cba to master/
,,0.4092,realm-java,Backlink queries (#4704) * Fixing unit tests for backlink queries. * Reintroducing of a native implementation of isNotEmpty(). * Moving inverse relationships out of beta stage./LinkingObject queries (#4519) Refactor ColumnInfo and ColumnIndices for better control Refactor ColumnIndices to support new schema Refactor ColumnInfor to support new schema Refactor ProxyGeneration to support new Schema Refactor RealmQuery to support backlinked queries Code complete Static analysis tests passing Fix copy bug in ColumnIndices All non-backlink tests passing; All non-test FIXMEs gone Refactor all field parsing into the FieldDescriptor class Fix threading bugs in RunInLooperThread rule Standardize test timeouts Native isEmpty and isNotEmpty need to be taught about backlinks I believe all remaining work is C/C++ Disable Backlink Queries Respond to comments Revert createDynamicBacklinkResults signature Remove single leading space on line 1206 ins RealmQueryTests.java/
,,0.0673,realm-java,Remove io.realm.internal.OutOfMemoryError/
,,0.1238,realm-java,Merge pull request from realm/merge-5ce56d-to-master Fix merge from 5ce56d to master/Merge pull request from realm/gbm/preening More minor fixes to pave the way for fixing UTs/
,,0.2648,realm-java,"Merge pull request from realm/merge-daac89-to-master Fix merge from daac89 to master/Add realm.ignoreKotlinNullability To disable treating kotlin non-null types as From v3.6.0, all the kotlin RealmModels non-null field will be set as required in the schema. However it is a breaking change for the kotlin project which has a Realm file created before 3.6.0. To disable this behaviour introduced in 3.6.0, add below things to the projects build.gradle: kapt { arguments { arg(""realm.ignoreKotlinNullability"", true) } } Close pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to as alias for (#5161) This PR adds support for org.jetbrains.annotations.NotNull as an alias for This means that Realm now understands the Kotlin type-system in the Realm schema. Previously we reported an error if you did RealmList<MyType> list new RealmList<>();. It is a bit unclear why, since a RealmList is always non-null on managed objects. Since it made the interop with Kotlin kinda strange, I made a change so you can now do RealmList<MyType> list new RealmLis<>() as well as val list : RealmList<MyType> RealmList(); After this change it is no longer possible to do val person : Person either, you have to do val person : Person?. This reflects the constraints of Realm, but if people are able to maintain the variant themselves (hint: not possible when using sync), then they can use a custom non-null getter./"
,,0.1269,realm-java,Fix some performance issues when initializing the Schema (#5404)/Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Merge pull request from realm/merge-5ce56d-to-master Fix merge from 5ce56d to master/Merge pull request from realm/gbm/preening More minor fixes to pave the way for fixing UTs/
,,0.1032,realm-java,Update to latest OS (#5166) * Fixing compile issue with OS * Fix build issues with new Results API Remove indexOf(targetRowIndex) Results::index_of takes a RowExpr now/
,,0.2831,realm-java,"Fix a bug that RealmList.delete*() does not delete target objects (#5234) * added test cases exposing * make RealmList.delete*() delete target objects. This commit requires to applky following patch to Object Store. diff a/src/list.cpp b/src/list.cpp index 1734cfa..d8aa1e2 100644 a/src/list.cpp +++ b/src/list.cpp +349,16 void List::swap(size_t ndx1, size_t ndx2) m_table->swap_rows(ndx1, ndx2); } +void List::delete_(size_t row_ndx) +{ + verify_in_transaction(); + verify_valid_row(row_ndx); + if (m_link_view) + m_link_view->remove_target_row(row_ndx); + else + m_table->remove(row_ndx); +} + void List::delete_all() { verify_in_transaction(); diff a/src/list.hpp b/src/list.hpp index a3b52af..db4e8d4 100644 a/src/list.hpp +++ b/src/list.hpp +77,7 public: void remove(size_t list_ndx); void remove_all(); void swap(size_t ndx1, size_t ndx2); + void delete_(size_t list_ndx); void delete_all(); template<typename T RowExpr> * Fixed a bug that RealmList.deleteFromRealm(int), RealmList.deleteFirstFromRealm() and RealmList.deleteLastFromRealm() did not remove target objects from Realm. This bug was introduced in 3.7.1 (#5233). * Fix tests/"
,,0.2973,realm-java,"Fix a bug that RealmList.delete*() does not delete target objects (#5234) * added test cases exposing * make RealmList.delete*() delete target objects. This commit requires to applky following patch to Object Store. diff a/src/list.cpp b/src/list.cpp index 1734cfa..d8aa1e2 100644 a/src/list.cpp +++ b/src/list.cpp +349,16 void List::swap(size_t ndx1, size_t ndx2) m_table->swap_rows(ndx1, ndx2); } +void List::delete_(size_t row_ndx) +{ + verify_in_transaction(); + verify_valid_row(row_ndx); + if (m_link_view) + m_link_view->remove_target_row(row_ndx); + else + m_table->remove(row_ndx); +} + void List::delete_all() { verify_in_transaction(); diff a/src/list.hpp b/src/list.hpp index a3b52af..db4e8d4 100644 a/src/list.hpp +++ b/src/list.hpp +77,7 public: void remove(size_t list_ndx); void remove_all(); void swap(size_t ndx1, size_t ndx2); + void delete_(size_t list_ndx); void delete_all(); template<typename T RowExpr> * Fixed a bug that RealmList.deleteFromRealm(int), RealmList.deleteFirstFromRealm() and RealmList.deleteLastFromRealm() did not remove target objects from Realm. This bug was introduced in 3.7.1 (#5233). * Fix tests/"
,,0.3056,realm-java,"Fix a bug that RealmList.delete*() does not delete target objects (#5234) * added test cases exposing * make RealmList.delete*() delete target objects. This commit requires to applky following patch to Object Store. diff a/src/list.cpp b/src/list.cpp index 1734cfa..d8aa1e2 100644 a/src/list.cpp +++ b/src/list.cpp +349,16 void List::swap(size_t ndx1, size_t ndx2) m_table->swap_rows(ndx1, ndx2); } +void List::delete_(size_t row_ndx) +{ + verify_in_transaction(); + verify_valid_row(row_ndx); + if (m_link_view) + m_link_view->remove_target_row(row_ndx); + else + m_table->remove(row_ndx); +} + void List::delete_all() { verify_in_transaction(); diff a/src/list.hpp b/src/list.hpp index a3b52af..db4e8d4 100644 a/src/list.hpp +++ b/src/list.hpp +77,7 public: void remove(size_t list_ndx); void remove_all(); void swap(size_t ndx1, size_t ndx2); + void delete_(size_t list_ndx); void delete_all(); template<typename T RowExpr> * Fixed a bug that RealmList.deleteFromRealm(int), RealmList.deleteFirstFromRealm() and RealmList.deleteLastFromRealm() did not remove target objects from Realm. This bug was introduced in 3.7.1 (#5233). * Fix tests/"
,,0.3077,realm-java,"Fix a bug that RealmList.delete*() does not delete target objects (#5234) * added test cases exposing * make RealmList.delete*() delete target objects. This commit requires to applky following patch to Object Store. diff a/src/list.cpp b/src/list.cpp index 1734cfa..d8aa1e2 100644 a/src/list.cpp +++ b/src/list.cpp +349,16 void List::swap(size_t ndx1, size_t ndx2) m_table->swap_rows(ndx1, ndx2); } +void List::delete_(size_t row_ndx) +{ + verify_in_transaction(); + verify_valid_row(row_ndx); + if (m_link_view) + m_link_view->remove_target_row(row_ndx); + else + m_table->remove(row_ndx); +} + void List::delete_all() { verify_in_transaction(); diff a/src/list.hpp b/src/list.hpp index a3b52af..db4e8d4 100644 a/src/list.hpp +++ b/src/list.hpp +77,7 public: void remove(size_t list_ndx); void remove_all(); void swap(size_t ndx1, size_t ndx2); + void delete_(size_t list_ndx); void delete_all(); template<typename T RowExpr> * Fixed a bug that RealmList.deleteFromRealm(int), RealmList.deleteFirstFromRealm() and RealmList.deleteLastFromRealm() did not remove target objects from Realm. This bug was introduced in 3.7.1 (#5233). * Fix tests/Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./"
,,0.0926,realm-java,Enable SSL integration tests (#5430) Some features were missing which caused ssl tests failures. See Linking with pre-build openssl 1.0.2k-1. Use a new Realm instead of using deleteRealm()/Merge pull request from realm/merge-c9206c-to-master-4.0 Fix merge from c9206c to master-4.0/
,,0.2674,realm-java,"Removed annotation since its not available until API 19 (#5469) * removed annotation since its not available until API 19, fixes a bug that RealmList.delete*() does not delete target objects (#5234) * added test cases exposing * make RealmList.delete*() delete target objects. This commit requires to applky following patch to Object Store. diff a/src/list.cpp b/src/list.cpp index 1734cfa..d8aa1e2 100644 a/src/list.cpp +++ b/src/list.cpp +349,16 void List::swap(size_t ndx1, size_t ndx2) m_table->swap_rows(ndx1, ndx2); } +void List::delete_(size_t row_ndx) +{ + verify_in_transaction(); + verify_valid_row(row_ndx); + if (m_link_view) + m_link_view->remove_target_row(row_ndx); + else + m_table->remove(row_ndx); +} + void List::delete_all() { verify_in_transaction(); diff a/src/list.hpp b/src/list.hpp index a3b52af..db4e8d4 100644 a/src/list.hpp +++ b/src/list.hpp +77,7 public: void remove(size_t list_ndx); void remove_all(); void swap(size_t ndx1, size_t ndx2); + void delete_(size_t list_ndx); void delete_all(); template<typename T RowExpr> * Fixed a bug that RealmList.deleteFromRealm(int), RealmList.deleteFirstFromRealm() and RealmList.deleteLastFromRealm() did not remove target objects from Realm. This bug was introduced in 3.7.1 (#5233). * Fix tests/Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/"
,,0.4301,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.4142,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.4241,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.4106,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/Revert broken unit test/Ensure stable classes order in generated mediators (#5567) Fixes"
,,0.4201,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.4112,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.4282,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/Ensure stable classes order in generated mediators (#5567) Fixes"
,,0.4191,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.435,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.4291,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.4152,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.4152,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.0957,realm-java,Merge pull request from realm/vivekkiran/5472 Fix and merge errorprone issues/
,,0.0895,realm-java,Merge pull request from realm/vivekkiran/5472 Fix and merge errorprone issues/
,,0.0998,realm-java,Merge pull request from realm/vivekkiran/5472 Fix and merge errorprone issues/
,,0.0936,realm-java,Merge pull request from realm/vivekkiran/5472 Fix and merge errorprone issues/
,,0.073,realm-java,Merge pull request from realm/vivekkiran/5472 Fix and merge listIterator_add test/Fix errorprone issues/
,,0.0957,realm-java,Merge pull request from realm/vivekkiran/5472 Fix and merge errorprone issues/
,,0.11599999999999999,realm-java,Better exception message for addField() (#5610) * Better exception message for addField() Close
,,0.1054,realm-java,Life cycle of temp OsSharedRealm in callbacks (#5576) Every temp OsSharedRealm created during construction for the callbacks have to be closed before the exception throws to users. close pull request from realm/vivekkiran/5472 Fix and merge errorprone issues/
,,0.0936,realm-java,Merge pull request from realm/vivekkiran/5472 Fix and merge errorprone issues/
,,0.0957,realm-java,Merge pull request from realm/vivekkiran/5472 Fix and merge errorprone issues/
,,0.0977,realm-java,Merge pull request from realm/vivekkiran/5472 Fix and merge errorprone issues/
,,0.0599,realm-java,Merge pull request from realm/merge-1cf419-to-next-major Fix merge from 1cf419 to next-major/
,,0.4311,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.4211,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.4152,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.4261,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.4152,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.4291,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.0957,realm-java,Merge pull request from realm/vivekkiran/5472 Fix and merge errorprone issues/
,,0.4301,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/"
,,0.4653,realm-java,"Merge pull request from realm/merge-f089a8-to-next-major Fix merge from f089a8 to next-major/Support for overriding internal names using annotations (#5280) * Add support for which makes it possible to override the name of classes and fields. * Remove RealmName annotation. Add methods for specifying names to RealmModule, RealmClass and a new RealmField annotation. * Fix compile issues * Fix Javadoc and most unit tests. * Add test for conflicting modules * Begun work on checking conflicting policies * Fix merge * Use correct version of Object Store * Better docs * Backup * Processor tests are green * Fleshing out unit tests for using name policies in annotations * Cleanup * Fix required value lists + cleanup * Fix module defaults not being correctly applied * Add support and unit tests for field name overrides * Add changelog * Javadoc updates * Use custom built parser for converting variable names * Better Javadoc * RealmField is now retained at Runtime * Fix unit tests * Unify build tools * Cleanup * Remove FIXMEs * Fix tests after merge from master * PR feedback * More PR feedback * PR feedback * More PR feedback * Output correctly internal name * Fix library module mediators not being correctly created * Fix missing spaces in error message * Better example * Improve wording/Better exception message for addField() (#5610) * Better exception message for addField() Close"
,,0.0763,realm-java,Fix nullpointer when using RealmTransformer (#6087)/Fix dependencies being changed too late. (#6088)/Merge pull request from realm/merge-aa6ebc-to-master Fix merge from aa6ebc to master/Fix extension check/
,,0.0599,realm-java,fixes (#6010) * Fixes Realm.deleteAll() and Realm.isEmpty() (#6024)/
,,0.0577,realm-java,Fix base unit tests (#6162)/
,,0.0798,realm-java,Fix initial listener not triggering for query-based listeners (#6236)/
,,0.2466,rocksdb,"Make arena block size configurable Summary: Add an option for arena block size, default value 4096 bytes. Arena will allocate blocks with such size. I am not sure about passing parameter to skiplist in the new virtualized framework, though I talked to Jim a bit. So add Jim as reviewer. Test Plan: new unit test, I am running db_test. For passing paramter from configured option to Arena, I tried tests like: TEST(DBTest, Arena_Option) { std::string dbname test::TmpDir() + ""/db_arena_option_test""; DestroyDB(dbname, Options()); DB* db nullptr; Options opts; opts.create_if_missing true; opts.arena_block_size 1000000; // tested 99, 999999 Status s DB::Open(opts, dbname, &db); db->Put(WriteOptions(), ""a"", ""123""); } and printed some debug info. The results look good. Any suggestion for such a unit-test? Reviewers: haobo, dhruba, emayanke, jpaton Reviewed By: dhruba CC: leveldb, zshao Differential Revision:"
,,0.4833,rocksdb,"[RocksDB] [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.1804,rocksdb,"Expand KeyMayExist to return the proper value if it can be found in memory and also check block_cache Summary: Removed KeyMayExistImpl because KeyMayExist demanded Get like semantics now. Removed no_io from memtable and imm because we need the proper value now and shouldnt just stop when we see Merge in memtable. Added checks to block_cache. Updated documentation and unit-test Test Plan: make all check;db_stress for 1 hour Reviewers: dhruba, haobo Reviewed By: dhruba CC: leveldb Differential Revision:"
,,0.1442,rocksdb,"Implement log blobs Summary: This patch adds the ability for the user to add sequences of arbitrary data (blobs) to write batches. These blobs are saved to the log along with everything else in the write batch. You can add multiple blobs per WriteBatch and the ordering of blobs, puts, merges, and deletes are preserved. Blobs are not saves to SST files. RocksDB ignores blobs in every way except for writing them to the log. Before committing this patch, I need to add some test code. But Im submitting it now so people can comment on the API. Test Plan: make check Reviewers: dhruba, haobo, vamsi Reviewed By: dhruba CC: leveldb Differential Revision:"
,,0.2282,rocksdb,"Counter for merge failure Summary: With Merge returning bool, it can keep failing silently(eg. While faling to fetch timestamp in TTL). We need to detect this through a rocksdb counter which can get bumped whenever Merge returns false. This will also be super-useful for the mcrocksdb-counter service where Merge may fail. Added a counter NUMBER_MERGE_FAILURES and appropriately updated db/merge_helper.cc I felt that it would be better to directly add counter-bumping in Merge as a default function of MergeOperator class but user should not be aware of this, so this approach seems better to me. Test Plan: make all check Reviewers: dnicholas, haobo, dhruba, vamsi CC: leveldb Differential Revision: fix wrong assert Summary: the assert was wrong in D11145. Broke build Test Plan: make db_bench run it Reviewers: dhruba, haobo, emayanke Reviewed By: dhruba CC: leveldb Differential Revision: Measure all FSYNC/SYNC times Summary: Add stop watches around all sync calls. Test Plan: db_bench check if respective histograms are printed Reviewers: haobo, dhruba Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.3798,rocksdb,"Counter for merge failure Summary: With Merge returning bool, it can keep failing silently(eg. While faling to fetch timestamp in TTL). We need to detect this through a rocksdb counter which can get bumped whenever Merge returns false. This will also be super-useful for the mcrocksdb-counter service where Merge may fail. Added a counter NUMBER_MERGE_FAILURES and appropriately updated db/merge_helper.cc I felt that it would be better to directly add counter-bumping in Merge as a default function of MergeOperator class but user should not be aware of this, so this approach seems better to me. Test Plan: make all check Reviewers: dnicholas, haobo, dhruba, vamsi CC: leveldb Differential Revision: change to fix build/[RocksDB] [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision: build Summary: remove reference Test Plan: make OPT=-g Reviewers: CC: Task ID: Blame Rev:/Expand KeyMayExist to return the proper value if it can be found in memory and also check block_cache Summary: Removed KeyMayExistImpl because KeyMayExist demanded Get like semantics now. Removed no_io from memtable and imm because we need the proper value now and shouldnt just stop when we see Merge in memtable. Added checks to block_cache. Updated documentation and unit-test Test Plan: make all check;db_stress for 1 hour Reviewers: dhruba, haobo Reviewed By: dhruba CC: leveldb Differential Revision: timeranged scan, timeranged dump in ldb. Also the ability to count in time-batches during Dump Summary: Scan and Dump commands in ldb use iterator. We need to also print timestamp for ttl databases for debugging. For this I create a TtlIterator class pointer in these functions and assign it the value of Iterator pointer which actually points to t TtlIterator object, and access the new function ValueWithTS which can return TS also. Buckets feature for dump command: gives a count of different key-values in the specified time-range distributed across the time-range partitioned according to bucket-size. start_time and end_time are specified in unixtimestamp and bucket in seconds on the user-commandline Have commented out 3 ines from ldb_test.py so that the test does not break right now. It breaks because timestamp is also printed now and I have to look at wildcards in python to compare properly. Test Plan: python tools/ldb_test.py Reviewers: vamsi, dhruba, haobo, sheki Reviewed By: vamsi CC: leveldb Differential Revision:"
,,0.4826,rocksdb,"[RocksDB] [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.4717,rocksdb,"[RocksDB] [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.4244,rocksdb,"[RocksDB] [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision: stringappend_test back into the unit tests. Summary: With the Makefile now updated to correctly update all .o files, this should fix the issues recompiling stringappend_test. This should also fix the ""segmentation-fault"" that we were getting earlier. Now, stringappend_test should be clean, and I have added it back to the unit-tests. Also made some minor updates to the tests themselves. Test Plan: 1. make clean; make stringappend_test 32 (will test it by itself) 2. make clean; make all check 32 (to run all unit tests) 3. make clean; make release (test in release mode) 4. valgrind ./stringappend_test (valgrind tests) Reviewers: haobo, jpaton, dhruba Reviewed By: haobo CC: leveldb Differential Revision: valgrind errors/[RockdDB] fix build Summary: assert ASSERT_TRUE Test Plan: make release; make check Reviewers: dhruba CC: leveldb Differential Revision:"
,,0.1437,rocksdb,"Prefix filters for scans (v4) Summary: Similar to v2 (db and table code understands prefixes), but use ReadOptions as in v3. Also, make the CreateFilter code faster and cleaner. Test Plan: make db_test; export LEVELDB_TESTS=PrefixScan; ./db_test Reviewers: dhruba Reviewed By: dhruba CC: haobo, emayanke Differential Revision:"
,,0.1437,rocksdb,"Prefix filters for scans (v4) Summary: Similar to v2 (db and table code understands prefixes), but use ReadOptions as in v3. Also, make the CreateFilter code faster and cleaner. Test Plan: make db_test; export LEVELDB_TESTS=PrefixScan; ./db_test Reviewers: dhruba Reviewed By: dhruba CC: haobo, emayanke Differential Revision:"
,,0.2279,rocksdb,"Prefix filters for scans (v4) Summary: Similar to v2 (db and table code understands prefixes), but use ReadOptions as in v3. Also, make the CreateFilter code faster and cleaner. Test Plan: make db_test; export LEVELDB_TESTS=PrefixScan; ./db_test Reviewers: dhruba Reviewed By: dhruba CC: haobo, emayanke Differential Revision: KeyMayExist to return the proper value if it can be found in memory and also check block_cache Summary: Removed KeyMayExistImpl because KeyMayExist demanded Get like semantics now. Removed no_io from memtable and imm because we need the proper value now and shouldnt just stop when we see Merge in memtable. Added checks to block_cache. Updated documentation and unit-test Test Plan: make all check;db_stress for 1 hour Reviewers: dhruba, haobo Reviewed By: dhruba CC: leveldb Differential Revision:"
,,0.1367,rocksdb,"Prefix filters for scans (v4) Summary: Similar to v2 (db and table code understands prefixes), but use ReadOptions as in v3. Also, make the CreateFilter code faster and cleaner. Test Plan: make db_test; export LEVELDB_TESTS=PrefixScan; ./db_test Reviewers: dhruba Reviewed By: dhruba CC: haobo, emayanke Differential Revision:"
,,0.2432,rocksdb,"Make arena block size configurable Summary: Add an option for arena block size, default value 4096 bytes. Arena will allocate blocks with such size. I am not sure about passing parameter to skiplist in the new virtualized framework, though I talked to Jim a bit. So add Jim as reviewer. Test Plan: new unit test, I am running db_test. For passing paramter from configured option to Arena, I tried tests like: TEST(DBTest, Arena_Option) { std::string dbname test::TmpDir() + ""/db_arena_option_test""; DestroyDB(dbname, Options()); DB* db nullptr; Options opts; opts.create_if_missing true; opts.arena_block_size 1000000; // tested 99, 999999 Status s DB::Open(opts, dbname, &db); db->Put(WriteOptions(), ""a"", ""123""); } and printed some debug info. The results look good. Any suggestion for such a unit-test? Reviewers: haobo, dhruba, emayanke, jpaton Reviewed By: dhruba CC: leveldb, zshao Differential Revision:"
,,0.4936,rocksdb,"[RocksDB] [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision: KeyMayExist to return the proper value if it can be found in memory and also check block_cache Summary: Removed KeyMayExistImpl because KeyMayExist demanded Get like semantics now. Removed no_io from memtable and imm because we need the proper value now and shouldnt just stop when we see Merge in memtable. Added checks to block_cache. Updated documentation and unit-test Test Plan: make all check;db_stress for 1 hour Reviewers: dhruba, haobo Reviewed By: dhruba CC: leveldb Differential Revision: arena block size configurable Summary: Add an option for arena block size, default value 4096 bytes. Arena will allocate blocks with such size. I am not sure about passing parameter to skiplist in the new virtualized framework, though I talked to Jim a bit. So add Jim as reviewer. Test Plan: new unit test, I am running db_test. For passing paramter from configured option to Arena, I tried tests like: TEST(DBTest, Arena_Option) { std::string dbname test::TmpDir() + ""/db_arena_option_test""; DestroyDB(dbname, Options()); DB* db nullptr; Options opts; opts.create_if_missing true; opts.arena_block_size 1000000; // tested 99, 999999 Status s DB::Open(opts, dbname, &db); db->Put(WriteOptions(), ""a"", ""123""); } and printed some debug info. The results look good. Any suggestion for such a unit-test? Reviewers: haobo, dhruba, emayanke, jpaton Reviewed By: dhruba CC: leveldb, zshao Differential Revision:"
,,0.2292,rocksdb,"Implement log blobs Summary: This patch adds the ability for the user to add sequences of arbitrary data (blobs) to write batches. These blobs are saved to the log along with everything else in the write batch. You can add multiple blobs per WriteBatch and the ordering of blobs, puts, merges, and deletes are preserved. Blobs are not saves to SST files. RocksDB ignores blobs in every way except for writing them to the log. Before committing this patch, I need to add some test code. But Im submitting it now so people can comment on the API. Test Plan: make check Reviewers: dhruba, haobo, vamsi Reviewed By: dhruba CC: leveldb Differential Revision: KeyMayExist to return the proper value if it can be found in memory and also check block_cache Summary: Removed KeyMayExistImpl because KeyMayExist demanded Get like semantics now. Removed no_io from memtable and imm because we need the proper value now and shouldnt just stop when we see Merge in memtable. Added checks to block_cache. Updated documentation and unit-test Test Plan: make all check;db_stress for 1 hour Reviewers: dhruba, haobo Reviewed By: dhruba CC: leveldb Differential Revision:"
,,0.4702,rocksdb,"[RocksDB] [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision: Measure all FSYNC/SYNC times Summary: Add stop watches around all sync calls. Test Plan: db_bench check if respective histograms are printed Reviewers: haobo, dhruba Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.4775,rocksdb,"[RocksDB] [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.2341,rocksdb,"Make arena block size configurable Summary: Add an option for arena block size, default value 4096 bytes. Arena will allocate blocks with such size. I am not sure about passing parameter to skiplist in the new virtualized framework, though I talked to Jim a bit. So add Jim as reviewer. Test Plan: new unit test, I am running db_test. For passing paramter from configured option to Arena, I tried tests like: TEST(DBTest, Arena_Option) { std::string dbname test::TmpDir() + ""/db_arena_option_test""; DestroyDB(dbname, Options()); DB* db nullptr; Options opts; opts.create_if_missing true; opts.arena_block_size 1000000; // tested 99, 999999 Status s DB::Open(opts, dbname, &db); db->Put(WriteOptions(), ""a"", ""123""); } and printed some debug info. The results look good. Any suggestion for such a unit-test? Reviewers: haobo, dhruba, emayanke, jpaton Reviewed By: dhruba CC: leveldb, zshao Differential Revision:"
,,0.2331,rocksdb,"Make arena block size configurable Summary: Add an option for arena block size, default value 4096 bytes. Arena will allocate blocks with such size. I am not sure about passing parameter to skiplist in the new virtualized framework, though I talked to Jim a bit. So add Jim as reviewer. Test Plan: new unit test, I am running db_test. For passing paramter from configured option to Arena, I tried tests like: TEST(DBTest, Arena_Option) { std::string dbname test::TmpDir() + ""/db_arena_option_test""; DestroyDB(dbname, Options()); DB* db nullptr; Options opts; opts.create_if_missing true; opts.arena_block_size 1000000; // tested 99, 999999 Status s DB::Open(opts, dbname, &db); db->Put(WriteOptions(), ""a"", ""123""); } and printed some debug info. The results look good. Any suggestion for such a unit-test? Reviewers: haobo, dhruba, emayanke, jpaton Reviewed By: dhruba CC: leveldb, zshao Differential Revision: Fix CorruptionTest Summary: Overriding block_size_deviation to zero, so that CorruptionTest can pass. Test Plan: make check Reviewers: dhruba Reviewed By: dhruba Differential Revision:"
,,0.529,rocksdb,"Counter for merge failure Summary: With Merge returning bool, it can keep failing silently(eg. While faling to fetch timestamp in TTL). We need to detect this through a rocksdb counter which can get bumped whenever Merge returns false. This will also be super-useful for the mcrocksdb-counter service where Merge may fail. Added a counter NUMBER_MERGE_FAILURES and appropriately updated db/merge_helper.cc I felt that it would be better to directly add counter-bumping in Merge as a default function of MergeOperator class but user should not be aware of this, so this approach seems better to me. Test Plan: make all check Reviewers: dnicholas, haobo, dhruba, vamsi CC: leveldb Differential Revision: [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision: KeyMayExist to return the proper value if it can be found in memory and also check block_cache Summary: Removed KeyMayExistImpl because KeyMayExist demanded Get like semantics now. Removed no_io from memtable and imm because we need the proper value now and shouldnt just stop when we see Merge in memtable. Added checks to block_cache. Updated documentation and unit-test Test Plan: make all check;db_stress for 1 hour Reviewers: dhruba, haobo Reviewed By: dhruba CC: leveldb Differential Revision:"
,,0.5359,rocksdb,"Counter for merge failure Summary: With Merge returning bool, it can keep failing silently(eg. While faling to fetch timestamp in TTL). We need to detect this through a rocksdb counter which can get bumped whenever Merge returns false. This will also be super-useful for the mcrocksdb-counter service where Merge may fail. Added a counter NUMBER_MERGE_FAILURES and appropriately updated db/merge_helper.cc I felt that it would be better to directly add counter-bumping in Merge as a default function of MergeOperator class but user should not be aware of this, so this approach seems better to me. Test Plan: make all check Reviewers: dnicholas, haobo, dhruba, vamsi CC: leveldb Differential Revision: [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision: KeyMayExist to return the proper value if it can be found in memory and also check block_cache Summary: Removed KeyMayExistImpl because KeyMayExist demanded Get like semantics now. Removed no_io from memtable and imm because we need the proper value now and shouldnt just stop when we see Merge in memtable. Added checks to block_cache. Updated documentation and unit-test Test Plan: make all check;db_stress for 1 hour Reviewers: dhruba, haobo Reviewed By: dhruba CC: leveldb Differential Revision: arena block size configurable Summary: Add an option for arena block size, default value 4096 bytes. Arena will allocate blocks with such size. I am not sure about passing parameter to skiplist in the new virtualized framework, though I talked to Jim a bit. So add Jim as reviewer. Test Plan: new unit test, I am running db_test. For passing paramter from configured option to Arena, I tried tests like: TEST(DBTest, Arena_Option) { std::string dbname test::TmpDir() + ""/db_arena_option_test""; DestroyDB(dbname, Options()); DB* db nullptr; Options opts; opts.create_if_missing true; opts.arena_block_size 1000000; // tested 99, 999999 Status s DB::Open(opts, dbname, &db); db->Put(WriteOptions(), ""a"", ""123""); } and printed some debug info. The results look good. Any suggestion for such a unit-test? Reviewers: haobo, dhruba, emayanke, jpaton Reviewed By: dhruba CC: leveldb, zshao Differential Revision:"
,,0.4031,rocksdb,"Universal Compaction should keep DeleteMarkers unless it is the earliest file. Summary: The pre-existing code was purging a DeleteMarker if thay key did not exist in deeper levels. But in the Universal Compaction Style, all files are in Level0. For compaction runs that did not include the earliest file, we were erroneously purging the DeleteMarkers. The fix is to purge DeleteMarkers only if the compaction includes the earlist file. Test Plan: DBTest.Randomized triggers this code path. Differential Revision: [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision: KeyMayExist to return the proper value if it can be found in memory and also check block_cache Summary: Removed KeyMayExistImpl because KeyMayExist demanded Get like semantics now. Removed no_io from memtable and imm because we need the proper value now and shouldnt just stop when we see Merge in memtable. Added checks to block_cache. Updated documentation and unit-test Test Plan: make all check;db_stress for 1 hour Reviewers: dhruba, haobo Reviewed By: dhruba CC: leveldb Differential Revision: file-sizes and grandparentoverlap to be unsigned to avoid bad comparisions. Summary: The maxGrandParentOverlapBytes_ was signed which was causing an erroneous comparision between signed and unsigned longs. This, in turn, was causing compaction-created-output-files to be very small in size. Test Plan: make check Differential Revision:"
,,0.4891,rocksdb,"[RocksDB] [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.3499,rocksdb,"Implement log blobs Summary: This patch adds the ability for the user to add sequences of arbitrary data (blobs) to write batches. These blobs are saved to the log along with everything else in the write batch. You can add multiple blobs per WriteBatch and the ordering of blobs, puts, merges, and deletes are preserved. Blobs are not saves to SST files. RocksDB ignores blobs in every way except for writing them to the log. Before committing this patch, I need to add some test code. But Im submitting it now so people can comment on the API. Test Plan: make check Reviewers: dhruba, haobo, vamsi Reviewed By: dhruba CC: leveldb Differential Revision: for merge failure Summary: With Merge returning bool, it can keep failing silently(eg. While faling to fetch timestamp in TTL). We need to detect this through a rocksdb counter which can get bumped whenever Merge returns false. This will also be super-useful for the mcrocksdb-counter service where Merge may fail. Added a counter NUMBER_MERGE_FAILURES and appropriately updated db/merge_helper.cc I felt that it would be better to directly add counter-bumping in Merge as a default function of MergeOperator class but user should not be aware of this, so this approach seems better to me. Test Plan: make all check Reviewers: dnicholas, haobo, dhruba, vamsi CC: leveldb Differential Revision: Compaction should keep DeleteMarkers unless it is the earliest file. Summary: The pre-existing code was purging a DeleteMarker if thay key did not exist in deeper levels. But in the Universal Compaction Style, all files are in Level0. For compaction runs that did not include the earliest file, we were erroneously purging the DeleteMarkers. The fix is to purge DeleteMarkers only if the compaction includes the earlist file. Test Plan: DBTest.Randomized triggers this code path. Differential Revision: Improve manifest dump to print internal keys in hex for version edits. Summary: Currently, VersionEdit::DebugString always display internal keys in the original ascii format. This could cause manifest dump to be truncated if internal keys contain special charactors (like null). Also added an option for ldb idump to indicate that the passed in user keys are in hex. Test Plan: run ldb manifest_dump Reviewers: dhruba, emayanke CC: leveldb Differential Revision: unit tests/bugs for universal compaction (first step) Summary: This is the first step to fix unit tests and bugs for universal compactiion. I added universal compaction option to ChangeOptions(), and fixed all unit tests calling ChangeOptions(). Some of these tests obviously assume more than 1 level and check file number/values in level 1 or above levels. I set kSkipUniversalCompaction for these tests. The major bug I found is manual compaction with universal compaction never stops. I have put a fix for it. I have also set universal compaction as the default compaction and found at least 20+ unit tests failing. I havent looked into the details. The next step is to check all unit tests without calling ChangeOptions(). Test Plan: make all check Reviewers: dhruba, haobo Differential Revision: [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision: KeyMayExist to return the proper value if it can be found in memory and also check block_cache Summary: Removed KeyMayExistImpl because KeyMayExist demanded Get like semantics now. Removed no_io from memtable and imm because we need the proper value now and shouldnt just stop when we see Merge in memtable. Added checks to block_cache. Updated documentation and unit-test Test Plan: make all check;db_stress for 1 hour Reviewers: dhruba, haobo Reviewed By: dhruba CC: leveldb Differential Revision: file-sizes and grandparentoverlap to be unsigned to avoid bad comparisions. Summary: The maxGrandParentOverlapBytes_ was signed which was causing an erroneous comparision between signed and unsigned longs. This, in turn, was causing compaction-created-output-files to be very small in size. Test Plan: make check Differential Revision: code question Summary: This diff is more about my question when reading compaction codes, instead of a normal diff. I dont quite understand the logic here. Test Plan: I didnt do any test. If this is a bug, I will continue doing some test. Reviewers: haobo, dhruba, emayanke Reviewed By: dhruba CC: leveldb Differential Revision: not submit multiple simultaneous seek-compaction requests. Summary: The code was such that if multi-threaded-compactions as well as seek compaction are enabled then it submits multiple compaction request for the same range of keys. This causes extraneous sst-files to accumulate at various levels. Test Plan: I am not able to write a very good unit test for this one but can easily reproduce this bug with dbstress with the following options. batch=1;maxk=100000000;ops=100000000;ro=0;fm=2;bpl=10485760;of=500000; wbn=3; mbc=20; mb=2097152; wbs=4194304; dds=1; sync=0; t=32; bs=16384; cs=1048576; of=500000; ./db_stress Reviewers: leveldb, emayanke Reviewed By: emayanke Differential Revision: Measure all FSYNC/SYNC times Summary: Add stop watches around all sync calls. Test Plan: db_bench check if respective histograms are printed Reviewers: haobo, dhruba Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.4686,rocksdb,"Implement log blobs Summary: This patch adds the ability for the user to add sequences of arbitrary data (blobs) to write batches. These blobs are saved to the log along with everything else in the write batch. You can add multiple blobs per WriteBatch and the ordering of blobs, puts, merges, and deletes are preserved. Blobs are not saves to SST files. RocksDB ignores blobs in every way except for writing them to the log. Before committing this patch, I need to add some test code. But Im submitting it now so people can comment on the API. Test Plan: make check Reviewers: dhruba, haobo, vamsi Reviewed By: dhruba CC: leveldb Differential Revision: [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.147,rocksdb,"Implement log blobs Summary: This patch adds the ability for the user to add sequences of arbitrary data (blobs) to write batches. These blobs are saved to the log along with everything else in the write batch. You can add multiple blobs per WriteBatch and the ordering of blobs, puts, merges, and deletes are preserved. Blobs are not saves to SST files. RocksDB ignores blobs in every way except for writing them to the log. Before committing this patch, I need to add some test code. But Im submitting it now so people can comment on the API. Test Plan: make check Reviewers: dhruba, haobo, vamsi Reviewed By: dhruba CC: leveldb Differential Revision:"
,,0.5335,rocksdb,"Counter for merge failure Summary: With Merge returning bool, it can keep failing silently(eg. While faling to fetch timestamp in TTL). We need to detect this through a rocksdb counter which can get bumped whenever Merge returns false. This will also be super-useful for the mcrocksdb-counter service where Merge may fail. Added a counter NUMBER_MERGE_FAILURES and appropriately updated db/merge_helper.cc I felt that it would be better to directly add counter-bumping in Merge as a default function of MergeOperator class but user should not be aware of this, so this approach seems better to me. Test Plan: make all check Reviewers: dnicholas, haobo, dhruba, vamsi CC: leveldb Differential Revision: [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.4577,rocksdb,"Implement log blobs Summary: This patch adds the ability for the user to add sequences of arbitrary data (blobs) to write batches. These blobs are saved to the log along with everything else in the write batch. You can add multiple blobs per WriteBatch and the ordering of blobs, puts, merges, and deletes are preserved. Blobs are not saves to SST files. RocksDB ignores blobs in every way except for writing them to the log. Before committing this patch, I need to add some test code. But Im submitting it now so people can comment on the API. Test Plan: make check Reviewers: dhruba, haobo, vamsi Reviewed By: dhruba CC: leveldb Differential Revision: for merge failure Summary: With Merge returning bool, it can keep failing silently(eg. While faling to fetch timestamp in TTL). We need to detect this through a rocksdb counter which can get bumped whenever Merge returns false. This will also be super-useful for the mcrocksdb-counter service where Merge may fail. Added a counter NUMBER_MERGE_FAILURES and appropriately updated db/merge_helper.cc I felt that it would be better to directly add counter-bumping in Merge as a default function of MergeOperator class but user should not be aware of this, so this approach seems better to me. Test Plan: make all check Reviewers: dnicholas, haobo, dhruba, vamsi CC: leveldb Differential Revision: [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision: KeyMayExist to return the proper value if it can be found in memory and also check block_cache Summary: Removed KeyMayExistImpl because KeyMayExist demanded Get like semantics now. Removed no_io from memtable and imm because we need the proper value now and shouldnt just stop when we see Merge in memtable. Added checks to block_cache. Updated documentation and unit-test Test Plan: make all check;db_stress for 1 hour Reviewers: dhruba, haobo Reviewed By: dhruba CC: leveldb Differential Revision: arena block size configurable Summary: Add an option for arena block size, default value 4096 bytes. Arena will allocate blocks with such size. I am not sure about passing parameter to skiplist in the new virtualized framework, though I talked to Jim a bit. So add Jim as reviewer. Test Plan: new unit test, I am running db_test. For passing paramter from configured option to Arena, I tried tests like: TEST(DBTest, Arena_Option) { std::string dbname test::TmpDir() + ""/db_arena_option_test""; DestroyDB(dbname, Options()); DB* db nullptr; Options opts; opts.create_if_missing true; opts.arena_block_size 1000000; // tested 99, 999999 Status s DB::Open(opts, dbname, &db); db->Put(WriteOptions(), ""a"", ""123""); } and printed some debug info. The results look good. Any suggestion for such a unit-test? Reviewers: haobo, dhruba, emayanke, jpaton Reviewed By: dhruba CC: leveldb, zshao Differential Revision: [Performance Bug] MemTable::Get Slow Summary: The merge operator diff introduced a performance problem in MemTable::Get. An exit condition is missed when the current key does not match the user key. This could lead to full memtable scan if the user key is not found. Test Plan: make check; db_bench Reviewers: dhruba Reviewed By: dhruba CC: leveldb Differential Revision:"
,,0.531,rocksdb,"Counter for merge failure Summary: With Merge returning bool, it can keep failing silently(eg. While faling to fetch timestamp in TTL). We need to detect this through a rocksdb counter which can get bumped whenever Merge returns false. This will also be super-useful for the mcrocksdb-counter service where Merge may fail. Added a counter NUMBER_MERGE_FAILURES and appropriately updated db/merge_helper.cc I felt that it would be better to directly add counter-bumping in Merge as a default function of MergeOperator class but user should not be aware of this, so this approach seems better to me. Test Plan: make all check Reviewers: dnicholas, haobo, dhruba, vamsi CC: leveldb Differential Revision: [MergeOperator] The new Merge Interface Uses merge sequences. Summary: Here are the major changes to the Merge Interface. It has been expanded to handle cases where the MergeOperator is not associative. It does so by stacking up merge operations while scanning through the key history (i.e.: during Get() or Compaction), until a valid Put/Delete/end-of-history is encountered; it then applies all of the merge operations in the correct sequence starting with the base/sentinel value. I have also introduced an ""AssociativeMerge"" function which allows the user to take advantage of associative merge operations (such as in the case of counters). The implementation will always attempt to merge the operations/operands themselves together when they are encountered, and will resort to the ""stacking"" method if and only if the ""associative-merge"" fails. This implementation is conjectured to allow MergeOperator to handle the general case, while still providing the user with the ability to take advantage of certain efficiencies in their own merge-operator / data-structure. NOTE: This is a preliminary diff. This must still go through a lot of review, revision, and testing. Feedback welcome Test Plan: is a preliminary diff. I have only just begun testing/debugging it. will be testing this with the existing MergeOperator use-cases and unit-tests (counters, string-append, and redis-lists) will be ""desk-checking"" and walking through the code with the help gdb. will find a way of stress-testing the new interface / implementation using db_bench, db_test, merge_test, and/or db_stress. will ensure that my tests cover all cases: Get-Memtable, Get-Immutable-Memtable, Get-from-Disk, Iterator-Range-Scan, Flush-Memtable-to-L0, Compaction-L0-L1, Compaction-Ln-L(n+1), Put/Delete found, Put/Delete not-found, end-of-history, end-of-file, etc. lot of feedback from the reviewers. Reviewers: haobo, dhruba, zshao, emayanke Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.1533,rocksdb,"Remove a check for merge operator in builder.cc Summary: Previously, builder.cc has a check for merge operator which prevents RocksDB from crash when reopening a DB w/o properly specifying the merge operator. However, currently we observed a memory leak on failing in RocksDB recovery. This diff removes such check and let it crash instead of causing memory leak for now before we have identified the real cause of the memory leak. Test Plan: make all check Reviewers: sdong Subscribers: ljin, igor Differential Revision: the crash when merge_operator is not properly set after reopen. Summary: Fixed the crash when merge_operator is not properly set after reopen and added two test cases for this. Test Plan: make merge_test ./merge_test Reviewers: igor, ljin, sdong Reviewed By: sdong Subscribers: benj, mvikjord, leveldb Differential Revision:"
,,0.1393,rocksdb,"Fixed the crash when merge_operator is not properly set after reopen. Summary: Fixed the crash when merge_operator is not properly set after reopen and added two test cases for this. Test Plan: make merge_test ./merge_test Reviewers: igor, ljin, sdong Reviewed By: sdong Subscribers: benj, mvikjord, leveldb Differential Revision:"
,,0.1377,rocksdb,"Fixed the crash when merge_operator is not properly set after reopen. Summary: Fixed the crash when merge_operator is not properly set after reopen and added two test cases for this. Test Plan: make merge_test ./merge_test Reviewers: igor, ljin, sdong Reviewed By: sdong Subscribers: benj, mvikjord, leveldb Differential Revision:"
,,0.1502,rocksdb,"Fixed a typo in the comment for merge operator. Summary: Fixed a typo in the comment for merge operator. Test Plan: n/a/Fixed the crash when merge_operator is not properly set after reopen. Summary: Fixed the crash when merge_operator is not properly set after reopen and added two test cases for this. Test Plan: make merge_test ./merge_test Reviewers: igor, ljin, sdong Reviewed By: sdong Subscribers: benj, mvikjord, leveldb Differential Revision:"
,,0.153,rocksdb,"Fixed the crash when merge_operator is not properly set after reopen. Summary: Fixed the crash when merge_operator is not properly set after reopen and added two test cases for this. Test Plan: make merge_test ./merge_test Reviewers: igor, ljin, sdong Reviewed By: sdong Subscribers: benj, mvikjord, leveldb Differential Revision:"
,,0.0681,rocksdb,RocksJava FindBugs issues Addressed some FindBugs issues./
,,0.0681,rocksdb,RocksJava FindBugs issues Addressed some FindBugs issues./
,,0.066,rocksdb,RocksJava FindBugs issues Addressed some FindBugs issues./
,,0.609,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision: add recycle log test This currently fails because we do not properly map a corrupt header to the logical end of the log. Signed-off-by: Sage Weil"
,,0.621,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.6195,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.61,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.6115,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.6181,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.6144,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.6064,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.6129,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.5864,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision: BlockIter::Prev() by caching decoded entries Summary: Right now the way we do BlockIter::Prev() is like this Go to the beginning of the restart interval Keep moving forward (and decoding keys using ParseNextKey()) until we reach the desired key This can be optimized by caching the decoded entries in the first pass and reusing them in consecutive BlockIter::Prev() calls Before caching ``` DEBUG_LEVEL=0 make db_bench && ./db_bench DB path: [/dev/shm/bench_prev_opt/] readreverse : 0.413 micros/op 2423972 ops/sec; 268.2 MB/s DB path: [/dev/shm/bench_prev_opt/] readreverse : 0.414 micros/op 2413867 ops/sec; 267.0 MB/s DB path: [/dev/shm/bench_prev_opt/] readreverse : 0.410 micros/op 2440881 ops/sec; 270.0 MB/s DB path: [/dev/shm/bench_prev_opt/] readreverse : 0.414 micros/op 2417298 ops/sec; 267.4 MB/s DB path: [/dev/shm/bench_prev_opt/] readreverse : 0.413 micros/op 2421682 ops/sec; 267.9 MB/s ``` After caching ``` DEBUG_LEVEL=0 make db_bench && ./db_bench DB path: [/dev/shm/bench_prev_opt/] readreverse : 0.324 micros/op 3088955 ops/sec; 341.7 MB/s DB path: [/dev/shm/bench_prev_opt/] readreverse : 0.335 micros/op 2980999 ops/sec; 329.8 MB/s DB path: [/dev/shm/bench_prev_opt/] readreverse : 0.341 micros/op 2929681 ops/sec; 324.1 MB/s DB path: [/dev/shm/bench_prev_opt/] readreverse : 0.344 micros/op 2908490 ops/sec; 321.8 MB/s DB path: [/dev/shm/bench_prev_opt/] readreverse : 0.338 micros/op 2958404 ops/sec; 327.3 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: andrewkr, yiwu, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, yoshinorim Differential Revision:"
,,0.6071,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.61,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.6137,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.6129,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.4615,rocksdb,"Ignore stale logs while restarting DBs Summary: Stale log files can be deleted out of order. This can happen for various reasons. One of the reason is that no data is ever inserted to a column family and we have an optimization to update its log number, but not all the old log files are cleaned up (the case shown in the unit tests added). It can also happen when we simply delete multiple log files out of order. This causes data corruption because we simply increase seqID after processing the next row and we may end up with writing data with smaller seqID than what is already flushed to memtables. In DB recovery, for the oldest files we are replaying, if there it contains no data for any column family, we ignore the sequence IDs in the file. Test Plan: Add two unit tests that fail without the fix. Reviewers: IslamAbdelRahman, igor, yiwu Reviewed By: yiwu Subscribers: hermanlee4, yoshinorim, leveldb, andrewkr, dhruba Differential Revision: FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision: simple typos (#1183)/"
,,0.6151,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.6151,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.6129,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.6129,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.581,rocksdb,"Fix MergeContext::copied_operands_ strings moving Summary: MergeContext::copied_operands contain strings that MergeContext::operand_list_ Slices point to Its possible that when MergeContext::copied_operands grow, these strings are moved and there place in memory is changed, this will cause MergeContext::operand_list_ to point to invalid memory. fix this problem by using unique_ptr<string> instead of string Test Plan: run tests under mac/clang Reviewers: sdong, yiwu Reviewed By: yiwu Subscribers: andrewkr, dhruba Differential Revision: FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.6071,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.6086,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.6195,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision:"
,,0.5483,rocksdb,"Introduce FullMergeV2 (eliminate memcpy from merge operators) Summary: This diff update the code to pin the merge operator operands while the merge operation is done, so that we can eliminate the memcpy cost, to do that we need a new public API for FullMerge that replace the std::deque<std::string> with std::vector<Slice> This diff is stacked on top of D56493 and D56511 In this diff we Update FullMergeV2 arguments to be encapsulated in MergeOperationInput and MergeOperationOutput which will make it easier to add new arguments in the future Replace std::deque<std::string> with std::vector<Slice> to pass operands Replace MergeContext std::deque with std::vector (based on a simple benchmark I ran Allow FullMergeV2 output to be an existing operand ``` [Everything in Memtable | 10K operands | 10 KB each | 1 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 0.607 micros/op 1648235 ops/sec; 16121.2 MB/s readseq : 0.478 micros/op 2091546 ops/sec; 20457.2 MB/s readseq : 0.252 micros/op 3972081 ops/sec; 38850.5 MB/s readseq : 0.237 micros/op 4218328 ops/sec; 41259.0 MB/s readseq : 0.247 micros/op 4043927 ops/sec; 39553.2 MB/s [master] readseq : 3.935 micros/op 254140 ops/sec; 2485.7 MB/s readseq : 3.722 micros/op 268657 ops/sec; 2627.7 MB/s readseq : 3.149 micros/op 317605 ops/sec; 3106.5 MB/s readseq : 3.125 micros/op 320024 ops/sec; 3130.1 MB/s readseq : 4.075 micros/op 245374 ops/sec; 2400.0 MB/s ``` ``` [Everything in Memtable | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 3.472 micros/op 288018 ops/sec; 2817.1 MB/s readseq : 2.304 micros/op 434027 ops/sec; 4245.2 MB/s readseq : 1.163 micros/op 859845 ops/sec; 8410.0 MB/s readseq : 1.192 micros/op 838926 ops/sec; 8205.4 MB/s readseq : 1.250 micros/op 800000 ops/sec; 7824.7 MB/s [master] readseq : 24.025 micros/op 41623 ops/sec; 407.1 MB/s readseq : 18.489 micros/op 54086 ops/sec; 529.0 MB/s readseq : 18.693 micros/op 53495 ops/sec; 523.2 MB/s readseq : 23.621 micros/op 42335 ops/sec; 414.1 MB/s readseq : 18.775 micros/op 53262 ops/sec; 521.0 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 1 operand per key] [FullMergeV2] $ DEBUG_LEVEL=0 make db_bench && ./db_bench readseq : 14.741 micros/op 67837 ops/sec; 663.5 MB/s readseq : 1.029 micros/op 971446 ops/sec; 9501.6 MB/s readseq : 0.974 micros/op 1026229 ops/sec; 10037.4 MB/s readseq : 0.965 micros/op 1036080 ops/sec; 10133.8 MB/s readseq : 0.943 micros/op 1060657 ops/sec; 10374.2 MB/s [master] readseq : 16.735 micros/op 59755 ops/sec; 584.5 MB/s readseq : 3.029 micros/op 330151 ops/sec; 3229.2 MB/s readseq : 3.136 micros/op 318883 ops/sec; 3119.0 MB/s readseq : 3.065 micros/op 326245 ops/sec; 3191.0 MB/s readseq : 3.014 micros/op 331813 ops/sec; 3245.4 MB/s ``` ``` [Everything in Block cache | 10K operands | 10 KB each | 10 operand per key] DEBUG_LEVEL=0 make db_bench && ./db_bench [FullMergeV2] readseq : 24.325 micros/op 41109 ops/sec; 402.1 MB/s readseq : 1.470 micros/op 680272 ops/sec; 6653.7 MB/s readseq : 1.231 micros/op 812347 ops/sec; 7945.5 MB/s readseq : 1.091 micros/op 916590 ops/sec; 8965.1 MB/s readseq : 1.109 micros/op 901713 ops/sec; 8819.6 MB/s [master] readseq : 27.257 micros/op 36687 ops/sec; 358.8 MB/s readseq : 4.443 micros/op 225073 ops/sec; 2201.4 MB/s readseq : 5.830 micros/op 171526 ops/sec; 1677.7 MB/s readseq : 4.173 micros/op 239635 ops/sec; 2343.8 MB/s readseq : 4.150 micros/op 240963 ops/sec; 2356.8 MB/s ``` Test Plan: COMPILE_WITH_ASAN=1 make check Reviewers: yhchiang, andrewkr, sdong Reviewed By: sdong Subscribers: lovro, andrewkr, dhruba Differential Revision: clang analyzer errors Summary: Fixing erros reported by clang static analyzer. * Removing some unused variables. * Adding assertions to fix false positives reported by clang analyzer. * Adding `__clang_analyzer__` macro to suppress false positive warnings. Test Plan: USE_CLANG=1 OPT=-g make analyze Reviewers: andrewkr, sdong Reviewed By: sdong Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.3165,rocksdb,"Support ingest_behind for IngestExternalFile Summary: First cut for early review; there are few conceptual points to answer and some code structure issues. For conceptual points restriction-wise, were going to disallow ingest_behind if (use_seqno_zero_out=true || disable_auto_compaction=false), the user is responsible to properly open and close DB with required params we wanted to ingest into reserved bottom most level. Should we fail fast if bottom level isnt empty, or should we attempt to ingest if file fits there key-ranges-wise? Modifying AssignLevelForIngestedFile seems the place we wed handle that. On code structure going to refactor GenerateAndAddExternalFile call in the test class to allow passing instance of IngestionOptions, thats just going to incur lots of changes at callsites. Closes Differential Revision: D4873732 Pulled By: lightmark fbshipit-source-id: 81cb698106b68ef8797f564453651d50900e153a/"
,,0.3177,rocksdb,"Support ingest_behind for IngestExternalFile Summary: First cut for early review; there are few conceptual points to answer and some code structure issues. For conceptual points restriction-wise, were going to disallow ingest_behind if (use_seqno_zero_out=true || disable_auto_compaction=false), the user is responsible to properly open and close DB with required params we wanted to ingest into reserved bottom most level. Should we fail fast if bottom level isnt empty, or should we attempt to ingest if file fits there key-ranges-wise? Modifying AssignLevelForIngestedFile seems the place we wed handle that. On code structure going to refactor GenerateAndAddExternalFile call in the test class to allow passing instance of IngestionOptions, thats just going to incur lots of changes at callsites. Closes Differential Revision: D4873732 Pulled By: lightmark fbshipit-source-id: 81cb698106b68ef8797f564453651d50900e153a/"
,,0.1955,rocksdb,"add VerifyChecksum() to db.h Summary: We need a tool to check any sst file corruption in the db. It will check all the sst files in current version and read all the blocks (data, meta, index) with checksum verification. If any verification fails, the function will return non-OK status. Closes Differential Revision: D5324269 Pulled By: lightmark fbshipit-source-id: 6f8a272008b722402a772acfc804524c9d1a483b/Replace dynamic_cast<> Summary: Replace dynamic_cast<> so that users can choose to build with RTTI off, so that they can save several bytes per object, and get tiny more memory available. Some nontrivial changes: 1. Add Comparator::GetRootComparator() to get around the internal comparator hack 2. Add the two experiemental functions to DB 3. Add TableFactory::GetOptionString() to avoid unnecessary casting to get the option string 4. Since 3 is done, move the parsing option functions for table factory to table factory files too, to be symmetric. Closes Differential Revision: D5502723 Pulled By: siying fbshipit-source-id: fd13cec5601cf68a554d87bfcf056f2ffa5fbf7c/comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Fixed some spelling mistakes Summary: Closes Differential Revision: D5079601 Pulled By: sagar0 fbshipit-source-id: ae5696fd735718f544435c64c3179c49b8c04349/Support ingest_behind for IngestExternalFile Summary: First cut for early review; there are few conceptual points to answer and some code structure issues. For conceptual points restriction-wise, were going to disallow ingest_behind if (use_seqno_zero_out=true || disable_auto_compaction=false), the user is responsible to properly open and close DB with required params we wanted to ingest into reserved bottom most level. Should we fail fast if bottom level isnt empty, or should we attempt to ingest if file fits there key-ranges-wise? Modifying AssignLevelForIngestedFile seems the place we wed handle that. On code structure going to refactor GenerateAndAddExternalFile call in the test class to allow passing instance of IngestionOptions, thats just going to incur lots of changes at callsites. Closes Differential Revision: D4873732 Pulled By: lightmark fbshipit-source-id: 81cb698106b68ef8797f564453651d50900e153a/"
,,0.267,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Fix RocksDB Lite build with CLANG Summary: Closes Differential Revision: D5193976 Pulled By: siying fbshipit-source-id: 62d115edee6043237e9d6ad3c2a05481e162c9eb/Support ingest_behind for IngestExternalFile Summary: First cut for early review; there are few conceptual points to answer and some code structure issues. For conceptual points restriction-wise, were going to disallow ingest_behind if (use_seqno_zero_out=true || disable_auto_compaction=false), the user is responsible to properly open and close DB with required params we wanted to ingest into reserved bottom most level. Should we fail fast if bottom level isnt empty, or should we attempt to ingest if file fits there key-ranges-wise? Modifying AssignLevelForIngestedFile seems the place we wed handle that. On code structure going to refactor GenerateAndAddExternalFile call in the test class to allow passing instance of IngestionOptions, thats just going to incur lots of changes at callsites. Closes Differential Revision: D4873732 Pulled By: lightmark fbshipit-source-id: 81cb698106b68ef8797f564453651d50900e153a/"
,,0.2143,rocksdb,"Fix Data Race Between CreateColumnFamily() and GetAggregatedIntProperty() Summary: CreateColumnFamily() releases DB mutex after adding column family to the set and install super version (to write option file), so if users call GetAggregatedIntProperty() in the middle, then super version will be null and the process will crash. Fix it by skipping those column families without super version installed. Maybe we should also fix the problem of releasing the lock when reading option file, but it is more risky. so Im doing a quick and safer fix and we can investigate it later. Closes Differential Revision: D5298053 Pulled By: siying fbshipit-source-id: 4b3c8f91c60400b163fcc6cda8a0c77723be0ef6/fixed typo Summary: fixed typo Closes Differential Revision: D5183630 Pulled By: ajkr fbshipit-source-id: 133cfd0445959e70aa2cd1a12151bf3c0c5c3ac5/Support ingest_behind for IngestExternalFile Summary: First cut for early review; there are few conceptual points to answer and some code structure issues. For conceptual points restriction-wise, were going to disallow ingest_behind if (use_seqno_zero_out=true || disable_auto_compaction=false), the user is responsible to properly open and close DB with required params we wanted to ingest into reserved bottom most level. Should we fail fast if bottom level isnt empty, or should we attempt to ingest if file fits there key-ranges-wise? Modifying AssignLevelForIngestedFile seems the place we wed handle that. On code structure going to refactor GenerateAndAddExternalFile call in the test class to allow passing instance of IngestionOptions, thats just going to incur lots of changes at callsites. Closes Differential Revision: D4873732 Pulled By: lightmark fbshipit-source-id: 81cb698106b68ef8797f564453651d50900e153a/"
,,0.3,rocksdb,"fixed typo Summary: fixed typo Closes Differential Revision: D5183630 Pulled By: ajkr fbshipit-source-id: 133cfd0445959e70aa2cd1a12151bf3c0c5c3ac5/Support ingest_behind for IngestExternalFile Summary: First cut for early review; there are few conceptual points to answer and some code structure issues. For conceptual points restriction-wise, were going to disallow ingest_behind if (use_seqno_zero_out=true || disable_auto_compaction=false), the user is responsible to properly open and close DB with required params we wanted to ingest into reserved bottom most level. Should we fail fast if bottom level isnt empty, or should we attempt to ingest if file fits there key-ranges-wise? Modifying AssignLevelForIngestedFile seems the place we wed handle that. On code structure going to refactor GenerateAndAddExternalFile call in the test class to allow passing instance of IngestionOptions, thats just going to incur lots of changes at callsites. Closes Differential Revision: D4873732 Pulled By: lightmark fbshipit-source-id: 81cb698106b68ef8797f564453651d50900e153a/"
,,0.187,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Introduce OnBackgroundError callback Summary: Some users want to prevent rocksdb from entering read-only mode in certain error cases. This diff gives them a callback, `OnBackgroundError`, that they can use to achieve it. call `OnBackgroundError` every time we consider setting `bg_error_`. Use its result to assign `bg_error_` but not to change the functions return status. classified calls using `BackgroundErrorReason` to give the callback some info about where the error happened renamed `ParanoidCheck` to something more specific so we can provide a clear `BackgroundErrorReason` unit tests for the most common cases: flush or compaction errors Closes Differential Revision: D5300190 Pulled By: ajkr fbshipit-source-id: a0ea4564249719b83428e3f4c6ca2c49e366e9b3/Fix flush assertion with tsan Summary: DBImpls instance variables should only be accessed with mutex held. I moved an assert later to uphold this rule. DBTest.LastWriteBufferDelay test was sporadically failing TSAN because it tried to flush around the same time the db was destroyed, so the variable was accessed simultaneously by two threads. Closes Differential Revision: D5286857 Pulled By: ajkr fbshipit-source-id: 435abd84efa601f667c254e320b0bb5a434b971f/fixed typo Summary: fixed typo Closes Differential Revision: D5242471 Pulled By: IslamAbdelRahman fbshipit-source-id: 832eb3a4c70221444ccd2ae63217823fec56c748/Fixed some spelling mistakes Summary: Closes Differential Revision: D5079601 Pulled By: sagar0 fbshipit-source-id: ae5696fd735718f544435c64c3179c49b8c04349/Support ingest_behind for IngestExternalFile Summary: First cut for early review; there are few conceptual points to answer and some code structure issues. For conceptual points restriction-wise, were going to disallow ingest_behind if (use_seqno_zero_out=true || disable_auto_compaction=false), the user is responsible to properly open and close DB with required params we wanted to ingest into reserved bottom most level. Should we fail fast if bottom level isnt empty, or should we attempt to ingest if file fits there key-ranges-wise? Modifying AssignLevelForIngestedFile seems the place we wed handle that. On code structure going to refactor GenerateAndAddExternalFile call in the test class to allow passing instance of IngestionOptions, thats just going to incur lots of changes at callsites. Closes Differential Revision: D4873732 Pulled By: lightmark fbshipit-source-id: 81cb698106b68ef8797f564453651d50900e153a/fix log err Summary: Closes Differential Revision: D5054222 Pulled By: yiwu-arbug fbshipit-source-id: d8742bda1bf3e76d7b68eeb86df4608031b5cbc8/"
,,0.2965,rocksdb,"fixed typo Summary: fixed typo Closes Differential Revision: D5183630 Pulled By: ajkr fbshipit-source-id: 133cfd0445959e70aa2cd1a12151bf3c0c5c3ac5/Support ingest_behind for IngestExternalFile Summary: First cut for early review; there are few conceptual points to answer and some code structure issues. For conceptual points restriction-wise, were going to disallow ingest_behind if (use_seqno_zero_out=true || disable_auto_compaction=false), the user is responsible to properly open and close DB with required params we wanted to ingest into reserved bottom most level. Should we fail fast if bottom level isnt empty, or should we attempt to ingest if file fits there key-ranges-wise? Modifying AssignLevelForIngestedFile seems the place we wed handle that. On code structure going to refactor GenerateAndAddExternalFile call in the test class to allow passing instance of IngestionOptions, thats just going to incur lots of changes at callsites. Closes Differential Revision: D4873732 Pulled By: lightmark fbshipit-source-id: 81cb698106b68ef8797f564453651d50900e153a/"
,,0.2323,rocksdb,"Improve Status message for block checksum mismatches Summary: Weve got some DBs where iterators return Status with message ""Corruption: block checksum mismatch"" all the time. Thats not very informative. It would be much easier to investigate if the error message contained the file name then we would know e.g. how old the corrupted file is, which would be very useful for finding the root cause. This PR adds file name, offset and other stuff to some block corruption-related status messages. It doesnt improve all the error messages, just a few that were easy to improve. Im mostly interested in ""block checksum mismatch"" and ""Bad table magic number"" since theyre the only corruption errors that Ive ever seen in the wild. Closes Differential Revision: D5345702 Pulled By: al13n321 fbshipit-source-id: fc8023d43f1935ad927cef1b9c55481ab3cb1339/Fix TSAN: avoid arena mode with range deletions Summary: The range deletion meta-block iterators werent getting cleaned up properly since they dont support arena allocation. I didnt implement arena support since, in the general case, each iterator is used only once and separately from all other iterators, so there should be no benefit to data locality. Anyways, this diff fixes up by treating range deletion iterators as non-arena-allocated. Closes Differential Revision: D5171119 Pulled By: ajkr fbshipit-source-id: bef6f5c4c5905a124f4993945aed4bd86e2807d8/Support ingest_behind for IngestExternalFile Summary: First cut for early review; there are few conceptual points to answer and some code structure issues. For conceptual points restriction-wise, were going to disallow ingest_behind if (use_seqno_zero_out=true || disable_auto_compaction=false), the user is responsible to properly open and close DB with required params we wanted to ingest into reserved bottom most level. Should we fail fast if bottom level isnt empty, or should we attempt to ingest if file fits there key-ranges-wise? Modifying AssignLevelForIngestedFile seems the place we wed handle that. On code structure going to refactor GenerateAndAddExternalFile call in the test class to allow passing instance of IngestionOptions, thats just going to incur lots of changes at callsites. Closes Differential Revision: D4873732 Pulled By: lightmark fbshipit-source-id: 81cb698106b68ef8797f564453651d50900e153a/"
,,0.2659,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Fix RocksDB Lite build with CLANG Summary: Closes Differential Revision: D5193976 Pulled By: siying fbshipit-source-id: 62d115edee6043237e9d6ad3c2a05481e162c9eb/Support ingest_behind for IngestExternalFile Summary: First cut for early review; there are few conceptual points to answer and some code structure issues. For conceptual points restriction-wise, were going to disallow ingest_behind if (use_seqno_zero_out=true || disable_auto_compaction=false), the user is responsible to properly open and close DB with required params we wanted to ingest into reserved bottom most level. Should we fail fast if bottom level isnt empty, or should we attempt to ingest if file fits there key-ranges-wise? Modifying AssignLevelForIngestedFile seems the place we wed handle that. On code structure going to refactor GenerateAndAddExternalFile call in the test class to allow passing instance of IngestionOptions, thats just going to incur lots of changes at callsites. Closes Differential Revision: D4873732 Pulled By: lightmark fbshipit-source-id: 81cb698106b68ef8797f564453651d50900e153a/"
,,0.0841,rocksdb,"fix inclusive-exclusiveness of histogram ToString Summary: I spent too much time thinking about histograms lately and realized boundary values fall into the lower bucket, not the upper bucket. Its because were using `std::map::lower_bound` here: Fixed histograms `ToString()` to reflect this. Closes Differential Revision: D5751159 Pulled By: ajkr fbshipit-source-id: 67432bb45849eec9b5bcc0d095551dbc0ee81766/"
,,0.1064,rocksdb,"Windows JNI build fixes (#4015) Summary: Fixing compilation, unsatisfied link exceptions (updated list of files that needs to be linked) and warnings for Windows build. ```C++ //MSVC 2015 does not support dynamic arrays like: rocksdb::Slice key_parts[jkey_parts_len]; //I have converted to: std::vector<rocksdb::Slice> key_parts; ``` Also reusing `free_key_parts` that does the same as `free_key_value_parts` that was removed. Java elapsedTime unit test increase of sleep to 2 ms. Otherwise it was failing. Pull Request resolved: Differential Revision: D8558215 Pulled By: sagar0 fbshipit-source-id: d3c34f846343f9218424da2402a2bd367bbd0aa2/"
,,0.0688,rocksdb,"Work around weird unused errors with Mingw (#6075) Summary: From the reset of the code, it looks this this maybe can be unconditionally given the attribute? But I couldnt test with MSVC so I defensively put under CPP. Pull Request resolved: Differential Revision: D18723749 fbshipit-source-id: 45fc8732c28dd29aab1644225d68f3c6f39bd69b/"
,,0.0655,rocksdb,"Work around weird unused errors with Mingw (#6075) Summary: From the reset of the code, it looks this this maybe can be unconditionally given the attribute? But I couldnt test with MSVC so I defensively put under CPP. Pull Request resolved: Differential Revision: D18723749 fbshipit-source-id: 45fc8732c28dd29aab1644225d68f3c6f39bd69b/"
