Topic_no,Keywords,Contrib,System,Text
5,"object, create, change, default, realm, remove, exception, main, check, method, bug, parameter, files_cacert, table, add, instance, model, call, wrong, update",0.2071,conscrypt,"Froyo InputStream.available documentation improvement. This method causes a lot of confusion, and we can do a lot better. (Ideally, the API would either not exist or be something like ""public boolean ready()"".) Ive removed poor-quality documentation overrides too, so the full documentation is visible in most places. (InflaterInputStream is an obvious exception.) Also, to a lesser extent, improve the InputStream.skip documentation. Change-Id: I6d6cd788e6a32ad4a2613d1e381610f1ad8575fe/"
,,0.2114,conscrypt,"Froyo InputStream.available documentation improvement. This method causes a lot of confusion, and we can do a lot better. (Ideally, the API would either not exist or be something like ""public boolean ready()"".) Ive removed poor-quality documentation overrides too, so the full documentation is visible in most places. (InflaterInputStream is an obvious exception.) Also, to a lesser extent, improve the InputStream.skip documentation. Change-Id: I6d6cd788e6a32ad4a2613d1e381610f1ad8575fe/"
,,0.2114,conscrypt,"Froyo InputStream.available documentation improvement. This method causes a lot of confusion, and we can do a lot better. (Ideally, the API would either not exist or be something like ""public boolean ready()"".) Ive removed poor-quality documentation overrides too, so the full documentation is visible in most places. (InflaterInputStream is an obvious exception.) Also, to a lesser extent, improve the InputStream.skip documentation. Change-Id: I6d6cd788e6a32ad4a2613d1e381610f1ad8575fe/"
,,0.3089,conscrypt,"Make CertInstaller installed CA certs trusted by applications via default TrustManager (2 of 6) frameworks/base Adding IKeyChainService APIs for CertInstaller and Settings use keystore/java/android/security/IKeyChainService.aidl libcore Improve exceptions to include more information luni/src/main/java/javax/security/auth/x500/X500Principal.java Move guts of RootKeyStoreSpi to TrustedCertificateStore, leaving only KeyStoreSpi methods. Added support for adding user CAs in a separate directory for system. Added support for removing system CAs by placing a copy in a sytem directory luni/src/main/java/org/apache/harmony/xnet/provider/jsse/RootKeyStoreSpi.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustedCertificateStore.java Formerly static methods on RootKeyStoreSpi are now instance methods on TrustedCertificateStore luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java Added test for NativeCrypto.X509_NAME_hash_old and X509_NAME_hash to make sure the implementing algorithms doe not change since TrustedCertificateStore depend on X509_NAME_hash_old (OpenSSL changed the algorithm from MD5 to SHA1 when moving from 0.9.8 to 1.0.0) luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java Extensive test of new TrustedCertificateStore behavior luni/src/test/java/org/apache/harmony/xnet/provider/jsse/TrustedCertificateStoreTest.java TestKeyStore improvements Refactored TestKeyStore to provide simpler createCA method (and internal createCertificate) Cleaned up to remove use of BouncyCastle specific X509Principal in the TestKeyStore API when the public X500Principal would do. Cleaned up TestKeyStore support methods to not throw Exception to remove need for static blocks for catch clauses in tests. support/src/test/java/libcore/java/security/TestKeyStore.java luni/src/test/java/libcore/java/security/KeyStoreTest.java luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java Added private PKIXParameters contructor for use by IndexedPKIXParameters to avoid wart of having to lookup and pass a TrustAnchor to satisfy the super-class sanity check. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/IndexedPKIXParameters.java luni/src/main/java/java/security/cert/PKIXParameters.java packages/apps/CertInstaller Change CertInstaller to call IKeyChainService.installCertificate for CA certs to pass them to the KeyChainServiceTest which will make them available to all apps through the TrustedCertificateStore. Change PKCS12 extraction to use AsyncTask. src/com/android/certinstaller/CertInstaller.java Added installCaCertsToKeyChain and hasCaCerts accessor for use by CertInstaller. Use hasUserCertificate() internally. Cleanup coding style. src/com/android/certinstaller/CredentialHelper.java packages/apps/KeyChain Added MANAGE_ACCOUNTS so that IKeyChainService.reset implementation can remove KeyChain accounts. AndroidManifest.xml Implement new IKeyChainService methods: Added IKeyChainService.installCaCertificate to install certs provided by CertInstaller using the TrustedCertificateStore. Added IKeyChainService.reset to allow Settings to remove the KeyChain accounts so that any app granted access to keystore credentials are revoked when the keystore is reset. src/com/android/keychain/KeyChainService.java packages/apps/Settings Changed com.android.credentials.RESET credential reset action to also call IKeyChainService.reset to remove any installed user CAs and remove KeyChain accounts to have AccountManager revoke credential granted to private keys removed during the RESET. src/com/android/settings/CredentialStorage.java Added toast text value for failure case res/values/strings.xml system/core Have init create world readable /data/misc/keychain to allow apps to access user added CA certificates installed by the CertInstaller. rootdir/init.rc Change-Id: Ief57672eea38b3eece23b14c94dedb9ea4713744/Fix more FindBugs warnings: BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS. ""The equals(Object o) method shouldnt make any assumptions about the type of o. It should simply return false if o is not the same type as this."" Change-Id: Ib16eb57e8876ec117634b4c9b069a4dccc61c657/"
,,0.08,conscrypt,"Fix more FindBugs warnings: BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS. ""The equals(Object o) method shouldnt make any assumptions about the type of o. It should simply return false if o is not the same type as this."" Change-Id: Ib16eb57e8876ec117634b4c9b069a4dccc61c657/"
,,0.6635,conscrypt,"am 347b2a60: Avoid loading all CA certs into Zygote memory, lazily load instead (2 of 3) * commit 347b2a604114602da9bc4ae040278f74d11c2f51: Avoid loading all CA certs into Zygote memory, lazily load instead (2 of 3)/Avoid loading all CA certs into Zygote memory, lazily load instead (2 of 3) Previously the CA certs stored in the BKS KeyStore at /system/etc/security/cacerts.bks was loaded in the Zygote. As the the number of CAs are started to increase, this is causing more and more memory to be used for rarely used CAs. The new AndroidCAStore KeyStore implementation reads the CAs as needed out of individual PEM certificate files. The files can be efficiently found because they are named based on a hash CAs subject name, similar to OpenSSL. Bug: 1109242 Details: build Removing old cacerts.bks from GRANDFATHERED_ALL_PREBUILT and adding new cacerts directory to core PRODUCT_PACKAGES core/legacy_prebuilts.mk target/product/core.mk libcore cacerts build changes. Move cacerts prebuilt logic to new CaCerts.mk from NativeCode.mk where it didnt make sense. Updated Android.mks dalvik-host target to install new cacerts files. Android.mk CaCerts.mk NativeCode.mk Remove old cacerts.bks and add remove certimport.sh script used to generate it. Preserved the useful comments from certimport.sh in the new README.cacerts luni/src/main/files/cacerts.bks luni/src/main/files/certimport.sh luni/src/main/files/README.cacerts Recanonicalize cacerts files using updated vendor/google/tools/cacerts/certimport.py (See below discussion of certimport.py changes for details) luni/src/main/files/cacerts/00673b5b.0 luni/src/main/files/cacerts/03e16f6c.0 luni/src/main/files/cacerts/08aef7bb.0 luni/src/main/files/cacerts/0d188d89.0 luni/src/main/files/cacerts/10531352.0 luni/src/main/files/cacerts/111e6273.0 luni/src/main/files/cacerts/1155c94b.0 luni/src/main/files/cacerts/119afc2e.0 luni/src/main/files/cacerts/11a09b38.0 luni/src/main/files/cacerts/12d55845.0 luni/src/main/files/cacerts/17b51fe6.0 luni/src/main/files/cacerts/1920cacb.0 luni/src/main/files/cacerts/1dac3003.0 luni/src/main/files/cacerts/1dbdda5b.0 luni/src/main/files/cacerts/1dcd6f4c.0 luni/src/main/files/cacerts/1df5ec47.0 luni/src/main/files/cacerts/1e8e7201.0 luni/src/main/files/cacerts/1eb37bdf.0 luni/src/main/files/cacerts/219d9499.0 luni/src/main/files/cacerts/23f4c490.0 luni/src/main/files/cacerts/27af790d.0 luni/src/main/files/cacerts/2afc57aa.0 luni/src/main/files/cacerts/2e8714cb.0 luni/src/main/files/cacerts/2fa87019.0 luni/src/main/files/cacerts/2fb1850a.0 luni/src/main/files/cacerts/33815e15.0 luni/src/main/files/cacerts/343eb6cb.0 luni/src/main/files/cacerts/399e7759.0 luni/src/main/files/cacerts/3a3b02ce.0 luni/src/main/files/cacerts/3ad48a91.0 luni/src/main/files/cacerts/3c58f906.0 luni/src/main/files/cacerts/3c860d51.0 luni/src/main/files/cacerts/3d441de8.0 luni/src/main/files/cacerts/3e7271e8.0 luni/src/main/files/cacerts/418595b9.0 luni/src/main/files/cacerts/455f1b52.0 luni/src/main/files/cacerts/46b2fd3b.0 luni/src/main/files/cacerts/48478734.0 luni/src/main/files/cacerts/4d654d1d.0 luni/src/main/files/cacerts/4e18c148.0 luni/src/main/files/cacerts/4fbd6bfa.0 luni/src/main/files/cacerts/5021a0a2.0 luni/src/main/files/cacerts/5046c355.0 luni/src/main/files/cacerts/524d9b43.0 luni/src/main/files/cacerts/56b8a0b6.0 luni/src/main/files/cacerts/57692373.0 luni/src/main/files/cacerts/58a44af1.0 luni/src/main/files/cacerts/594f1775.0 luni/src/main/files/cacerts/5a3f0ff8.0 luni/src/main/files/cacerts/5a5372fc.0 luni/src/main/files/cacerts/5cf9d536.0 luni/src/main/files/cacerts/5e4e69e7.0 luni/src/main/files/cacerts/60afe812.0 luni/src/main/files/cacerts/635ccfd5.0 luni/src/main/files/cacerts/67495436.0 luni/src/main/files/cacerts/69105f4f.0 luni/src/main/files/cacerts/6adf0799.0 luni/src/main/files/cacerts/6e8bf996.0 luni/src/main/files/cacerts/6fcc125d.0 luni/src/main/files/cacerts/72f369af.0 luni/src/main/files/cacerts/72fa7371.0 luni/src/main/files/cacerts/74c26bd0.0 luni/src/main/files/cacerts/75680d2e.0 luni/src/main/files/cacerts/7651b327.0 luni/src/main/files/cacerts/76579174.0 luni/src/main/files/cacerts/7999be0d.0 luni/src/main/files/cacerts/7a481e66.0 luni/src/main/files/cacerts/7a819ef2.0 luni/src/main/files/cacerts/7d3cd826.0 luni/src/main/files/cacerts/7d453d8f.0 luni/src/main/files/cacerts/81b9768f.0 luni/src/main/files/cacerts/8470719d.0 luni/src/main/files/cacerts/84cba82f.0 luni/src/main/files/cacerts/85cde254.0 luni/src/main/files/cacerts/86212b19.0 luni/src/main/files/cacerts/87753b0d.0 luni/src/main/files/cacerts/882de061.0 luni/src/main/files/cacerts/895cad1a.0 luni/src/main/files/cacerts/89c02a45.0 luni/src/main/files/cacerts/8f7b96c4.0 luni/src/main/files/cacerts/9339512a.0 luni/src/main/files/cacerts/9685a493.0 luni/src/main/files/cacerts/9772ca32.0 luni/src/main/files/cacerts/9d6523ce.0 luni/src/main/files/cacerts/9dbefe7b.0 luni/src/main/files/cacerts/9f533518.0 luni/src/main/files/cacerts/a0bc6fbb.0 luni/src/main/files/cacerts/a15b3b6b.0 luni/src/main/files/cacerts/a3896b44.0 luni/src/main/files/cacerts/a7605362.0 luni/src/main/files/cacerts/a7d2cf64.0 luni/src/main/files/cacerts/ab5346f4.0 luni/src/main/files/cacerts/add67345.0 luni/src/main/files/cacerts/b0f3e76e.0 luni/src/main/files/cacerts/bc3f2570.0 luni/src/main/files/cacerts/bcdd5959.0 luni/src/main/files/cacerts/bda4cc84.0 luni/src/main/files/cacerts/bdacca6f.0 luni/src/main/files/cacerts/bf64f35b.0 luni/src/main/files/cacerts/c0cafbd2.0 luni/src/main/files/cacerts/c215bc69.0 luni/src/main/files/cacerts/c33a80d4.0 luni/src/main/files/cacerts/c527e4ab.0 luni/src/main/files/cacerts/c7e2a638.0 luni/src/main/files/cacerts/c8763593.0 luni/src/main/files/cacerts/ccc52f49.0 luni/src/main/files/cacerts/cdaebb72.0 luni/src/main/files/cacerts/cf701eeb.0 luni/src/main/files/cacerts/d16a5865.0 luni/src/main/files/cacerts/d537fba6.0 luni/src/main/files/cacerts/d64f06f3.0 luni/src/main/files/cacerts/d777342d.0 luni/src/main/files/cacerts/d8274e24.0 luni/src/main/files/cacerts/dbc54cab.0 luni/src/main/files/cacerts/ddc328ff.0 luni/src/main/files/cacerts/e48193cf.0 luni/src/main/files/cacerts/e60bf0c0.0 luni/src/main/files/cacerts/e775ed2d.0 luni/src/main/files/cacerts/e7b8d656.0 luni/src/main/files/cacerts/e8651083.0 luni/src/main/files/cacerts/ea169617.0 luni/src/main/files/cacerts/eb375c3e.0 luni/src/main/files/cacerts/ed049835.0 luni/src/main/files/cacerts/ed524cf5.0 luni/src/main/files/cacerts/ee7cd6fb.0 luni/src/main/files/cacerts/f4996e82.0 luni/src/main/files/cacerts/f58a60fe.0 luni/src/main/files/cacerts/f61bff45.0 luni/src/main/files/cacerts/f80cc7f6.0 luni/src/main/files/cacerts/fac084d7.0 luni/src/main/files/cacerts/facacbc6.0 luni/src/main/files/cacerts/fde84897.0 luni/src/main/files/cacerts/ff783690.0 Change IntegralToString.intToHexString to take width argument to allow for leading zero padding. Updated existing callers to specify 0 padding desired. Add testing of new padding functionality. luni/src/main/java/java/lang/Character.java luni/src/main/java/java/lang/Integer.java luni/src/main/java/java/lang/IntegralToString.java luni/src/test/java/libcore/java/lang/IntegralToStringTest.java Improved to throw Exceptions with proper causes luni/src/main/java/java/security/KeyStore.java luni/src/main/java/java/security/Policy.java luni/src/main/java/java/security/cert/CertificateFactory.java luni/src/main/java/javax/crypto/Cipher.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSignature.java Indentation fixes luni/src/main/java/java/security/SecureRandom.java Fix X509CRLSelector.getIssuerNames to clone result and added test to cover this. luni/src/main/java/java/security/cert/X509CRLSelector.java luni/src/test/java/libcore/java/security/cert/X509CRLSelectorTest.java Fixed bug where we created an X500Principal via a String representation instead of from its original encoded bytes. This led to a difficult to track down bug where CA 418595b9.0 where the NativeCode.X509_NAME_hash of a Harmony (but not BouncyCastle) X509Certificate would not hash to the expected value because the encoded form used an ASN.1 PrintableString instead of the UTF8String form found in the original certificate. luni/src/main/java/org/apache/harmony/security/x501/Name.java Add a new RootKeyStoreSpi and register it as the AndroidCAStore. This new read-only KeyStore implementation that looks for certificates in $ANDROID_ROOT/etc/security/cacerts/ directory, which is /system/etc/security/cacerts/ on devices. The files are stored in the directory based on the older md5 based OpenSSL X509_NAME_hash function (now referred to as X509_NAME_hash_old in OpenSSL 1.0) luni/src/main/java/org/apache/harmony/xnet/provider/jsse/RootKeyStoreSpi.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/JSSEProvider.java Added OpenSSL compatible X509_NAME_hash and X509_NAME_hash_old functions for producting an int hash value from an X500Principal. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java Changed TrustManagerFactoryImpl to use AndroidCAStore for its default KeyStore luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerFactoryImpl.java Changed TrustManagerImpl to be AndroidCAStore aware. If it detects an AndroidCAStore, it avoids generating the acceptedIssuers array at constructions, since doing so would force us to parse all certificates in the store and the value is only typically used by SSLServerSockets when requesting a client certifcate. Because we dont load all the trusted CAs into the IndexedPKIXParameters at startup in the case of AndroidCAStore, we now check for new CAs when examining the cert chain for unnecessary TrustAnchors and for a newly discovered issuer at the end of the chain before validation. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java Updated KeyStoreTest to cope with read only KeyStore. Update test_cacerts_bks (now renamed test_cacerts) to use the AndroidCAStore for validating system CA certificate validity. Register AndroidCAStore as an expected KeyStore type with StandardNames. luni/src/test/java/libcore/java/security/KeyStoreTest.java support/src/test/java/libcore/java/security/StandardNames.java Added test of X500Principal serialization while investigating Name encoding issue. However, the actual Name bug was found and verified by the new test_cacerts test. luni/src/test/java/libcore/javax/security/auth/x500/X500PrincipalTest.java vendor/google Change canonical format for checked in cacerts to have PEM certificate at the top, as required by Harmonys X.509 CertificateFactory. tools/cacerts/certimport.py Change-Id: If0c9de430f13babb07f96a1177897c536f3db08d/"
,,0.5849,conscrypt,"Make CertInstaller installed CA certs trusted by applications via default TrustManager (2 of 6) frameworks/base Adding IKeyChainService APIs for CertInstaller and Settings use keystore/java/android/security/IKeyChainService.aidl libcore Improve exceptions to include more information luni/src/main/java/javax/security/auth/x500/X500Principal.java Move guts of RootKeyStoreSpi to TrustedCertificateStore, leaving only KeyStoreSpi methods. Added support for adding user CAs in a separate directory for system. Added support for removing system CAs by placing a copy in a sytem directory luni/src/main/java/org/apache/harmony/xnet/provider/jsse/RootKeyStoreSpi.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustedCertificateStore.java Formerly static methods on RootKeyStoreSpi are now instance methods on TrustedCertificateStore luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java Added test for NativeCrypto.X509_NAME_hash_old and X509_NAME_hash to make sure the implementing algorithms doe not change since TrustedCertificateStore depend on X509_NAME_hash_old (OpenSSL changed the algorithm from MD5 to SHA1 when moving from 0.9.8 to 1.0.0) luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java Extensive test of new TrustedCertificateStore behavior luni/src/test/java/org/apache/harmony/xnet/provider/jsse/TrustedCertificateStoreTest.java TestKeyStore improvements Refactored TestKeyStore to provide simpler createCA method (and internal createCertificate) Cleaned up to remove use of BouncyCastle specific X509Principal in the TestKeyStore API when the public X500Principal would do. Cleaned up TestKeyStore support methods to not throw Exception to remove need for static blocks for catch clauses in tests. support/src/test/java/libcore/java/security/TestKeyStore.java luni/src/test/java/libcore/java/security/KeyStoreTest.java luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java Added private PKIXParameters contructor for use by IndexedPKIXParameters to avoid wart of having to lookup and pass a TrustAnchor to satisfy the super-class sanity check. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/IndexedPKIXParameters.java luni/src/main/java/java/security/cert/PKIXParameters.java packages/apps/CertInstaller Change CertInstaller to call IKeyChainService.installCertificate for CA certs to pass them to the KeyChainServiceTest which will make them available to all apps through the TrustedCertificateStore. Change PKCS12 extraction to use AsyncTask. src/com/android/certinstaller/CertInstaller.java Added installCaCertsToKeyChain and hasCaCerts accessor for use by CertInstaller. Use hasUserCertificate() internally. Cleanup coding style. src/com/android/certinstaller/CredentialHelper.java packages/apps/KeyChain Added MANAGE_ACCOUNTS so that IKeyChainService.reset implementation can remove KeyChain accounts. AndroidManifest.xml Implement new IKeyChainService methods: Added IKeyChainService.installCaCertificate to install certs provided by CertInstaller using the TrustedCertificateStore. Added IKeyChainService.reset to allow Settings to remove the KeyChain accounts so that any app granted access to keystore credentials are revoked when the keystore is reset. src/com/android/keychain/KeyChainService.java packages/apps/Settings Changed com.android.credentials.RESET credential reset action to also call IKeyChainService.reset to remove any installed user CAs and remove KeyChain accounts to have AccountManager revoke credential granted to private keys removed during the RESET. src/com/android/settings/CredentialStorage.java Added toast text value for failure case res/values/strings.xml system/core Have init create world readable /data/misc/keychain to allow apps to access user added CA certificates installed by the CertInstaller. rootdir/init.rc Change-Id: Ief57672eea38b3eece23b14c94dedb9ea4713744/am 347b2a60: Avoid loading all CA certs into Zygote memory, lazily load instead (2 of 3) * commit 347b2a604114602da9bc4ae040278f74d11c2f51: Avoid loading all CA certs into Zygote memory, lazily load instead (2 of 3)/Avoid loading all CA certs into Zygote memory, lazily load instead (2 of 3) Previously the CA certs stored in the BKS KeyStore at /system/etc/security/cacerts.bks was loaded in the Zygote. As the the number of CAs are started to increase, this is causing more and more memory to be used for rarely used CAs. The new AndroidCAStore KeyStore implementation reads the CAs as needed out of individual PEM certificate files. The files can be efficiently found because they are named based on a hash CAs subject name, similar to OpenSSL. Bug: 1109242 Details: build Removing old cacerts.bks from GRANDFATHERED_ALL_PREBUILT and adding new cacerts directory to core PRODUCT_PACKAGES core/legacy_prebuilts.mk target/product/core.mk libcore cacerts build changes. Move cacerts prebuilt logic to new CaCerts.mk from NativeCode.mk where it didnt make sense. Updated Android.mks dalvik-host target to install new cacerts files. Android.mk CaCerts.mk NativeCode.mk Remove old cacerts.bks and add remove certimport.sh script used to generate it. Preserved the useful comments from certimport.sh in the new README.cacerts luni/src/main/files/cacerts.bks luni/src/main/files/certimport.sh luni/src/main/files/README.cacerts Recanonicalize cacerts files using updated vendor/google/tools/cacerts/certimport.py (See below discussion of certimport.py changes for details) luni/src/main/files/cacerts/00673b5b.0 luni/src/main/files/cacerts/03e16f6c.0 luni/src/main/files/cacerts/08aef7bb.0 luni/src/main/files/cacerts/0d188d89.0 luni/src/main/files/cacerts/10531352.0 luni/src/main/files/cacerts/111e6273.0 luni/src/main/files/cacerts/1155c94b.0 luni/src/main/files/cacerts/119afc2e.0 luni/src/main/files/cacerts/11a09b38.0 luni/src/main/files/cacerts/12d55845.0 luni/src/main/files/cacerts/17b51fe6.0 luni/src/main/files/cacerts/1920cacb.0 luni/src/main/files/cacerts/1dac3003.0 luni/src/main/files/cacerts/1dbdda5b.0 luni/src/main/files/cacerts/1dcd6f4c.0 luni/src/main/files/cacerts/1df5ec47.0 luni/src/main/files/cacerts/1e8e7201.0 luni/src/main/files/cacerts/1eb37bdf.0 luni/src/main/files/cacerts/219d9499.0 luni/src/main/files/cacerts/23f4c490.0 luni/src/main/files/cacerts/27af790d.0 luni/src/main/files/cacerts/2afc57aa.0 luni/src/main/files/cacerts/2e8714cb.0 luni/src/main/files/cacerts/2fa87019.0 luni/src/main/files/cacerts/2fb1850a.0 luni/src/main/files/cacerts/33815e15.0 luni/src/main/files/cacerts/343eb6cb.0 luni/src/main/files/cacerts/399e7759.0 luni/src/main/files/cacerts/3a3b02ce.0 luni/src/main/files/cacerts/3ad48a91.0 luni/src/main/files/cacerts/3c58f906.0 luni/src/main/files/cacerts/3c860d51.0 luni/src/main/files/cacerts/3d441de8.0 luni/src/main/files/cacerts/3e7271e8.0 luni/src/main/files/cacerts/418595b9.0 luni/src/main/files/cacerts/455f1b52.0 luni/src/main/files/cacerts/46b2fd3b.0 luni/src/main/files/cacerts/48478734.0 luni/src/main/files/cacerts/4d654d1d.0 luni/src/main/files/cacerts/4e18c148.0 luni/src/main/files/cacerts/4fbd6bfa.0 luni/src/main/files/cacerts/5021a0a2.0 luni/src/main/files/cacerts/5046c355.0 luni/src/main/files/cacerts/524d9b43.0 luni/src/main/files/cacerts/56b8a0b6.0 luni/src/main/files/cacerts/57692373.0 luni/src/main/files/cacerts/58a44af1.0 luni/src/main/files/cacerts/594f1775.0 luni/src/main/files/cacerts/5a3f0ff8.0 luni/src/main/files/cacerts/5a5372fc.0 luni/src/main/files/cacerts/5cf9d536.0 luni/src/main/files/cacerts/5e4e69e7.0 luni/src/main/files/cacerts/60afe812.0 luni/src/main/files/cacerts/635ccfd5.0 luni/src/main/files/cacerts/67495436.0 luni/src/main/files/cacerts/69105f4f.0 luni/src/main/files/cacerts/6adf0799.0 luni/src/main/files/cacerts/6e8bf996.0 luni/src/main/files/cacerts/6fcc125d.0 luni/src/main/files/cacerts/72f369af.0 luni/src/main/files/cacerts/72fa7371.0 luni/src/main/files/cacerts/74c26bd0.0 luni/src/main/files/cacerts/75680d2e.0 luni/src/main/files/cacerts/7651b327.0 luni/src/main/files/cacerts/76579174.0 luni/src/main/files/cacerts/7999be0d.0 luni/src/main/files/cacerts/7a481e66.0 luni/src/main/files/cacerts/7a819ef2.0 luni/src/main/files/cacerts/7d3cd826.0 luni/src/main/files/cacerts/7d453d8f.0 luni/src/main/files/cacerts/81b9768f.0 luni/src/main/files/cacerts/8470719d.0 luni/src/main/files/cacerts/84cba82f.0 luni/src/main/files/cacerts/85cde254.0 luni/src/main/files/cacerts/86212b19.0 luni/src/main/files/cacerts/87753b0d.0 luni/src/main/files/cacerts/882de061.0 luni/src/main/files/cacerts/895cad1a.0 luni/src/main/files/cacerts/89c02a45.0 luni/src/main/files/cacerts/8f7b96c4.0 luni/src/main/files/cacerts/9339512a.0 luni/src/main/files/cacerts/9685a493.0 luni/src/main/files/cacerts/9772ca32.0 luni/src/main/files/cacerts/9d6523ce.0 luni/src/main/files/cacerts/9dbefe7b.0 luni/src/main/files/cacerts/9f533518.0 luni/src/main/files/cacerts/a0bc6fbb.0 luni/src/main/files/cacerts/a15b3b6b.0 luni/src/main/files/cacerts/a3896b44.0 luni/src/main/files/cacerts/a7605362.0 luni/src/main/files/cacerts/a7d2cf64.0 luni/src/main/files/cacerts/ab5346f4.0 luni/src/main/files/cacerts/add67345.0 luni/src/main/files/cacerts/b0f3e76e.0 luni/src/main/files/cacerts/bc3f2570.0 luni/src/main/files/cacerts/bcdd5959.0 luni/src/main/files/cacerts/bda4cc84.0 luni/src/main/files/cacerts/bdacca6f.0 luni/src/main/files/cacerts/bf64f35b.0 luni/src/main/files/cacerts/c0cafbd2.0 luni/src/main/files/cacerts/c215bc69.0 luni/src/main/files/cacerts/c33a80d4.0 luni/src/main/files/cacerts/c527e4ab.0 luni/src/main/files/cacerts/c7e2a638.0 luni/src/main/files/cacerts/c8763593.0 luni/src/main/files/cacerts/ccc52f49.0 luni/src/main/files/cacerts/cdaebb72.0 luni/src/main/files/cacerts/cf701eeb.0 luni/src/main/files/cacerts/d16a5865.0 luni/src/main/files/cacerts/d537fba6.0 luni/src/main/files/cacerts/d64f06f3.0 luni/src/main/files/cacerts/d777342d.0 luni/src/main/files/cacerts/d8274e24.0 luni/src/main/files/cacerts/dbc54cab.0 luni/src/main/files/cacerts/ddc328ff.0 luni/src/main/files/cacerts/e48193cf.0 luni/src/main/files/cacerts/e60bf0c0.0 luni/src/main/files/cacerts/e775ed2d.0 luni/src/main/files/cacerts/e7b8d656.0 luni/src/main/files/cacerts/e8651083.0 luni/src/main/files/cacerts/ea169617.0 luni/src/main/files/cacerts/eb375c3e.0 luni/src/main/files/cacerts/ed049835.0 luni/src/main/files/cacerts/ed524cf5.0 luni/src/main/files/cacerts/ee7cd6fb.0 luni/src/main/files/cacerts/f4996e82.0 luni/src/main/files/cacerts/f58a60fe.0 luni/src/main/files/cacerts/f61bff45.0 luni/src/main/files/cacerts/f80cc7f6.0 luni/src/main/files/cacerts/fac084d7.0 luni/src/main/files/cacerts/facacbc6.0 luni/src/main/files/cacerts/fde84897.0 luni/src/main/files/cacerts/ff783690.0 Change IntegralToString.intToHexString to take width argument to allow for leading zero padding. Updated existing callers to specify 0 padding desired. Add testing of new padding functionality. luni/src/main/java/java/lang/Character.java luni/src/main/java/java/lang/Integer.java luni/src/main/java/java/lang/IntegralToString.java luni/src/test/java/libcore/java/lang/IntegralToStringTest.java Improved to throw Exceptions with proper causes luni/src/main/java/java/security/KeyStore.java luni/src/main/java/java/security/Policy.java luni/src/main/java/java/security/cert/CertificateFactory.java luni/src/main/java/javax/crypto/Cipher.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSignature.java Indentation fixes luni/src/main/java/java/security/SecureRandom.java Fix X509CRLSelector.getIssuerNames to clone result and added test to cover this. luni/src/main/java/java/security/cert/X509CRLSelector.java luni/src/test/java/libcore/java/security/cert/X509CRLSelectorTest.java Fixed bug where we created an X500Principal via a String representation instead of from its original encoded bytes. This led to a difficult to track down bug where CA 418595b9.0 where the NativeCode.X509_NAME_hash of a Harmony (but not BouncyCastle) X509Certificate would not hash to the expected value because the encoded form used an ASN.1 PrintableString instead of the UTF8String form found in the original certificate. luni/src/main/java/org/apache/harmony/security/x501/Name.java Add a new RootKeyStoreSpi and register it as the AndroidCAStore. This new read-only KeyStore implementation that looks for certificates in $ANDROID_ROOT/etc/security/cacerts/ directory, which is /system/etc/security/cacerts/ on devices. The files are stored in the directory based on the older md5 based OpenSSL X509_NAME_hash function (now referred to as X509_NAME_hash_old in OpenSSL 1.0) luni/src/main/java/org/apache/harmony/xnet/provider/jsse/RootKeyStoreSpi.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/JSSEProvider.java Added OpenSSL compatible X509_NAME_hash and X509_NAME_hash_old functions for producting an int hash value from an X500Principal. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java Changed TrustManagerFactoryImpl to use AndroidCAStore for its default KeyStore luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerFactoryImpl.java Changed TrustManagerImpl to be AndroidCAStore aware. If it detects an AndroidCAStore, it avoids generating the acceptedIssuers array at constructions, since doing so would force us to parse all certificates in the store and the value is only typically used by SSLServerSockets when requesting a client certifcate. Because we dont load all the trusted CAs into the IndexedPKIXParameters at startup in the case of AndroidCAStore, we now check for new CAs when examining the cert chain for unnecessary TrustAnchors and for a newly discovered issuer at the end of the chain before validation. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java Updated KeyStoreTest to cope with read only KeyStore. Update test_cacerts_bks (now renamed test_cacerts) to use the AndroidCAStore for validating system CA certificate validity. Register AndroidCAStore as an expected KeyStore type with StandardNames. luni/src/test/java/libcore/java/security/KeyStoreTest.java support/src/test/java/libcore/java/security/StandardNames.java Added test of X500Principal serialization while investigating Name encoding issue. However, the actual Name bug was found and verified by the new test_cacerts test. luni/src/test/java/libcore/javax/security/auth/x500/X500PrincipalTest.java vendor/google Change canonical format for checked in cacerts to have PEM certificate at the top, as required by Harmonys X.509 CertificateFactory. tools/cacerts/certimport.py Change-Id: If0c9de430f13babb07f96a1177897c536f3db08d/libcore key chain support Allow access to default IndexedPKIXParameters, similar to access to default TrustManager. Needed to allow framework to add/remove trusted CAs at runtime. luni/src/main/java/org/apache/harmony/xnet/provider/jsse/SSLParametersImpl.java luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerImpl.java Add test support for looking up a cert by an issuer for use in key chain tests. support/src/test/java/libcore/java/security/TestKeyStore.java Add test support SSLSocketFactory that sets desired client auth on each created socket. For use with MockWebServer for key chain testing. support/src/test/java/libcore/javax/net/ssl/TestSSLContext.java Change-Id: Iecdbd40c67f1673bda25a52b4e229156c805d564/"
,,0.0907,conscrypt,Avoid NullPointerException with IoUtils.closeQuietly Change-Id: Ibe9ab00205701ad5eaeb3b4299f1fe4508625d1b/Updating comment to reflect move from keychain uid to system uid Bug: 4970237 Change-Id: I9d207a3d226019d8f9e584b7be7f586176a133cc/TrustedCertificateStore additions for TrustedCredentials Fragment Avoid StrictMode violation by not touching file system in constructor Change-Id: Ic22387752617a5d8142c16c415b6996e62414442/
,,0.0798,conscrypt,Disable SSL compression Bug: 7079965 Change-Id: I8e060a827613e212bbcced66507fbf124bb04543/
,,0.0717,conscrypt,Disable SSL compression Bug: 7079965 Change-Id: I8e060a827613e212bbcced66507fbf124bb04543/
,,0.1509,conscrypt,DO NOT MERGE Disable SSL compression Bug: 7079965 Change-Id: I8e060a827613e212bbcced66507fbf124bb04543 modified: luni/src/main/java/libcore/net/ modified: luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java modified: luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java modified: luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java modified: luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java modified: luni/src/main/native/org_apache_harmony_xnet_provider_jsse_NativeCrypto.cpp modified: luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java/
,,0.1659,conscrypt,DO NOT MERGE Disable SSL compression Bug: 7079965 Change-Id: I8e060a827613e212bbcced66507fbf124bb04543 modified: luni/src/main/java/libcore/net/ modified: luni/src/main/java/org/apache/harmony/xnet/provider/jsse/NativeCrypto.java modified: luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLServerSocketImpl.java modified: luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSessionImpl.java modified: luni/src/main/java/org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl.java modified: luni/src/main/native/org_apache_harmony_xnet_provider_jsse_NativeCrypto.cpp modified: luni/src/test/java/org/apache/harmony/xnet/provider/jsse/NativeCryptoTest.java/
,,0.0878,conscrypt,"NativeCrypto: throw instead of return null We should not return null for items that cannot be extracted. Instead throw UnsupportedOperationException so we dont break the API contract. Change-Id: I09b0854c36f02b5b7ead2fb802f1454353b4cf6e/am cedaef9a: am bae3d395: Merge changes I2483af79,Id7c4d362,I733fe626 Via Android Git Automerger (1) and others * commit cedaef9ab329d1a9f07ac4af7e27dccfe9761f1d: NativeCrypto: fix up Channel ID test OpenSSL KeyFactory for DSA and EC NativeCrypto: fix Channel ID tests/am bae3d395: Merge changes I2483af79,Id7c4d362,I733fe626 Via Gerrit Code Review (1) and Kenny Root (1) * commit bae3d395f7a0fcb871d46d23ea61dd329742335d: NativeCrypto: fix up Channel ID test OpenSSL KeyFactory for DSA and EC NativeCrypto: fix Channel ID tests/"
,,0.08,conscrypt,"am cedaef9a: am bae3d395: Merge changes I2483af79,Id7c4d362,I733fe626 Via Android Git Automerger (1) and others * commit cedaef9ab329d1a9f07ac4af7e27dccfe9761f1d: NativeCrypto: fix up Channel ID test OpenSSL KeyFactory for DSA and EC NativeCrypto: fix Channel ID tests/am bae3d395: Merge changes I2483af79,Id7c4d362,I733fe626 Via Gerrit Code Review (1) and Kenny Root (1) * commit bae3d395f7a0fcb871d46d23ea61dd329742335d: NativeCrypto: fix up Channel ID test OpenSSL KeyFactory for DSA and EC NativeCrypto: fix Channel ID tests/"
,,0.3046,conscrypt,"Disallow KeyFactory.translateKey between public and private This fixes the bug where OpenSSL-backed KeyFactory instances (RSA, DSA, EC) could translateKey from PrivateKey to PublicKey and vice versa when presented with ""opaque"" keys whose translation is performed via their primary encoded form. (cherry picked from commit ddee4ef28dcce942e25fd7a24f27239cd74807fa) Change-Id: Ia24a2591a06ac82c5225a3a9e3069af7a01a0c37/Disallow KeyFactory.translateKey between public and private This fixes the bug where OpenSSL-backed KeyFactory instances (RSA, DSA, EC) could translateKey from PrivateKey to PublicKey and vice versa when presented with ""opaque"" keys whose translation is performed via their primary encoded form. Change-Id: Ia24a2591a06ac82c5225a3a9e3069af7a01a0c37/am 78b61b2d: am 95209c5c: Merge ""InvalidKeyException for ""opaque"" keys null getEncoded()"" * commit 78b61b2dc96618b39a7d95411492b097da88b1e2: InvalidKeyException for ""opaque"" keys null getEncoded()/InvalidKeyException for ""opaque"" keys null getEncoded() This makes OpenSSL-backed KeyFactory instances (RSA, DSA, EC) translateKey method throw InvalidKeyException for ""opaque"" keys whose getFormat() returns non-null while getEncoded() returns null. Prior to this change a NullPointerException was thrown. Change-Id: Ie0f3ec27356307338839f4c2b248b0e79578e19b/am cedaef9a: am bae3d395: Merge changes I2483af79,Id7c4d362,I733fe626 Via Android Git Automerger (1) and others * commit cedaef9ab329d1a9f07ac4af7e27dccfe9761f1d: NativeCrypto: fix up Channel ID test OpenSSL KeyFactory for DSA and EC NativeCrypto: fix Channel ID tests/am bae3d395: Merge changes I2483af79,Id7c4d362,I733fe626 Via Gerrit Code Review (1) and Kenny Root (1) * commit bae3d395f7a0fcb871d46d23ea61dd329742335d: NativeCrypto: fix up Channel ID test OpenSSL KeyFactory for DSA and EC NativeCrypto: fix Channel ID tests/"
,,0.1716,conscrypt,"am c79900d9: am a190a2ae: Merge ""NativeCrypto: fix more DSA/ECDSA key generation"" Via Android Git Automerger (1) and others * commit c79900d938d474e3e5271593cc7d274f752fac4e: NativeCrypto: fix more DSA/ECDSA key generation/am a190a2ae: Merge ""NativeCrypto: fix more DSA/ECDSA key generation"" Via Gerrit Code Review (1) and Kenny Root (1) * commit a190a2ae9fad41c91eefbcd087403311e28e2e6b: NativeCrypto: fix more DSA/ECDSA key generation/NativeCrypto: fix more DSA/ECDSA key generation * Add hidden API to pass along the EC curve name in ECParameterSpec. The lack of name passing made KeyFactory2Test fail because the reconstructed ECDSA key had explicit curve parameters instead of an OID naming the curve. * Fix some mixing of PKCS8/X509EncodedKeySpec in DSA/ECDSA KeyFactory implementations. * Fix the KeyFactory2Test to output more useful error messages. * Remove known failure which is no longer happening. * Change EC_GROUP_get_curve_name to return the ""shortName"" string which matches the EC_GROUP_new_by_curve_name Bug: 3483365 Change-Id: I0a80be88bef728b2177f3593cc3421fa47b79470/am cedaef9a: am bae3d395: Merge changes I2483af79,Id7c4d362,I733fe626 Via Android Git Automerger (1) and others * commit cedaef9ab329d1a9f07ac4af7e27dccfe9761f1d: NativeCrypto: fix up Channel ID test OpenSSL KeyFactory for DSA and EC NativeCrypto: fix Channel ID tests/am bae3d395: Merge changes I2483af79,Id7c4d362,I733fe626 Via Gerrit Code Review (1) and Kenny Root (1) * commit bae3d395f7a0fcb871d46d23ea61dd329742335d: NativeCrypto: fix up Channel ID test OpenSSL KeyFactory for DSA and EC NativeCrypto: fix Channel ID tests/NativeCrypto: fix Channel ID tests The NativeCryptoTest runs from a different class loader, so we need to make the OpenSSLECGroupContext public to use it from there. Also make sure we explicitly initialize the EC key at the beginning of the test. Change-Id: I733fe6263ef2ef72988987bf608cb806752033f5/"
,,0.0782,conscrypt,"am cedaef9a: am bae3d395: Merge changes I2483af79,Id7c4d362,I733fe626 Via Android Git Automerger (1) and others * commit cedaef9ab329d1a9f07ac4af7e27dccfe9761f1d: NativeCrypto: fix up Channel ID test OpenSSL KeyFactory for DSA and EC NativeCrypto: fix Channel ID tests/am bae3d395: Merge changes I2483af79,Id7c4d362,I733fe626 Via Gerrit Code Review (1) and Kenny Root (1) * commit bae3d395f7a0fcb871d46d23ea61dd329742335d: NativeCrypto: fix up Channel ID test OpenSSL KeyFactory for DSA and EC NativeCrypto: fix Channel ID tests/"
,,0.3231,conscrypt,"Disallow KeyFactory.translateKey between public and private This fixes the bug where OpenSSL-backed KeyFactory instances (RSA, DSA, EC) could translateKey from PrivateKey to PublicKey and vice versa when presented with ""opaque"" keys whose translation is performed via their primary encoded form. (cherry picked from commit ddee4ef28dcce942e25fd7a24f27239cd74807fa) Change-Id: Ia24a2591a06ac82c5225a3a9e3069af7a01a0c37/Disallow KeyFactory.translateKey between public and private This fixes the bug where OpenSSL-backed KeyFactory instances (RSA, DSA, EC) could translateKey from PrivateKey to PublicKey and vice versa when presented with ""opaque"" keys whose translation is performed via their primary encoded form. Change-Id: Ia24a2591a06ac82c5225a3a9e3069af7a01a0c37/am 78b61b2d: am 95209c5c: Merge ""InvalidKeyException for ""opaque"" keys null getEncoded()"" * commit 78b61b2dc96618b39a7d95411492b097da88b1e2: InvalidKeyException for ""opaque"" keys null getEncoded()/InvalidKeyException for ""opaque"" keys null getEncoded() This makes OpenSSL-backed KeyFactory instances (RSA, DSA, EC) translateKey method throw InvalidKeyException for ""opaque"" keys whose getFormat() returns non-null while getEncoded() returns null. Prior to this change a NullPointerException was thrown. Change-Id: Ie0f3ec27356307338839f4c2b248b0e79578e19b/am c79900d9: am a190a2ae: Merge ""NativeCrypto: fix more DSA/ECDSA key generation"" Via Android Git Automerger (1) and others * commit c79900d938d474e3e5271593cc7d274f752fac4e: NativeCrypto: fix more DSA/ECDSA key generation/am a190a2ae: Merge ""NativeCrypto: fix more DSA/ECDSA key generation"" Via Gerrit Code Review (1) and Kenny Root (1) * commit a190a2ae9fad41c91eefbcd087403311e28e2e6b: NativeCrypto: fix more DSA/ECDSA key generation/NativeCrypto: fix more DSA/ECDSA key generation * Add hidden API to pass along the EC curve name in ECParameterSpec. The lack of name passing made KeyFactory2Test fail because the reconstructed ECDSA key had explicit curve parameters instead of an OID naming the curve. * Fix some mixing of PKCS8/X509EncodedKeySpec in DSA/ECDSA KeyFactory implementations. * Fix the KeyFactory2Test to output more useful error messages. * Remove known failure which is no longer happening. * Change EC_GROUP_get_curve_name to return the ""shortName"" string which matches the EC_GROUP_new_by_curve_name Bug: 3483365 Change-Id: I0a80be88bef728b2177f3593cc3421fa47b79470/am ba77bdd5: am 60947887: Merge ""NativeCrypto: fix some DSA/ECDSA key generation"" Via Android Git Automerger (1) and others * commit ba77bdd5e195d1907c0de74bfb29c683037e8f01: NativeCrypto: fix some DSA/ECDSA key generation/am 60947887: Merge ""NativeCrypto: fix some DSA/ECDSA key generation"" Via Gerrit Code Review (1) and Kenny Root (1) * commit 6094788793ce294657e238ad32661ae88addc8a6: NativeCrypto: fix some DSA/ECDSA key generation/NativeCrypto: fix some DSA/ECDSA key generation We were trying to generate a public key from a private key spec which obviously doesnt work. Also fix the error messages that indicated public key when it meant private key. Change-Id: Ifae417bc3e4c56aced5b7583a34965c7f31c9c66/"
,,0.0884,conscrypt,Support user-installed CA certs for cert pinning. Additionally expose new isUserAddedCertificate() so clients can set policy for user-installed CA certs. Bug: 11257762 Change-Id: If45cd452ab76f393660b34594dcae464af0c0696/
,,0.1414,conscrypt,"am 652ff53b: Fix up concurrent use of APIs * commit 652ff53bd48ed61389337a42d8e50cdb7ace0fec: Fix up concurrent use of APIs/am fe959f9a: am 652ff53b: Fix up concurrent use of APIs * commit fe959f9a94cd0d09038401b509a637cc3caf152f: Fix up concurrent use of APIs/am 652ff53b: Fix up concurrent use of APIs * commit 652ff53bd48ed61389337a42d8e50cdb7ace0fec: Fix up concurrent use of APIs/Fix up concurrent use of APIs Code that is incorrectly using MessageDigest, Signature, or Mac in multiple threads simultaneously could cause a SEGV if OpenSSL is clearing out the MD_CTX at the same time another thread is trying to write to it. Make sure we initialize a new MD_CTX after each run to avoid crashing. The program using the instances concurrently is still wrong and will most likely get inconsistent results. Switch to using a context object instance to make sure we can hold a reference to the object during the native call. Bug: 8787753 Change-Id: I2518613a47cf03c811a29d17040804fc708394dd/"
,,0.1352,conscrypt,"am 652ff53b: Fix up concurrent use of APIs * commit 652ff53bd48ed61389337a42d8e50cdb7ace0fec: Fix up concurrent use of APIs/am fe959f9a: am 652ff53b: Fix up concurrent use of APIs * commit fe959f9a94cd0d09038401b509a637cc3caf152f: Fix up concurrent use of APIs/am 652ff53b: Fix up concurrent use of APIs * commit 652ff53bd48ed61389337a42d8e50cdb7ace0fec: Fix up concurrent use of APIs/Fix up concurrent use of APIs Code that is incorrectly using MessageDigest, Signature, or Mac in multiple threads simultaneously could cause a SEGV if OpenSSL is clearing out the MD_CTX at the same time another thread is trying to write to it. Make sure we initialize a new MD_CTX after each run to avoid crashing. The program using the instances concurrently is still wrong and will most likely get inconsistent results. Switch to using a context object instance to make sure we can hold a reference to the object during the native call. Bug: 8787753 Change-Id: I2518613a47cf03c811a29d17040804fc708394dd/"
,,0.1389,conscrypt,"am 652ff53b: Fix up concurrent use of APIs * commit 652ff53bd48ed61389337a42d8e50cdb7ace0fec: Fix up concurrent use of APIs/am fe959f9a: am 652ff53b: Fix up concurrent use of APIs * commit fe959f9a94cd0d09038401b509a637cc3caf152f: Fix up concurrent use of APIs/am 652ff53b: Fix up concurrent use of APIs * commit 652ff53bd48ed61389337a42d8e50cdb7ace0fec: Fix up concurrent use of APIs/Fix up concurrent use of APIs Code that is incorrectly using MessageDigest, Signature, or Mac in multiple threads simultaneously could cause a SEGV if OpenSSL is clearing out the MD_CTX at the same time another thread is trying to write to it. Make sure we initialize a new MD_CTX after each run to avoid crashing. The program using the instances concurrently is still wrong and will most likely get inconsistent results. Switch to using a context object instance to make sure we can hold a reference to the object during the native call. Bug: 8787753 Change-Id: I2518613a47cf03c811a29d17040804fc708394dd/"
,,0.0534,conscrypt,Use the new endpointVerificationAlgorithm API Use the new X509ExtendedTrustManager and use the new getEndpointVerificationAlgorithm to check the hostname during the handshake. Bug: 13103812 Change-Id: Id0a74d4ef21a7d7c90357a111f99b09971e535d0/
,,0.0771,conscrypt,"Call EVP_CIPHER_CTX_free instead of EVP_CIPHER_CTX_cleanup. The latter doesnt OpenSSL_free memory allocated by EVP_CIPHER_CTX_new. Its worth noting that EVP_CIPHER_CTX_free doesnt check the return value of EVP_CIPHER_CTX_cleanup so we cant throw if cleanup failed, but we were only ever calling this method from a finalizer anyway. bug: 18617384 Change-Id: Ida65e14ffbed41f56a59e2f5fe77289cac0f5947/Switch EVP_CIPHER_CTX to new style Bug: 16656908 Change-Id: Id519c20474a02c70e72d362bc84d26855a74fa33/"
,,0.1102,conscrypt,Fix fast path for OpenSSLECPublicKey The fast path of comparing two OpenSSLKey with their equality was checking if the other PublicKey was a OpenSSLPrivateKey which doesnt usually happen. Change-Id: Id499dbfaf94a4a2583d18f9b1aca2f6df3c1dfc1/
,,0.2459,conscrypt,"am 1eec6164: am 7c5b76c9: Stop printing out private key parameters * commit 1eec6164e015c1b25897007d967e3a5adaae1ffa: Stop printing out private key parameters/am 7c5b76c9: Stop printing out private key parameters * commit 7c5b76c986eb699e57c2018b3f86541333a3d2cb: Stop printing out private key parameters/Stop printing out private key parameters This could lead to an inadvertent leak of the private key parameters and is only useful for debugging, so just remove it. Bug: 21277110 Change-Id: Id7bfa376935e610cc58e8c7882d4634cfda8f7ce/"
,,0.2266,conscrypt,"am 720e937d: am 1a86c544: Stop printing out private key parameters, part 2 * commit 720e937db296e5fe8227c949093839cd68c74bdb: Stop printing out private key parameters, part 2/am 1a86c544: Stop printing out private key parameters, part 2 * commit 1a86c5445b4c89b34160dd959cc5faf2fb27df27: Stop printing out private key parameters, part 2/Stop printing out private key parameters, part 2 This could lead to an inadvertent leak of the private key parameters and is only useful for debugging, so just remove it. RSAPrivateCrtKey was missed the first time. Bug: 21277110 Change-Id: Iae2f72df210f595c5731b97c9954b838f04eb474/"
,,0.25,conscrypt,"am 1eec6164: am 7c5b76c9: Stop printing out private key parameters * commit 1eec6164e015c1b25897007d967e3a5adaae1ffa: Stop printing out private key parameters/am 7c5b76c9: Stop printing out private key parameters * commit 7c5b76c986eb699e57c2018b3f86541333a3d2cb: Stop printing out private key parameters/Stop printing out private key parameters This could lead to an inadvertent leak of the private key parameters and is only useful for debugging, so just remove it. Bug: 21277110 Change-Id: Id7bfa376935e610cc58e8c7882d4634cfda8f7ce/"
,,0.1694,conscrypt,"Move CloseGuard and BlockGuard to stubs This actually didnt work, so move it to stubs so we dont confuse the ClassLoader and cause crazy issues where methods from this implementation were running against instances from another implementation. (cherry picked from commit 2e939432331875f0f3dc6e9ccde4022bd25a4d84) Bug: 23597696 Change-Id: I36d9aa6f378df7aef71e93cc08b57044aa670aad/Move CloseGuard and BlockGuard to stubs This actually didnt work, so move it to stubs so we dont confuse the ClassLoader and cause crazy issues where methods from this implementation were running against instances from another implementation. Bug: 23597696 Change-Id: I36d9aa6f378df7aef71e93cc08b57044aa670aad/"
,,0.1598,conscrypt,"Move CloseGuard and BlockGuard to stubs This actually didnt work, so move it to stubs so we dont confuse the ClassLoader and cause crazy issues where methods from this implementation were running against instances from another implementation. (cherry picked from commit 2e939432331875f0f3dc6e9ccde4022bd25a4d84) Bug: 23597696 Change-Id: I36d9aa6f378df7aef71e93cc08b57044aa670aad/Move CloseGuard and BlockGuard to stubs This actually didnt work, so move it to stubs so we dont confuse the ClassLoader and cause crazy issues where methods from this implementation were running against instances from another implementation. Bug: 23597696 Change-Id: I36d9aa6f378df7aef71e93cc08b57044aa670aad/"
,,0.2698,conscrypt,X509_get_pubkey should default to checked exception am: b1fc23213e am: c3c6567dbd am: 6d607ca682 * commit 6d607ca6821b66f4aa91de47704af66a6176f9c7: X509_get_pubkey should default to checked exception Change-Id: I5bd04385b698e430b910eddc7e5f9ff97ba1c9b5/X509_get_pubkey should default to checked exception am: b1fc23213e am: c3c6567dbd * commit c3c6567dbd7e09ceda2fd6469ac548de837e09e1: X509_get_pubkey should default to checked exception Change-Id: Ibd051f3c1f352f7d242f9c399e76452b04886580/X509_get_pubkey should default to checked exception am: b1fc23213e * commit b1fc23213ee8cb2ee86dfb6e97fd34572c7b784c: X509_get_pubkey should default to checked exception Change-Id: I57238a705fad3acc08abdf90fd708173ef363ff8/X509_get_pubkey should default to checked exception An invalid certificate would cause a RuntimeException to crop up instead of a checked exception. Instead throw an InvalidKeyException by default which can be caught and handled. Bug: 28574453 Change-Id: Ib9e92c96a35d2d330a4870175a4eb5fb24fc4026/
,,0.065,conscrypt,Remove unused imports left over from removing OpenSSL code Test: lunch aosp_bullhead-userdebug; make Change-Id: I5b8cdcfbe45a866005209ed2e6f365a1378d46d5/
,,0.1586,conscrypt,"Cleaning up JNI exceptions (#252) There were a bunch of exceptions that are being thrown from JNI methods that arent currently declared. Also removed a few unused JNI methods and duplicate constants, preferring those from NativeConstants./Some parsing and serializing fixes. (#219) This fixes a memory leak in NativeCrypto_i2d_PKCS7. It never frees derBytes. Also removing a dependency on the legacy ASN.1 stack./"
,,0.08800000000000001,conscrypt,"Avoid util class pattern. (#282) Its unusual in C++ to use classes for utility methods (common in Java). Reworking the utility classes to be just namespaces with global variables and methods./Lint C++ code and fix errors (#270) Using cpplint, if available on the platform. (e.g. pip install cpplint)/"
,,0.1586,conscrypt,"Cleaning up JNI exceptions (#252) There were a bunch of exceptions that are being thrown from JNI methods that arent currently declared. Also removed a few unused JNI methods and duplicate constants, preferring those from NativeConstants./Some parsing and serializing fixes. (#219) This fixes a memory leak in NativeCrypto_i2d_PKCS7. It never frees derBytes. Also removing a dependency on the legacy ASN.1 stack./"
,,0.0979,conscrypt,"Implement AlgorithmParameters.GCM in Conscrypt. (#217) * Implement AlgorithmParameters.GCM in Conscrypt. In order to handle the ASN.1 encoding, exposes a subset of the ASN.1 encoding API from BoringSSL in NativeCrypto. * Rename {write,read}_integer to {write,read}_uint64. Add a UniquePtr to ensure exceptions dont cause a memory leak./"
,,0.1618,conscrypt,"Cleaning up JNI exceptions (#252) There were a bunch of exceptions that are being thrown from JNI methods that arent currently declared. Also removed a few unused JNI methods and duplicate constants, preferring those from NativeConstants./Some parsing and serializing fixes. (#219) This fixes a memory leak in NativeCrypto_i2d_PKCS7. It never frees derBytes. Also removing a dependency on the legacy ASN.1 stack./"
,,0.1618,conscrypt,"Cleaning up JNI exceptions (#252) There were a bunch of exceptions that are being thrown from JNI methods that arent currently declared. Also removed a few unused JNI methods and duplicate constants, preferring those from NativeConstants./Some parsing and serializing fixes. (#219) This fixes a memory leak in NativeCrypto_i2d_PKCS7. It never frees derBytes. Also removing a dependency on the legacy ASN.1 stack./"
,,0.1019,conscrypt,Some parsing and serializing fixes. (#219) This fixes a memory leak in NativeCrypto_i2d_PKCS7. It never frees derBytes. Also removing a dependency on the legacy ASN.1 stack./
,,0.1019,conscrypt,Some parsing and serializing fixes. (#219) This fixes a memory leak in NativeCrypto_i2d_PKCS7. It never frees derBytes. Also removing a dependency on the legacy ASN.1 stack./
,,0.3199,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.3212,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.3186,conscrypt,"Fix typo: exludes to excludes (#414)/Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.3123,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.2855,conscrypt,"Update more testing infrastructure. (#395) * Update testing build rules. * Move TestKeyStore to org.conscrypt. * Fix up a couple tests so they work in AOSP./Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.3174,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.3161,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.1,conscrypt,"Clean up exception throwing in native code. (#417) Change throwExceptionIfNecessary to throwExceptionFromBoringSSLError. The definition changes from throwing an exception if theres an error on the stack to having a precondition of having an error on the stack. This makes its behavior and the expected usage more clear (it always results in an exception pending). This also should let us know if were encountering return-failure-but-dont-stack-an-error situations that we didnt know about. Normalize function names to throwFooException. Ensure that we always return immediately after throwing an exception. Some call sites allowed the exception-throwing branch to fall through to the return statement from a non-throwing branch, which is unclear, since that return statement is useless, and runs the risk of additional code being inserted after the exception. Fixes"
,,0.1246,conscrypt,"Clean up exception throwing in native code. (#417) Change throwExceptionIfNecessary to throwExceptionFromBoringSSLError. The definition changes from throwing an exception if theres an error on the stack to having a precondition of having an error on the stack. This makes its behavior and the expected usage more clear (it always results in an exception pending). This also should let us know if were encountering return-failure-but-dont-stack-an-error situations that we didnt know about. Normalize function names to throwFooException. Ensure that we always return immediately after throwing an exception. Some call sites allowed the exception-throwing branch to fall through to the return statement from a non-throwing branch, which is unclear, since that return statement is useless, and runs the risk of additional code being inserted after the exception. Fixes"
,,0.1129,conscrypt,"Clean up exception throwing in native code. (#417) Change throwExceptionIfNecessary to throwExceptionFromBoringSSLError. The definition changes from throwing an exception if theres an error on the stack to having a precondition of having an error on the stack. This makes its behavior and the expected usage more clear (it always results in an exception pending). This also should let us know if were encountering return-failure-but-dont-stack-an-error situations that we didnt know about. Normalize function names to throwFooException. Ensure that we always return immediately after throwing an exception. Some call sites allowed the exception-throwing branch to fall through to the return statement from a non-throwing branch, which is unclear, since that return statement is useless, and runs the risk of additional code being inserted after the exception. Fixes"
,,0.3621,conscrypt,"Move session value API into ProvidedSessionDecorator. (#389) * Move session value API into ProvidedSessionDecorator. The application-level value API on SSLSession objects makes them mutable, which means that using singleton objects (like we do with SSLNullSession) or swapping out implementations (like we do with ActiveSession/SessionSnapshot) doesnt work properly if you actually want to use this API. By moving it into ProvidedSessionDecorator, it can be used without any of these problems. * Rename ProvidedSessionDecorator to ExternalSession./Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.3174,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.3212,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.3135,conscrypt,"Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.3582,conscrypt,"Move session value API into ProvidedSessionDecorator. (#389) * Move session value API into ProvidedSessionDecorator. The application-level value API on SSLSession objects makes them mutable, which means that using singleton objects (like we do with SSLNullSession) or swapping out implementations (like we do with ActiveSession/SessionSnapshot) doesnt work properly if you actually want to use this API. By moving it into ProvidedSessionDecorator, it can be used without any of these problems. * Rename ProvidedSessionDecorator to ExternalSession./Refactoring externalization of SSLSessions (#383) This is an implementation to This change attempts to provide more consistency to the session that is returned to the caller by `ConscryptEngine`/`ConscryptFileDescriptorSocket`. Main changes: New interface ConscryptSession adds a few methods currently only defined by ActiveSession New interface SessionDecorator that defines getDelegate() New class ProvidedSessionDecorator delegates to an external provider of the ""current"" session. The provider implementations are in ConscryptEngine and ConscryptFileDescriptorSocket. New class SessionSnapshot that takes a snapshot of any ConscryptSession. Changed ActiveSession and SSLNullSession to implement ConscryptSession. Updated ConscryptEngine/ConscryptFileDescriptorSocket to create a SessionSnapshot when closing. Additional cleanup: Split out Java7SessionWrapper into two classes: Java7ExtendedSSLSession and Java8ExtendedSSLSession. The Java 8 version no longer requires reflection and is more consistent with platform-specific code elsewhere. Both classes implement SessionDecorator. Renamed SslWrapper->NativeSsl and SslSessionWrapper->NativeSslSession for clarity, since the term ""wrapper"" was being overloaded. Fixes"
,,0.1937,conscrypt,"Move session value API into ProvidedSessionDecorator. (#389) * Move session value API into ProvidedSessionDecorator. The application-level value API on SSLSession objects makes them mutable, which means that using singleton objects (like we do with SSLNullSession) or swapping out implementations (like we do with ActiveSession/SessionSnapshot) doesnt work properly if you actually want to use this API. By moving it into ProvidedSessionDecorator, it can be used without any of these problems. * Rename ProvidedSessionDecorator to ExternalSession./"
,,0.1467,frostwire,"[android] InMobi/Offers maintenance after 0 impressions from InMobi Moved InMobi constant to InMobiAdNetwork UIUtils.inUIThread() new convenience method InMobi checks/flags to avoid double interstitial loading Offer checks to avoid too rapid network re-initialization Raised InMobi reload period from 20secs to 60secs InMobiInterstitialListener now implements InMobiInterstitial.InterstitialAdListener2, as InMobiInterstitial.InterstitialAdListener is now deprecated and will be phased out soon InMobi InterstitialReloader avoids double interstitial loading It seems InMobi changed account parameters, everything should be working but error says to contact partner. I believe there was a conflict between MoPub and InMobi and thats why we were getting the double loading of InMobi interstitials, most likely will remove InMobi manual integration next (while leaving the libraries for MoPub to use)/"
,,0.068,frostwire,[all] fixes logic bug in update manager that made wrong (old) update message show instead of the one with the bullets/
,,0.0737,frostwire,[desktop] cleanup unthrown exceptions/
,,0.078,frostwire,[desktop] cleanup unthrown exceptions/
,,0.0737,frostwire,[desktop] cleanup unthrown exceptions/
,,0.0648,frostwire,[desktop] crash checking updates on first install/
,,0.0628,frostwire,[desktop] crash checking updates on first install/
,,0.0891,frostwire,[android] using execute instead of submit to avoid unused creation of Future objects/
,,0.1289,frostwire,"[android] added private Engine empty constructor for convenience, added instance limit of it to debug VM policy/[android] import cleanup in Debug class/[android] Avoid too much recursion checking for context leaks on Paint and LocaleList object fields/[android] minor refactor in Debug class (the JIT should be better by now)/"
,,0.0609,frostwire,[android] error message fix/
,,0.09699999999999999,frostwire,"[android] added private Engine empty constructor for convenience, added instance limit of it to debug VM policy/"
,,0.0599,frostwire,[android] IabHelper NPE check/
,,0.0669,frostwire,[desktop] Search Database factory reset on clear failure/
,,0.0718,frostwire,"[android] fixed demux progress report, was using wrong file to get length/"
,,0.0665,frostwire,[android] code refactor in SongAdapter to avoid a new tuple class/[android] use ContextResultTask and avoid creating WeakReferences manually/
,,0.0738,frostwire,[android] fix TransferStateStrings singleton creation pattern Returning outside synchronized block is a mistake in multicore environment/
,,0.0712,frostwire,[android] should solve issue with non-responding keyword filter first time its flipped to negation/
,,0.0939,frostwire,[android] bug fix java.nio.charset.IllegalCharsetNameException Replace wrong assumption StandardCharsets.UTF_8.toString() StandardCharsets.UTF_8.name()/
,,0.1084,frostwire,[android] bug fix java.nio.charset.IllegalCharsetNameException Replace wrong assumption StandardCharsets.UTF_8.toString() StandardCharsets.UTF_8.name()/[common/desktop] avoid numeric overflow when dealing with large file sizes jlibtorrent needs a few fixes/
,,0.1084,frostwire,[android] bug fix java.nio.charset.IllegalCharsetNameException Replace wrong assumption StandardCharsets.UTF_8.toString() StandardCharsets.UTF_8.name()/[common/desktop] avoid numeric overflow when dealing with large file sizes jlibtorrent needs a few fixes/
,,0.1066,frostwire,[android] bug fix java.nio.charset.IllegalCharsetNameException Replace wrong assumption StandardCharsets.UTF_8.toString() StandardCharsets.UTF_8.name()/[common/desktop] avoid numeric overflow when dealing with large file sizes jlibtorrent needs a few fixes/
,,0.0939,frostwire,[android] bug fix java.nio.charset.IllegalCharsetNameException Replace wrong assumption StandardCharsets.UTF_8.toString() StandardCharsets.UTF_8.name()/
,,0.1103,frostwire,[common/desktop] new Platform.isUIThread() Implementation for DesktopPlatform with SwingUtilities. Put back a check on SoundcloudSearchResult.getDownloadURL() to throw a runtime exception if invoked from a main UI thread/
,,0.0645,frostwire,[desktop] make sure SC.getDownloadURL() never happens on main thread other fixes for copy paste url downloads/
,,0.11199999999999999,frostwire,[common/desktop] new Platform.isUIThread() Implementation for DesktopPlatform with SwingUtilities. Put back a check on SoundcloudSearchResult.getDownloadURL() to throw a runtime exception if invoked from a main UI thread/
,,0.1396,frostwire,"[android/common] Fixed synchronization issues with Keyword detector Tried: Minimize synchronized block spans Dont synchronize the collection object, use an Object as the monitor instead The issue was that on one end the submission time was measured with SystemClock.elapsedRealtime, and on the other end with System.currentTimeMillis I might just remove all mentions of SystemClock.ellapsedRealtime from the code base to avoid these issues in the future Some cleanups/"
,,0.1085,frostwire,[common/desktop] new Platform.isUIThread() Implementation for DesktopPlatform with SwingUtilities. Put back a check on SoundcloudSearchResult.getDownloadURL() to throw a runtime exception if invoked from a main UI thread/
,,0.1258,frostwire,"[android] protect UI thread from unexpected crashes when posting to main looper if ran on development environment the crash still happens, should lower to some extent a lot of vague crashes posting messages from unknown locations to the main thread/"
,,0.1148,frostwire,"[android] array out of bounds issue adding uiTransfer to TransferManager, mopub banner on basic home/[android] protect UI thread from unexpected crashes when posting to main looper if ran on development environment the crash still happens, should lower to some extent a lot of vague crashes posting messages from unknown locations to the main thread/"
,,0.1289,frostwire,"[android] protect UI thread from unexpected crashes when posting to main looper if ran on development environment the crash still happens, should lower to some extent a lot of vague crashes posting messages from unknown locations to the main thread/"
,,0.0588,frostwire,[common] keyword search encoding bug fix/
,,0.0609,frostwire,[common] keyword search encoding bug fix/
,,0.0648,javacpp,* Fix `SharedPtrAdapter` and `UniquePtrAdapter` failing to take ownership of temporary objects/
,,0.1586,javacpp,"* Deprecate but also fix `Indexer.rows()`, `cols()`, `width()`, `height()`, and `channels()` (pull * Provide `ULongIndexer`, treating array and buffer data as unsigned 64-bit integers, for convenience (issue Also consolidate some value getters and setters for `ByteIndexer`/ * Provide `UIntIndexer`, treating array and buffer data as unsigned 32-bit integers, for convenience (issue"
,,0.11199999999999999,javacpp,"* Provide `ULongIndexer`, treating array and buffer data as unsigned 64-bit integers, for convenience (issue Also consolidate some value getters and setters for `ByteIndexer`/"
,,0.1102,javacpp,"* Provide `ULongIndexer`, treating array and buffer data as unsigned 64-bit integers, for convenience (issue Also consolidate some value getters and setters for `ByteIndexer`/"
,,0.1194,javacpp,"* Provide `ULongIndexer`, treating array and buffer data as unsigned 64-bit integers, for convenience (issue Also consolidate some value getters and setters for `ByteIndexer`/"
,,0.1065,javacpp,"* Provide `ULongIndexer`, treating array and buffer data as unsigned 64-bit integers, for convenience (issue Also consolidate some value getters and setters for `ByteIndexer`/"
,,0.0692,jna,"* include/ffi.h.in: Try to work around messy header problem with PACKAGE and VERSION. * configure: Rebuilt. * configure.in: Change version to 2.00-beta. * fficonfig.h.in: Rebuilt. * acconfig.h (FFI_NO_STRUCTS, FFI_NO_RAW_API): Define. * src/x86/ffi.c (ffi_raw_call): Rename./"
,,0.11900000000000001,jna,"Pulled varargs test out of the loop to avoid checking on each parameter The Method#isVarargs method is now referenced statically to avoid costs of looking it up on each native method call with at least one parameter. This also can save a lot of memory, since on every Class#getMethod() call a new Method object is returned. Added null check uses the double-checked locking to speed up subsequent calls to the same function. Made Function$Handler$FunctionInfo immutable class to make double check locking work correctly. Added description of changes to CHANGES.md/"
,,0.19,jna,"Merge pull request from matthiasblaesing/varargs_fix Fix calling functions with only VarArgs (without fixed parameters)/Fix calling functions with only VarArgs (without fixed parameters) The change in 50eb820c129d298c26035f98e6a93aed9fc52257 introduces the detection of the count of the fixed parameters of a VarArgs call. The logic detecting whether this call was even a VarArgs call was changed to be true if fixed parameter count is not null. This is not correct, as the method call could contain only fixed parameters or a VarArgs call could be done without fixed parameters. Closes:"
,,0.1105,jna,"Pulled varargs test out of the loop to avoid checking on each parameter The Method#isVarargs method is now referenced statically to avoid costs of looking it up on each native method call with at least one parameter. This also can save a lot of memory, since on every Class#getMethod() call a new Method object is returned. Added null check uses the double-checked locking to speed up subsequent calls to the same function. Made Function$Handler$FunctionInfo immutable class to make double check locking work correctly. Added description of changes to CHANGES.md/"
,,0.1256,jna,"Changing Class<T> to Class<T extends Library> for Native.loadLibrary It was possible to pass a non-library class into this method and get a runtime exception, when the same check can be done at compile-time, so this fix changes it to be done at compile-time. After erasure, with this change the return type changes from `Object` to `Library`. So as far as backwards compatibility: 1. If you were assigning the result to `Object`, that will still work 2. If you were passing something that wasnt a `Class<? extends Library>`, your code will now not compile, instead of failing at runtime. 3. I cant remember the rules for binary compatibility. Fixes pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/"
,,0.0858,jna,Ensure exception message includes all faulty field information (fixes broken test)/Merge pull request from ebourg/master Exception chaining for com.sun.jna.Structure/Exception chaining for com.sun.jna.Structure/
,,0.1038,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/
,,0.1038,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/
,,0.1038,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/
,,0.077,jna,Access ComponentPeer reflectively The method is part of the apple JDK with was replaced by openjdk. Module isolation wont be a problem there./
,,0.1359,jna,"Update javadoc, revise recommended getLastError/LastErrorException usage/Merge pull request from lgoldstein/duplicate-methods Found and fixed duplicate method definitions for the same API/Found and fixed duplicate method definitions for the same API/"
,,0.141,jna,"Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/Merge pull request from matthiasblaesing/fix_unittests Fix unittests (IShellFolderTest#testEnumObjects) still fails on amd64)/Fix unittests (IShellFolderTest#testEnumObjects) still fails on amd64) MonitorFromPoint takes a structure, not a reference to a structure, so function definition was wrong The last to ""KnownFolters"" dont resolve on Win10/"
,,0.1038,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/
,,0.1038,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/
,,0.1017,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/
,,0.0588,jna,add missing methods on opaque pointer fix NPE/
,,0.1586,jna,"Fix building tests on openjdk 6/Merge pull request from matthiasblaesing/varargs_fix Fix calling functions with only VarArgs (without fixed parameters)/Fix calling functions with only VarArgs (without fixed parameters) The change in 50eb820c129d298c26035f98e6a93aed9fc52257 introduces the detection of the count of the fixed parameters of a VarArgs call. The logic detecting whether this call was even a VarArgs call was changed to be true if fixed parameter count is not null. This is not correct, as the method call could contain only fixed parameters or a VarArgs call could be done without fixed parameters. Closes:"
,,0.0677,jna,avoid using deprecated setTypeMapper/address issue
,,0.0672,jna,"fix 2 failing w32ce tests/re-enable WCE failing tests, fixes to allow proper phoneME operation w/r/t AWT classes/avoid crash with really long strings/"
,,0.0639,jna,Fix testCustomizeDefaultStringEncoding for when default file.encoding/
,,0.1398,jna,Merge pull request from lgoldstein/duplicate-methods Found and fixed duplicate method definitions for the same API/Found and fixed duplicate method definitions for the same API/
,,0.1038,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/
,,0.1038,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/
,,0.1038,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/
,,0.0809,jna,"Commenting out Netapi32UtilTest.testGetUserInfo The default behaviour of getUserInfo() in the absence of a domain name seems to be to fail, but this was already occurring without my fix./"
,,0.1454,jna,Merge pull request from lgoldstein/duplicate-methods Found and fixed duplicate method definitions for the same API/Found and fixed duplicate method definitions for the same API/
,,0.0588,jna,address issue
,,0.1216,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/Merge pull request from matthiasblaesing/fix_unittests Fix unittests (IShellFolderTest#testEnumObjects) still fails on amd64)/Fix javadoc warnings/
,,0.1197,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/Merge pull request from matthiasblaesing/fix_unittests Fix unittests (IShellFolderTest#testEnumObjects) still fails on amd64)/Fix javadoc warnings/
,,0.1398,jna,Merge pull request from lgoldstein/duplicate-methods Found and fixed duplicate method definitions for the same API/Found and fixed duplicate method definitions for the same API/
,,0.1427,jna,"Merge pull request from matthiasblaesing/safearray Implement SAFEARRAY access and bugfix VARIANT/VARIANT: Fix wrong asumptions, datatypes and add add unittests/"
,,0.1427,jna,"Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/Merge pull request from matthiasblaesing/fix_unittests Fix unittests (IShellFolderTest#testEnumObjects) still fails on amd64)/Fix unittests (IShellFolderTest#testEnumObjects) still fails on amd64) MonitorFromPoint takes a structure, not a reference to a structure, so function definition was wrong The last to ""KnownFolters"" dont resolve on Win10/"
,,0.1444,jna,"Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/Merge pull request from matthiasblaesing/fix_unittests Fix unittests (IShellFolderTest#testEnumObjects) still fails on amd64)/Fix unittests (IShellFolderTest#testEnumObjects) still fails on amd64) MonitorFromPoint takes a structure, not a reference to a structure, so function definition was wrong The last to ""KnownFolters"" dont resolve on Win10/"
,,0.2862,jna,Merge pull request from matthiasblaesing/safearray Implement SAFEARRAY access and bugfix VARIANT/Implement SAFEARRAY access Bind more functions from OleAut32.dll Fix bug in function bindings from OleAut32.dll (long vs. LONG) Ensure SAFEARRAY.rgsabound is completely accessible Modify Variant#getValue and Variant#setValue to allow flexible access to data Add object oriented helper methods to SAFEARRAY and move functionality from limited methods in OleAutoUtil to SAFEARRAY Add unittests based on windows search provider that excercise SAFEARRAY functions Added a helper for optimized conversion from SAFEARRAY to Object[] Closes
,,0.2947,jna,Merge pull request from matthiasblaesing/safearray Implement SAFEARRAY access and bugfix VARIANT/Implement SAFEARRAY access Bind more functions from OleAut32.dll Fix bug in function bindings from OleAut32.dll (long vs. LONG) Ensure SAFEARRAY.rgsabound is completely accessible Modify Variant#getValue and Variant#setValue to allow flexible access to data Add object oriented helper methods to SAFEARRAY and move functionality from limited methods in OleAutoUtil to SAFEARRAY Add unittests based on windows search provider that excercise SAFEARRAY functions Added a helper for optimized conversion from SAFEARRAY to Object[] Closes
,,0.2893,jna,Merge pull request from matthiasblaesing/safearray Implement SAFEARRAY access and bugfix VARIANT/Implement SAFEARRAY access Bind more functions from OleAut32.dll Fix bug in function bindings from OleAut32.dll (long vs. LONG) Ensure SAFEARRAY.rgsabound is completely accessible Modify Variant#getValue and Variant#setValue to allow flexible access to data Add object oriented helper methods to SAFEARRAY and move functionality from limited methods in OleAutoUtil to SAFEARRAY Add unittests based on windows search provider that excercise SAFEARRAY functions Added a helper for optimized conversion from SAFEARRAY to Object[] Closes binding of TypeLib bindings fix wrong function signature in ITypeLib/TypeLib for FindName/IsName and adjust callers TypeLib#ReleaseLibAttr did not pass parameter to native method LPOLESTR.ByReference is derived from wrong type (BSTR instead of LPOLESTR) Fix/Add unittests/
,,0.1435,jna,Merge pull request from lgoldstein/duplicate-methods Found and fixed duplicate method definitions for the same API/Found and fixed duplicate method definitions for the same API/
,,0.1393,jna,"Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/Merge pull request from matthiasblaesing/fix_unittests Fix unittests (IShellFolderTest#testEnumObjects) still fails on amd64)/Fix unittests (IShellFolderTest#testEnumObjects) still fails on amd64) MonitorFromPoint takes a structure, not a reference to a structure, so function definition was wrong The last to ""KnownFolters"" dont resolve on Win10/"
,,0.1287,jna,Merge pull request from lgoldstein/duplicate-methods Found and fixed duplicate method definitions for the same API/Found and fixed duplicate method definitions for the same API/
,,0.2818,jna,"Make conversion to/from java in c.s.j.p.win32.COM.util more flexible ProxyObject and Callback both use the Convert class as helper to convert java object to/from VARIANT. This change adds more flexibility and adds tests to fixate and check conversion./Merge pull request from matthiasblaesing/safearray Implement SAFEARRAY access and bugfix VARIANT/Implement SAFEARRAY access Bind more functions from OleAut32.dll Fix bug in function bindings from OleAut32.dll (long vs. LONG) Ensure SAFEARRAY.rgsabound is completely accessible Modify Variant#getValue and Variant#setValue to allow flexible access to data Add object oriented helper methods to SAFEARRAY and move functionality from limited methods in OleAutoUtil to SAFEARRAY Add unittests based on windows search provider that excercise SAFEARRAY functions Added a helper for optimized conversion from SAFEARRAY to Object[] Closes Fix wrong asumptions, datatypes and add add unittests/"
,,0.0843,jna,Merge pull request from matthiasblaesing/extend_comexception Update COMException to contain HRESULT and introduce COMInvokeException/Add COMException changes to CHANGES.md and adjust msoffice demo to follow the changes/
,,0.1038,jna,Merge pull request from matthiasblaesing/safearray Implement SAFEARRAY access and bugfix VARIANT/
,,0.3656,jna,"Merge pull request from matthiasblaesing/extend_comexception Update COMException to contain HRESULT and introduce COMInvokeException/Introduce COMInvokeException and prevent a memory leak in case of failure Only a subset of errors contain exception data. Only calls to IDispatch#Invoke generate exception details and potentially a ""fault index"" for parameters. Therefore these are separated into an extended COMInvokeException. Additionally the EXCEPINFO data was not freeed, leading to memory leaks in in repeated calls. Add unittest for COMExceptions and correct Exception extraction in Factory/Rework COMException to also carry the HRESULT This allows filtering exception based on HRESULT value. For example GetActiveObject returns a HRESULT of 0x800401E3 (MK_E_UNAVAILABLE) if the target object is not active. For many cases this is not an error. A valid construct would be: public void getExistingDemoObjectOrCreate() { DemoObject obj; try { return factory.fetchObject(DemoObject.class); } catch (COMException ex) { if(ex.matchesHresult(WinError.MK_E_UNAVAILABLE)) { return factory.createObject(DemoObject.class); } else { throw ex; } } }/"
,,0.1236,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/Merge pull request from matthiasblaesing/fix_unittests Fix unittests (IShellFolderTest#testEnumObjects) still fails on amd64)/Fix javadoc warnings/
,,0.3455,jna,"Merge pull request from matthiasblaesing/safearray Implement SAFEARRAY access and bugfix VARIANT/Implement SAFEARRAY access Bind more functions from OleAut32.dll Fix bug in function bindings from OleAut32.dll (long vs. LONG) Ensure SAFEARRAY.rgsabound is completely accessible Modify Variant#getValue and Variant#setValue to allow flexible access to data Add object oriented helper methods to SAFEARRAY and move functionality from limited methods in OleAutoUtil to SAFEARRAY Add unittests based on windows search provider that excercise SAFEARRAY functions Added a helper for optimized conversion from SAFEARRAY to Object[] Closes Fix wrong asumptions, datatypes and add add unittests/Merge pull request from matthiasblaesing/INVOKEKIND_INIT OaIdl.INVOKEKIND cant be instantiated (fixes failing TypeLibUtilTest)/OaIdl.INVOKEKIND cant be instantiated (fixes failing TypeLibUtilTest)/"
,,0.2961,jna,Merge pull request from matthiasblaesing/safearray Implement SAFEARRAY access and bugfix VARIANT/Implement SAFEARRAY access Bind more functions from OleAut32.dll Fix bug in function bindings from OleAut32.dll (long vs. LONG) Ensure SAFEARRAY.rgsabound is completely accessible Modify Variant#getValue and Variant#setValue to allow flexible access to data Add object oriented helper methods to SAFEARRAY and move functionality from limited methods in OleAutoUtil to SAFEARRAY Add unittests based on windows search provider that excercise SAFEARRAY functions Added a helper for optimized conversion from SAFEARRAY to Object[] Closes
,,0.3166,jna,"Merge pull request from matthiasblaesing/safearray Implement SAFEARRAY access and bugfix VARIANT/Implement SAFEARRAY access Bind more functions from OleAut32.dll Fix bug in function bindings from OleAut32.dll (long vs. LONG) Ensure SAFEARRAY.rgsabound is completely accessible Modify Variant#getValue and Variant#setValue to allow flexible access to data Add object oriented helper methods to SAFEARRAY and move functionality from limited methods in OleAutoUtil to SAFEARRAY Add unittests based on windows search provider that excercise SAFEARRAY functions Added a helper for optimized conversion from SAFEARRAY to Object[] Closes Fix wrong asumptions, datatypes and add add unittests/"
,,0.2947,jna,Merge pull request from matthiasblaesing/safearray Implement SAFEARRAY access and bugfix VARIANT/Implement SAFEARRAY access Bind more functions from OleAut32.dll Fix bug in function bindings from OleAut32.dll (long vs. LONG) Ensure SAFEARRAY.rgsabound is completely accessible Modify Variant#getValue and Variant#setValue to allow flexible access to data Add object oriented helper methods to SAFEARRAY and move functionality from limited methods in OleAutoUtil to SAFEARRAY Add unittests based on windows search provider that excercise SAFEARRAY functions Added a helper for optimized conversion from SAFEARRAY to Object[] Closes
,,0.3588,jna,"Merge pull request from matthiasblaesing/extend_comexception Update COMException to contain HRESULT and introduce COMInvokeException/Introduce COMInvokeException and prevent a memory leak in case of failure Only a subset of errors contain exception data. Only calls to IDispatch#Invoke generate exception details and potentially a ""fault index"" for parameters. Therefore these are separated into an extended COMInvokeException. Additionally the EXCEPINFO data was not freeed, leading to memory leaks in in repeated calls. Add unittest for COMExceptions and correct Exception extraction in Factory/Rework COMException to also carry the HRESULT This allows filtering exception based on HRESULT value. For example GetActiveObject returns a HRESULT of 0x800401E3 (MK_E_UNAVAILABLE) if the target object is not active. For many cases this is not an error. A valid construct would be: public void getExistingDemoObjectOrCreate() { DemoObject obj; try { return factory.fetchObject(DemoObject.class); } catch (COMException ex) { if(ex.matchesHresult(WinError.MK_E_UNAVAILABLE)) { return factory.createObject(DemoObject.class); } else { throw ex; } } }/"
,,0.2547,jna,"Merge pull request from matthiasblaesing/extend_comexception Update COMException to contain HRESULT and introduce COMInvokeException/Introduce COMInvokeException and prevent a memory leak in case of failure Only a subset of errors contain exception data. Only calls to IDispatch#Invoke generate exception details and potentially a ""fault index"" for parameters. Therefore these are separated into an extended COMInvokeException. Additionally the EXCEPINFO data was not freeed, leading to memory leaks in in repeated calls. Add unittest for COMExceptions and correct Exception extraction in Factory/"
,,0.1038,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/
,,0.3554,jna,"Merge pull request from matthiasblaesing/extend_comexception Update COMException to contain HRESULT and introduce COMInvokeException/Introduce COMInvokeException and prevent a memory leak in case of failure Only a subset of errors contain exception data. Only calls to IDispatch#Invoke generate exception details and potentially a ""fault index"" for parameters. Therefore these are separated into an extended COMInvokeException. Additionally the EXCEPINFO data was not freeed, leading to memory leaks in in repeated calls. Add unittest for COMExceptions and correct Exception extraction in Factory/Rework COMException to also carry the HRESULT This allows filtering exception based on HRESULT value. For example GetActiveObject returns a HRESULT of 0x800401E3 (MK_E_UNAVAILABLE) if the target object is not active. For many cases this is not an error. A valid construct would be: public void getExistingDemoObjectOrCreate() { DemoObject obj; try { return factory.fetchObject(DemoObject.class); } catch (COMException ex) { if(ex.matchesHresult(WinError.MK_E_UNAVAILABLE)) { return factory.createObject(DemoObject.class); } else { throw ex; } } }/"
,,0.2725,jna,Merge pull request from matthiasblaesing/extend_comexception Update COMException to contain HRESULT and introduce COMInvokeException/Rework COMException to also carry the HRESULT This allows filtering exception based on HRESULT value. For example GetActiveObject returns a HRESULT of 0x800401E3 (MK_E_UNAVAILABLE) if the target object is not active. For many cases this is not an error. A valid construct would be: public void getExistingDemoObjectOrCreate() { DemoObject obj; try { return factory.fetchObject(DemoObject.class); } catch (COMException ex) { if(ex.matchesHresult(WinError.MK_E_UNAVAILABLE)) { return factory.createObject(DemoObject.class); } else { throw ex; } } }/
,,0.3137,jna,Merge pull request from matthiasblaesing/extend_comexception Update COMException to contain HRESULT and introduce COMInvokeException/Rework COMException to also carry the HRESULT This allows filtering exception based on HRESULT value. For example GetActiveObject returns a HRESULT of 0x800401E3 (MK_E_UNAVAILABLE) if the target object is not active. For many cases this is not an error. A valid construct would be: public void getExistingDemoObjectOrCreate() { DemoObject obj; try { return factory.fetchObject(DemoObject.class); } catch (COMException ex) { if(ex.matchesHresult(WinError.MK_E_UNAVAILABLE)) { return factory.createObject(DemoObject.class); } else { throw ex; } } }/Merge pull request from matthiasblaesing/proxyobject_nullpointer_dispose NullPointerException can be caused by calling ProxyObject#dispose multiple times/NullPointerException can be caused by calling ProxyObject#dispose multiple times Closes:
,,0.3884,jna,"Merge pull request from matthiasblaesing/extend_comexception Update COMException to contain HRESULT and introduce COMInvokeException/Introduce COMInvokeException and prevent a memory leak in case of failure Only a subset of errors contain exception data. Only calls to IDispatch#Invoke generate exception details and potentially a ""fault index"" for parameters. Therefore these are separated into an extended COMInvokeException. Additionally the EXCEPINFO data was not freeed, leading to memory leaks in in repeated calls. Add unittest for COMExceptions and correct Exception extraction in Factory/Rework COMException to also carry the HRESULT This allows filtering exception based on HRESULT value. For example GetActiveObject returns a HRESULT of 0x800401E3 (MK_E_UNAVAILABLE) if the target object is not active. For many cases this is not an error. A valid construct would be: public void getExistingDemoObjectOrCreate() { DemoObject obj; try { return factory.fetchObject(DemoObject.class); } catch (COMException ex) { if(ex.matchesHresult(WinError.MK_E_UNAVAILABLE)) { return factory.createObject(DemoObject.class); } else { throw ex; } } }/Merge pull request from matthiasblaesing/proxyobject_nullpointer_dispose NullPointerException can be caused by calling ProxyObject#dispose multiple times/NullPointerException can be caused by calling ProxyObject#dispose multiple times Closes:"
,,0.141,jna,"Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/Merge pull request from matthiasblaesing/fix_unittests Fix unittests (IShellFolderTest#testEnumObjects) still fails on amd64)/Fix unittests (IShellFolderTest#testEnumObjects) still fails on amd64) MonitorFromPoint takes a structure, not a reference to a structure, so function definition was wrong The last to ""KnownFolters"" dont resolve on Win10/"
,,0.1324,jna,Merge pull request from lgoldstein/duplicate-methods Found and fixed duplicate method definitions for the same API/Found and fixed duplicate method definitions for the same API/
,,0.138,jna,Merge pull request from lgoldstein/duplicate-methods Found and fixed duplicate method definitions for the same API/Found and fixed duplicate method definitions for the same API/
,,0.0893,jna,"Merge pull request from matthiasblaesing/safearray_multidimensional_not_0_based OaIdlUtil#toPrimitiveArray fails if dimension bounds are not 0-based/OaIdlUtil#toPrimitiveArray fails if dimension bounds are not 0-based The declared bounds of the SAFEARRAY can be ignored, as the SAFEARRAY is continuous and the toPrimitiveArray maps it to a plain ""zero"" based java array. The access to the SAFEARRAY does not happen through the accessor methods, but via direct access to the underlying memory./"
,,0.0893,jna,"Merge pull request from matthiasblaesing/safearray_multidimensional_not_0_based OaIdlUtil#toPrimitiveArray fails if dimension bounds are not 0-based/OaIdlUtil#toPrimitiveArray fails if dimension bounds are not 0-based The declared bounds of the SAFEARRAY can be ignored, as the SAFEARRAY is continuous and the toPrimitiveArray maps it to a plain ""zero"" based java array. The access to the SAFEARRAY does not happen through the accessor methods, but via direct access to the underlying memory./"
,,0.268,jna,Merge pull request from matthiasblaesing/extend_comexception Update COMException to contain HRESULT and introduce COMInvokeException/Rework COMException to also carry the HRESULT This allows filtering exception based on HRESULT value. For example GetActiveObject returns a HRESULT of 0x800401E3 (MK_E_UNAVAILABLE) if the target object is not active. For many cases this is not an error. A valid construct would be: public void getExistingDemoObjectOrCreate() { DemoObject obj; try { return factory.fetchObject(DemoObject.class); } catch (COMException ex) { if(ex.matchesHresult(WinError.MK_E_UNAVAILABLE)) { return factory.createObject(DemoObject.class); } else { throw ex; } } }/
,,0.3821,jna,"Merge pull request from matthiasblaesing/extend_comexception Update COMException to contain HRESULT and introduce COMInvokeException/Introduce COMInvokeException and prevent a memory leak in case of failure Only a subset of errors contain exception data. Only calls to IDispatch#Invoke generate exception details and potentially a ""fault index"" for parameters. Therefore these are separated into an extended COMInvokeException. Additionally the EXCEPINFO data was not freeed, leading to memory leaks in in repeated calls. Add unittest for COMExceptions and correct Exception extraction in Factory/Rework COMException to also carry the HRESULT This allows filtering exception based on HRESULT value. For example GetActiveObject returns a HRESULT of 0x800401E3 (MK_E_UNAVAILABLE) if the target object is not active. For many cases this is not an error. A valid construct would be: public void getExistingDemoObjectOrCreate() { DemoObject obj; try { return factory.fetchObject(DemoObject.class); } catch (COMException ex) { if(ex.matchesHresult(WinError.MK_E_UNAVAILABLE)) { return factory.createObject(DemoObject.class); } else { throw ex; } } }/Merge pull request from matthiasblaesing/proxyobject_nullpointer_dispose NullPointerException can be caused by calling ProxyObject#dispose multiple times/NullPointerException can be caused by calling ProxyObject#dispose multiple times Closes:"
,,0.1038,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/
,,0.1038,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/
,,0.1038,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/
,,0.1038,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/
,,0.1038,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/
,,0.1038,jna,Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/
,,0.28,OpenDDS,Mon Jul 18 19:51:49 UTC 2011 Byron Harris * tools/modeling/plugins/org.opendds.modeling.model/model/Domain.ecore: Added transportConfig attribute to DomainEntity. Note: The changes on the GMF side are not included yet until versioning issues get resolved. * tools/modeling/plugins/org.opendds.modeling.model.edit/plugin.properties: * tools/modeling/plugins/org.opendds.modeling.model/model/DomainXMI.xsd: * tools/modeling/plugins/org.opendds.modeling.model/model/OpenDDS.genmodel: * tools/modeling/plugins/org.opendds.modeling.model/src/org/opendds/modeling/model/domain/DomainEntity.java: * tools/modeling/plugins/org.opendds.modeling.model/src/org/opendds/modeling/model/domain/impl/DomainEntityImpl.java: EMF generated changes to account for addition of transportConfig./
,,0.2722,OpenDDS,Mon Jul 18 19:51:49 UTC 2011 Byron Harris * tools/modeling/plugins/org.opendds.modeling.model/model/Domain.ecore: Added transportConfig attribute to DomainEntity. Note: The changes on the GMF side are not included yet until versioning issues get resolved. * tools/modeling/plugins/org.opendds.modeling.model.edit/plugin.properties: * tools/modeling/plugins/org.opendds.modeling.model/model/DomainXMI.xsd: * tools/modeling/plugins/org.opendds.modeling.model/model/OpenDDS.genmodel: * tools/modeling/plugins/org.opendds.modeling.model/src/org/opendds/modeling/model/domain/DomainEntity.java: * tools/modeling/plugins/org.opendds.modeling.model/src/org/opendds/modeling/model/domain/impl/DomainEntityImpl.java: EMF generated changes to account for addition of transportConfig./
,,0.0658,OpenDDS,"Thu Jun 21 19:01:10 UTC 2012 Johnny Willemsen * dds/DCPS/BitPubListenerImpl.cpp: Added missing return, const changes, make exclude scoped block larger * dds/DCPS/DomainParticipantImpl.cpp: Initialize pointer to 0 and use _nil for object ptr * dds/DCPS/Serializer.h: Doxygen fixes/"
,,0.0726,OpenDDS,"Thu Jun 21 19:01:10 UTC 2012 Johnny Willemsen * dds/DCPS/BitPubListenerImpl.cpp: Added missing return, const changes, make exclude scoped block larger * dds/DCPS/DomainParticipantImpl.cpp: Initialize pointer to 0 and use _nil for object ptr * dds/DCPS/Serializer.h: Doxygen fixes/"
,,0.0726,OpenDDS,"Thu Jun 21 19:01:10 UTC 2012 Johnny Willemsen * dds/DCPS/BitPubListenerImpl.cpp: Added missing return, const changes, make exclude scoped block larger * dds/DCPS/DomainParticipantImpl.cpp: Initialize pointer to 0 and use _nil for object ptr * dds/DCPS/Serializer.h: Doxygen fixes/"
,,0.077,OpenDDS,Added links_lock_ to stop contention during connect_datalink causing multiple datalink instances to be created/
,,0.1161,OpenDDS,Merge pull request from mitza-oci/master Removed workarounds for GCC 3.3.x bugs./Removed workarounds for GCC 3.3.x bugs./
,,0.1161,OpenDDS,Merge pull request from mitza-oci/master Removed workarounds for GCC 3.3.x bugs./Removed workarounds for GCC 3.3.x bugs./
,,0.1141,OpenDDS,Merge pull request from mitza-oci/master Removed workarounds for GCC 3.3.x bugs./Removed workarounds for GCC 3.3.x bugs./
,,0.1161,OpenDDS,Merge pull request from mitza-oci/master Removed workarounds for GCC 3.3.x bugs./Removed workarounds for GCC 3.3.x bugs./
,,0.1161,OpenDDS,Merge pull request from mitza-oci/master Removed workarounds for GCC 3.3.x bugs./Removed workarounds for GCC 3.3.x bugs./
,,0.1141,OpenDDS,Merge pull request from mitza-oci/master Removed workarounds for GCC 3.3.x bugs./Removed workarounds for GCC 3.3.x bugs./
,,0.1161,OpenDDS,Merge pull request from mitza-oci/master Removed workarounds for GCC 3.3.x bugs./Removed workarounds for GCC 3.3.x bugs./
,,0.1141,OpenDDS,Merge pull request from mitza-oci/master Removed workarounds for GCC 3.3.x bugs./Removed workarounds for GCC 3.3.x bugs./
,,0.1059,OpenDDS,Refactor open_dual_stack_socket into one function to open the appropriate type of socket for the configuration. Fix issues with IPV6 builds in the transport tests to use correct sockets and address types./Merge pull request from objectcomputing/ipv6_updates Fix issues with IPV6 enabled builds on Windows./Merge pull request from mitza-oci/master Removed workarounds for GCC 3.3.x bugs./Removed workarounds for GCC 3.3.x bugs./
,,0.1141,OpenDDS,Merge pull request from mitza-oci/master Removed workarounds for GCC 3.3.x bugs./Removed workarounds for GCC 3.3.x bugs./
,,0.1161,OpenDDS,Merge pull request from mitza-oci/master Removed workarounds for GCC 3.3.x bugs./Removed workarounds for GCC 3.3.x bugs./
,,0.1161,OpenDDS,Merge pull request from mitza-oci/master Removed workarounds for GCC 3.3.x bugs./Removed workarounds for GCC 3.3.x bugs./
,,0.1141,OpenDDS,Merge pull request from mitza-oci/master Removed workarounds for GCC 3.3.x bugs./Removed workarounds for GCC 3.3.x bugs./
,,0.0857,OpenDDS,ManualAssertLiveliness test: cleaned up logging datatype mismatches log timestamps for all messages attempt to return nonzero on failure/
,,0.08,OpenDDS,ManualAssertLiveliness test: cleaned up logging datatype mismatches log timestamps for all messages attempt to return nonzero on failure/
,,0.0897,OpenDDS,Merge pull request from mitza-oci/master Liveliness fix to DataWriterImpl and ManualAssertLiveliness test/Merge pull request from objectcomputing/static_disc_test_investigation Fix issue where incrementing variable after object no longer guaranteÖ/Fix issue where incrementing variable after object no longer guaranteed to exist/
,,0.1076,OpenDDS,"If initial take_w_condition call returns RETCODE_NO_DATA, do not continue on to try to take_instance_w_condition as the instance handle will be nil and the take will fail with RETCODE_BAD_PARAMETER (3). Add check for the instance handle being HANDLE_NIL./Merge branch master of into jwi-gendirbug/Merge pull request from mitza-oci/master ReadCondition test: compatibility with safety profile and avoid looping forever with unexpected return code from take_next_instance_w_condition/ReadCondition test: compatibility with safety profile and avoid looping forever with unexpected return code from take_next_instance_w_condition/"
,,0.1006,OpenDDS,"Fixed typo in comment * dds/InfoRepo/DCPSInfoRepoServ.cpp:/Merge pull request from oschwaldp-oci/coverity_issues_fixes Fix issues reported by Coverity./Catch const CORBA::Exception & in the catch clauses./Addressing Coverity Scan CIDs: 1392433, 1392432, 1392430, 1392429, 1392427, 1392424, 1392421. Fix handling of uncaught exceptions./Include changes to resolve issues with sync includes * dds/InfoRepo/DCPSInfoRepo.cpp: * dds/InfoRepo/DCPSInfoRepoServ.cpp:/"
,,0.0588,OpenDDS,Coverity Scan Defects: Dereference after null check fixes./
,,0.073,OpenDDS,Coverity Scan Defects: Addressing Arguments in wrong order./
,,0.0916,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0916,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0936,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0936,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0936,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0957,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0977,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0916,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0977,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0998,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0977,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0936,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0998,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0957,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0977,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0916,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0916,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0916,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0998,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0977,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0936,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0957,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0957,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0895,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0916,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0936,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0936,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0936,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0977,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0957,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0936,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0916,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0936,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0957,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0957,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0957,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0916,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0957,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0957,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0895,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0957,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0936,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0936,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0977,OpenDDS,Merge pull request from jwillemsen/jwi-zapexceptionspecification Removed deprecated throw exception specification in tests/
,,0.0853,OpenDDS,"Dissector: Removed RCH, Fixed Warnings Using Reference Count Handles was not working out as well as I liked, so I have removed them, but left the double tree pass initialization so that something similar (along the lines of the Proxy pattern) might be able to be done in the future maybe. Also got rid of proto_tree_add_*_format() warnings by inserting ""%s"" in the parameters./"
,,0.0884,OpenDDS,"Dissector: Removed RCH, Fixed Warnings Using Reference Count Handles was not working out as well as I liked, so I have removed them, but left the double tree pass initialization so that something similar (along the lines of the Proxy pattern) might be able to be done in the future maybe. Also got rid of proto_tree_add_*_format() warnings by inserting ""%s"" in the parameters./"
,,0.0634,OpenDDS,fixing some const issues in local access credential data/
,,0.0961,OpenDDS,fixed warning/MetaStruct: Fix Compiler Issues Print ACE_UNUSED_ARG if there is Sample Info but no keys Move isDcpsKey() out side of ifndef NO_MULTI_TOPICS blocks/MetaStruct: Fix Compiler Issues Print ACE_UNUSED_ARG if there is Sample Info but no keys Move isDcpsKey() out side of ifndef NO_MULTI_TOPICS blocks/
,,0.0657,OpenDDS,Fix Blind Changes/opendds_idl: Misc Fixes/Fix FACE TS Generation/
,,0.0704,OpenDDS,opendds_idl: Misc Fixes/Throw an error and fail if we see both a and a FACE TS Generation/
,,0.0634,OpenDDS,Fix Last Commit/Fix KeyOnly Union Marshal/opendds_idl: Fix Unbounded Topic Union Marshalling/opendds_idl: Misc Fixes/Fix FACE TS Generation/
,,0.0673,OpenDDS,Fix FACE TS Generation/
,,0.0937,OpenDDS,Merge pull request from simpsont-oci/security_registry_instance_fix Fix security registry instance creation during shutdown issues/migrate constant static strings to const char* to avoid state object cleanup order issues/
,,0.0577,OpenDDS,Replace exception with assert/
,,0.0677,OpenDDS,opendds_idl: Fix Invalid Free in C++11 Union Prevent union from being tricked into calling a destructor on an invalid object./
,,0.0694,OpenDDS,resolving pr comments making private functions use / return ACE_TString to avoid need for callers to manage memory/
,,0.0731,OpenDDS,resolving pr comments making private functions use / return ACE_TString to avoid need for callers to manage memory/
,,0.075,OpenDDS,Merge pull request from simpsont-oci/fix_unlocked_remove Fix Unlocked Removal Methods & Usage For TransportSendBuffer / SingleSendBuffer/fix unlocked remove methods & use for TransportSendBuffer / SingleSendBuffer/
,,0.0625,pljava,Fixed bug support for parameters of type RECORD./
,,0.0833,realm-java,"Moved the Table annotation into ""com.tightdb"" package (issue "".generated"" suffix in generated sources packages (issue and adjusted examples due to the model changes (issue"
,,0.0869,realm-java,"Moved the Table annotation into ""com.tightdb"" package (issue "".generated"" suffix in generated sources packages (issue and adjusted examples due to the model changes (issue"
,,0.0828,realm-java,"Introduced separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue"
,,0.0923,realm-java,"Introduced separate model for the tests (issue "".generated"" suffix in generated sources packages (issue"
,,0.1153,realm-java,"Wrapped new JNI-level methods with high-level methods (issue wrapper and test for the ""toJson"" method (issue separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue"
,,0.077,realm-java,"Introduced separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue"
,,0.075,realm-java,"Introduced separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue"
,,0.0863,realm-java,"Introduced separate model for the tests (issue "".generated"" suffix in generated sources packages (issue"
,,0.0848,realm-java,"Introduced separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue"
,,0.11199999999999999,realm-java,"Introduced separate model for the tests completed (issue separate model for the tests (issue "".generated"" suffix in generated sources packages (issue"
,,0.0774,realm-java,"Disabled a few unit tests that were failing for known reasons/Introduced separate model for the tests (issue "".generated"" suffix in generated sources packages (issue"
,,0.0903,realm-java,"Introduced separate model for the tests (issue "".generated"" suffix in generated sources packages (issue"
,,0.0848,realm-java,"Introduced separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue"
,,0.0828,realm-java,"Introduced separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue"
,,0.0848,realm-java,"Introduced separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue"
,,0.0797,realm-java,"Added wrapper and tests for mixed type retrieval method (issue separate model for the tests (issue "".generated"" suffix in generated sources packages (issue"
,,0.0848,realm-java,"Introduced separate model for the tests completed (issue "".generated"" suffix in generated sources packages (issue"
,,0.0849,realm-java,"Added tests and examples for the ""average"" method (issue the Table annotation into ""com.tightdb"" package (issue "".generated"" suffix in generated sources packages (issue and adjusted examples due to the model changes (issue configurable names of the generated classes (issue"
,,0.0797,realm-java,"Moved the Table annotation into ""com.tightdb"" package (issue "".generated"" suffix in generated sources packages (issue configurable names of the generated classes (issue"
,,0.0759,realm-java,"Removed "".generated"" suffix in generated sources packages (issue"
,,0.0858,realm-java,"Improved (and fixed) the ""field sorting"" mechanism./Improved field sorter to support multiple source folders (issue from errors to warnings for non-critical problems(issue"
,,0.0987,realm-java,"Switched from errors to warnings for non-critical problems(issue the Table annotation into ""com.tightdb"" package (issue code generation interruption due to file name duplication./Fixed package name bugs in code generation (issue and issue specification of supported Java versions (issue"
,,0.1049,realm-java,"Fixed code generation from empty model class (issue code generation of tables ""add"" method (issue configurable names of the generated classes (issue fix of issue"
,,0.0704,realm-java,"Used the ""short"" low-level methods by appropriate methods (issue"
,,0.1009,realm-java,"Simplified code generation of tables ""add"" method (issue add improved basic view/table methods (issue"
,,0.0704,realm-java,"Used the ""short"" low-level methods by appropriate methods (issue"
,,0.102,realm-java,"Wrapped new JNI-level methods with high-level methods (issue wrapper and test for the ""toJson"" method (issue add improved basic view/table methods (issue"
,,0.0977,realm-java,Prepared and added new methods to table/view interface (issue add improved basic view/table methods (issue
,,0.0724,realm-java,"Used the ""short"" low-level methods by appropriate methods (issue"
,,0.0639,realm-java,Updated documentation for the new methods (issue and issue
,,0.0681,realm-java,Updated documentation for the new methods (issue and issue
,,0.071,realm-java,Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/Merge branch master of github.com:Tightdb/tightdb_java into group-readonly-bug/
,,0.0648,realm-java,Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/
,,0.0669,realm-java,Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/
,,0.0689,realm-java,Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/
,,0.0912,realm-java,"Merge pull request from mekjaer/read-trans-testcase check for if group is closed when closing transactions + test case/check for if group is closed when closing transactions + test case Will crash core if not detected/disabled test case that fails when testing in debug mode/Merge pull request from mekjaer/lock-sharedgroup Checking for missing db, if lock file exist, and throws corresponding exception. Test case for that/"
,,0.0802,realm-java,Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/Merge pull request from mekjaer/group-readonly-bug check for read-only group mode added in constrcutor + test case/Merge pull request from mekjaer/check_for_minus_one Check for minus one + better exception descr when getting wrong mixed value/
,,0.0648,realm-java,Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/
,,0.0648,realm-java,Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/
,,0.0628,realm-java,Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/
,,0.0652,realm-java,comment fix/Doc fixes and spelling/
,,0.0765,realm-java,Fixed spelling mistake in columntypeutil.hpp/
,,0.0848,realm-java,"fixed comments, line breaks, spelling & removed last row example/"
,,0.36200000000000004,realm-java,"Merge branch master into WIP-update-checker * master: (25 commits) Add migration example template to distribution folder Removed old files. Fix distribution script Removed Guava dependency Add migration example to the distribution folder Added some comments Add License headers animal capitalization finish migration code/add versioned realm file migration bug fix Cache column indices disable realm file with missing version migration bug fix bug fixes Some fixes Introduce the RealmMigrationNeededException Disable the table check until we have a better solution migration example Check link and link list tables Verify the name of the table of link and link list targets ... Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java/New JavaWriter based code generator. Fixed problem with inconsistent field ordering between javac and running java vm./All samples and tests in RealmAndroid compiles. Further comments: io.realm.tests.examples.RealmExample: Test passes io.realm.tests.typed.RealmListTest: 3 out of 9 tests fails io.realm.tests.typed.RealmTest: 1 out of 6 tests fails io.realm.tests.performance.PerformanceTest: runs io.realm.example.MainActivity: builds but does not run I suspect this has to do with the make file, not the test/Modified code generation to use static column indices. Since the Java VM keeps the fields in a different order than the java compiler, I had to introduce proxy based table generation. removed setter/getter method for row no RealmObject. row is now accessed directly. Proxy class suffix has been changed to _PROXY* has been changed to RealmProxy./"
,,0.2152,realm-java,"Modified code generation to use static column indices. Since the Java VM keeps the fields in a different order than the java compiler, I had to introduce proxy based table generation. removed setter/getter method for row no RealmObject. row is now accessed directly. Proxy class suffix has been changed to _PROXY* has been changed to RealmProxy./"
,,0.3129,realm-java,Merge branch master into WIP-update-checker * master: (25 commits) Add migration example template to distribution folder Removed old files. Fix distribution script Removed Guava dependency Add migration example to the distribution folder Added some comments Add License headers animal capitalization finish migration code/add versioned realm file migration bug fix Cache column indices disable realm file with missing version migration bug fix bug fixes Some fixes Introduce the RealmMigrationNeededException Disable the table check until we have a better solution migration example Check link and link list tables Verify the name of the table of link and link list targets ... Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java/New JavaWriter based code generator. Fixed problem with inconsistent field ordering between javac and running java vm./
,,0.3,realm-java,Merge branch master into WIP-update-checker * master: (25 commits) Add migration example template to distribution folder Removed old files. Fix distribution script Removed Guava dependency Add migration example to the distribution folder Added some comments Add License headers animal capitalization finish migration code/add versioned realm file migration bug fix Cache column indices disable realm file with missing version migration bug fix bug fixes Some fixes Introduce the RealmMigrationNeededException Disable the table check until we have a better solution migration example Check link and link list tables Verify the name of the table of link and link list targets ... Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java/New JavaWriter based code generator. Fixed problem with inconsistent field ordering between javac and running java vm./
,,0.2811,realm-java,Merge branch master into WIP-update-checker * master: (25 commits) Add migration example template to distribution folder Removed old files. Fix distribution script Removed Guava dependency Add migration example to the distribution folder Added some comments Add License headers animal capitalization finish migration code/add versioned realm file migration bug fix Cache column indices disable realm file with missing version migration bug fix bug fixes Some fixes Introduce the RealmMigrationNeededException Disable the table check until we have a better solution migration example Check link and link list tables Verify the name of the table of link and link list targets ... Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java/New JavaWriter based code generator. Fixed problem with inconsistent field ordering between javac and running java vm./performance test runs without fail./
,,0.2899,realm-java,Merge branch master into WIP-update-checker * master: (25 commits) Add migration example template to distribution folder Removed old files. Fix distribution script Removed Guava dependency Add migration example to the distribution folder Added some comments Add License headers animal capitalization finish migration code/add versioned realm file migration bug fix Cache column indices disable realm file with missing version migration bug fix bug fixes Some fixes Introduce the RealmMigrationNeededException Disable the table check until we have a better solution migration example Check link and link list tables Verify the name of the table of link and link list targets ... Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java/performance test runs without fail./
,,0.2911,realm-java,Merge branch master into WIP-update-checker * master: (25 commits) Add migration example template to distribution folder Removed old files. Fix distribution script Removed Guava dependency Add migration example to the distribution folder Added some comments Add License headers animal capitalization finish migration code/add versioned realm file migration bug fix Cache column indices disable realm file with missing version migration bug fix bug fixes Some fixes Introduce the RealmMigrationNeededException Disable the table check until we have a better solution migration example Check link and link list tables Verify the name of the table of link and link list targets ... Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java/performance test runs without fail./
,,0.3948,realm-java,"Merge branch master into WIP-update-checker * master: (25 commits) Add migration example template to distribution folder Removed old files. Fix distribution script Removed Guava dependency Add migration example to the distribution folder Added some comments Add License headers animal capitalization finish migration code/add versioned realm file migration bug fix Cache column indices disable realm file with missing version migration bug fix bug fixes Some fixes Introduce the RealmMigrationNeededException Disable the table check until we have a better solution migration example Check link and link list tables Verify the name of the table of link and link list targets ... Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java/Modified code generation to use static column indices. Since the Java VM keeps the fields in a different order than the java compiler, I had to introduce proxy based table generation. removed setter/getter method for row no RealmObject. row is now accessed directly. Proxy class suffix has been changed to _PROXY* has been changed to RealmProxy./"
,,0.3968,realm-java,"Merge branch master into WIP-update-checker * master: (25 commits) Add migration example template to distribution folder Removed old files. Fix distribution script Removed Guava dependency Add migration example to the distribution folder Added some comments Add License headers animal capitalization finish migration code/add versioned realm file migration bug fix Cache column indices disable realm file with missing version migration bug fix bug fixes Some fixes Introduce the RealmMigrationNeededException Disable the table check until we have a better solution migration example Check link and link list tables Verify the name of the table of link and link list targets ... Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java/Modified code generation to use static column indices. Since the Java VM keeps the fields in a different order than the java compiler, I had to introduce proxy based table generation. removed setter/getter method for row no RealmObject. row is now accessed directly. Proxy class suffix has been changed to _PROXY* has been changed to RealmProxy./"
,,0.4019,realm-java,"Merge branch master into WIP-update-checker * master: (25 commits) Add migration example template to distribution folder Removed old files. Fix distribution script Removed Guava dependency Add migration example to the distribution folder Added some comments Add License headers animal capitalization finish migration code/add versioned realm file migration bug fix Cache column indices disable realm file with missing version migration bug fix bug fixes Some fixes Introduce the RealmMigrationNeededException Disable the table check until we have a better solution migration example Check link and link list tables Verify the name of the table of link and link list targets ... Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java/New JavaWriter based code generator. Fixed problem with inconsistent field ordering between javac and running java vm./New code generation is ""working"". Stills needs to fix the column indices./Modified code generation to use static column indices. Since the Java VM keeps the fields in a different order than the java compiler, I had to introduce proxy based table generation. removed setter/getter method for row no RealmObject. row is now accessed directly. Proxy class suffix has been changed to _PROXY* has been changed to RealmProxy./performance test runs without fail./"
,,0.3879,realm-java,"Merge branch master into WIP-update-checker * master: (25 commits) Add migration example template to distribution folder Removed old files. Fix distribution script Removed Guava dependency Add migration example to the distribution folder Added some comments Add License headers animal capitalization finish migration code/add versioned realm file migration bug fix Cache column indices disable realm file with missing version migration bug fix bug fixes Some fixes Introduce the RealmMigrationNeededException Disable the table check until we have a better solution migration example Check link and link list tables Verify the name of the table of link and link list targets ... Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java/Modified code generation to use static column indices. Since the Java VM keeps the fields in a different order than the java compiler, I had to introduce proxy based table generation. removed setter/getter method for row no RealmObject. row is now accessed directly. Proxy class suffix has been changed to _PROXY* has been changed to RealmProxy./"
,,0.3875,realm-java,"Merge branch master into WIP-update-checker * master: (25 commits) Add migration example template to distribution folder Removed old files. Fix distribution script Removed Guava dependency Add migration example to the distribution folder Added some comments Add License headers animal capitalization finish migration code/add versioned realm file migration bug fix Cache column indices disable realm file with missing version migration bug fix bug fixes Some fixes Introduce the RealmMigrationNeededException Disable the table check until we have a better solution migration example Check link and link list tables Verify the name of the table of link and link list targets ... Conflicts: realm-annotations-processor/src/main/java/io/realm/processor/RealmProcessor.java/New JavaWriter based code generator. Fixed problem with inconsistent field ordering between javac and running java vm./New code generation is ""working"". Stills needs to fix the column indices./Modified code generation to use static column indices. Since the Java VM keeps the fields in a different order than the java compiler, I had to introduce proxy based table generation. removed setter/getter method for row no RealmObject. row is now accessed directly. Proxy class suffix has been changed to _PROXY* has been changed to RealmProxy./performance test runs without fail./"
,,0.0697,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge pull request from realm/cm-bug-compactfile Made Realm.compactRealmFile() more failure resilient./
,,0.1102,realm-java,Merge branch master into cm-bug-createorupdatefromjson Conflicts: changelog.txt/Merge pull request from realm/ez-fix-npe Fix a potential NPE/Fix a potential NPE/Merge pull request from realm/cm-fix-build Fix JavaDoc generation./Fix JavaDoc generation./Merge pull request from chibatching/master Fix findFirst() for queried RealmList/
,,0.1048,realm-java,Fixed unit tests. Renamed version to SchemaVersion/Merge pull request from realm/cm-fix-build Fix JavaDoc generation./Fix JavaDoc generation./
,,0.0702,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.0723,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.066,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.066,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/
,,0.0697,realm-java,Merge branch master of github.com:realm/realm-java into kg-bug-throw-error/Merge pull request from PavelSynek/logger-bug Fixes loggers/
,,0.3532,realm-java,"Merge pull request from realm/my/fix-1644 fix RealmProxy code generator to avoid warnings/Suppress useless cast and raw type warnings in generated proxy classes. This warnings are reported when `-Xlint:all` is added to the compilar args. Example configuration of `build.gradle` is: ``` allprojects { gradle.projectsEvaluated { tasks.withType(JavaCompile) { options.compilerArgs options.compilerArgs } } } ```/Merge pull request from realm/my/field-indices-cache-for-each-Realm fix for for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./Reference equality for empty RealmLists, fix Async tests/fix javadoc, revert getByIndex to Realm.get, remove ArgumentsHolder fron public package/"
,,0.3404,realm-java,"Merge pull request from realm/my/field-indices-cache-for-each-Realm fix for for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./Merge pull request from realm/my-fix-1490 Fix . Changed the return type of RealmProxyMediator#getModelClasses() to Set in order to guarantee its contents unordered and unique./"
,,0.3693,realm-java,"Merge pull request from realm/my/fix-1644 fix RealmProxy code generator to avoid warnings/Removed update() method from generated proxy class corresponding to un-updatable model. fixes useless cast and raw type warnings in generated proxy classes. This warnings are reported when `-Xlint:all` is added to the compilar args. Example configuration of `build.gradle` is: ``` allprojects { gradle.projectsEvaluated { tasks.withType(JavaCompile) { options.compilerArgs options.compilerArgs } } } ```/Merge pull request from realm/my/field-indices-cache-for-each-Realm fix for for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./Reference equality for empty RealmLists, fix Async tests/typo, fix style, & remove layout header for threadExample/fix javadoc, revert getByIndex to Realm.get, remove ArgumentsHolder fron public package/"
,,0.3365,realm-java,"Merge pull request from realm/my/field-indices-cache-for-each-Realm fix for for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./Merge pull request from realm/my-fix-1490 Fix . Changed the return type of RealmProxyMediator#getModelClasses() to Set in order to guarantee its contents unordered and unique./"
,,0.1135,realm-java,Merge pull request from realm/my/fix-1644 fix RealmProxy code generator to avoid warnings/Suppress useless cast and raw type warnings in generated proxy classes. This warnings are reported when `-Xlint:all` is added to the compilar args. Example configuration of `build.gradle` is: ``` allprojects { gradle.projectsEvaluated { tasks.withType(JavaCompile) { options.compilerArgs options.compilerArgs } } } ```/
,,0.1779,realm-java,Merge branch master into cm/bug/migrate-open-realm/write transaction transaction to avoid confusing users. write transaction transaction. Some write transactions with read transactinos remain. Realm.isInWriteTransaction Realm.isInTrasaction./
,,0.2345,realm-java,"Merge pull request from realm/my-fix-crash-of-RealmList Fix native crash and wrong exception in RealmList./Fix native crash or wrong exception in RealmList. This commit fixes Methods listed below in RealmList now throws IllegalStateException if parent object has been removed or the Realm instance has been closed. * add(int,RealmOject) * add(RealmObject) * set(int,RealmObject) * move(int,int) * clear() * remove(int) * remove(int) * remove(RealmObject) * removeAll(Collection) * get(int) * first() * last() * size() * where() RealmList#toString() now returns if container object has been removed or Realm instance has been closed./"
,,0.3463,realm-java,Merge branch master into cm/bug/local-install/Merge pull request from realm/cm/cm/bug/ios-primarykey Primary keys now compatible with primary keys from the Object Store./Merge pull request from realm/cm/bug/not-nullable-column convertColumnToNotNullable now works correctly./Update documentation and error reporting/Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./fix tests/
,,0.3232,realm-java,Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./
,,0.3083,realm-java,Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./
,,0.3166,realm-java,Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./fix tests/
,,0.4029,realm-java,"Merge pull request from realm/my-fix-crash-of-RealmList Fix native crash and wrong exception in RealmList./Fix native crash or wrong exception in RealmList. This commit fixes Methods listed below in RealmList now throws IllegalStateException if parent object has been removed or the Realm instance has been closed. * add(int,RealmOject) * add(RealmObject) * set(int,RealmObject) * move(int,int) * clear() * remove(int) * remove(int) * remove(RealmObject) * removeAll(Collection) * get(int) * first() * last() * size() * where() RealmList#toString() now returns if container object has been removed or Realm instance has been closed./Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./"
,,0.3194,realm-java,Merge branch master into cm/bug/local-install/Merge pull request from erichkleung/master Fix typo/Fix typo filed field/Merge branch master into cm/bug/migrate-open-realm/Merge pull request from realm/nh/post-async-codestyle fix code style/fix code style/REAL_NOEXCEPT was removed from core/Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./REAL_NOEXCEPT was removed from core/Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./Merge pull request from realm/mc-enc-not-supported Add RealmEncryptionNotSupportedException/Update core to v0.89.8 Add RealmEncryptionNotSupportedException/
,,0.3205,realm-java,Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./
,,0.1217,realm-java,"Merge pull request from realm/kg/bugfix-binary-isnotnull Bugfix binary isnotnull/Reference equality for empty RealmLists, fix Async tests/typo, fix style, & remove layout header for threadExample/Merge pull request from realm/cm-bug-closed-handler Fixed handler not being removed when using setAutoRefresh(false)/Fixed handler not being removed when using setAutoRefresh(false)/"
,,0.3319,realm-java,"Merge branch master into cm/bug/migrate-open-realm/write transaction transaction to avoid confusing users. write transaction transaction. Some write transactions with read transactinos remain. Realm.isInWriteTransaction Realm.isInTrasaction./Add RealmQuery.isValid(), RealmResults#isValid() and RealmList#isValid(). fixes pull request from realm/my-fix-crash-of-RealmList Fix native crash and wrong exception in RealmList./Fix native crash or wrong exception in RealmList. This commit fixes Methods listed below in RealmList now throws IllegalStateException if parent object has been removed or the Realm instance has been closed. * add(int,RealmOject) * add(RealmObject) * set(int,RealmObject) * move(int,int) * clear() * remove(int) * remove(int) * remove(RealmObject) * removeAll(Collection) * get(int) * first() * last() * size() * where() RealmList#toString() now returns if container object has been removed or Realm instance has been closed./"
,,0.149,realm-java,"Merge branch master into cm/bug/migrate-open-realm/write transaction transaction to avoid confusing users. write transaction transaction. Some write transactions with read transactinos remain. Realm.isInWriteTransaction Realm.isInTrasaction./Add RealmQuery.isValid(), RealmResults#isValid() and RealmList#isValid(). fixes"
,,0.319,realm-java,"Merge pull request from realm/my/field-indices-cache-for-each-Realm fix for for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./Merge pull request from realm/kg-bug-isvalid isValid should not throw/Merge branch master of github.com:realm/realm-java into kg-bug-isvalid/Fixes Updates due to PR feedback/"
,,0.3218,realm-java,Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./
,,0.3072,realm-java,Merge pull request from realm/cm/bug/not-nullable-column convertColumnToNotNullable now works correctly./Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./Merge pull request from zaki50/fix_typo fix typos/fix typos/Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./
,,0.2988,realm-java,Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./Merge pull request from zaki50/fix_typo fix typos/fix typos/Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./
,,0.3263,realm-java,Merge pull request from realm/lk-primary-key-constraint-exception Add RealmPrimaryKeyConstraintException./Add RealmPrimaryKeyConstraintException. Closes core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./
,,0.3465,realm-java,"Merge pull request from realm/my/field-indices-cache-for-each-Realm fix for for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./"
,,0.2683,realm-java,"Add RealmQuery.isValid(), RealmResults#isValid() and RealmList#isValid(). fixes pull request from realm/my-fix-crash-of-RealmList Fix native crash and wrong exception in RealmList./Fix native crash or wrong exception in RealmList. This commit fixes Methods listed below in RealmList now throws IllegalStateException if parent object has been removed or the Realm instance has been closed. * add(int,RealmOject) * add(RealmObject) * set(int,RealmObject) * move(int,int) * clear() * remove(int) * remove(int) * remove(RealmObject) * removeAll(Collection) * get(int) * first() * last() * size() * where() RealmList#toString() now returns if container object has been removed or Realm instance has been closed./fix javadoc, revert getByIndex to Realm.get, remove ArgumentsHolder fron public package/"
,,0.3148,realm-java,"Merge pull request from realm/my/field-indices-cache-for-each-Realm fix for for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./Merge pull request from realm/my-fix-1490 Fix . Changed the return type of RealmProxyMediator#getModelClasses() to Set in order to guarantee its contents unordered and unique./Merge pull request from zaki50/fix_typo fix typos/fix typos/"
,,0.3259,realm-java,"Merge pull request from realm/my/field-indices-cache-for-each-Realm fix for for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./Merge pull request from zaki50/fix_typo fix typos/fix typos/"
,,0.311,realm-java,Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./Adapt core changes in 0.92.0 * Remove insert_xxx methods from Table. * Table.where() changed to user a Ref instead of a raw ptr. * makeWriteLogCollector to make_client_history * advance_read/promote_to_write/rollback_and_continue_as_read need a replication ptr as param now. * Remove add_int method. * A bug fix in linkview jni. * adjust is removed from TableOrView. * Other test cases fix. ** testMoveUp & testRemove dont pass right now./
,,0.1884,realm-java,Merge branch master into cm/bug/migrate-open-realm/Polish error messages a little. Cannot cancel a non transaction. Not inside a transaction./write transaction transaction to avoid confusing users. write transaction transaction. Some write transactions with read transactinos remain. Realm.isInWriteTransaction Realm.isInTrasaction./
,,0.3238,realm-java,"Merge pull request from realm/my/field-indices-cache-for-each-Realm fix for for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./Merge pull request from realm/my-fix-1490 Fix . Changed the return type of RealmProxyMediator#getModelClasses() to Set in order to guarantee its contents unordered and unique./"
,,0.3429,realm-java,"Merge pull request from realm/my/field-indices-cache-for-each-Realm fix for for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./Merge pull request from realm/my-fix-1490 Fix . Changed the return type of RealmProxyMediator#getModelClasses() to Set in order to guarantee its contents unordered and unique./"
,,0.3783,realm-java,"Merge pull request from realm/my/field-indices-cache-for-each-Realm fix for for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./Fix generic, update Javadoc & error messages/now throwing Exception if we try to add/remove listener for unmanaged RealmObject/RealmResults/typo, fix style, & remove layout header for threadExample/now RealmQuery throw exception if reused for another async query/fix javadoc, revert getByIndex to Realm.get, remove ArgumentsHolder fron public package/"
,,0.3801,realm-java,"Merge pull request from realm/my/field-indices-cache-for-each-Realm fix for for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./fix doc/Fix generic, update Javadoc & error messages/Merge pull request from realm/my/fix-RealmQuery-param-name fix parameter name of RealmQuery constructor/Reference equality for empty RealmLists, fix Async tests/fix parameter name of RealmQuery constructor/now RealmQuery throw exception if reused for another async query/throwing IllegalStateException when using async queries from a non Looper thread/Add RealmQuery.isValid(), RealmResults#isValid() and RealmList#isValid(). fixes javadoc, revert getByIndex to Realm.get, remove ArgumentsHolder fron public package/"
,,0.3561,realm-java,"Merge pull request from realm/my/fix-1646 fix possible null assignment to Realm.columnIndices./fix Problem: `Realm#lastLocalInstanceClosed()` which is called by `Realm#close() can remove entries from `validatedRealmFiles` while other thread is executing `Realm#createAndValidate()`. This might lead to `null` assignment to `Realm.columnIndices`. Solution: Modified to deal with `validatedRealmFiles` in synchronized block of `Realm.class`./Merge pull request from realm/my/field-indices-cache-for-each-Realm fix for for Problem: The Proxy class of each model holds column indices in static fields. These indices are good only when all Realm databases have the same column index in every column of the model class. If Realm databases have different column indices, the getter/setter of Proxy class reads/writes wrong column. Solution: This commit introduces `ColumnInfo` object that holds column indices information per Realm instance which shares the same database file./small typo fix/Merge branch master into cm/bug/migrate-open-realm/write transaction transaction to avoid confusing users. write transaction transaction. Some write transactions with read transactinos remain. Realm.isInWriteTransaction Realm.isInTrasaction./Reference equality for empty RealmLists, fix Async tests/Merge pull request from realm/my-fix-1490 Fix . Changed the return type of RealmProxyMediator#getModelClasses() to Set in order to guarantee its contents unordered and unique./Update documentation and error reporting/Fix typo/fix javadoc, revert getByIndex to Realm.get, remove ArgumentsHolder fron public package/Merge pull request from realm/cm-bug-columnindicies ColumnIndices are now setup correctly for all Realms/Added fix for column indices/Merge pull request from realm/nh-fix-1467 fix for is now package protected. Refactored unit test to test actual bug./Merge pull request from realm/nh-fix-1466 add fix for for fix for fix for tests/writeEncryptedCopyTo might throw RENSE RealmEncryptionNotSupportedException/Merge pull request from realm/mc-enc-not-supported Add RealmEncryptionNotSupportedException/Update core to v0.89.8 Add RealmEncryptionNotSupportedException/Merge pull request from realm/ez-listeners-on-refresh Fixes Process listeners after refresh()/Fixed unit tests./"
,,0.0648,realm-java,fix copilation error in model classes in unit test/
,,0.0689,realm-java,fix copilation error in model classes in unit test/
,,0.0607,realm-java,fix copilation error in model classes in unit test/
,,0.0628,realm-java,fix copilation error in model classes in unit test/
,,0.0689,realm-java,fix copilation error in model classes in unit test/
,,0.0689,realm-java,fix copilation error in model classes in unit test/
,,0.0669,realm-java,fix copilation error in model classes in unit test/
,,0.0628,realm-java,fix copilation error in model classes in unit test/
,,0.0648,realm-java,fix copilation error in model classes in unit test/
,,0.0628,realm-java,fix copilation error in model classes in unit test/
,,0.0586,realm-java,fix copilation error in model classes in unit test/
,,0.0669,realm-java,fix copilation error in model classes in unit test/
,,0.0887,realm-java,Merge pull request from realm/my/fix/memory-leak-in-jni fix potential memory leak in jni code. and skip copying back to native array to java array if native array has not been changed./fix potential memory leak in jni code and skip copying back to java array if native array is not modified./
,,0.078,realm-java,Merge pull request from realm/cm/bug/badversionexception Fix BadVersionException/Fixed race condition causing BadVersionException/Merge pull request from realm/nh/bug/2115_async_badversion fixes IllegalStateException Caller thread behind the worker thread/fixes IllegalStateException Caller thread behind the worker thread/
,,0.0849,realm-java,Removed all deprecated methods and fixed examples./
,,0.1584,realm-java,Removed all deprecated methods and fixed examples./Examples should use transaction blocks (#2800) * Moving examples over to execute transaction * Updating comments to use executeTransaction * Use partial mocks for Realm#executeTransaction(...) and create additional tests to illustrate mock verification of Realm#executeTransaction(...). Had to do this because of a problem with Powermock:
,,0.1611,realm-java,Fix bug in IntroExample (#2844) Removes an inside commit. Fix bug in IntroExample./Removed all deprecated methods and fixed examples./Examples should use transaction blocks (#2800) * Moving examples over to execute transaction * Updating comments to use executeTransaction * Use partial mocks for Realm#executeTransaction(...) and create additional tests to illustrate mock verification of Realm#executeTransaction(...). Had to do this because of a problem with Powermock:
,,0.1271,realm-java,Fix JVM unit tests./Examples should use transaction blocks (#2800) * Moving examples over to execute transaction * Updating comments to use executeTransaction * Use partial mocks for Realm#executeTransaction(...) and create additional tests to illustrate mock verification of Realm#executeTransaction(...). Had to do this because of a problem with Powermock:
,,0.1484,realm-java,Examples should use transaction blocks (#2800) * Moving examples over to execute transaction * Updating comments to use executeTransaction * Use partial mocks for Realm#executeTransaction(...) and create additional tests to illustrate mock verification of Realm#executeTransaction(...). Had to do this because of a problem with Powermock:
,,0.1311,realm-java,Examples should use transaction blocks (#2800) * Moving examples over to execute transaction * Updating comments to use executeTransaction * Use partial mocks for Realm#executeTransaction(...) and create additional tests to illustrate mock verification of Realm#executeTransaction(...). Had to do this because of a problem with Powermock:
,,0.1683,realm-java,Removed all deprecated methods and fixed examples./Examples should use transaction blocks (#2800) * Moving examples over to execute transaction * Updating comments to use executeTransaction * Use partial mocks for Realm#executeTransaction(...) and create additional tests to illustrate mock verification of Realm#executeTransaction(...). Had to do this because of a problem with Powermock:
,,0.1698,realm-java,Merge pull request from realm/lk/fix-typo Fix typo and rename a test./Fix typo and rename a test./Examples should use transaction blocks (#2800) * Moving examples over to execute transaction * Updating comments to use executeTransaction * Use partial mocks for Realm#executeTransaction(...) and create additional tests to illustrate mock verification of Realm#executeTransaction(...). Had to do this because of a problem with Powermock:
,,0.1519,realm-java,Examples should use transaction blocks (#2800) * Moving examples over to execute transaction * Updating comments to use executeTransaction * Use partial mocks for Realm#executeTransaction(...) and create additional tests to illustrate mock verification of Realm#executeTransaction(...). Had to do this because of a problem with Powermock:
,,0.0807,realm-java,Removed all deprecated methods and fixed examples./
,,0.1536,realm-java,Examples should use transaction blocks (#2800) * Moving examples over to execute transaction * Updating comments to use executeTransaction * Use partial mocks for Realm#executeTransaction(...) and create additional tests to illustrate mock verification of Realm#executeTransaction(...). Had to do this because of a problem with Powermock:
,,0.2827,realm-java,Merge pull request from realm/merge-f3b025-to-master * Check transaction state for buld insertion (#3228) * Throws if they are not called in a transaction. * Test cases for buld insertion thread checking. * Lint warnings fix. Close * Clarify how insertOrUpdate behave for objects with primary keys. (#3241) * Missing transaction in threading example (#3245) Close * insert(): Correctly detect multiple objects with the same primary key (#3239) * Fix isLoaded JavaDoc (#3240)/Add quotes around terms in exceptions message (#3221) Close pull request from realm/merge-ecbacf-to-master Fix merge from ecbacf to master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for
,,0.152,realm-java,Add quotes around terms in exceptions message (#3221) Close pull request from realm/merge-ecbacf-to-master Fix merge from ecbacf to master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for
,,0.2696,realm-java,"Merge pull request from realm/merge-f3b025-to-master * Check transaction state for buld insertion (#3228) * Throws if they are not called in a transaction. * Test cases for buld insertion thread checking. * Lint warnings fix. Close * Clarify how insertOrUpdate behave for objects with primary keys. (#3241) * Missing transaction in threading example (#3245) Close * insert(): Correctly detect multiple objects with the same primary key (#3239) * Fix isLoaded JavaDoc (#3240)/Add quotes around terms in exceptions message (#3221) Close pull request from realm/merge-ecbacf-to-master Fix merge from ecbacf to master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for behavior javadoc (#2750) The behavior of hashCode is documented as it is pointed in issue Until realm-java has an immutable identifier, the behavior of hashCode should remain documented./"
,,0.1034,realm-java,Merge pull request from realm/merge-ecbacf-to-master Fix merge from ecbacf to master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for
,,0.1085,realm-java,Merge pull request from realm/merge-ecbacf-to-master Fix merge from ecbacf to master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for
,,0.0949,realm-java,Merge pull request from realm/merge-ecbacf-to-master Fix merge from ecbacf to master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for
,,0.0818,realm-java,Add quotes around terms in exceptions message (#3221) Close
,,0.1894,realm-java,"Unit test cleanup and parameterization for PrimaryKey (#2815) The issue is addressed with adding more coverage and cleanup for PrimaryKey related unit tests. 1. With an exception, all the null primarykey tests in RealmTests are now parameterized. 2. Parameters in RealmJsonNullPrimaryKeyTests are cleaned up. 3. Realm.createObject(class, primaryKeyValue) is tested with null in positive and negative manner. 4. NullPrimaryKey interface is expanded to setters as well./"
,,0.1855,realm-java,"Avoid Table.nativeToString/nativeRowToString (#2884) Table::row_to_string Table::to_string are for debugging purpose only, it calls string::substr which might truncate an UTF-8 string at any char. Thus a crash could happend in JNI when converting to UTF-16. This will only happen when user attach a debugger and the debugger is trying to call Table.toString. Close"
,,0.0902,realm-java,Table.toString() shows PK detail (#2903) To enhance toString() message for including PK information to debug Table./
,,0.1887,realm-java,"Avoid Table.nativeToString/nativeRowToString (#2884) Table::row_to_string Table::to_string are for debugging purpose only, it calls string::substr which might truncate an UTF-8 string at any char. Thus a crash could happend in JNI when converting to UTF-16. This will only happen when user attach a debugger and the debugger is trying to call Table.toString. Close"
,,0.1795,realm-java,"Unit test cleanup and parameterization for PrimaryKey (#2815) The issue is addressed with adding more coverage and cleanup for PrimaryKey related unit tests. 1. With an exception, all the null primarykey tests in RealmTests are now parameterized. 2. Parameters in RealmJsonNullPrimaryKeyTests are cleaned up. 3. Realm.createObject(class, primaryKeyValue) is tested with null in positive and negative manner. 4. NullPrimaryKey interface is expanded to setters as well./Fixed unit tests./"
,,0.1877,realm-java,"Unit test cleanup and parameterization for PrimaryKey (#2815) The issue is addressed with adding more coverage and cleanup for PrimaryKey related unit tests. 1. With an exception, all the null primarykey tests in RealmTests are now parameterized. 2. Parameters in RealmJsonNullPrimaryKeyTests are cleaned up. 3. Realm.createObject(class, primaryKeyValue) is tested with null in positive and negative manner. 4. NullPrimaryKey interface is expanded to setters as well./"
,,0.2683,realm-java,"Check transaction state for buld insertion (#3228) * Throws if they are not called in a transaction. * Test cases for buld insertion thread checking. * Lint warnings fix. Close a race condition in RealmTests.deleteRealm(). (#3127) If `assertTrue(tempDir.renameTo(tempDirRenamed));` is executed before other threads `Realm realm Realm.getInstance(configuration);`, opening Realm fails with `no such directory`./Optimistic opening of a Realm file (#3013) We have anecdotal evidence that multiple processes might be open for the same app. We have not been able to verify this, but the result matches the ""IncompatibleLockFile"" errors reported in This happens if the two processes have two versions of Realm (e.g. during app upgrades). This PR is based on our assumption that such an overlap is not intentional and only happens because one process is started before the previous was completely shut down. So this PR introduces an optimistic opening scheme where we retry for 3 second before crashing as before./Unit test cleanup and parameterization for PrimaryKey (#2815) The issue is addressed with adding more coverage and cleanup for PrimaryKey related unit tests. 1. With an exception, all the null primarykey tests in RealmTests are now parameterized. 2. Parameters in RealmJsonNullPrimaryKeyTests are cleaned up. 3. Realm.createObject(class, primaryKeyValue) is tested with null in positive and negative manner. 4. NullPrimaryKey interface is expanded to setters as well./add a null check to addChangeListener and removeChangeListener (#2805) * add a null check to addChangeListener and removeChangeListener in Realm and DynamicRealm (fixes * reflect review comments/Fixed unit tests./"
,,0.1843,realm-java,"Unit test cleanup and parameterization for PrimaryKey (#2815) The issue is addressed with adding more coverage and cleanup for PrimaryKey related unit tests. 1. With an exception, all the null primarykey tests in RealmTests are now parameterized. 2. Parameters in RealmJsonNullPrimaryKeyTests are cleaned up. 3. Realm.createObject(class, primaryKeyValue) is tested with null in positive and negative manner. 4. NullPrimaryKey interface is expanded to setters as well./"
,,0.1877,realm-java,"Unit test cleanup and parameterization for PrimaryKey (#2815) The issue is addressed with adding more coverage and cleanup for PrimaryKey related unit tests. 1. With an exception, all the null primarykey tests in RealmTests are now parameterized. 2. Parameters in RealmJsonNullPrimaryKeyTests are cleaned up. 3. Realm.createObject(class, primaryKeyValue) is tested with null in positive and negative manner. 4. NullPrimaryKey interface is expanded to setters as well./"
,,0.18600000000000003,realm-java,"Unit test cleanup and parameterization for PrimaryKey (#2815) The issue is addressed with adding more coverage and cleanup for PrimaryKey related unit tests. 1. With an exception, all the null primarykey tests in RealmTests are now parameterized. 2. Parameters in RealmJsonNullPrimaryKeyTests are cleaned up. 3. Realm.createObject(class, primaryKeyValue) is tested with null in positive and negative manner. 4. NullPrimaryKey interface is expanded to setters as well./"
,,0.18600000000000003,realm-java,"Unit test cleanup and parameterization for PrimaryKey (#2815) The issue is addressed with adding more coverage and cleanup for PrimaryKey related unit tests. 1. With an exception, all the null primarykey tests in RealmTests are now parameterized. 2. Parameters in RealmJsonNullPrimaryKeyTests are cleaned up. 3. Realm.createObject(class, primaryKeyValue) is tested with null in positive and negative manner. 4. NullPrimaryKey interface is expanded to setters as well./"
,,0.1877,realm-java,"Unit test cleanup and parameterization for PrimaryKey (#2815) The issue is addressed with adding more coverage and cleanup for PrimaryKey related unit tests. 1. With an exception, all the null primarykey tests in RealmTests are now parameterized. 2. Parameters in RealmJsonNullPrimaryKeyTests are cleaned up. 3. Realm.createObject(class, primaryKeyValue) is tested with null in positive and negative manner. 4. NullPrimaryKey interface is expanded to setters as well./"
,,0.1877,realm-java,"Unit test cleanup and parameterization for PrimaryKey (#2815) The issue is addressed with adding more coverage and cleanup for PrimaryKey related unit tests. 1. With an exception, all the null primarykey tests in RealmTests are now parameterized. 2. Parameters in RealmJsonNullPrimaryKeyTests are cleaned up. 3. Realm.createObject(class, primaryKeyValue) is tested with null in positive and negative manner. 4. NullPrimaryKey interface is expanded to setters as well./"
,,0.1928,realm-java,"Unit test cleanup and parameterization for PrimaryKey (#2815) The issue is addressed with adding more coverage and cleanup for PrimaryKey related unit tests. 1. With an exception, all the null primarykey tests in RealmTests are now parameterized. 2. Parameters in RealmJsonNullPrimaryKeyTests are cleaned up. 3. Realm.createObject(class, primaryKeyValue) is tested with null in positive and negative manner. 4. NullPrimaryKey interface is expanded to setters as well./"
,,0.1894,realm-java,"Unit test cleanup and parameterization for PrimaryKey (#2815) The issue is addressed with adding more coverage and cleanup for PrimaryKey related unit tests. 1. With an exception, all the null primarykey tests in RealmTests are now parameterized. 2. Parameters in RealmJsonNullPrimaryKeyTests are cleaned up. 3. Realm.createObject(class, primaryKeyValue) is tested with null in positive and negative manner. 4. NullPrimaryKey interface is expanded to setters as well./"
,,0.1911,realm-java,"Unit test cleanup and parameterization for PrimaryKey (#2815) The issue is addressed with adding more coverage and cleanup for PrimaryKey related unit tests. 1. With an exception, all the null primarykey tests in RealmTests are now parameterized. 2. Parameters in RealmJsonNullPrimaryKeyTests are cleaned up. 3. Realm.createObject(class, primaryKeyValue) is tested with null in positive and negative manner. 4. NullPrimaryKey interface is expanded to setters as well./"
,,0.18100000000000002,realm-java,"Unit test cleanup and parameterization for PrimaryKey (#2815) The issue is addressed with adding more coverage and cleanup for PrimaryKey related unit tests. 1. With an exception, all the null primarykey tests in RealmTests are now parameterized. 2. Parameters in RealmJsonNullPrimaryKeyTests are cleaned up. 3. Realm.createObject(class, primaryKeyValue) is tested with null in positive and negative manner. 4. NullPrimaryKey interface is expanded to setters as well./"
,,0.0765,realm-java,Removed all deprecated methods and fixed examples./
,,0.0828,realm-java,Removed all deprecated methods and fixed examples./
,,0.0807,realm-java,Removed all deprecated methods and fixed examples./
,,0.1325,realm-java,Allow empty collection to insert/insertOrUpdate(Collection) (#3106) * added tests to reproduce * Fixed a crash when an empty `Collection` is passed to `insert()`/`insertOrUpdate()` (#3103). * update the implementation * update javadoc comment/
,,0.1773,realm-java,"Avoid Table.nativeToString/nativeRowToString (#2884) Table::row_to_string Table::to_string are for debugging purpose only, it calls string::substr which might truncate an UTF-8 string at any char. Thus a crash could happend in JNI when converting to UTF-16. This will only happen when user attach a debugger and the debugger is trying to call Table.toString. Close"
,,0.3069,realm-java,Merge pull request from realm/merge-549478-to-master Fix merge from 549478 to master/Fix javadoc/Merge pull request from realm/merge-f3b025-to-master * Check transaction state for buld insertion (#3228) * Throws if they are not called in a transaction. * Test cases for buld insertion thread checking. * Lint warnings fix. Close * Clarify how insertOrUpdate behave for objects with primary keys. (#3241) * Missing transaction in threading example (#3245) Close * insert(): Correctly detect multiple objects with the same primary key (#3239) * Fix isLoaded JavaDoc (#3240)/Fix isLoaded JavaDoc (#3240)/Remove optional APIs if dependencies dont meet (#2727) * Add to mark a method as optional with dependencies. * New bytecode transformer to remove an optional API if it doesnt have enough dependencies. * Modify gradle plugin. * Mark the rx.Observable related APIs as optional. * Add integration-tests module. This is not the perfect solution since the RxObservableFactory is still in the final result. But it is good enough for us to work around the issue with Jackson and other lib which needs to do reflection on the RealmObject./add a null check to addChangeListener and removeChangeListener (#2805) * add a null check to addChangeListener and removeChangeListener in Realm and DynamicRealm (fixes * reflect review comments/Removed all deprecated methods and fixed examples./Javadoc for using Realm with ObservedOn() & SubscribedOn() (#2787) It is recommended to use Realm.where().find*Async() instead of the combination of ObservedOn()/SubscribedOn() to avoid Realm being accessed from different threads./
,,0.1348,realm-java,"Optimistic opening of a Realm file (#3013) We have anecdotal evidence that multiple processes might be open for the same app. We have not been able to verify this, but the result matches the ""IncompatibleLockFile"" errors reported in This happens if the two processes have two versions of Realm (e.g. during app upgrades). This PR is based on our assumption that such an overlap is not intentional and only happens because one process is started before the previous was completely shut down. So this PR introduces an optimistic opening scheme where we retry for 3 second before crashing as before./"
,,0.1565,realm-java,Remove optional APIs if dependencies dont meet (#2727) * Add to mark a method as optional with dependencies. * New bytecode transformer to remove an optional API if it doesnt have enough dependencies. * Modify gradle plugin. * Mark the rx.Observable related APIs as optional. * Add integration-tests module. This is not the perfect solution since the RxObservableFactory is still in the final result. But it is good enough for us to work around the issue with Jackson and other lib which needs to do reflection on the RealmObject./add a null check to addChangeListener and removeChangeListener (#2805) * add a null check to addChangeListener and removeChangeListener in Realm and DynamicRealm (fixes * reflect review comments/Removed all deprecated methods and fixed examples./
,,0.174,realm-java,"Avoid Table.nativeToString/nativeRowToString (#2884) Table::row_to_string Table::to_string are for debugging purpose only, it calls string::substr which might truncate an UTF-8 string at any char. Thus a crash could happend in JNI when converting to UTF-16. This will only happen when user attach a debugger and the debugger is trying to call Table.toString. Close"
,,0.2047,realm-java,"JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./Avoid Table.nativeToString/nativeRowToString (#2884) Table::row_to_string Table::to_string are for debugging purpose only, it calls string::substr which might truncate an UTF-8 string at any char. Thus a crash could happend in JNI when converting to UTF-16. This will only happen when user attach a debugger and the debugger is trying to call Table.toString. Close"
,,0.1854,realm-java,"JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./Avoid Table.nativeToString/nativeRowToString (#2884) Table::row_to_string Table::to_string are for debugging purpose only, it calls string::substr which might truncate an UTF-8 string at any char. Thus a crash could happend in JNI when converting to UTF-16. This will only happen when user attach a debugger and the debugger is trying to call Table.toString. Close"
,,0.0993,realm-java,Wrong JNI function declaration caused test timeout (#2995) The worst thing is async query wont throw those exceptions in the background. * Rephrase changelog/
,,0.1806,realm-java,"Avoid Table.nativeToString/nativeRowToString (#2884) Table::row_to_string Table::to_string are for debugging purpose only, it calls string::substr which might truncate an UTF-8 string at any char. Thus a crash could happend in JNI when converting to UTF-16. This will only happen when user attach a debugger and the debugger is trying to call Table.toString. Close"
,,0.1322,realm-java,"Optimistic opening of a Realm file (#3013) We have anecdotal evidence that multiple processes might be open for the same app. We have not been able to verify this, but the result matches the ""IncompatibleLockFile"" errors reported in This happens if the two processes have two versions of Realm (e.g. during app upgrades). This PR is based on our assumption that such an overlap is not intentional and only happens because one process is started before the previous was completely shut down. So this PR introduces an optimistic opening scheme where we retry for 3 second before crashing as before./Print path info of File::AccessError (#2768)/"
,,0.0621,realm-java,Merge pull request from realm/merge-78ccde-to-master Fix merge from 78ccde to master/
,,0.0891,realm-java,Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./
,,0.607,realm-java,"add default value instruction support (#3462) * add default value support to Table class * Table#isNull() and TableView#isNull() * use default value feature * added a test to check if nullified link can be overwritten by default value * removed duplicate thread check when constructing proxy objects (and small bugfix in setter of the list). * added thread check * reflect review comments * reflect comment in JNI code/Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by a lint error in proxy classes when the minSdkVersion of users project is smaller than 11. (#3364) fixes 3105 (#3306) * Fixing issue with Cyclic dependency insert or the existing copyToRealm, adding support for managed RealmObject/"
,,0.6054,realm-java,"add default value instruction support (#3462) * add default value support to Table class * Table#isNull() and TableView#isNull() * use default value feature * added a test to check if nullified link can be overwritten by default value * removed duplicate thread check when constructing proxy objects (and small bugfix in setter of the list). * added thread check * reflect review comments * reflect comment in JNI code/Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by a lint error in proxy classes when the minSdkVersion of users project is smaller than 11. (#3364) fixes 3105 (#3306) * Fixing issue with Cyclic dependency insert or the existing copyToRealm, adding support for managed RealmObject/"
,,0.4826,realm-java,"Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/"
,,0.6093,realm-java,"add default value instruction support (#3462) * add default value support to Table class * Table#isNull() and TableView#isNull() * use default value feature * added a test to check if nullified link can be overwritten by default value * removed duplicate thread check when constructing proxy objects (and small bugfix in setter of the list). * added thread check * reflect review comments * reflect comment in JNI code/Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by a lint error in proxy classes when the minSdkVersion of users project is smaller than 11. (#3364) fixes 3105 (#3306) * Fixing issue with Cyclic dependency insert or the existing copyToRealm, adding support for managed RealmObject/"
,,0.4886,realm-java,"Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/"
,,0.4774,realm-java,"Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Nh/fixing 3105 (#3306) * Fixing issue with Cyclic dependency insert or the existing copyToRealm, adding support for managed RealmObject/"
,,0.3629,realm-java,Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by
,,0.5213,realm-java,"Refactor RealmLog (#3643) The motivation: * The previous implementaion for JNI log needs calls like: JNI Java JNI. It is not quite effecient for the most common case log in JNI and sync. * The previous log levels are bit confusing. * util.cpp gets messy. * The Logger class in Java gets confusing with the Logger from core/sync. So this commit makes below changes: * Adds RealmLogger to replace Logger. Creates a adaptor to ensure the subclass of Logger can still be used by the new system before we remove the Logger class. * Adds cpp namespace jni_impl and jni_util, and make log relevant code belong to these two namepsaces. * Moves the RealmLog to JNI. * Implenment a default Android logger in native code. * Add tag support for realm-java Logger. Java side is using tag ""REALM_JAVA"", JNI side is using tag ""REALM_JNI"" and sync is using tag ""REALM_CORE"". * All tags share the same log level. * Some cleanups. * Fix When there is existing java logger, calling log after ThrowNew will crash in native code because of a pending Java exception. It should be avoided. * Deprecate AndroidLogger./allow to put Realm database file on external storage. (#3591) * set the path of the directory of named pipes to fix * update CHANGELOG * add a test for issue3140 * update test * follow the chenges in object-store * skip an external storage test on the device where SELinux is not enforced * rename test * rename variable * update object-store * make SharedRealm#temporaryDirectory volatile * address findbugs error/Fix unit tests./Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Wait all async tasks done before next test (#3319) This is highly related with Below things are still guaranteed by this change after commit async transaction: * When callback function called (onSuccess/onError), the background Realm is closed. * When any change listeners called, the background Realm is closed. What is true now but it is not guaranteed in the future: * Background Realm might not be closed before REALM_CHANGED sent (not received). Due to this, to avoid the flaky tests, we have to ensure all async tasks quit peacefully before start the next test. This is implemented by wait and check in the TestRealmConfigurationFactory. NOTE: Any test, if the async tasks cannot be finished peacefully in a certain time, it has to be considered as a problem and fixed. This would be needed by OS notifications since Java wont have a precise control of sending REALM_CHANGED anymore./"
,,0.1328,realm-java,"Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./Use createObject(class, primaryKey) in test (#3377) Since Realm.createObject(class) will be deprecated on master for Classes with primary key defined, fix the test cases which use it first to avoid more conflicts when merging./"
,,0.47100000000000003,realm-java,"fix flaky test (#3626)/Merge pull request from realm/merge-1e5e15-to-master Fix merge from 1e5e15 to master/Merge pull request from realm/merge-d73611-to-master Fix merge from d73611 to master/fix unstable test (#3449)/Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Merge pull request from realm/merge-ac2ec8-to-master Fix merge from ac2ec8 to master/DeleteLocalRef when the ref is created in loop (#3366) Add wrapper class for JNI local reference to delete the local ref after using it. This is reported by user on helpscout: And some useful explanation can be found: Normally the local ref doesnt have to be deleted since they will be cleaned up when program returns to Java from native code. Using it in a loop is obvious a corner case: the size of local ref table is relatively small (512 on Android). To avoid it, the local ref should be deleted when using it in a loop./Wait all async tasks done before next test (#3319) This is highly related with Below things are still guaranteed by this change after commit async transaction: * When callback function called (onSuccess/onError), the background Realm is closed. * When any change listeners called, the background Realm is closed. What is true now but it is not guaranteed in the future: * Background Realm might not be closed before REALM_CHANGED sent (not received). Due to this, to avoid the flaky tests, we have to ensure all async tasks quit peacefully before start the next test. This is implemented by wait and check in the TestRealmConfigurationFactory. NOTE: Any test, if the async tasks cannot be finished peacefully in a certain time, it has to be considered as a problem and fixed. This would be needed by OS notifications since Java wont have a precise control of sending REALM_CHANGED anymore./Remove the dependency of Realm.Handler from tests (#3317) Instead, those tests should use method from RunInLooperThread. Fix this in advance for the coming OS notification integration./"
,,0.5731,realm-java,"Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by"
,,0.1504,realm-java,"Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./Use createObject(class, primaryKey) in test (#3377) Since Realm.createObject(class) will be deprecated on master for Classes with primary key defined, fix the test cases which use it first to avoid more conflicts when merging./Nh/fixing 3105 (#3306) * Fixing issue with Cyclic dependency insert or the existing copyToRealm, adding support for managed RealmObject/"
,,0.0938,realm-java,"Use createObject(class, primaryKey) in test (#3377) Since Realm.createObject(class) will be deprecated on master for Classes with primary key defined, fix the test cases which use it first to avoid more conflicts when merging./"
,,0.297,realm-java,add default value instruction support (#3462) * add default value support to Table class * Table#isNull() and TableView#isNull() * use default value feature * added a test to check if nullified link can be overwritten by default value * removed duplicate thread check when constructing proxy objects (and small bugfix in setter of the list). * added thread check * reflect review comments * reflect comment in JNI code/
,,0.2833,realm-java,add default value instruction support (#3462) * add default value support to Table class * Table#isNull() and TableView#isNull() * use default value feature * added a test to check if nullified link can be overwritten by default value * removed duplicate thread check when constructing proxy objects (and small bugfix in setter of the list). * added thread check * reflect review comments * reflect comment in JNI code/
,,0.4418,realm-java,add default value instruction support (#3462) * add default value support to Table class * Table#isNull() and TableView#isNull() * use default value feature * added a test to check if nullified link can be overwritten by default value * removed duplicate thread check when constructing proxy objects (and small bugfix in setter of the list). * added thread check * reflect review comments * reflect comment in JNI code/Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by
,,0.2805,realm-java,add default value instruction support (#3462) * add default value support to Table class * Table#isNull() and TableView#isNull() * use default value feature * added a test to check if nullified link can be overwritten by default value * removed duplicate thread check when constructing proxy objects (and small bugfix in setter of the list). * added thread check * reflect review comments * reflect comment in JNI code/
,,0.3398,realm-java,Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by
,,0.0883,realm-java,"Use createObject(class, primaryKey) in test (#3377) Since Realm.createObject(class) will be deprecated on master for Classes with primary key defined, fix the test cases which use it first to avoid more conflicts when merging./"
,,0.1864,realm-java,"Merge pull request from realm/merge-1e5e15-to-master Fix merge from 1e5e15 to master/Fix native crash in DynamicRealmObject#setList() (#3550)/Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./Use createObject(class, primaryKey) in test (#3377) Since Realm.createObject(class) will be deprecated on master for Classes with primary key defined, fix the test cases which use it first to avoid more conflicts when merging./Typed getters on DynamicRealmObject now throws a proper exception instead of creating a seg fault when called with a field name of the wrong type. (#3312)/"
,,0.4376,realm-java,Fix unstable test (#3495)/add default value instruction support (#3462) * add default value support to Table class * Table#isNull() and TableView#isNull() * use default value feature * added a test to check if nullified link can be overwritten by default value * removed duplicate thread check when constructing proxy objects (and small bugfix in setter of the list). * added thread check * reflect review comments * reflect comment in JNI code/Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by pull request from realm/merge-e62d11-to-master Fix merge from e62d11 to master/
,,0.0849,realm-java,Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./
,,0.3296,realm-java,Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by
,,0.0929,realm-java,Update core to 2.0.0-rc4 (#3384) * And with some code cleanup. * Throw an runtime exception when input java bytes array cannot be read. * Update Object Store to solve the breaking change caused failure. See * Use instead since it seems a gcc bug hangs encryption releated tests with enabled in JNI build./
,,0.1044,realm-java,Merge pull request from realm/mc/realm-file-excpetion Add RealmFileException/Add RealmFileException to replace RealmIOException and IncompatibleLockFileException. Also it is mapped to the same name exception in ObjectStore to give user a detailed kind of file exception./
,,0.0811,realm-java,"Use createObject(class, primaryKey) in test (#3377) Since Realm.createObject(class) will be deprecated on master for Classes with primary key defined, fix the test cases which use it first to avoid more conflicts when merging./"
,,0.6155,realm-java,"allow to put Realm database file on external storage. (#3591) * set the path of the directory of named pipes to fix * update CHANGELOG * add a test for issue3140 * update test * follow the chenges in object-store * skip an external storage test on the device where SELinux is not enforced * rename test * rename variable * update object-store * make SharedRealm#temporaryDirectory volatile * address findbugs error/add default value instruction support (#3462) * add default value support to Table class * Table#isNull() and TableView#isNull() * use default value feature * added a test to check if nullified link can be overwritten by default value * removed duplicate thread check when constructing proxy objects (and small bugfix in setter of the list). * added thread check * reflect review comments * reflect comment in JNI code/Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by createObject(class, primaryKey) in test (#3377) Since Realm.createObject(class) will be deprecated on master for Classes with primary key defined, fix the test cases which use it first to avoid more conflicts when merging./Integrate Object Store [PART4] OS notifications (#3370) * Use OSs notification mechanism to notify threads. * Create RealmNotificer interface for decouple Android related handler logic. * Create AndroidNotifier for the handler notifications. The major change of this PR is about the timing. The notifications are not sent immediately after transaction committed. Instead, there is a dedicated thread monitoring changes and notify others when changes happen. The known problem is for every RealmConfiguration, a monitor thread will be created which is not ideal for app which is using multiple RealmConfiguration. There are different implementations for the monitoring thread in OS. For Android, we can choose from generic which is based on the cores wait_for_change() and android which is used by dotnet based on the named pipe. To align with dotnet, we are using the named pipe for now which also enables notifications between realm-java and realm-dotnet./Merge pull request from realm/mc/realm-file-excpetion Add RealmFileException/Add RealmFileException to replace RealmIOException and IncompatibleLockFileException. Also it is mapped to the same name exception in ObjectStore to give user a detailed kind of file exception./Remove improper incompatibleLockFile test (#3324) This test is not constructed properly. It tries to modify the lock file while the Realm is still opened. This would cause some undefined behaviour in core. Especially when we are using the generic external_commit_helper which is based on SharedGroup::wait_for_change() the helper thread will freeze because of polling hangs forever. Just remove the test, core should ensure the proper exception thrown and we have other tests to ensure the exception conversion right./"
,,0.1189,realm-java,"Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./Use createObject(class, primaryKey) in test (#3377) Since Realm.createObject(class) will be deprecated on master for Classes with primary key defined, fix the test cases which use it first to avoid more conflicts when merging./"
,,0.0902,realm-java,"Use createObject(class, primaryKey) in test (#3377) Since Realm.createObject(class) will be deprecated on master for Classes with primary key defined, fix the test cases which use it first to avoid more conflicts when merging./"
,,0.4826,realm-java,"Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/"
,,0.0902,realm-java,"Use createObject(class, primaryKey) in test (#3377) Since Realm.createObject(class) will be deprecated on master for Classes with primary key defined, fix the test cases which use it first to avoid more conflicts when merging./"
,,0.1415,realm-java,"Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./Use createObject(class, primaryKey) in test (#3377) Since Realm.createObject(class) will be deprecated on master for Classes with primary key defined, fix the test cases which use it first to avoid more conflicts when merging./"
,,0.1538,realm-java,"Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./Update core to 2.0.0-rc4 (#3384) * And with some code cleanup. * Throw an runtime exception when input java bytes array cannot be read. * Update Object Store to solve the breaking change caused failure. See * Use instead since it seems a gcc bug hangs encryption releated tests with enabled in JNI build./Use createObject(class, primaryKey) in test (#3377) Since Realm.createObject(class) will be deprecated on master for Classes with primary key defined, fix the test cases which use it first to avoid more conflicts when merging./Smaller fixes to binary queries (#3323) * Updated changelog with credits * Fix potential memory leak * Add JniBytesArray helper class/"
,,0.0807,realm-java,Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./
,,0.0702,realm-java,Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./
,,0.4866,realm-java,"Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/"
,,0.0807,realm-java,Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./
,,0.0849,realm-java,Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./
,,0.0912,realm-java,Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./
,,0.0807,realm-java,Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./
,,0.0828,realm-java,Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./
,,0.1236,realm-java,Merge pull request from realm/mc/realm-file-excpetion Add RealmFileException/Add RealmFileException to replace RealmIOException and IncompatibleLockFileException. Also it is mapped to the same name exception in ObjectStore to give user a detailed kind of file exception./
,,0.4373,realm-java,"Refactor RealmLog (#3643) The motivation: * The previous implementaion for JNI log needs calls like: JNI Java JNI. It is not quite effecient for the most common case log in JNI and sync. * The previous log levels are bit confusing. * util.cpp gets messy. * The Logger class in Java gets confusing with the Logger from core/sync. So this commit makes below changes: * Adds RealmLogger to replace Logger. Creates a adaptor to ensure the subclass of Logger can still be used by the new system before we remove the Logger class. * Adds cpp namespace jni_impl and jni_util, and make log relevant code belong to these two namepsaces. * Moves the RealmLog to JNI. * Implenment a default Android logger in native code. * Add tag support for realm-java Logger. Java side is using tag ""REALM_JAVA"", JNI side is using tag ""REALM_JNI"" and sync is using tag ""REALM_CORE"". * All tags share the same log level. * Some cleanups. * Fix When there is existing java logger, calling log after ThrowNew will crash in native code because of a pending Java exception. It should be avoided. * Deprecate AndroidLogger./Integrate Object Store [PART4] OS notifications (#3370) * Use OSs notification mechanism to notify threads. * Create RealmNotificer interface for decouple Android related handler logic. * Create AndroidNotifier for the handler notifications. The major change of this PR is about the timing. The notifications are not sent immediately after transaction committed. Instead, there is a dedicated thread monitoring changes and notify others when changes happen. The known problem is for every RealmConfiguration, a monitor thread will be created which is not ideal for app which is using multiple RealmConfiguration. There are different implementations for the monitoring thread in OS. For Android, we can choose from generic which is based on the cores wait_for_change() and android which is used by dotnet based on the named pipe. To align with dotnet, we are using the named pipe for now which also enables notifications between realm-java and realm-dotnet./Merge pull request from realm/merge-e62d11-to-master Fix merge from e62d11 to master/Fix notification tests for following changes (#3301) * Fix notification tests for following changes To support multiprocess & OS notifications, a dedicated thread will monitor the Realm changes and send notifications to other thread. This means our tests cannot assume notifications will be sent for every transaction commit. Also, the Realm.handler will moved to a lower layer, its better to not rely on it in the test as well. To avoid a massive PR, tests changes are made separately first./Fix flaky test (#3224)/"
,,0.1201,realm-java,Make RealmAsyncTask into an interface (#133) * Make RealmAsyncTask into an interface and move the implementation into internal package. Then we can create the async task in different internal packages without exposing the constructor to outside. Part of fix for FIXMEs and create them as Github issues. (#130)/
,,0.5710000000000001,realm-java,"Add cause to RealmMigrationNeededException (#3482)/Removing FIXMEs and create them as Github issues. (#130)/Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Integrate Object Store [PART4] OS notifications (#3370) * Use OSs notification mechanism to notify threads. * Create RealmNotificer interface for decouple Android related handler logic. * Create AndroidNotifier for the handler notifications. The major change of this PR is about the timing. The notifications are not sent immediately after transaction committed. Instead, there is a dedicated thread monitoring changes and notify others when changes happen. The known problem is for every RealmConfiguration, a monitor thread will be created which is not ideal for app which is using multiple RealmConfiguration. There are different implementations for the monitoring thread in OS. For Android, we can choose from generic which is based on the cores wait_for_change() and android which is used by dotnet based on the named pipe. To align with dotnet, we are using the named pipe for now which also enables notifications between realm-java and realm-dotnet./Merge pull request from realm/mc/realm-file-excpetion Add RealmFileException/Add RealmFileException to replace RealmIOException and IncompatibleLockFileException. Also it is mapped to the same name exception in ObjectStore to give user a detailed kind of file exception./Wait all async tasks done before next test (#3319) This is highly related with Below things are still guaranteed by this change after commit async transaction: * When callback function called (onSuccess/onError), the background Realm is closed. * When any change listeners called, the background Realm is closed. What is true now but it is not guaranteed in the future: * Background Realm might not be closed before REALM_CHANGED sent (not received). Due to this, to avoid the flaky tests, we have to ensure all async tasks quit peacefully before start the next test. This is implemented by wait and check in the TestRealmConfigurationFactory. NOTE: Any test, if the async tasks cannot be finished peacefully in a certain time, it has to be considered as a problem and fixed. This would be needed by OS notifications since Java wont have a precise control of sending REALM_CHANGED anymore./Merge pull request from realm/merge-78ccde-to-master Fix merge from 78ccde to master/"
,,0.4787,realm-java,"Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/"
,,0.5005,realm-java,"Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Merge pull request from realm/my/javadoc_RealmProxyMediator Fix javadoc comments in io.realm.internal.RealmProxyMediator/fix javadoc comments in io.realm.internal.RealmProxyMediator/"
,,0.3463,realm-java,"Integrate Object Store [PART4] OS notifications (#3370) * Use OSs notification mechanism to notify threads. * Create RealmNotificer interface for decouple Android related handler logic. * Create AndroidNotifier for the handler notifications. The major change of this PR is about the timing. The notifications are not sent immediately after transaction committed. Instead, there is a dedicated thread monitoring changes and notify others when changes happen. The known problem is for every RealmConfiguration, a monitor thread will be created which is not ideal for app which is using multiple RealmConfiguration. There are different implementations for the monitoring thread in OS. For Android, we can choose from generic which is based on the cores wait_for_change() and android which is used by dotnet based on the named pipe. To align with dotnet, we are using the named pipe for now which also enables notifications between realm-java and realm-dotnet./"
,,0.2915,realm-java,add default value instruction support (#3462) * add default value support to Table class * Table#isNull() and TableView#isNull() * use default value feature * added a test to check if nullified link can be overwritten by default value * removed duplicate thread check when constructing proxy objects (and small bugfix in setter of the list). * added thread check * reflect review comments * reflect comment in JNI code/
,,0.4866,realm-java,"Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/"
,,0.4846,realm-java,"Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/"
,,0.1068,realm-java,Merge pull request from realm/merge-a1e0f8-to-master Fix merge from a1e0f8 to master/Update ProGuard configuration (#3596) * update ProGuard configuration * update comment * remove unnecessary comments * restore SyncSession#notifySessionError() * fix error * introduce KeepMember annotations and mark SyncSession#notifySessionError() with KeepMember * update year * update CHANGELOG/
,,0.1025,realm-java,Merge pull request from realm/mc/realm-file-excpetion Add RealmFileException/Add RealmFileException to replace RealmIOException and IncompatibleLockFileException. Also it is mapped to the same name exception in ObjectStore to give user a detailed kind of file exception./
,,0.1063,realm-java,Merge pull request from realm/mc/realm-file-excpetion Add RealmFileException/Add RealmFileException to replace RealmIOException and IncompatibleLockFileException. Also it is mapped to the same name exception in ObjectStore to give user a detailed kind of file exception./
,,0.1006,realm-java,Merge pull request from realm/mc/realm-file-excpetion Add RealmFileException/Add RealmFileException to replace RealmIOException and IncompatibleLockFileException. Also it is mapped to the same name exception in ObjectStore to give user a detailed kind of file exception./
,,0.5482,realm-java,"Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Update core to 2.0.0-rc4 (#3384) * And with some code cleanup. * Throw an runtime exception when input java bytes array cannot be read. * Update Object Store to solve the breaking change caused failure. See * Use instead since it seems a gcc bug hangs encryption releated tests with enabled in JNI build./Integrate Object Store [PART4] OS notifications (#3370) * Use OSs notification mechanism to notify threads. * Create RealmNotificer interface for decouple Android related handler logic. * Create AndroidNotifier for the handler notifications. The major change of this PR is about the timing. The notifications are not sent immediately after transaction committed. Instead, there is a dedicated thread monitoring changes and notify others when changes happen. The known problem is for every RealmConfiguration, a monitor thread will be created which is not ideal for app which is using multiple RealmConfiguration. There are different implementations for the monitoring thread in OS. For Android, we can choose from generic which is based on the cores wait_for_change() and android which is used by dotnet based on the named pipe. To align with dotnet, we are using the named pipe for now which also enables notifications between realm-java and realm-dotnet./Merge pull request from realm/merge-e62d11-to-master Fix merge from e62d11 to master/"
,,0.5885,realm-java,"Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./Create object without setting PK is not allowed (#3379) * Create object without setting PK is not allowed * createObject must be called with PK value when creating a object with PK defined. * Creating objects from JSON must have have corresponding PK defined in the JSON object. Known issue: The default values for creating object from JSONStream will be differnt from those created by createObject. Default values from default constructor VS default values from core. This has to be addressed by pull request from realm/mc/realm-file-excpetion Add RealmFileException/Add RealmFileException to replace RealmIOException and IncompatibleLockFileException. Also it is mapped to the same name exception in ObjectStore to give user a detailed kind of file exception./Merge pull request from realm/merge-78ccde-to-master Fix merge from 78ccde to master/"
,,0.5017,realm-java,"Merge pull request from realm/merge-1e5e15-to-master Fix merge from 1e5e15 to master/Fix native crash in DynamicRealmObject#setList() (#3550)/Allow to specify default value of the field in models constructor (#3397) * Allow to call its accessors, and replace its field accesses with accessor calls in models constructor. fixes fixes * use field instead of checking transaction * fix a bug that acceptDefaultValue is not set correctly * reject default values when the getter of a model creates other model object * add simple test for default value * supports default value of model field * supports default value of RealmList fields * add tests for assignment in constructor and setter in constructor * update javadoc comments of createObject * always ignores the default value of primary key if the object is managed * update javadoc * add a test for default values handling in copyToRealm(). the last assertion of RealmTests.copyToRealm_defaultValuesAreIgnored() is failing now. * refactor tests * use isPrimaryKey() * fix a bug that unexpected realm object is created by default value of RealmModel/RealmList fields * remove extra ; from generated code * add more tests for default value * fix tests * fix a bug that creates unexpected objects * rename internal methods * update changelog * update CHANGELOG * review comments * update CHANGELOG * added a description of how proxy object should be created in the Javadoc comment of RealmProcessor/Disallow changing PK after object created (#3418) Thrown an exception if changing the pk after the object creation./Typed getters on DynamicRealmObject now throws a proper exception instead of creating a seg fault when called with a field name of the wrong type. (#3312)/Merge pull request from realm/merge-e62d11-to-master Fix merge from e62d11 to master/DynamicRealmObject.setList declaration fix (#3290) It should only accept RealmList<DynamicRealmObject>. Fix"
,,0.3586,realm-java,"Integrate Object Store [PART4] OS notifications (#3370) * Use OSs notification mechanism to notify threads. * Create RealmNotificer interface for decouple Android related handler logic. * Create AndroidNotifier for the handler notifications. The major change of this PR is about the timing. The notifications are not sent immediately after transaction committed. Instead, there is a dedicated thread monitoring changes and notify others when changes happen. The known problem is for every RealmConfiguration, a monitor thread will be created which is not ideal for app which is using multiple RealmConfiguration. There are different implementations for the monitoring thread in OS. For Android, we can choose from generic which is based on the cores wait_for_change() and android which is used by dotnet based on the named pipe. To align with dotnet, we are using the named pipe for now which also enables notifications between realm-java and realm-dotnet./"
,,0.1049,realm-java,"Nh/fix 3966 (#3979) Realm migration is triggered, when the primary key definition is altered (#3966)/Java lint warnings with proxy class (#3948) Fix a bug that caused unexpected MigrationNeededException in very rare case. (#3768) In sync mode, `validateTable()` must get all fields in the tabla./"
,,0.0744,realm-java,Merge pull request from realm/merge-ed0f18-to-master Fix merge from ed0f18 to master/Nh/fixes 3732 insertOrUpdate using other Realm (#3755)/
,,0.1017,realm-java,"Nh/fix 3966 (#3979) Realm migration is triggered, when the primary key definition is altered (#3966)/Java lint warnings with proxy class (#3948) Fix pull request from realm/merge-a8d647-to-master Fix merge from a8d647 to master/Fixed a bug that caused unexpected MigrationNeededException in very rare case. (#3768) In sync mode, `validateTable()` must get all fields in the tabla./"
,,0.0872,realm-java,Improve Error Message Output when an Entity Class hasnt a default constructor with no argument (#3906)/
,,0.0765,realm-java,Merge pull request from realm/merge-ed0f18-to-master Fix merge from ed0f18 to master/Nh/fixes 3732 insertOrUpdate using other Realm (#3755)/
,,0.1006,realm-java,Fix tests and remove unnecessary imports and fields. (#4125) * Fix tests. * Remove unnecessary imports and fields./PR fix/Fix tests/Fix type based tests The original tests rely on the timing of the global listener and type based listeners which are changed a lot by integration of OS async. So rewrite those tests by removing the dependencies of global listener without changing the testing purpose. PS. : The global listener wont be called if it is added after the local transaction committed./
,,0.0945,realm-java,"Fix RealmCollection.contains not respecting custom equal methods (#4111)/Fix addChangeListener_listenerShouldBeCalledIfObjectChangesAfterAsyncReturn Since the HandlerController is removed, the orginal test doesnt make sense anymore. Rewrite it to a more generic test./Fix addChangeListener_returnedObjectOfCopyToRealmOrUpdate The original test wont pass since the object doesnt change after adding the listener. So change it to trigger the listener. This doesnt change the purpose of the test, the target of the test is to check if the listener on the return value of copyToRealmOrUpdate will be called./"
,,0.102,realm-java,Fix warning message in test case/Remove tests related with async handler impl 1. Remove some tests highly tighted with the old async implementation. 2. Fix some tests according to current OS async implementation./
,,0.0807,realm-java,Merge pull request from realm/merge-ed0f18-to-master Fix merge from ed0f18 to master/Nh/fixes 3732 insertOrUpdate using other Realm (#3755)/
,,0.1178,realm-java,Fix tests and remove unnecessary imports and fields. (#4125) * Fix tests. * Remove unnecessary imports and fields./
,,0.1067,realm-java,"Fix tests and remove unnecessary imports and fields. (#4125) * Fix tests. * Remove unnecessary imports and fields./Wire the ""like"" predicate into RealmQuery (#3992) * Wire the ""like"" predicate into RealmQuery Fixes"
,,0.1159,realm-java,Fix tests and remove unnecessary imports and fields. (#4125) * Fix tests. * Remove unnecessary imports and fields./
,,0.0588,realm-java,"Java doc, comments & exception message fix/Fix DynamicRealmTests/"
,,0.1121,realm-java,Fix tests and remove unnecessary imports and fields. (#4125) * Fix tests. * Remove unnecessary imports and fields./
,,0.0941,realm-java,"Fix the warnings of StrictMode The StrictMode warnings is caused by testInMemoryRealm which try to detect if there are IOs in the thread when using in-memory Realm. Well, that test is created by me and it doesnt make any sense to check with StrictMode. In memory Realm doesnt mean there will be no disk IOs, it only means if all the instances are closed, the data will not be persisted on the disk. And the StrictMode warning is cause by the last statement `StrictMode.enableDefault()`. StrictMode is not turned on for testing by default Fix"
,,0.2241,realm-java,"Fix tests and remove unnecessary imports and fields. (#4125) * Fix tests. * Remove unnecessary imports and fields./Merge pull request from realm/merge-5d1d1f-to-master Fix merge from 5d1d1f to master/Merge pull request from realm/merge-8c5f4c-to-master Fix merge from 8c5f4c to master/Update core, sync and object store (#3904) Core to v2.2.0. Sync to v1.0.0-BETA-5.0. Adapt changes from latest object store. REALM_ENABLE_SYNC should be boolean macro Create Realm sync history without having a ObjectStore SyncConfig object. deleteRealm test fix. The single notifier thread is enabled, the .note file is not created in the Realm file directory anymore. Update ObjectStore submodule to 300a2d6f28 which is committed in pull request from realm/merge-a8d647-to-master Fix merge from a8d647 to master/Fix getLocalInstanceCount crashing when Realms are closed again. (#3798)/"
,,0.0932,realm-java,"Fix wrong thread test When call the RealmResults.contains(), the given object must be a managed RealmObject, otherwise it will just return false./"
,,0.0673,realm-java,"Java doc, comments & exception message fix/"
,,0.0991,realm-java,"PR fix/Wire the ""like"" predicate into RealmQuery (#3992) * Wire the ""like"" predicate into RealmQuery Fixes distinctAsync tests distinct is async by default, and distinctAsync is deprecated./Fix links field query tests/"
,,0.0643,realm-java,Fix SyncConfiguration.toString() (#3792)/
,,0.0669,realm-java,Merge pull request from realm/merge-71855f-to-master Fix merge from 71855f to master/Ignore exceptions (#4028) * Ignore exceptions/
,,0.1869,realm-java,"Use RealmNotifier for RealmObject listener Ideally we should use the object notifications from object store, but since it is still in progress and the KVO notifications is not generic enough for us to use (there are some logic issues), we simply use the RealmNotifier to trigger the RealmObject listeners. There will be false positive notifications with this implementation since we are only checking the Rows table version. But this problem exists even before this commit./"
,,0.1209,realm-java,Count cpuX files in /sys/devices/system/cpu as a more accurate way (#3997) * Count cpuX files in /sys/devices/system/cpu as a more accurate way of counting processors and setting the max threads for the Executor. (#3810) * Suppress Findbugs warning * Better comments; Default to Runtime.getRuntime().availableProcessors()/
,,0.2028,realm-java,"Typo fix/Use RealmNotifier for RealmObject listener Ideally we should use the object notifications from object store, but since it is still in progress and the KVO notifications is not generic enough for us to use (there are some logic issues), we simply use the RealmNotifier to trigger the RealmObject listeners. There will be false positive notifications with this implementation since we are only checking the Rows table version. But this problem exists even before this commit./Workaround for the Alooper and postAtFrontQueue See with snapshot to support stable iterator But something is going wrong, more like a bug in core than Object Store./"
,,0.2203,realm-java,"Java doc, comments & exception message fix/Fix lots of minor issues/Use RealmNotifier for RealmObject listener Ideally we should use the object notifications from object store, but since it is still in progress and the KVO notifications is not generic enough for us to use (there are some logic issues), we simply use the RealmNotifier to trigger the RealmObject listeners. There will be false positive notifications with this implementation since we are only checking the Rows table version. But this problem exists even before this commit./Hack with snapshot to support stable iterator But something is going wrong, more like a bug in core than Object Store./"
,,0.1392,realm-java,"Merge pull request from realm/merge-a94bb3-to-master Fix merge from a94bb3 to master/Enable and fix warnings (#3961) Adapt the same warning options from object store/Update core to 2.3.0 (#3970) Also update object-store to 99570ba6e0 . * Adapt changes from sync Client::set_error_handler is removed. Session error handler signature changed. * Session error handler called after destruction According to the doc of Session::set_error_handler, the error handler could be called after the session object is destroyed. That is a problem since the java session object can be destroyed at that time. Use a weak_ptr of JavaGlobalRef in the lambda to solve the problem. * Ignore unknown category error from sync/"
,,0.2494,realm-java,"Merge pull request from realm/merge-4eec89-to-master Fix merge from 4eec89 to master/Free the SharedRealm in phantom daemon (#4096) Treat the SharedRealm the same as other native objects. SharedRealm.close will only call Object Store Realm::close without deleting the ShareRealm pointer. Then we dont need the finalizer anymore. Fix . This is related with as well. It is possible that java close the Realm in any of the Object Stores callbacks. To avoid Object Store operating on a invalid SharedRealm pointer, binding should try to make sure after callbacks. However, it cannot be totally avoided since user could set the Realm instance to null and the instance can be GCed at any time. It is still something should be considered in the Object Store implementation./Remove set_auto_refresh FIXME It is not necessary. The only place we might need it is the async transaction. But as long as we close the SharedRealm instance immediately, there is no difference by setting it or not./Fix lots of minor issues/Merge pull request from realm/merge-a94bb3-to-master Fix merge from a94bb3 to master/Enable and fix warnings (#3961) Adapt the same warning options from object store/Merge pull request from realm/merge-8c5f4c-to-master Fix merge from 8c5f4c to master/Update core, sync and object store (#3904) Core to v2.2.0. Sync to v1.0.0-BETA-5.0. Adapt changes from latest object store. REALM_ENABLE_SYNC should be boolean macro Create Realm sync history without having a ObjectStore SyncConfig object. deleteRealm test fix. The single notifier thread is enabled, the .note file is not created in the Realm file directory anymore. Update ObjectStore submodule to 300a2d6f28 which is committed in"
,,0.2267,realm-java,"Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/Merge pull request from realm/merge-6d0712-to-master Fix merge from 6d0712 to master/Merge pull request from realm/my/fix_warnings_in_proxy_classes fix warnings in generated code/more fix for ErrorProne warnings in generated code/fix warnings in generated code/Backlinks (#4219) * Document multiple links to the same object * Fix non-object field reference bug * Load all tables before validating any * Update to gradle 3.4.1 * Fix Documentation * Fix Asynchronous UTs * Ignore, instead of throwing on, attempts to load Backlink fields w/JSON * Fix documentation and add notification unit tests * Require that backlink fields be final. * Address PR comments * Add tests for notification and distinct * Add interface methods and most of table validation * Check fields on JSON load * Fix fails in RealmTests * Respond to comments * Compile time type checking Refactor annotation handler * Improved error messages * Add Unit tests * Renamed Backlink to LinkingObjects. Added annotation processor tests. * Added annotation processor unit tests. * Add Backlink annotation/Crash when on constructor calls another with default values (#4253)/Fix default values crashing if calling another constructor (#4249)/Merge pull request from realm/merge-ffe5bd-to-master Fix merge from ffe5bd to master/improve performance of getters and setters in proxy classes (#4206) * improve performance of getters and setters in proxy classes This change is a part of fixes of * removed unused argment * Update CHANGELOG.md/"
,,0.1177,realm-java,"Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/"
,,0.2486,realm-java,"Fix exception thrown from backlinks field (#4500) * add test case that reproduce * now backlinks geters throw IllegalStateException if the object is deleted or not yet loaded. * update CHANGELOG * add test * update a test * modify method name Row.checkIfBacklinkAvailable() to Row.checkIfAttached() * update variable names in test/Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/Merge pull request from realm/merge-6d0712-to-master Fix merge from 6d0712 to master/Merge pull request from realm/my/fix_warnings_in_proxy_classes fix warnings in generated code/more fix for ErrorProne warnings in generated code/fix warnings in generated code/Backlinks (#4219) * Document multiple links to the same object * Fix non-object field reference bug * Load all tables before validating any * Update to gradle 3.4.1 * Fix Documentation * Fix Asynchronous UTs * Ignore, instead of throwing on, attempts to load Backlink fields w/JSON * Fix documentation and add notification unit tests * Require that backlink fields be final. * Address PR comments * Add tests for notification and distinct * Add interface methods and most of table validation * Check fields on JSON load * Fix fails in RealmTests * Respond to comments * Compile time type checking Refactor annotation handler * Improved error messages * Add Unit tests * Renamed Backlink to LinkingObjects. Added annotation processor tests. * Added annotation processor unit tests. * Add Backlink annotation/Crash when on constructor calls another with default values (#4253)/Fix default values crashing if calling another constructor (#4249)/Merge pull request from realm/merge-ffe5bd-to-master Fix merge from ffe5bd to master/improve performance of getters and setters in proxy classes (#4206) * improve performance of getters and setters in proxy classes This change is a part of fixes of * removed unused argment * Update CHANGELOG.md/"
,,0.1102,realm-java,"Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/"
,,0.1419,realm-java,Merge branch releases into my/fix_memory_leaking/Merge pull request from realm/merge-196ee5-to-master Fix merge from 196ee5 to master/fix API incompatibility introduced in 3.1.0 (#4455)/Refactor Schemas into separate native and realm-based implementations (#4382) * Refactor Schemas into separate native and realm-based implementations * Fix all tests * Respond to PR comments * Temporary (git add .) kludge to fix visiblity problem/
,,0.0995,realm-java,Dont reset SharedRealm ptr (#4478) Keep the SharedRealm ptr valid when close it. To allow the is_closed checking could throw in the Object Store and it can be converted to a friendly Java exception. Check if SharedRealm is closed when create collection iterator. Throw an ISE if it is. Fix ./
,,0.147,realm-java,Refactor Schemas into separate native and realm-based implementations (#4382) * Refactor Schemas into separate native and realm-based implementations * Fix all tests * Respond to PR comments * Temporary (git add .) kludge to fix visiblity problem/Proper RealmMigrationNeededException is now thrown. (#4304)/Merge pull request from CDRussell/master Error message gives wrong class name character limit/Fix error message to show correct character limit and minor grammar fix/
,,0.11199999999999999,realm-java,"Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/Merge pull request from realm/merge-52ba43-to-master Fix merge from 52ba43 to master/Introduce ErrorProne plugin (#4342)/"
,,0.0929,realm-java,Fix threading bugs in RunInLooperThread rule (#4563) * Fix threading bugs in RunInLooperThread rule * Respond to comments Fix spelling errors Clean up multi-error recovery./Merge pull request from realm/merge-52ba43-to-master Fix merge from 52ba43 to master/Introduce ErrorProne plugin (#4342)/
,,0.3985,realm-java,"Implement getInstanceAsync (#4570) Fix Add APIs to get Realm instance asynchronously. Remove some useless methods. There some work need to be done before create the first Realm instance in the process, like creating schema table, doing migration, etc.. Those could block the UI thread quite badly. This commit tries to do those initialization work in the background and hold a Realm instance in the background until the 2nd instance created in the caller thread. A better solution than this would be do initialization in the background and only deliver a column indices cache to caller thread without holding a Realm instance in the background. But that is not possible since from the current database design, we cannot know if the schema changes compared with the last time it was opened. Also create a SharedGroup in the background and handover it to the caller thread is not ideal as well. That not only requires some design changes in the Object Store RealmCoordinator, but also is a very special use case of SharedGroup which core is not designed for. SharedGroup Leaking during the handover is another flaw for this solution we can only rely on the GC to collect the leaked SharedGroup during handover then./Fix threading bugs in RunInLooperThread rule (#4563) * Fix threading bugs in RunInLooperThread rule * Respond to comments Fix spelling errors Clean up multi-error recovery./Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/Backlinks (#4219) * Document multiple links to the same object * Fix non-object field reference bug * Load all tables before validating any * Update to gradle 3.4.1 * Fix Documentation * Fix Asynchronous UTs * Ignore, instead of throwing on, attempts to load Backlink fields w/JSON * Fix documentation and add notification unit tests * Require that backlink fields be final. * Address PR comments * Add tests for notification and distinct * Add interface methods and most of table validation * Check fields on JSON load * Fix fails in RealmTests * Respond to comments * Compile time type checking Refactor annotation handler * Improved error messages * Add Unit tests * Renamed Backlink to LinkingObjects. Added annotation processor tests. * Added annotation processor unit tests. * Add Backlink annotation/"
,,0.1121,realm-java,"Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/"
,,0.4258,realm-java,"Implement getInstanceAsync (#4570) Fix Add APIs to get Realm instance asynchronously. Remove some useless methods. There some work need to be done before create the first Realm instance in the process, like creating schema table, doing migration, etc.. Those could block the UI thread quite badly. This commit tries to do those initialization work in the background and hold a Realm instance in the background until the 2nd instance created in the caller thread. A better solution than this would be do initialization in the background and only deliver a column indices cache to caller thread without holding a Realm instance in the background. But that is not possible since from the current database design, we cannot know if the schema changes compared with the last time it was opened. Also create a SharedGroup in the background and handover it to the caller thread is not ideal as well. That not only requires some design changes in the Object Store RealmCoordinator, but also is a very special use case of SharedGroup which core is not designed for. SharedGroup Leaking during the handover is another flaw for this solution we can only rely on the GC to collect the leaked SharedGroup during handover then./Fix threading bugs in RunInLooperThread rule (#4563) * Fix threading bugs in RunInLooperThread rule * Respond to comments Fix spelling errors Clean up multi-error recovery./Merge pull request from realm/merge-52ba43-to-master Fix merge from 52ba43 to master/Introduce ErrorProne plugin (#4342)/Merge pull request from realm/merge-6d0712-to-master Fix merge from 6d0712 to master/fix warnings reported by ErrorProne (#4341)/"
,,0.1121,realm-java,Fix threading bugs in RunInLooperThread rule (#4563) * Fix threading bugs in RunInLooperThread rule * Respond to comments Fix spelling errors Clean up multi-error recovery./
,,0.1792,realm-java,"Merge branch releases into my/fix_memory_leaking/Merge pull request from realm/merge-196ee5-to-master Fix merge from 196ee5 to master/fix API incompatibility introduced in 3.1.0 (#4455)/Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/Refactor Schemas into separate native and realm-based implementations (#4382) * Refactor Schemas into separate native and realm-based implementations * Fix all tests * Respond to PR comments * Temporary (git add .) kludge to fix visiblity problem/Merge pull request from realm/merge-6d0712-to-master Fix merge from 6d0712 to master/fix warnings reported by ErrorProne (#4341)/"
,,0.1102,realm-java,Fix threading bugs in RunInLooperThread rule (#4563) * Fix threading bugs in RunInLooperThread rule * Respond to comments Fix spelling errors Clean up multi-error recovery./
,,0.4112,realm-java,"Fix flaky test/Implement getInstanceAsync (#4570) Fix Add APIs to get Realm instance asynchronously. Remove some useless methods. There some work need to be done before create the first Realm instance in the process, like creating schema table, doing migration, etc.. Those could block the UI thread quite badly. This commit tries to do those initialization work in the background and hold a Realm instance in the background until the 2nd instance created in the caller thread. A better solution than this would be do initialization in the background and only deliver a column indices cache to caller thread without holding a Realm instance in the background. But that is not possible since from the current database design, we cannot know if the schema changes compared with the last time it was opened. Also create a SharedGroup in the background and handover it to the caller thread is not ideal as well. That not only requires some design changes in the Object Store RealmCoordinator, but also is a very special use case of SharedGroup which core is not designed for. SharedGroup Leaking during the handover is another flaw for this solution we can only rely on the GC to collect the leaked SharedGroup during handover then./Merge pull request from realm/merge-f3f8ab-to-master Fix merge from f3f8ab to master/Fix threading bugs in RunInLooperThread rule (#4563) * Fix threading bugs in RunInLooperThread rule * Respond to comments Fix spelling errors Clean up multi-error recovery./Merge pull request from realm/merge-7ae1ee-to-master Fix merge from 7ae1ee to master/Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/Refactor Schemas into separate native and realm-based implementations (#4382) * Refactor Schemas into separate native and realm-based implementations * Fix all tests * Respond to PR comments * Temporary (git add .) kludge to fix visiblity problem/Merge pull request from realm/merge-6d0712-to-master Fix merge from 6d0712 to master/fix warnings reported by ErrorProne (#4341)/Backlinks (#4219) * Document multiple links to the same object * Fix non-object field reference bug * Load all tables before validating any * Update to gradle 3.4.1 * Fix Documentation * Fix Asynchronous UTs * Ignore, instead of throwing on, attempts to load Backlink fields w/JSON * Fix documentation and add notification unit tests * Require that backlink fields be final. * Address PR comments * Add tests for notification and distinct * Add interface methods and most of table validation * Check fields on JSON load * Fix fails in RealmTests * Respond to comments * Compile time type checking Refactor annotation handler * Improved error messages * Add Unit tests * Renamed Backlink to LinkingObjects. Added annotation processor tests. * Added annotation processor unit tests. * Add Backlink annotation/Merge pull request from realm/merge-45a090-to-master Fix merge from 45a090 to master/Upgrading to Realm Sync 1.3.2 (#4300) * sync 1.3.2 is released with core 2.4.0. * Fix the test since another fifo is used when open SharedGroup, see when on constructor calls another with default values (#4253)/Fix default values crashing if calling another constructor (#4249)/Fix compacting on external storage Fix Update Object Store to 37a2ba42b./"
,,0.0993,realm-java,"Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/Merge pull request from realm/merge-6d0712-to-master Fix merge from 6d0712 to master/fix warnings reported by ErrorProne (#4341)/"
,,0.1064,realm-java,"Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/"
,,0.1861,realm-java,Use target table to create snapshot from LinkView (#4556) Fix . Remove useless confusing `LinkView.getTable()`./Fix threading bugs in RunInLooperThread rule (#4563) * Fix threading bugs in RunInLooperThread rule * Respond to comments Fix spelling errors Clean up multi-error recovery./Merge pull request from realm/merge-7ac0a9-to-master Fix merge from 7ac0a9 to master/Trigger collection listeners when commit (#4368) The listeners on RealmList/RealmResults will be tiggered immediately when the transaction committed on the same thread if the collections are changed or the async query should return. Listeners on the RealmObject will have same behaviour after merged. This is to solve the problem for predictive UI animations and local transactions. Fix pull request from realm/merge-52ba43-to-master Fix merge from 52ba43 to master/Introduce ErrorProne plugin (#4342)/Merge pull request from realm/merge-6d0712-to-master Fix merge from 6d0712 to master/fix warnings reported by ErrorProne (#4341)/Merge pull request from realm/merge-b10f18-to-master Fix merge from b10f18 to master/Add thread check to methods in DynamicRealmObject (#4259) * add a simple test case to expose * update Changelog * fix issue4258 * fix test failure * fix test process crash when RealmListTests#add_set_dynamicObjectFromOtherThread() fails/
,,0.423,realm-java,"Implement getInstanceAsync (#4570) Fix Add APIs to get Realm instance asynchronously. Remove some useless methods. There some work need to be done before create the first Realm instance in the process, like creating schema table, doing migration, etc.. Those could block the UI thread quite badly. This commit tries to do those initialization work in the background and hold a Realm instance in the background until the 2nd instance created in the caller thread. A better solution than this would be do initialization in the background and only deliver a column indices cache to caller thread without holding a Realm instance in the background. But that is not possible since from the current database design, we cannot know if the schema changes compared with the last time it was opened. Also create a SharedGroup in the background and handover it to the caller thread is not ideal as well. That not only requires some design changes in the Object Store RealmCoordinator, but also is a very special use case of SharedGroup which core is not designed for. SharedGroup Leaking during the handover is another flaw for this solution we can only rely on the GC to collect the leaked SharedGroup during handover then./Fine grained locks for RealmCache (#4551) Separated lock for different RealmConfiguration instead of one lock on the RealmCache class. So Opening Realm instances from different configurations wont block each other. DynamicRealm which is created during opening type Realm will not be associated to any RealmCache to avoid recursive locks and multiple times initial block. (Also make the code easier.) This is for and part of implementation of ./Merge pull request from realm/merge-f3f8ab-to-master Fix merge from f3f8ab to master/Merge pull request from realm/merge-6d0712-to-master Fix merge from 6d0712 to master/fix warnings reported by ErrorProne (#4341)/"
,,0.0854,realm-java,Fix schemaVersion docs for synced Realms (#4547)/
,,0.1467,realm-java,"Refactor Schemas into separate native and realm-based implementations (#4382) * Refactor Schemas into separate native and realm-based implementations * Fix all tests * Respond to PR comments * Temporary (git add .) kludge to fix visiblity problem/fix build error in Javadoc task (#4356)/Merge pull request from realm/merge-154419-to-master Fix merge from 154419 to master/Fix warnings from error prone plugin (#4339) This PR does not add the plugin, just fix the warnings. Ill add the plugin in another PR with suppressing some warnings./Merge pull request from realm/merge-b10f18-to-master Fix merge from b10f18 to master/Add thread check to methods in DynamicRealmObject (#4259) * add a simple test case to expose * update Changelog * fix issue4258 * fix test failure * fix test process crash when RealmListTests#add_set_dynamicObjectFromOtherThread() fails/"
,,0.0843,realm-java,Merge pull request from realm/merge-52ba43-to-master Fix merge from 52ba43 to master/Introduce ErrorProne plugin (#4342)/Fix documentation for .directory() method (#4211) There is no `context.getFiles()` method. The correct documentation for the `directory()` should read `The default value is context.getFilesDir()}` instead of `The default value is context.getFiles()}`/
,,0.1139,realm-java,"Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/"
,,0.4197,realm-java,"Implement getInstanceAsync (#4570) Fix Add APIs to get Realm instance asynchronously. Remove some useless methods. There some work need to be done before create the first Realm instance in the process, like creating schema table, doing migration, etc.. Those could block the UI thread quite badly. This commit tries to do those initialization work in the background and hold a Realm instance in the background until the 2nd instance created in the caller thread. A better solution than this would be do initialization in the background and only deliver a column indices cache to caller thread without holding a Realm instance in the background. But that is not possible since from the current database design, we cannot know if the schema changes compared with the last time it was opened. Also create a SharedGroup in the background and handover it to the caller thread is not ideal as well. That not only requires some design changes in the Object Store RealmCoordinator, but also is a very special use case of SharedGroup which core is not designed for. SharedGroup Leaking during the handover is another flaw for this solution we can only rely on the GC to collect the leaked SharedGroup during handover then./stop using deprecated annotation (#4336)/"
,,0.1335,realm-java,Merge pull request from realm/merge-ffe5bd-to-master Fix merge from ffe5bd to master/improve performance of getters and setters in proxy classes (#4206) * improve performance of getters and setters in proxy classes This change is a part of fixes of * removed unused argment * Update CHANGELOG.md/
,,0.1064,realm-java,"Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/"
,,0.4433,realm-java,"Implement getInstanceAsync (#4570) Fix Add APIs to get Realm instance asynchronously. Remove some useless methods. There some work need to be done before create the first Realm instance in the process, like creating schema table, doing migration, etc.. Those could block the UI thread quite badly. This commit tries to do those initialization work in the background and hold a Realm instance in the background until the 2nd instance created in the caller thread. A better solution than this would be do initialization in the background and only deliver a column indices cache to caller thread without holding a Realm instance in the background. But that is not possible since from the current database design, we cannot know if the schema changes compared with the last time it was opened. Also create a SharedGroup in the background and handover it to the caller thread is not ideal as well. That not only requires some design changes in the Object Store RealmCoordinator, but also is a very special use case of SharedGroup which core is not designed for. SharedGroup Leaking during the handover is another flaw for this solution we can only rely on the GC to collect the leaked SharedGroup during handover then./Fine grained locks for RealmCache (#4551) Separated lock for different RealmConfiguration instead of one lock on the RealmCache class. So Opening Realm instances from different configurations wont block each other. DynamicRealm which is created during opening type Realm will not be associated to any RealmCache to avoid recursive locks and multiple times initial block. (Also make the code easier.) This is for and part of implementation of ./Refactor Schemas into separate native and realm-based implementations (#4382) * Refactor Schemas into separate native and realm-based implementations * Fix all tests * Respond to PR comments * Temporary (git add .) kludge to fix visiblity problem/"
,,0.2618,realm-java,"Merge branch releases into my/fix_memory_leaking/Merge pull request from realm/merge-196ee5-to-master Fix merge from 196ee5 to master/fix API incompatibility introduced in 3.1.0 (#4455)/Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/Refactor Schemas into separate native and realm-based implementations (#4382) * Refactor Schemas into separate native and realm-based implementations * Fix all tests * Respond to PR comments * Temporary (git add .) kludge to fix visiblity problem/Enable distinct on unindexed fields (#4390) Fix for findFirstAsync (#4367) Fix pull request from realm/merge-3b3364-to-master Fix merge from 3b3364 to master/Add thread check to methods in RealmQuery. (#4257) * Throw IllegalStateException instead of process crash when any of thread confined methods in RealmQuery is called from wrong thread (#4228). * fix some bugs in test and remove methodParams * no need to add realm.checkIfValid(); to RealmQuery.isValid() * PR fixes * removed section header comments/"
,,0.4133,realm-java,"Implement getInstanceAsync (#4570) Fix Add APIs to get Realm instance asynchronously. Remove some useless methods. There some work need to be done before create the first Realm instance in the process, like creating schema table, doing migration, etc.. Those could block the UI thread quite badly. This commit tries to do those initialization work in the background and hold a Realm instance in the background until the 2nd instance created in the caller thread. A better solution than this would be do initialization in the background and only deliver a column indices cache to caller thread without holding a Realm instance in the background. But that is not possible since from the current database design, we cannot know if the schema changes compared with the last time it was opened. Also create a SharedGroup in the background and handover it to the caller thread is not ideal as well. That not only requires some design changes in the Object Store RealmCoordinator, but also is a very special use case of SharedGroup which core is not designed for. SharedGroup Leaking during the handover is another flaw for this solution we can only rely on the GC to collect the leaked SharedGroup during handover then./Fine grained locks for RealmCache (#4551) Separated lock for different RealmConfiguration instead of one lock on the RealmCache class. So Opening Realm instances from different configurations wont block each other. DynamicRealm which is created during opening type Realm will not be associated to any RealmCache to avoid recursive locks and multiple times initial block. (Also make the code easier.) This is for and part of implementation of ./Implement fine gained notification (#4191) Add RealmObservable and RealmCollectionObservable interfaces. Enable detailed change information for RealmResults through OrderedCollectionChange interface. Fix a bug in the ObserverPairList which could cause the removed listener gets called if it was removed during previous listener iteration. Fix"
,,0.2073,realm-java,Refactor Schemas into separate native and realm-based implementations (#4382) * Refactor Schemas into separate native and realm-based implementations * Fix all tests * Respond to PR comments * Temporary (git add .) kludge to fix visiblity problem/Merge pull request from realm/merge-52ba43-to-master Fix merge from 52ba43 to master/Introduce ErrorProne plugin (#4342)/Merge pull request from realm/merge-b10f18-to-master Fix merge from b10f18 to master/Add thread check to methods in DynamicRealmObject (#4259) * add a simple test case to expose * update Changelog * fix issue4258 * fix test failure * fix test process crash when RealmListTests#add_set_dynamicObjectFromOtherThread() fails/Merge pull request from realm/merge-3b3364-to-master Fix merge from 3b3364 to master/Fixed element type checking in DynamicRealmOject#setList(). (#4254) * Fixed element type checking in DynamicRealmOject#setList() (#4252). * Update CHANGELOG.md * PR fixes * PR fixes/Merge pull request from realm/merge-ffe5bd-to-master Fix merge from ffe5bd to master/improve performance of getters and setters in proxy classes (#4206) * improve performance of getters and setters in proxy classes This change is a part of fixes of * removed unused argment * Update CHANGELOG.md/
,,0.1046,realm-java,"Feature/backlinks (#4406) * Refactor RealmObjectSchema Clean up Proxy generation Comments addressed * Fix Test, Checkstyle and Findbugs errors * Respond to comments/Merge pull request from realm/merge-dc09d5-to-master Fix merge from dc09d5 to master/"
,,0.3375,realm-java,"Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./"
,,0.3373,realm-java,"Explicitly specify Locale for String.format() in our annotation processor (#4853) * add Locale on formatting strings in our annotation processor. * fix formatting/Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./"
,,0.1541,realm-java,"Clean up pre-null related tests created in 0.83.0 From 0.83.0, we begin to support the nullable fields. But because of a bug, the Realm file which was created in 0.82.2 contains all schemas defined in the project instead of those only defined in the RealmModule. This will cause lots of troubles after we fix this bug and move to Object Stores schema. Create string-only-pre-null-0.82.2.realm with 0.82.2 which only contains StringOnly class. Create string-only-required-pre-null-0.82.2.realm with 0.82.2 which only contains StringOnlyRequired class. Use dynamic API to rewrite migrationException_realmListChanged. Remove default-before-migration.realm./"
,,0.0759,realm-java,Helper class for throwing java exception from JNI (#4636)/
,,0.075,realm-java,Nh/android support ssl (#4591) * Expose two new SyncConfiguration options to 1: Disable TLS verification. 2: provide the trusted root CA to validate the RealmObjectServer TLS connection (since OpenSSL doesnt have access to Android keystore) fixes
,,0.0676,realm-java,Nh/android support ssl (#4591) * Expose two new SyncConfiguration options to 1: Disable TLS verification. 2: provide the trusted root CA to validate the RealmObjectServer TLS connection (since OpenSSL doesnt have access to Android keystore) fixes
,,0.1909,realm-java,Add CompactOnLaunch. (#4857) * Implement CompactOnLaunch. This commit adds RealmConfiguration.compactOnLaunch and RealmConfiguration.Builder.compactOnLaunch(CompactOnLaunchCallback). It makes a Realm determines if it should be compacted. * Throw an exception if it is read-only Realm. * Add readOnly_compactOnLaunch_throws * Fix a wrong signature. * Add tests to check compactOnLaunch. * Fix tests. * Add Javadoc. * Updated CHANGELOG>md * Fix a typo * PR feedback. * PR feedback: Improve tests. * PR feedback. * Improve Javadocs sentences. * Support Proguard. * Rename more accurate. * PR feedback. * Fix Proguard. * Fix JNI code. * PR feedback: Remove 2 createConfiguration. * PR feedback * Add RealmConfiguration.Builder.compactOnLaunch(). * Fix a bug of JNI code. * Add more tests. * Improve Javadoc. * PR feedback: Add a test to check a bug. * add a test to check a bug where compactOnLaunch is called each time a Realm is opened on a new thread. * PR feedback * Imporve Javadoc. * Fix a test (Thread). * PR: fix a test./Merge pull request from realm/merge-41c0c8-to-master Fix merge from 41c0c8 to master/Fix typo (#4739)/Nh/android support ssl (#4591) * Expose two new SyncConfiguration options to 1: Disable TLS verification. 2: provide the trusted root CA to validate the RealmObjectServer TLS connection (since OpenSSL doesnt have access to Android keystore) fixes
,,0.2082,realm-java,"More minor fixes to pave the way for fixing UTs/Verify schema for backlinks by OS Add computed properties in the proxys expected schema info, so the schema validation in Object Store will check for linking objects. Throw IllegalStateException if the backlink schema validation fails. ISE is more suitable here since backlink does not exist in the schema. Normally the way to handle this issue is not by adding a migration block, instead, just changing the declaration in the model class. Rewrite and enable the tests which are related to the linking objects schema validation by mocking the expected schema info./Add CompactOnLaunch. (#4857) * Implement CompactOnLaunch. This commit adds RealmConfiguration.compactOnLaunch and RealmConfiguration.Builder.compactOnLaunch(CompactOnLaunchCallback). It makes a Realm determines if it should be compacted. * Throw an exception if it is read-only Realm. * Add readOnly_compactOnLaunch_throws * Fix a wrong signature. * Add tests to check compactOnLaunch. * Fix tests. * Add Javadoc. * Updated CHANGELOG>md * Fix a typo * PR feedback. * PR feedback: Improve tests. * PR feedback. * Improve Javadocs sentences. * Support Proguard. * Rename more accurate. * PR feedback. * Fix Proguard. * Fix JNI code. * PR feedback: Remove 2 createConfiguration. * PR feedback * Add RealmConfiguration.Builder.compactOnLaunch(). * Fix a bug of JNI code. * Add more tests. * Improve Javadoc. * PR feedback: Add a test to check a bug. * add a test to check a bug where compactOnLaunch is called each time a Realm is opened on a new thread. * PR feedback * Imporve Javadoc. * Fix a test (Thread). * PR: fix a test./Merge pull request from realm/merge-7476de-to-master Fix merge from 7476de to master/Fix wrong javadoc in RealmConfiguration (#4917)/Nh/android support ssl (#4591) * Expose two new SyncConfiguration options to 1: Disable TLS verification. 2: provide the trusted root CA to validate the RealmObjectServer TLS connection (since OpenSSL doesnt have access to Android keystore) fixes"
,,0.3495,realm-java,"Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./"
,,0.3375,realm-java,"Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./"
,,0.3519,realm-java,"Let Object Store handle table creations (#4674) This tries to progressively move more things about schemas to Object Store. First the concept of Schema in Object Store is not the same as what we have in Java. It is very much just a schema information holder and wont take care of the schema modifications. That says it is more like the ColumnIndices cache in the Java binding. So this commit try to: Instead of inheriting from the RealmSchema, change the OsRealmSchema/OsRealmObjectSchema to OsSchemaInfo/OsObjectSchemaInfo. They behave as a simple Java wrapper to the relevant OS objects. Add functions to Proxy classes which will create its own OsObjectSchemaInfo and those info can be used to create a OsSchemaInfo through the mediator. Call `SharedRealm.updateSchema` with the OsSchemaInfo which is got from the proxy interface to do table initialization. This will also fix a minor bug we have before, All tables are created even if the class is not in the module. Migration is still handled in the old way, and it will be solved in the future, to let Object Store handle it. ColumnIndices are still kept for now, but it should be computed from the OsSchemaInfo/OsObjectSchemaInfo in the future./"
,,0.3985,realm-java,"Work around jmethod bug with Android cherry-pick to enabled debug in menifest which caused a crash described in Removed API to create JavaMethod from jobject/class name string. There seems to be a bug in Android JVM when getting the method by: jclass cls env->GetObjectClass(obj); jmethodID method env->GetMethodID(cls, ""xxx"", ""xxx"") The methodID retrieved by the above way triggers a strange bug in JVM, it reports the method cannot be found on a non-relevant object. Like: "" cant call boolean io.realm.DefaultCompactOnLaunchCallback.shouldCompact(long, long) on instance of io.realm.RealmTests$6 "" Where RealmTest$6 has nothing to do with that JNI call. It is not because of the local ref of cls has been deleted Even if it is deleted, the methodID should still be valid according to the doc: The class references, field IDs, and method IDs are guaranteed valid until the class is unloaded. Classes are only unloaded if all classes associated with a ClassLoader can be garbage collected, which is rare but will not be impossible in Android. The class should never be unload in this case For safety reasons, the JavaMethod should only be created from a JavaClass right now to avoid future surprise. Close sync 2.0.0-rc12 (#4928) There are some breaking changes from sync/core in this release: Object ID column name has been renamed from __OID to OID Instead of hardcoding it in java, we read it from sync if it is built with sync. Otherwise hardcode it in JNI. Since core started using cmake, the openssl objects are not a part of core release anymore. Instead, it will be released to s3 independently. Update ROS to 2.0.0-rc2-285/Merge pull request from realm/merge-ea02c9-to-master Fix merge from ea02c9 to master/Helper class for throwing java exception from JNI (#4636)/"
,,0.34299999999999997,realm-java,"Work around jmethod bug with Android cherry-pick to enabled debug in menifest which caused a crash described in Removed API to create JavaMethod from jobject/class name string. There seems to be a bug in Android JVM when getting the method by: jclass cls env->GetObjectClass(obj); jmethodID method env->GetMethodID(cls, ""xxx"", ""xxx"") The methodID retrieved by the above way triggers a strange bug in JVM, it reports the method cannot be found on a non-relevant object. Like: "" cant call boolean io.realm.DefaultCompactOnLaunchCallback.shouldCompact(long, long) on instance of io.realm.RealmTests$6 "" Where RealmTest$6 has nothing to do with that JNI call. It is not because of the local ref of cls has been deleted Even if it is deleted, the methodID should still be valid according to the doc: The class references, field IDs, and method IDs are guaranteed valid until the class is unloaded. Classes are only unloaded if all classes associated with a ClassLoader can be garbage collected, which is rare but will not be impossible in Android. The class should never be unload in this case For safety reasons, the JavaMethod should only be created from a JavaClass right now to avoid future surprise. Close"
,,0.3735,realm-java,"Work around jmethod bug with Android cherry-pick to enabled debug in menifest which caused a crash described in Removed API to create JavaMethod from jobject/class name string. There seems to be a bug in Android JVM when getting the method by: jclass cls env->GetObjectClass(obj); jmethodID method env->GetMethodID(cls, ""xxx"", ""xxx"") The methodID retrieved by the above way triggers a strange bug in JVM, it reports the method cannot be found on a non-relevant object. Like: "" cant call boolean io.realm.DefaultCompactOnLaunchCallback.shouldCompact(long, long) on instance of io.realm.RealmTests$6 "" Where RealmTest$6 has nothing to do with that JNI call. It is not because of the local ref of cls has been deleted Even if it is deleted, the methodID should still be valid according to the doc: The class references, field IDs, and method IDs are guaranteed valid until the class is unloaded. Classes are only unloaded if all classes associated with a ClassLoader can be garbage collected, which is rare but will not be impossible in Android. The class should never be unload in this case For safety reasons, the JavaMethod should only be created from a JavaClass right now to avoid future surprise. Close pull request from realm/merge-4b67e1-to-master-4.0 Fix merge from 4b67e1 to master-4.0/Upgrade Realm Core to 2.8.6 (#4934) Upgrade Realm Core to 2.8.6, sync to 1.10.5. Add test case to Expose bug when querying an indexed field with Case.INSENSITIVE. Adapt DescriptorOdering changes from Object Store. See Update Object Store to 7c12b340e0/"
,,0.0694,realm-java,Helper class for throwing java exception from JNI (#4636)/
,,0.3236,realm-java,"Work around jmethod bug with Android cherry-pick to enabled debug in menifest which caused a crash described in Removed API to create JavaMethod from jobject/class name string. There seems to be a bug in Android JVM when getting the method by: jclass cls env->GetObjectClass(obj); jmethodID method env->GetMethodID(cls, ""xxx"", ""xxx"") The methodID retrieved by the above way triggers a strange bug in JVM, it reports the method cannot be found on a non-relevant object. Like: "" cant call boolean io.realm.DefaultCompactOnLaunchCallback.shouldCompact(long, long) on instance of io.realm.RealmTests$6 "" Where RealmTest$6 has nothing to do with that JNI call. It is not because of the local ref of cls has been deleted Even if it is deleted, the methodID should still be valid according to the doc: The class references, field IDs, and method IDs are guaranteed valid until the class is unloaded. Classes are only unloaded if all classes associated with a ClassLoader can be garbage collected, which is rare but will not be impossible in Android. The class should never be unload in this case For safety reasons, the JavaMethod should only be created from a JavaClass right now to avoid future surprise. Close"
,,0.368,realm-java,"Work around jmethod bug with Android cherry-pick to enabled debug in menifest which caused a crash described in Removed API to create JavaMethod from jobject/class name string. There seems to be a bug in Android JVM when getting the method by: jclass cls env->GetObjectClass(obj); jmethodID method env->GetMethodID(cls, ""xxx"", ""xxx"") The methodID retrieved by the above way triggers a strange bug in JVM, it reports the method cannot be found on a non-relevant object. Like: "" cant call boolean io.realm.DefaultCompactOnLaunchCallback.shouldCompact(long, long) on instance of io.realm.RealmTests$6 "" Where RealmTest$6 has nothing to do with that JNI call. It is not because of the local ref of cls has been deleted Even if it is deleted, the methodID should still be valid according to the doc: The class references, field IDs, and method IDs are guaranteed valid until the class is unloaded. Classes are only unloaded if all classes associated with a ClassLoader can be garbage collected, which is rare but will not be impossible in Android. The class should never be unload in this case For safety reasons, the JavaMethod should only be created from a JavaClass right now to avoid future surprise. Close pull request from realm/merge-4b67e1-to-master-4.0 Fix merge from 4b67e1 to master-4.0/Upgrade Realm Core to 2.8.6 (#4934) Upgrade Realm Core to 2.8.6, sync to 1.10.5. Add test case to Expose bug when querying an indexed field with Case.INSENSITIVE. Adapt DescriptorOdering changes from Object Store. See Update Object Store to 7c12b340e0/"
,,0.3673,realm-java,"Merge pull request from realm/gbm/notFound Fix class name in not found message/Fix class name in not found message/Merge pull request from realm/merge-f2144d-to-master-4.0 Fix merge from f2144d to master-4.0/Work around jmethod bug with Android cherry-pick to enabled debug in menifest which caused a crash described in Removed API to create JavaMethod from jobject/class name string. There seems to be a bug in Android JVM when getting the method by: jclass cls env->GetObjectClass(obj); jmethodID method env->GetMethodID(cls, ""xxx"", ""xxx"") The methodID retrieved by the above way triggers a strange bug in JVM, it reports the method cannot be found on a non-relevant object. Like: "" cant call boolean io.realm.DefaultCompactOnLaunchCallback.shouldCompact(long, long) on instance of io.realm.RealmTests$6 "" Where RealmTest$6 has nothing to do with that JNI call. It is not because of the local ref of cls has been deleted Even if it is deleted, the methodID should still be valid according to the doc: The class references, field IDs, and method IDs are guaranteed valid until the class is unloaded. Classes are only unloaded if all classes associated with a ClassLoader can be garbage collected, which is rare but will not be impossible in Android. The class should never be unload in this case For safety reasons, the JavaMethod should only be created from a JavaClass right now to avoid future surprise. Close CompactOnLaunch. (#4857) * Implement CompactOnLaunch. This commit adds RealmConfiguration.compactOnLaunch and RealmConfiguration.Builder.compactOnLaunch(CompactOnLaunchCallback). It makes a Realm determines if it should be compacted. * Throw an exception if it is read-only Realm. * Add readOnly_compactOnLaunch_throws * Fix a wrong signature. * Add tests to check compactOnLaunch. * Fix tests. * Add Javadoc. * Updated CHANGELOG>md * Fix a typo * PR feedback. * PR feedback: Improve tests. * PR feedback. * Improve Javadocs sentences. * Support Proguard. * Rename more accurate. * PR feedback. * Fix Proguard. * Fix JNI code. * PR feedback: Remove 2 createConfiguration. * PR feedback * Add RealmConfiguration.Builder.compactOnLaunch(). * Fix a bug of JNI code. * Add more tests. * Improve Javadoc. * PR feedback: Add a test to check a bug. * add a test to check a bug where compactOnLaunch is called each time a Realm is opened on a new thread. * PR feedback * Imporve Javadoc. * Fix a test (Thread). * PR: fix a test./Exception def/Split createTable & getTable (#4689) To support Stable IDs, the primary key has to be created while the table is created. This will require a new internal API createTableWithPK in the future. The previous getTable behaviour would be quite confusing to support that. getTable will only return the table if it exists. createTable is the one to be used to create tables. Add JavaExceptionDef to have all common Java exception names in a single place. Remove useless tests./Nh/android support ssl (#4591) * Expose two new SyncConfiguration options to 1: Disable TLS verification. 2: provide the trusted root CA to validate the RealmObjectServer TLS connection (since OpenSSL doesnt have access to Android keystore) fixes"
,,0.3314,realm-java,"Work around jmethod bug with Android cherry-pick to enabled debug in menifest which caused a crash described in Removed API to create JavaMethod from jobject/class name string. There seems to be a bug in Android JVM when getting the method by: jclass cls env->GetObjectClass(obj); jmethodID method env->GetMethodID(cls, ""xxx"", ""xxx"") The methodID retrieved by the above way triggers a strange bug in JVM, it reports the method cannot be found on a non-relevant object. Like: "" cant call boolean io.realm.DefaultCompactOnLaunchCallback.shouldCompact(long, long) on instance of io.realm.RealmTests$6 "" Where RealmTest$6 has nothing to do with that JNI call. It is not because of the local ref of cls has been deleted Even if it is deleted, the methodID should still be valid according to the doc: The class references, field IDs, and method IDs are guaranteed valid until the class is unloaded. Classes are only unloaded if all classes associated with a ClassLoader can be garbage collected, which is rare but will not be impossible in Android. The class should never be unload in this case For safety reasons, the JavaMethod should only be created from a JavaClass right now to avoid future surprise. Close"
,,0.3724,realm-java,"Work around jmethod bug with Android cherry-pick to enabled debug in menifest which caused a crash described in Removed API to create JavaMethod from jobject/class name string. There seems to be a bug in Android JVM when getting the method by: jclass cls env->GetObjectClass(obj); jmethodID method env->GetMethodID(cls, ""xxx"", ""xxx"") The methodID retrieved by the above way triggers a strange bug in JVM, it reports the method cannot be found on a non-relevant object. Like: "" cant call boolean io.realm.DefaultCompactOnLaunchCallback.shouldCompact(long, long) on instance of io.realm.RealmTests$6 "" Where RealmTest$6 has nothing to do with that JNI call. It is not because of the local ref of cls has been deleted Even if it is deleted, the methodID should still be valid according to the doc: The class references, field IDs, and method IDs are guaranteed valid until the class is unloaded. Classes are only unloaded if all classes associated with a ClassLoader can be garbage collected, which is rare but will not be impossible in Android. The class should never be unload in this case For safety reasons, the JavaMethod should only be created from a JavaClass right now to avoid future surprise. Close pull request from realm/merge-4b67e1-to-master-4.0 Fix merge from 4b67e1 to master-4.0/Upgrade Realm Core to 2.8.6 (#4934) Upgrade Realm Core to 2.8.6, sync to 1.10.5. Add test case to Expose bug when querying an indexed field with Case.INSENSITIVE. Adapt DescriptorOdering changes from Object Store. See Update Object Store to 7c12b340e0/"
,,0.11599999999999999,realm-java,4.0 API breaking changes (#5314) * Refactored deprecated `Callback` * SyncUser: renamed `getAccessToken` + method is no longer public/
,,0.092,realm-java,"Sign release apk for examples Close . without siging, monkeyRelease will fail with INSTALL_PARSE_FAILED_NO_CERTIFICATES Enable proguard for all most all examples, both debug & release. This will give us a chance to see proguard issues as early as possible. Fix a ""realm was closed"" crash for thread example./"
,,0.5201,realm-java,"Merge pull request from realm/merge-9f4f55-to-master Fix merge from 9f4f55 to master/Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close some performance issues when initializing the Schema (#5404)/Setting own list back on an object accidentially cleared it (#5396) * Add unit test showing setting own list does not work. * Do not clear own list if given as input. * Clear in the correct place * Add test for copyToRealmOrUpdate * Unit test for insertOrUpdate * Add test for insertOrUpdate bulk and non-bulk * Fix wrong comparison * Wrong spelling * Update changelog * Fix mistakes. Move check out of proxy classes. * Dont always check for managed objects * Always check for managed state. * Better changelog * Correct check for unmanaged objects. Optimized loops. * Optimize `insert` loops * More loop optimizations/Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.4508,realm-java,"Merge pull request from realm/merge-9f4f55-to-master Fix merge from 9f4f55 to master/Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close some performance issues when initializing the Schema (#5404)/Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.528,realm-java,"Merge pull request from realm/merge-9f4f55-to-master Fix merge from 9f4f55 to master/Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close some performance issues when initializing the Schema (#5404)/Setting own list back on an object accidentially cleared it (#5396) * Add unit test showing setting own list does not work. * Do not clear own list if given as input. * Clear in the correct place * Add test for copyToRealmOrUpdate * Unit test for insertOrUpdate * Add test for insertOrUpdate bulk and non-bulk * Fix wrong comparison * Wrong spelling * Update changelog * Fix mistakes. Move check out of proxy classes. * Dont always check for managed objects * Always check for managed state. * Better changelog * Correct check for unmanaged objects. Optimized loops. * Optimize `insert` loops * More loop optimizations/Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.4589,realm-java,"Merge pull request from realm/merge-9f4f55-to-master Fix merge from 9f4f55 to master/Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close some performance issues when initializing the Schema (#5404)/Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.1222,realm-java,"Merge pull request from realm/merge-9f4f55-to-master Fix merge from 9f4f55 to master/Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close"
,,0.3141,realm-java,Setting own list back on an object accidentially cleared it (#5396) * Add unit test showing setting own list does not work. * Do not clear own list if given as input. * Clear in the correct place * Add test for copyToRealmOrUpdate * Unit test for insertOrUpdate * Add test for insertOrUpdate bulk and non-bulk * Fix wrong comparison * Wrong spelling * Update changelog * Fix mistakes. Move check out of proxy classes. * Dont always check for managed objects * Always check for managed state. * Better changelog * Correct check for unmanaged objects. Optimized loops. * Optimize `insert` loops * More loop optimizations/
,,0.4274,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.3086,realm-java,Setting own list back on an object accidentially cleared it (#5396) * Add unit test showing setting own list does not work. * Do not clear own list if given as input. * Clear in the correct place * Add test for copyToRealmOrUpdate * Unit test for insertOrUpdate * Add test for insertOrUpdate bulk and non-bulk * Fix wrong comparison * Wrong spelling * Update changelog * Fix mistakes. Move check out of proxy classes. * Dont always check for managed objects * Always check for managed state. * Better changelog * Correct check for unmanaged objects. Optimized loops. * Optimize `insert` loops * More loop optimizations/
,,0.1202,realm-java,"Merge pull request from realm/merge-9f4f55-to-master Fix merge from 9f4f55 to master/Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close"
,,0.0903,realm-java,Merge pull request from realm/merge-d409e3-to-master Fix merge from d409e3 to master/Fix class name in exception message (#5098) * add a change log entry * fix comment * peerClassName linkedClassName/
,,0.4236,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.4173,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.4274,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.4122,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.4261,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.5053,realm-java,"Setting own list back on an object accidentially cleared it (#5396) * Add unit test showing setting own list does not work. * Do not clear own list if given as input. * Clear in the correct place * Add test for copyToRealmOrUpdate * Unit test for insertOrUpdate * Add test for insertOrUpdate bulk and non-bulk * Fix wrong comparison * Wrong spelling * Update changelog * Fix mistakes. Move check out of proxy classes. * Dont always check for managed objects * Always check for managed state. * Better changelog * Correct check for unmanaged objects. Optimized loops. * Optimize `insert` loops * More loop optimizations/Optimize opening Realm Open realm for checking legacy PK table issue only if 1) the realm file doesnt exist, 2) it is not a sync realm config. Open realm for downloading initial data only if 1) it is sync realm config, 2) the realm file doesnt exist. Modify the compactOnLaunch_multipleThread to reflect the fix in Close Optimize the compactOnLaunch test case. Populate 300000 objects with debug version core will take 3+ minutes./Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.1226,realm-java,"Remove largeRealmMultipleThreads It was added in to expose the timeout problem in finalizer. Since we are not using finalizer anymore, just remove it./Merge pull request from realm/merge-d409e3-to-master Fix merge from d409e3 to master/Fix class name in exception message (#5098) * add a change log entry * fix comment * peerClassName linkedClassName/"
,,0.27699999999999997,realm-java,Merge pull request from realm/merge-c9206c-to-master-4.0 Fix merge from c9206c to master-4.0/Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.1075,realm-java,"IncompatibleSyncedFileException only for sync/Fix flaky logout_sameSyncUserMultipleSessions/4.0 API breaking changes (#5314) * Refactored deprecated `Callback` * SyncUser: renamed `getAccessToken` + method is no longer public/Disable flaky test until 5294 is fixed (#5295)/Merge pull request from realm/merge-c9206c-to-master-4.0 Fix merge from c9206c to master-4.0/Unclosed realm & SyncManager::reset_for_testing See When assertion enabled, those will fail earlier. Without the assertion, all different kind of native crash will happen. Update Object Store to d1a101fda6/Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/"
,,0.1044,realm-java,4.0 API breaking changes (#5314) * Refactored deprecated `Callback` * SyncUser: renamed `getAccessToken` + method is no longer public/Client reset fixes (#5159) * Exposing a `SyncConfiguration` that allows a user to open the backup Realm after the client reset (#4759)./Merge pull request from realm/merge-c9206c-to-master-4.0 Fix merge from c9206c to master-4.0/Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/Align User Lookup implementation (#5109) * fixes
,,0.2877,realm-java,Ignore downloadProgressListener_indefinitely Need fix progress listener flaky tests close reset fixes (#5159) * Exposing a `SyncConfiguration` that allows a user to open the backup Realm after the client reset (#4759)./Merge pull request from realm/merge-c9206c-to-master-4.0 Fix merge from c9206c to master-4.0/Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.0873,realm-java,4.0 API breaking changes (#5314) * Refactored deprecated `Callback` * SyncUser: renamed `getAccessToken` + method is no longer public/Merge pull request from realm/merge-c9206c-to-master-4.0 Fix merge from c9206c to master-4.0/Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/
,,0.078,realm-java,"Unclosed realm & SyncManager::reset_for_testing See When assertion enabled, those will fail earlier. Without the assertion, all different kind of native crash will happen. Update Object Store to d1a101fda6/"
,,0.1032,realm-java,4.0 API breaking changes (#5314) * Refactored deprecated `Callback` * SyncUser: renamed `getAccessToken` + method is no longer public/Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/
,,0.0926,realm-java,4.0 API breaking changes (#5314) * Refactored deprecated `Callback` * SyncUser: renamed `getAccessToken` + method is no longer public/Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/
,,0.2665,realm-java,4.0 API breaking changes (#5314) * Refactored deprecated `Callback` * SyncUser: renamed `getAccessToken` + method is no longer public/Merge pull request from realm/merge-c9206c-to-master-4.0 Fix merge from c9206c to master-4.0/Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.414,realm-java,"Fix some performance issues when initializing the Schema (#5404)/Re-enable breakingSchemaChange_throws (#5317)/Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.2754,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.5009,realm-java,"Client reset fixes (#5159) * Exposing a `SyncConfiguration` that allows a user to open the backup Realm after the client reset (#4759)./Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/"
,,0.2722,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2486,realm-java,"fix SocketTimeout (#5453) * Adding a max retries to the ExponentialBackoff to avoid retrying indefinitely the logout (revoke) query, which causes some tests to block * Binding IOException to ErrorCode.IO_EXCEPTION/4.0 API breaking changes (#5314) * Refactored deprecated `Callback` * SyncUser: renamed `getAccessToken` + method is no longer public/Merge pull request from realm/merge-c9206c-to-master-4.0 Fix merge from c9206c to master-4.0/Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/Align User Lookup implementation (#5109) * fixes pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/"
,,0.2754,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.26899999999999996,realm-java,Merge pull request from realm/merge-c9206c-to-master-4.0 Fix merge from c9206c to master-4.0/Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2722,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2675,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2619,realm-java,Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2722,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.0697,realm-java,Fix misleading documentation (#5106) FieldAttribute.PRIMARY_KEY does not mark REQUIRED the field/
,,0.2643,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.1503,realm-java,"Optimize opening Realm Open realm for checking legacy PK table issue only if 1) the realm file doesnt exist, 2) it is not a sync realm config. Open realm for downloading initial data only if 1) it is sync realm config, 2) the realm file doesnt exist. Modify the compactOnLaunch_multipleThread to reflect the fix in Close Optimize the compactOnLaunch test case. Populate 300000 objects with debug version core will take 3+ minutes./"
,,0.462,realm-java,"Removed annotation since its not available until API 19 (#5469) * removed annotation since its not available until API 19, fixes reset fixes (#5159) * Exposing a `SyncConfiguration` that allows a user to open the backup Realm after the client reset (#4759)./Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/Merge pull request from realm/merge-5ce56d-to-master Fix merge from 5ce56d to master/Merge pull request from realm/gbm/preening More minor fixes to pave the way for fixing UTs/"
,,0.2706,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.5146,realm-java,"Merge pull request from realm/merge-9f4f55-to-master Fix merge from 9f4f55 to master/Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/Merge branch releases into fixes/"
,,0.2659,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2675,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.5135,realm-java,"Merge pull request from realm/merge-9f4f55-to-master Fix merge from 9f4f55 to master/Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/"
,,0.5294,realm-java,"Merge pull request from realm/merge-9f4f55-to-master Fix merge from 9f4f55 to master/Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge pull request from realm/merge-d409e3-to-master Fix merge from d409e3 to master/Fix class name in exception message (#5098) * add a change log entry * fix comment * peerClassName linkedClassName/Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/"
,,0.2722,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2956,realm-java,Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.5112,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge pull request from realm/merge-d409e3-to-master Fix merge from d409e3 to master/Fix class name in exception message (#5098) * add a change log entry * fix comment * peerClassName linkedClassName/Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/"
,,0.2738,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2706,realm-java,Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Merge pull request from realm/merge-b59c82-to-master Fix merge from b59c82 to master/Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.26899999999999996,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.0903,realm-java,Merge pull request from realm/merge-d409e3-to-master Fix merge from d409e3 to master/Fix class name in exception message (#5098) * add a change log entry * fix comment * peerClassName linkedClassName/
,,0.0843,realm-java,Merge pull request from realm/merge-d409e3-to-master Fix merge from d409e3 to master/Fix class name in exception message (#5098) * add a change log entry * fix comment * peerClassName linkedClassName/
,,0.2675,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.5203,realm-java,"Merge pull request from realm/merge-9f4f55-to-master Fix merge from 9f4f55 to master/Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/"
,,0.5271,realm-java,"Merge pull request from realm/merge-9f4f55-to-master Fix merge from 9f4f55 to master/Remove depreacted RealmProxyMediator.getTableName (#5456) Prefix ""class_"" should be hide from java layer and handled in Object Store. Try to that direction step by step. Close pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/"
,,0.2675,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.4829,realm-java,"Optimize opening Realm Open realm for checking legacy PK table issue only if 1) the realm file doesnt exist, 2) it is not a sync realm config. Open realm for downloading initial data only if 1) it is sync realm config, 2) the realm file doesnt exist. Modify the compactOnLaunch_multipleThread to reflect the fix in Close Optimize the compactOnLaunch test case. Populate 300000 objects with debug version core will take 3+ minutes./Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/Merge branch releases into fixes/"
,,0.2659,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.408,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge branch releases into fixes/"
,,0.5036,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/"
,,0.2627,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2942,realm-java,Merge pull request from realm/merge-e40a42-to-master Fix merge from e40a42 to master/Fix wrong Javadoc (#5427)/Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.5015,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/"
,,0.2611,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2706,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2927,realm-java,Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2706,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.2754,realm-java,Merge pull request from realm/merge-19e452-to-master-4.0 Fix merge from 19e452 to master-4.0/Add annotation to public APIs (#5044) * add annotation to parameters and suppress null related warnings * add annotation to objectserver APIs * fix compile error in example * remove annotation from equals(Object) * remove annotation from each overriding methods. Add more package-infos instead. * remove from parameters * remove from parameters * remove from parameters * remove unused import * remove unused import * add Nullability by Annotataion section to CONTRIBUTING.md * fix typo in CONTRIBUTING.md * replace assert with noinspection comment * add more annotation to address findbugs warnings/
,,0.1591,realm-java,java_class_global_def for global class loading Add JavaClassGlobalDef to handle global jclass loading. Move common types classes loading to JavaClassGlobalDef. Load SharedRealm$$SchemaChangeCallback & RealmNotifier in JNI_OnLoad to fix . Code clean up. NOTE: Currently the JavaClassGlobalDef::initialize() takes about 0.3 ms on a lowend armv7 device. So keeping less classes loaded at the beginning will still be a good idea since the Realm.init() will be usually called on the UI thread when start./Fix bug where callback method wasnt available. (#5117)/
,,0.435,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.4499,realm-java,"java_class_global_def for global class loading Add JavaClassGlobalDef to handle global jclass loading. Move common types classes loading to JavaClassGlobalDef. Load SharedRealm$$SchemaChangeCallback & RealmNotifier in JNI_OnLoad to fix . Code clean up. NOTE: Currently the JavaClassGlobalDef::initialize() takes about 0.3 ms on a lowend armv7 device. So keeping less classes loaded at the beginning will still be a good idea since the Realm.init() will be usually called on the UI thread when start./Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.1413,realm-java,Merge pull request from realm/merge-1863be-to-master Fix merge from 1863be to master/Refactor java array accessors (#5222) The original implementation has a serious memory issue that the ReleaseXxxArrayElements might be called before accessing if the copy/move constructor is invoked. That could happen when use JniArraysOfArray where the JniXxxArray would be copied when push it to the vector. The JNI SortDescriptor may trigger various native crashes because of using this./
,,0.1813,realm-java,java_class_global_def for global class loading Add JavaClassGlobalDef to handle global jclass loading. Move common types classes loading to JavaClassGlobalDef. Load SharedRealm$$SchemaChangeCallback & RealmNotifier in JNI_OnLoad to fix . Code clean up. NOTE: Currently the JavaClassGlobalDef::initialize() takes about 0.3 ms on a lowend armv7 device. So keeping less classes loaded at the beginning will still be a good idea since the Realm.init() will be usually called on the UI thread when start./
,,0.4535,realm-java,"Merge pull request from realm/merge-1863be-to-master Fix merge from 1863be to master/Refactor java array accessors (#5222) The original implementation has a serious memory issue that the ReleaseXxxArrayElements might be called before accessing if the copy/move constructor is invoked. That could happen when use JniArraysOfArray where the JniXxxArray would be copied when push it to the vector. The JNI SortDescriptor may trigger various native crashes because of using this./Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.4249,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.4211,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.4186,realm-java,"Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.1782,realm-java,java_class_global_def for global class loading Add JavaClassGlobalDef to handle global jclass loading. Move common types classes loading to JavaClassGlobalDef. Load SharedRealm$$SchemaChangeCallback & RealmNotifier in JNI_OnLoad to fix . Code clean up. NOTE: Currently the JavaClassGlobalDef::initialize() takes about 0.3 ms on a lowend armv7 device. So keeping less classes loaded at the beginning will still be a good idea since the Realm.init() will be usually called on the UI thread when start./
,,0.185,realm-java,java_class_global_def for global class loading Add JavaClassGlobalDef to handle global jclass loading. Move common types classes loading to JavaClassGlobalDef. Load SharedRealm$$SchemaChangeCallback & RealmNotifier in JNI_OnLoad to fix . Code clean up. NOTE: Currently the JavaClassGlobalDef::initialize() takes about 0.3 ms on a lowend armv7 device. So keeping less classes loaded at the beginning will still be a good idea since the Realm.init() will be usually called on the UI thread when start./Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./Update to latest OS (#5166) * Fixing compile issue with OS * Fix build issues with new Results API Remove indexOf(targetRowIndex) Results::index_of takes a RowExpr now/
,,0.0984,realm-java,Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./
,,0.2377,realm-java,Merge pull request from realm/merge-1863be-to-master Fix merge from 1863be to master/Refactor java array accessors (#5222) The original implementation has a serious memory issue that the ReleaseXxxArrayElements might be called before accessing if the copy/move constructor is invoked. That could happen when use JniArraysOfArray where the JniXxxArray would be copied when push it to the vector. The JNI SortDescriptor may trigger various native crashes because of using this./java_class_global_def for global class loading Add JavaClassGlobalDef to handle global jclass loading. Move common types classes loading to JavaClassGlobalDef. Load SharedRealm$$SchemaChangeCallback & RealmNotifier in JNI_OnLoad to fix . Code clean up. NOTE: Currently the JavaClassGlobalDef::initialize() takes about 0.3 ms on a lowend armv7 device. So keeping less classes loaded at the beginning will still be a good idea since the Realm.init() will be usually called on the UI thread when start./
,,0.0926,realm-java,Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./
,,0.4206,realm-java,"Fix some performance issues when initializing the Schema (#5404)/Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.2688,realm-java,Merge pull request from realm/merge-1863be-to-master Fix merge from 1863be to master/Refactor java array accessors (#5222) The original implementation has a serious memory issue that the ReleaseXxxArrayElements might be called before accessing if the copy/move constructor is invoked. That could happen when use JniArraysOfArray where the JniXxxArray would be copied when push it to the vector. The JNI SortDescriptor may trigger various native crashes because of using this./java_class_global_def for global class loading Add JavaClassGlobalDef to handle global jclass loading. Move common types classes loading to JavaClassGlobalDef. Load SharedRealm$$SchemaChangeCallback & RealmNotifier in JNI_OnLoad to fix . Code clean up. NOTE: Currently the JavaClassGlobalDef::initialize() takes about 0.3 ms on a lowend armv7 device. So keeping less classes loaded at the beginning will still be a good idea since the Realm.init() will be usually called on the UI thread when start./Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./
,,0.4271,realm-java,"Merge pull request from realm/merge-1863be-to-master Fix merge from 1863be to master/Refactor java array accessors (#5222) The original implementation has a serious memory issue that the ReleaseXxxArrayElements might be called before accessing if the copy/move constructor is invoked. That could happen when use JniArraysOfArray where the JniXxxArray would be copied when push it to the vector. The JNI SortDescriptor may trigger various native crashes because of using this./Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Merge pull request from realm/merge-f782c5-to-master-4.0 Fix merge from f782c5 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./Remove ObjectServerUser (#5020) * remove ObjectServerUser * add multiple session tests * Add regression test for old SyncUser JSON * Using identity with authURL to identity a SyncUser/"
,,0.4439,realm-java,"Merge pull request from realm/merge-1863be-to-master Fix merge from 1863be to master/Refactor java array accessors (#5222) The original implementation has a serious memory issue that the ReleaseXxxArrayElements might be called before accessing if the copy/move constructor is invoked. That could happen when use JniArraysOfArray where the JniXxxArray would be copied when push it to the vector. The JNI SortDescriptor may trigger various native crashes because of using this./Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.451,realm-java,"java_class_global_def for global class loading Add JavaClassGlobalDef to handle global jclass loading. Move common types classes loading to JavaClassGlobalDef. Load SharedRealm$$SchemaChangeCallback & RealmNotifier in JNI_OnLoad to fix . Code clean up. NOTE: Currently the JavaClassGlobalDef::initialize() takes about 0.3 ms on a lowend armv7 device. So keeping less classes loaded at the beginning will still be a good idea since the Realm.init() will be usually called on the UI thread when start./Merge pull request from realm/merge-39bb67-to-master-4.0 Fix merge from 39bb67 to master-4.0/Final step for OS schema integration (#5065) Build the column indices cache from OsSchemaInfo. Not like before, the column indices are not built when the Realm instance is created. Instead, they will only be built when the relevant RealmObject needs to be accessed. Column indices cache system has been changed. Different Realm instance will not share the same cache. Instead, every Realm instance will have its own cache. So we dont rely on the schema version any more. The cache can handle the situation when the schema versions are the same but schemas are not. Refresh column indices cache when schema changes. This is also supported in multi-processes environment. Almost all of the Realm initialization work is handled by Object Store. So we have the same routine for both sync/non-sync Realm. Also the initialization routine has be simplified a lot in java side. A new class OsRealmConfig is introduced to solve the 20+ arguments need to be passed to JNI to create Realm config. The transaction for schema initialization should be cancelled if exception happens in Java migration/initialization callbacks./"
,,0.1869,realm-java,Merge pull request from realm/merge-1863be-to-master Fix merge from 1863be to master/Refactor java array accessors (#5222) The original implementation has a serious memory issue that the ReleaseXxxArrayElements might be called before accessing if the copy/move constructor is invoked. That could happen when use JniArraysOfArray where the JniXxxArray would be copied when push it to the vector. The JNI SortDescriptor may trigger various native crashes because of using this./Merge pull request from realm/merge-f1af97-to-master Fix merge from f1af97 to master/Use OS List instead of cores LinkView (#5171) Replace LinkView with OS List. Code clean up. Fix a potential leak with LinkView in insertion APIs./
,,0.2074,realm-java,"Evaluate queries immediately for sync queries OsResults.load() actually does evaluate queries if needed now by using newly exposed OS method Results.evaluate_query_if_needed(). So the Resultss mode will be changed to TABLEVIEW from QUERY. This matches the old async query behaviour and solved the performance issues when the query results are huge, the size() method took unnecessary long time even the Results accessor will be called at the next line. close close Update Object Store to 3eb19c014fdf . Refactor the APIs for creating OsResults./"
,,0.2048,realm-java,"Evaluate queries immediately for sync queries OsResults.load() actually does evaluate queries if needed now by using newly exposed OS method Results.evaluate_query_if_needed(). So the Resultss mode will be changed to TABLEVIEW from QUERY. This matches the old async query behaviour and solved the performance issues when the query results are huge, the size() method took unnecessary long time even the Results accessor will be called at the next line. close close Update Object Store to 3eb19c014fdf . Refactor the APIs for creating OsResults./"
,,0.2087,realm-java,"Evaluate queries immediately for sync queries OsResults.load() actually does evaluate queries if needed now by using newly exposed OS method Results.evaluate_query_if_needed(). So the Resultss mode will be changed to TABLEVIEW from QUERY. This matches the old async query behaviour and solved the performance issues when the query results are huge, the size() method took unnecessary long time even the Results accessor will be called at the next line. close close Update Object Store to 3eb19c014fdf . Refactor the APIs for creating OsResults./"
,,0.0873,realm-java,Life cycle of temp OsSharedRealm in callbacks (#5576) Every temp OsSharedRealm created during construction for the callbacks have to be closed before the exception throws to users. close
,,0.1944,realm-java,"Evaluate queries immediately for sync queries OsResults.load() actually does evaluate queries if needed now by using newly exposed OS method Results.evaluate_query_if_needed(). So the Resultss mode will be changed to TABLEVIEW from QUERY. This matches the old async query behaviour and solved the performance issues when the query results are huge, the size() method took unnecessary long time even the Results accessor will be called at the next line. close close Update Object Store to 3eb19c014fdf . Refactor the APIs for creating OsResults./"
,,0.141,realm-java,"Better exception message if non model class is provided (#5796)/Revert ""Better exception message if non model class is provided as function argument"" This reverts commit 3aa2608bd712bcb844ffaa0ed296dbb5cb2b3e1d./Better exception message if non model class is provided as function argument/"
,,0.0792,realm-java,Fix list.move for unmanaged lists. (#5872)/
,,0.1279,realm-java,Fix SyncSession tests (#5853)/Merge pull request from realm/merge-7930c8-to-next-major Fix merge from 7930c8 to next-major/logout logging not resuming sync (#5820) * Fixes logout/login resume syncing/
,,0.11199999999999999,realm-java,deleteRealm throwing in loginLogoutResumeSyncing (#5836) Workaround deleteRealm throwing in test Fixed Changelog entries/logout logging not resuming sync (#5820) * Fixes logout/login resume syncing/
,,0.0673,realm-java,Fix SyncSession tests (#5853)/
,,0.1213,realm-java,Merge pull request from realm/merge-7930c8-to-next-major Fix merge from 7930c8 to next-major/logout logging not resuming sync (#5820) * Fixes logout/login resume syncing/
,,0.1194,realm-java,Merge pull request from realm/merge-7930c8-to-next-major Fix merge from 7930c8 to next-major/logout logging not resuming sync (#5820) * Fixes logout/login resume syncing/
,,0.0673,realm-java,Fix SyncSession tests (#5853)/
,,0.1176,realm-java,Merge pull request from realm/merge-7930c8-to-next-major Fix merge from 7930c8 to next-major/logout logging not resuming sync (#5820) * Fixes logout/login resume syncing/
,,0.0652,realm-java,Fix SyncSession tests (#5853)/
,,0.066,realm-java,Fix bug when using distinct() and count() (#6062)/
,,0.0599,realm-java,fixes (#6010) * Fixes Realm.deleteAll() and Realm.isEmpty() (#6024)/
,,0.0639,realm-java,Fix bug when using distinct() and count() (#6062)/
,,0.0677,realm-java,Fix batch updates which removes objects from the query results (#6482)/
,,0.2772,rocksdb,"Migrate names of properties from leveldb prefix to rocksdb prefix. Summary: Migrate names of properties from leveldb prefix to rocksdb prefix. Test Plan: make check Reviewers: emayanke, haobo Reviewed By: haobo CC: leveldb Differential Revision: three new MemTableReps Summary: This patch adds three new MemTableReps: UnsortedRep, PrefixHashRep, and VectorRep. UnsortedRep stores keys in an std::unordered_map of std::sets. When an iterator is requested, it dumps the keys into an std::set and iterates over that. VectorRep stores keys in an std::vector. When an iterator is requested, it creates a copy of the vector and sorts it using std::sort. The iterator accesses that new vector. PrefixHashRep stores keys in an unordered_map mapping prefixes to ordered sets. I also added one API change. I added a function MemTableRep::MarkImmutable. This function is called when the rep is added to the immutable list. It doesnt do anything yet, but it seems like that could be useful. In particular, for the vectorrep, it means we could elide the extra copy and just sort in place. The only reason I havent done that yet is because the use of the ArenaAllocator complicates things (I can elaborate on this if needed). Test Plan: make check ./db_stress ./db_stress ./db_stress Reviewers: dhruba, haobo, emayanke Reviewed By: dhruba CC: leveldb Differential Revision:"
,,0.2876,rocksdb,"Add three new MemTableReps Summary: This patch adds three new MemTableReps: UnsortedRep, PrefixHashRep, and VectorRep. UnsortedRep stores keys in an std::unordered_map of std::sets. When an iterator is requested, it dumps the keys into an std::set and iterates over that. VectorRep stores keys in an std::vector. When an iterator is requested, it creates a copy of the vector and sorts it using std::sort. The iterator accesses that new vector. PrefixHashRep stores keys in an unordered_map mapping prefixes to ordered sets. I also added one API change. I added a function MemTableRep::MarkImmutable. This function is called when the rep is added to the immutable list. It doesnt do anything yet, but it seems like that could be useful. In particular, for the vectorrep, it means we could elide the extra copy and just sort in place. The only reason I havent done that yet is because the use of the ArenaAllocator complicates things (I can elaborate on this if needed). Test Plan: make check ./db_stress ./db_stress ./db_stress Reviewers: dhruba, haobo, emayanke Reviewed By: dhruba CC: leveldb Differential Revision:"
,,0.2888,rocksdb,"Add three new MemTableReps Summary: This patch adds three new MemTableReps: UnsortedRep, PrefixHashRep, and VectorRep. UnsortedRep stores keys in an std::unordered_map of std::sets. When an iterator is requested, it dumps the keys into an std::set and iterates over that. VectorRep stores keys in an std::vector. When an iterator is requested, it creates a copy of the vector and sorts it using std::sort. The iterator accesses that new vector. PrefixHashRep stores keys in an unordered_map mapping prefixes to ordered sets. I also added one API change. I added a function MemTableRep::MarkImmutable. This function is called when the rep is added to the immutable list. It doesnt do anything yet, but it seems like that could be useful. In particular, for the vectorrep, it means we could elide the extra copy and just sort in place. The only reason I havent done that yet is because the use of the ArenaAllocator complicates things (I can elaborate on this if needed). Test Plan: make check ./db_stress ./db_stress ./db_stress Reviewers: dhruba, haobo, emayanke Reviewed By: dhruba CC: leveldb Differential Revision:"
,,0.2946,rocksdb,"Add three new MemTableReps Summary: This patch adds three new MemTableReps: UnsortedRep, PrefixHashRep, and VectorRep. UnsortedRep stores keys in an std::unordered_map of std::sets. When an iterator is requested, it dumps the keys into an std::set and iterates over that. VectorRep stores keys in an std::vector. When an iterator is requested, it creates a copy of the vector and sorts it using std::sort. The iterator accesses that new vector. PrefixHashRep stores keys in an unordered_map mapping prefixes to ordered sets. I also added one API change. I added a function MemTableRep::MarkImmutable. This function is called when the rep is added to the immutable list. It doesnt do anything yet, but it seems like that could be useful. In particular, for the vectorrep, it means we could elide the extra copy and just sort in place. The only reason I havent done that yet is because the use of the ArenaAllocator complicates things (I can elaborate on this if needed). Test Plan: make check ./db_stress ./db_stress ./db_stress Reviewers: dhruba, haobo, emayanke Reviewed By: dhruba CC: leveldb Differential Revision:"
,,0.298,rocksdb,"Add three new MemTableReps Summary: This patch adds three new MemTableReps: UnsortedRep, PrefixHashRep, and VectorRep. UnsortedRep stores keys in an std::unordered_map of std::sets. When an iterator is requested, it dumps the keys into an std::set and iterates over that. VectorRep stores keys in an std::vector. When an iterator is requested, it creates a copy of the vector and sorts it using std::sort. The iterator accesses that new vector. PrefixHashRep stores keys in an unordered_map mapping prefixes to ordered sets. I also added one API change. I added a function MemTableRep::MarkImmutable. This function is called when the rep is added to the immutable list. It doesnt do anything yet, but it seems like that could be useful. In particular, for the vectorrep, it means we could elide the extra copy and just sort in place. The only reason I havent done that yet is because the use of the ArenaAllocator complicates things (I can elaborate on this if needed). Test Plan: make check ./db_stress ./db_stress ./db_stress Reviewers: dhruba, haobo, emayanke Reviewed By: dhruba CC: leveldb Differential Revision:"
,,0.2888,rocksdb,"Add three new MemTableReps Summary: This patch adds three new MemTableReps: UnsortedRep, PrefixHashRep, and VectorRep. UnsortedRep stores keys in an std::unordered_map of std::sets. When an iterator is requested, it dumps the keys into an std::set and iterates over that. VectorRep stores keys in an std::vector. When an iterator is requested, it creates a copy of the vector and sorts it using std::sort. The iterator accesses that new vector. PrefixHashRep stores keys in an unordered_map mapping prefixes to ordered sets. I also added one API change. I added a function MemTableRep::MarkImmutable. This function is called when the rep is added to the immutable list. It doesnt do anything yet, but it seems like that could be useful. In particular, for the vectorrep, it means we could elide the extra copy and just sort in place. The only reason I havent done that yet is because the use of the ArenaAllocator complicates things (I can elaborate on this if needed). Test Plan: make check ./db_stress ./db_stress ./db_stress Reviewers: dhruba, haobo, emayanke Reviewed By: dhruba CC: leveldb Differential Revision:"
,,0.2883,rocksdb,"Migrate names of properties from leveldb prefix to rocksdb prefix. Summary: Migrate names of properties from leveldb prefix to rocksdb prefix. Test Plan: make check Reviewers: emayanke, haobo Reviewed By: haobo CC: leveldb Differential Revision: three new MemTableReps Summary: This patch adds three new MemTableReps: UnsortedRep, PrefixHashRep, and VectorRep. UnsortedRep stores keys in an std::unordered_map of std::sets. When an iterator is requested, it dumps the keys into an std::set and iterates over that. VectorRep stores keys in an std::vector. When an iterator is requested, it creates a copy of the vector and sorts it using std::sort. The iterator accesses that new vector. PrefixHashRep stores keys in an unordered_map mapping prefixes to ordered sets. I also added one API change. I added a function MemTableRep::MarkImmutable. This function is called when the rep is added to the immutable list. It doesnt do anything yet, but it seems like that could be useful. In particular, for the vectorrep, it means we could elide the extra copy and just sort in place. The only reason I havent done that yet is because the use of the ArenaAllocator complicates things (I can elaborate on this if needed). Test Plan: make check ./db_stress ./db_stress ./db_stress Reviewers: dhruba, haobo, emayanke Reviewed By: dhruba CC: leveldb Differential Revision:"
,,0.1684,rocksdb,"In-place updates for equal keys and similar sized values Summary: Currently for each put, a fresh memory is allocated, and a new entry is added to the memtable with a new sequence number irrespective of whether the key already exists in the memtable. This diff is an attempt to update the value inplace for existing keys. It currently handles a very simple case: 1. Key already exists in the current memtable. Does not inplace update values in immutable memtable or snapshot 2. Latest value type is a put ie kTypeValue 3. New value size is less than existing value, to avoid reallocating memory TODO: For a put of an existing key, deallocate memory take by values, for other value types till a kTypeValue is found, ie. remove kTypeMerge. TODO: Update the transaction log, to allow consistent reload of the memtable. Test Plan: Added a unit test verifying the inplace update. But some other unit tests broken due to invalid sequence number checks. WIll fix them next. Reviewers: xinyaohu, sumeet, haobo, dhruba CC: leveldb Differential Revision: Automatic commit by arc/Add three new MemTableReps Summary: This patch adds three new MemTableReps: UnsortedRep, PrefixHashRep, and VectorRep. UnsortedRep stores keys in an std::unordered_map of std::sets. When an iterator is requested, it dumps the keys into an std::set and iterates over that. VectorRep stores keys in an std::vector. When an iterator is requested, it creates a copy of the vector and sorts it using std::sort. The iterator accesses that new vector. PrefixHashRep stores keys in an unordered_map mapping prefixes to ordered sets. I also added one API change. I added a function MemTableRep::MarkImmutable. This function is called when the rep is added to the immutable list. It doesnt do anything yet, but it seems like that could be useful. In particular, for the vectorrep, it means we could elide the extra copy and just sort in place. The only reason I havent done that yet is because the use of the ArenaAllocator complicates things (I can elaborate on this if needed). Test Plan: make check ./db_stress ./db_stress ./db_stress Reviewers: dhruba, haobo, emayanke Reviewed By: dhruba CC: leveldb Differential Revision: WriteBatch::Handler to abort iteration Summary: Sometimes you dont need to iterate through the whole WriteBatch. This diff makes the Handler member functions return a bool that indicates whether to abort or not. If they return true, the iteration stops. One thing I just thought of is that this will break backwards-compability. Maybe it would be better to add a virtual member function WriteBatch::Handler::ShouldAbort() that returns false by default. Comments requested. I still have to add a new unit test for the abort code, but lets finalize the API first. Test Plan: make check Reviewers: dhruba, haobo, vamsi, emayanke Reviewed By: dhruba CC: leveldb Differential Revision:"
,,0.2113,rocksdb,"[RocksJava] 32-Bit adjustments Summary: Before this change overflowing size_t values led to a checked Exception. After that change: size_t overflows on 32-Bit architecture throw now an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly. This is especially an advantage for developers targeting 64-Bit systems because it is not necessary anymore to catch exceptions which are never thrown on a 64-Bit system. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.2965,rocksdb,"[RocksJava] Remove deprecated methods Summary: Removed deprecated ColumnFamilyDescript constructor methods Removed deprecated skipLogErrorOnRecovery methods Removed deprecated tableCacheRemoveScanCountLimit methods Test Plan: make rocksdbjava make jtest Reviewers: yhchiang, adamretter, ankgup87 Subscribers: dhruba Differential Revision: Removed deprecated skipLogErrorOnRecovery methods. As annonunced these options are not used anymore so these are removed from code./[RocksJava] 32-Bit adjustments Summary: Before this change overflowing size_t values led to a checked Exception. After that change: size_t overflows on 32-Bit architecture throw now an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly. This is especially an advantage for developers targeting 64-Bit systems because it is not necessary anymore to catch exceptions which are never thrown on a 64-Bit system. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.1926,rocksdb,"Fixed a typo in RocksDBSample.java Summary: Fixed a typo in RocksDBSample.java Test Plan: make clean make rocksdbjava make jtest/Merge pull request from fyrz/RocksJava-Sample-Fix [RocksJava] Java sample bugfix/[RocksJava] Java sample bugfix One of the latest commits broke the sample code. This resolves the introduced bug./[RocksJava] 32-Bit adjustments Summary: Before this change overflowing size_t values led to a checked Exception. After that change: size_t overflows on 32-Bit architecture throw now an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly. This is especially an advantage for developers targeting 64-Bit systems because it is not necessary anymore to catch exceptions which are never thrown on a 64-Bit system. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.1263,rocksdb,"[RocksJava] Removed deprecated skipLogErrorOnRecovery methods. As annonunced these options are not used anymore so these are removed from code./Merge pull request from fyrz/RocksJava-Fix-RateLimiter [RocksJava] Fix RateLimiter Tests in 3.10/[RocksJava] Fix RateLimiter Tests in 3.10/Fix RocksJava test failure due to deprecation of table_cache_remove_scan_count_limit Summary: table_cache_remove_scan_count_limit is marked as deprecated in RocksDB C++. (see rocksdb/options.h). This patch made necessary changes on RocksJava side. Test Plan: make rocksdbjava make jtest Reviewers: rven, igor, fyrz, adamretter, ankgup87, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.1157,rocksdb,"[RocksJava] Removed deprecated skipLogErrorOnRecovery methods. As annonunced these options are not used anymore so these are removed from code./Merge pull request from fyrz/RocksJava-Fix-RateLimiter [RocksJava] Fix RateLimiter Tests in 3.10/[RocksJava] Fix RateLimiter Tests in 3.10/Fix RocksJava test failure due to deprecation of table_cache_remove_scan_count_limit Summary: table_cache_remove_scan_count_limit is marked as deprecated in RocksDB C++. (see rocksdb/options.h). This patch made necessary changes on RocksJava side. Test Plan: make rocksdbjava make jtest Reviewers: rven, igor, fyrz, adamretter, ankgup87, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.2337,rocksdb,"[RocksJava] 32-Bit adjustments Summary: Before this change overflowing size_t values led to a checked Exception. After that change: size_t overflows on 32-Bit architecture throw now an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly. This is especially an advantage for developers targeting 64-Bit systems because it is not necessary anymore to catch exceptions which are never thrown on a 64-Bit system. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision: Raw use of parametrized class Resolved raw use of parametrized class issues./"
,,0.2791,rocksdb,"[RocksJava] Remove deprecated methods Summary: Removed deprecated ColumnFamilyDescript constructor methods Removed deprecated skipLogErrorOnRecovery methods Removed deprecated tableCacheRemoveScanCountLimit methods Test Plan: make rocksdbjava make jtest Reviewers: yhchiang, adamretter, ankgup87 Subscribers: dhruba Differential Revision: Removed deprecated skipLogErrorOnRecovery methods. As annonunced these options are not used anymore so these are removed from code./[RocksJava] 32-Bit adjustments Summary: Before this change overflowing size_t values led to a checked Exception. After that change: size_t overflows on 32-Bit architecture throw now an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly. This is especially an advantage for developers targeting 64-Bit systems because it is not necessary anymore to catch exceptions which are never thrown on a 64-Bit system. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision: RocksJava test failure due to deprecation of table_cache_remove_scan_count_limit Summary: table_cache_remove_scan_count_limit is marked as deprecated in RocksDB C++. (see rocksdb/options.h). This patch made necessary changes on RocksJava side. Test Plan: make rocksdbjava make jtest Reviewers: rven, igor, fyrz, adamretter, ankgup87, sdong Reviewed By: sdong Subscribers: dhruba, leveldb Differential Revision:"
,,0.2259,rocksdb,"[RocksJava] 32-Bit adjustments Summary: Before this change overflowing size_t values led to a checked Exception. After that change: size_t overflows on 32-Bit architecture throw now an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly. This is especially an advantage for developers targeting 64-Bit systems because it is not necessary anymore to catch exceptions which are never thrown on a 64-Bit system. Test Plan: make clean jclean rocksdbjava jtest mvn rocksjni.pom package Reviewers: adamretter, yhchiang, ankgup87 Subscribers: dhruba Differential Revision:"
,,0.0609,rocksdb,Fix a memory leak of Slice objects from org.rocksdb.WBWIRocksIterator#entry1/
,,0.0665,rocksdb,Fix the javadoc and the formatting of the base-classes for objects with native references/
,,0.1959,rocksdb,Add a callback for when memtable is moved to immutable (#1137) * Create a callback for memtable becoming immutable Create a callback for memtable becoming immutable Create a callback for memtable becoming immutable moved notification outside the lock Move sealed notification to unlocked portion of SwitchMemtable * fix lite build/
,,0.0556,rocksdb,fix simple typos (#1183)/
,,0.0621,rocksdb,fix simple typos (#1183)/
,,0.18600000000000003,rocksdb,"Disable test to unblock travis build Summary: The two tests keep failing in travis. Disable them and will fix later. Closes Differential Revision: D4316389 Pulled By: yiwu-arbug fbshipit-source-id: 0a370e7/Making persistent cache more resilient to filesystem failures Summary: The persistent cache is designed to hop over errors and return key not found. So far, it has shown resilience to write errors, encoding errors, data corruption etc. It is not resilient against disappearing files/directories. This was exposed during testing when multiple instances of persistence cache was started sharing the same directory simulating an unpredictable filesystem environment. This patch makes the write code path more resilient to errors while creating files makes the read code path more resilient to handle situation where files are not found added a test that does negative write/read testing by removing the directory while writes are in progress Closes Differential Revision: D4143413 Pulled By: kradhakrishnan fbshipit-source-id: fd25e9b/"
,,0.1947,rocksdb,"Making persistent cache more resilient to filesystem failures Summary: The persistent cache is designed to hop over errors and return key not found. So far, it has shown resilience to write errors, encoding errors, data corruption etc. It is not resilient against disappearing files/directories. This was exposed during testing when multiple instances of persistence cache was started sharing the same directory simulating an unpredictable filesystem environment. This patch makes the write code path more resilient to errors while creating files makes the read code path more resilient to handle situation where files are not found added a test that does negative write/read testing by removing the directory while writes are in progress Closes Differential Revision: D4143413 Pulled By: kradhakrishnan fbshipit-source-id: fd25e9b/"
,,0.1568,rocksdb,"fixed typo Summary: I fixed exisit exist Closes Differential Revision: D4451466 Pulled By: yiwu-arbug fbshipit-source-id: b447c3a/persistent_cache: fix two timer Summary: In persistent_cache/block_cache_tier.cc, timers are never restarted, so the latency measured is not correct. Closes Differential Revision: D4355828 Pulled By: siying fbshipit-source-id: cd5f9e1/Making persistent cache more resilient to filesystem failures Summary: The persistent cache is designed to hop over errors and return key not found. So far, it has shown resilience to write errors, encoding errors, data corruption etc. It is not resilient against disappearing files/directories. This was exposed during testing when multiple instances of persistence cache was started sharing the same directory simulating an unpredictable filesystem environment. This patch makes the write code path more resilient to errors while creating files makes the read code path more resilient to handle situation where files are not found added a test that does negative write/read testing by removing the directory while writes are in progress Closes Differential Revision: D4143413 Pulled By: kradhakrishnan fbshipit-source-id: fd25e9b/"
,,0.1715,rocksdb,"Dump persistent cache options Summary: Dump persistent cache options Closes Differential Revision: D4337019 Pulled By: yiwu-arbug fbshipit-source-id: 3812f8a/Making persistent cache more resilient to filesystem failures Summary: The persistent cache is designed to hop over errors and return key not found. So far, it has shown resilience to write errors, encoding errors, data corruption etc. It is not resilient against disappearing files/directories. This was exposed during testing when multiple instances of persistence cache was started sharing the same directory simulating an unpredictable filesystem environment. This patch makes the write code path more resilient to errors while creating files makes the read code path more resilient to handle situation where files are not found added a test that does negative write/read testing by removing the directory while writes are in progress Closes Differential Revision: D4143413 Pulled By: kradhakrishnan fbshipit-source-id: fd25e9b/"
,,0.1642,rocksdb,"gcc-7 requires include for std::function Summary: Fixes compile error: In file included from ./util/statistics.h:17:0, from ./util/stop_watch.h:8, from ./util/perf_step_timer.h:9, from ./util/iostats_context_imp.h:8, from ./util/posix_logger.h:27, from ./port/util_logger.h:18, from ./db/auto_roll_logger.h:15, from db/auto_roll_logger.cc:6: ./util/thread_local.h:65:16: error: function in namespace std does not name a template type typedef std::function<void(void*, void*)> FoldFunc; Closes Differential Revision: D4318702 Pulled By: yiwu-arbug fbshipit-source-id: 8c5d17a/Making persistent cache more resilient to filesystem failures Summary: The persistent cache is designed to hop over errors and return key not found. So far, it has shown resilience to write errors, encoding errors, data corruption etc. It is not resilient against disappearing files/directories. This was exposed during testing when multiple instances of persistence cache was started sharing the same directory simulating an unpredictable filesystem environment. This patch makes the write code path more resilient to errors while creating files makes the read code path more resilient to handle situation where files are not found added a test that does negative write/read testing by removing the directory while writes are in progress Closes Differential Revision: D4143413 Pulled By: kradhakrishnan fbshipit-source-id: fd25e9b/"
,,0.1667,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.3647,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Improve Status message for block checksum mismatches Summary: Weve got some DBs where iterators return Status with message ""Corruption: block checksum mismatch"" all the time. Thats not very informative. It would be much easier to investigate if the error message contained the file name then we would know e.g. how old the corrupted file is, which would be very useful for finding the root cause. This PR adds file name, offset and other stuff to some block corruption-related status messages. It doesnt improve all the error messages, just a few that were easy to improve. Im mostly interested in ""block checksum mismatch"" and ""Bad table magic number"" since theyre the only corruption errors that Ive ever seen in the wild. Closes Differential Revision: D5345702 Pulled By: al13n321 fbshipit-source-id: fc8023d43f1935ad927cef1b9c55481ab3cb1339/"
,,0.2366,rocksdb,"Support prefetch last 512KB with direct I/O in block based file reader Summary: Right now, if direct I/O is enabled, prefetching the last 512KB cannot be applied, except compaction inputs or readahead is enabled for iterators. This can create a lot of I/O for HDD cases. To solve the problem, the 512KB is prefetched in block based table if direct I/O is enabled. The prefetched buffer is passed in totegher with random access file reader, so that we try to read from the buffer before reading from the file. This can be extended in the future to support flexible user iterator readahead too. Closes Differential Revision: D5593091 Pulled By: siying fbshipit-source-id: ee36ff6d8af11c312a2622272b21957a7b5c81e7/Improve Status message for block checksum mismatches Summary: Weve got some DBs where iterators return Status with message ""Corruption: block checksum mismatch"" all the time. Thats not very informative. It would be much easier to investigate if the error message contained the file name then we would know e.g. how old the corrupted file is, which would be very useful for finding the root cause. This PR adds file name, offset and other stuff to some block corruption-related status messages. It doesnt improve all the error messages, just a few that were easy to improve. Im mostly interested in ""block checksum mismatch"" and ""Bad table magic number"" since theyre the only corruption errors that Ive ever seen in the wild. Closes Differential Revision: D5345702 Pulled By: al13n321 fbshipit-source-id: fc8023d43f1935ad927cef1b9c55481ab3cb1339/Make direct I/O write use incremental buffer Summary: Currently for direct I/O, the large maximum buffer is always allocated. This will be wasteful if users flush the data in much smaller chunks. This diff fix this by changing the behavior of incremental buffer works. When we enlarge buffer, we try to copy the existing data in the buffer to the enlarged buffer, rather than flush the buffer first. This can make sure that no extra I/O is introduced because of buffer enlargement. Closes Differential Revision: D5178403 Pulled By: siying fbshipit-source-id: a8fe1e7304bdb8cab2973340022fe80ff83449fd/Fix RocksDB Lite build with CLANG Summary: Closes Differential Revision: D5193976 Pulled By: siying fbshipit-source-id: 62d115edee6043237e9d6ad3c2a05481e162c9eb/"
,,0.1201,rocksdb,"Fix LITE unit tests Summary: Closes Differential Revision: D5505778 Pulled By: siying fbshipit-source-id: 7e935603ede3d958ea087ed6b8cfc4121e8797bc/comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Make direct I/O write use incremental buffer Summary: Currently for direct I/O, the large maximum buffer is always allocated. This will be wasteful if users flush the data in much smaller chunks. This diff fix this by changing the behavior of incremental buffer works. When we enlarge buffer, we try to copy the existing data in the buffer to the enlarged buffer, rather than flush the buffer first. This can make sure that no extra I/O is introduced because of buffer enlargement. Closes Differential Revision: D5178403 Pulled By: siying fbshipit-source-id: a8fe1e7304bdb8cab2973340022fe80ff83449fd/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1667,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1721,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1675,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Fixed some spelling mistakes Summary: Closes Differential Revision: D5079601 Pulled By: sagar0 fbshipit-source-id: ae5696fd735718f544435c64c3179c49b8c04349/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1673,rocksdb,"Fix UBSAN issue of passing nullptr to memcmp Summary: As explained in the comments, Sometimes we create Slice(nullptr, 0) in our code base which cause us to do calls like ``` memcmp(nullptr, ""abc"", 0); ``` Thats fine since the len is equal 0, but UBSAN is not happy about it so disable UBSAN for this function and add an assert instead Closes Differential Revision: D5458326 Pulled By: IslamAbdelRahman fbshipit-source-id: cfca32abe30f7d8f760c9f77ecd9543dfb1170dd/comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Fixed some spelling mistakes Summary: Closes Differential Revision: D5079601 Pulled By: sagar0 fbshipit-source-id: ae5696fd735718f544435c64c3179c49b8c04349/"
,,0.1691,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Fixed some spelling mistakes Summary: Closes Differential Revision: D5079601 Pulled By: sagar0 fbshipit-source-id: ae5696fd735718f544435c64c3179c49b8c04349/"
,,0.1658,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Fixed some spelling mistakes Summary: Closes Differential Revision: D5079601 Pulled By: sagar0 fbshipit-source-id: ae5696fd735718f544435c64c3179c49b8c04349/"
,,0.1667,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1648,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1667,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1675,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Fixed some spelling mistakes Summary: Closes Differential Revision: D5079601 Pulled By: sagar0 fbshipit-source-id: ae5696fd735718f544435c64c3179c49b8c04349/"
,,0.1691,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Fixed some spelling mistakes Summary: Closes Differential Revision: D5079601 Pulled By: sagar0 fbshipit-source-id: ae5696fd735718f544435c64c3179c49b8c04349/"
,,0.1582,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/default implementation for InRange Summary: its confusing to implementors of prefix extractor to implement an unused function Closes Differential Revision: D5267408 Pulled By: ajkr fbshipit-source-id: 2f1fe3131efc978f6098ae7a80e52bc7a0b13571/Fixed some spelling mistakes Summary: Closes Differential Revision: D5079601 Pulled By: sagar0 fbshipit-source-id: ae5696fd735718f544435c64c3179c49b8c04349/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1721,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1836,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Improve the error message for I/O related errors. Summary: Force people to write something other than file name while returning status for IOError. Closes Differential Revision: D5321309 Pulled By: siying fbshipit-source-id: 38bcf6c19e80831cd3e300a047e975cbb131d822/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1721,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1648,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1648,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1721,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1721,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1667,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1648,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1721,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1612,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1721,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.3637,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Improve Status message for block checksum mismatches Summary: Weve got some DBs where iterators return Status with message ""Corruption: block checksum mismatch"" all the time. Thats not very informative. It would be much easier to investigate if the error message contained the file name then we would know e.g. how old the corrupted file is, which would be very useful for finding the root cause. This PR adds file name, offset and other stuff to some block corruption-related status messages. It doesnt improve all the error messages, just a few that were easy to improve. Im mostly interested in ""block checksum mismatch"" and ""Bad table magic number"" since theyre the only corruption errors that Ive ever seen in the wild. Closes Differential Revision: D5345702 Pulled By: al13n321 fbshipit-source-id: fc8023d43f1935ad927cef1b9c55481ab3cb1339/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.2543,rocksdb,"Replace dynamic_cast<> Summary: Replace dynamic_cast<> so that users can choose to build with RTTI off, so that they can save several bytes per object, and get tiny more memory available. Some nontrivial changes: 1. Add Comparator::GetRootComparator() to get around the internal comparator hack 2. Add the two experiemental functions to DB 3. Add TableFactory::GetOptionString() to avoid unnecessary casting to get the option string 4. Since 3 is done, move the parsing option functions for table factory to table factory files too, to be symmetric. Closes Differential Revision: D5502723 Pulled By: siying fbshipit-source-id: fd13cec5601cf68a554d87bfcf056f2ffa5fbf7c/Improve Status message for block checksum mismatches Summary: Weve got some DBs where iterators return Status with message ""Corruption: block checksum mismatch"" all the time. Thats not very informative. It would be much easier to investigate if the error message contained the file name then we would know e.g. how old the corrupted file is, which would be very useful for finding the root cause. This PR adds file name, offset and other stuff to some block corruption-related status messages. It doesnt improve all the error messages, just a few that were easy to improve. Im mostly interested in ""block checksum mismatch"" and ""Bad table magic number"" since theyre the only corruption errors that Ive ever seen in the wild. Closes Differential Revision: D5345702 Pulled By: al13n321 fbshipit-source-id: fc8023d43f1935ad927cef1b9c55481ab3cb1339/"
,,0.2353,rocksdb,"Update all blob db TTL and timestamps to uint64_t Summary: The current blob db implementation use mix of int32_t, uint32_t and uint64_t for TTL and expiration. Update all timestamps to uint64_t for consistency. Closes Differential Revision: D5557103 Pulled By: yiwu-arbug fbshipit-source-id: e4eab2691629a755e614e8cf1eed9c3a681d0c42/Update blob db to use ROCKS_LOG_* macro Summary: Update blob db to use the newer ROCKS_LOG_* macro. Closes Differential Revision: D5414526 Pulled By: yiwu-arbug fbshipit-source-id: e428753aa5917e8b435cead2db26df586e5d1def/Improve Status message for block checksum mismatches Summary: Weve got some DBs where iterators return Status with message ""Corruption: block checksum mismatch"" all the time. Thats not very informative. It would be much easier to investigate if the error message contained the file name then we would know e.g. how old the corrupted file is, which would be very useful for finding the root cause. This PR adds file name, offset and other stuff to some block corruption-related status messages. It doesnt improve all the error messages, just a few that were easy to improve. Im mostly interested in ""block checksum mismatch"" and ""Bad table magic number"" since theyre the only corruption errors that Ive ever seen in the wild. Closes Differential Revision: D5345702 Pulled By: al13n321 fbshipit-source-id: fc8023d43f1935ad927cef1b9c55481ab3cb1339/Simple blob file dumper Summary: A simple blob file dumper. Closes Differential Revision: D5097553 Pulled By: yiwu-arbug fbshipit-source-id: c6e00d949fcd3658f9f68da9352f06339fac418d/s/std::snprintf/snprintf Summary: Looks like std::snprintf is not available on all platforms (e.g. MSVC 2010). Change it back to snprintf, where we have a macro in port.h to workaround compatibility. Closes Differential Revision: D5070988 Pulled By: yiwu-arbug fbshipit-source-id: bedfc1660bab0431c583ad434b7e68265e1211b1/Fix build error with blob DB. Summary: snprintf is in and not in namespace std. Closes Reviewed By: anirbanr-fb Differential Revision: D5054752 Pulled By: yiwu-arbug fbshipit-source-id: 356807ec38f3c7d95951cdb41f31a3d3ae0714d4/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1263,rocksdb,"Support prefetch last 512KB with direct I/O in block based file reader Summary: Right now, if direct I/O is enabled, prefetching the last 512KB cannot be applied, except compaction inputs or readahead is enabled for iterators. This can create a lot of I/O for HDD cases. To solve the problem, the 512KB is prefetched in block based table if direct I/O is enabled. The prefetched buffer is passed in totegher with random access file reader, so that we try to read from the buffer before reading from the file. This can be extended in the future to support flexible user iterator readahead too. Closes Differential Revision: D5593091 Pulled By: siying fbshipit-source-id: ee36ff6d8af11c312a2622272b21957a7b5c81e7/"
,,0.1944,rocksdb,"Support prefetch last 512KB with direct I/O in block based file reader Summary: Right now, if direct I/O is enabled, prefetching the last 512KB cannot be applied, except compaction inputs or readahead is enabled for iterators. This can create a lot of I/O for HDD cases. To solve the problem, the 512KB is prefetched in block based table if direct I/O is enabled. The prefetched buffer is passed in totegher with random access file reader, so that we try to read from the buffer before reading from the file. This can be extended in the future to support flexible user iterator readahead too. Closes Differential Revision: D5593091 Pulled By: siying fbshipit-source-id: ee36ff6d8af11c312a2622272b21957a7b5c81e7/comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Fix concurrency issue with filter_block_set_ Summary: filter_block_set_ access must also be protected with mutex. Closes Differential Revision: D5193159 Pulled By: maysamyabandeh fbshipit-source-id: 6987fc219d9a65c20b9c7e52151aef4b8e4882e6/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1721,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1224,rocksdb,"Support prefetch last 512KB with direct I/O in block based file reader Summary: Right now, if direct I/O is enabled, prefetching the last 512KB cannot be applied, except compaction inputs or readahead is enabled for iterators. This can create a lot of I/O for HDD cases. To solve the problem, the 512KB is prefetched in block based table if direct I/O is enabled. The prefetched buffer is passed in totegher with random access file reader, so that we try to read from the buffer before reading from the file. This can be extended in the future to support flexible user iterator readahead too. Closes Differential Revision: D5593091 Pulled By: siying fbshipit-source-id: ee36ff6d8af11c312a2622272b21957a7b5c81e7/"
,,0.1667,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1695,rocksdb,"add VerifyChecksum() to db.h Summary: We need a tool to check any sst file corruption in the db. It will check all the sst files in current version and read all the blocks (data, meta, index) with checksum verification. If any verification fails, the function will return non-OK status. Closes Differential Revision: D5324269 Pulled By: lightmark fbshipit-source-id: 6f8a272008b722402a772acfc804524c9d1a483b/comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.2947,rocksdb,"Support prefetch last 512KB with direct I/O in block based file reader Summary: Right now, if direct I/O is enabled, prefetching the last 512KB cannot be applied, except compaction inputs or readahead is enabled for iterators. This can create a lot of I/O for HDD cases. To solve the problem, the 512KB is prefetched in block based table if direct I/O is enabled. The prefetched buffer is passed in totegher with random access file reader, so that we try to read from the buffer before reading from the file. This can be extended in the future to support flexible user iterator readahead too. Closes Differential Revision: D5593091 Pulled By: siying fbshipit-source-id: ee36ff6d8af11c312a2622272b21957a7b5c81e7/Improve Status message for block checksum mismatches Summary: Weve got some DBs where iterators return Status with message ""Corruption: block checksum mismatch"" all the time. Thats not very informative. It would be much easier to investigate if the error message contained the file name then we would know e.g. how old the corrupted file is, which would be very useful for finding the root cause. This PR adds file name, offset and other stuff to some block corruption-related status messages. It doesnt improve all the error messages, just a few that were easy to improve. Im mostly interested in ""block checksum mismatch"" and ""Bad table magic number"" since theyre the only corruption errors that Ive ever seen in the wild. Closes Differential Revision: D5345702 Pulled By: al13n321 fbshipit-source-id: fc8023d43f1935ad927cef1b9c55481ab3cb1339/"
,,0.1667,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1276,rocksdb,"Support prefetch last 512KB with direct I/O in block based file reader Summary: Right now, if direct I/O is enabled, prefetching the last 512KB cannot be applied, except compaction inputs or readahead is enabled for iterators. This can create a lot of I/O for HDD cases. To solve the problem, the 512KB is prefetched in block based table if direct I/O is enabled. The prefetched buffer is passed in totegher with random access file reader, so that we try to read from the buffer before reading from the file. This can be extended in the future to support flexible user iterator readahead too. Closes Differential Revision: D5593091 Pulled By: siying fbshipit-source-id: ee36ff6d8af11c312a2622272b21957a7b5c81e7/"
,,0.1721,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.3416,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Improve Status message for block checksum mismatches Summary: Weve got some DBs where iterators return Status with message ""Corruption: block checksum mismatch"" all the time. Thats not very informative. It would be much easier to investigate if the error message contained the file name then we would know e.g. how old the corrupted file is, which would be very useful for finding the root cause. This PR adds file name, offset and other stuff to some block corruption-related status messages. It doesnt improve all the error messages, just a few that were easy to improve. Im mostly interested in ""block checksum mismatch"" and ""Bad table magic number"" since theyre the only corruption errors that Ive ever seen in the wild. Closes Differential Revision: D5345702 Pulled By: al13n321 fbshipit-source-id: fc8023d43f1935ad927cef1b9c55481ab3cb1339/Fixed some spelling mistakes Summary: Closes Differential Revision: D5079601 Pulled By: sagar0 fbshipit-source-id: ae5696fd735718f544435c64c3179c49b8c04349/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1675,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Fixed some spelling mistakes Summary: Closes Differential Revision: D5079601 Pulled By: sagar0 fbshipit-source-id: ae5696fd735718f544435c64c3179c49b8c04349/"
,,0.1721,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1721,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.3255,rocksdb,"fix db get/write stats Summary: we were passing `record_read_stats` (a bool) as the `hist_type` argument, which meant we were updating either `rocksdb.db.get.micros` (`hist_type 0`) or `rocksdb.db.write.micros` (`hist_type 1`) with wrong data. Closes Differential Revision: D5520384 Pulled By: ajkr fbshipit-source-id: 2f7c956aec32f8b58c5c18845ac478e0230c9516/comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Improve Status message for block checksum mismatches Summary: Weve got some DBs where iterators return Status with message ""Corruption: block checksum mismatch"" all the time. Thats not very informative. It would be much easier to investigate if the error message contained the file name then we would know e.g. how old the corrupted file is, which would be very useful for finding the root cause. This PR adds file name, offset and other stuff to some block corruption-related status messages. It doesnt improve all the error messages, just a few that were easy to improve. Im mostly interested in ""block checksum mismatch"" and ""Bad table magic number"" since theyre the only corruption errors that Ive ever seen in the wild. Closes Differential Revision: D5345702 Pulled By: al13n321 fbshipit-source-id: fc8023d43f1935ad927cef1b9c55481ab3cb1339/fix coredump for release nullptr Summary: Coredump will be triggered when ingest external sst file after delete range. ref Closes Differential Revision: D5275599 Pulled By: ajkr fbshipit-source-id: 0828dbc062ea8c74e913877cd63494fd3478a30d/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1258,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/Fix TSAN: avoid arena mode with range deletions Summary: The range deletion meta-block iterators werent getting cleaned up properly since they dont support arena allocation. I didnt implement arena support since, in the general case, each iterator is used only once and separately from all other iterators, so there should be no benefit to data locality. Anyways, this diff fixes up by treating range deletion iterators as non-arena-allocated. Closes Differential Revision: D5171119 Pulled By: ajkr fbshipit-source-id: bef6f5c4c5905a124f4993945aed4bd86e2807d8/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1667,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1667,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1667,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1667,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1667,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1685,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.1703,rocksdb,"comment out unused parameters Summary: This uses `clang-tidy` to comment out unused parameters (in functions, methods and lambdas) in fbcode. Cases that the tool failed to handle are fixed manually. Reviewed By: igorsugak Differential Revision: D5454343 fbshipit-source-id: 5dee339b4334e25e963891b519a5aa81fbf627b2/"
,,0.0929,rocksdb,Fix a memory leak in WindowsThread Summary: _endthreadex does not return and thus objects for stack destructors do not run. This creates a memory leak. We remove the calls since _enthreadex called automatically after the threadproc returns i.e. thread exits. Closes Differential Revision: D7088713 Pulled By: ajkr fbshipit-source-id: 749ecafc6a9572f587f76e516547e07734349a54/
,,0.1016,rocksdb,"WriteBufferManager JNI fixes (#4579) Summary: 1. `WriteBufferManager` should have a reference alive in Java side through `Options`/`DBOptions` otherwise, if its GCed at java side, native side can seg fault. 2. native method `setWriteBufferManager()` in `DBOptions.java` doesnt have its jni method invocation in rocksdbjni which is added in this PR 3. `DBOptionsTest.java` is referencing object of `Options`. Instead it should be testing against `DBOptions`. Seems like a copy paste error. 4. Add a getter for WriteBufferManager. Pull Request resolved: Differential Revision: D10561150 Pulled By: sagar0 fbshipit-source-id: 139a15c7f051a9f77b4200215b88267b48fbc487/"
,,0.1045,rocksdb,"WriteBufferManager JNI fixes (#4579) Summary: 1. `WriteBufferManager` should have a reference alive in Java side through `Options`/`DBOptions` otherwise, if its GCed at java side, native side can seg fault. 2. native method `setWriteBufferManager()` in `DBOptions.java` doesnt have its jni method invocation in rocksdbjni which is added in this PR 3. `DBOptionsTest.java` is referencing object of `Options`. Instead it should be testing against `DBOptions`. Seems like a copy paste error. 4. Add a getter for WriteBufferManager. Pull Request resolved: Differential Revision: D10561150 Pulled By: sagar0 fbshipit-source-id: 139a15c7f051a9f77b4200215b88267b48fbc487/"
