Topic_no,Keywords,Contrib,System,Text
19,"commit, merge, change, bug, type, error, key, fix, support, empty, const, root_date, author_kenny, check, makefile, instance, point, history, return, user",0.0828,conscrypt,Stop allocating empty arrays. Bug: 3166662 Change-Id: I151de373b2bf53786d19824336fa434c02b0b0e8/
,,0.0848,conscrypt,Stop allocating empty arrays. Bug: 3166662 Change-Id: I151de373b2bf53786d19824336fa434c02b0b0e8/
,,0.0828,conscrypt,Stop allocating empty arrays. Bug: 3166662 Change-Id: I151de373b2bf53786d19824336fa434c02b0b0e8/
,,0.0789,conscrypt,Stop allocating empty arrays. Bug: 3166662 Change-Id: I151de373b2bf53786d19824336fa434c02b0b0e8/
,,0.0867,conscrypt,Stop allocating empty arrays. Bug: 3166662 Change-Id: I151de373b2bf53786d19824336fa434c02b0b0e8/
,,0.0597,conscrypt,Tracking openssl-1.0.1 Bug: 6168278 Change-Id: I240d2cbc91f616fd486efc5203e2221c9896d90f/
,,0.0797,conscrypt,Add a way to clear stored trusted certificates. Bug: 6009802 Update the TrustManagerImpl Api to allow clearing stored certificates. This is needed so we can remove CAs when credential storage is updated. Change-Id: I024f7e8b12b60ea0ee35d7f94280e0e3d6db039f/
,,0.0597,conscrypt,Tracking openssl-1.0.1 Bug: 6168278 Change-Id: I240d2cbc91f616fd486efc5203e2221c9896d90f/
,,0.0716,conscrypt,Use WRAP/UNWRAP for key exchange Bug: Change-Id: I1a2be021e0a22ec6a00ba354fb3f19a78c601be9/
,,0.2548,conscrypt,"am b2fc6057: am f80f3547: am 5e05b783: Merge ""Fix Generic[Stream|Generic]Cipher to Generic[Stream|Block]Cipher in comments"" * commit b2fc6057db8c0c833db90f7ebe01d945213613fc: Fix Generic[Stream|Generic]Cipher to Generic[Stream|Block]Cipher in comments/am f80f3547: am 5e05b783: Merge ""Fix Generic[Stream|Generic]Cipher to Generic[Stream|Block]Cipher in comments"" * commit f80f354718d9790ec98db3fd9377a7c40a99710f: Fix Generic[Stream|Generic]Cipher to Generic[Stream|Block]Cipher in comments/am 5e05b783: Merge ""Fix Generic[Stream|Generic]Cipher to Generic[Stream|Block]Cipher in comments"" * commit 5e05b7831dda34adfba25a06ad7ae90916c534ee: Fix Generic[Stream|Generic]Cipher to Generic[Stream|Block]Cipher in comments/Fix Generic[Stream|Generic]Cipher to Generic[Stream|Block]Cipher in comments Change-Id: Iee2a86c764e5bd19135b371b100865fab2690965/"
,,0.2187,conscrypt,"am 85eae3f0: am 16edf9b0: Merge ""Add consistent reasons for NullPointerException"" into jb-mr1-dev * commit 85eae3f045340a8585ffc759857c919e10b3b108: Add consistent reasons for NullPointerException/am e606a7f6: Merge ""Add consistent reasons for NullPointerException"" * commit e606a7f607f06597c5cdf91c9d8afc284468db01: Add consistent reasons for NullPointerException/Add consistent reasons for NullPointerException Semi-automated replacement of empty and non-conforming NullPointerException reason messages. (cherry-pick of 86acc043d3334651ee26c65467d78d6cefedd397.) Change-Id: I6d893979f5c20a50e841e32af9fd7b2d8bc9d54d/Add consistent reasons for NullPointerException Semi-automated replacement of empty and non-conforming NullPointerException reason messages. Change-Id: Iedeb4b21949e973c4042ce5982dda315f2e785e1/"
,,0.0937,conscrypt,"Check the EEs eKU extension field, if present. BUG= and (cherry picked from commit 0da1515c5fe4e97fc2d4d24a41ebd4c078fec4db) Change-Id: I4309d4a90a9d41390f41c748fa1442ed736e225f/Check the EEs eKU extension field, if present. BUG= and Change-Id: Ib917c3a4a8ea6a12f685c44056aa44aa414d45e6/"
,,0.2261,conscrypt,"am 4f6d0481: am 7e5832d1: Merge changes Idfb18017,Ifbba9fdf * commit 4f6d0481607daa0875010b9e1364ba6b98aa6eec: OpenSSLMac: fix initialization with new key HarmonyJSSE: convert byte correctly in padding check/am 7e5832d1: Merge changes Idfb18017,Ifbba9fdf * commit 7e5832d1a709558fca80ecb25fdd0626b2d4312d: OpenSSLMac: fix initialization with new key HarmonyJSSE: convert byte correctly in padding check/Merge changes Idfb18017,Ifbba9fdf * changes: OpenSSLMac: fix initialization with new key HarmonyJSSE: convert byte correctly in padding check/HarmonyJSSE: convert byte correctly in padding check This gives a better error message since the byte could be negative without the mask. Change-Id: Ifbba9fdf647b7ecf8bc300fb1034011ba8357401/"
,,0.2663,conscrypt,"am 4962356d: am b95f7161: Merge ""NativeCrypto: various fixes"" * commit 4962356d872deb98363c42cdf367f9a6ec2a3829: NativeCrypto: various fixes/NativeCrypto: various fixes * JNI_TRACE debug messages were misleading in some cases. * MD object reference was being passed as a jint * kusage wasnt being checked for null Change-Id: I15bcba4d8b7291dc232ea20671917bb0848c3180/am 4f6d0481: am 7e5832d1: Merge changes Idfb18017,Ifbba9fdf * commit 4f6d0481607daa0875010b9e1364ba6b98aa6eec: OpenSSLMac: fix initialization with new key HarmonyJSSE: convert byte correctly in padding check/am 7e5832d1: Merge changes Idfb18017,Ifbba9fdf * commit 7e5832d1a709558fca80ecb25fdd0626b2d4312d: OpenSSLMac: fix initialization with new key HarmonyJSSE: convert byte correctly in padding check/Merge changes Idfb18017,Ifbba9fdf * changes: OpenSSLMac: fix initialization with new key HarmonyJSSE: convert byte correctly in padding check/OpenSSLMac: fix initialization with new key If an OpenSSLMac instance was re-initialized with a new key, it wouldnt produce correct results. Make sure to re-initialize the EVP_MD_CTX as well. Change-Id: Idfb18017407ff65866ae7e6f6fca3d646a970803/"
,,0.2199,conscrypt,"am 4f6d0481: am 7e5832d1: Merge changes Idfb18017,Ifbba9fdf * commit 4f6d0481607daa0875010b9e1364ba6b98aa6eec: OpenSSLMac: fix initialization with new key HarmonyJSSE: convert byte correctly in padding check/am 7e5832d1: Merge changes Idfb18017,Ifbba9fdf * commit 7e5832d1a709558fca80ecb25fdd0626b2d4312d: OpenSSLMac: fix initialization with new key HarmonyJSSE: convert byte correctly in padding check/Merge changes Idfb18017,Ifbba9fdf * changes: OpenSSLMac: fix initialization with new key HarmonyJSSE: convert byte correctly in padding check/HarmonyJSSE: convert byte correctly in padding check This gives a better error message since the byte could be negative without the mask. Change-Id: Ifbba9fdf647b7ecf8bc300fb1034011ba8357401/"
,,0.3043,conscrypt,"NativeCrypto: set Calendar instances to 0 millis X.509 does not have a notion of milliseconds so it was not being set through the Calendar instances we used in OpenSSLX509Certificate, et al. Instead it was getting whatever the current millisecond offset was from the GregorianCalendar default constructor. That made two parsed certificates unlikely to be equal when comparing since the milliseconds were also checked. (cherry picked from commit 3725893865ddbdd2e9cebc2ea2f7ecfc357fcfbb) Bug: 8616647 Change-Id: Ia914856a560526718957607d69401eab8c2830cf/NativeCrypto: set Calendar instances to 0 millis X.509 does not have a notion of milliseconds so it was not being set through the Calendar instances we used in OpenSSLX509Certificate, et al. Instead it was getting whatever the current millisecond offset was from the GregorianCalendar default constructor. That made two parsed certificates unlikely to be equal when comparing since the milliseconds were also checked. Bug: 8616647 Change-Id: I756088d946191417bb3afcba082bed5371ed731a/"
,,0.3249,conscrypt,"NativeCrypto: set Calendar instances to 0 millis X.509 does not have a notion of milliseconds so it was not being set through the Calendar instances we used in OpenSSLX509Certificate, et al. Instead it was getting whatever the current millisecond offset was from the GregorianCalendar default constructor. That made two parsed certificates unlikely to be equal when comparing since the milliseconds were also checked. (cherry picked from commit 3725893865ddbdd2e9cebc2ea2f7ecfc357fcfbb) Bug: 8616647 Change-Id: Ia914856a560526718957607d69401eab8c2830cf/NativeCrypto: set Calendar instances to 0 millis X.509 does not have a notion of milliseconds so it was not being set through the Calendar instances we used in OpenSSLX509Certificate, et al. Instead it was getting whatever the current millisecond offset was from the GregorianCalendar default constructor. That made two parsed certificates unlikely to be equal when comparing since the milliseconds were also checked. Bug: 8616647 Change-Id: I756088d946191417bb3afcba082bed5371ed731a/"
,,0.3107,conscrypt,"NativeCrypto: set Calendar instances to 0 millis X.509 does not have a notion of milliseconds so it was not being set through the Calendar instances we used in OpenSSLX509Certificate, et al. Instead it was getting whatever the current millisecond offset was from the GregorianCalendar default constructor. That made two parsed certificates unlikely to be equal when comparing since the milliseconds were also checked. (cherry picked from commit 3725893865ddbdd2e9cebc2ea2f7ecfc357fcfbb) Bug: 8616647 Change-Id: Ia914856a560526718957607d69401eab8c2830cf/NativeCrypto: set Calendar instances to 0 millis X.509 does not have a notion of milliseconds so it was not being set through the Calendar instances we used in OpenSSLX509Certificate, et al. Instead it was getting whatever the current millisecond offset was from the GregorianCalendar default constructor. That made two parsed certificates unlikely to be equal when comparing since the milliseconds were also checked. Bug: 8616647 Change-Id: I756088d946191417bb3afcba082bed5371ed731a/"
,,0.3759,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3716,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3701,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3745,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3701,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.373,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3687,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3701,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3687,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.36,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3629,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3687,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3745,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3687,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3644,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3687,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3687,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.373,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3629,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3716,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3644,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3687,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3745,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.373,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3687,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3615,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3644,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3615,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3687,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.373,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3716,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3716,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.373,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3748,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../Do not throw exception on Mac#reset OpenSSLMac was not checking whether it was initialized before dereferencing its macKey field. This caused callers to Mac#reset() before Mac#init() to get a NullPointerException. Bug: Change-Id: I8523983fec578079a66a04d585c1ddbe7732575e/"
,,0.3629,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3701,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3644,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3799,conscrypt,"am 0899ab71: am 7cefd12c: am 24617974: Fix thread safety issue in SSLEngine. * commit 0899ab710e92cdf36f315f1f83e9de28f502b43d: Fix thread safety issue in SSLEngine./am 7cefd12c: am 24617974: Fix thread safety issue in SSLEngine. * commit 7cefd12c34b513a6dc3e08404fb5fb98b8f21f73: Fix thread safety issue in SSLEngine./am 24617974: Fix thread safety issue in SSLEngine. * commit 24617974aa74875b25adf308c6c5d6423879bfe9: Fix thread safety issue in SSLEngine./Fix thread safety issue in SSLEngine. Use a 6 byte array instead of a 3 byte arrays. The first 3 bytes are used by encrypt and the second three bytes are used by decrypt. We could write each of the bytes individually and avoid the need for an array but thats 3 JNI calls instead of 1. TESTED : libcore.javax.net.* bug: 11334293 Change-Id: I8c5d4b37e3f5d65938a6647e60ac69defe77e386/am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3644,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.36,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3687,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.36,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3644,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3701,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3701,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3644,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3701,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.373,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.373,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3701,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3733,conscrypt,"Add prefix to cert pin failure logging. (cherry-picked from commit 9d7ed68cc1f20892f491540790b03ece56735a12) Bug: 10912373 Change-Id: Iec3113c4eda73d271c921343d2dd3c1135de58c4/am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3701,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.4092,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../Delay SSLSocketImpl instantiation until needed Class preloading will create an instance of objects if they are in static fields, so put the ones we dont want instantiated into a holder class that is not preloaded. (cherry picked from commit da5b7116b58795b169961cbd63c2b21bac741d9a) Bug: 9984058 Change-Id: If8cb4280cbee79cd4d479fbf6a5297c8e5569b6c/"
,,0.3716,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3615,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3687,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3644,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3658,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3672,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3687,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.3572,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../Register Conscrypt as the AlgNameMapper source Conscrypt was moved out of libcore, so the call directly to NativeCrypto was removed as well. To break the dependency, introduce an interface that Conscrypt registers as to answer algorithm name to OID mapping queries and vice versa. (cherry picked from commit b6963ac272834ec5f791ecdc773d17cb156e23f0) Bug: 10310296/Register Conscrypt as the AlgNameMapper source Conscrypt was moved out of libcore, so the call directly to NativeCrypto was removed as well. To break the dependency, introduce an interface that Conscrypt registers as to answer algorithm name to OID mapping queries and vice versa. (cherry picked from commit 6fcfb5a75dfb595ccbcf0a7a576ee7515fe2da32) Bug: 10310296 Change-Id: Ia9c802f1102df7209749a90d0ed3ed2831480b04/"
,,0.3773,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../"
,,0.4116,conscrypt,"am aa03f4a3: Merge history of libcore into conscrypt * commit aa03f4a33968a0e4031ffa8a54309c5b6df24c6a: (366 commits) Conscrypt: add missing libraries to JNI lib Conscrypt: fixing Android.mk dependencies Initial empty commit Remove unsupported Cipher modes Conscrypt: correct key selection with no sigAlg Conscrypt: add SHA-224 with tests Do not throw exception on Mac#reset Split Conscrypt makefile out from libcore Revert ""Restore NativeCrypto#encodeCertificates for now"" Fix build Restore NativeCrypto#encodeCertificates for now Conscrypt: use certificate references in SSL code Add specific exception for wrong final block length Conscrypt: remove dependence on stlport Remove dependency on JNIHelp header side effects. Properly refcount X509 instances Return IvParameters in OpenSSLCipher#getParameters Some cleanup while investigating test_SSLSocket_interrupt Delay SSLSocketImpl instantiation until needed Use sk_FOO_pop_free instead of sk_FOO_free .../Delay SSLSocketImpl instantiation until needed Class preloading will create an instance of objects if they are in static fields, so put the ones we dont want instantiated into a holder class that is not preloaded. (cherry picked from commit da5b7116b58795b169961cbd63c2b21bac741d9a) Bug: 9984058 Change-Id: If8cb4280cbee79cd4d479fbf6a5297c8e5569b6c/"
,,0.0577,conscrypt,Use the new endpointVerificationAlgorithm API Use the new X509ExtendedTrustManager and use the new getEndpointVerificationAlgorithm to check the hostname during the handshake. Bug: 13103812 Change-Id: Id0a74d4ef21a7d7c90357a111f99b09971e535d0/
,,0.1694,conscrypt,"DO NOT MERGE BIGNUM convert to Java BigInteger Java BigInteger is in twos complement, so it needs conversion for negative numbers. We were mishandling it before and the previous change just hacked around it. Actually convert to twos complement instead. (cherry picked from commit 1744cf2b54cc7183ff83a3a2eab3a92a8d95ff55) Bug: 13789608 Change-Id: I6bfe9577f0936678476193b55433b7d7dbc04400/am 7c3263f1: OpenSSLX509Certificate: only catch BadPaddingException * commit 7c3263f16bae0f1b2125de2c3c1c683303e768ce: OpenSSLX509Certificate: only catch BadPaddingException/am 95369a99: am 7c3263f1: OpenSSLX509Certificate: only catch BadPaddingException * commit 95369a993991b7a1a7bd8060e988d3acacdb4c43: OpenSSLX509Certificate: only catch BadPaddingException/am 7c3263f1: OpenSSLX509Certificate: only catch BadPaddingException * commit 7c3263f16bae0f1b2125de2c3c1c683303e768ce: OpenSSLX509Certificate: only catch BadPaddingException/OpenSSLX509Certificate: only catch BadPaddingException We only need to catch BadPaddingException right now. Let the other non-RuntimeException exceptions pass. Change-Id: I5b6878250d428b1ee953092967b7418003ee9216/"
,,0.3271,conscrypt,"Enable PSK cipher suites when PSKKeyManager is provided. This enables TLS-PSK cipher suites by default iff SSLContext is initialized with a PSKKeyManager. For consistency, X.509 based cipher suites are no longer enabled by default at all times they are now only enabled by default iff SSLContext is initialized with a X509KeyManager or a X509TrustManager. When both X.509 and PSK cipher suites need to be enabled, PSK cipher suites are given higher priority in the resulting list of cipher suites. This is based on the assumption that in most cases users of TLS/SSL who enable TLS-PSK would prefer TLS-PSK to be used when the peer supports TLS-PSK. Bug: 15073623 (cherry picked from commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17) Change-Id: Icd7fe066147a6b2fc64d807204cc99f6af821313/Enable PSK cipher suites when PSKKeyManager is provided. This enables TLS-PSK cipher suites by default iff SSLContext is initialized with a PSKKeyManager. For consistency, X.509 based cipher suites are no longer enabled by default at all times they are now only enabled by default iff SSLContext is initialized with a X509KeyManager or a X509TrustManager. When both X.509 and PSK cipher suites need to be enabled, PSK cipher suites are given higher priority in the resulting list of cipher suites. This is based on the assumption that in most cases users of TLS/SSL who enable TLS-PSK would prefer TLS-PSK to be used when the peer supports TLS-PSK. Bug: 15073623 Change-Id: I8e2bc3e7a1ea8a986e468973b6bad19dc6b7bc3c/Make setEnabledProtocols/CipherSuites copy their inputs. SSLSocket, SSLServerSocket, and SSLEngine offer setEnabledProtocols and setEnabledCipherSuites methods which take an array of protocols or cipher suites as input. If these methods store references to the input arrays, then the internal state (lists of enabled protocols and cipher suites) of SSLSocket, SSLServerSocket, and SSLEngine could be modified without going through the setter methods of these classes. Bug: 15753142 Change-Id: Ia5248050d81320ed1da99892278bd60872605f52/SSLParametersImpl is the source of enabled cipher suites and protocols. An instance of SSLParametersImpl is associated with SSLContext and is then cloned into any SSLSocketFactory, SSLServerSocketFactory, SSLSocket, SSLServerSocket, and SSLEngine. This CL ensures that all these primitives obtain their list of enabled cipher suites and protocols from their instance of SSLParametersImpl. Bug: 15073623 Change-Id: I40bf32e8654b299518ec0e77c3218a0790d9c4fd/Expose support for TLS-PSK. TLS-PSK (Pre-Shared Key) is a set of TLS/SSL cipher suites that use symmetric (pre-shared) keys for mutual authentication of peers. These cipher suites are in some scenarios more suitable than those based on public key cryptography and X.509. See RFC 4279 (Pre-Shared Key Ciphersuites for Transport Layer Security (TLS)) for more information. OpenSSL currently supports only the following PSK cipher suites: * TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 * TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 * TLS_PSK_WITH_3DES_EDE_CBC_SHA * TLS_PSK_WITH_AES_128_CBC_SHA * TLS_PSK_WITH_AES_256_CBC_SHA * TLS_PSK_WITH_RC4_128_SHA The last four cipher suites mutually authenticate the peers and secure the connection using a pre-shared symmetric key. These cipher suites do not provide Forward Secrecy once the pre-shared key is compromised, all previous communications secured with that key can be decrypted. The first two cipher suites combine the pre-shared symmetric key with an ephemeral key obtained from an ECDH key exchange performed during the TLS/SSL handshake, thus providing Forward Secrecy. Users of TLS-PSK are expected to provide an implementation of PSKKeyManager to SSLContext.init and then enable at least one PSK cipher suite in SSLSocket/SSLEngine. Bug: 15073623 Change-Id: I8e59264455f980f23a5e66099c27b5b4d932b9bb/Unbundle: hacks to let Conscrypt compile standalone This is the first pass at getting Conscrypt to compile standalone. It works fine in apps currently. There are a few TODOs to fix. Change-Id: I9b43ba12c55e04c8897ccacf38979ca671a55a26/Call SSL_set_alpn_protos with right native pointer This change was missed during rebase of the OpenSSLEngine code since this used to be SSL_CTX_set_alpn_protos. Bug: 14273022 Change-Id: Ib72b27c8d5a4ddfde4e0c0ee2ab97bfb039c7f56/"
,,0.1819,conscrypt,Use consistent naming for SSLSocket arguments This changes all the host to be hostname and anything that takes an InetAddress will have the name of address to avoid confusing it with a hostname. Bug: 16658420 Bug: 17059757 Change-Id: Iac0628d2d156023dbb80c2e636af6bfe63f46650/
,,0.3,conscrypt,"Read property to enable SNI Read the system property ""jsse.enableSNIExtension"" on whether to enable Server Name Indication (SNI) extension. For unbundled builds, this will be enabled by default. For platform builds, this will be disabled by default. Bug: 16658420 Bug: 17059757 Change-Id: I774f5406bf3fe601a42c4ef5e708b31800147eb9/Validate hostname is usable for SNI According to RFC 6066 section 3, the hostname listed in the Server Name Indication (SNI) field is a fully qualified domain name and IP addresses are not permitted. Bug: 16658420 Bug: 17059757 Change-Id: I804e46b6e66599b2770f0f4f0534467987e51208/Rename hostname fields and methods to reflect usage The hostname that was supplied when the socket was created is stored as the ""peerHostname"" This is the only one that should be used for Server Name Indication (SNI) purposes. The ""peerHostname"" or the resolved IP address may be used for certificate validation, so keep the use of ""getHostname()"" for cerificate validation. Bug: 16658420 Bug: 17059757 Change-Id: Ifd87dead44fb2f00bbfd5eac7e69fb3fc98e94b4/"
,,0.1819,conscrypt,Use consistent naming for SSLSocket arguments This changes all the host to be hostname and anything that takes an InetAddress will have the name of address to avoid confusing it with a hostname. Bug: 16658420 Bug: 17059757 Change-Id: Iac0628d2d156023dbb80c2e636af6bfe63f46650/
,,0.2737,conscrypt,am 899688d8: am a7682713: Stop building chain if issuer already in chain * commit 899688d8d41e8f7877fecf90e694fe6570304b8f: Stop building chain if issuer already in chain/am a7682713: Stop building chain if issuer already in chain * commit a7682713687ac2e209063324597134d48b1955d3: Stop building chain if issuer already in chain/Stop building chain if issuer already in chain Bug: 17972577 Change-Id: I379de26bdae3de1d0fe867adc1d8b7d5443c8c7a/
,,0.9215,conscrypt,"Squashed commit of changes from lmp-ub-dev Contains the following changes: commit e31d982cdb0f8e6ef05d1e412576888015e1da17 Merge: eaebc54 b73be72 Author: Neil Fuller Date: Wed Oct 22 10:34:23 2014 +0000 am b73be72e: am 3e21a289: (-s ours) TLS_FALLBACK_SCSV CTS fix for klp-modular-dev * commit b73be72ed97da8f36450d95d52f485cc6f451c61: TLS_FALLBACK_SCSV CTS fix for klp-modular-dev commit eaebc544f3a10c53d7d2f908514122caba569e14 Merge: 223b5da cd50afa Author: Kenny Root Date: Tue Oct 14 17:30:19 2014 +0000 Merge ""Fix SSLEngine to support session resumption."" into lmp-ub-dev commit 223b5da5d70e47b1a497e86474493925b568f6d7 Merge: 8737796 cb7a360 Author: Neil Fuller Date: Thu Oct 9 14:52:00 2014 +0000 am cb7a3605: am ea961ada: Apply conscrypt changes from merge commit * commit cb7a36050f34d3c16be00d532411820761eeb276: Apply conscrypt changes from merge commit commit cd50afad1567b1311e6e979e94a7167b7bf69c94 Author: Doug Steedman Date: Mon Oct 6 13:16:15 2014 Fix SSLEngine to support session resumption. Bug: 17877118 Change-Id: I388b59cde58fdc506ecac9f536e4bbd9161df6ad commit 8737796a646eaec94df32827752a71aee74bd46f Merge: 9564a5f 8d7e23e Author: Kenny Root Date: Mon Oct 6 22:34:20 2014 +0000 am 8d7e23e1: Add support for TLS_FALLBACK_SCSV * commit 8d7e23e117da591a8d48e6bcda9ed6f58ff1a375: Add support for TLS_FALLBACK_SCSV commit 9564a5fb9ed2eecf6299788db35213cb08397212 Merge: 4f58feb 7640613 Author: Kenny Root Date: Fri Sep 12 17:27:23 2014 +0000 am 76406135: am 6dcb23fe: am f427ec90: Fix the ENGINE_finish/ENGINE_free mixup * commit 76406135cf3a3b88afc979fe8e847b9c3d8b93c1: Fix the ENGINE_finish/ENGINE_free mixup commit 4f58feb0ea49dc089a95efba196032ef3c960a39 Merge: ddac5c6 984b7ec Author: Kenny Root Date: Wed Sep 10 07:07:16 2014 +0000 am 984b7ec6: Fix the ENGINE_finish/ENGINE_free mixup * commit 984b7ec6f5aab314117949a48e448ff4f6b65f16: Fix the ENGINE_finish/ENGINE_free mixup commit ddac5c6d7e413b0d68b388fbdf70dbeb3eeae865 Merge: 5a8ca5b 36ba60b Author: Kenny Root Date: Thu Sep 4 22:41:38 2014 +0000 Merge ""Reset lmp-ub-dev to lmp-dev-plus-aosp"" into lmp-ub-dev commit 36ba60b039f1f30ab1ea8f0e2a4da8ae4e3906e5 Author: Kenny Root Date: Wed Aug 27 12:07:07 2014 Reset lmp-ub-dev to lmp-dev-plus-aosp Bug: 17059757 Change-Id: I581963360da47b574e1e2e20c2851485c36fa62c commit 6a4f2ef9e4ea3ebb321d45ca39b30d634ea3b4ad Merge: 9b187af f67d784 Author: Kenny Root Date: Tue Aug 26 04:17:38 2014 +0000 am f67d784a: Add pre-Honeycomb literal IP matching * commit f67d784abe5cef700240be02c68cecd899cd8e6d: Add pre-Honeycomb literal IP matching commit 9b187af33dcd97915a0371d64fe1ee4aba20d0ba Merge: 714ebea 966ae8a Author: Kenny Root Date: Tue Aug 26 04:17:37 2014 +0000 am 966ae8a6: Read property to enable SNI * commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb: Read property to enable SNI commit 714ebeabcb5e35c6df6a5c21f549cdb6130368c4 Merge: 7724204 54a1ba4 Author: Kenny Root Date: Tue Aug 26 04:06:54 2014 +0000 Merge ""resolved conflicts for merge of 342097db to lmp-dev-plus-aosp"" into lmp-dev-plus-aosp commit 54a1ba421d23bb6d988688c2662715e509172447 Merge: a20d871 342097d Author: Kenny Root Date: Mon Aug 25 21:03:51 2014 resolved conflicts for merge of 342097db to lmp-dev-plus-aosp Change-Id: I853c6b0d3725dafbdc84c4d6d6d1b90529bd949d commit 7724204abf4431d35787c44c4a22cda5489d4e37 Merge: 20f60ac afb3403 Author: Kenny Root Date: Tue Aug 26 00:09:27 2014 +0000 am afb34034: Implement write socket timeouts for unbundled apps * commit afb340348bfc54dbc46964e159fe803f9c93a4dd: Implement write socket timeouts for unbundled apps commit f67d784abe5cef700240be02c68cecd899cd8e6d Author: Kenny Root Date: Wed Aug 20 14:14:26 2014 Add pre-Honeycomb literal IP matching This will allow us to run this code on Gingerbread devices and others that dont have the InetAddress#isNumeric API. Bug: 16658420 Bug: 17059757 Change-Id: I597d539979d58eeaa2677d6f99e911313a550cc1 commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb Author: Kenny Root Date: Mon Aug 18 10:12:20 2014 Read property to enable SNI Read the system property ""jsse.enableSNIExtension"" on whether to enable Server Name Indication (SNI) extension. For unbundled builds, this will be enabled by default. For platform builds, this will be disabled by default. Bug: 16658420 Bug: 17059757 Change-Id: I774f5406bf3fe601a42c4ef5e708b31800147eb9 commit 342097db97a9b2736531033b2c4b4d8ce4998c67 Author: Kenny Root Date: Wed Aug 20 12:14:52 2014 Validate hostname is usable for SNI According to RFC 6066 section 3, the hostname listed in the Server Name Indication (SNI) field is a fully qualified domain name and IP addresses are not permitted. Bug: 16658420 Bug: 17059757 Change-Id: I804e46b6e66599b2770f0f4f0534467987e51208 commit afb340348bfc54dbc46964e159fe803f9c93a4dd Author: Kenny Root Date: Tue Aug 19 16:33:07 2014 Implement write socket timeouts for unbundled apps Change-Id: I4fd604f057ba4288d4f31bf6b3b93307376023d5 commit 20f60acea153dfdf0c8f75a53d7bd9edb4c7614c Author: Kenny Root Date: Mon Aug 25 11:52:05 2014 Tracking change from AOSP Change-Id: I889af3f7c1de9ef34d9328339e1b421651055ad4 commit 68056b7c9db8a9fb384bbadfc5287730f996896d Merge: 8239dfd cc2ef2e Author: Kenny Root Date: Mon Aug 25 18:03:27 2014 +0000 am cc2ef2e2: Rename hostname fields and methods to reflect usage * commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e: Rename hostname fields and methods to reflect usage commit 8239dfdcc40a69255d7b2feced960d574ea36321 Merge: e9cf759 076138f Author: Kenny Root Date: Thu Aug 21 16:36:24 2014 +0000 am 076138ff: Use consistent naming for SSLSocket arguments * commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11: Use consistent naming for SSLSocket arguments commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e Author: Kenny Root Date: Wed Aug 20 11:26:33 2014 Rename hostname fields and methods to reflect usage The hostname that was supplied when the socket was created is stored as the ""peerHostname"" This is the only one that should be used for Server Name Indication (SNI) purposes. The ""peerHostname"" or the resolved IP address may be used for certificate validation, so keep the use of ""getHostname()"" for cerificate validation. Bug: 16658420 Bug: 17059757 Change-Id: Ifd87dead44fb2f00bbfd5eac7e69fb3fc98e94b4 commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11 Author: Kenny Root Date: Wed Aug 20 11:24:41 2014 Use consistent naming for SSLSocket arguments This changes all the host to be hostname and anything that takes an InetAddress will have the name of address to avoid confusing it with a hostname. Bug: 16658420 Bug: 17059757 Change-Id: Iac0628d2d156023dbb80c2e636af6bfe63f46650 commit e9cf759ac89fb053c01f1db19931beb14a823618 Merge: ababdd1 7ed0fae Author: Kenny Root Date: Tue Aug 19 19:32:43 2014 +0000 am 7ed0fae1: OpenSSLEngineImpl: reduce number of copies needed * commit 7ed0fae1906061766d0042e69ccba20e4a702bbe: OpenSSLEngineImpl: reduce number of copies needed commit 7ed0fae1906061766d0042e69ccba20e4a702bbe Author: Kenny Root Date: Tue Jul 22 13:03:09 2014 OpenSSLEngineImpl: reduce number of copies needed When the ByteBuffer didnt line up exactly with the backing array, it would allocate a new buffer to write into. Instead, add the ability for OpenSSL to read at an offset in the given array so a copy isnt needed. Change-Id: I149d3f94e4b5cbdc010df80439ae3300cbdc87a5 commit ababdd1ae1272eac174e3a449a413ab35afbc435 Merge: 66c31e0 4b050b6 Author: Kenny Root Date: Fri Aug 15 16:23:14 2014 +0000 am 4b050b6f: OpenSSLSocketImpl: Move state checks inside mutex * commit 4b050b6fb06fbb804557eecc72cc4ff0e0277525: OpenSSLSocketImpl: Move state checks inside mutex commit 66c31e0b613ceefc167a2e1fb226a14c78f84537 Merge: f4b895a 0931d51 Author: Kenny Root Date: Thu Aug 14 20:46:43 2014 +0000 am 0931d51c: OpenSSLSocketImpl: Move state checks inside mutex * commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706: OpenSSLSocketImpl: Move state checks inside mutex commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706 Author: Kenny Root Date: Tue Aug 5 15:45:32 2014 OpenSSLSocketImpl: Move state checks inside mutex Checking the state of the connection is unreliable if SSL_read and SSL_write are happening in another thread. Move the state checks inside our application mutex so we dont run into another thread mutating the state at the same time. Bug: 15606096 Change-Id: I5ecdeb1551a13098d1b66c5e4009607c9951fa38 commit f4b895ae9c424b5c2d49c744131606adccbc49d7 Merge: a35c400 a260ee6 Author: Kenny Root Date: Wed Aug 13 15:35:28 2014 +0000 am a260ee6d: Revert ""Revert ""Automatic management of OpenSSL error stack"""" * commit a260ee6d0caea43f8010f158a4a35fb712935ae3: Revert ""Revert ""Automatic management of OpenSSL error stack"""" commit a35c40017c8690f821351d6460dfeaa2738b884c Merge: 0edc483 30550a8 Author: Kenny Root Date: Wed Aug 13 15:35:27 2014 +0000 am 30550a8b: Fix debugging with unbundled conscrypt * commit 30550a8b64bbcd6ca537680a17b8726932a29937: Fix debugging with unbundled conscrypt commit a260ee6d0caea43f8010f158a4a35fb712935ae3 Author: Kenny Root Date: Tue Aug 12 15:38:10 2014 Revert ""Revert ""Automatic management of OpenSSL error stack"""" The ""else"" statement in OpenSslError::reset wasnt properly resetting the error state which made a second call into sslRead jump into sslSelect when it should have just returned immediately. Change-Id: I22e8025c0497a04e78daa07cef78191a6ca1a70c commit 30550a8b64bbcd6ca537680a17b8726932a29937 Author: Kenny Root Date: Tue Aug 12 15:13:33 2014 Fix debugging with unbundled conscrypt When JNI_TRACE was enabled, there were missing defines for the debugging code since no platform code is included. Also clang complains about more of the debugging statement formats, so we have to move some things around to get it to be happy. Change-Id: I1a6695c2ef2639cc01cfc3d3a8603f010c659844 commit 0edc4833091846d6cb45961fc9458df842fbbad9 Merge: 107a8fb 2411b8b Author: Kenny Root Date: Tue Aug 12 21:46:12 2014 +0000 am 2411b8bd: Merge ""Revert ""Automatic management of OpenSSL error stack"""" * commit 2411b8bdcde72c956f4150e9a5909b7501f50bad: Revert ""Automatic management of OpenSSL error stack"" commit 2411b8bdcde72c956f4150e9a5909b7501f50bad Merge: 3262a8c b514d72 Author: Kenny Root Date: Tue Aug 12 21:39:32 2014 +0000 Merge ""Revert ""Automatic management of OpenSSL error stack"""" commit b514d72b93c3996d97e38eca6db1ad684965fd9b Author: Kenny Root Date: Tue Aug 12 21:39:17 2014 +0000 Revert ""Automatic management of OpenSSL error stack"" This reverts commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8. Change-Id: I926d159c4c4b99250caef750732976c1e601e9ef commit 107a8fba8be5be57933f2638b76ac1243b578b9e Merge: 1de007f 3262a8c Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am 3262a8c2: Merge ""Automatic management of OpenSSL error stack"" * commit 3262a8c2741b95103149bcdefe2409c24bfddee9: Automatic management of OpenSSL error stack commit 1de007f9f01be8f07a56235dd924c897088a03cb Merge: 94890ae d1bbcd0 Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am d1bbcd0e: Relax checks for key vs cert for wrapped keys * commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484: Relax checks for key vs cert for wrapped keys commit 3262a8c2741b95103149bcdefe2409c24bfddee9 Merge: d1bbcd0 35666e4 Author: Kenny Root Date: Tue Aug 12 15:31:02 2014 +0000 Merge ""Automatic management of OpenSSL error stack"" commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484 Author: Kenny Root Date: Mon Aug 11 14:56:58 2014 Relax checks for key vs cert for wrapped keys If a key is a wrapped platform key, we must relax the check. The reason is that we may not have the public values we need to pass the EVP_PKEY_cmp checks that this does. Change-Id: I7ab2be51b0968a9cf771edea01d33fe2367c8185 commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8 Author: Kenny Root Date: Tue Aug 5 11:05:00 2014 Automatic management of OpenSSL error stack This removes some complexity in remembering to free the OpenSSL error stack. If you forget, the error will stick around until you make another call. Change-Id: I245a525dcc93077b2bf9909a14a0ef469a2daca4 commit 94890aec5735cde2ea5170fb76cd1b847ea66af8 Merge: 8360485 977f087 Author: Kenny Root Date: Tue Aug 5 16:44:42 2014 +0000 am 977f0877: Fix some JNI_TRACE lines * commit 977f08774c628b4640d5454cde050259856965f8: Fix some JNI_TRACE lines commit 977f08774c628b4640d5454cde050259856965f8 Author: Kenny Root Date: Mon Aug 4 12:15:04 2014 Fix some JNI_TRACE lines During debugging these would be enabled, but they were copy-pastad to with the wrong args. Change-Id: I23f39ff4807e3fa71f3220912aec3c99db6b9454 commit 83604854c5160304cafefc9bd40a72c5ee8506eb Merge: 7db3524 1ffe43e Author: Zoltan Szatmary-Ban Date: Thu Jul 31 13:28:57 2014 +0000 am 1ffe43e8: Merge ""Add possibility to get deleted system Certificate Aliases"" into lmp-dev * commit 1ffe43e8277e883c6663c1fb7cfc5e18ba552c40: Add possibility to get deleted system Certificate Aliases commit 7db3524880092126962b7f502af76b4c84da7350 Merge: 5767d63 ad0cd83 Author: Prameet Shah Date: Wed Jul 30 17:04:13 2014 +0000 am ad0cd830: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit ad0cd83024f38011043d28d70370a8638b88cd72: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 5767d63d22e87becab387b3bd6597fe41eb34d7e Merge: b389e17 26163c2 Author: Prameet Shah Date: Wed Jul 30 16:31:08 2014 +0000 am 26163c26: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit 26163c268a6d2625384b87e907afad8ef19f9a47: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 26163c268a6d2625384b87e907afad8ef19f9a47 Author: Prameet Shah Date: Tue Jul 29 16:45:31 2014 Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() Bug: Change-Id: I5bcaf3ee8910ff75e785baed4c4604fee6c5e700 commit b389e1779651f2c58454a5f98acebd3dd7bc0061 Merge: 5f03b4d e427972 Author: Prameet Shah Date: Thu Jul 24 19:46:28 2014 +0000 am e427972e: OpenSSLEngineImpl: fix unwrap behavior with array * commit e427972eb6141cd67e6d4c9607863a8d990e6be6: OpenSSLEngineImpl: fix unwrap behavior with array commit 5f03b4d63c7632581b032879de791dc82f05ffa0 Merge: 3d935ee 41eb5b6 Author: Prameet Shah Date: Tue Jul 22 19:26:41 2014 +0000 am 41eb5b65: OpenSSLEngineImpl: fix unwrap behavior with array * commit 41eb5b65e524d01e28da474bd37e4349b12fb494: OpenSSLEngineImpl: fix unwrap behavior with array commit 41eb5b65e524d01e28da474bd37e4349b12fb494 Author: Prameet Shah Date: Tue Jul 22 11:50:18 2014 OpenSSLEngineImpl: fix unwrap behavior with array The decrypted bytes should written sequentially into each buffer of the destination array until its full before moving to the next buffer. Change-Id: I2454249c167deafde6c12134d3c8cd658cd7c21b commit 3d935eeca25e00b56cfd8d37a657c7b2986889b3 Merge: 0a36f6c affd45a Author: Alex Klyubin Date: Fri Jul 18 00:32:14 2014 +0000 am affd45a4: Merge ""Improve the Javadoc of PSKKeyManager."" into lmp-dev * commit affd45a413cf844dad797ad4972074efb9de43d8: Improve the Javadoc of PSKKeyManager. commit 0a36f6c1f8b2e195c2dd5aea1a386df090c6d470 Merge: 6492180 af4fa68 Author: rich cannings Date: Thu Jul 17 23:47:33 2014 +0000 am af4fa685: Merge ""Log CCS exceptions do not merge."" into lmp-dev * commit af4fa685f246aaa80c93af62faadbc2fe87dc034: Log CCS exceptions do not merge. commit 6492180ce17a3b5ff822cff1783f00e7a4176491 Merge: aac4168 3b7268c Author: Alex Klyubin Date: Thu Jul 17 18:27:39 2014 +0000 am 3b7268cd: Merge ""Improve the Javadoc of PSKKeyManager."" * commit 3b7268cde4a4fc59591da8a93691927ebf3add57: Improve the Javadoc of PSKKeyManager. commit aac4168d8baef7e12d6fa959c6d6ded9892e9651 Merge: 8573ad0 a749c0d Author: Kenny Root Date: Thu Jul 17 17:07:05 2014 +0000 am a749c0d3: Keep enough state to completely reset cipher instances * commit a749c0d351216be38879600ee8ed01c6793aa256: Keep enough state to completely reset cipher instances commit 8573ad0ddcf7e2f8b2e5ac84c34b7ffab303155c Merge: 4ca5b06 70fdb6d Author: Koushik Dutta Date: Thu Jul 17 17:06:36 2014 +0000 am 70fdb6d2: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit 70fdb6d2bfa0c313fe389827f0025288f6aeb947: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit 4ca5b0625e3f5a15ae8adf833ab5a69f9d7d517f Merge: 119abfb ded66f5 Author: Koushik Dutta Date: Thu Jul 17 17:06:35 2014 +0000 am ded66f5f: Various fixes in OpenSSLEngineImpl. * commit ded66f5f696994ce7620552e16a4e9124e69e052: Various fixes in OpenSSLEngineImpl. commit 119abfba1fcd9c9cfbd15d0a4ca9ed2188fdfab0 Merge: 5713cdf cbe1f28 Author: Kenny Root Date: Thu Jul 17 15:56:57 2014 +0000 am cbe1f28a: Merge ""Keep enough state to completely reset cipher instances"" * commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae: Keep enough state to completely reset cipher instances commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae Merge: e08f238 084e308 Author: Kenny Root Date: Thu Jul 17 15:48:58 2014 +0000 Merge ""Keep enough state to completely reset cipher instances"" commit 3b7268cde4a4fc59591da8a93691927ebf3add57 Merge: cbe1f28 7ac13e0 Author: Alex Klyubin Date: Thu Jul 17 18:20:43 2014 +0000 Merge ""Improve the Javadoc of PSKKeyManager."" commit 5713cdf71c5c6e5179e8369263c702e9512afdd0 Merge: cf55719 e08f238 Author: Koushik Dutta Date: Wed Jul 16 22:05:17 2014 +0000 am e08f2385: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit e08f238580e8ee471012bef8240c8d3397c7b780: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit cf557195a9b60d7f51a48500afde38481ddbc91c Merge: cbbd7d1 986aeb7 Author: Kenny Root Date: Wed Jul 16 21:41:12 2014 +0000 am 986aeb78: Merge ""Various fixes in OpenSSLEngineImpl."" * commit 986aeb78e533540463daf1753e24840f75b25ce6: Various fixes in OpenSSLEngineImpl. commit e08f238580e8ee471012bef8240c8d3397c7b780 Author: Koushik Dutta Date: Tue Jul 15 22:40:23 2014 OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. Change-Id: Idc78204b7077fb367b64e1867c807cd39f596f98 commit 7ac13e03a79d0c99d181b1a28b1b3699ba3d5739 Author: Alex Klyubin Date: Wed Jul 16 08:33:02 2014 Improve the Javadoc of PSKKeyManager. This clarifies several points and adds sample code. Bug: 15073623 Change-Id: I6e8aadc52277e238a998d6cee36795dab1151d58 commit 986aeb78e533540463daf1753e24840f75b25ce6 Merge: 8f9ac1a bdfcc18 Author: Kenny Root Date: Wed Jul 16 21:15:30 2014 +0000 Merge ""Various fixes in OpenSSLEngineImpl."" commit bdfcc189efe41a3f812aeb55ea634bace67d159a Author: Koushik Dutta Date: Sat Jun 28 19:19:21 2014 Various fixes in OpenSSLEngineImpl. Fix ""Buffers were not large enough"" exception by directly using the destination buffers. Corrections around bytesProduced and bytesConsumed behavior. Return BUFFER_OVERFLOW if a zero length destination is provided to unwrap. Change-Id: I1f1e9b72cd6968ed4f3c3c0edccbccebc33d6790 commit cbbd7d10e8e484c44a78e5b27e8fecda195f1692 Merge: ec7f8e6 fdb7d8c Author: Alex Klyubin Date: Tue Jul 15 18:49:14 2014 +0000 am fdb7d8c5: Enable PSK cipher suites when PSKKeyManager is provided. * commit fdb7d8c53dabac5551e2499d045ba6829bcfc0a0: Enable PSK cipher suites when PSKKeyManager is provided. commit ec7f8e6b27330160f88540f4f2ace7bc2a0720a3 Merge: 5b8ccf1 8f9ac1a Author: Alex Klyubin Date: Tue Jul 15 15:53:46 2014 +0000 am 8f9ac1af: Enable PSK cipher suites when PSKKeyManager is provided. * commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17: Enable PSK cipher suites when PSKKeyManager is provided. commit 5b8ccf1b09df6f35c1709bfc8fd727a291094a5b Merge: 69a2e46 6e2315f Author: Ed Heyl Date: Tue Jul 15 13:34:25 2014 +0000 am 6e2315fd: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. * commit 6e2315fd96c3c4a47450c1a437babacc94bc31a6: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. commit 084e3086be1d7a6b9280b64c7c8cdb7b41a13bea Author: Kenny Root Date: Mon Jul 14 13:25:32 2014 Keep enough state to completely reset cipher instances OpenSSLs RC4 mutates the given key. AES/CTR mutates the IV. We must store these values locally to enable ""doFinal"" to cause the Cipher instance to be reset to what it was right after ""init"". Note that resetting and encrypting with the same key or IV breaks semantic security. Bug: 16298401 Bug: Change-Id: Ie7e4dcb6cf6cc33ddad31d6b47066dc1b34e6894 commit 69a2e460cc0a40e1b951e400589b9932609079ec Merge: 8b7bb32 bca895f Author: David Benjamin Date: Mon Jul 14 18:17:28 2014 +0000 am bca895f8: Pass output buffer length into EVP_DigestSignFinal. * commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d: Pass output buffer length into EVP_DigestSignFinal. commit 8b7bb32af09a01e80442b70dd23e6997a937f103 Merge: a2404c9 e79c25b Author: Kenny Root Date: Mon Jul 14 18:17:28 2014 +0000 am e79c25bf: Merge ""DHKeyPairGenerator: use provided params"" * commit e79c25bf33e10da41e489c537823f678e1a1169c: DHKeyPairGenerator: use provided params commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17 Author: Alex Klyubin Date: Thu Jun 19 13:37:24 2014 Enable PSK cipher suites when PSKKeyManager is provided. This enables TLS-PSK cipher suites by default iff SSLContext is initialized with a PSKKeyManager. For consistency, X.509 based cipher suites are no longer enabled by default at all times they are now only enabled by default iff SSLContext is initialized with a X509KeyManager or a X509TrustManager. When both X.509 and PSK cipher suites need to be enabled, PSK cipher suites are given higher priority in the resulting list of cipher suites. This is based on the assumption that in most cases users of TLS/SSL who enable TLS-PSK would prefer TLS-PSK to be used when the peer supports TLS-PSK. Bug: 15073623 Change-Id: I8e2bc3e7a1ea8a986e468973b6bad19dc6b7bc3c commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d Author: David Benjamin Date: Thu Jul 10 18:12:08 2014 Pass output buffer length into EVP_DigestSignFinal. EVP_DigestSignFinal expects the input buffer length as *siglen on input. In addition, if sigret is NULL, it returns the buffer size needed. Use this rather than making assumptions about the EVP_PKEY used to initialize the EVP_MD_CTX. commit e79c25bf33e10da41e489c537823f678e1a1169c Merge: a328492 9b226f9 Author: Kenny Root Date: Fri Jul 11 16:46:23 2014 +0000 Merge ""DHKeyPairGenerator: use provided params"" commit 9b226f90a992a4a2267b7a813e3b869851945c4d Author: Kenny Root Date: Thu Jul 10 14:50:48 2014 DHKeyPairGenerator: use provided params If the prime is provided in the DHParameterSpec, then use it to generate the key. Bug: 16188130 Change-Id: I42de02c71a58d691ef7ba6e2252367105687b758 Bug: 18388980 Change-Id: I853b02a32db113a5af3f6166e7d61fab58c3ff73/"
,,0.3234,conscrypt,"am 7b7d2e3c: am b9bfe69f: Fix null elements in X509KeyManager.chooseClientAlias keyTypes. * commit 7b7d2e3cb2ea60307c332de6441da78942145a1c: Fix null elements in X509KeyManager.chooseClientAlias keyTypes./Remove support for DSS TLS/SSL cipher suites. This is in preparation for migration from OpenSSL to BoringSSL. BoringSSL does not support DSS. DSS cipher suites are used by a vanishingly tiny fraction of the Android ecosystem. In all cases, the servers SSL certificate is self-signed (rather than CA issued), making it easy to switch to a new self-signed certificate which is based on RSA or ECDSA. Bug: 17409664 Change-Id: I91067ca9df764edd2b7820e5dec995f24f3910a1/am b9bfe69f: Fix null elements in X509KeyManager.chooseClientAlias keyTypes. * commit b9bfe69f1c205ab67a03e10a01e2cc90871a0879: Fix null elements in X509KeyManager.chooseClientAlias keyTypes./Fix null elements in X509KeyManager.chooseClientAlias keyTypes. This fixes an issue where client certificate types requested by the server from the client, but not known by the client, manifest themselves as null elements in X509KeyManager.chooseClientAlias keyTypes argument. The root cause was that for each element in the CertificateRequest.certificate_types array an element was output into the keyTypes array. For unknown values of certificate_type, a null was output. This CL fixes the issue by ignoring unknown values in certificate_types array. Bug: 18414726 Change-Id: I8565e19a610c0ecfb7cab1b7707c335e0eeb8d89/"
,,0.2802,conscrypt,am 899688d8: am a7682713: Stop building chain if issuer already in chain * commit 899688d8d41e8f7877fecf90e694fe6570304b8f: Stop building chain if issuer already in chain/am a7682713: Stop building chain if issuer already in chain * commit a7682713687ac2e209063324597134d48b1955d3: Stop building chain if issuer already in chain/Stop building chain if issuer already in chain Bug: 17972577 Change-Id: I379de26bdae3de1d0fe867adc1d8b7d5443c8c7a/
,,0.9205,conscrypt,"Time out TLS/SSL sessions after 8 hours by default. Prior to this change TLS/SSL sessions did not time out. (cherry picked from commit e5992c842c07c472f7ea3efbcc7f133fcc022592) Bug: 18369043 Bug: 18370076 Change-Id: I596423b9c56bfc5f337a17aba02fbb9a9f2ded36/Time out TLS/SSL sessions after 8 hours by default. Prior to this change TLS/SSL sessions did not time out. Bug: 18370076 Change-Id: I596423b9c56bfc5f337a17aba02fbb9a9f2ded36/Squashed commit of changes from lmp-ub-dev Contains the following changes: commit e31d982cdb0f8e6ef05d1e412576888015e1da17 Merge: eaebc54 b73be72 Author: Neil Fuller Date: Wed Oct 22 10:34:23 2014 +0000 am b73be72e: am 3e21a289: (-s ours) TLS_FALLBACK_SCSV CTS fix for klp-modular-dev * commit b73be72ed97da8f36450d95d52f485cc6f451c61: TLS_FALLBACK_SCSV CTS fix for klp-modular-dev commit eaebc544f3a10c53d7d2f908514122caba569e14 Merge: 223b5da cd50afa Author: Kenny Root Date: Tue Oct 14 17:30:19 2014 +0000 Merge ""Fix SSLEngine to support session resumption."" into lmp-ub-dev commit 223b5da5d70e47b1a497e86474493925b568f6d7 Merge: 8737796 cb7a360 Author: Neil Fuller Date: Thu Oct 9 14:52:00 2014 +0000 am cb7a3605: am ea961ada: Apply conscrypt changes from merge commit * commit cb7a36050f34d3c16be00d532411820761eeb276: Apply conscrypt changes from merge commit commit cd50afad1567b1311e6e979e94a7167b7bf69c94 Author: Doug Steedman Date: Mon Oct 6 13:16:15 2014 Fix SSLEngine to support session resumption. Bug: 17877118 Change-Id: I388b59cde58fdc506ecac9f536e4bbd9161df6ad commit 8737796a646eaec94df32827752a71aee74bd46f Merge: 9564a5f 8d7e23e Author: Kenny Root Date: Mon Oct 6 22:34:20 2014 +0000 am 8d7e23e1: Add support for TLS_FALLBACK_SCSV * commit 8d7e23e117da591a8d48e6bcda9ed6f58ff1a375: Add support for TLS_FALLBACK_SCSV commit 9564a5fb9ed2eecf6299788db35213cb08397212 Merge: 4f58feb 7640613 Author: Kenny Root Date: Fri Sep 12 17:27:23 2014 +0000 am 76406135: am 6dcb23fe: am f427ec90: Fix the ENGINE_finish/ENGINE_free mixup * commit 76406135cf3a3b88afc979fe8e847b9c3d8b93c1: Fix the ENGINE_finish/ENGINE_free mixup commit 4f58feb0ea49dc089a95efba196032ef3c960a39 Merge: ddac5c6 984b7ec Author: Kenny Root Date: Wed Sep 10 07:07:16 2014 +0000 am 984b7ec6: Fix the ENGINE_finish/ENGINE_free mixup * commit 984b7ec6f5aab314117949a48e448ff4f6b65f16: Fix the ENGINE_finish/ENGINE_free mixup commit ddac5c6d7e413b0d68b388fbdf70dbeb3eeae865 Merge: 5a8ca5b 36ba60b Author: Kenny Root Date: Thu Sep 4 22:41:38 2014 +0000 Merge ""Reset lmp-ub-dev to lmp-dev-plus-aosp"" into lmp-ub-dev commit 36ba60b039f1f30ab1ea8f0e2a4da8ae4e3906e5 Author: Kenny Root Date: Wed Aug 27 12:07:07 2014 Reset lmp-ub-dev to lmp-dev-plus-aosp Bug: 17059757 Change-Id: I581963360da47b574e1e2e20c2851485c36fa62c commit 6a4f2ef9e4ea3ebb321d45ca39b30d634ea3b4ad Merge: 9b187af f67d784 Author: Kenny Root Date: Tue Aug 26 04:17:38 2014 +0000 am f67d784a: Add pre-Honeycomb literal IP matching * commit f67d784abe5cef700240be02c68cecd899cd8e6d: Add pre-Honeycomb literal IP matching commit 9b187af33dcd97915a0371d64fe1ee4aba20d0ba Merge: 714ebea 966ae8a Author: Kenny Root Date: Tue Aug 26 04:17:37 2014 +0000 am 966ae8a6: Read property to enable SNI * commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb: Read property to enable SNI commit 714ebeabcb5e35c6df6a5c21f549cdb6130368c4 Merge: 7724204 54a1ba4 Author: Kenny Root Date: Tue Aug 26 04:06:54 2014 +0000 Merge ""resolved conflicts for merge of 342097db to lmp-dev-plus-aosp"" into lmp-dev-plus-aosp commit 54a1ba421d23bb6d988688c2662715e509172447 Merge: a20d871 342097d Author: Kenny Root Date: Mon Aug 25 21:03:51 2014 resolved conflicts for merge of 342097db to lmp-dev-plus-aosp Change-Id: I853c6b0d3725dafbdc84c4d6d6d1b90529bd949d commit 7724204abf4431d35787c44c4a22cda5489d4e37 Merge: 20f60ac afb3403 Author: Kenny Root Date: Tue Aug 26 00:09:27 2014 +0000 am afb34034: Implement write socket timeouts for unbundled apps * commit afb340348bfc54dbc46964e159fe803f9c93a4dd: Implement write socket timeouts for unbundled apps commit f67d784abe5cef700240be02c68cecd899cd8e6d Author: Kenny Root Date: Wed Aug 20 14:14:26 2014 Add pre-Honeycomb literal IP matching This will allow us to run this code on Gingerbread devices and others that dont have the InetAddress#isNumeric API. Bug: 16658420 Bug: 17059757 Change-Id: I597d539979d58eeaa2677d6f99e911313a550cc1 commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb Author: Kenny Root Date: Mon Aug 18 10:12:20 2014 Read property to enable SNI Read the system property ""jsse.enableSNIExtension"" on whether to enable Server Name Indication (SNI) extension. For unbundled builds, this will be enabled by default. For platform builds, this will be disabled by default. Bug: 16658420 Bug: 17059757 Change-Id: I774f5406bf3fe601a42c4ef5e708b31800147eb9 commit 342097db97a9b2736531033b2c4b4d8ce4998c67 Author: Kenny Root Date: Wed Aug 20 12:14:52 2014 Validate hostname is usable for SNI According to RFC 6066 section 3, the hostname listed in the Server Name Indication (SNI) field is a fully qualified domain name and IP addresses are not permitted. Bug: 16658420 Bug: 17059757 Change-Id: I804e46b6e66599b2770f0f4f0534467987e51208 commit afb340348bfc54dbc46964e159fe803f9c93a4dd Author: Kenny Root Date: Tue Aug 19 16:33:07 2014 Implement write socket timeouts for unbundled apps Change-Id: I4fd604f057ba4288d4f31bf6b3b93307376023d5 commit 20f60acea153dfdf0c8f75a53d7bd9edb4c7614c Author: Kenny Root Date: Mon Aug 25 11:52:05 2014 Tracking change from AOSP Change-Id: I889af3f7c1de9ef34d9328339e1b421651055ad4 commit 68056b7c9db8a9fb384bbadfc5287730f996896d Merge: 8239dfd cc2ef2e Author: Kenny Root Date: Mon Aug 25 18:03:27 2014 +0000 am cc2ef2e2: Rename hostname fields and methods to reflect usage * commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e: Rename hostname fields and methods to reflect usage commit 8239dfdcc40a69255d7b2feced960d574ea36321 Merge: e9cf759 076138f Author: Kenny Root Date: Thu Aug 21 16:36:24 2014 +0000 am 076138ff: Use consistent naming for SSLSocket arguments * commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11: Use consistent naming for SSLSocket arguments commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e Author: Kenny Root Date: Wed Aug 20 11:26:33 2014 Rename hostname fields and methods to reflect usage The hostname that was supplied when the socket was created is stored as the ""peerHostname"" This is the only one that should be used for Server Name Indication (SNI) purposes. The ""peerHostname"" or the resolved IP address may be used for certificate validation, so keep the use of ""getHostname()"" for cerificate validation. Bug: 16658420 Bug: 17059757 Change-Id: Ifd87dead44fb2f00bbfd5eac7e69fb3fc98e94b4 commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11 Author: Kenny Root Date: Wed Aug 20 11:24:41 2014 Use consistent naming for SSLSocket arguments This changes all the host to be hostname and anything that takes an InetAddress will have the name of address to avoid confusing it with a hostname. Bug: 16658420 Bug: 17059757 Change-Id: Iac0628d2d156023dbb80c2e636af6bfe63f46650 commit e9cf759ac89fb053c01f1db19931beb14a823618 Merge: ababdd1 7ed0fae Author: Kenny Root Date: Tue Aug 19 19:32:43 2014 +0000 am 7ed0fae1: OpenSSLEngineImpl: reduce number of copies needed * commit 7ed0fae1906061766d0042e69ccba20e4a702bbe: OpenSSLEngineImpl: reduce number of copies needed commit 7ed0fae1906061766d0042e69ccba20e4a702bbe Author: Kenny Root Date: Tue Jul 22 13:03:09 2014 OpenSSLEngineImpl: reduce number of copies needed When the ByteBuffer didnt line up exactly with the backing array, it would allocate a new buffer to write into. Instead, add the ability for OpenSSL to read at an offset in the given array so a copy isnt needed. Change-Id: I149d3f94e4b5cbdc010df80439ae3300cbdc87a5 commit ababdd1ae1272eac174e3a449a413ab35afbc435 Merge: 66c31e0 4b050b6 Author: Kenny Root Date: Fri Aug 15 16:23:14 2014 +0000 am 4b050b6f: OpenSSLSocketImpl: Move state checks inside mutex * commit 4b050b6fb06fbb804557eecc72cc4ff0e0277525: OpenSSLSocketImpl: Move state checks inside mutex commit 66c31e0b613ceefc167a2e1fb226a14c78f84537 Merge: f4b895a 0931d51 Author: Kenny Root Date: Thu Aug 14 20:46:43 2014 +0000 am 0931d51c: OpenSSLSocketImpl: Move state checks inside mutex * commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706: OpenSSLSocketImpl: Move state checks inside mutex commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706 Author: Kenny Root Date: Tue Aug 5 15:45:32 2014 OpenSSLSocketImpl: Move state checks inside mutex Checking the state of the connection is unreliable if SSL_read and SSL_write are happening in another thread. Move the state checks inside our application mutex so we dont run into another thread mutating the state at the same time. Bug: 15606096 Change-Id: I5ecdeb1551a13098d1b66c5e4009607c9951fa38 commit f4b895ae9c424b5c2d49c744131606adccbc49d7 Merge: a35c400 a260ee6 Author: Kenny Root Date: Wed Aug 13 15:35:28 2014 +0000 am a260ee6d: Revert ""Revert ""Automatic management of OpenSSL error stack"""" * commit a260ee6d0caea43f8010f158a4a35fb712935ae3: Revert ""Revert ""Automatic management of OpenSSL error stack"""" commit a35c40017c8690f821351d6460dfeaa2738b884c Merge: 0edc483 30550a8 Author: Kenny Root Date: Wed Aug 13 15:35:27 2014 +0000 am 30550a8b: Fix debugging with unbundled conscrypt * commit 30550a8b64bbcd6ca537680a17b8726932a29937: Fix debugging with unbundled conscrypt commit a260ee6d0caea43f8010f158a4a35fb712935ae3 Author: Kenny Root Date: Tue Aug 12 15:38:10 2014 Revert ""Revert ""Automatic management of OpenSSL error stack"""" The ""else"" statement in OpenSslError::reset wasnt properly resetting the error state which made a second call into sslRead jump into sslSelect when it should have just returned immediately. Change-Id: I22e8025c0497a04e78daa07cef78191a6ca1a70c commit 30550a8b64bbcd6ca537680a17b8726932a29937 Author: Kenny Root Date: Tue Aug 12 15:13:33 2014 Fix debugging with unbundled conscrypt When JNI_TRACE was enabled, there were missing defines for the debugging code since no platform code is included. Also clang complains about more of the debugging statement formats, so we have to move some things around to get it to be happy. Change-Id: I1a6695c2ef2639cc01cfc3d3a8603f010c659844 commit 0edc4833091846d6cb45961fc9458df842fbbad9 Merge: 107a8fb 2411b8b Author: Kenny Root Date: Tue Aug 12 21:46:12 2014 +0000 am 2411b8bd: Merge ""Revert ""Automatic management of OpenSSL error stack"""" * commit 2411b8bdcde72c956f4150e9a5909b7501f50bad: Revert ""Automatic management of OpenSSL error stack"" commit 2411b8bdcde72c956f4150e9a5909b7501f50bad Merge: 3262a8c b514d72 Author: Kenny Root Date: Tue Aug 12 21:39:32 2014 +0000 Merge ""Revert ""Automatic management of OpenSSL error stack"""" commit b514d72b93c3996d97e38eca6db1ad684965fd9b Author: Kenny Root Date: Tue Aug 12 21:39:17 2014 +0000 Revert ""Automatic management of OpenSSL error stack"" This reverts commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8. Change-Id: I926d159c4c4b99250caef750732976c1e601e9ef commit 107a8fba8be5be57933f2638b76ac1243b578b9e Merge: 1de007f 3262a8c Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am 3262a8c2: Merge ""Automatic management of OpenSSL error stack"" * commit 3262a8c2741b95103149bcdefe2409c24bfddee9: Automatic management of OpenSSL error stack commit 1de007f9f01be8f07a56235dd924c897088a03cb Merge: 94890ae d1bbcd0 Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am d1bbcd0e: Relax checks for key vs cert for wrapped keys * commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484: Relax checks for key vs cert for wrapped keys commit 3262a8c2741b95103149bcdefe2409c24bfddee9 Merge: d1bbcd0 35666e4 Author: Kenny Root Date: Tue Aug 12 15:31:02 2014 +0000 Merge ""Automatic management of OpenSSL error stack"" commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484 Author: Kenny Root Date: Mon Aug 11 14:56:58 2014 Relax checks for key vs cert for wrapped keys If a key is a wrapped platform key, we must relax the check. The reason is that we may not have the public values we need to pass the EVP_PKEY_cmp checks that this does. Change-Id: I7ab2be51b0968a9cf771edea01d33fe2367c8185 commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8 Author: Kenny Root Date: Tue Aug 5 11:05:00 2014 Automatic management of OpenSSL error stack This removes some complexity in remembering to free the OpenSSL error stack. If you forget, the error will stick around until you make another call. Change-Id: I245a525dcc93077b2bf9909a14a0ef469a2daca4 commit 94890aec5735cde2ea5170fb76cd1b847ea66af8 Merge: 8360485 977f087 Author: Kenny Root Date: Tue Aug 5 16:44:42 2014 +0000 am 977f0877: Fix some JNI_TRACE lines * commit 977f08774c628b4640d5454cde050259856965f8: Fix some JNI_TRACE lines commit 977f08774c628b4640d5454cde050259856965f8 Author: Kenny Root Date: Mon Aug 4 12:15:04 2014 Fix some JNI_TRACE lines During debugging these would be enabled, but they were copy-pastad to with the wrong args. Change-Id: I23f39ff4807e3fa71f3220912aec3c99db6b9454 commit 83604854c5160304cafefc9bd40a72c5ee8506eb Merge: 7db3524 1ffe43e Author: Zoltan Szatmary-Ban Date: Thu Jul 31 13:28:57 2014 +0000 am 1ffe43e8: Merge ""Add possibility to get deleted system Certificate Aliases"" into lmp-dev * commit 1ffe43e8277e883c6663c1fb7cfc5e18ba552c40: Add possibility to get deleted system Certificate Aliases commit 7db3524880092126962b7f502af76b4c84da7350 Merge: 5767d63 ad0cd83 Author: Prameet Shah Date: Wed Jul 30 17:04:13 2014 +0000 am ad0cd830: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit ad0cd83024f38011043d28d70370a8638b88cd72: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 5767d63d22e87becab387b3bd6597fe41eb34d7e Merge: b389e17 26163c2 Author: Prameet Shah Date: Wed Jul 30 16:31:08 2014 +0000 am 26163c26: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit 26163c268a6d2625384b87e907afad8ef19f9a47: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 26163c268a6d2625384b87e907afad8ef19f9a47 Author: Prameet Shah Date: Tue Jul 29 16:45:31 2014 Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() Bug: Change-Id: I5bcaf3ee8910ff75e785baed4c4604fee6c5e700 commit b389e1779651f2c58454a5f98acebd3dd7bc0061 Merge: 5f03b4d e427972 Author: Prameet Shah Date: Thu Jul 24 19:46:28 2014 +0000 am e427972e: OpenSSLEngineImpl: fix unwrap behavior with array * commit e427972eb6141cd67e6d4c9607863a8d990e6be6: OpenSSLEngineImpl: fix unwrap behavior with array commit 5f03b4d63c7632581b032879de791dc82f05ffa0 Merge: 3d935ee 41eb5b6 Author: Prameet Shah Date: Tue Jul 22 19:26:41 2014 +0000 am 41eb5b65: OpenSSLEngineImpl: fix unwrap behavior with array * commit 41eb5b65e524d01e28da474bd37e4349b12fb494: OpenSSLEngineImpl: fix unwrap behavior with array commit 41eb5b65e524d01e28da474bd37e4349b12fb494 Author: Prameet Shah Date: Tue Jul 22 11:50:18 2014 OpenSSLEngineImpl: fix unwrap behavior with array The decrypted bytes should written sequentially into each buffer of the destination array until its full before moving to the next buffer. Change-Id: I2454249c167deafde6c12134d3c8cd658cd7c21b commit 3d935eeca25e00b56cfd8d37a657c7b2986889b3 Merge: 0a36f6c affd45a Author: Alex Klyubin Date: Fri Jul 18 00:32:14 2014 +0000 am affd45a4: Merge ""Improve the Javadoc of PSKKeyManager."" into lmp-dev * commit affd45a413cf844dad797ad4972074efb9de43d8: Improve the Javadoc of PSKKeyManager. commit 0a36f6c1f8b2e195c2dd5aea1a386df090c6d470 Merge: 6492180 af4fa68 Author: rich cannings Date: Thu Jul 17 23:47:33 2014 +0000 am af4fa685: Merge ""Log CCS exceptions do not merge."" into lmp-dev * commit af4fa685f246aaa80c93af62faadbc2fe87dc034: Log CCS exceptions do not merge. commit 6492180ce17a3b5ff822cff1783f00e7a4176491 Merge: aac4168 3b7268c Author: Alex Klyubin Date: Thu Jul 17 18:27:39 2014 +0000 am 3b7268cd: Merge ""Improve the Javadoc of PSKKeyManager."" * commit 3b7268cde4a4fc59591da8a93691927ebf3add57: Improve the Javadoc of PSKKeyManager. commit aac4168d8baef7e12d6fa959c6d6ded9892e9651 Merge: 8573ad0 a749c0d Author: Kenny Root Date: Thu Jul 17 17:07:05 2014 +0000 am a749c0d3: Keep enough state to completely reset cipher instances * commit a749c0d351216be38879600ee8ed01c6793aa256: Keep enough state to completely reset cipher instances commit 8573ad0ddcf7e2f8b2e5ac84c34b7ffab303155c Merge: 4ca5b06 70fdb6d Author: Koushik Dutta Date: Thu Jul 17 17:06:36 2014 +0000 am 70fdb6d2: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit 70fdb6d2bfa0c313fe389827f0025288f6aeb947: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit 4ca5b0625e3f5a15ae8adf833ab5a69f9d7d517f Merge: 119abfb ded66f5 Author: Koushik Dutta Date: Thu Jul 17 17:06:35 2014 +0000 am ded66f5f: Various fixes in OpenSSLEngineImpl. * commit ded66f5f696994ce7620552e16a4e9124e69e052: Various fixes in OpenSSLEngineImpl. commit 119abfba1fcd9c9cfbd15d0a4ca9ed2188fdfab0 Merge: 5713cdf cbe1f28 Author: Kenny Root Date: Thu Jul 17 15:56:57 2014 +0000 am cbe1f28a: Merge ""Keep enough state to completely reset cipher instances"" * commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae: Keep enough state to completely reset cipher instances commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae Merge: e08f238 084e308 Author: Kenny Root Date: Thu Jul 17 15:48:58 2014 +0000 Merge ""Keep enough state to completely reset cipher instances"" commit 3b7268cde4a4fc59591da8a93691927ebf3add57 Merge: cbe1f28 7ac13e0 Author: Alex Klyubin Date: Thu Jul 17 18:20:43 2014 +0000 Merge ""Improve the Javadoc of PSKKeyManager."" commit 5713cdf71c5c6e5179e8369263c702e9512afdd0 Merge: cf55719 e08f238 Author: Koushik Dutta Date: Wed Jul 16 22:05:17 2014 +0000 am e08f2385: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit e08f238580e8ee471012bef8240c8d3397c7b780: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit cf557195a9b60d7f51a48500afde38481ddbc91c Merge: cbbd7d1 986aeb7 Author: Kenny Root Date: Wed Jul 16 21:41:12 2014 +0000 am 986aeb78: Merge ""Various fixes in OpenSSLEngineImpl."" * commit 986aeb78e533540463daf1753e24840f75b25ce6: Various fixes in OpenSSLEngineImpl. commit e08f238580e8ee471012bef8240c8d3397c7b780 Author: Koushik Dutta Date: Tue Jul 15 22:40:23 2014 OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. Change-Id: Idc78204b7077fb367b64e1867c807cd39f596f98 commit 7ac13e03a79d0c99d181b1a28b1b3699ba3d5739 Author: Alex Klyubin Date: Wed Jul 16 08:33:02 2014 Improve the Javadoc of PSKKeyManager. This clarifies several points and adds sample code. Bug: 15073623 Change-Id: I6e8aadc52277e238a998d6cee36795dab1151d58 commit 986aeb78e533540463daf1753e24840f75b25ce6 Merge: 8f9ac1a bdfcc18 Author: Kenny Root Date: Wed Jul 16 21:15:30 2014 +0000 Merge ""Various fixes in OpenSSLEngineImpl."" commit bdfcc189efe41a3f812aeb55ea634bace67d159a Author: Koushik Dutta Date: Sat Jun 28 19:19:21 2014 Various fixes in OpenSSLEngineImpl. Fix ""Buffers were not large enough"" exception by directly using the destination buffers. Corrections around bytesProduced and bytesConsumed behavior. Return BUFFER_OVERFLOW if a zero length destination is provided to unwrap. Change-Id: I1f1e9b72cd6968ed4f3c3c0edccbccebc33d6790 commit cbbd7d10e8e484c44a78e5b27e8fecda195f1692 Merge: ec7f8e6 fdb7d8c Author: Alex Klyubin Date: Tue Jul 15 18:49:14 2014 +0000 am fdb7d8c5: Enable PSK cipher suites when PSKKeyManager is provided. * commit fdb7d8c53dabac5551e2499d045ba6829bcfc0a0: Enable PSK cipher suites when PSKKeyManager is provided. commit ec7f8e6b27330160f88540f4f2ace7bc2a0720a3 Merge: 5b8ccf1 8f9ac1a Author: Alex Klyubin Date: Tue Jul 15 15:53:46 2014 +0000 am 8f9ac1af: Enable PSK cipher suites when PSKKeyManager is provided. * commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17: Enable PSK cipher suites when PSKKeyManager is provided. commit 5b8ccf1b09df6f35c1709bfc8fd727a291094a5b Merge: 69a2e46 6e2315f Author: Ed Heyl Date: Tue Jul 15 13:34:25 2014 +0000 am 6e2315fd: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. * commit 6e2315fd96c3c4a47450c1a437babacc94bc31a6: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. commit 084e3086be1d7a6b9280b64c7c8cdb7b41a13bea Author: Kenny Root Date: Mon Jul 14 13:25:32 2014 Keep enough state to completely reset cipher instances OpenSSLs RC4 mutates the given key. AES/CTR mutates the IV. We must store these values locally to enable ""doFinal"" to cause the Cipher instance to be reset to what it was right after ""init"". Note that resetting and encrypting with the same key or IV breaks semantic security. Bug: 16298401 Bug: Change-Id: Ie7e4dcb6cf6cc33ddad31d6b47066dc1b34e6894 commit 69a2e460cc0a40e1b951e400589b9932609079ec Merge: 8b7bb32 bca895f Author: David Benjamin Date: Mon Jul 14 18:17:28 2014 +0000 am bca895f8: Pass output buffer length into EVP_DigestSignFinal. * commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d: Pass output buffer length into EVP_DigestSignFinal. commit 8b7bb32af09a01e80442b70dd23e6997a937f103 Merge: a2404c9 e79c25b Author: Kenny Root Date: Mon Jul 14 18:17:28 2014 +0000 am e79c25bf: Merge ""DHKeyPairGenerator: use provided params"" * commit e79c25bf33e10da41e489c537823f678e1a1169c: DHKeyPairGenerator: use provided params commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17 Author: Alex Klyubin Date: Thu Jun 19 13:37:24 2014 Enable PSK cipher suites when PSKKeyManager is provided. This enables TLS-PSK cipher suites by default iff SSLContext is initialized with a PSKKeyManager. For consistency, X.509 based cipher suites are no longer enabled by default at all times they are now only enabled by default iff SSLContext is initialized with a X509KeyManager or a X509TrustManager. When both X.509 and PSK cipher suites need to be enabled, PSK cipher suites are given higher priority in the resulting list of cipher suites. This is based on the assumption that in most cases users of TLS/SSL who enable TLS-PSK would prefer TLS-PSK to be used when the peer supports TLS-PSK. Bug: 15073623 Change-Id: I8e2bc3e7a1ea8a986e468973b6bad19dc6b7bc3c commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d Author: David Benjamin Date: Thu Jul 10 18:12:08 2014 Pass output buffer length into EVP_DigestSignFinal. EVP_DigestSignFinal expects the input buffer length as *siglen on input. In addition, if sigret is NULL, it returns the buffer size needed. Use this rather than making assumptions about the EVP_PKEY used to initialize the EVP_MD_CTX. commit e79c25bf33e10da41e489c537823f678e1a1169c Merge: a328492 9b226f9 Author: Kenny Root Date: Fri Jul 11 16:46:23 2014 +0000 Merge ""DHKeyPairGenerator: use provided params"" commit 9b226f90a992a4a2267b7a813e3b869851945c4d Author: Kenny Root Date: Thu Jul 10 14:50:48 2014 DHKeyPairGenerator: use provided params If the prime is provided in the DHParameterSpec, then use it to generate the key. Bug: 16188130 Change-Id: I42de02c71a58d691ef7ba6e2252367105687b758 Bug: 18388980 Change-Id: I853b02a32db113a5af3f6166e7d61fab58c3ff73/"
,,0.1854,conscrypt,Time out TLS/SSL sessions after 8 hours by default. Prior to this change TLS/SSL sessions did not time out. (cherry picked from commit e5992c842c07c472f7ea3efbcc7f133fcc022592) Bug: 18369043 Bug: 18370076 Change-Id: I596423b9c56bfc5f337a17aba02fbb9a9f2ded36/Time out TLS/SSL sessions after 8 hours by default. Prior to this change TLS/SSL sessions did not time out. Bug: 18370076 Change-Id: I596423b9c56bfc5f337a17aba02fbb9a9f2ded36/
,,0.9186,conscrypt,"Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/Remove Conscrypt support for DSA BoringSSL removes support for DSA, so theres no point in maintaining this now. There have been virtually zero SSL certificates issued using DSA for many years as well. Change-Id: Id940643b85ba39b03038aabc6da9ec0285db66c4/Squashed commit of changes from lmp-ub-dev Contains the following changes: commit e31d982cdb0f8e6ef05d1e412576888015e1da17 Merge: eaebc54 b73be72 Author: Neil Fuller Date: Wed Oct 22 10:34:23 2014 +0000 am b73be72e: am 3e21a289: (-s ours) TLS_FALLBACK_SCSV CTS fix for klp-modular-dev * commit b73be72ed97da8f36450d95d52f485cc6f451c61: TLS_FALLBACK_SCSV CTS fix for klp-modular-dev commit eaebc544f3a10c53d7d2f908514122caba569e14 Merge: 223b5da cd50afa Author: Kenny Root Date: Tue Oct 14 17:30:19 2014 +0000 Merge ""Fix SSLEngine to support session resumption."" into lmp-ub-dev commit 223b5da5d70e47b1a497e86474493925b568f6d7 Merge: 8737796 cb7a360 Author: Neil Fuller Date: Thu Oct 9 14:52:00 2014 +0000 am cb7a3605: am ea961ada: Apply conscrypt changes from merge commit * commit cb7a36050f34d3c16be00d532411820761eeb276: Apply conscrypt changes from merge commit commit cd50afad1567b1311e6e979e94a7167b7bf69c94 Author: Doug Steedman Date: Mon Oct 6 13:16:15 2014 Fix SSLEngine to support session resumption. Bug: 17877118 Change-Id: I388b59cde58fdc506ecac9f536e4bbd9161df6ad commit 8737796a646eaec94df32827752a71aee74bd46f Merge: 9564a5f 8d7e23e Author: Kenny Root Date: Mon Oct 6 22:34:20 2014 +0000 am 8d7e23e1: Add support for TLS_FALLBACK_SCSV * commit 8d7e23e117da591a8d48e6bcda9ed6f58ff1a375: Add support for TLS_FALLBACK_SCSV commit 9564a5fb9ed2eecf6299788db35213cb08397212 Merge: 4f58feb 7640613 Author: Kenny Root Date: Fri Sep 12 17:27:23 2014 +0000 am 76406135: am 6dcb23fe: am f427ec90: Fix the ENGINE_finish/ENGINE_free mixup * commit 76406135cf3a3b88afc979fe8e847b9c3d8b93c1: Fix the ENGINE_finish/ENGINE_free mixup commit 4f58feb0ea49dc089a95efba196032ef3c960a39 Merge: ddac5c6 984b7ec Author: Kenny Root Date: Wed Sep 10 07:07:16 2014 +0000 am 984b7ec6: Fix the ENGINE_finish/ENGINE_free mixup * commit 984b7ec6f5aab314117949a48e448ff4f6b65f16: Fix the ENGINE_finish/ENGINE_free mixup commit ddac5c6d7e413b0d68b388fbdf70dbeb3eeae865 Merge: 5a8ca5b 36ba60b Author: Kenny Root Date: Thu Sep 4 22:41:38 2014 +0000 Merge ""Reset lmp-ub-dev to lmp-dev-plus-aosp"" into lmp-ub-dev commit 36ba60b039f1f30ab1ea8f0e2a4da8ae4e3906e5 Author: Kenny Root Date: Wed Aug 27 12:07:07 2014 Reset lmp-ub-dev to lmp-dev-plus-aosp Bug: 17059757 Change-Id: I581963360da47b574e1e2e20c2851485c36fa62c commit 6a4f2ef9e4ea3ebb321d45ca39b30d634ea3b4ad Merge: 9b187af f67d784 Author: Kenny Root Date: Tue Aug 26 04:17:38 2014 +0000 am f67d784a: Add pre-Honeycomb literal IP matching * commit f67d784abe5cef700240be02c68cecd899cd8e6d: Add pre-Honeycomb literal IP matching commit 9b187af33dcd97915a0371d64fe1ee4aba20d0ba Merge: 714ebea 966ae8a Author: Kenny Root Date: Tue Aug 26 04:17:37 2014 +0000 am 966ae8a6: Read property to enable SNI * commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb: Read property to enable SNI commit 714ebeabcb5e35c6df6a5c21f549cdb6130368c4 Merge: 7724204 54a1ba4 Author: Kenny Root Date: Tue Aug 26 04:06:54 2014 +0000 Merge ""resolved conflicts for merge of 342097db to lmp-dev-plus-aosp"" into lmp-dev-plus-aosp commit 54a1ba421d23bb6d988688c2662715e509172447 Merge: a20d871 342097d Author: Kenny Root Date: Mon Aug 25 21:03:51 2014 resolved conflicts for merge of 342097db to lmp-dev-plus-aosp Change-Id: I853c6b0d3725dafbdc84c4d6d6d1b90529bd949d commit 7724204abf4431d35787c44c4a22cda5489d4e37 Merge: 20f60ac afb3403 Author: Kenny Root Date: Tue Aug 26 00:09:27 2014 +0000 am afb34034: Implement write socket timeouts for unbundled apps * commit afb340348bfc54dbc46964e159fe803f9c93a4dd: Implement write socket timeouts for unbundled apps commit f67d784abe5cef700240be02c68cecd899cd8e6d Author: Kenny Root Date: Wed Aug 20 14:14:26 2014 Add pre-Honeycomb literal IP matching This will allow us to run this code on Gingerbread devices and others that dont have the InetAddress#isNumeric API. Bug: 16658420 Bug: 17059757 Change-Id: I597d539979d58eeaa2677d6f99e911313a550cc1 commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb Author: Kenny Root Date: Mon Aug 18 10:12:20 2014 Read property to enable SNI Read the system property ""jsse.enableSNIExtension"" on whether to enable Server Name Indication (SNI) extension. For unbundled builds, this will be enabled by default. For platform builds, this will be disabled by default. Bug: 16658420 Bug: 17059757 Change-Id: I774f5406bf3fe601a42c4ef5e708b31800147eb9 commit 342097db97a9b2736531033b2c4b4d8ce4998c67 Author: Kenny Root Date: Wed Aug 20 12:14:52 2014 Validate hostname is usable for SNI According to RFC 6066 section 3, the hostname listed in the Server Name Indication (SNI) field is a fully qualified domain name and IP addresses are not permitted. Bug: 16658420 Bug: 17059757 Change-Id: I804e46b6e66599b2770f0f4f0534467987e51208 commit afb340348bfc54dbc46964e159fe803f9c93a4dd Author: Kenny Root Date: Tue Aug 19 16:33:07 2014 Implement write socket timeouts for unbundled apps Change-Id: I4fd604f057ba4288d4f31bf6b3b93307376023d5 commit 20f60acea153dfdf0c8f75a53d7bd9edb4c7614c Author: Kenny Root Date: Mon Aug 25 11:52:05 2014 Tracking change from AOSP Change-Id: I889af3f7c1de9ef34d9328339e1b421651055ad4 commit 68056b7c9db8a9fb384bbadfc5287730f996896d Merge: 8239dfd cc2ef2e Author: Kenny Root Date: Mon Aug 25 18:03:27 2014 +0000 am cc2ef2e2: Rename hostname fields and methods to reflect usage * commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e: Rename hostname fields and methods to reflect usage commit 8239dfdcc40a69255d7b2feced960d574ea36321 Merge: e9cf759 076138f Author: Kenny Root Date: Thu Aug 21 16:36:24 2014 +0000 am 076138ff: Use consistent naming for SSLSocket arguments * commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11: Use consistent naming for SSLSocket arguments commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e Author: Kenny Root Date: Wed Aug 20 11:26:33 2014 Rename hostname fields and methods to reflect usage The hostname that was supplied when the socket was created is stored as the ""peerHostname"" This is the only one that should be used for Server Name Indication (SNI) purposes. The ""peerHostname"" or the resolved IP address may be used for certificate validation, so keep the use of ""getHostname()"" for cerificate validation. Bug: 16658420 Bug: 17059757 Change-Id: Ifd87dead44fb2f00bbfd5eac7e69fb3fc98e94b4 commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11 Author: Kenny Root Date: Wed Aug 20 11:24:41 2014 Use consistent naming for SSLSocket arguments This changes all the host to be hostname and anything that takes an InetAddress will have the name of address to avoid confusing it with a hostname. Bug: 16658420 Bug: 17059757 Change-Id: Iac0628d2d156023dbb80c2e636af6bfe63f46650 commit e9cf759ac89fb053c01f1db19931beb14a823618 Merge: ababdd1 7ed0fae Author: Kenny Root Date: Tue Aug 19 19:32:43 2014 +0000 am 7ed0fae1: OpenSSLEngineImpl: reduce number of copies needed * commit 7ed0fae1906061766d0042e69ccba20e4a702bbe: OpenSSLEngineImpl: reduce number of copies needed commit 7ed0fae1906061766d0042e69ccba20e4a702bbe Author: Kenny Root Date: Tue Jul 22 13:03:09 2014 OpenSSLEngineImpl: reduce number of copies needed When the ByteBuffer didnt line up exactly with the backing array, it would allocate a new buffer to write into. Instead, add the ability for OpenSSL to read at an offset in the given array so a copy isnt needed. Change-Id: I149d3f94e4b5cbdc010df80439ae3300cbdc87a5 commit ababdd1ae1272eac174e3a449a413ab35afbc435 Merge: 66c31e0 4b050b6 Author: Kenny Root Date: Fri Aug 15 16:23:14 2014 +0000 am 4b050b6f: OpenSSLSocketImpl: Move state checks inside mutex * commit 4b050b6fb06fbb804557eecc72cc4ff0e0277525: OpenSSLSocketImpl: Move state checks inside mutex commit 66c31e0b613ceefc167a2e1fb226a14c78f84537 Merge: f4b895a 0931d51 Author: Kenny Root Date: Thu Aug 14 20:46:43 2014 +0000 am 0931d51c: OpenSSLSocketImpl: Move state checks inside mutex * commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706: OpenSSLSocketImpl: Move state checks inside mutex commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706 Author: Kenny Root Date: Tue Aug 5 15:45:32 2014 OpenSSLSocketImpl: Move state checks inside mutex Checking the state of the connection is unreliable if SSL_read and SSL_write are happening in another thread. Move the state checks inside our application mutex so we dont run into another thread mutating the state at the same time. Bug: 15606096 Change-Id: I5ecdeb1551a13098d1b66c5e4009607c9951fa38 commit f4b895ae9c424b5c2d49c744131606adccbc49d7 Merge: a35c400 a260ee6 Author: Kenny Root Date: Wed Aug 13 15:35:28 2014 +0000 am a260ee6d: Revert ""Revert ""Automatic management of OpenSSL error stack"""" * commit a260ee6d0caea43f8010f158a4a35fb712935ae3: Revert ""Revert ""Automatic management of OpenSSL error stack"""" commit a35c40017c8690f821351d6460dfeaa2738b884c Merge: 0edc483 30550a8 Author: Kenny Root Date: Wed Aug 13 15:35:27 2014 +0000 am 30550a8b: Fix debugging with unbundled conscrypt * commit 30550a8b64bbcd6ca537680a17b8726932a29937: Fix debugging with unbundled conscrypt commit a260ee6d0caea43f8010f158a4a35fb712935ae3 Author: Kenny Root Date: Tue Aug 12 15:38:10 2014 Revert ""Revert ""Automatic management of OpenSSL error stack"""" The ""else"" statement in OpenSslError::reset wasnt properly resetting the error state which made a second call into sslRead jump into sslSelect when it should have just returned immediately. Change-Id: I22e8025c0497a04e78daa07cef78191a6ca1a70c commit 30550a8b64bbcd6ca537680a17b8726932a29937 Author: Kenny Root Date: Tue Aug 12 15:13:33 2014 Fix debugging with unbundled conscrypt When JNI_TRACE was enabled, there were missing defines for the debugging code since no platform code is included. Also clang complains about more of the debugging statement formats, so we have to move some things around to get it to be happy. Change-Id: I1a6695c2ef2639cc01cfc3d3a8603f010c659844 commit 0edc4833091846d6cb45961fc9458df842fbbad9 Merge: 107a8fb 2411b8b Author: Kenny Root Date: Tue Aug 12 21:46:12 2014 +0000 am 2411b8bd: Merge ""Revert ""Automatic management of OpenSSL error stack"""" * commit 2411b8bdcde72c956f4150e9a5909b7501f50bad: Revert ""Automatic management of OpenSSL error stack"" commit 2411b8bdcde72c956f4150e9a5909b7501f50bad Merge: 3262a8c b514d72 Author: Kenny Root Date: Tue Aug 12 21:39:32 2014 +0000 Merge ""Revert ""Automatic management of OpenSSL error stack"""" commit b514d72b93c3996d97e38eca6db1ad684965fd9b Author: Kenny Root Date: Tue Aug 12 21:39:17 2014 +0000 Revert ""Automatic management of OpenSSL error stack"" This reverts commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8. Change-Id: I926d159c4c4b99250caef750732976c1e601e9ef commit 107a8fba8be5be57933f2638b76ac1243b578b9e Merge: 1de007f 3262a8c Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am 3262a8c2: Merge ""Automatic management of OpenSSL error stack"" * commit 3262a8c2741b95103149bcdefe2409c24bfddee9: Automatic management of OpenSSL error stack commit 1de007f9f01be8f07a56235dd924c897088a03cb Merge: 94890ae d1bbcd0 Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am d1bbcd0e: Relax checks for key vs cert for wrapped keys * commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484: Relax checks for key vs cert for wrapped keys commit 3262a8c2741b95103149bcdefe2409c24bfddee9 Merge: d1bbcd0 35666e4 Author: Kenny Root Date: Tue Aug 12 15:31:02 2014 +0000 Merge ""Automatic management of OpenSSL error stack"" commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484 Author: Kenny Root Date: Mon Aug 11 14:56:58 2014 Relax checks for key vs cert for wrapped keys If a key is a wrapped platform key, we must relax the check. The reason is that we may not have the public values we need to pass the EVP_PKEY_cmp checks that this does. Change-Id: I7ab2be51b0968a9cf771edea01d33fe2367c8185 commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8 Author: Kenny Root Date: Tue Aug 5 11:05:00 2014 Automatic management of OpenSSL error stack This removes some complexity in remembering to free the OpenSSL error stack. If you forget, the error will stick around until you make another call. Change-Id: I245a525dcc93077b2bf9909a14a0ef469a2daca4 commit 94890aec5735cde2ea5170fb76cd1b847ea66af8 Merge: 8360485 977f087 Author: Kenny Root Date: Tue Aug 5 16:44:42 2014 +0000 am 977f0877: Fix some JNI_TRACE lines * commit 977f08774c628b4640d5454cde050259856965f8: Fix some JNI_TRACE lines commit 977f08774c628b4640d5454cde050259856965f8 Author: Kenny Root Date: Mon Aug 4 12:15:04 2014 Fix some JNI_TRACE lines During debugging these would be enabled, but they were copy-pastad to with the wrong args. Change-Id: I23f39ff4807e3fa71f3220912aec3c99db6b9454 commit 83604854c5160304cafefc9bd40a72c5ee8506eb Merge: 7db3524 1ffe43e Author: Zoltan Szatmary-Ban Date: Thu Jul 31 13:28:57 2014 +0000 am 1ffe43e8: Merge ""Add possibility to get deleted system Certificate Aliases"" into lmp-dev * commit 1ffe43e8277e883c6663c1fb7cfc5e18ba552c40: Add possibility to get deleted system Certificate Aliases commit 7db3524880092126962b7f502af76b4c84da7350 Merge: 5767d63 ad0cd83 Author: Prameet Shah Date: Wed Jul 30 17:04:13 2014 +0000 am ad0cd830: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit ad0cd83024f38011043d28d70370a8638b88cd72: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 5767d63d22e87becab387b3bd6597fe41eb34d7e Merge: b389e17 26163c2 Author: Prameet Shah Date: Wed Jul 30 16:31:08 2014 +0000 am 26163c26: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit 26163c268a6d2625384b87e907afad8ef19f9a47: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 26163c268a6d2625384b87e907afad8ef19f9a47 Author: Prameet Shah Date: Tue Jul 29 16:45:31 2014 Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() Bug: Change-Id: I5bcaf3ee8910ff75e785baed4c4604fee6c5e700 commit b389e1779651f2c58454a5f98acebd3dd7bc0061 Merge: 5f03b4d e427972 Author: Prameet Shah Date: Thu Jul 24 19:46:28 2014 +0000 am e427972e: OpenSSLEngineImpl: fix unwrap behavior with array * commit e427972eb6141cd67e6d4c9607863a8d990e6be6: OpenSSLEngineImpl: fix unwrap behavior with array commit 5f03b4d63c7632581b032879de791dc82f05ffa0 Merge: 3d935ee 41eb5b6 Author: Prameet Shah Date: Tue Jul 22 19:26:41 2014 +0000 am 41eb5b65: OpenSSLEngineImpl: fix unwrap behavior with array * commit 41eb5b65e524d01e28da474bd37e4349b12fb494: OpenSSLEngineImpl: fix unwrap behavior with array commit 41eb5b65e524d01e28da474bd37e4349b12fb494 Author: Prameet Shah Date: Tue Jul 22 11:50:18 2014 OpenSSLEngineImpl: fix unwrap behavior with array The decrypted bytes should written sequentially into each buffer of the destination array until its full before moving to the next buffer. Change-Id: I2454249c167deafde6c12134d3c8cd658cd7c21b commit 3d935eeca25e00b56cfd8d37a657c7b2986889b3 Merge: 0a36f6c affd45a Author: Alex Klyubin Date: Fri Jul 18 00:32:14 2014 +0000 am affd45a4: Merge ""Improve the Javadoc of PSKKeyManager."" into lmp-dev * commit affd45a413cf844dad797ad4972074efb9de43d8: Improve the Javadoc of PSKKeyManager. commit 0a36f6c1f8b2e195c2dd5aea1a386df090c6d470 Merge: 6492180 af4fa68 Author: rich cannings Date: Thu Jul 17 23:47:33 2014 +0000 am af4fa685: Merge ""Log CCS exceptions do not merge."" into lmp-dev * commit af4fa685f246aaa80c93af62faadbc2fe87dc034: Log CCS exceptions do not merge. commit 6492180ce17a3b5ff822cff1783f00e7a4176491 Merge: aac4168 3b7268c Author: Alex Klyubin Date: Thu Jul 17 18:27:39 2014 +0000 am 3b7268cd: Merge ""Improve the Javadoc of PSKKeyManager."" * commit 3b7268cde4a4fc59591da8a93691927ebf3add57: Improve the Javadoc of PSKKeyManager. commit aac4168d8baef7e12d6fa959c6d6ded9892e9651 Merge: 8573ad0 a749c0d Author: Kenny Root Date: Thu Jul 17 17:07:05 2014 +0000 am a749c0d3: Keep enough state to completely reset cipher instances * commit a749c0d351216be38879600ee8ed01c6793aa256: Keep enough state to completely reset cipher instances commit 8573ad0ddcf7e2f8b2e5ac84c34b7ffab303155c Merge: 4ca5b06 70fdb6d Author: Koushik Dutta Date: Thu Jul 17 17:06:36 2014 +0000 am 70fdb6d2: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit 70fdb6d2bfa0c313fe389827f0025288f6aeb947: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit 4ca5b0625e3f5a15ae8adf833ab5a69f9d7d517f Merge: 119abfb ded66f5 Author: Koushik Dutta Date: Thu Jul 17 17:06:35 2014 +0000 am ded66f5f: Various fixes in OpenSSLEngineImpl. * commit ded66f5f696994ce7620552e16a4e9124e69e052: Various fixes in OpenSSLEngineImpl. commit 119abfba1fcd9c9cfbd15d0a4ca9ed2188fdfab0 Merge: 5713cdf cbe1f28 Author: Kenny Root Date: Thu Jul 17 15:56:57 2014 +0000 am cbe1f28a: Merge ""Keep enough state to completely reset cipher instances"" * commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae: Keep enough state to completely reset cipher instances commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae Merge: e08f238 084e308 Author: Kenny Root Date: Thu Jul 17 15:48:58 2014 +0000 Merge ""Keep enough state to completely reset cipher instances"" commit 3b7268cde4a4fc59591da8a93691927ebf3add57 Merge: cbe1f28 7ac13e0 Author: Alex Klyubin Date: Thu Jul 17 18:20:43 2014 +0000 Merge ""Improve the Javadoc of PSKKeyManager."" commit 5713cdf71c5c6e5179e8369263c702e9512afdd0 Merge: cf55719 e08f238 Author: Koushik Dutta Date: Wed Jul 16 22:05:17 2014 +0000 am e08f2385: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit e08f238580e8ee471012bef8240c8d3397c7b780: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit cf557195a9b60d7f51a48500afde38481ddbc91c Merge: cbbd7d1 986aeb7 Author: Kenny Root Date: Wed Jul 16 21:41:12 2014 +0000 am 986aeb78: Merge ""Various fixes in OpenSSLEngineImpl."" * commit 986aeb78e533540463daf1753e24840f75b25ce6: Various fixes in OpenSSLEngineImpl. commit e08f238580e8ee471012bef8240c8d3397c7b780 Author: Koushik Dutta Date: Tue Jul 15 22:40:23 2014 OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. Change-Id: Idc78204b7077fb367b64e1867c807cd39f596f98 commit 7ac13e03a79d0c99d181b1a28b1b3699ba3d5739 Author: Alex Klyubin Date: Wed Jul 16 08:33:02 2014 Improve the Javadoc of PSKKeyManager. This clarifies several points and adds sample code. Bug: 15073623 Change-Id: I6e8aadc52277e238a998d6cee36795dab1151d58 commit 986aeb78e533540463daf1753e24840f75b25ce6 Merge: 8f9ac1a bdfcc18 Author: Kenny Root Date: Wed Jul 16 21:15:30 2014 +0000 Merge ""Various fixes in OpenSSLEngineImpl."" commit bdfcc189efe41a3f812aeb55ea634bace67d159a Author: Koushik Dutta Date: Sat Jun 28 19:19:21 2014 Various fixes in OpenSSLEngineImpl. Fix ""Buffers were not large enough"" exception by directly using the destination buffers. Corrections around bytesProduced and bytesConsumed behavior. Return BUFFER_OVERFLOW if a zero length destination is provided to unwrap. Change-Id: I1f1e9b72cd6968ed4f3c3c0edccbccebc33d6790 commit cbbd7d10e8e484c44a78e5b27e8fecda195f1692 Merge: ec7f8e6 fdb7d8c Author: Alex Klyubin Date: Tue Jul 15 18:49:14 2014 +0000 am fdb7d8c5: Enable PSK cipher suites when PSKKeyManager is provided. * commit fdb7d8c53dabac5551e2499d045ba6829bcfc0a0: Enable PSK cipher suites when PSKKeyManager is provided. commit ec7f8e6b27330160f88540f4f2ace7bc2a0720a3 Merge: 5b8ccf1 8f9ac1a Author: Alex Klyubin Date: Tue Jul 15 15:53:46 2014 +0000 am 8f9ac1af: Enable PSK cipher suites when PSKKeyManager is provided. * commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17: Enable PSK cipher suites when PSKKeyManager is provided. commit 5b8ccf1b09df6f35c1709bfc8fd727a291094a5b Merge: 69a2e46 6e2315f Author: Ed Heyl Date: Tue Jul 15 13:34:25 2014 +0000 am 6e2315fd: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. * commit 6e2315fd96c3c4a47450c1a437babacc94bc31a6: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. commit 084e3086be1d7a6b9280b64c7c8cdb7b41a13bea Author: Kenny Root Date: Mon Jul 14 13:25:32 2014 Keep enough state to completely reset cipher instances OpenSSLs RC4 mutates the given key. AES/CTR mutates the IV. We must store these values locally to enable ""doFinal"" to cause the Cipher instance to be reset to what it was right after ""init"". Note that resetting and encrypting with the same key or IV breaks semantic security. Bug: 16298401 Bug: Change-Id: Ie7e4dcb6cf6cc33ddad31d6b47066dc1b34e6894 commit 69a2e460cc0a40e1b951e400589b9932609079ec Merge: 8b7bb32 bca895f Author: David Benjamin Date: Mon Jul 14 18:17:28 2014 +0000 am bca895f8: Pass output buffer length into EVP_DigestSignFinal. * commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d: Pass output buffer length into EVP_DigestSignFinal. commit 8b7bb32af09a01e80442b70dd23e6997a937f103 Merge: a2404c9 e79c25b Author: Kenny Root Date: Mon Jul 14 18:17:28 2014 +0000 am e79c25bf: Merge ""DHKeyPairGenerator: use provided params"" * commit e79c25bf33e10da41e489c537823f678e1a1169c: DHKeyPairGenerator: use provided params commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17 Author: Alex Klyubin Date: Thu Jun 19 13:37:24 2014 Enable PSK cipher suites when PSKKeyManager is provided. This enables TLS-PSK cipher suites by default iff SSLContext is initialized with a PSKKeyManager. For consistency, X.509 based cipher suites are no longer enabled by default at all times they are now only enabled by default iff SSLContext is initialized with a X509KeyManager or a X509TrustManager. When both X.509 and PSK cipher suites need to be enabled, PSK cipher suites are given higher priority in the resulting list of cipher suites. This is based on the assumption that in most cases users of TLS/SSL who enable TLS-PSK would prefer TLS-PSK to be used when the peer supports TLS-PSK. Bug: 15073623 Change-Id: I8e2bc3e7a1ea8a986e468973b6bad19dc6b7bc3c commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d Author: David Benjamin Date: Thu Jul 10 18:12:08 2014 Pass output buffer length into EVP_DigestSignFinal. EVP_DigestSignFinal expects the input buffer length as *siglen on input. In addition, if sigret is NULL, it returns the buffer size needed. Use this rather than making assumptions about the EVP_PKEY used to initialize the EVP_MD_CTX. commit e79c25bf33e10da41e489c537823f678e1a1169c Merge: a328492 9b226f9 Author: Kenny Root Date: Fri Jul 11 16:46:23 2014 +0000 Merge ""DHKeyPairGenerator: use provided params"" commit 9b226f90a992a4a2267b7a813e3b869851945c4d Author: Kenny Root Date: Thu Jul 10 14:50:48 2014 DHKeyPairGenerator: use provided params If the prime is provided in the DHParameterSpec, then use it to generate the key. Bug: 16188130 Change-Id: I42de02c71a58d691ef7ba6e2252367105687b758 Bug: 18388980 Change-Id: I853b02a32db113a5af3f6166e7d61fab58c3ff73/"
,,0.1369,conscrypt,"Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/"
,,0.8984,conscrypt,"Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/am 7b7d2e3c: am b9bfe69f: Fix null elements in X509KeyManager.chooseClientAlias keyTypes. * commit 7b7d2e3cb2ea60307c332de6441da78942145a1c: Fix null elements in X509KeyManager.chooseClientAlias keyTypes./Remove support for DSS TLS/SSL cipher suites. This is in preparation for migration from OpenSSL to BoringSSL. BoringSSL does not support DSS. DSS cipher suites are used by a vanishingly tiny fraction of the Android ecosystem. In all cases, the servers SSL certificate is self-signed (rather than CA issued), making it easy to switch to a new self-signed certificate which is based on RSA or ECDSA. Bug: 17409664 Change-Id: I91067ca9df764edd2b7820e5dec995f24f3910a1/am b9bfe69f: Fix null elements in X509KeyManager.chooseClientAlias keyTypes. * commit b9bfe69f1c205ab67a03e10a01e2cc90871a0879: Fix null elements in X509KeyManager.chooseClientAlias keyTypes./Fix null elements in X509KeyManager.chooseClientAlias keyTypes. This fixes an issue where client certificate types requested by the server from the client, but not known by the client, manifest themselves as null elements in X509KeyManager.chooseClientAlias keyTypes argument. The root cause was that for each element in the CertificateRequest.certificate_types array an element was output into the keyTypes array. For unknown values of certificate_type, a null was output. This CL fixes the issue by ignoring unknown values in certificate_types array. Bug: 18414726 Change-Id: I8565e19a610c0ecfb7cab1b7707c335e0eeb8d89/Squashed commit of changes from lmp-ub-dev Contains the following changes: commit e31d982cdb0f8e6ef05d1e412576888015e1da17 Merge: eaebc54 b73be72 Author: Neil Fuller Date: Wed Oct 22 10:34:23 2014 +0000 am b73be72e: am 3e21a289: (-s ours) TLS_FALLBACK_SCSV CTS fix for klp-modular-dev * commit b73be72ed97da8f36450d95d52f485cc6f451c61: TLS_FALLBACK_SCSV CTS fix for klp-modular-dev commit eaebc544f3a10c53d7d2f908514122caba569e14 Merge: 223b5da cd50afa Author: Kenny Root Date: Tue Oct 14 17:30:19 2014 +0000 Merge ""Fix SSLEngine to support session resumption."" into lmp-ub-dev commit 223b5da5d70e47b1a497e86474493925b568f6d7 Merge: 8737796 cb7a360 Author: Neil Fuller Date: Thu Oct 9 14:52:00 2014 +0000 am cb7a3605: am ea961ada: Apply conscrypt changes from merge commit * commit cb7a36050f34d3c16be00d532411820761eeb276: Apply conscrypt changes from merge commit commit cd50afad1567b1311e6e979e94a7167b7bf69c94 Author: Doug Steedman Date: Mon Oct 6 13:16:15 2014 Fix SSLEngine to support session resumption. Bug: 17877118 Change-Id: I388b59cde58fdc506ecac9f536e4bbd9161df6ad commit 8737796a646eaec94df32827752a71aee74bd46f Merge: 9564a5f 8d7e23e Author: Kenny Root Date: Mon Oct 6 22:34:20 2014 +0000 am 8d7e23e1: Add support for TLS_FALLBACK_SCSV * commit 8d7e23e117da591a8d48e6bcda9ed6f58ff1a375: Add support for TLS_FALLBACK_SCSV commit 9564a5fb9ed2eecf6299788db35213cb08397212 Merge: 4f58feb 7640613 Author: Kenny Root Date: Fri Sep 12 17:27:23 2014 +0000 am 76406135: am 6dcb23fe: am f427ec90: Fix the ENGINE_finish/ENGINE_free mixup * commit 76406135cf3a3b88afc979fe8e847b9c3d8b93c1: Fix the ENGINE_finish/ENGINE_free mixup commit 4f58feb0ea49dc089a95efba196032ef3c960a39 Merge: ddac5c6 984b7ec Author: Kenny Root Date: Wed Sep 10 07:07:16 2014 +0000 am 984b7ec6: Fix the ENGINE_finish/ENGINE_free mixup * commit 984b7ec6f5aab314117949a48e448ff4f6b65f16: Fix the ENGINE_finish/ENGINE_free mixup commit ddac5c6d7e413b0d68b388fbdf70dbeb3eeae865 Merge: 5a8ca5b 36ba60b Author: Kenny Root Date: Thu Sep 4 22:41:38 2014 +0000 Merge ""Reset lmp-ub-dev to lmp-dev-plus-aosp"" into lmp-ub-dev commit 36ba60b039f1f30ab1ea8f0e2a4da8ae4e3906e5 Author: Kenny Root Date: Wed Aug 27 12:07:07 2014 Reset lmp-ub-dev to lmp-dev-plus-aosp Bug: 17059757 Change-Id: I581963360da47b574e1e2e20c2851485c36fa62c commit 6a4f2ef9e4ea3ebb321d45ca39b30d634ea3b4ad Merge: 9b187af f67d784 Author: Kenny Root Date: Tue Aug 26 04:17:38 2014 +0000 am f67d784a: Add pre-Honeycomb literal IP matching * commit f67d784abe5cef700240be02c68cecd899cd8e6d: Add pre-Honeycomb literal IP matching commit 9b187af33dcd97915a0371d64fe1ee4aba20d0ba Merge: 714ebea 966ae8a Author: Kenny Root Date: Tue Aug 26 04:17:37 2014 +0000 am 966ae8a6: Read property to enable SNI * commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb: Read property to enable SNI commit 714ebeabcb5e35c6df6a5c21f549cdb6130368c4 Merge: 7724204 54a1ba4 Author: Kenny Root Date: Tue Aug 26 04:06:54 2014 +0000 Merge ""resolved conflicts for merge of 342097db to lmp-dev-plus-aosp"" into lmp-dev-plus-aosp commit 54a1ba421d23bb6d988688c2662715e509172447 Merge: a20d871 342097d Author: Kenny Root Date: Mon Aug 25 21:03:51 2014 resolved conflicts for merge of 342097db to lmp-dev-plus-aosp Change-Id: I853c6b0d3725dafbdc84c4d6d6d1b90529bd949d commit 7724204abf4431d35787c44c4a22cda5489d4e37 Merge: 20f60ac afb3403 Author: Kenny Root Date: Tue Aug 26 00:09:27 2014 +0000 am afb34034: Implement write socket timeouts for unbundled apps * commit afb340348bfc54dbc46964e159fe803f9c93a4dd: Implement write socket timeouts for unbundled apps commit f67d784abe5cef700240be02c68cecd899cd8e6d Author: Kenny Root Date: Wed Aug 20 14:14:26 2014 Add pre-Honeycomb literal IP matching This will allow us to run this code on Gingerbread devices and others that dont have the InetAddress#isNumeric API. Bug: 16658420 Bug: 17059757 Change-Id: I597d539979d58eeaa2677d6f99e911313a550cc1 commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb Author: Kenny Root Date: Mon Aug 18 10:12:20 2014 Read property to enable SNI Read the system property ""jsse.enableSNIExtension"" on whether to enable Server Name Indication (SNI) extension. For unbundled builds, this will be enabled by default. For platform builds, this will be disabled by default. Bug: 16658420 Bug: 17059757 Change-Id: I774f5406bf3fe601a42c4ef5e708b31800147eb9 commit 342097db97a9b2736531033b2c4b4d8ce4998c67 Author: Kenny Root Date: Wed Aug 20 12:14:52 2014 Validate hostname is usable for SNI According to RFC 6066 section 3, the hostname listed in the Server Name Indication (SNI) field is a fully qualified domain name and IP addresses are not permitted. Bug: 16658420 Bug: 17059757 Change-Id: I804e46b6e66599b2770f0f4f0534467987e51208 commit afb340348bfc54dbc46964e159fe803f9c93a4dd Author: Kenny Root Date: Tue Aug 19 16:33:07 2014 Implement write socket timeouts for unbundled apps Change-Id: I4fd604f057ba4288d4f31bf6b3b93307376023d5 commit 20f60acea153dfdf0c8f75a53d7bd9edb4c7614c Author: Kenny Root Date: Mon Aug 25 11:52:05 2014 Tracking change from AOSP Change-Id: I889af3f7c1de9ef34d9328339e1b421651055ad4 commit 68056b7c9db8a9fb384bbadfc5287730f996896d Merge: 8239dfd cc2ef2e Author: Kenny Root Date: Mon Aug 25 18:03:27 2014 +0000 am cc2ef2e2: Rename hostname fields and methods to reflect usage * commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e: Rename hostname fields and methods to reflect usage commit 8239dfdcc40a69255d7b2feced960d574ea36321 Merge: e9cf759 076138f Author: Kenny Root Date: Thu Aug 21 16:36:24 2014 +0000 am 076138ff: Use consistent naming for SSLSocket arguments * commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11: Use consistent naming for SSLSocket arguments commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e Author: Kenny Root Date: Wed Aug 20 11:26:33 2014 Rename hostname fields and methods to reflect usage The hostname that was supplied when the socket was created is stored as the ""peerHostname"" This is the only one that should be used for Server Name Indication (SNI) purposes. The ""peerHostname"" or the resolved IP address may be used for certificate validation, so keep the use of ""getHostname()"" for cerificate validation. Bug: 16658420 Bug: 17059757 Change-Id: Ifd87dead44fb2f00bbfd5eac7e69fb3fc98e94b4 commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11 Author: Kenny Root Date: Wed Aug 20 11:24:41 2014 Use consistent naming for SSLSocket arguments This changes all the host to be hostname and anything that takes an InetAddress will have the name of address to avoid confusing it with a hostname. Bug: 16658420 Bug: 17059757 Change-Id: Iac0628d2d156023dbb80c2e636af6bfe63f46650 commit e9cf759ac89fb053c01f1db19931beb14a823618 Merge: ababdd1 7ed0fae Author: Kenny Root Date: Tue Aug 19 19:32:43 2014 +0000 am 7ed0fae1: OpenSSLEngineImpl: reduce number of copies needed * commit 7ed0fae1906061766d0042e69ccba20e4a702bbe: OpenSSLEngineImpl: reduce number of copies needed commit 7ed0fae1906061766d0042e69ccba20e4a702bbe Author: Kenny Root Date: Tue Jul 22 13:03:09 2014 OpenSSLEngineImpl: reduce number of copies needed When the ByteBuffer didnt line up exactly with the backing array, it would allocate a new buffer to write into. Instead, add the ability for OpenSSL to read at an offset in the given array so a copy isnt needed. Change-Id: I149d3f94e4b5cbdc010df80439ae3300cbdc87a5 commit ababdd1ae1272eac174e3a449a413ab35afbc435 Merge: 66c31e0 4b050b6 Author: Kenny Root Date: Fri Aug 15 16:23:14 2014 +0000 am 4b050b6f: OpenSSLSocketImpl: Move state checks inside mutex * commit 4b050b6fb06fbb804557eecc72cc4ff0e0277525: OpenSSLSocketImpl: Move state checks inside mutex commit 66c31e0b613ceefc167a2e1fb226a14c78f84537 Merge: f4b895a 0931d51 Author: Kenny Root Date: Thu Aug 14 20:46:43 2014 +0000 am 0931d51c: OpenSSLSocketImpl: Move state checks inside mutex * commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706: OpenSSLSocketImpl: Move state checks inside mutex commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706 Author: Kenny Root Date: Tue Aug 5 15:45:32 2014 OpenSSLSocketImpl: Move state checks inside mutex Checking the state of the connection is unreliable if SSL_read and SSL_write are happening in another thread. Move the state checks inside our application mutex so we dont run into another thread mutating the state at the same time. Bug: 15606096 Change-Id: I5ecdeb1551a13098d1b66c5e4009607c9951fa38 commit f4b895ae9c424b5c2d49c744131606adccbc49d7 Merge: a35c400 a260ee6 Author: Kenny Root Date: Wed Aug 13 15:35:28 2014 +0000 am a260ee6d: Revert ""Revert ""Automatic management of OpenSSL error stack"""" * commit a260ee6d0caea43f8010f158a4a35fb712935ae3: Revert ""Revert ""Automatic management of OpenSSL error stack"""" commit a35c40017c8690f821351d6460dfeaa2738b884c Merge: 0edc483 30550a8 Author: Kenny Root Date: Wed Aug 13 15:35:27 2014 +0000 am 30550a8b: Fix debugging with unbundled conscrypt * commit 30550a8b64bbcd6ca537680a17b8726932a29937: Fix debugging with unbundled conscrypt commit a260ee6d0caea43f8010f158a4a35fb712935ae3 Author: Kenny Root Date: Tue Aug 12 15:38:10 2014 Revert ""Revert ""Automatic management of OpenSSL error stack"""" The ""else"" statement in OpenSslError::reset wasnt properly resetting the error state which made a second call into sslRead jump into sslSelect when it should have just returned immediately. Change-Id: I22e8025c0497a04e78daa07cef78191a6ca1a70c commit 30550a8b64bbcd6ca537680a17b8726932a29937 Author: Kenny Root Date: Tue Aug 12 15:13:33 2014 Fix debugging with unbundled conscrypt When JNI_TRACE was enabled, there were missing defines for the debugging code since no platform code is included. Also clang complains about more of the debugging statement formats, so we have to move some things around to get it to be happy. Change-Id: I1a6695c2ef2639cc01cfc3d3a8603f010c659844 commit 0edc4833091846d6cb45961fc9458df842fbbad9 Merge: 107a8fb 2411b8b Author: Kenny Root Date: Tue Aug 12 21:46:12 2014 +0000 am 2411b8bd: Merge ""Revert ""Automatic management of OpenSSL error stack"""" * commit 2411b8bdcde72c956f4150e9a5909b7501f50bad: Revert ""Automatic management of OpenSSL error stack"" commit 2411b8bdcde72c956f4150e9a5909b7501f50bad Merge: 3262a8c b514d72 Author: Kenny Root Date: Tue Aug 12 21:39:32 2014 +0000 Merge ""Revert ""Automatic management of OpenSSL error stack"""" commit b514d72b93c3996d97e38eca6db1ad684965fd9b Author: Kenny Root Date: Tue Aug 12 21:39:17 2014 +0000 Revert ""Automatic management of OpenSSL error stack"" This reverts commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8. Change-Id: I926d159c4c4b99250caef750732976c1e601e9ef commit 107a8fba8be5be57933f2638b76ac1243b578b9e Merge: 1de007f 3262a8c Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am 3262a8c2: Merge ""Automatic management of OpenSSL error stack"" * commit 3262a8c2741b95103149bcdefe2409c24bfddee9: Automatic management of OpenSSL error stack commit 1de007f9f01be8f07a56235dd924c897088a03cb Merge: 94890ae d1bbcd0 Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am d1bbcd0e: Relax checks for key vs cert for wrapped keys * commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484: Relax checks for key vs cert for wrapped keys commit 3262a8c2741b95103149bcdefe2409c24bfddee9 Merge: d1bbcd0 35666e4 Author: Kenny Root Date: Tue Aug 12 15:31:02 2014 +0000 Merge ""Automatic management of OpenSSL error stack"" commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484 Author: Kenny Root Date: Mon Aug 11 14:56:58 2014 Relax checks for key vs cert for wrapped keys If a key is a wrapped platform key, we must relax the check. The reason is that we may not have the public values we need to pass the EVP_PKEY_cmp checks that this does. Change-Id: I7ab2be51b0968a9cf771edea01d33fe2367c8185 commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8 Author: Kenny Root Date: Tue Aug 5 11:05:00 2014 Automatic management of OpenSSL error stack This removes some complexity in remembering to free the OpenSSL error stack. If you forget, the error will stick around until you make another call. Change-Id: I245a525dcc93077b2bf9909a14a0ef469a2daca4 commit 94890aec5735cde2ea5170fb76cd1b847ea66af8 Merge: 8360485 977f087 Author: Kenny Root Date: Tue Aug 5 16:44:42 2014 +0000 am 977f0877: Fix some JNI_TRACE lines * commit 977f08774c628b4640d5454cde050259856965f8: Fix some JNI_TRACE lines commit 977f08774c628b4640d5454cde050259856965f8 Author: Kenny Root Date: Mon Aug 4 12:15:04 2014 Fix some JNI_TRACE lines During debugging these would be enabled, but they were copy-pastad to with the wrong args. Change-Id: I23f39ff4807e3fa71f3220912aec3c99db6b9454 commit 83604854c5160304cafefc9bd40a72c5ee8506eb Merge: 7db3524 1ffe43e Author: Zoltan Szatmary-Ban Date: Thu Jul 31 13:28:57 2014 +0000 am 1ffe43e8: Merge ""Add possibility to get deleted system Certificate Aliases"" into lmp-dev * commit 1ffe43e8277e883c6663c1fb7cfc5e18ba552c40: Add possibility to get deleted system Certificate Aliases commit 7db3524880092126962b7f502af76b4c84da7350 Merge: 5767d63 ad0cd83 Author: Prameet Shah Date: Wed Jul 30 17:04:13 2014 +0000 am ad0cd830: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit ad0cd83024f38011043d28d70370a8638b88cd72: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 5767d63d22e87becab387b3bd6597fe41eb34d7e Merge: b389e17 26163c2 Author: Prameet Shah Date: Wed Jul 30 16:31:08 2014 +0000 am 26163c26: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit 26163c268a6d2625384b87e907afad8ef19f9a47: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 26163c268a6d2625384b87e907afad8ef19f9a47 Author: Prameet Shah Date: Tue Jul 29 16:45:31 2014 Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() Bug: Change-Id: I5bcaf3ee8910ff75e785baed4c4604fee6c5e700 commit b389e1779651f2c58454a5f98acebd3dd7bc0061 Merge: 5f03b4d e427972 Author: Prameet Shah Date: Thu Jul 24 19:46:28 2014 +0000 am e427972e: OpenSSLEngineImpl: fix unwrap behavior with array * commit e427972eb6141cd67e6d4c9607863a8d990e6be6: OpenSSLEngineImpl: fix unwrap behavior with array commit 5f03b4d63c7632581b032879de791dc82f05ffa0 Merge: 3d935ee 41eb5b6 Author: Prameet Shah Date: Tue Jul 22 19:26:41 2014 +0000 am 41eb5b65: OpenSSLEngineImpl: fix unwrap behavior with array * commit 41eb5b65e524d01e28da474bd37e4349b12fb494: OpenSSLEngineImpl: fix unwrap behavior with array commit 41eb5b65e524d01e28da474bd37e4349b12fb494 Author: Prameet Shah Date: Tue Jul 22 11:50:18 2014 OpenSSLEngineImpl: fix unwrap behavior with array The decrypted bytes should written sequentially into each buffer of the destination array until its full before moving to the next buffer. Change-Id: I2454249c167deafde6c12134d3c8cd658cd7c21b commit 3d935eeca25e00b56cfd8d37a657c7b2986889b3 Merge: 0a36f6c affd45a Author: Alex Klyubin Date: Fri Jul 18 00:32:14 2014 +0000 am affd45a4: Merge ""Improve the Javadoc of PSKKeyManager."" into lmp-dev * commit affd45a413cf844dad797ad4972074efb9de43d8: Improve the Javadoc of PSKKeyManager. commit 0a36f6c1f8b2e195c2dd5aea1a386df090c6d470 Merge: 6492180 af4fa68 Author: rich cannings Date: Thu Jul 17 23:47:33 2014 +0000 am af4fa685: Merge ""Log CCS exceptions do not merge."" into lmp-dev * commit af4fa685f246aaa80c93af62faadbc2fe87dc034: Log CCS exceptions do not merge. commit 6492180ce17a3b5ff822cff1783f00e7a4176491 Merge: aac4168 3b7268c Author: Alex Klyubin Date: Thu Jul 17 18:27:39 2014 +0000 am 3b7268cd: Merge ""Improve the Javadoc of PSKKeyManager."" * commit 3b7268cde4a4fc59591da8a93691927ebf3add57: Improve the Javadoc of PSKKeyManager. commit aac4168d8baef7e12d6fa959c6d6ded9892e9651 Merge: 8573ad0 a749c0d Author: Kenny Root Date: Thu Jul 17 17:07:05 2014 +0000 am a749c0d3: Keep enough state to completely reset cipher instances * commit a749c0d351216be38879600ee8ed01c6793aa256: Keep enough state to completely reset cipher instances commit 8573ad0ddcf7e2f8b2e5ac84c34b7ffab303155c Merge: 4ca5b06 70fdb6d Author: Koushik Dutta Date: Thu Jul 17 17:06:36 2014 +0000 am 70fdb6d2: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit 70fdb6d2bfa0c313fe389827f0025288f6aeb947: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit 4ca5b0625e3f5a15ae8adf833ab5a69f9d7d517f Merge: 119abfb ded66f5 Author: Koushik Dutta Date: Thu Jul 17 17:06:35 2014 +0000 am ded66f5f: Various fixes in OpenSSLEngineImpl. * commit ded66f5f696994ce7620552e16a4e9124e69e052: Various fixes in OpenSSLEngineImpl. commit 119abfba1fcd9c9cfbd15d0a4ca9ed2188fdfab0 Merge: 5713cdf cbe1f28 Author: Kenny Root Date: Thu Jul 17 15:56:57 2014 +0000 am cbe1f28a: Merge ""Keep enough state to completely reset cipher instances"" * commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae: Keep enough state to completely reset cipher instances commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae Merge: e08f238 084e308 Author: Kenny Root Date: Thu Jul 17 15:48:58 2014 +0000 Merge ""Keep enough state to completely reset cipher instances"" commit 3b7268cde4a4fc59591da8a93691927ebf3add57 Merge: cbe1f28 7ac13e0 Author: Alex Klyubin Date: Thu Jul 17 18:20:43 2014 +0000 Merge ""Improve the Javadoc of PSKKeyManager."" commit 5713cdf71c5c6e5179e8369263c702e9512afdd0 Merge: cf55719 e08f238 Author: Koushik Dutta Date: Wed Jul 16 22:05:17 2014 +0000 am e08f2385: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit e08f238580e8ee471012bef8240c8d3397c7b780: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit cf557195a9b60d7f51a48500afde38481ddbc91c Merge: cbbd7d1 986aeb7 Author: Kenny Root Date: Wed Jul 16 21:41:12 2014 +0000 am 986aeb78: Merge ""Various fixes in OpenSSLEngineImpl."" * commit 986aeb78e533540463daf1753e24840f75b25ce6: Various fixes in OpenSSLEngineImpl. commit e08f238580e8ee471012bef8240c8d3397c7b780 Author: Koushik Dutta Date: Tue Jul 15 22:40:23 2014 OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. Change-Id: Idc78204b7077fb367b64e1867c807cd39f596f98 commit 7ac13e03a79d0c99d181b1a28b1b3699ba3d5739 Author: Alex Klyubin Date: Wed Jul 16 08:33:02 2014 Improve the Javadoc of PSKKeyManager. This clarifies several points and adds sample code. Bug: 15073623 Change-Id: I6e8aadc52277e238a998d6cee36795dab1151d58 commit 986aeb78e533540463daf1753e24840f75b25ce6 Merge: 8f9ac1a bdfcc18 Author: Kenny Root Date: Wed Jul 16 21:15:30 2014 +0000 Merge ""Various fixes in OpenSSLEngineImpl."" commit bdfcc189efe41a3f812aeb55ea634bace67d159a Author: Koushik Dutta Date: Sat Jun 28 19:19:21 2014 Various fixes in OpenSSLEngineImpl. Fix ""Buffers were not large enough"" exception by directly using the destination buffers. Corrections around bytesProduced and bytesConsumed behavior. Return BUFFER_OVERFLOW if a zero length destination is provided to unwrap. Change-Id: I1f1e9b72cd6968ed4f3c3c0edccbccebc33d6790 commit cbbd7d10e8e484c44a78e5b27e8fecda195f1692 Merge: ec7f8e6 fdb7d8c Author: Alex Klyubin Date: Tue Jul 15 18:49:14 2014 +0000 am fdb7d8c5: Enable PSK cipher suites when PSKKeyManager is provided. * commit fdb7d8c53dabac5551e2499d045ba6829bcfc0a0: Enable PSK cipher suites when PSKKeyManager is provided. commit ec7f8e6b27330160f88540f4f2ace7bc2a0720a3 Merge: 5b8ccf1 8f9ac1a Author: Alex Klyubin Date: Tue Jul 15 15:53:46 2014 +0000 am 8f9ac1af: Enable PSK cipher suites when PSKKeyManager is provided. * commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17: Enable PSK cipher suites when PSKKeyManager is provided. commit 5b8ccf1b09df6f35c1709bfc8fd727a291094a5b Merge: 69a2e46 6e2315f Author: Ed Heyl Date: Tue Jul 15 13:34:25 2014 +0000 am 6e2315fd: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. * commit 6e2315fd96c3c4a47450c1a437babacc94bc31a6: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. commit 084e3086be1d7a6b9280b64c7c8cdb7b41a13bea Author: Kenny Root Date: Mon Jul 14 13:25:32 2014 Keep enough state to completely reset cipher instances OpenSSLs RC4 mutates the given key. AES/CTR mutates the IV. We must store these values locally to enable ""doFinal"" to cause the Cipher instance to be reset to what it was right after ""init"". Note that resetting and encrypting with the same key or IV breaks semantic security. Bug: 16298401 Bug: Change-Id: Ie7e4dcb6cf6cc33ddad31d6b47066dc1b34e6894 commit 69a2e460cc0a40e1b951e400589b9932609079ec Merge: 8b7bb32 bca895f Author: David Benjamin Date: Mon Jul 14 18:17:28 2014 +0000 am bca895f8: Pass output buffer length into EVP_DigestSignFinal. * commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d: Pass output buffer length into EVP_DigestSignFinal. commit 8b7bb32af09a01e80442b70dd23e6997a937f103 Merge: a2404c9 e79c25b Author: Kenny Root Date: Mon Jul 14 18:17:28 2014 +0000 am e79c25bf: Merge ""DHKeyPairGenerator: use provided params"" * commit e79c25bf33e10da41e489c537823f678e1a1169c: DHKeyPairGenerator: use provided params commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17 Author: Alex Klyubin Date: Thu Jun 19 13:37:24 2014 Enable PSK cipher suites when PSKKeyManager is provided. This enables TLS-PSK cipher suites by default iff SSLContext is initialized with a PSKKeyManager. For consistency, X.509 based cipher suites are no longer enabled by default at all times they are now only enabled by default iff SSLContext is initialized with a X509KeyManager or a X509TrustManager. When both X.509 and PSK cipher suites need to be enabled, PSK cipher suites are given higher priority in the resulting list of cipher suites. This is based on the assumption that in most cases users of TLS/SSL who enable TLS-PSK would prefer TLS-PSK to be used when the peer supports TLS-PSK. Bug: 15073623 Change-Id: I8e2bc3e7a1ea8a986e468973b6bad19dc6b7bc3c commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d Author: David Benjamin Date: Thu Jul 10 18:12:08 2014 Pass output buffer length into EVP_DigestSignFinal. EVP_DigestSignFinal expects the input buffer length as *siglen on input. In addition, if sigret is NULL, it returns the buffer size needed. Use this rather than making assumptions about the EVP_PKEY used to initialize the EVP_MD_CTX. commit e79c25bf33e10da41e489c537823f678e1a1169c Merge: a328492 9b226f9 Author: Kenny Root Date: Fri Jul 11 16:46:23 2014 +0000 Merge ""DHKeyPairGenerator: use provided params"" commit 9b226f90a992a4a2267b7a813e3b869851945c4d Author: Kenny Root Date: Thu Jul 10 14:50:48 2014 DHKeyPairGenerator: use provided params If the prime is provided in the DHParameterSpec, then use it to generate the key. Bug: 16188130 Cha"
,,0.1293,conscrypt,"Remove Conscrypt support for DSA BoringSSL removes support for DSA, so theres no point in maintaining this now. There have been virtually zero SSL certificates issued using DSA for many years as well. Change-Id: Id940643b85ba39b03038aabc6da9ec0285db66c4/"
,,0.9179999999999999,conscrypt,"Convert EC_GROUP and EC_POINT to new style Bug: 16656908 Change-Id: Ie912f376f69327ce634cac50763bf86b418049f5/Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/Squashed commit of changes from lmp-ub-dev Contains the following changes: commit e31d982cdb0f8e6ef05d1e412576888015e1da17 Merge: eaebc54 b73be72 Author: Neil Fuller Date: Wed Oct 22 10:34:23 2014 +0000 am b73be72e: am 3e21a289: (-s ours) TLS_FALLBACK_SCSV CTS fix for klp-modular-dev * commit b73be72ed97da8f36450d95d52f485cc6f451c61: TLS_FALLBACK_SCSV CTS fix for klp-modular-dev commit eaebc544f3a10c53d7d2f908514122caba569e14 Merge: 223b5da cd50afa Author: Kenny Root Date: Tue Oct 14 17:30:19 2014 +0000 Merge ""Fix SSLEngine to support session resumption."" into lmp-ub-dev commit 223b5da5d70e47b1a497e86474493925b568f6d7 Merge: 8737796 cb7a360 Author: Neil Fuller Date: Thu Oct 9 14:52:00 2014 +0000 am cb7a3605: am ea961ada: Apply conscrypt changes from merge commit * commit cb7a36050f34d3c16be00d532411820761eeb276: Apply conscrypt changes from merge commit commit cd50afad1567b1311e6e979e94a7167b7bf69c94 Author: Doug Steedman Date: Mon Oct 6 13:16:15 2014 Fix SSLEngine to support session resumption. Bug: 17877118 Change-Id: I388b59cde58fdc506ecac9f536e4bbd9161df6ad commit 8737796a646eaec94df32827752a71aee74bd46f Merge: 9564a5f 8d7e23e Author: Kenny Root Date: Mon Oct 6 22:34:20 2014 +0000 am 8d7e23e1: Add support for TLS_FALLBACK_SCSV * commit 8d7e23e117da591a8d48e6bcda9ed6f58ff1a375: Add support for TLS_FALLBACK_SCSV commit 9564a5fb9ed2eecf6299788db35213cb08397212 Merge: 4f58feb 7640613 Author: Kenny Root Date: Fri Sep 12 17:27:23 2014 +0000 am 76406135: am 6dcb23fe: am f427ec90: Fix the ENGINE_finish/ENGINE_free mixup * commit 76406135cf3a3b88afc979fe8e847b9c3d8b93c1: Fix the ENGINE_finish/ENGINE_free mixup commit 4f58feb0ea49dc089a95efba196032ef3c960a39 Merge: ddac5c6 984b7ec Author: Kenny Root Date: Wed Sep 10 07:07:16 2014 +0000 am 984b7ec6: Fix the ENGINE_finish/ENGINE_free mixup * commit 984b7ec6f5aab314117949a48e448ff4f6b65f16: Fix the ENGINE_finish/ENGINE_free mixup commit ddac5c6d7e413b0d68b388fbdf70dbeb3eeae865 Merge: 5a8ca5b 36ba60b Author: Kenny Root Date: Thu Sep 4 22:41:38 2014 +0000 Merge ""Reset lmp-ub-dev to lmp-dev-plus-aosp"" into lmp-ub-dev commit 36ba60b039f1f30ab1ea8f0e2a4da8ae4e3906e5 Author: Kenny Root Date: Wed Aug 27 12:07:07 2014 Reset lmp-ub-dev to lmp-dev-plus-aosp Bug: 17059757 Change-Id: I581963360da47b574e1e2e20c2851485c36fa62c commit 6a4f2ef9e4ea3ebb321d45ca39b30d634ea3b4ad Merge: 9b187af f67d784 Author: Kenny Root Date: Tue Aug 26 04:17:38 2014 +0000 am f67d784a: Add pre-Honeycomb literal IP matching * commit f67d784abe5cef700240be02c68cecd899cd8e6d: Add pre-Honeycomb literal IP matching commit 9b187af33dcd97915a0371d64fe1ee4aba20d0ba Merge: 714ebea 966ae8a Author: Kenny Root Date: Tue Aug 26 04:17:37 2014 +0000 am 966ae8a6: Read property to enable SNI * commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb: Read property to enable SNI commit 714ebeabcb5e35c6df6a5c21f549cdb6130368c4 Merge: 7724204 54a1ba4 Author: Kenny Root Date: Tue Aug 26 04:06:54 2014 +0000 Merge ""resolved conflicts for merge of 342097db to lmp-dev-plus-aosp"" into lmp-dev-plus-aosp commit 54a1ba421d23bb6d988688c2662715e509172447 Merge: a20d871 342097d Author: Kenny Root Date: Mon Aug 25 21:03:51 2014 resolved conflicts for merge of 342097db to lmp-dev-plus-aosp Change-Id: I853c6b0d3725dafbdc84c4d6d6d1b90529bd949d commit 7724204abf4431d35787c44c4a22cda5489d4e37 Merge: 20f60ac afb3403 Author: Kenny Root Date: Tue Aug 26 00:09:27 2014 +0000 am afb34034: Implement write socket timeouts for unbundled apps * commit afb340348bfc54dbc46964e159fe803f9c93a4dd: Implement write socket timeouts for unbundled apps commit f67d784abe5cef700240be02c68cecd899cd8e6d Author: Kenny Root Date: Wed Aug 20 14:14:26 2014 Add pre-Honeycomb literal IP matching This will allow us to run this code on Gingerbread devices and others that dont have the InetAddress#isNumeric API. Bug: 16658420 Bug: 17059757 Change-Id: I597d539979d58eeaa2677d6f99e911313a550cc1 commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb Author: Kenny Root Date: Mon Aug 18 10:12:20 2014 Read property to enable SNI Read the system property ""jsse.enableSNIExtension"" on whether to enable Server Name Indication (SNI) extension. For unbundled builds, this will be enabled by default. For platform builds, this will be disabled by default. Bug: 16658420 Bug: 17059757 Change-Id: I774f5406bf3fe601a42c4ef5e708b31800147eb9 commit 342097db97a9b2736531033b2c4b4d8ce4998c67 Author: Kenny Root Date: Wed Aug 20 12:14:52 2014 Validate hostname is usable for SNI According to RFC 6066 section 3, the hostname listed in the Server Name Indication (SNI) field is a fully qualified domain name and IP addresses are not permitted. Bug: 16658420 Bug: 17059757 Change-Id: I804e46b6e66599b2770f0f4f0534467987e51208 commit afb340348bfc54dbc46964e159fe803f9c93a4dd Author: Kenny Root Date: Tue Aug 19 16:33:07 2014 Implement write socket timeouts for unbundled apps Change-Id: I4fd604f057ba4288d4f31bf6b3b93307376023d5 commit 20f60acea153dfdf0c8f75a53d7bd9edb4c7614c Author: Kenny Root Date: Mon Aug 25 11:52:05 2014 Tracking change from AOSP Change-Id: I889af3f7c1de9ef34d9328339e1b421651055ad4 commit 68056b7c9db8a9fb384bbadfc5287730f996896d Merge: 8239dfd cc2ef2e Author: Kenny Root Date: Mon Aug 25 18:03:27 2014 +0000 am cc2ef2e2: Rename hostname fields and methods to reflect usage * commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e: Rename hostname fields and methods to reflect usage commit 8239dfdcc40a69255d7b2feced960d574ea36321 Merge: e9cf759 076138f Author: Kenny Root Date: Thu Aug 21 16:36:24 2014 +0000 am 076138ff: Use consistent naming for SSLSocket arguments * commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11: Use consistent naming for SSLSocket arguments commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e Author: Kenny Root Date: Wed Aug 20 11:26:33 2014 Rename hostname fields and methods to reflect usage The hostname that was supplied when the socket was created is stored as the ""peerHostname"" This is the only one that should be used for Server Name Indication (SNI) purposes. The ""peerHostname"" or the resolved IP address may be used for certificate validation, so keep the use of ""getHostname()"" for cerificate validation. Bug: 16658420 Bug: 17059757 Change-Id: Ifd87dead44fb2f00bbfd5eac7e69fb3fc98e94b4 commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11 Author: Kenny Root Date: Wed Aug 20 11:24:41 2014 Use consistent naming for SSLSocket arguments This changes all the host to be hostname and anything that takes an InetAddress will have the name of address to avoid confusing it with a hostname. Bug: 16658420 Bug: 17059757 Change-Id: Iac0628d2d156023dbb80c2e636af6bfe63f46650 commit e9cf759ac89fb053c01f1db19931beb14a823618 Merge: ababdd1 7ed0fae Author: Kenny Root Date: Tue Aug 19 19:32:43 2014 +0000 am 7ed0fae1: OpenSSLEngineImpl: reduce number of copies needed * commit 7ed0fae1906061766d0042e69ccba20e4a702bbe: OpenSSLEngineImpl: reduce number of copies needed commit 7ed0fae1906061766d0042e69ccba20e4a702bbe Author: Kenny Root Date: Tue Jul 22 13:03:09 2014 OpenSSLEngineImpl: reduce number of copies needed When the ByteBuffer didnt line up exactly with the backing array, it would allocate a new buffer to write into. Instead, add the ability for OpenSSL to read at an offset in the given array so a copy isnt needed. Change-Id: I149d3f94e4b5cbdc010df80439ae3300cbdc87a5 commit ababdd1ae1272eac174e3a449a413ab35afbc435 Merge: 66c31e0 4b050b6 Author: Kenny Root Date: Fri Aug 15 16:23:14 2014 +0000 am 4b050b6f: OpenSSLSocketImpl: Move state checks inside mutex * commit 4b050b6fb06fbb804557eecc72cc4ff0e0277525: OpenSSLSocketImpl: Move state checks inside mutex commit 66c31e0b613ceefc167a2e1fb226a14c78f84537 Merge: f4b895a 0931d51 Author: Kenny Root Date: Thu Aug 14 20:46:43 2014 +0000 am 0931d51c: OpenSSLSocketImpl: Move state checks inside mutex * commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706: OpenSSLSocketImpl: Move state checks inside mutex commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706 Author: Kenny Root Date: Tue Aug 5 15:45:32 2014 OpenSSLSocketImpl: Move state checks inside mutex Checking the state of the connection is unreliable if SSL_read and SSL_write are happening in another thread. Move the state checks inside our application mutex so we dont run into another thread mutating the state at the same time. Bug: 15606096 Change-Id: I5ecdeb1551a13098d1b66c5e4009607c9951fa38 commit f4b895ae9c424b5c2d49c744131606adccbc49d7 Merge: a35c400 a260ee6 Author: Kenny Root Date: Wed Aug 13 15:35:28 2014 +0000 am a260ee6d: Revert ""Revert ""Automatic management of OpenSSL error stack"""" * commit a260ee6d0caea43f8010f158a4a35fb712935ae3: Revert ""Revert ""Automatic management of OpenSSL error stack"""" commit a35c40017c8690f821351d6460dfeaa2738b884c Merge: 0edc483 30550a8 Author: Kenny Root Date: Wed Aug 13 15:35:27 2014 +0000 am 30550a8b: Fix debugging with unbundled conscrypt * commit 30550a8b64bbcd6ca537680a17b8726932a29937: Fix debugging with unbundled conscrypt commit a260ee6d0caea43f8010f158a4a35fb712935ae3 Author: Kenny Root Date: Tue Aug 12 15:38:10 2014 Revert ""Revert ""Automatic management of OpenSSL error stack"""" The ""else"" statement in OpenSslError::reset wasnt properly resetting the error state which made a second call into sslRead jump into sslSelect when it should have just returned immediately. Change-Id: I22e8025c0497a04e78daa07cef78191a6ca1a70c commit 30550a8b64bbcd6ca537680a17b8726932a29937 Author: Kenny Root Date: Tue Aug 12 15:13:33 2014 Fix debugging with unbundled conscrypt When JNI_TRACE was enabled, there were missing defines for the debugging code since no platform code is included. Also clang complains about more of the debugging statement formats, so we have to move some things around to get it to be happy. Change-Id: I1a6695c2ef2639cc01cfc3d3a8603f010c659844 commit 0edc4833091846d6cb45961fc9458df842fbbad9 Merge: 107a8fb 2411b8b Author: Kenny Root Date: Tue Aug 12 21:46:12 2014 +0000 am 2411b8bd: Merge ""Revert ""Automatic management of OpenSSL error stack"""" * commit 2411b8bdcde72c956f4150e9a5909b7501f50bad: Revert ""Automatic management of OpenSSL error stack"" commit 2411b8bdcde72c956f4150e9a5909b7501f50bad Merge: 3262a8c b514d72 Author: Kenny Root Date: Tue Aug 12 21:39:32 2014 +0000 Merge ""Revert ""Automatic management of OpenSSL error stack"""" commit b514d72b93c3996d97e38eca6db1ad684965fd9b Author: Kenny Root Date: Tue Aug 12 21:39:17 2014 +0000 Revert ""Automatic management of OpenSSL error stack"" This reverts commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8. Change-Id: I926d159c4c4b99250caef750732976c1e601e9ef commit 107a8fba8be5be57933f2638b76ac1243b578b9e Merge: 1de007f 3262a8c Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am 3262a8c2: Merge ""Automatic management of OpenSSL error stack"" * commit 3262a8c2741b95103149bcdefe2409c24bfddee9: Automatic management of OpenSSL error stack commit 1de007f9f01be8f07a56235dd924c897088a03cb Merge: 94890ae d1bbcd0 Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am d1bbcd0e: Relax checks for key vs cert for wrapped keys * commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484: Relax checks for key vs cert for wrapped keys commit 3262a8c2741b95103149bcdefe2409c24bfddee9 Merge: d1bbcd0 35666e4 Author: Kenny Root Date: Tue Aug 12 15:31:02 2014 +0000 Merge ""Automatic management of OpenSSL error stack"" commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484 Author: Kenny Root Date: Mon Aug 11 14:56:58 2014 Relax checks for key vs cert for wrapped keys If a key is a wrapped platform key, we must relax the check. The reason is that we may not have the public values we need to pass the EVP_PKEY_cmp checks that this does. Change-Id: I7ab2be51b0968a9cf771edea01d33fe2367c8185 commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8 Author: Kenny Root Date: Tue Aug 5 11:05:00 2014 Automatic management of OpenSSL error stack This removes some complexity in remembering to free the OpenSSL error stack. If you forget, the error will stick around until you make another call. Change-Id: I245a525dcc93077b2bf9909a14a0ef469a2daca4 commit 94890aec5735cde2ea5170fb76cd1b847ea66af8 Merge: 8360485 977f087 Author: Kenny Root Date: Tue Aug 5 16:44:42 2014 +0000 am 977f0877: Fix some JNI_TRACE lines * commit 977f08774c628b4640d5454cde050259856965f8: Fix some JNI_TRACE lines commit 977f08774c628b4640d5454cde050259856965f8 Author: Kenny Root Date: Mon Aug 4 12:15:04 2014 Fix some JNI_TRACE lines During debugging these would be enabled, but they were copy-pastad to with the wrong args. Change-Id: I23f39ff4807e3fa71f3220912aec3c99db6b9454 commit 83604854c5160304cafefc9bd40a72c5ee8506eb Merge: 7db3524 1ffe43e Author: Zoltan Szatmary-Ban Date: Thu Jul 31 13:28:57 2014 +0000 am 1ffe43e8: Merge ""Add possibility to get deleted system Certificate Aliases"" into lmp-dev * commit 1ffe43e8277e883c6663c1fb7cfc5e18ba552c40: Add possibility to get deleted system Certificate Aliases commit 7db3524880092126962b7f502af76b4c84da7350 Merge: 5767d63 ad0cd83 Author: Prameet Shah Date: Wed Jul 30 17:04:13 2014 +0000 am ad0cd830: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit ad0cd83024f38011043d28d70370a8638b88cd72: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 5767d63d22e87becab387b3bd6597fe41eb34d7e Merge: b389e17 26163c2 Author: Prameet Shah Date: Wed Jul 30 16:31:08 2014 +0000 am 26163c26: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit 26163c268a6d2625384b87e907afad8ef19f9a47: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 26163c268a6d2625384b87e907afad8ef19f9a47 Author: Prameet Shah Date: Tue Jul 29 16:45:31 2014 Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() Bug: Change-Id: I5bcaf3ee8910ff75e785baed4c4604fee6c5e700 commit b389e1779651f2c58454a5f98acebd3dd7bc0061 Merge: 5f03b4d e427972 Author: Prameet Shah Date: Thu Jul 24 19:46:28 2014 +0000 am e427972e: OpenSSLEngineImpl: fix unwrap behavior with array * commit e427972eb6141cd67e6d4c9607863a8d990e6be6: OpenSSLEngineImpl: fix unwrap behavior with array commit 5f03b4d63c7632581b032879de791dc82f05ffa0 Merge: 3d935ee 41eb5b6 Author: Prameet Shah Date: Tue Jul 22 19:26:41 2014 +0000 am 41eb5b65: OpenSSLEngineImpl: fix unwrap behavior with array * commit 41eb5b65e524d01e28da474bd37e4349b12fb494: OpenSSLEngineImpl: fix unwrap behavior with array commit 41eb5b65e524d01e28da474bd37e4349b12fb494 Author: Prameet Shah Date: Tue Jul 22 11:50:18 2014 OpenSSLEngineImpl: fix unwrap behavior with array The decrypted bytes should written sequentially into each buffer of the destination array until its full before moving to the next buffer. Change-Id: I2454249c167deafde6c12134d3c8cd658cd7c21b commit 3d935eeca25e00b56cfd8d37a657c7b2986889b3 Merge: 0a36f6c affd45a Author: Alex Klyubin Date: Fri Jul 18 00:32:14 2014 +0000 am affd45a4: Merge ""Improve the Javadoc of PSKKeyManager."" into lmp-dev * commit affd45a413cf844dad797ad4972074efb9de43d8: Improve the Javadoc of PSKKeyManager. commit 0a36f6c1f8b2e195c2dd5aea1a386df090c6d470 Merge: 6492180 af4fa68 Author: rich cannings Date: Thu Jul 17 23:47:33 2014 +0000 am af4fa685: Merge ""Log CCS exceptions do not merge."" into lmp-dev * commit af4fa685f246aaa80c93af62faadbc2fe87dc034: Log CCS exceptions do not merge. commit 6492180ce17a3b5ff822cff1783f00e7a4176491 Merge: aac4168 3b7268c Author: Alex Klyubin Date: Thu Jul 17 18:27:39 2014 +0000 am 3b7268cd: Merge ""Improve the Javadoc of PSKKeyManager."" * commit 3b7268cde4a4fc59591da8a93691927ebf3add57: Improve the Javadoc of PSKKeyManager. commit aac4168d8baef7e12d6fa959c6d6ded9892e9651 Merge: 8573ad0 a749c0d Author: Kenny Root Date: Thu Jul 17 17:07:05 2014 +0000 am a749c0d3: Keep enough state to completely reset cipher instances * commit a749c0d351216be38879600ee8ed01c6793aa256: Keep enough state to completely reset cipher instances commit 8573ad0ddcf7e2f8b2e5ac84c34b7ffab303155c Merge: 4ca5b06 70fdb6d Author: Koushik Dutta Date: Thu Jul 17 17:06:36 2014 +0000 am 70fdb6d2: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit 70fdb6d2bfa0c313fe389827f0025288f6aeb947: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit 4ca5b0625e3f5a15ae8adf833ab5a69f9d7d517f Merge: 119abfb ded66f5 Author: Koushik Dutta Date: Thu Jul 17 17:06:35 2014 +0000 am ded66f5f: Various fixes in OpenSSLEngineImpl. * commit ded66f5f696994ce7620552e16a4e9124e69e052: Various fixes in OpenSSLEngineImpl. commit 119abfba1fcd9c9cfbd15d0a4ca9ed2188fdfab0 Merge: 5713cdf cbe1f28 Author: Kenny Root Date: Thu Jul 17 15:56:57 2014 +0000 am cbe1f28a: Merge ""Keep enough state to completely reset cipher instances"" * commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae: Keep enough state to completely reset cipher instances commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae Merge: e08f238 084e308 Author: Kenny Root Date: Thu Jul 17 15:48:58 2014 +0000 Merge ""Keep enough state to completely reset cipher instances"" commit 3b7268cde4a4fc59591da8a93691927ebf3add57 Merge: cbe1f28 7ac13e0 Author: Alex Klyubin Date: Thu Jul 17 18:20:43 2014 +0000 Merge ""Improve the Javadoc of PSKKeyManager."" commit 5713cdf71c5c6e5179e8369263c702e9512afdd0 Merge: cf55719 e08f238 Author: Koushik Dutta Date: Wed Jul 16 22:05:17 2014 +0000 am e08f2385: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit e08f238580e8ee471012bef8240c8d3397c7b780: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit cf557195a9b60d7f51a48500afde38481ddbc91c Merge: cbbd7d1 986aeb7 Author: Kenny Root Date: Wed Jul 16 21:41:12 2014 +0000 am 986aeb78: Merge ""Various fixes in OpenSSLEngineImpl."" * commit 986aeb78e533540463daf1753e24840f75b25ce6: Various fixes in OpenSSLEngineImpl. commit e08f238580e8ee471012bef8240c8d3397c7b780 Author: Koushik Dutta Date: Tue Jul 15 22:40:23 2014 OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. Change-Id: Idc78204b7077fb367b64e1867c807cd39f596f98 commit 7ac13e03a79d0c99d181b1a28b1b3699ba3d5739 Author: Alex Klyubin Date: Wed Jul 16 08:33:02 2014 Improve the Javadoc of PSKKeyManager. This clarifies several points and adds sample code. Bug: 15073623 Change-Id: I6e8aadc52277e238a998d6cee36795dab1151d58 commit 986aeb78e533540463daf1753e24840f75b25ce6 Merge: 8f9ac1a bdfcc18 Author: Kenny Root Date: Wed Jul 16 21:15:30 2014 +0000 Merge ""Various fixes in OpenSSLEngineImpl."" commit bdfcc189efe41a3f812aeb55ea634bace67d159a Author: Koushik Dutta Date: Sat Jun 28 19:19:21 2014 Various fixes in OpenSSLEngineImpl. Fix ""Buffers were not large enough"" exception by directly using the destination buffers. Corrections around bytesProduced and bytesConsumed behavior. Return BUFFER_OVERFLOW if a zero length destination is provided to unwrap. Change-Id: I1f1e9b72cd6968ed4f3c3c0edccbccebc33d6790 commit cbbd7d10e8e484c44a78e5b27e8fecda195f1692 Merge: ec7f8e6 fdb7d8c Author: Alex Klyubin Date: Tue Jul 15 18:49:14 2014 +0000 am fdb7d8c5: Enable PSK cipher suites when PSKKeyManager is provided. * commit fdb7d8c53dabac5551e2499d045ba6829bcfc0a0: Enable PSK cipher suites when PSKKeyManager is provided. commit ec7f8e6b27330160f88540f4f2ace7bc2a0720a3 Merge: 5b8ccf1 8f9ac1a Author: Alex Klyubin Date: Tue Jul 15 15:53:46 2014 +0000 am 8f9ac1af: Enable PSK cipher suites when PSKKeyManager is provided. * commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17: Enable PSK cipher suites when PSKKeyManager is provided. commit 5b8ccf1b09df6f35c1709bfc8fd727a291094a5b Merge: 69a2e46 6e2315f Author: Ed Heyl Date: Tue Jul 15 13:34:25 2014 +0000 am 6e2315fd: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. * commit 6e2315fd96c3c4a47450c1a437babacc94bc31a6: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. commit 084e3086be1d7a6b9280b64c7c8cdb7b41a13bea Author: Kenny Root Date: Mon Jul 14 13:25:32 2014 Keep enough state to completely reset cipher instances OpenSSLs RC4 mutates the given key. AES/CTR mutates the IV. We must store these values locally to enable ""doFinal"" to cause the Cipher instance to be reset to what it was right after ""init"". Note that resetting and encrypting with the same key or IV breaks semantic security. Bug: 16298401 Bug: Change-Id: Ie7e4dcb6cf6cc33ddad31d6b47066dc1b34e6894 commit 69a2e460cc0a40e1b951e400589b9932609079ec Merge: 8b7bb32 bca895f Author: David Benjamin Date: Mon Jul 14 18:17:28 2014 +0000 am bca895f8: Pass output buffer length into EVP_DigestSignFinal. * commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d: Pass output buffer length into EVP_DigestSignFinal. commit 8b7bb32af09a01e80442b70dd23e6997a937f103 Merge: a2404c9 e79c25b Author: Kenny Root Date: Mon Jul 14 18:17:28 2014 +0000 am e79c25bf: Merge ""DHKeyPairGenerator: use provided params"" * commit e79c25bf33e10da41e489c537823f678e1a1169c: DHKeyPairGenerator: use provided params commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17 Author: Alex Klyubin Date: Thu Jun 19 13:37:24 2014 Enable PSK cipher suites when PSKKeyManager is provided. This enables TLS-PSK cipher suites by default iff SSLContext is initialized with a PSKKeyManager. For consistency, X.509 based cipher suites are no longer enabled by default at all times they are now only enabled by default iff SSLContext is initialized with a X509KeyManager or a X509TrustManager. When both X.509 and PSK cipher suites need to be enabled, PSK cipher suites are given higher priority in the resulting list of cipher suites. This is based on the assumption that in most cases users of TLS/SSL who enable TLS-PSK would prefer TLS-PSK to be used when the peer supports TLS-PSK. Bug: 15073623 Change-Id: I8e2bc3e7a1ea8a986e468973b6bad19dc6b7bc3c commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d Author: David Benjamin Date: Thu Jul 10 18:12:08 2014 Pass output buffer length into EVP_DigestSignFinal. EVP_DigestSignFinal expects the input buffer length as *siglen on input. In addition, if sigret is NULL, it returns the buffer size needed. Use this rather than making assumptions about the EVP_PKEY used to initialize the EVP_MD_CTX. commit e79c25bf33e10da41e489c537823f678e1a1169c Merge: a328492 9b226f9 Author: Kenny Root Date: Fri Jul 11 16:46:23 2014 +0000 Merge ""DHKeyPairGenerator: use provided params"" commit 9b226f90a992a4a2267b7a813e3b869851945c4d Author: Kenny Root Date: Thu Jul 10 14:50:48 2014 DHKeyPairGenerator: use provided params If the prime is provided in the DHParameterSpec, then use it to generate the key. Bug: 16188130 Change-Id: I42de02c71a58d691ef7ba6e2252367105687b758 Bug: 18388980 Change-Id: I853b02a32db113a5af3f6166e7d61fab58c3ff73/"
,,0.1236,conscrypt,"Remove Conscrypt support for DSA BoringSSL removes support for DSA, so theres no point in maintaining this now. There have been virtually zero SSL certificates issued using DSA for many years as well. Change-Id: Id940643b85ba39b03038aabc6da9ec0285db66c4/"
,,0.1184,conscrypt,"Convert EVP_MD_CTX to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. Bug: 16656908 Change-Id: I165e041a8fe056770d6ce6d6cd064c411575b7c4/"
,,0.1449,conscrypt,"Convert EC_GROUP and EC_POINT to new style Bug: 16656908 Change-Id: Ie912f376f69327ce634cac50763bf86b418049f5/Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/"
,,0.1479,conscrypt,"Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/"
,,0.1216,conscrypt,"Remove Conscrypt support for DSA BoringSSL removes support for DSA, so theres no point in maintaining this now. There have been virtually zero SSL certificates issued using DSA for many years as well. Change-Id: Id940643b85ba39b03038aabc6da9ec0285db66c4/"
,,0.1729,conscrypt,Time out TLS/SSL sessions after 8 hours by default. Prior to this change TLS/SSL sessions did not time out. (cherry picked from commit e5992c842c07c472f7ea3efbcc7f133fcc022592) Bug: 18369043 Bug: 18370076 Change-Id: I596423b9c56bfc5f337a17aba02fbb9a9f2ded36/Time out TLS/SSL sessions after 8 hours by default. Prior to this change TLS/SSL sessions did not time out. Bug: 18370076 Change-Id: I596423b9c56bfc5f337a17aba02fbb9a9f2ded36/
,,0.9207,conscrypt,"Remove Conscrypt support for DSA BoringSSL removes support for DSA, so theres no point in maintaining this now. There have been virtually zero SSL certificates issued using DSA for many years as well. Change-Id: Id940643b85ba39b03038aabc6da9ec0285db66c4/Squashed commit of changes from lmp-ub-dev Contains the following changes: commit e31d982cdb0f8e6ef05d1e412576888015e1da17 Merge: eaebc54 b73be72 Author: Neil Fuller Date: Wed Oct 22 10:34:23 2014 +0000 am b73be72e: am 3e21a289: (-s ours) TLS_FALLBACK_SCSV CTS fix for klp-modular-dev * commit b73be72ed97da8f36450d95d52f485cc6f451c61: TLS_FALLBACK_SCSV CTS fix for klp-modular-dev commit eaebc544f3a10c53d7d2f908514122caba569e14 Merge: 223b5da cd50afa Author: Kenny Root Date: Tue Oct 14 17:30:19 2014 +0000 Merge ""Fix SSLEngine to support session resumption."" into lmp-ub-dev commit 223b5da5d70e47b1a497e86474493925b568f6d7 Merge: 8737796 cb7a360 Author: Neil Fuller Date: Thu Oct 9 14:52:00 2014 +0000 am cb7a3605: am ea961ada: Apply conscrypt changes from merge commit * commit cb7a36050f34d3c16be00d532411820761eeb276: Apply conscrypt changes from merge commit commit cd50afad1567b1311e6e979e94a7167b7bf69c94 Author: Doug Steedman Date: Mon Oct 6 13:16:15 2014 Fix SSLEngine to support session resumption. Bug: 17877118 Change-Id: I388b59cde58fdc506ecac9f536e4bbd9161df6ad commit 8737796a646eaec94df32827752a71aee74bd46f Merge: 9564a5f 8d7e23e Author: Kenny Root Date: Mon Oct 6 22:34:20 2014 +0000 am 8d7e23e1: Add support for TLS_FALLBACK_SCSV * commit 8d7e23e117da591a8d48e6bcda9ed6f58ff1a375: Add support for TLS_FALLBACK_SCSV commit 9564a5fb9ed2eecf6299788db35213cb08397212 Merge: 4f58feb 7640613 Author: Kenny Root Date: Fri Sep 12 17:27:23 2014 +0000 am 76406135: am 6dcb23fe: am f427ec90: Fix the ENGINE_finish/ENGINE_free mixup * commit 76406135cf3a3b88afc979fe8e847b9c3d8b93c1: Fix the ENGINE_finish/ENGINE_free mixup commit 4f58feb0ea49dc089a95efba196032ef3c960a39 Merge: ddac5c6 984b7ec Author: Kenny Root Date: Wed Sep 10 07:07:16 2014 +0000 am 984b7ec6: Fix the ENGINE_finish/ENGINE_free mixup * commit 984b7ec6f5aab314117949a48e448ff4f6b65f16: Fix the ENGINE_finish/ENGINE_free mixup commit ddac5c6d7e413b0d68b388fbdf70dbeb3eeae865 Merge: 5a8ca5b 36ba60b Author: Kenny Root Date: Thu Sep 4 22:41:38 2014 +0000 Merge ""Reset lmp-ub-dev to lmp-dev-plus-aosp"" into lmp-ub-dev commit 36ba60b039f1f30ab1ea8f0e2a4da8ae4e3906e5 Author: Kenny Root Date: Wed Aug 27 12:07:07 2014 Reset lmp-ub-dev to lmp-dev-plus-aosp Bug: 17059757 Change-Id: I581963360da47b574e1e2e20c2851485c36fa62c commit 6a4f2ef9e4ea3ebb321d45ca39b30d634ea3b4ad Merge: 9b187af f67d784 Author: Kenny Root Date: Tue Aug 26 04:17:38 2014 +0000 am f67d784a: Add pre-Honeycomb literal IP matching * commit f67d784abe5cef700240be02c68cecd899cd8e6d: Add pre-Honeycomb literal IP matching commit 9b187af33dcd97915a0371d64fe1ee4aba20d0ba Merge: 714ebea 966ae8a Author: Kenny Root Date: Tue Aug 26 04:17:37 2014 +0000 am 966ae8a6: Read property to enable SNI * commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb: Read property to enable SNI commit 714ebeabcb5e35c6df6a5c21f549cdb6130368c4 Merge: 7724204 54a1ba4 Author: Kenny Root Date: Tue Aug 26 04:06:54 2014 +0000 Merge ""resolved conflicts for merge of 342097db to lmp-dev-plus-aosp"" into lmp-dev-plus-aosp commit 54a1ba421d23bb6d988688c2662715e509172447 Merge: a20d871 342097d Author: Kenny Root Date: Mon Aug 25 21:03:51 2014 resolved conflicts for merge of 342097db to lmp-dev-plus-aosp Change-Id: I853c6b0d3725dafbdc84c4d6d6d1b90529bd949d commit 7724204abf4431d35787c44c4a22cda5489d4e37 Merge: 20f60ac afb3403 Author: Kenny Root Date: Tue Aug 26 00:09:27 2014 +0000 am afb34034: Implement write socket timeouts for unbundled apps * commit afb340348bfc54dbc46964e159fe803f9c93a4dd: Implement write socket timeouts for unbundled apps commit f67d784abe5cef700240be02c68cecd899cd8e6d Author: Kenny Root Date: Wed Aug 20 14:14:26 2014 Add pre-Honeycomb literal IP matching This will allow us to run this code on Gingerbread devices and others that dont have the InetAddress#isNumeric API. Bug: 16658420 Bug: 17059757 Change-Id: I597d539979d58eeaa2677d6f99e911313a550cc1 commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb Author: Kenny Root Date: Mon Aug 18 10:12:20 2014 Read property to enable SNI Read the system property ""jsse.enableSNIExtension"" on whether to enable Server Name Indication (SNI) extension. For unbundled builds, this will be enabled by default. For platform builds, this will be disabled by default. Bug: 16658420 Bug: 17059757 Change-Id: I774f5406bf3fe601a42c4ef5e708b31800147eb9 commit 342097db97a9b2736531033b2c4b4d8ce4998c67 Author: Kenny Root Date: Wed Aug 20 12:14:52 2014 Validate hostname is usable for SNI According to RFC 6066 section 3, the hostname listed in the Server Name Indication (SNI) field is a fully qualified domain name and IP addresses are not permitted. Bug: 16658420 Bug: 17059757 Change-Id: I804e46b6e66599b2770f0f4f0534467987e51208 commit afb340348bfc54dbc46964e159fe803f9c93a4dd Author: Kenny Root Date: Tue Aug 19 16:33:07 2014 Implement write socket timeouts for unbundled apps Change-Id: I4fd604f057ba4288d4f31bf6b3b93307376023d5 commit 20f60acea153dfdf0c8f75a53d7bd9edb4c7614c Author: Kenny Root Date: Mon Aug 25 11:52:05 2014 Tracking change from AOSP Change-Id: I889af3f7c1de9ef34d9328339e1b421651055ad4 commit 68056b7c9db8a9fb384bbadfc5287730f996896d Merge: 8239dfd cc2ef2e Author: Kenny Root Date: Mon Aug 25 18:03:27 2014 +0000 am cc2ef2e2: Rename hostname fields and methods to reflect usage * commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e: Rename hostname fields and methods to reflect usage commit 8239dfdcc40a69255d7b2feced960d574ea36321 Merge: e9cf759 076138f Author: Kenny Root Date: Thu Aug 21 16:36:24 2014 +0000 am 076138ff: Use consistent naming for SSLSocket arguments * commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11: Use consistent naming for SSLSocket arguments commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e Author: Kenny Root Date: Wed Aug 20 11:26:33 2014 Rename hostname fields and methods to reflect usage The hostname that was supplied when the socket was created is stored as the ""peerHostname"" This is the only one that should be used for Server Name Indication (SNI) purposes. The ""peerHostname"" or the resolved IP address may be used for certificate validation, so keep the use of ""getHostname()"" for cerificate validation. Bug: 16658420 Bug: 17059757 Change-Id: Ifd87dead44fb2f00bbfd5eac7e69fb3fc98e94b4 commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11 Author: Kenny Root Date: Wed Aug 20 11:24:41 2014 Use consistent naming for SSLSocket arguments This changes all the host to be hostname and anything that takes an InetAddress will have the name of address to avoid confusing it with a hostname. Bug: 16658420 Bug: 17059757 Change-Id: Iac0628d2d156023dbb80c2e636af6bfe63f46650 commit e9cf759ac89fb053c01f1db19931beb14a823618 Merge: ababdd1 7ed0fae Author: Kenny Root Date: Tue Aug 19 19:32:43 2014 +0000 am 7ed0fae1: OpenSSLEngineImpl: reduce number of copies needed * commit 7ed0fae1906061766d0042e69ccba20e4a702bbe: OpenSSLEngineImpl: reduce number of copies needed commit 7ed0fae1906061766d0042e69ccba20e4a702bbe Author: Kenny Root Date: Tue Jul 22 13:03:09 2014 OpenSSLEngineImpl: reduce number of copies needed When the ByteBuffer didnt line up exactly with the backing array, it would allocate a new buffer to write into. Instead, add the ability for OpenSSL to read at an offset in the given array so a copy isnt needed. Change-Id: I149d3f94e4b5cbdc010df80439ae3300cbdc87a5 commit ababdd1ae1272eac174e3a449a413ab35afbc435 Merge: 66c31e0 4b050b6 Author: Kenny Root Date: Fri Aug 15 16:23:14 2014 +0000 am 4b050b6f: OpenSSLSocketImpl: Move state checks inside mutex * commit 4b050b6fb06fbb804557eecc72cc4ff0e0277525: OpenSSLSocketImpl: Move state checks inside mutex commit 66c31e0b613ceefc167a2e1fb226a14c78f84537 Merge: f4b895a 0931d51 Author: Kenny Root Date: Thu Aug 14 20:46:43 2014 +0000 am 0931d51c: OpenSSLSocketImpl: Move state checks inside mutex * commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706: OpenSSLSocketImpl: Move state checks inside mutex commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706 Author: Kenny Root Date: Tue Aug 5 15:45:32 2014 OpenSSLSocketImpl: Move state checks inside mutex Checking the state of the connection is unreliable if SSL_read and SSL_write are happening in another thread. Move the state checks inside our application mutex so we dont run into another thread mutating the state at the same time. Bug: 15606096 Change-Id: I5ecdeb1551a13098d1b66c5e4009607c9951fa38 commit f4b895ae9c424b5c2d49c744131606adccbc49d7 Merge: a35c400 a260ee6 Author: Kenny Root Date: Wed Aug 13 15:35:28 2014 +0000 am a260ee6d: Revert ""Revert ""Automatic management of OpenSSL error stack"""" * commit a260ee6d0caea43f8010f158a4a35fb712935ae3: Revert ""Revert ""Automatic management of OpenSSL error stack"""" commit a35c40017c8690f821351d6460dfeaa2738b884c Merge: 0edc483 30550a8 Author: Kenny Root Date: Wed Aug 13 15:35:27 2014 +0000 am 30550a8b: Fix debugging with unbundled conscrypt * commit 30550a8b64bbcd6ca537680a17b8726932a29937: Fix debugging with unbundled conscrypt commit a260ee6d0caea43f8010f158a4a35fb712935ae3 Author: Kenny Root Date: Tue Aug 12 15:38:10 2014 Revert ""Revert ""Automatic management of OpenSSL error stack"""" The ""else"" statement in OpenSslError::reset wasnt properly resetting the error state which made a second call into sslRead jump into sslSelect when it should have just returned immediately. Change-Id: I22e8025c0497a04e78daa07cef78191a6ca1a70c commit 30550a8b64bbcd6ca537680a17b8726932a29937 Author: Kenny Root Date: Tue Aug 12 15:13:33 2014 Fix debugging with unbundled conscrypt When JNI_TRACE was enabled, there were missing defines for the debugging code since no platform code is included. Also clang complains about more of the debugging statement formats, so we have to move some things around to get it to be happy. Change-Id: I1a6695c2ef2639cc01cfc3d3a8603f010c659844 commit 0edc4833091846d6cb45961fc9458df842fbbad9 Merge: 107a8fb 2411b8b Author: Kenny Root Date: Tue Aug 12 21:46:12 2014 +0000 am 2411b8bd: Merge ""Revert ""Automatic management of OpenSSL error stack"""" * commit 2411b8bdcde72c956f4150e9a5909b7501f50bad: Revert ""Automatic management of OpenSSL error stack"" commit 2411b8bdcde72c956f4150e9a5909b7501f50bad Merge: 3262a8c b514d72 Author: Kenny Root Date: Tue Aug 12 21:39:32 2014 +0000 Merge ""Revert ""Automatic management of OpenSSL error stack"""" commit b514d72b93c3996d97e38eca6db1ad684965fd9b Author: Kenny Root Date: Tue Aug 12 21:39:17 2014 +0000 Revert ""Automatic management of OpenSSL error stack"" This reverts commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8. Change-Id: I926d159c4c4b99250caef750732976c1e601e9ef commit 107a8fba8be5be57933f2638b76ac1243b578b9e Merge: 1de007f 3262a8c Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am 3262a8c2: Merge ""Automatic management of OpenSSL error stack"" * commit 3262a8c2741b95103149bcdefe2409c24bfddee9: Automatic management of OpenSSL error stack commit 1de007f9f01be8f07a56235dd924c897088a03cb Merge: 94890ae d1bbcd0 Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am d1bbcd0e: Relax checks for key vs cert for wrapped keys * commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484: Relax checks for key vs cert for wrapped keys commit 3262a8c2741b95103149bcdefe2409c24bfddee9 Merge: d1bbcd0 35666e4 Author: Kenny Root Date: Tue Aug 12 15:31:02 2014 +0000 Merge ""Automatic management of OpenSSL error stack"" commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484 Author: Kenny Root Date: Mon Aug 11 14:56:58 2014 Relax checks for key vs cert for wrapped keys If a key is a wrapped platform key, we must relax the check. The reason is that we may not have the public values we need to pass the EVP_PKEY_cmp checks that this does. Change-Id: I7ab2be51b0968a9cf771edea01d33fe2367c8185 commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8 Author: Kenny Root Date: Tue Aug 5 11:05:00 2014 Automatic management of OpenSSL error stack This removes some complexity in remembering to free the OpenSSL error stack. If you forget, the error will stick around until you make another call. Change-Id: I245a525dcc93077b2bf9909a14a0ef469a2daca4 commit 94890aec5735cde2ea5170fb76cd1b847ea66af8 Merge: 8360485 977f087 Author: Kenny Root Date: Tue Aug 5 16:44:42 2014 +0000 am 977f0877: Fix some JNI_TRACE lines * commit 977f08774c628b4640d5454cde050259856965f8: Fix some JNI_TRACE lines commit 977f08774c628b4640d5454cde050259856965f8 Author: Kenny Root Date: Mon Aug 4 12:15:04 2014 Fix some JNI_TRACE lines During debugging these would be enabled, but they were copy-pastad to with the wrong args. Change-Id: I23f39ff4807e3fa71f3220912aec3c99db6b9454 commit 83604854c5160304cafefc9bd40a72c5ee8506eb Merge: 7db3524 1ffe43e Author: Zoltan Szatmary-Ban Date: Thu Jul 31 13:28:57 2014 +0000 am 1ffe43e8: Merge ""Add possibility to get deleted system Certificate Aliases"" into lmp-dev * commit 1ffe43e8277e883c6663c1fb7cfc5e18ba552c40: Add possibility to get deleted system Certificate Aliases commit 7db3524880092126962b7f502af76b4c84da7350 Merge: 5767d63 ad0cd83 Author: Prameet Shah Date: Wed Jul 30 17:04:13 2014 +0000 am ad0cd830: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit ad0cd83024f38011043d28d70370a8638b88cd72: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 5767d63d22e87becab387b3bd6597fe41eb34d7e Merge: b389e17 26163c2 Author: Prameet Shah Date: Wed Jul 30 16:31:08 2014 +0000 am 26163c26: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit 26163c268a6d2625384b87e907afad8ef19f9a47: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 26163c268a6d2625384b87e907afad8ef19f9a47 Author: Prameet Shah Date: Tue Jul 29 16:45:31 2014 Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() Bug: Change-Id: I5bcaf3ee8910ff75e785baed4c4604fee6c5e700 commit b389e1779651f2c58454a5f98acebd3dd7bc0061 Merge: 5f03b4d e427972 Author: Prameet Shah Date: Thu Jul 24 19:46:28 2014 +0000 am e427972e: OpenSSLEngineImpl: fix unwrap behavior with array * commit e427972eb6141cd67e6d4c9607863a8d990e6be6: OpenSSLEngineImpl: fix unwrap behavior with array commit 5f03b4d63c7632581b032879de791dc82f05ffa0 Merge: 3d935ee 41eb5b6 Author: Prameet Shah Date: Tue Jul 22 19:26:41 2014 +0000 am 41eb5b65: OpenSSLEngineImpl: fix unwrap behavior with array * commit 41eb5b65e524d01e28da474bd37e4349b12fb494: OpenSSLEngineImpl: fix unwrap behavior with array commit 41eb5b65e524d01e28da474bd37e4349b12fb494 Author: Prameet Shah Date: Tue Jul 22 11:50:18 2014 OpenSSLEngineImpl: fix unwrap behavior with array The decrypted bytes should written sequentially into each buffer of the destination array until its full before moving to the next buffer. Change-Id: I2454249c167deafde6c12134d3c8cd658cd7c21b commit 3d935eeca25e00b56cfd8d37a657c7b2986889b3 Merge: 0a36f6c affd45a Author: Alex Klyubin Date: Fri Jul 18 00:32:14 2014 +0000 am affd45a4: Merge ""Improve the Javadoc of PSKKeyManager."" into lmp-dev * commit affd45a413cf844dad797ad4972074efb9de43d8: Improve the Javadoc of PSKKeyManager. commit 0a36f6c1f8b2e195c2dd5aea1a386df090c6d470 Merge: 6492180 af4fa68 Author: rich cannings Date: Thu Jul 17 23:47:33 2014 +0000 am af4fa685: Merge ""Log CCS exceptions do not merge."" into lmp-dev * commit af4fa685f246aaa80c93af62faadbc2fe87dc034: Log CCS exceptions do not merge. commit 6492180ce17a3b5ff822cff1783f00e7a4176491 Merge: aac4168 3b7268c Author: Alex Klyubin Date: Thu Jul 17 18:27:39 2014 +0000 am 3b7268cd: Merge ""Improve the Javadoc of PSKKeyManager."" * commit 3b7268cde4a4fc59591da8a93691927ebf3add57: Improve the Javadoc of PSKKeyManager. commit aac4168d8baef7e12d6fa959c6d6ded9892e9651 Merge: 8573ad0 a749c0d Author: Kenny Root Date: Thu Jul 17 17:07:05 2014 +0000 am a749c0d3: Keep enough state to completely reset cipher instances * commit a749c0d351216be38879600ee8ed01c6793aa256: Keep enough state to completely reset cipher instances commit 8573ad0ddcf7e2f8b2e5ac84c34b7ffab303155c Merge: 4ca5b06 70fdb6d Author: Koushik Dutta Date: Thu Jul 17 17:06:36 2014 +0000 am 70fdb6d2: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit 70fdb6d2bfa0c313fe389827f0025288f6aeb947: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit 4ca5b0625e3f5a15ae8adf833ab5a69f9d7d517f Merge: 119abfb ded66f5 Author: Koushik Dutta Date: Thu Jul 17 17:06:35 2014 +0000 am ded66f5f: Various fixes in OpenSSLEngineImpl. * commit ded66f5f696994ce7620552e16a4e9124e69e052: Various fixes in OpenSSLEngineImpl. commit 119abfba1fcd9c9cfbd15d0a4ca9ed2188fdfab0 Merge: 5713cdf cbe1f28 Author: Kenny Root Date: Thu Jul 17 15:56:57 2014 +0000 am cbe1f28a: Merge ""Keep enough state to completely reset cipher instances"" * commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae: Keep enough state to completely reset cipher instances commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae Merge: e08f238 084e308 Author: Kenny Root Date: Thu Jul 17 15:48:58 2014 +0000 Merge ""Keep enough state to completely reset cipher instances"" commit 3b7268cde4a4fc59591da8a93691927ebf3add57 Merge: cbe1f28 7ac13e0 Author: Alex Klyubin Date: Thu Jul 17 18:20:43 2014 +0000 Merge ""Improve the Javadoc of PSKKeyManager."" commit 5713cdf71c5c6e5179e8369263c702e9512afdd0 Merge: cf55719 e08f238 Author: Koushik Dutta Date: Wed Jul 16 22:05:17 2014 +0000 am e08f2385: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit e08f238580e8ee471012bef8240c8d3397c7b780: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit cf557195a9b60d7f51a48500afde38481ddbc91c Merge: cbbd7d1 986aeb7 Author: Kenny Root Date: Wed Jul 16 21:41:12 2014 +0000 am 986aeb78: Merge ""Various fixes in OpenSSLEngineImpl."" * commit 986aeb78e533540463daf1753e24840f75b25ce6: Various fixes in OpenSSLEngineImpl. commit e08f238580e8ee471012bef8240c8d3397c7b780 Author: Koushik Dutta Date: Tue Jul 15 22:40:23 2014 OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. Change-Id: Idc78204b7077fb367b64e1867c807cd39f596f98 commit 7ac13e03a79d0c99d181b1a28b1b3699ba3d5739 Author: Alex Klyubin Date: Wed Jul 16 08:33:02 2014 Improve the Javadoc of PSKKeyManager. This clarifies several points and adds sample code. Bug: 15073623 Change-Id: I6e8aadc52277e238a998d6cee36795dab1151d58 commit 986aeb78e533540463daf1753e24840f75b25ce6 Merge: 8f9ac1a bdfcc18 Author: Kenny Root Date: Wed Jul 16 21:15:30 2014 +0000 Merge ""Various fixes in OpenSSLEngineImpl."" commit bdfcc189efe41a3f812aeb55ea634bace67d159a Author: Koushik Dutta Date: Sat Jun 28 19:19:21 2014 Various fixes in OpenSSLEngineImpl. Fix ""Buffers were not large enough"" exception by directly using the destination buffers. Corrections around bytesProduced and bytesConsumed behavior. Return BUFFER_OVERFLOW if a zero length destination is provided to unwrap. Change-Id: I1f1e9b72cd6968ed4f3c3c0edccbccebc33d6790 commit cbbd7d10e8e484c44a78e5b27e8fecda195f1692 Merge: ec7f8e6 fdb7d8c Author: Alex Klyubin Date: Tue Jul 15 18:49:14 2014 +0000 am fdb7d8c5: Enable PSK cipher suites when PSKKeyManager is provided. * commit fdb7d8c53dabac5551e2499d045ba6829bcfc0a0: Enable PSK cipher suites when PSKKeyManager is provided. commit ec7f8e6b27330160f88540f4f2ace7bc2a0720a3 Merge: 5b8ccf1 8f9ac1a Author: Alex Klyubin Date: Tue Jul 15 15:53:46 2014 +0000 am 8f9ac1af: Enable PSK cipher suites when PSKKeyManager is provided. * commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17: Enable PSK cipher suites when PSKKeyManager is provided. commit 5b8ccf1b09df6f35c1709bfc8fd727a291094a5b Merge: 69a2e46 6e2315f Author: Ed Heyl Date: Tue Jul 15 13:34:25 2014 +0000 am 6e2315fd: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. * commit 6e2315fd96c3c4a47450c1a437babacc94bc31a6: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. commit 084e3086be1d7a6b9280b64c7c8cdb7b41a13bea Author: Kenny Root Date: Mon Jul 14 13:25:32 2014 Keep enough state to completely reset cipher instances OpenSSLs RC4 mutates the given key. AES/CTR mutates the IV. We must store these values locally to enable ""doFinal"" to cause the Cipher instance to be reset to what it was right after ""init"". Note that resetting and encrypting with the same key or IV breaks semantic security. Bug: 16298401 Bug: Change-Id: Ie7e4dcb6cf6cc33ddad31d6b47066dc1b34e6894 commit 69a2e460cc0a40e1b951e400589b9932609079ec Merge: 8b7bb32 bca895f Author: David Benjamin Date: Mon Jul 14 18:17:28 2014 +0000 am bca895f8: Pass output buffer length into EVP_DigestSignFinal. * commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d: Pass output buffer length into EVP_DigestSignFinal. commit 8b7bb32af09a01e80442b70dd23e6997a937f103 Merge: a2404c9 e79c25b Author: Kenny Root Date: Mon Jul 14 18:17:28 2014 +0000 am e79c25bf: Merge ""DHKeyPairGenerator: use provided params"" * commit e79c25bf33e10da41e489c537823f678e1a1169c: DHKeyPairGenerator: use provided params commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17 Author: Alex Klyubin Date: Thu Jun 19 13:37:24 2014 Enable PSK cipher suites when PSKKeyManager is provided. This enables TLS-PSK cipher suites by default iff SSLContext is initialized with a PSKKeyManager. For consistency, X.509 based cipher suites are no longer enabled by default at all times they are now only enabled by default iff SSLContext is initialized with a X509KeyManager or a X509TrustManager. When both X.509 and PSK cipher suites need to be enabled, PSK cipher suites are given higher priority in the resulting list of cipher suites. This is based on the assumption that in most cases users of TLS/SSL who enable TLS-PSK would prefer TLS-PSK to be used when the peer supports TLS-PSK. Bug: 15073623 Change-Id: I8e2bc3e7a1ea8a986e468973b6bad19dc6b7bc3c commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d Author: David Benjamin Date: Thu Jul 10 18:12:08 2014 Pass output buffer length into EVP_DigestSignFinal. EVP_DigestSignFinal expects the input buffer length as *siglen on input. In addition, if sigret is NULL, it returns the buffer size needed. Use this rather than making assumptions about the EVP_PKEY used to initialize the EVP_MD_CTX. commit e79c25bf33e10da41e489c537823f678e1a1169c Merge: a328492 9b226f9 Author: Kenny Root Date: Fri Jul 11 16:46:23 2014 +0000 Merge ""DHKeyPairGenerator: use provided params"" commit 9b226f90a992a4a2267b7a813e3b869851945c4d Author: Kenny Root Date: Thu Jul 10 14:50:48 2014 DHKeyPairGenerator: use provided params If the prime is provided in the DHParameterSpec, then use it to generate the key. Bug: 16188130 Change-Id: I42de02c71a58d691ef7ba6e2252367105687b758 Bug: 18388980 Change-Id: I853b02a32db113a5af3f6166e7d61fab58c3ff73/"
,,0.1432,conscrypt,"Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/"
,,0.1796,conscrypt,"Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/Convert EVP_MD_CTX to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. Bug: 16656908 Change-Id: I165e041a8fe056770d6ce6d6cd064c411575b7c4/"
,,0.1526,conscrypt,"Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/"
,,0.1448,conscrypt,"Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/"
,,0.1232,conscrypt,"Convert EVP_MD_CTX to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. Bug: 16656908 Change-Id: I165e041a8fe056770d6ce6d6cd064c411575b7c4/"
,,0.1274,conscrypt,"Remove Conscrypt support for DSA BoringSSL removes support for DSA, so theres no point in maintaining this now. There have been virtually zero SSL certificates issued using DSA for many years as well. Change-Id: Id940643b85ba39b03038aabc6da9ec0285db66c4/"
,,0.9188,conscrypt,"Squashed commit of changes from lmp-ub-dev Contains the following changes: commit e31d982cdb0f8e6ef05d1e412576888015e1da17 Merge: eaebc54 b73be72 Author: Neil Fuller Date: Wed Oct 22 10:34:23 2014 +0000 am b73be72e: am 3e21a289: (-s ours) TLS_FALLBACK_SCSV CTS fix for klp-modular-dev * commit b73be72ed97da8f36450d95d52f485cc6f451c61: TLS_FALLBACK_SCSV CTS fix for klp-modular-dev commit eaebc544f3a10c53d7d2f908514122caba569e14 Merge: 223b5da cd50afa Author: Kenny Root Date: Tue Oct 14 17:30:19 2014 +0000 Merge ""Fix SSLEngine to support session resumption."" into lmp-ub-dev commit 223b5da5d70e47b1a497e86474493925b568f6d7 Merge: 8737796 cb7a360 Author: Neil Fuller Date: Thu Oct 9 14:52:00 2014 +0000 am cb7a3605: am ea961ada: Apply conscrypt changes from merge commit * commit cb7a36050f34d3c16be00d532411820761eeb276: Apply conscrypt changes from merge commit commit cd50afad1567b1311e6e979e94a7167b7bf69c94 Author: Doug Steedman Date: Mon Oct 6 13:16:15 2014 Fix SSLEngine to support session resumption. Bug: 17877118 Change-Id: I388b59cde58fdc506ecac9f536e4bbd9161df6ad commit 8737796a646eaec94df32827752a71aee74bd46f Merge: 9564a5f 8d7e23e Author: Kenny Root Date: Mon Oct 6 22:34:20 2014 +0000 am 8d7e23e1: Add support for TLS_FALLBACK_SCSV * commit 8d7e23e117da591a8d48e6bcda9ed6f58ff1a375: Add support for TLS_FALLBACK_SCSV commit 9564a5fb9ed2eecf6299788db35213cb08397212 Merge: 4f58feb 7640613 Author: Kenny Root Date: Fri Sep 12 17:27:23 2014 +0000 am 76406135: am 6dcb23fe: am f427ec90: Fix the ENGINE_finish/ENGINE_free mixup * commit 76406135cf3a3b88afc979fe8e847b9c3d8b93c1: Fix the ENGINE_finish/ENGINE_free mixup commit 4f58feb0ea49dc089a95efba196032ef3c960a39 Merge: ddac5c6 984b7ec Author: Kenny Root Date: Wed Sep 10 07:07:16 2014 +0000 am 984b7ec6: Fix the ENGINE_finish/ENGINE_free mixup * commit 984b7ec6f5aab314117949a48e448ff4f6b65f16: Fix the ENGINE_finish/ENGINE_free mixup commit ddac5c6d7e413b0d68b388fbdf70dbeb3eeae865 Merge: 5a8ca5b 36ba60b Author: Kenny Root Date: Thu Sep 4 22:41:38 2014 +0000 Merge ""Reset lmp-ub-dev to lmp-dev-plus-aosp"" into lmp-ub-dev commit 36ba60b039f1f30ab1ea8f0e2a4da8ae4e3906e5 Author: Kenny Root Date: Wed Aug 27 12:07:07 2014 Reset lmp-ub-dev to lmp-dev-plus-aosp Bug: 17059757 Change-Id: I581963360da47b574e1e2e20c2851485c36fa62c commit 6a4f2ef9e4ea3ebb321d45ca39b30d634ea3b4ad Merge: 9b187af f67d784 Author: Kenny Root Date: Tue Aug 26 04:17:38 2014 +0000 am f67d784a: Add pre-Honeycomb literal IP matching * commit f67d784abe5cef700240be02c68cecd899cd8e6d: Add pre-Honeycomb literal IP matching commit 9b187af33dcd97915a0371d64fe1ee4aba20d0ba Merge: 714ebea 966ae8a Author: Kenny Root Date: Tue Aug 26 04:17:37 2014 +0000 am 966ae8a6: Read property to enable SNI * commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb: Read property to enable SNI commit 714ebeabcb5e35c6df6a5c21f549cdb6130368c4 Merge: 7724204 54a1ba4 Author: Kenny Root Date: Tue Aug 26 04:06:54 2014 +0000 Merge ""resolved conflicts for merge of 342097db to lmp-dev-plus-aosp"" into lmp-dev-plus-aosp commit 54a1ba421d23bb6d988688c2662715e509172447 Merge: a20d871 342097d Author: Kenny Root Date: Mon Aug 25 21:03:51 2014 resolved conflicts for merge of 342097db to lmp-dev-plus-aosp Change-Id: I853c6b0d3725dafbdc84c4d6d6d1b90529bd949d commit 7724204abf4431d35787c44c4a22cda5489d4e37 Merge: 20f60ac afb3403 Author: Kenny Root Date: Tue Aug 26 00:09:27 2014 +0000 am afb34034: Implement write socket timeouts for unbundled apps * commit afb340348bfc54dbc46964e159fe803f9c93a4dd: Implement write socket timeouts for unbundled apps commit f67d784abe5cef700240be02c68cecd899cd8e6d Author: Kenny Root Date: Wed Aug 20 14:14:26 2014 Add pre-Honeycomb literal IP matching This will allow us to run this code on Gingerbread devices and others that dont have the InetAddress#isNumeric API. Bug: 16658420 Bug: 17059757 Change-Id: I597d539979d58eeaa2677d6f99e911313a550cc1 commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb Author: Kenny Root Date: Mon Aug 18 10:12:20 2014 Read property to enable SNI Read the system property ""jsse.enableSNIExtension"" on whether to enable Server Name Indication (SNI) extension. For unbundled builds, this will be enabled by default. For platform builds, this will be disabled by default. Bug: 16658420 Bug: 17059757 Change-Id: I774f5406bf3fe601a42c4ef5e708b31800147eb9 commit 342097db97a9b2736531033b2c4b4d8ce4998c67 Author: Kenny Root Date: Wed Aug 20 12:14:52 2014 Validate hostname is usable for SNI According to RFC 6066 section 3, the hostname listed in the Server Name Indication (SNI) field is a fully qualified domain name and IP addresses are not permitted. Bug: 16658420 Bug: 17059757 Change-Id: I804e46b6e66599b2770f0f4f0534467987e51208 commit afb340348bfc54dbc46964e159fe803f9c93a4dd Author: Kenny Root Date: Tue Aug 19 16:33:07 2014 Implement write socket timeouts for unbundled apps Change-Id: I4fd604f057ba4288d4f31bf6b3b93307376023d5 commit 20f60acea153dfdf0c8f75a53d7bd9edb4c7614c Author: Kenny Root Date: Mon Aug 25 11:52:05 2014 Tracking change from AOSP Change-Id: I889af3f7c1de9ef34d9328339e1b421651055ad4 commit 68056b7c9db8a9fb384bbadfc5287730f996896d Merge: 8239dfd cc2ef2e Author: Kenny Root Date: Mon Aug 25 18:03:27 2014 +0000 am cc2ef2e2: Rename hostname fields and methods to reflect usage * commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e: Rename hostname fields and methods to reflect usage commit 8239dfdcc40a69255d7b2feced960d574ea36321 Merge: e9cf759 076138f Author: Kenny Root Date: Thu Aug 21 16:36:24 2014 +0000 am 076138ff: Use consistent naming for SSLSocket arguments * commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11: Use consistent naming for SSLSocket arguments commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e Author: Kenny Root Date: Wed Aug 20 11:26:33 2014 Rename hostname fields and methods to reflect usage The hostname that was supplied when the socket was created is stored as the ""peerHostname"" This is the only one that should be used for Server Name Indication (SNI) purposes. The ""peerHostname"" or the resolved IP address may be used for certificate validation, so keep the use of ""getHostname()"" for cerificate validation. Bug: 16658420 Bug: 17059757 Change-Id: Ifd87dead44fb2f00bbfd5eac7e69fb3fc98e94b4 commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11 Author: Kenny Root Date: Wed Aug 20 11:24:41 2014 Use consistent naming for SSLSocket arguments This changes all the host to be hostname and anything that takes an InetAddress will have the name of address to avoid confusing it with a hostname. Bug: 16658420 Bug: 17059757 Change-Id: Iac0628d2d156023dbb80c2e636af6bfe63f46650 commit e9cf759ac89fb053c01f1db19931beb14a823618 Merge: ababdd1 7ed0fae Author: Kenny Root Date: Tue Aug 19 19:32:43 2014 +0000 am 7ed0fae1: OpenSSLEngineImpl: reduce number of copies needed * commit 7ed0fae1906061766d0042e69ccba20e4a702bbe: OpenSSLEngineImpl: reduce number of copies needed commit 7ed0fae1906061766d0042e69ccba20e4a702bbe Author: Kenny Root Date: Tue Jul 22 13:03:09 2014 OpenSSLEngineImpl: reduce number of copies needed When the ByteBuffer didnt line up exactly with the backing array, it would allocate a new buffer to write into. Instead, add the ability for OpenSSL to read at an offset in the given array so a copy isnt needed. Change-Id: I149d3f94e4b5cbdc010df80439ae3300cbdc87a5 commit ababdd1ae1272eac174e3a449a413ab35afbc435 Merge: 66c31e0 4b050b6 Author: Kenny Root Date: Fri Aug 15 16:23:14 2014 +0000 am 4b050b6f: OpenSSLSocketImpl: Move state checks inside mutex * commit 4b050b6fb06fbb804557eecc72cc4ff0e0277525: OpenSSLSocketImpl: Move state checks inside mutex commit 66c31e0b613ceefc167a2e1fb226a14c78f84537 Merge: f4b895a 0931d51 Author: Kenny Root Date: Thu Aug 14 20:46:43 2014 +0000 am 0931d51c: OpenSSLSocketImpl: Move state checks inside mutex * commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706: OpenSSLSocketImpl: Move state checks inside mutex commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706 Author: Kenny Root Date: Tue Aug 5 15:45:32 2014 OpenSSLSocketImpl: Move state checks inside mutex Checking the state of the connection is unreliable if SSL_read and SSL_write are happening in another thread. Move the state checks inside our application mutex so we dont run into another thread mutating the state at the same time. Bug: 15606096 Change-Id: I5ecdeb1551a13098d1b66c5e4009607c9951fa38 commit f4b895ae9c424b5c2d49c744131606adccbc49d7 Merge: a35c400 a260ee6 Author: Kenny Root Date: Wed Aug 13 15:35:28 2014 +0000 am a260ee6d: Revert ""Revert ""Automatic management of OpenSSL error stack"""" * commit a260ee6d0caea43f8010f158a4a35fb712935ae3: Revert ""Revert ""Automatic management of OpenSSL error stack"""" commit a35c40017c8690f821351d6460dfeaa2738b884c Merge: 0edc483 30550a8 Author: Kenny Root Date: Wed Aug 13 15:35:27 2014 +0000 am 30550a8b: Fix debugging with unbundled conscrypt * commit 30550a8b64bbcd6ca537680a17b8726932a29937: Fix debugging with unbundled conscrypt commit a260ee6d0caea43f8010f158a4a35fb712935ae3 Author: Kenny Root Date: Tue Aug 12 15:38:10 2014 Revert ""Revert ""Automatic management of OpenSSL error stack"""" The ""else"" statement in OpenSslError::reset wasnt properly resetting the error state which made a second call into sslRead jump into sslSelect when it should have just returned immediately. Change-Id: I22e8025c0497a04e78daa07cef78191a6ca1a70c commit 30550a8b64bbcd6ca537680a17b8726932a29937 Author: Kenny Root Date: Tue Aug 12 15:13:33 2014 Fix debugging with unbundled conscrypt When JNI_TRACE was enabled, there were missing defines for the debugging code since no platform code is included. Also clang complains about more of the debugging statement formats, so we have to move some things around to get it to be happy. Change-Id: I1a6695c2ef2639cc01cfc3d3a8603f010c659844 commit 0edc4833091846d6cb45961fc9458df842fbbad9 Merge: 107a8fb 2411b8b Author: Kenny Root Date: Tue Aug 12 21:46:12 2014 +0000 am 2411b8bd: Merge ""Revert ""Automatic management of OpenSSL error stack"""" * commit 2411b8bdcde72c956f4150e9a5909b7501f50bad: Revert ""Automatic management of OpenSSL error stack"" commit 2411b8bdcde72c956f4150e9a5909b7501f50bad Merge: 3262a8c b514d72 Author: Kenny Root Date: Tue Aug 12 21:39:32 2014 +0000 Merge ""Revert ""Automatic management of OpenSSL error stack"""" commit b514d72b93c3996d97e38eca6db1ad684965fd9b Author: Kenny Root Date: Tue Aug 12 21:39:17 2014 +0000 Revert ""Automatic management of OpenSSL error stack"" This reverts commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8. Change-Id: I926d159c4c4b99250caef750732976c1e601e9ef commit 107a8fba8be5be57933f2638b76ac1243b578b9e Merge: 1de007f 3262a8c Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am 3262a8c2: Merge ""Automatic management of OpenSSL error stack"" * commit 3262a8c2741b95103149bcdefe2409c24bfddee9: Automatic management of OpenSSL error stack commit 1de007f9f01be8f07a56235dd924c897088a03cb Merge: 94890ae d1bbcd0 Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am d1bbcd0e: Relax checks for key vs cert for wrapped keys * commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484: Relax checks for key vs cert for wrapped keys commit 3262a8c2741b95103149bcdefe2409c24bfddee9 Merge: d1bbcd0 35666e4 Author: Kenny Root Date: Tue Aug 12 15:31:02 2014 +0000 Merge ""Automatic management of OpenSSL error stack"" commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484 Author: Kenny Root Date: Mon Aug 11 14:56:58 2014 Relax checks for key vs cert for wrapped keys If a key is a wrapped platform key, we must relax the check. The reason is that we may not have the public values we need to pass the EVP_PKEY_cmp checks that this does. Change-Id: I7ab2be51b0968a9cf771edea01d33fe2367c8185 commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8 Author: Kenny Root Date: Tue Aug 5 11:05:00 2014 Automatic management of OpenSSL error stack This removes some complexity in remembering to free the OpenSSL error stack. If you forget, the error will stick around until you make another call. Change-Id: I245a525dcc93077b2bf9909a14a0ef469a2daca4 commit 94890aec5735cde2ea5170fb76cd1b847ea66af8 Merge: 8360485 977f087 Author: Kenny Root Date: Tue Aug 5 16:44:42 2014 +0000 am 977f0877: Fix some JNI_TRACE lines * commit 977f08774c628b4640d5454cde050259856965f8: Fix some JNI_TRACE lines commit 977f08774c628b4640d5454cde050259856965f8 Author: Kenny Root Date: Mon Aug 4 12:15:04 2014 Fix some JNI_TRACE lines During debugging these would be enabled, but they were copy-pastad to with the wrong args. Change-Id: I23f39ff4807e3fa71f3220912aec3c99db6b9454 commit 83604854c5160304cafefc9bd40a72c5ee8506eb Merge: 7db3524 1ffe43e Author: Zoltan Szatmary-Ban Date: Thu Jul 31 13:28:57 2014 +0000 am 1ffe43e8: Merge ""Add possibility to get deleted system Certificate Aliases"" into lmp-dev * commit 1ffe43e8277e883c6663c1fb7cfc5e18ba552c40: Add possibility to get deleted system Certificate Aliases commit 7db3524880092126962b7f502af76b4c84da7350 Merge: 5767d63 ad0cd83 Author: Prameet Shah Date: Wed Jul 30 17:04:13 2014 +0000 am ad0cd830: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit ad0cd83024f38011043d28d70370a8638b88cd72: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 5767d63d22e87becab387b3bd6597fe41eb34d7e Merge: b389e17 26163c2 Author: Prameet Shah Date: Wed Jul 30 16:31:08 2014 +0000 am 26163c26: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit 26163c268a6d2625384b87e907afad8ef19f9a47: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 26163c268a6d2625384b87e907afad8ef19f9a47 Author: Prameet Shah Date: Tue Jul 29 16:45:31 2014 Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() Bug: Change-Id: I5bcaf3ee8910ff75e785baed4c4604fee6c5e700 commit b389e1779651f2c58454a5f98acebd3dd7bc0061 Merge: 5f03b4d e427972 Author: Prameet Shah Date: Thu Jul 24 19:46:28 2014 +0000 am e427972e: OpenSSLEngineImpl: fix unwrap behavior with array * commit e427972eb6141cd67e6d4c9607863a8d990e6be6: OpenSSLEngineImpl: fix unwrap behavior with array commit 5f03b4d63c7632581b032879de791dc82f05ffa0 Merge: 3d935ee 41eb5b6 Author: Prameet Shah Date: Tue Jul 22 19:26:41 2014 +0000 am 41eb5b65: OpenSSLEngineImpl: fix unwrap behavior with array * commit 41eb5b65e524d01e28da474bd37e4349b12fb494: OpenSSLEngineImpl: fix unwrap behavior with array commit 41eb5b65e524d01e28da474bd37e4349b12fb494 Author: Prameet Shah Date: Tue Jul 22 11:50:18 2014 OpenSSLEngineImpl: fix unwrap behavior with array The decrypted bytes should written sequentially into each buffer of the destination array until its full before moving to the next buffer. Change-Id: I2454249c167deafde6c12134d3c8cd658cd7c21b commit 3d935eeca25e00b56cfd8d37a657c7b2986889b3 Merge: 0a36f6c affd45a Author: Alex Klyubin Date: Fri Jul 18 00:32:14 2014 +0000 am affd45a4: Merge ""Improve the Javadoc of PSKKeyManager."" into lmp-dev * commit affd45a413cf844dad797ad4972074efb9de43d8: Improve the Javadoc of PSKKeyManager. commit 0a36f6c1f8b2e195c2dd5aea1a386df090c6d470 Merge: 6492180 af4fa68 Author: rich cannings Date: Thu Jul 17 23:47:33 2014 +0000 am af4fa685: Merge ""Log CCS exceptions do not merge."" into lmp-dev * commit af4fa685f246aaa80c93af62faadbc2fe87dc034: Log CCS exceptions do not merge. commit 6492180ce17a3b5ff822cff1783f00e7a4176491 Merge: aac4168 3b7268c Author: Alex Klyubin Date: Thu Jul 17 18:27:39 2014 +0000 am 3b7268cd: Merge ""Improve the Javadoc of PSKKeyManager."" * commit 3b7268cde4a4fc59591da8a93691927ebf3add57: Improve the Javadoc of PSKKeyManager. commit aac4168d8baef7e12d6fa959c6d6ded9892e9651 Merge: 8573ad0 a749c0d Author: Kenny Root Date: Thu Jul 17 17:07:05 2014 +0000 am a749c0d3: Keep enough state to completely reset cipher instances * commit a749c0d351216be38879600ee8ed01c6793aa256: Keep enough state to completely reset cipher instances commit 8573ad0ddcf7e2f8b2e5ac84c34b7ffab303155c Merge: 4ca5b06 70fdb6d Author: Koushik Dutta Date: Thu Jul 17 17:06:36 2014 +0000 am 70fdb6d2: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit 70fdb6d2bfa0c313fe389827f0025288f6aeb947: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit 4ca5b0625e3f5a15ae8adf833ab5a69f9d7d517f Merge: 119abfb ded66f5 Author: Koushik Dutta Date: Thu Jul 17 17:06:35 2014 +0000 am ded66f5f: Various fixes in OpenSSLEngineImpl. * commit ded66f5f696994ce7620552e16a4e9124e69e052: Various fixes in OpenSSLEngineImpl. commit 119abfba1fcd9c9cfbd15d0a4ca9ed2188fdfab0 Merge: 5713cdf cbe1f28 Author: Kenny Root Date: Thu Jul 17 15:56:57 2014 +0000 am cbe1f28a: Merge ""Keep enough state to completely reset cipher instances"" * commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae: Keep enough state to completely reset cipher instances commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae Merge: e08f238 084e308 Author: Kenny Root Date: Thu Jul 17 15:48:58 2014 +0000 Merge ""Keep enough state to completely reset cipher instances"" commit 3b7268cde4a4fc59591da8a93691927ebf3add57 Merge: cbe1f28 7ac13e0 Author: Alex Klyubin Date: Thu Jul 17 18:20:43 2014 +0000 Merge ""Improve the Javadoc of PSKKeyManager."" commit 5713cdf71c5c6e5179e8369263c702e9512afdd0 Merge: cf55719 e08f238 Author: Koushik Dutta Date: Wed Jul 16 22:05:17 2014 +0000 am e08f2385: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit e08f238580e8ee471012bef8240c8d3397c7b780: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit cf557195a9b60d7f51a48500afde38481ddbc91c Merge: cbbd7d1 986aeb7 Author: Kenny Root Date: Wed Jul 16 21:41:12 2014 +0000 am 986aeb78: Merge ""Various fixes in OpenSSLEngineImpl."" * commit 986aeb78e533540463daf1753e24840f75b25ce6: Various fixes in OpenSSLEngineImpl. commit e08f238580e8ee471012bef8240c8d3397c7b780 Author: Koushik Dutta Date: Tue Jul 15 22:40:23 2014 OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. Change-Id: Idc78204b7077fb367b64e1867c807cd39f596f98 commit 7ac13e03a79d0c99d181b1a28b1b3699ba3d5739 Author: Alex Klyubin Date: Wed Jul 16 08:33:02 2014 Improve the Javadoc of PSKKeyManager. This clarifies several points and adds sample code. Bug: 15073623 Change-Id: I6e8aadc52277e238a998d6cee36795dab1151d58 commit 986aeb78e533540463daf1753e24840f75b25ce6 Merge: 8f9ac1a bdfcc18 Author: Kenny Root Date: Wed Jul 16 21:15:30 2014 +0000 Merge ""Various fixes in OpenSSLEngineImpl."" commit bdfcc189efe41a3f812aeb55ea634bace67d159a Author: Koushik Dutta Date: Sat Jun 28 19:19:21 2014 Various fixes in OpenSSLEngineImpl. Fix ""Buffers were not large enough"" exception by directly using the destination buffers. Corrections around bytesProduced and bytesConsumed behavior. Return BUFFER_OVERFLOW if a zero length destination is provided to unwrap. Change-Id: I1f1e9b72cd6968ed4f3c3c0edccbccebc33d6790 commit cbbd7d10e8e484c44a78e5b27e8fecda195f1692 Merge: ec7f8e6 fdb7d8c Author: Alex Klyubin Date: Tue Jul 15 18:49:14 2014 +0000 am fdb7d8c5: Enable PSK cipher suites when PSKKeyManager is provided. * commit fdb7d8c53dabac5551e2499d045ba6829bcfc0a0: Enable PSK cipher suites when PSKKeyManager is provided. commit ec7f8e6b27330160f88540f4f2ace7bc2a0720a3 Merge: 5b8ccf1 8f9ac1a Author: Alex Klyubin Date: Tue Jul 15 15:53:46 2014 +0000 am 8f9ac1af: Enable PSK cipher suites when PSKKeyManager is provided. * commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17: Enable PSK cipher suites when PSKKeyManager is provided. commit 5b8ccf1b09df6f35c1709bfc8fd727a291094a5b Merge: 69a2e46 6e2315f Author: Ed Heyl Date: Tue Jul 15 13:34:25 2014 +0000 am 6e2315fd: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. * commit 6e2315fd96c3c4a47450c1a437babacc94bc31a6: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. commit 084e3086be1d7a6b9280b64c7c8cdb7b41a13bea Author: Kenny Root Date: Mon Jul 14 13:25:32 2014 Keep enough state to completely reset cipher instances OpenSSLs RC4 mutates the given key. AES/CTR mutates the IV. We must store these values locally to enable ""doFinal"" to cause the Cipher instance to be reset to what it was right after ""init"". Note that resetting and encrypting with the same key or IV breaks semantic security. Bug: 16298401 Bug: Change-Id: Ie7e4dcb6cf6cc33ddad31d6b47066dc1b34e6894 commit 69a2e460cc0a40e1b951e400589b9932609079ec Merge: 8b7bb32 bca895f Author: David Benjamin Date: Mon Jul 14 18:17:28 2014 +0000 am bca895f8: Pass output buffer length into EVP_DigestSignFinal. * commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d: Pass output buffer length into EVP_DigestSignFinal. commit 8b7bb32af09a01e80442b70dd23e6997a937f103 Merge: a2404c9 e79c25b Author: Kenny Root Date: Mon Jul 14 18:17:28 2014 +0000 am e79c25bf: Merge ""DHKeyPairGenerator: use provided params"" * commit e79c25bf33e10da41e489c537823f678e1a1169c: DHKeyPairGenerator: use provided params commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17 Author: Alex Klyubin Date: Thu Jun 19 13:37:24 2014 Enable PSK cipher suites when PSKKeyManager is provided. This enables TLS-PSK cipher suites by default iff SSLContext is initialized with a PSKKeyManager. For consistency, X.509 based cipher suites are no longer enabled by default at all times they are now only enabled by default iff SSLContext is initialized with a X509KeyManager or a X509TrustManager. When both X.509 and PSK cipher suites need to be enabled, PSK cipher suites are given higher priority in the resulting list of cipher suites. This is based on the assumption that in most cases users of TLS/SSL who enable TLS-PSK would prefer TLS-PSK to be used when the peer supports TLS-PSK. Bug: 15073623 Change-Id: I8e2bc3e7a1ea8a986e468973b6bad19dc6b7bc3c commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d Author: David Benjamin Date: Thu Jul 10 18:12:08 2014 Pass output buffer length into EVP_DigestSignFinal. EVP_DigestSignFinal expects the input buffer length as *siglen on input. In addition, if sigret is NULL, it returns the buffer size needed. Use this rather than making assumptions about the EVP_PKEY used to initialize the EVP_MD_CTX. commit e79c25bf33e10da41e489c537823f678e1a1169c Merge: a328492 9b226f9 Author: Kenny Root Date: Fri Jul 11 16:46:23 2014 +0000 Merge ""DHKeyPairGenerator: use provided params"" commit 9b226f90a992a4a2267b7a813e3b869851945c4d Author: Kenny Root Date: Thu Jul 10 14:50:48 2014 DHKeyPairGenerator: use provided params If the prime is provided in the DHParameterSpec, then use it to generate the key. Bug: 16188130 Change-Id: I42de02c71a58d691ef7ba6e2252367105687b758 Bug: 18388980 Change-Id: I853b02a32db113a5af3f6166e7d61fab58c3ff73/"
,,0.0618,conscrypt,Convert EC_GROUP and EC_POINT to new style Bug: 16656908 Change-Id: Ie912f376f69327ce634cac50763bf86b418049f5/
,,0.9209999999999999,conscrypt,"Squashed commit of changes from lmp-ub-dev Contains the following changes: commit e31d982cdb0f8e6ef05d1e412576888015e1da17 Merge: eaebc54 b73be72 Author: Neil Fuller Date: Wed Oct 22 10:34:23 2014 +0000 am b73be72e: am 3e21a289: (-s ours) TLS_FALLBACK_SCSV CTS fix for klp-modular-dev * commit b73be72ed97da8f36450d95d52f485cc6f451c61: TLS_FALLBACK_SCSV CTS fix for klp-modular-dev commit eaebc544f3a10c53d7d2f908514122caba569e14 Merge: 223b5da cd50afa Author: Kenny Root Date: Tue Oct 14 17:30:19 2014 +0000 Merge ""Fix SSLEngine to support session resumption."" into lmp-ub-dev commit 223b5da5d70e47b1a497e86474493925b568f6d7 Merge: 8737796 cb7a360 Author: Neil Fuller Date: Thu Oct 9 14:52:00 2014 +0000 am cb7a3605: am ea961ada: Apply conscrypt changes from merge commit * commit cb7a36050f34d3c16be00d532411820761eeb276: Apply conscrypt changes from merge commit commit cd50afad1567b1311e6e979e94a7167b7bf69c94 Author: Doug Steedman Date: Mon Oct 6 13:16:15 2014 Fix SSLEngine to support session resumption. Bug: 17877118 Change-Id: I388b59cde58fdc506ecac9f536e4bbd9161df6ad commit 8737796a646eaec94df32827752a71aee74bd46f Merge: 9564a5f 8d7e23e Author: Kenny Root Date: Mon Oct 6 22:34:20 2014 +0000 am 8d7e23e1: Add support for TLS_FALLBACK_SCSV * commit 8d7e23e117da591a8d48e6bcda9ed6f58ff1a375: Add support for TLS_FALLBACK_SCSV commit 9564a5fb9ed2eecf6299788db35213cb08397212 Merge: 4f58feb 7640613 Author: Kenny Root Date: Fri Sep 12 17:27:23 2014 +0000 am 76406135: am 6dcb23fe: am f427ec90: Fix the ENGINE_finish/ENGINE_free mixup * commit 76406135cf3a3b88afc979fe8e847b9c3d8b93c1: Fix the ENGINE_finish/ENGINE_free mixup commit 4f58feb0ea49dc089a95efba196032ef3c960a39 Merge: ddac5c6 984b7ec Author: Kenny Root Date: Wed Sep 10 07:07:16 2014 +0000 am 984b7ec6: Fix the ENGINE_finish/ENGINE_free mixup * commit 984b7ec6f5aab314117949a48e448ff4f6b65f16: Fix the ENGINE_finish/ENGINE_free mixup commit ddac5c6d7e413b0d68b388fbdf70dbeb3eeae865 Merge: 5a8ca5b 36ba60b Author: Kenny Root Date: Thu Sep 4 22:41:38 2014 +0000 Merge ""Reset lmp-ub-dev to lmp-dev-plus-aosp"" into lmp-ub-dev commit 36ba60b039f1f30ab1ea8f0e2a4da8ae4e3906e5 Author: Kenny Root Date: Wed Aug 27 12:07:07 2014 Reset lmp-ub-dev to lmp-dev-plus-aosp Bug: 17059757 Change-Id: I581963360da47b574e1e2e20c2851485c36fa62c commit 6a4f2ef9e4ea3ebb321d45ca39b30d634ea3b4ad Merge: 9b187af f67d784 Author: Kenny Root Date: Tue Aug 26 04:17:38 2014 +0000 am f67d784a: Add pre-Honeycomb literal IP matching * commit f67d784abe5cef700240be02c68cecd899cd8e6d: Add pre-Honeycomb literal IP matching commit 9b187af33dcd97915a0371d64fe1ee4aba20d0ba Merge: 714ebea 966ae8a Author: Kenny Root Date: Tue Aug 26 04:17:37 2014 +0000 am 966ae8a6: Read property to enable SNI * commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb: Read property to enable SNI commit 714ebeabcb5e35c6df6a5c21f549cdb6130368c4 Merge: 7724204 54a1ba4 Author: Kenny Root Date: Tue Aug 26 04:06:54 2014 +0000 Merge ""resolved conflicts for merge of 342097db to lmp-dev-plus-aosp"" into lmp-dev-plus-aosp commit 54a1ba421d23bb6d988688c2662715e509172447 Merge: a20d871 342097d Author: Kenny Root Date: Mon Aug 25 21:03:51 2014 resolved conflicts for merge of 342097db to lmp-dev-plus-aosp Change-Id: I853c6b0d3725dafbdc84c4d6d6d1b90529bd949d commit 7724204abf4431d35787c44c4a22cda5489d4e37 Merge: 20f60ac afb3403 Author: Kenny Root Date: Tue Aug 26 00:09:27 2014 +0000 am afb34034: Implement write socket timeouts for unbundled apps * commit afb340348bfc54dbc46964e159fe803f9c93a4dd: Implement write socket timeouts for unbundled apps commit f67d784abe5cef700240be02c68cecd899cd8e6d Author: Kenny Root Date: Wed Aug 20 14:14:26 2014 Add pre-Honeycomb literal IP matching This will allow us to run this code on Gingerbread devices and others that dont have the InetAddress#isNumeric API. Bug: 16658420 Bug: 17059757 Change-Id: I597d539979d58eeaa2677d6f99e911313a550cc1 commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb Author: Kenny Root Date: Mon Aug 18 10:12:20 2014 Read property to enable SNI Read the system property ""jsse.enableSNIExtension"" on whether to enable Server Name Indication (SNI) extension. For unbundled builds, this will be enabled by default. For platform builds, this will be disabled by default. Bug: 16658420 Bug: 17059757 Change-Id: I774f5406bf3fe601a42c4ef5e708b31800147eb9 commit 342097db97a9b2736531033b2c4b4d8ce4998c67 Author: Kenny Root Date: Wed Aug 20 12:14:52 2014 Validate hostname is usable for SNI According to RFC 6066 section 3, the hostname listed in the Server Name Indication (SNI) field is a fully qualified domain name and IP addresses are not permitted. Bug: 16658420 Bug: 17059757 Change-Id: I804e46b6e66599b2770f0f4f0534467987e51208 commit afb340348bfc54dbc46964e159fe803f9c93a4dd Author: Kenny Root Date: Tue Aug 19 16:33:07 2014 Implement write socket timeouts for unbundled apps Change-Id: I4fd604f057ba4288d4f31bf6b3b93307376023d5 commit 20f60acea153dfdf0c8f75a53d7bd9edb4c7614c Author: Kenny Root Date: Mon Aug 25 11:52:05 2014 Tracking change from AOSP Change-Id: I889af3f7c1de9ef34d9328339e1b421651055ad4 commit 68056b7c9db8a9fb384bbadfc5287730f996896d Merge: 8239dfd cc2ef2e Author: Kenny Root Date: Mon Aug 25 18:03:27 2014 +0000 am cc2ef2e2: Rename hostname fields and methods to reflect usage * commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e: Rename hostname fields and methods to reflect usage commit 8239dfdcc40a69255d7b2feced960d574ea36321 Merge: e9cf759 076138f Author: Kenny Root Date: Thu Aug 21 16:36:24 2014 +0000 am 076138ff: Use consistent naming for SSLSocket arguments * commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11: Use consistent naming for SSLSocket arguments commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e Author: Kenny Root Date: Wed Aug 20 11:26:33 2014 Rename hostname fields and methods to reflect usage The hostname that was supplied when the socket was created is stored as the ""peerHostname"" This is the only one that should be used for Server Name Indication (SNI) purposes. The ""peerHostname"" or the resolved IP address may be used for certificate validation, so keep the use of ""getHostname()"" for cerificate validation. Bug: 16658420 Bug: 17059757 Change-Id: Ifd87dead44fb2f00bbfd5eac7e69fb3fc98e94b4 commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11 Author: Kenny Root Date: Wed Aug 20 11:24:41 2014 Use consistent naming for SSLSocket arguments This changes all the host to be hostname and anything that takes an InetAddress will have the name of address to avoid confusing it with a hostname. Bug: 16658420 Bug: 17059757 Change-Id: Iac0628d2d156023dbb80c2e636af6bfe63f46650 commit e9cf759ac89fb053c01f1db19931beb14a823618 Merge: ababdd1 7ed0fae Author: Kenny Root Date: Tue Aug 19 19:32:43 2014 +0000 am 7ed0fae1: OpenSSLEngineImpl: reduce number of copies needed * commit 7ed0fae1906061766d0042e69ccba20e4a702bbe: OpenSSLEngineImpl: reduce number of copies needed commit 7ed0fae1906061766d0042e69ccba20e4a702bbe Author: Kenny Root Date: Tue Jul 22 13:03:09 2014 OpenSSLEngineImpl: reduce number of copies needed When the ByteBuffer didnt line up exactly with the backing array, it would allocate a new buffer to write into. Instead, add the ability for OpenSSL to read at an offset in the given array so a copy isnt needed. Change-Id: I149d3f94e4b5cbdc010df80439ae3300cbdc87a5 commit ababdd1ae1272eac174e3a449a413ab35afbc435 Merge: 66c31e0 4b050b6 Author: Kenny Root Date: Fri Aug 15 16:23:14 2014 +0000 am 4b050b6f: OpenSSLSocketImpl: Move state checks inside mutex * commit 4b050b6fb06fbb804557eecc72cc4ff0e0277525: OpenSSLSocketImpl: Move state checks inside mutex commit 66c31e0b613ceefc167a2e1fb226a14c78f84537 Merge: f4b895a 0931d51 Author: Kenny Root Date: Thu Aug 14 20:46:43 2014 +0000 am 0931d51c: OpenSSLSocketImpl: Move state checks inside mutex * commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706: OpenSSLSocketImpl: Move state checks inside mutex commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706 Author: Kenny Root Date: Tue Aug 5 15:45:32 2014 OpenSSLSocketImpl: Move state checks inside mutex Checking the state of the connection is unreliable if SSL_read and SSL_write are happening in another thread. Move the state checks inside our application mutex so we dont run into another thread mutating the state at the same time. Bug: 15606096 Change-Id: I5ecdeb1551a13098d1b66c5e4009607c9951fa38 commit f4b895ae9c424b5c2d49c744131606adccbc49d7 Merge: a35c400 a260ee6 Author: Kenny Root Date: Wed Aug 13 15:35:28 2014 +0000 am a260ee6d: Revert ""Revert ""Automatic management of OpenSSL error stack"""" * commit a260ee6d0caea43f8010f158a4a35fb712935ae3: Revert ""Revert ""Automatic management of OpenSSL error stack"""" commit a35c40017c8690f821351d6460dfeaa2738b884c Merge: 0edc483 30550a8 Author: Kenny Root Date: Wed Aug 13 15:35:27 2014 +0000 am 30550a8b: Fix debugging with unbundled conscrypt * commit 30550a8b64bbcd6ca537680a17b8726932a29937: Fix debugging with unbundled conscrypt commit a260ee6d0caea43f8010f158a4a35fb712935ae3 Author: Kenny Root Date: Tue Aug 12 15:38:10 2014 Revert ""Revert ""Automatic management of OpenSSL error stack"""" The ""else"" statement in OpenSslError::reset wasnt properly resetting the error state which made a second call into sslRead jump into sslSelect when it should have just returned immediately. Change-Id: I22e8025c0497a04e78daa07cef78191a6ca1a70c commit 30550a8b64bbcd6ca537680a17b8726932a29937 Author: Kenny Root Date: Tue Aug 12 15:13:33 2014 Fix debugging with unbundled conscrypt When JNI_TRACE was enabled, there were missing defines for the debugging code since no platform code is included. Also clang complains about more of the debugging statement formats, so we have to move some things around to get it to be happy. Change-Id: I1a6695c2ef2639cc01cfc3d3a8603f010c659844 commit 0edc4833091846d6cb45961fc9458df842fbbad9 Merge: 107a8fb 2411b8b Author: Kenny Root Date: Tue Aug 12 21:46:12 2014 +0000 am 2411b8bd: Merge ""Revert ""Automatic management of OpenSSL error stack"""" * commit 2411b8bdcde72c956f4150e9a5909b7501f50bad: Revert ""Automatic management of OpenSSL error stack"" commit 2411b8bdcde72c956f4150e9a5909b7501f50bad Merge: 3262a8c b514d72 Author: Kenny Root Date: Tue Aug 12 21:39:32 2014 +0000 Merge ""Revert ""Automatic management of OpenSSL error stack"""" commit b514d72b93c3996d97e38eca6db1ad684965fd9b Author: Kenny Root Date: Tue Aug 12 21:39:17 2014 +0000 Revert ""Automatic management of OpenSSL error stack"" This reverts commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8. Change-Id: I926d159c4c4b99250caef750732976c1e601e9ef commit 107a8fba8be5be57933f2638b76ac1243b578b9e Merge: 1de007f 3262a8c Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am 3262a8c2: Merge ""Automatic management of OpenSSL error stack"" * commit 3262a8c2741b95103149bcdefe2409c24bfddee9: Automatic management of OpenSSL error stack commit 1de007f9f01be8f07a56235dd924c897088a03cb Merge: 94890ae d1bbcd0 Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am d1bbcd0e: Relax checks for key vs cert for wrapped keys * commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484: Relax checks for key vs cert for wrapped keys commit 3262a8c2741b95103149bcdefe2409c24bfddee9 Merge: d1bbcd0 35666e4 Author: Kenny Root Date: Tue Aug 12 15:31:02 2014 +0000 Merge ""Automatic management of OpenSSL error stack"" commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484 Author: Kenny Root Date: Mon Aug 11 14:56:58 2014 Relax checks for key vs cert for wrapped keys If a key is a wrapped platform key, we must relax the check. The reason is that we may not have the public values we need to pass the EVP_PKEY_cmp checks that this does. Change-Id: I7ab2be51b0968a9cf771edea01d33fe2367c8185 commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8 Author: Kenny Root Date: Tue Aug 5 11:05:00 2014 Automatic management of OpenSSL error stack This removes some complexity in remembering to free the OpenSSL error stack. If you forget, the error will stick around until you make another call. Change-Id: I245a525dcc93077b2bf9909a14a0ef469a2daca4 commit 94890aec5735cde2ea5170fb76cd1b847ea66af8 Merge: 8360485 977f087 Author: Kenny Root Date: Tue Aug 5 16:44:42 2014 +0000 am 977f0877: Fix some JNI_TRACE lines * commit 977f08774c628b4640d5454cde050259856965f8: Fix some JNI_TRACE lines commit 977f08774c628b4640d5454cde050259856965f8 Author: Kenny Root Date: Mon Aug 4 12:15:04 2014 Fix some JNI_TRACE lines During debugging these would be enabled, but they were copy-pastad to with the wrong args. Change-Id: I23f39ff4807e3fa71f3220912aec3c99db6b9454 commit 83604854c5160304cafefc9bd40a72c5ee8506eb Merge: 7db3524 1ffe43e Author: Zoltan Szatmary-Ban Date: Thu Jul 31 13:28:57 2014 +0000 am 1ffe43e8: Merge ""Add possibility to get deleted system Certificate Aliases"" into lmp-dev * commit 1ffe43e8277e883c6663c1fb7cfc5e18ba552c40: Add possibility to get deleted system Certificate Aliases commit 7db3524880092126962b7f502af76b4c84da7350 Merge: 5767d63 ad0cd83 Author: Prameet Shah Date: Wed Jul 30 17:04:13 2014 +0000 am ad0cd830: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit ad0cd83024f38011043d28d70370a8638b88cd72: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 5767d63d22e87becab387b3bd6597fe41eb34d7e Merge: b389e17 26163c2 Author: Prameet Shah Date: Wed Jul 30 16:31:08 2014 +0000 am 26163c26: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit 26163c268a6d2625384b87e907afad8ef19f9a47: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 26163c268a6d2625384b87e907afad8ef19f9a47 Author: Prameet Shah Date: Tue Jul 29 16:45:31 2014 Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() Bug: Change-Id: I5bcaf3ee8910ff75e785baed4c4604fee6c5e700 commit b389e1779651f2c58454a5f98acebd3dd7bc0061 Merge: 5f03b4d e427972 Author: Prameet Shah Date: Thu Jul 24 19:46:28 2014 +0000 am e427972e: OpenSSLEngineImpl: fix unwrap behavior with array * commit e427972eb6141cd67e6d4c9607863a8d990e6be6: OpenSSLEngineImpl: fix unwrap behavior with array commit 5f03b4d63c7632581b032879de791dc82f05ffa0 Merge: 3d935ee 41eb5b6 Author: Prameet Shah Date: Tue Jul 22 19:26:41 2014 +0000 am 41eb5b65: OpenSSLEngineImpl: fix unwrap behavior with array * commit 41eb5b65e524d01e28da474bd37e4349b12fb494: OpenSSLEngineImpl: fix unwrap behavior with array commit 41eb5b65e524d01e28da474bd37e4349b12fb494 Author: Prameet Shah Date: Tue Jul 22 11:50:18 2014 OpenSSLEngineImpl: fix unwrap behavior with array The decrypted bytes should written sequentially into each buffer of the destination array until its full before moving to the next buffer. Change-Id: I2454249c167deafde6c12134d3c8cd658cd7c21b commit 3d935eeca25e00b56cfd8d37a657c7b2986889b3 Merge: 0a36f6c affd45a Author: Alex Klyubin Date: Fri Jul 18 00:32:14 2014 +0000 am affd45a4: Merge ""Improve the Javadoc of PSKKeyManager."" into lmp-dev * commit affd45a413cf844dad797ad4972074efb9de43d8: Improve the Javadoc of PSKKeyManager. commit 0a36f6c1f8b2e195c2dd5aea1a386df090c6d470 Merge: 6492180 af4fa68 Author: rich cannings Date: Thu Jul 17 23:47:33 2014 +0000 am af4fa685: Merge ""Log CCS exceptions do not merge."" into lmp-dev * commit af4fa685f246aaa80c93af62faadbc2fe87dc034: Log CCS exceptions do not merge. commit 6492180ce17a3b5ff822cff1783f00e7a4176491 Merge: aac4168 3b7268c Author: Alex Klyubin Date: Thu Jul 17 18:27:39 2014 +0000 am 3b7268cd: Merge ""Improve the Javadoc of PSKKeyManager."" * commit 3b7268cde4a4fc59591da8a93691927ebf3add57: Improve the Javadoc of PSKKeyManager. commit aac4168d8baef7e12d6fa959c6d6ded9892e9651 Merge: 8573ad0 a749c0d Author: Kenny Root Date: Thu Jul 17 17:07:05 2014 +0000 am a749c0d3: Keep enough state to completely reset cipher instances * commit a749c0d351216be38879600ee8ed01c6793aa256: Keep enough state to completely reset cipher instances commit 8573ad0ddcf7e2f8b2e5ac84c34b7ffab303155c Merge: 4ca5b06 70fdb6d Author: Koushik Dutta Date: Thu Jul 17 17:06:36 2014 +0000 am 70fdb6d2: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit 70fdb6d2bfa0c313fe389827f0025288f6aeb947: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit 4ca5b0625e3f5a15ae8adf833ab5a69f9d7d517f Merge: 119abfb ded66f5 Author: Koushik Dutta Date: Thu Jul 17 17:06:35 2014 +0000 am ded66f5f: Various fixes in OpenSSLEngineImpl. * commit ded66f5f696994ce7620552e16a4e9124e69e052: Various fixes in OpenSSLEngineImpl. commit 119abfba1fcd9c9cfbd15d0a4ca9ed2188fdfab0 Merge: 5713cdf cbe1f28 Author: Kenny Root Date: Thu Jul 17 15:56:57 2014 +0000 am cbe1f28a: Merge ""Keep enough state to completely reset cipher instances"" * commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae: Keep enough state to completely reset cipher instances commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae Merge: e08f238 084e308 Author: Kenny Root Date: Thu Jul 17 15:48:58 2014 +0000 Merge ""Keep enough state to completely reset cipher instances"" commit 3b7268cde4a4fc59591da8a93691927ebf3add57 Merge: cbe1f28 7ac13e0 Author: Alex Klyubin Date: Thu Jul 17 18:20:43 2014 +0000 Merge ""Improve the Javadoc of PSKKeyManager."" commit 5713cdf71c5c6e5179e8369263c702e9512afdd0 Merge: cf55719 e08f238 Author: Koushik Dutta Date: Wed Jul 16 22:05:17 2014 +0000 am e08f2385: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit e08f238580e8ee471012bef8240c8d3397c7b780: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit cf557195a9b60d7f51a48500afde38481ddbc91c Merge: cbbd7d1 986aeb7 Author: Kenny Root Date: Wed Jul 16 21:41:12 2014 +0000 am 986aeb78: Merge ""Various fixes in OpenSSLEngineImpl."" * commit 986aeb78e533540463daf1753e24840f75b25ce6: Various fixes in OpenSSLEngineImpl. commit e08f238580e8ee471012bef8240c8d3397c7b780 Author: Koushik Dutta Date: Tue Jul 15 22:40:23 2014 OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. Change-Id: Idc78204b7077fb367b64e1867c807cd39f596f98 commit 7ac13e03a79d0c99d181b1a28b1b3699ba3d5739 Author: Alex Klyubin Date: Wed Jul 16 08:33:02 2014 Improve the Javadoc of PSKKeyManager. This clarifies several points and adds sample code. Bug: 15073623 Change-Id: I6e8aadc52277e238a998d6cee36795dab1151d58 commit 986aeb78e533540463daf1753e24840f75b25ce6 Merge: 8f9ac1a bdfcc18 Author: Kenny Root Date: Wed Jul 16 21:15:30 2014 +0000 Merge ""Various fixes in OpenSSLEngineImpl."" commit bdfcc189efe41a3f812aeb55ea634bace67d159a Author: Koushik Dutta Date: Sat Jun 28 19:19:21 2014 Various fixes in OpenSSLEngineImpl. Fix ""Buffers were not large enough"" exception by directly using the destination buffers. Corrections around bytesProduced and bytesConsumed behavior. Return BUFFER_OVERFLOW if a zero length destination is provided to unwrap. Change-Id: I1f1e9b72cd6968ed4f3c3c0edccbccebc33d6790 commit cbbd7d10e8e484c44a78e5b27e8fecda195f1692 Merge: ec7f8e6 fdb7d8c Author: Alex Klyubin Date: Tue Jul 15 18:49:14 2014 +0000 am fdb7d8c5: Enable PSK cipher suites when PSKKeyManager is provided. * commit fdb7d8c53dabac5551e2499d045ba6829bcfc0a0: Enable PSK cipher suites when PSKKeyManager is provided. commit ec7f8e6b27330160f88540f4f2ace7bc2a0720a3 Merge: 5b8ccf1 8f9ac1a Author: Alex Klyubin Date: Tue Jul 15 15:53:46 2014 +0000 am 8f9ac1af: Enable PSK cipher suites when PSKKeyManager is provided. * commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17: Enable PSK cipher suites when PSKKeyManager is provided. commit 5b8ccf1b09df6f35c1709bfc8fd727a291094a5b Merge: 69a2e46 6e2315f Author: Ed Heyl Date: Tue Jul 15 13:34:25 2014 +0000 am 6e2315fd: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. * commit 6e2315fd96c3c4a47450c1a437babacc94bc31a6: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. commit 084e3086be1d7a6b9280b64c7c8cdb7b41a13bea Author: Kenny Root Date: Mon Jul 14 13:25:32 2014 Keep enough state to completely reset cipher instances OpenSSLs RC4 mutates the given key. AES/CTR mutates the IV. We must store these values locally to enable ""doFinal"" to cause the Cipher instance to be reset to what it was right after ""init"". Note that resetting and encrypting with the same key or IV breaks semantic security. Bug: 16298401 Bug: Change-Id: Ie7e4dcb6cf6cc33ddad31d6b47066dc1b34e6894 commit 69a2e460cc0a40e1b951e400589b9932609079ec Merge: 8b7bb32 bca895f Author: David Benjamin Date: Mon Jul 14 18:17:28 2014 +0000 am bca895f8: Pass output buffer length into EVP_DigestSignFinal. * commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d: Pass output buffer length into EVP_DigestSignFinal. commit 8b7bb32af09a01e80442b70dd23e6997a937f103 Merge: a2404c9 e79c25b Author: Kenny Root Date: Mon Jul 14 18:17:28 2014 +0000 am e79c25bf: Merge ""DHKeyPairGenerator: use provided params"" * commit e79c25bf33e10da41e489c537823f678e1a1169c: DHKeyPairGenerator: use provided params commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17 Author: Alex Klyubin Date: Thu Jun 19 13:37:24 2014 Enable PSK cipher suites when PSKKeyManager is provided. This enables TLS-PSK cipher suites by default iff SSLContext is initialized with a PSKKeyManager. For consistency, X.509 based cipher suites are no longer enabled by default at all times they are now only enabled by default iff SSLContext is initialized with a X509KeyManager or a X509TrustManager. When both X.509 and PSK cipher suites need to be enabled, PSK cipher suites are given higher priority in the resulting list of cipher suites. This is based on the assumption that in most cases users of TLS/SSL who enable TLS-PSK would prefer TLS-PSK to be used when the peer supports TLS-PSK. Bug: 15073623 Change-Id: I8e2bc3e7a1ea8a986e468973b6bad19dc6b7bc3c commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d Author: David Benjamin Date: Thu Jul 10 18:12:08 2014 Pass output buffer length into EVP_DigestSignFinal. EVP_DigestSignFinal expects the input buffer length as *siglen on input. In addition, if sigret is NULL, it returns the buffer size needed. Use this rather than making assumptions about the EVP_PKEY used to initialize the EVP_MD_CTX. commit e79c25bf33e10da41e489c537823f678e1a1169c Merge: a328492 9b226f9 Author: Kenny Root Date: Fri Jul 11 16:46:23 2014 +0000 Merge ""DHKeyPairGenerator: use provided params"" commit 9b226f90a992a4a2267b7a813e3b869851945c4d Author: Kenny Root Date: Thu Jul 10 14:50:48 2014 DHKeyPairGenerator: use provided params If the prime is provided in the DHParameterSpec, then use it to generate the key. Bug: 16188130 Change-Id: I42de02c71a58d691ef7ba6e2252367105687b758 Bug: 18388980 Change-Id: I853b02a32db113a5af3f6166e7d61fab58c3ff73/"
,,0.9179,conscrypt,"Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/Squashed commit of changes from lmp-ub-dev Contains the following changes: commit e31d982cdb0f8e6ef05d1e412576888015e1da17 Merge: eaebc54 b73be72 Author: Neil Fuller Date: Wed Oct 22 10:34:23 2014 +0000 am b73be72e: am 3e21a289: (-s ours) TLS_FALLBACK_SCSV CTS fix for klp-modular-dev * commit b73be72ed97da8f36450d95d52f485cc6f451c61: TLS_FALLBACK_SCSV CTS fix for klp-modular-dev commit eaebc544f3a10c53d7d2f908514122caba569e14 Merge: 223b5da cd50afa Author: Kenny Root Date: Tue Oct 14 17:30:19 2014 +0000 Merge ""Fix SSLEngine to support session resumption."" into lmp-ub-dev commit 223b5da5d70e47b1a497e86474493925b568f6d7 Merge: 8737796 cb7a360 Author: Neil Fuller Date: Thu Oct 9 14:52:00 2014 +0000 am cb7a3605: am ea961ada: Apply conscrypt changes from merge commit * commit cb7a36050f34d3c16be00d532411820761eeb276: Apply conscrypt changes from merge commit commit cd50afad1567b1311e6e979e94a7167b7bf69c94 Author: Doug Steedman Date: Mon Oct 6 13:16:15 2014 Fix SSLEngine to support session resumption. Bug: 17877118 Change-Id: I388b59cde58fdc506ecac9f536e4bbd9161df6ad commit 8737796a646eaec94df32827752a71aee74bd46f Merge: 9564a5f 8d7e23e Author: Kenny Root Date: Mon Oct 6 22:34:20 2014 +0000 am 8d7e23e1: Add support for TLS_FALLBACK_SCSV * commit 8d7e23e117da591a8d48e6bcda9ed6f58ff1a375: Add support for TLS_FALLBACK_SCSV commit 9564a5fb9ed2eecf6299788db35213cb08397212 Merge: 4f58feb 7640613 Author: Kenny Root Date: Fri Sep 12 17:27:23 2014 +0000 am 76406135: am 6dcb23fe: am f427ec90: Fix the ENGINE_finish/ENGINE_free mixup * commit 76406135cf3a3b88afc979fe8e847b9c3d8b93c1: Fix the ENGINE_finish/ENGINE_free mixup commit 4f58feb0ea49dc089a95efba196032ef3c960a39 Merge: ddac5c6 984b7ec Author: Kenny Root Date: Wed Sep 10 07:07:16 2014 +0000 am 984b7ec6: Fix the ENGINE_finish/ENGINE_free mixup * commit 984b7ec6f5aab314117949a48e448ff4f6b65f16: Fix the ENGINE_finish/ENGINE_free mixup commit ddac5c6d7e413b0d68b388fbdf70dbeb3eeae865 Merge: 5a8ca5b 36ba60b Author: Kenny Root Date: Thu Sep 4 22:41:38 2014 +0000 Merge ""Reset lmp-ub-dev to lmp-dev-plus-aosp"" into lmp-ub-dev commit 36ba60b039f1f30ab1ea8f0e2a4da8ae4e3906e5 Author: Kenny Root Date: Wed Aug 27 12:07:07 2014 Reset lmp-ub-dev to lmp-dev-plus-aosp Bug: 17059757 Change-Id: I581963360da47b574e1e2e20c2851485c36fa62c commit 6a4f2ef9e4ea3ebb321d45ca39b30d634ea3b4ad Merge: 9b187af f67d784 Author: Kenny Root Date: Tue Aug 26 04:17:38 2014 +0000 am f67d784a: Add pre-Honeycomb literal IP matching * commit f67d784abe5cef700240be02c68cecd899cd8e6d: Add pre-Honeycomb literal IP matching commit 9b187af33dcd97915a0371d64fe1ee4aba20d0ba Merge: 714ebea 966ae8a Author: Kenny Root Date: Tue Aug 26 04:17:37 2014 +0000 am 966ae8a6: Read property to enable SNI * commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb: Read property to enable SNI commit 714ebeabcb5e35c6df6a5c21f549cdb6130368c4 Merge: 7724204 54a1ba4 Author: Kenny Root Date: Tue Aug 26 04:06:54 2014 +0000 Merge ""resolved conflicts for merge of 342097db to lmp-dev-plus-aosp"" into lmp-dev-plus-aosp commit 54a1ba421d23bb6d988688c2662715e509172447 Merge: a20d871 342097d Author: Kenny Root Date: Mon Aug 25 21:03:51 2014 resolved conflicts for merge of 342097db to lmp-dev-plus-aosp Change-Id: I853c6b0d3725dafbdc84c4d6d6d1b90529bd949d commit 7724204abf4431d35787c44c4a22cda5489d4e37 Merge: 20f60ac afb3403 Author: Kenny Root Date: Tue Aug 26 00:09:27 2014 +0000 am afb34034: Implement write socket timeouts for unbundled apps * commit afb340348bfc54dbc46964e159fe803f9c93a4dd: Implement write socket timeouts for unbundled apps commit f67d784abe5cef700240be02c68cecd899cd8e6d Author: Kenny Root Date: Wed Aug 20 14:14:26 2014 Add pre-Honeycomb literal IP matching This will allow us to run this code on Gingerbread devices and others that dont have the InetAddress#isNumeric API. Bug: 16658420 Bug: 17059757 Change-Id: I597d539979d58eeaa2677d6f99e911313a550cc1 commit 966ae8a6e12f3235b1cb041e687bda11b41fe4eb Author: Kenny Root Date: Mon Aug 18 10:12:20 2014 Read property to enable SNI Read the system property ""jsse.enableSNIExtension"" on whether to enable Server Name Indication (SNI) extension. For unbundled builds, this will be enabled by default. For platform builds, this will be disabled by default. Bug: 16658420 Bug: 17059757 Change-Id: I774f5406bf3fe601a42c4ef5e708b31800147eb9 commit 342097db97a9b2736531033b2c4b4d8ce4998c67 Author: Kenny Root Date: Wed Aug 20 12:14:52 2014 Validate hostname is usable for SNI According to RFC 6066 section 3, the hostname listed in the Server Name Indication (SNI) field is a fully qualified domain name and IP addresses are not permitted. Bug: 16658420 Bug: 17059757 Change-Id: I804e46b6e66599b2770f0f4f0534467987e51208 commit afb340348bfc54dbc46964e159fe803f9c93a4dd Author: Kenny Root Date: Tue Aug 19 16:33:07 2014 Implement write socket timeouts for unbundled apps Change-Id: I4fd604f057ba4288d4f31bf6b3b93307376023d5 commit 20f60acea153dfdf0c8f75a53d7bd9edb4c7614c Author: Kenny Root Date: Mon Aug 25 11:52:05 2014 Tracking change from AOSP Change-Id: I889af3f7c1de9ef34d9328339e1b421651055ad4 commit 68056b7c9db8a9fb384bbadfc5287730f996896d Merge: 8239dfd cc2ef2e Author: Kenny Root Date: Mon Aug 25 18:03:27 2014 +0000 am cc2ef2e2: Rename hostname fields and methods to reflect usage * commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e: Rename hostname fields and methods to reflect usage commit 8239dfdcc40a69255d7b2feced960d574ea36321 Merge: e9cf759 076138f Author: Kenny Root Date: Thu Aug 21 16:36:24 2014 +0000 am 076138ff: Use consistent naming for SSLSocket arguments * commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11: Use consistent naming for SSLSocket arguments commit cc2ef2e2e9ee64f2e0ac2abc7fdf636e2f81fa5e Author: Kenny Root Date: Wed Aug 20 11:26:33 2014 Rename hostname fields and methods to reflect usage The hostname that was supplied when the socket was created is stored as the ""peerHostname"" This is the only one that should be used for Server Name Indication (SNI) purposes. The ""peerHostname"" or the resolved IP address may be used for certificate validation, so keep the use of ""getHostname()"" for cerificate validation. Bug: 16658420 Bug: 17059757 Change-Id: Ifd87dead44fb2f00bbfd5eac7e69fb3fc98e94b4 commit 076138ff29d805ec5a32d6ad96a18ef08c7f1b11 Author: Kenny Root Date: Wed Aug 20 11:24:41 2014 Use consistent naming for SSLSocket arguments This changes all the host to be hostname and anything that takes an InetAddress will have the name of address to avoid confusing it with a hostname. Bug: 16658420 Bug: 17059757 Change-Id: Iac0628d2d156023dbb80c2e636af6bfe63f46650 commit e9cf759ac89fb053c01f1db19931beb14a823618 Merge: ababdd1 7ed0fae Author: Kenny Root Date: Tue Aug 19 19:32:43 2014 +0000 am 7ed0fae1: OpenSSLEngineImpl: reduce number of copies needed * commit 7ed0fae1906061766d0042e69ccba20e4a702bbe: OpenSSLEngineImpl: reduce number of copies needed commit 7ed0fae1906061766d0042e69ccba20e4a702bbe Author: Kenny Root Date: Tue Jul 22 13:03:09 2014 OpenSSLEngineImpl: reduce number of copies needed When the ByteBuffer didnt line up exactly with the backing array, it would allocate a new buffer to write into. Instead, add the ability for OpenSSL to read at an offset in the given array so a copy isnt needed. Change-Id: I149d3f94e4b5cbdc010df80439ae3300cbdc87a5 commit ababdd1ae1272eac174e3a449a413ab35afbc435 Merge: 66c31e0 4b050b6 Author: Kenny Root Date: Fri Aug 15 16:23:14 2014 +0000 am 4b050b6f: OpenSSLSocketImpl: Move state checks inside mutex * commit 4b050b6fb06fbb804557eecc72cc4ff0e0277525: OpenSSLSocketImpl: Move state checks inside mutex commit 66c31e0b613ceefc167a2e1fb226a14c78f84537 Merge: f4b895a 0931d51 Author: Kenny Root Date: Thu Aug 14 20:46:43 2014 +0000 am 0931d51c: OpenSSLSocketImpl: Move state checks inside mutex * commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706: OpenSSLSocketImpl: Move state checks inside mutex commit 0931d51c58b2dc2f612298f99fbf0fa6ed4c3706 Author: Kenny Root Date: Tue Aug 5 15:45:32 2014 OpenSSLSocketImpl: Move state checks inside mutex Checking the state of the connection is unreliable if SSL_read and SSL_write are happening in another thread. Move the state checks inside our application mutex so we dont run into another thread mutating the state at the same time. Bug: 15606096 Change-Id: I5ecdeb1551a13098d1b66c5e4009607c9951fa38 commit f4b895ae9c424b5c2d49c744131606adccbc49d7 Merge: a35c400 a260ee6 Author: Kenny Root Date: Wed Aug 13 15:35:28 2014 +0000 am a260ee6d: Revert ""Revert ""Automatic management of OpenSSL error stack"""" * commit a260ee6d0caea43f8010f158a4a35fb712935ae3: Revert ""Revert ""Automatic management of OpenSSL error stack"""" commit a35c40017c8690f821351d6460dfeaa2738b884c Merge: 0edc483 30550a8 Author: Kenny Root Date: Wed Aug 13 15:35:27 2014 +0000 am 30550a8b: Fix debugging with unbundled conscrypt * commit 30550a8b64bbcd6ca537680a17b8726932a29937: Fix debugging with unbundled conscrypt commit a260ee6d0caea43f8010f158a4a35fb712935ae3 Author: Kenny Root Date: Tue Aug 12 15:38:10 2014 Revert ""Revert ""Automatic management of OpenSSL error stack"""" The ""else"" statement in OpenSslError::reset wasnt properly resetting the error state which made a second call into sslRead jump into sslSelect when it should have just returned immediately. Change-Id: I22e8025c0497a04e78daa07cef78191a6ca1a70c commit 30550a8b64bbcd6ca537680a17b8726932a29937 Author: Kenny Root Date: Tue Aug 12 15:13:33 2014 Fix debugging with unbundled conscrypt When JNI_TRACE was enabled, there were missing defines for the debugging code since no platform code is included. Also clang complains about more of the debugging statement formats, so we have to move some things around to get it to be happy. Change-Id: I1a6695c2ef2639cc01cfc3d3a8603f010c659844 commit 0edc4833091846d6cb45961fc9458df842fbbad9 Merge: 107a8fb 2411b8b Author: Kenny Root Date: Tue Aug 12 21:46:12 2014 +0000 am 2411b8bd: Merge ""Revert ""Automatic management of OpenSSL error stack"""" * commit 2411b8bdcde72c956f4150e9a5909b7501f50bad: Revert ""Automatic management of OpenSSL error stack"" commit 2411b8bdcde72c956f4150e9a5909b7501f50bad Merge: 3262a8c b514d72 Author: Kenny Root Date: Tue Aug 12 21:39:32 2014 +0000 Merge ""Revert ""Automatic management of OpenSSL error stack"""" commit b514d72b93c3996d97e38eca6db1ad684965fd9b Author: Kenny Root Date: Tue Aug 12 21:39:17 2014 +0000 Revert ""Automatic management of OpenSSL error stack"" This reverts commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8. Change-Id: I926d159c4c4b99250caef750732976c1e601e9ef commit 107a8fba8be5be57933f2638b76ac1243b578b9e Merge: 1de007f 3262a8c Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am 3262a8c2: Merge ""Automatic management of OpenSSL error stack"" * commit 3262a8c2741b95103149bcdefe2409c24bfddee9: Automatic management of OpenSSL error stack commit 1de007f9f01be8f07a56235dd924c897088a03cb Merge: 94890ae d1bbcd0 Author: Kenny Root Date: Tue Aug 12 15:50:14 2014 +0000 am d1bbcd0e: Relax checks for key vs cert for wrapped keys * commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484: Relax checks for key vs cert for wrapped keys commit 3262a8c2741b95103149bcdefe2409c24bfddee9 Merge: d1bbcd0 35666e4 Author: Kenny Root Date: Tue Aug 12 15:31:02 2014 +0000 Merge ""Automatic management of OpenSSL error stack"" commit d1bbcd0ec973e1b8465c204c13b4925fd86e6484 Author: Kenny Root Date: Mon Aug 11 14:56:58 2014 Relax checks for key vs cert for wrapped keys If a key is a wrapped platform key, we must relax the check. The reason is that we may not have the public values we need to pass the EVP_PKEY_cmp checks that this does. Change-Id: I7ab2be51b0968a9cf771edea01d33fe2367c8185 commit 35666e4cb0fcd063a21d17eebbb571b4e4e822b8 Author: Kenny Root Date: Tue Aug 5 11:05:00 2014 Automatic management of OpenSSL error stack This removes some complexity in remembering to free the OpenSSL error stack. If you forget, the error will stick around until you make another call. Change-Id: I245a525dcc93077b2bf9909a14a0ef469a2daca4 commit 94890aec5735cde2ea5170fb76cd1b847ea66af8 Merge: 8360485 977f087 Author: Kenny Root Date: Tue Aug 5 16:44:42 2014 +0000 am 977f0877: Fix some JNI_TRACE lines * commit 977f08774c628b4640d5454cde050259856965f8: Fix some JNI_TRACE lines commit 977f08774c628b4640d5454cde050259856965f8 Author: Kenny Root Date: Mon Aug 4 12:15:04 2014 Fix some JNI_TRACE lines During debugging these would be enabled, but they were copy-pastad to with the wrong args. Change-Id: I23f39ff4807e3fa71f3220912aec3c99db6b9454 commit 83604854c5160304cafefc9bd40a72c5ee8506eb Merge: 7db3524 1ffe43e Author: Zoltan Szatmary-Ban Date: Thu Jul 31 13:28:57 2014 +0000 am 1ffe43e8: Merge ""Add possibility to get deleted system Certificate Aliases"" into lmp-dev * commit 1ffe43e8277e883c6663c1fb7cfc5e18ba552c40: Add possibility to get deleted system Certificate Aliases commit 7db3524880092126962b7f502af76b4c84da7350 Merge: 5767d63 ad0cd83 Author: Prameet Shah Date: Wed Jul 30 17:04:13 2014 +0000 am ad0cd830: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit ad0cd83024f38011043d28d70370a8638b88cd72: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 5767d63d22e87becab387b3bd6597fe41eb34d7e Merge: b389e17 26163c2 Author: Prameet Shah Date: Wed Jul 30 16:31:08 2014 +0000 am 26163c26: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() * commit 26163c268a6d2625384b87e907afad8ef19f9a47: Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() commit 26163c268a6d2625384b87e907afad8ef19f9a47 Author: Prameet Shah Date: Tue Jul 29 16:45:31 2014 Added CLOSED_INBOUND and CLOSED_OUTBOUND states to OpenSSLEngineImpl#getHandshakeStatus() Bug: Change-Id: I5bcaf3ee8910ff75e785baed4c4604fee6c5e700 commit b389e1779651f2c58454a5f98acebd3dd7bc0061 Merge: 5f03b4d e427972 Author: Prameet Shah Date: Thu Jul 24 19:46:28 2014 +0000 am e427972e: OpenSSLEngineImpl: fix unwrap behavior with array * commit e427972eb6141cd67e6d4c9607863a8d990e6be6: OpenSSLEngineImpl: fix unwrap behavior with array commit 5f03b4d63c7632581b032879de791dc82f05ffa0 Merge: 3d935ee 41eb5b6 Author: Prameet Shah Date: Tue Jul 22 19:26:41 2014 +0000 am 41eb5b65: OpenSSLEngineImpl: fix unwrap behavior with array * commit 41eb5b65e524d01e28da474bd37e4349b12fb494: OpenSSLEngineImpl: fix unwrap behavior with array commit 41eb5b65e524d01e28da474bd37e4349b12fb494 Author: Prameet Shah Date: Tue Jul 22 11:50:18 2014 OpenSSLEngineImpl: fix unwrap behavior with array The decrypted bytes should written sequentially into each buffer of the destination array until its full before moving to the next buffer. Change-Id: I2454249c167deafde6c12134d3c8cd658cd7c21b commit 3d935eeca25e00b56cfd8d37a657c7b2986889b3 Merge: 0a36f6c affd45a Author: Alex Klyubin Date: Fri Jul 18 00:32:14 2014 +0000 am affd45a4: Merge ""Improve the Javadoc of PSKKeyManager."" into lmp-dev * commit affd45a413cf844dad797ad4972074efb9de43d8: Improve the Javadoc of PSKKeyManager. commit 0a36f6c1f8b2e195c2dd5aea1a386df090c6d470 Merge: 6492180 af4fa68 Author: rich cannings Date: Thu Jul 17 23:47:33 2014 +0000 am af4fa685: Merge ""Log CCS exceptions do not merge."" into lmp-dev * commit af4fa685f246aaa80c93af62faadbc2fe87dc034: Log CCS exceptions do not merge. commit 6492180ce17a3b5ff822cff1783f00e7a4176491 Merge: aac4168 3b7268c Author: Alex Klyubin Date: Thu Jul 17 18:27:39 2014 +0000 am 3b7268cd: Merge ""Improve the Javadoc of PSKKeyManager."" * commit 3b7268cde4a4fc59591da8a93691927ebf3add57: Improve the Javadoc of PSKKeyManager. commit aac4168d8baef7e12d6fa959c6d6ded9892e9651 Merge: 8573ad0 a749c0d Author: Kenny Root Date: Thu Jul 17 17:07:05 2014 +0000 am a749c0d3: Keep enough state to completely reset cipher instances * commit a749c0d351216be38879600ee8ed01c6793aa256: Keep enough state to completely reset cipher instances commit 8573ad0ddcf7e2f8b2e5ac84c34b7ffab303155c Merge: 4ca5b06 70fdb6d Author: Koushik Dutta Date: Thu Jul 17 17:06:36 2014 +0000 am 70fdb6d2: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit 70fdb6d2bfa0c313fe389827f0025288f6aeb947: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit 4ca5b0625e3f5a15ae8adf833ab5a69f9d7d517f Merge: 119abfb ded66f5 Author: Koushik Dutta Date: Thu Jul 17 17:06:35 2014 +0000 am ded66f5f: Various fixes in OpenSSLEngineImpl. * commit ded66f5f696994ce7620552e16a4e9124e69e052: Various fixes in OpenSSLEngineImpl. commit 119abfba1fcd9c9cfbd15d0a4ca9ed2188fdfab0 Merge: 5713cdf cbe1f28 Author: Kenny Root Date: Thu Jul 17 15:56:57 2014 +0000 am cbe1f28a: Merge ""Keep enough state to completely reset cipher instances"" * commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae: Keep enough state to completely reset cipher instances commit cbe1f28adf64396561a3b65bf1452dfa9b6e35ae Merge: e08f238 084e308 Author: Kenny Root Date: Thu Jul 17 15:48:58 2014 +0000 Merge ""Keep enough state to completely reset cipher instances"" commit 3b7268cde4a4fc59591da8a93691927ebf3add57 Merge: cbe1f28 7ac13e0 Author: Alex Klyubin Date: Thu Jul 17 18:20:43 2014 +0000 Merge ""Improve the Javadoc of PSKKeyManager."" commit 5713cdf71c5c6e5179e8369263c702e9512afdd0 Merge: cf55719 e08f238 Author: Koushik Dutta Date: Wed Jul 16 22:05:17 2014 +0000 am e08f2385: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. * commit e08f238580e8ee471012bef8240c8d3397c7b780: OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. commit cf557195a9b60d7f51a48500afde38481ddbc91c Merge: cbbd7d1 986aeb7 Author: Kenny Root Date: Wed Jul 16 21:41:12 2014 +0000 am 986aeb78: Merge ""Various fixes in OpenSSLEngineImpl."" * commit 986aeb78e533540463daf1753e24840f75b25ce6: Various fixes in OpenSSLEngineImpl. commit e08f238580e8ee471012bef8240c8d3397c7b780 Author: Koushik Dutta Date: Tue Jul 15 22:40:23 2014 OpenSSLEngine Impl: Fix bug where SSL Handshake never completes when using NPN. Change-Id: Idc78204b7077fb367b64e1867c807cd39f596f98 commit 7ac13e03a79d0c99d181b1a28b1b3699ba3d5739 Author: Alex Klyubin Date: Wed Jul 16 08:33:02 2014 Improve the Javadoc of PSKKeyManager. This clarifies several points and adds sample code. Bug: 15073623 Change-Id: I6e8aadc52277e238a998d6cee36795dab1151d58 commit 986aeb78e533540463daf1753e24840f75b25ce6 Merge: 8f9ac1a bdfcc18 Author: Kenny Root Date: Wed Jul 16 21:15:30 2014 +0000 Merge ""Various fixes in OpenSSLEngineImpl."" commit bdfcc189efe41a3f812aeb55ea634bace67d159a Author: Koushik Dutta Date: Sat Jun 28 19:19:21 2014 Various fixes in OpenSSLEngineImpl. Fix ""Buffers were not large enough"" exception by directly using the destination buffers. Corrections around bytesProduced and bytesConsumed behavior. Return BUFFER_OVERFLOW if a zero length destination is provided to unwrap. Change-Id: I1f1e9b72cd6968ed4f3c3c0edccbccebc33d6790 commit cbbd7d10e8e484c44a78e5b27e8fecda195f1692 Merge: ec7f8e6 fdb7d8c Author: Alex Klyubin Date: Tue Jul 15 18:49:14 2014 +0000 am fdb7d8c5: Enable PSK cipher suites when PSKKeyManager is provided. * commit fdb7d8c53dabac5551e2499d045ba6829bcfc0a0: Enable PSK cipher suites when PSKKeyManager is provided. commit ec7f8e6b27330160f88540f4f2ace7bc2a0720a3 Merge: 5b8ccf1 8f9ac1a Author: Alex Klyubin Date: Tue Jul 15 15:53:46 2014 +0000 am 8f9ac1af: Enable PSK cipher suites when PSKKeyManager is provided. * commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17: Enable PSK cipher suites when PSKKeyManager is provided. commit 5b8ccf1b09df6f35c1709bfc8fd727a291094a5b Merge: 69a2e46 6e2315f Author: Ed Heyl Date: Tue Jul 15 13:34:25 2014 +0000 am 6e2315fd: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. * commit 6e2315fd96c3c4a47450c1a437babacc94bc31a6: reconcile aosp (e79c25bf33e10da41e489c537823f678e1a1169c) after branching. Please do not merge. commit 084e3086be1d7a6b9280b64c7c8cdb7b41a13bea Author: Kenny Root Date: Mon Jul 14 13:25:32 2014 Keep enough state to completely reset cipher instances OpenSSLs RC4 mutates the given key. AES/CTR mutates the IV. We must store these values locally to enable ""doFinal"" to cause the Cipher instance to be reset to what it was right after ""init"". Note that resetting and encrypting with the same key or IV breaks semantic security. Bug: 16298401 Bug: Change-Id: Ie7e4dcb6cf6cc33ddad31d6b47066dc1b34e6894 commit 69a2e460cc0a40e1b951e400589b9932609079ec Merge: 8b7bb32 bca895f Author: David Benjamin Date: Mon Jul 14 18:17:28 2014 +0000 am bca895f8: Pass output buffer length into EVP_DigestSignFinal. * commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d: Pass output buffer length into EVP_DigestSignFinal. commit 8b7bb32af09a01e80442b70dd23e6997a937f103 Merge: a2404c9 e79c25b Author: Kenny Root Date: Mon Jul 14 18:17:28 2014 +0000 am e79c25bf: Merge ""DHKeyPairGenerator: use provided params"" * commit e79c25bf33e10da41e489c537823f678e1a1169c: DHKeyPairGenerator: use provided params commit 8f9ac1af0cbdf00e5e47aee32c132522ebc3bd17 Author: Alex Klyubin Date: Thu Jun 19 13:37:24 2014 Enable PSK cipher suites when PSKKeyManager is provided. This enables TLS-PSK cipher suites by default iff SSLContext is initialized with a PSKKeyManager. For consistency, X.509 based cipher suites are no longer enabled by default at all times they are now only enabled by default iff SSLContext is initialized with a X509KeyManager or a X509TrustManager. When both X.509 and PSK cipher suites need to be enabled, PSK cipher suites are given higher priority in the resulting list of cipher suites. This is based on the assumption that in most cases users of TLS/SSL who enable TLS-PSK would prefer TLS-PSK to be used when the peer supports TLS-PSK. Bug: 15073623 Change-Id: I8e2bc3e7a1ea8a986e468973b6bad19dc6b7bc3c commit bca895f809dd2cef7a0834f0bfeb2a06e42b277d Author: David Benjamin Date: Thu Jul 10 18:12:08 2014 Pass output buffer length into EVP_DigestSignFinal. EVP_DigestSignFinal expects the input buffer length as *siglen on input. In addition, if sigret is NULL, it returns the buffer size needed. Use this rather than making assumptions about the EVP_PKEY used to initialize the EVP_MD_CTX. commit e79c25bf33e10da41e489c537823f678e1a1169c Merge: a328492 9b226f9 Author: Kenny Root Date: Fri Jul 11 16:46:23 2014 +0000 Merge ""DHKeyPairGenerator: use provided params"" commit 9b226f90a992a4a2267b7a813e3b869851945c4d Author: Kenny Root Date: Thu Jul 10 14:50:48 2014 DHKeyPairGenerator: use provided params If the prime is provided in the DHParameterSpec, then use it to generate the key. Bug: 16188130 Change-Id: I42de02c71a58d691ef7ba6e2252367105687b758 Bug: 18388980 Change-Id: I853b02a32db113a5af3f6166e7d61fab58c3ff73/"
,,0.1385,conscrypt,"Convert EVP_PKEY to new style To avoid conflicts in the language spec and how Conscrypt does native calls, we need to wrap all native references in a Java object reference. Calling NativeCryptos static native methods with a raw pointer doesnt guarantee that the calling object wont be finalized during the method running. This pass fixes EVP_PKEY references, but more passes are needed. Bug: 16656908 Change-Id: I5925da40cb37cd328b3a126404944f771732a43e/"
,,0.1236,conscrypt,"Remove Conscrypt support for DSA BoringSSL removes support for DSA, so theres no point in maintaining this now. There have been virtually zero SSL certificates issued using DSA for many years as well. Change-Id: Id940643b85ba39b03038aabc6da9ec0285db66c4/"
,,0.107,conscrypt,"OpenSSLCipher: add AEAD cipher This allows us to provide an implementation of AES-GCM using the new EVP_AEAD interface in BoringSSL. It simply buffers up the input until doFinal(...) is called which makes it much safer than any streaming interfaces, because the caller cant use the plaintext until its authenticated by the GHASH (or whatever other AEAD you happen to use). Bug: 20636336 Change-Id: I6e4b063a8137a16102b1f6ac15687a38ddfe1691/"
,,0.0833,conscrypt,"Update to latest Conscrypt This includes AES/GCM/NoPadding support, changes for the latest BoringSSL revision, and some fixes while compiling with debugging flags fixes. Bug: 21085702 Change-Id: I0de7b15a32f532e625d74729fc6ff20809af6c78/external/conscrypt: add NativeConstants. NativeConstants.java is generated by a C program and thus the values will automatically be kept in sync with the contents of the OpenSSL headers. Bug: 20521989 Change-Id: Ib5a97bf6ace05988e3eef4a9c8e02d0f707d46ad/"
,,0.2054,conscrypt,"am 6fd6f862: am 05b39385: Merge changes I960960c3,Ifc556ba6,I34b9d839 * commit 6fd6f8620f883387f2b24c9654dfbabf76c3c591: Update CryptoUpcalls documentation Documentation fixes OpenSSLCipher: remove unused variable/am 05b39385: Merge changes I960960c3,Ifc556ba6,I34b9d839 * commit 05b393852f1f6f5529ee454503dfd2c795e64330: Update CryptoUpcalls documentation Documentation fixes OpenSSLCipher: remove unused variable/Merge changes I960960c3,Ifc556ba6,I34b9d839 * changes: Update CryptoUpcalls documentation Documentation fixes OpenSSLCipher: remove unused variable/Documentation fixes Although we dont currently publish this to javadoc, we should keep javadoc conventions by inserting paragraph separators here. Change-Id: Ifc556ba6da74f32dafe3e4891ce3a34eccb59ae6/SSL: select the right key type for kx During the switch to BoringSSL this function was rewritten and it requested DH public key with RSA signature for a lot of things. (cherry picked from commit d8606d56b6367d55174527c2206e51b474caf0d2) Bug: 20641394 Change-Id: Id3880b01ed1810c5d7af9996c48ce45fdf4850f8/SSL: select the right key type for kx During the switch to BoringSSL this function was rewritten and it requested DH public key with RSA signature for a lot of things. Bug: 20641394 Change-Id: Id3880b01ed1810c5d7af9996c48ce45fdf4850f8/"
,,0.3201,conscrypt,"Add isFinite flag to OpenSSLBIOInputStream. The BIO created by OpenSSLBIOInputStream currently returns and sets the retry flag when read() returns zero on the underlying InputStream. This is correct for ìinfiniteî streams (like a socket), but isnt correct for streams that have a definitive EOF. This change adds a flag to OpenSSLBIOInputStream so that cases where the input is finite (i.e. when parsing a PKCS#7 or X.509 block) can correctly return 0 at EOF from |BIO_read|. (cherry picked from commit 66537ee0121bdd14737191d14927da223f0809ee) Bug: 21396526 Bug: 21209493 Change-Id: Iaad5845621ab8b89b42d5d3ca8e67e297278ca55/Add isFinite flag to OpenSSLBIOInputStream. The BIO created by OpenSSLBIOInputStream currently returns and sets the retry flag when read() returns zero on the underlying InputStream. This is correct for ìinfiniteî streams (like a socket), but isnt correct for streams that have a definitive EOF. This change adds a flag to OpenSSLBIOInputStream so that cases where the input is finite (i.e. when parsing a PKCS#7 or X.509 block) can correctly return 0 at EOF from |BIO_read|. Bug: 21396526 Bug: 21209493 Change-Id: Iaad5845621ab8b89b42d5d3ca8e67e297278ca55/"
,,0.096,conscrypt,"am e15fba52: am 96b561d7: Merge ""Fix fast path for OpenSSLECPublicKey"" * commit e15fba52e787b98bc183061923dfbf1684bbc693: Fix fast path for OpenSSLECPublicKey/am 96b561d7: Merge ""Fix fast path for OpenSSLECPublicKey"" * commit 96b561d7eeb211a91c5a989fecc187a84588949f: Fix fast path for OpenSSLECPublicKey/Merge ""Fix fast path for OpenSSLECPublicKey""/"
,,0.3632,conscrypt,"OpenSSLX509Certificate: use OID if alg name unavailable If we cannot map the signature OID type to a canonical name, then we should try to get an instance of the signature type using the OID. Additionally, we should return the OID for the instead of null. Bug: 22365511 Change-Id: I1ebf48667cf720ee5c7751667601eec2f6f8ec91/OpenSSLX509Certificate: mark mContext as transient Since mContext should not participate in the serialization process, hide it with the transient qualifier. This will prevent the field from initialization during the unserialization of this class. Then of course the instance will be in a valid state. (cherry picked from commit 8d57b9dbbd883422a0ff02083bfcf637b097e504) Bug: 21437603 Change-Id: Ie9453c16d11820a91caff92c3f7b326d12f8a8f4/OpenSSLX509Certificate: mark mContext as transient Since mContext should not participate in the serialization process, hide it with the transient qualifier. This will prevent the field from initialization during the unserialization of this class. Then of course the instance will be in a valid state. Bug: 21437603 Change-Id: Id5b8a83b6000c2219f3246f93aff7a9c6453f639/OpenSSLX509Certificate: mark mContext as transient Since mContext should not participate in the serialization process, hide it with the transient qualifier. This will prevent the field from initialization during the unserialization of this class. Then of course the instance will be in a valid state. Bug: 21437603 Change-Id: Ie9453c16d11820a91caff92c3f7b326d12f8a8f4/Add isFinite flag to OpenSSLBIOInputStream. The BIO created by OpenSSLBIOInputStream currently returns and sets the retry flag when read() returns zero on the underlying InputStream. This is correct for ìinfiniteî streams (like a socket), but isnt correct for streams that have a definitive EOF. This change adds a flag to OpenSSLBIOInputStream so that cases where the input is finite (i.e. when parsing a PKCS#7 or X.509 block) can correctly return 0 at EOF from |BIO_read|. (cherry picked from commit 66537ee0121bdd14737191d14927da223f0809ee) Bug: 21396526 Bug: 21209493 Change-Id: Iaad5845621ab8b89b42d5d3ca8e67e297278ca55/Add isFinite flag to OpenSSLBIOInputStream. The BIO created by OpenSSLBIOInputStream currently returns and sets the retry flag when read() returns zero on the underlying InputStream. This is correct for ìinfiniteî streams (like a socket), but isnt correct for streams that have a definitive EOF. This change adds a flag to OpenSSLBIOInputStream so that cases where the input is finite (i.e. when parsing a PKCS#7 or X.509 block) can correctly return 0 at EOF from |BIO_read|. Bug: 21396526 Bug: 21209493 Change-Id: Iaad5845621ab8b89b42d5d3ca8e67e297278ca55/"
,,0.3138,conscrypt,"Add isFinite flag to OpenSSLBIOInputStream. The BIO created by OpenSSLBIOInputStream currently returns and sets the retry flag when read() returns zero on the underlying InputStream. This is correct for ìinfiniteî streams (like a socket), but isnt correct for streams that have a definitive EOF. This change adds a flag to OpenSSLBIOInputStream so that cases where the input is finite (i.e. when parsing a PKCS#7 or X.509 block) can correctly return 0 at EOF from |BIO_read|. (cherry picked from commit 66537ee0121bdd14737191d14927da223f0809ee) Bug: 21396526 Bug: 21209493 Change-Id: Iaad5845621ab8b89b42d5d3ca8e67e297278ca55/Add isFinite flag to OpenSSLBIOInputStream. The BIO created by OpenSSLBIOInputStream currently returns and sets the retry flag when read() returns zero on the underlying InputStream. This is correct for ìinfiniteî streams (like a socket), but isnt correct for streams that have a definitive EOF. This change adds a flag to OpenSSLBIOInputStream so that cases where the input is finite (i.e. when parsing a PKCS#7 or X.509 block) can correctly return 0 at EOF from |BIO_read|. Bug: 21396526 Bug: 21209493 Change-Id: Iaad5845621ab8b89b42d5d3ca8e67e297278ca55/"
,,0.315,conscrypt,"Add isFinite flag to OpenSSLBIOInputStream. The BIO created by OpenSSLBIOInputStream currently returns and sets the retry flag when read() returns zero on the underlying InputStream. This is correct for ìinfiniteî streams (like a socket), but isnt correct for streams that have a definitive EOF. This change adds a flag to OpenSSLBIOInputStream so that cases where the input is finite (i.e. when parsing a PKCS#7 or X.509 block) can correctly return 0 at EOF from |BIO_read|. (cherry picked from commit 66537ee0121bdd14737191d14927da223f0809ee) Bug: 21396526 Bug: 21209493 Change-Id: Iaad5845621ab8b89b42d5d3ca8e67e297278ca55/Add isFinite flag to OpenSSLBIOInputStream. The BIO created by OpenSSLBIOInputStream currently returns and sets the retry flag when read() returns zero on the underlying InputStream. This is correct for ìinfiniteî streams (like a socket), but isnt correct for streams that have a definitive EOF. This change adds a flag to OpenSSLBIOInputStream so that cases where the input is finite (i.e. when parsing a PKCS#7 or X.509 block) can correctly return 0 at EOF from |BIO_read|. Bug: 21396526 Bug: 21209493 Change-Id: Iaad5845621ab8b89b42d5d3ca8e67e297278ca55/"
,,0.3289,conscrypt,"Add isFinite flag to OpenSSLBIOInputStream. The BIO created by OpenSSLBIOInputStream currently returns and sets the retry flag when read() returns zero on the underlying InputStream. This is correct for ìinfiniteî streams (like a socket), but isnt correct for streams that have a definitive EOF. This change adds a flag to OpenSSLBIOInputStream so that cases where the input is finite (i.e. when parsing a PKCS#7 or X.509 block) can correctly return 0 at EOF from |BIO_read|. (cherry picked from commit 66537ee0121bdd14737191d14927da223f0809ee) Bug: 21396526 Bug: 21209493 Change-Id: Iaad5845621ab8b89b42d5d3ca8e67e297278ca55/Add isFinite flag to OpenSSLBIOInputStream. The BIO created by OpenSSLBIOInputStream currently returns and sets the retry flag when read() returns zero on the underlying InputStream. This is correct for ìinfiniteî streams (like a socket), but isnt correct for streams that have a definitive EOF. This change adds a flag to OpenSSLBIOInputStream so that cases where the input is finite (i.e. when parsing a PKCS#7 or X.509 block) can correctly return 0 at EOF from |BIO_read|. Bug: 21396526 Bug: 21209493 Change-Id: Iaad5845621ab8b89b42d5d3ca8e67e297278ca55/"
,,0.1385,conscrypt,"Remove java.lang.IntegralToString usage. java.lang.IntegralToString is going away, replaced its usage by small helper class, Hex. + Fixes the ""Illegal class access"" exception from TrustedCertificateStoreTest & TrustManagerImplTest. (cherry-picked from 61e984f441b9194f0ae907e6fc28502858df6852 + 61e984f441b9194f0ae907e6fc28502858df6852) Bug: 24932279 (cherry picked from commit e279a9854d15d20a0b3807fe96f0805b43cd4dae) Change-Id: Id48cd9c2dfade328f01c669afa20fe2e7a630fc2/Remove java.lang.IntegralToString usage. java.lang.IntegralToString is going away, replaced its usage by small helper class, Hex. + Fixes the ""Illegal class access"" exception from TrustedCertificateStoreTest & TrustManagerImplTest. (cherry-picked from 61e984f441b9194f0ae907e6fc28502858df6852 + 61e984f441b9194f0ae907e6fc28502858df6852) Bug: 24932279 Change-Id: I83bc9543e44e3d1026fa5b0a31b8097bb3838ab3/"
,,0.1385,conscrypt,"Remove java.lang.IntegralToString usage. java.lang.IntegralToString is going away, replaced its usage by small helper class, Hex. + Fixes the ""Illegal class access"" exception from TrustedCertificateStoreTest & TrustManagerImplTest. (cherry-picked from 61e984f441b9194f0ae907e6fc28502858df6852 + 61e984f441b9194f0ae907e6fc28502858df6852) Bug: 24932279 (cherry picked from commit e279a9854d15d20a0b3807fe96f0805b43cd4dae) Change-Id: Id48cd9c2dfade328f01c669afa20fe2e7a630fc2/Remove java.lang.IntegralToString usage. java.lang.IntegralToString is going away, replaced its usage by small helper class, Hex. + Fixes the ""Illegal class access"" exception from TrustedCertificateStoreTest & TrustManagerImplTest. (cherry-picked from 61e984f441b9194f0ae907e6fc28502858df6852 + 61e984f441b9194f0ae907e6fc28502858df6852) Bug: 24932279 Change-Id: I83bc9543e44e3d1026fa5b0a31b8097bb3838ab3/"
,,0.1437,conscrypt,"Remove java.lang.IntegralToString usage. java.lang.IntegralToString is going away, replaced its usage by small helper class, Hex. + Fixes the ""Illegal class access"" exception from TrustedCertificateStoreTest & TrustManagerImplTest. (cherry-picked from 61e984f441b9194f0ae907e6fc28502858df6852 + 61e984f441b9194f0ae907e6fc28502858df6852) Bug: 24932279 (cherry picked from commit e279a9854d15d20a0b3807fe96f0805b43cd4dae) Change-Id: Id48cd9c2dfade328f01c669afa20fe2e7a630fc2/Make TrustedCertificateStore not final This allows custom TrustedCertificateStores to be passed into TrustManagerImpl to avoid the performance cost of having to load all trusted certificates into a KeyStore and index them in a TrustedCertificateIndex. Change-Id: I7ef7a51fffa17c51369774ddc8b3b048af9dafe6/Remove java.lang.IntegralToString usage. java.lang.IntegralToString is going away, replaced its usage by small helper class, Hex. + Fixes the ""Illegal class access"" exception from TrustedCertificateStoreTest & TrustManagerImplTest. (cherry-picked from 61e984f441b9194f0ae907e6fc28502858df6852 + 61e984f441b9194f0ae907e6fc28502858df6852) Bug: 24932279 Change-Id: I83bc9543e44e3d1026fa5b0a31b8097bb3838ab3/"
,,0.1451,conscrypt,"Remove java.lang.IntegralToString usage. java.lang.IntegralToString is going away, replaced its usage by small helper class, Hex. + Fixes the ""Illegal class access"" exception from TrustedCertificateStoreTest & TrustManagerImplTest. (cherry-picked from 61e984f441b9194f0ae907e6fc28502858df6852 + 61e984f441b9194f0ae907e6fc28502858df6852) Bug: 24932279 (cherry picked from commit e279a9854d15d20a0b3807fe96f0805b43cd4dae) Change-Id: Id48cd9c2dfade328f01c669afa20fe2e7a630fc2/Remove java.lang.IntegralToString usage. java.lang.IntegralToString is going away, replaced its usage by small helper class, Hex. + Fixes the ""Illegal class access"" exception from TrustedCertificateStoreTest & TrustManagerImplTest. (cherry-picked from 61e984f441b9194f0ae907e6fc28502858df6852 + 61e984f441b9194f0ae907e6fc28502858df6852) Bug: 24932279 Change-Id: I83bc9543e44e3d1026fa5b0a31b8097bb3838ab3/"
,,0.1324,conscrypt,Fix finalizer crash in OpenSSLSessionImpl. am: d3d92b6f7e * commit d3d92b6f7e9bc13f493ad6cddd9586dab47ed737: Fix finalizer crash in OpenSSLSessionImpl./Fix finalizer crash in OpenSSLSessionImpl. bug: 25838479 (cherry picked from commit 0f0237f1a00f4944f06c09dfaec802269e879dfe) Change-Id: Ic98725c5b90af62a16b630676cf36bda0fa7be6e/Fix finalizer crash in OpenSSLSessionImpl. bug: 25838479 Change-Id: Ic619fc8c1ca33f6949811939154cb0775bfb9f55/
,,0.0639,conscrypt,Expose CT through libcore NetworkSecurityPolicy Bug: 28746284 Change-Id: I6549a997823b38dc256911a66ac558c90bf6f762/
,,0.298,conscrypt,"Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.2785,conscrypt,"Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.2875,conscrypt,"Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.2935,conscrypt,"Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.2875,conscrypt,"Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.2427,conscrypt,"Trim constants and remove unsupported key types. (#230) We can assume BoringSSL now, so the ifdefs are no longer needed. This also removes the fixed (EC)DH key types. BoringSSL does not support the fixed (EC)DH modes and will never report them. This would be a no-op except merely knowing how the values mapped caused SSLUtils.getSupportedClientKeyTypes to report them. This figures into what is passed into chooseClientAlias. Forwarding along any of those values to chooseClientAlias would be incorrect. (But Ive never seen a fixed (EC)DH certificate or a server that requests one, and BoringSSL couldnt parse one anyway. So this is unlikely to have any actual consequence.)/Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.28600000000000003,conscrypt,"Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.2785,conscrypt,"Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.28300000000000003,conscrypt,"Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.2563,conscrypt,"Fix a bunch of warnings. (#254) Removes unused variables, fixes cases of non-final ALL_CAPS_VARS, removes wildcard import./Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes fixes to the Conscrypt engine. (#201)/"
,,0.2438,conscrypt,"Support Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.2604,conscrypt,"Fix a bunch of warnings. (#254) Removes unused variables, fixes cases of non-final ALL_CAPS_VARS, removes wildcard import./Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.2905,conscrypt,"Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.2641,conscrypt,"Properly handle setSessionTimeout(0) (#289) Fixes session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.2845,conscrypt,"Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.2563,conscrypt,"Fix a bunch of warnings. (#254) Removes unused variables, fixes cases of non-final ALL_CAPS_VARS, removes wildcard import./Refactoring session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.2289,conscrypt,"Customize default provider name based on platform (#314) Fixes Java 6 Runtime (#299) Various fixes to support Java 6, 7, and 8. Separating out utility classes (for openjdk) to be explicit as to which methods are supported by particular Java version. Adding the ability to specify the test JVM to use on the command-line. For example, the following will build with the default Java installation, but will run the openjdk and integ-tests with Java 6: ./gradlew build Fixes session management (#172) This change breaks session management into two distinct types: SslSessionWrapper: These are created as BoringSSL calls back the new session handler, allowing the application to cache sessions. Clients will also offer these to BoringSSL for reuse if a compatible session was found. BoringSSL is free to use it or not, but the Conscrypt code no longer makes assumptions here. Instead, it always uses the ActiveSession. ActiveSession: This is a session that wraps the SSL instance (rather than the SSL_SESSION wherever possible). That way no concern has to be paid to what BoringSSL is doing with sessions under the covers. Fixes"
,,0.0774,conscrypt,Add buffer allocators to ConscryptEngineSocket (#550) This allows users to set a buffer allocator for both the buffers used by ConscryptEngineSocket directly and the ones use by the enclosed ConscryptEngine. Fixes
,,0.066,frostwire,[desktop] Fixes bug setting author on m4a from YT. Cleanup./
,,0.066,frostwire,[desktop] build 190 to fix linux RPM installer./
,,0.063,frostwire,[common] keyword search encoding bug fix/
,,0.0901,jna,"* include/ffi_common.h: Delete, after moving contents to... * include/ffi_private.h: Subsume contents of ffi_common.h. * include/Makefile.am (noinst_HEADERS): Remove ffi_common.h. * include/Makefile.in: Rebuilt. * arm/ffi.c, m68k/ffi.c, mips/ffi.c, powerpc/ffi.c, s390/ffi.c, ia64/ffi.c: Include ffi_private.h, not ffi_common.h. * alpha/ffi.c, sparc/ffi.c, x86/ffi.c: Dont include ffi_common.h. * types.c, raw_api.c, java_raw_api.c, prep_cif.c: Dont include ffi_common.h. * debug.c: Include ffi_private.h instead of ffi_common.h. * mips/ffi.c (calc_n32_struct_flags): Make static. (FIX_ARGP): Remove call to debugging routine ffi_stop_here. * mips/n32.S: Include ffi_private.h. * mips/o32.S: Include ffi_private.h./"
,,0.0697,jna,avoid premature GC of Memory with NIO Buffers extant git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.066,jna,fix WinDef.POINT references/
,,0.0618,jna,fix WinDef.POINT references/
,,0.066,jna,fix WinDef.POINT references/
,,0.0616,jna,update w32 natives fix stdcall stack in libffi auto-update version resource/
,,0.0648,jna,GetProcessTimes and GetProcessIoCounters (#959) * GetProcessTimes and GetProcessIoCounters * Fix unit test ticks calculation/
,,0.0607,OpenDDS,Merge pull request from objectcomputing/ipv6_updates Fix issues with IPV6 enabled builds on Windows./
,,0.0669,OpenDDS,Merge pull request from objectcomputing/ipv6_updates Fix issues with IPV6 enabled builds on Windows./
,,0.0665,OpenDDS,Avoid top level const/Merge pull request from objectcomputing/ipv6_updates Fix issues with IPV6 enabled builds on Windows./
,,0.066,OpenDDS,Dispose could cause error Unable to take sample/
,,0.0697,OpenDDS,Merge branch jwi-gendirbug/Merge pull request from huangminghuang/tcp_wait_for_acks Fix TCP wait_for_acknowledgements() bug/Fix TCP wait_for_acknowledgements() bug/
,,0.0697,OpenDDS,Merge branch jwi-gendirbug/Merge pull request from huangminghuang/tcp_wait_for_acks Fix TCP wait_for_acknowledgements() bug/Fix TCP wait_for_acknowledgements() bug/
,,0.0778,OpenDDS,Merge branch jwi-gendirbug/Merge pull request from huangminghuang/tcp_wait_for_acks Fix TCP wait_for_acknowledgements() bug/Fix TCP wait_for_acknowledgements() bug/
,,0.0685,OpenDDS,Fix unsynchronized access to REQUEST ACK TransportQueueElement./Merge branch jwi-gendirbug/Merge pull request from huangminghuang/tcp_wait_for_acks Fix TCP wait_for_acknowledgements() bug/Fix TCP wait_for_acknowledgements() bug/
,,0.0628,OpenDDS,Incremental addition of ifdefs in dds/DCPS/RTPS/*; build fails though/
,,0.0599,OpenDDS,Fixed Typo in prev commit/
,,0.0772,OpenDDS,"update output format for the return value of what() when it is called by instances of std::runtime_error We find two patches in OpenDDS-3.10 vs OpenDDS-3.11, which updates the output format of what() when it is called by std::runtime_error instances: from %s to %C. These two patches taken place in minimal/Publisher.cpp and minimal/Subscriber.cpp. One of them is like this: } catch (std::runtime_error& err) { ACE_ERROR_RETURN((LM_ERROR, ACE_TEXT(""ERROR: main() %s\n""), + ACE_ERROR_RETURN((LM_ERROR, ACE_TEXT(""ERROR: main() %C\n""), err.what()),"
,,0.0852,OpenDDS,Serialized Payload Alignment Changes (#1374) * Serialized Payload Alignment Changes * Bug fix * code and output layout fixes/
,,0.0669,realm-java,Updated with newest TightDB containing BREAKING database file changes. (API ver 10)/
,,0.0577,realm-java,Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.0599,realm-java,Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.0577,realm-java,Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.0577,realm-java,Merge pull request from realm/lk-fix-javadoc Fix javadocs/
,,0.0599,realm-java,Merge pull request from realm/lk/fix-doc Fix javadoc/Fix javadoc/
,,0.0599,realm-java,Merge pull request from realm/lk/fix-doc Fix javadoc/Fix javadoc/
,,0.0599,realm-java,Merge pull request from realm/merge-fbb711-to-master Fix merge from fbb711 to master/
,,0.0621,realm-java,Merge pull request from realm/merge-fbb711-to-master Fix merge from fbb711 to master/
,,0.0686,realm-java,Fix change listener getting GCed (#5311)/
,,0.0686,realm-java,Fix change listener getting GCed (#5311)/
,,0.371,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3821,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3735,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3821,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3809,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3722,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3809,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3772,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3772,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3846,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3784,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3759,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3759,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3772,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3747,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3698,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3759,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3833,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.3846,realm-java,Converting examples to RxJava2 (#5141) * Add changelog * Move Pair into public API (#5081) * Convert RxJava1 to RxJava2 (#4992) * Apply rxjava2 to unitTestExample * Update Jenkinsfile to store junit result of unitTestExample. * Convert newsreaderExample to RxJava2. * RxJava2: Add support for changeset observables (#5089) * Update rxJavaExample and improve some formatting. * Fix unit testing. * Fix build.gradle. * Update build.gradle to fix lint errors. * Improve some formatting. * Improve formatting. * Update style of RxJavaExample. * Add missing colors.xml file. * Update styles and colors. * Rename some disposables. * PR feedback. * flatMap switchMap and improve formatting. * Improve formatting. * Converting newsreaserExample to lambda. * Improve formatting. * Improve formatting. * Apply RxJava2 to unit testing. * Improve formatting. * Apply Lambda to rxJavaExample. * Improve formatting. * PR feedback * Re-enable RxJava2 examples * CompositeDisposable.dispose() CompositeDisposable.clear() * PR feedback./
,,0.0599,realm-java,Merge pull request from realm/merge-666aab-to-master Fix merge from 666aab to master/
,,0.0648,realm-java,Align User Lookup implementation (#5109) * fixes
,,0.0621,realm-java,Merge pull request from realm/merge-666aab-to-master Fix merge from 666aab to master/
,,0.1314,rocksdb,"Revert ""Fix bad merge of D16791 and D16767"" This reverts commit 839c8ecfcd486f0db82ecb755a137ad95909966f./Fix bad merge of D16791 and D16767 Summary: A bad Auto-Merge caused log buffer is flushed twice. Remove the unintended one. Test Plan: Should already be tested (the code looks the same as when I ran unit tests). Reviewers: haobo, igor Reviewed By: haobo CC: ljin, yhchiang, leveldb Differential Revision:"
,,0.0673,rocksdb,Fix another rebase problems./
,,0.2617,rocksdb,"LDBCommand::SelectCommand to use a struct as the parameter Summary: The function wrapper for LDBCommand::SelectCommand is too long so that Windows build fails with warning ""decorated name length exceeded, name was truncated"". Shrink the length by using a struct. Test Plan: Build on both of Linux and Windows and make sure the warning doesnt show in either platform. Reviewers: andrewkr, adsharma, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: leveldb, andrewkr, dhruba Differential Revision: to move from template to function wrapper Summary: Build failure with some compiler setting with tools/reduce_levels_test.cc:97: undefined reference to `rocksdb::LDBCommand* rocksdb::LDBCommand::InitFromCmdLineArgs<rocksdb::LDBCommand* (*)(std::string const&, std::vector<std::string, std::allocator<std::string> > const&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&, std::vector<std::string, std::allocator<std::string> > const&)>(std::vector<std::string, std::allocator<std::string> > const&, rocksdb::Options const&, rocksdb::LDBOptions const&, std::vector<rocksdb::ColumnFamilyDescriptor, std::allocator<rocksdb::ColumnFamilyDescriptor> > const*, rocksdb::LDBCommand* (*)(std::string const&, std::vector<std::string, std::allocator<std::string> > const&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&, std::vector<std::string, std::allocator<std::string> > const&)) Fix it by changing to function pointer instead Test Plan: Run all existing tests Reviewers: andrewkr, kradhakrishnan, IslamAbdelRahman Reviewed By: IslamAbdelRahman Subscribers: adsharma, lightmark, yiwu, leveldb, andrewkr, dhruba Differential Revision:"
,,0.066,rocksdb,"Add NoSpace subcode to IOError (#1320) Add a sub code to distinguish ""out of space"" errors from regular I/O errors/"
,,0.0702,rocksdb,"Add NoSpace subcode to IOError (#1320) Add a sub code to distinguish ""out of space"" errors from regular I/O errors/"
,,0.0639,rocksdb,"Add NoSpace subcode to IOError (#1320) Add a sub code to distinguish ""out of space"" errors from regular I/O errors/"
,,0.0861,rocksdb,"Fix MSVC compile error in 32 bit compilation Summary: Passing std::atomic<uint64_t> variables to ASSERT_EQ() results in compile error C2718 const T1: actual parameter with requested alignment of 8 wont be aligned. VS2015 defines std::atomic as specially aligned type ( with alignas), however the compiler does not like declspec(align)ed function arguments. Worked around by casting std::atomic<uint64_t> types to uint64_t in ASSERT_EQ. Closes Differential Revision: D4106788 Pulled By: yiwu-arbug fbshipit-source-id: 5fb42c3/fix assertion failure in Prev() Summary: fix assertion failure in db_stress. It happens because of prefix seek key is larger than merge iterator key when they have the same user key Test Plan: ./db_stress Reviewers: sdong, andrewkr, yiwu, yhchiang Reviewed By: yhchiang Subscribers: andrewkr, dhruba, leveldb Differential Revision:"
,,0.0618,rocksdb,"Add NoSpace subcode to IOError (#1320) Add a sub code to distinguish ""out of space"" errors from regular I/O errors/"
,,0.4782,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/fix lite build Summary: * make `checksum_type_string_map` available for lite * comment out `FilesPerLevel` in lite mode. * travis and legocastle lite build also build `all` target and run tests Closes Differential Revision: D6069822 Pulled By: yiwu-arbug fbshipit-source-id: 9fe92ac220e711e9e6ed4e921bd25ef4314796a0/Allow upgrades from nullptr to some merge operator Summary: Currently, RocksDB does not allow reopening a preexisting DB with no merge operator defined, with a merge operator defined. This means that if a DB ever want to add a merge operator, theres no way to do so currently. Fix this by adding a new verification type `kByNameAllowFromNull` which will allow old values to be nullptr, and new values to be non-nullptr. Closes Differential Revision: D5961131 Pulled By: lth fbshipit-source-id: 06179bebd0d90db3d43690b5eb7345e2d5bab1eb/Make bytes_per_sync and wal_bytes_per_sync mutable Summary: SUMMARY Moves the bytes_per_sync and wal_bytes_per_sync options from immutableoptions to mutable options. Also if wal_bytes_per_sync is changed, the wal file and memtables are flushed. TEST PLAN ran make check all passed Two new tests SetBytesPerSync, SetWalBytesPerSync check that after issuing setoptions with a new value for the var, the db options have the new value. Closes Reviewed By: yiwu-arbug Differential Revision: D5845814 Pulled By: TheRushingWookie fbshipit-source-id: 93b52d779ce623691b546679dcd984a06d2ad1bd/regression test for missing init options Summary: test the `DBOptions(const Options&)` and `ColumnFamilyOptions(const Options&)` constructors. Actually thisll work better once we refactor `RandomInitDBOptions` / `RandomInitCFOptions` to use the authoritative sources of struct members: `db_options_type_info` / `cf_options_type_info` (internal task T21804189 for this). Closes Differential Revision: D5817141 Pulled By: ajkr fbshipit-source-id: 8567c20feced9d1751fdf1f4383e2af30f7e3591/"
,,0.5396,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/Allow upgrades from nullptr to some merge operator Summary: Currently, RocksDB does not allow reopening a preexisting DB with no merge operator defined, with a merge operator defined. This means that if a DB ever want to add a merge operator, theres no way to do so currently. Fix this by adding a new verification type `kByNameAllowFromNull` which will allow old values to be nullptr, and new values to be non-nullptr. Closes Differential Revision: D5961131 Pulled By: lth fbshipit-source-id: 06179bebd0d90db3d43690b5eb7345e2d5bab1eb/Make bytes_per_sync and wal_bytes_per_sync mutable Summary: SUMMARY Moves the bytes_per_sync and wal_bytes_per_sync options from immutableoptions to mutable options. Also if wal_bytes_per_sync is changed, the wal file and memtables are flushed. TEST PLAN ran make check all passed Two new tests SetBytesPerSync, SetWalBytesPerSync check that after issuing setoptions with a new value for the var, the db options have the new value. Closes Reviewed By: yiwu-arbug Differential Revision: D5845814 Pulled By: TheRushingWookie fbshipit-source-id: 93b52d779ce623691b546679dcd984a06d2ad1bd/"
,,0.5051,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/Fix coverity issue for MutableDBOptions default constructor Summary: 228MutableDBOptions::MutableDBOptions() 229 : max_background_jobs(2), 230 base_background_compactions(-1), 231 max_background_compactions(-1), 232 avoid_flush_during_shutdown(false), 233 delayed_write_rate(2 * 1024U * 1024U), 234 max_total_wal_size(0), 235 delete_obsolete_files_period_micros(6ULL * 60 * 60 * 1000000), 236 stats_dump_period_sec(600), 2. uninit_member: Non-static class member bytes_per_sync is not initialized in this constructor nor in any functions that it calls. CID 1419857 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 4. uninit_member: Non-static class member wal_bytes_per_sync is not initialized in this constructor nor in any functions that it calls. 237 max_open_files(-1) {} Closes Differential Revision: D6170424 Pulled By: ajkr fbshipit-source-id: 1f94e86b87611ad2330b8b1707911150978d68b8/Make bytes_per_sync and wal_bytes_per_sync mutable Summary: SUMMARY Moves the bytes_per_sync and wal_bytes_per_sync options from immutableoptions to mutable options. Also if wal_bytes_per_sync is changed, the wal file and memtables are flushed. TEST PLAN ran make check all passed Two new tests SetBytesPerSync, SetWalBytesPerSync check that after issuing setoptions with a new value for the var, the db options have the new value. Closes Reviewed By: yiwu-arbug Differential Revision: D5845814 Pulled By: TheRushingWookie fbshipit-source-id: 93b52d779ce623691b546679dcd984a06d2ad1bd/Include statistics pointer in ImmutableDBOptions::Dump Summary: useful when debugging to tell whether a DB has stats enabled, and whether a stats object is shared across DBs. Closes Differential Revision: D5741755 Pulled By: ajkr fbshipit-source-id: 9b9d51dee77d14d415cd5da985d8d61b5b3837c3/"
,,0.5725,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/fix some misspellings Summary: PTAL ajkr Closes Differential Revision: D5648052 Pulled By: ajkr fbshipit-source-id: 7cd1ddd61364d5a55a10fdd293fa74b2bf89dd98/"
,,0.5913,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/"
,,0.5484,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/regression test for missing init options Summary: test the `DBOptions(const Options&)` and `ColumnFamilyOptions(const Options&)` constructors. Actually thisll work better once we refactor `RandomInitDBOptions` / `RandomInitCFOptions` to use the authoritative sources of struct members: `db_options_type_info` / `cf_options_type_info` (internal task T21804189 for this). Closes Differential Revision: D5817141 Pulled By: ajkr fbshipit-source-id: 8567c20feced9d1751fdf1f4383e2af30f7e3591/"
,,0.5304,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/implement lower bound for iterators Summary: for `SeekToFirst()`, just convert it to a regular `Seek()` if lower bound is specified for operations that iterate backwards over user keys (`SeekForPrev`, `SeekToLast`, `Prev`), change `PrevInternal` to check whether user key went below lower bound every time the user key changes same approach we use to ensure we stay within a prefix when `prefix_same_as_start=true`. Closes Differential Revision: D6158654 Pulled By: ajkr fbshipit-source-id: cb0e3a922e2650d2cd4d1c6e1c0f1e8b729ff518/fix missing manual_wal_flush for DBOptions ctor Summary: currently `ImmutableDBOptions::Dump` use default value for `concurrent_prepare` and `manual_wal_flush`, because DBOptions ctor does not init those member variables. so in LOG file, it will be ``` Options.concurrent_prepare: 0 Options.manual_wal_flush: 0 ``` Closes Differential Revision: D5816240 Pulled By: ajkr fbshipit-source-id: 82335e8bcae3dceedc6a99224e7998de5fad1e50/"
,,0.544,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/Make bytes_per_sync and wal_bytes_per_sync mutable Summary: SUMMARY Moves the bytes_per_sync and wal_bytes_per_sync options from immutableoptions to mutable options. Also if wal_bytes_per_sync is changed, the wal file and memtables are flushed. TEST PLAN ran make check all passed Two new tests SetBytesPerSync, SetWalBytesPerSync check that after issuing setoptions with a new value for the var, the db options have the new value. Closes Reviewed By: yiwu-arbug Differential Revision: D5845814 Pulled By: TheRushingWookie fbshipit-source-id: 93b52d779ce623691b546679dcd984a06d2ad1bd/"
,,0.8446,rocksdb,"arena: derive alignment unit from std::max_align_t Summary: As raised in the arena allocator will return memory that is improperly aligned to store a `std::function` on macOS. Oddly, Im unable to tickle this bug without adding a `std::function` field to `struct ReadOptions`óbut my proposal in does exactly that. In any case, heres a simple reproduction. Apply this bogus patch to get a `std::function` into `struct ReadOptions` ``` a/include/rocksdb/options.h +++ b/include/rocksdb/options.h +1035,8 struct ReadOptions { // Default: 0 uint64_t max_skippable_internal_keys; + std::function<void()> foo; + ReadOptions(); ReadOptions(bool cksum, bool cache); }; ``` then compile `db_properties_test` *with ubsan* and run `ReadLatencyHistogramByLevel`: ``` $ make COMPILE_WITH_UBSAN=1 db_properties_test $ ./db_properties_test ``` ubsan will complain about several misaligned accesses: ``` Note: Google Test filter DBPropertiesTest.ReadLatencyHistogramByLevel [==========] Running 1 test from 1 test case. [----------] Global test environment set-up. [----------] 1 test from DBPropertiesTest [ RUN ] DBPropertiesTest.ReadLatencyHistogramByLevel util/coding.h:372:12: runtime error: load of misaligned address 0x00010d85516c for type const unsigned long, which requires 8 byte alignment 0x00010d85516c: note: pointer points here 01 00 34 57 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 78 24 82 0a 01 00 00 00 ^ util/coding.h:362:3: runtime error: store to misaligned address 0x7fff5733fac4 for type unsigned long, which requires 8 byte alignment 0x7fff5733fac4: note: pointer points here 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 1d 96 0d 01 00 00 00 ^ util/coding.h:372:12: runtime error: load of misaligned address 0x00010d85516c for type const unsigned long, which requires 8 byte alignment 0x00010d85516c: note: pointer points here 01 00 34 57 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 78 24 82 0a 01 00 00 00 ^ version_set.cc:854: runtime error: constructor call on misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ version_set.cc:512: runtime error: constructor call on misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ version_set.cc:505: runtime error: constructor call on misaligned address 0x00010dbfa5e8 for type rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ options.h:931: runtime error: constructor call on misaligned address 0x00010dbfa5e8 for type rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ options.h:931: runtime error: constructor call on misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ functional:1583: runtime error: constructor call on misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1585:9: runtime error: member access within misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1585:9: runtime error: store to misaligned address 0x00010dbfa648 for type __base * (aka __base<void ()> *), which requires 16 byte alignment 0x00010dbfa648: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/version_set.cc:864:29: runtime error: upcast of misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:521:12: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:521:12: runtime error: load of misaligned address 0x00010dbfa5d8 for type rocksdb::TableCache *, which requires 16 byte alignment 0x00010dbfa5d8: note: pointer points here 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 ^ db/version_set.cc:522:9: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:522:9: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/version_set.cc:522:24: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:522:38: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:522:57: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:522:57: runtime error: load of misaligned address 0x00010dbfa678 for type rocksdb::RangeDelAggregator *, which requires 16 byte alignment 0x00010dbfa678: note: pointer points here 01 00 00 00 d0 a1 bf 0d 01 00 00 00 00 00 00 00 00 00 00 00 f8 db 70 0a 01 00 00 00 00 00 00 00 ^ db/version_set.cc:523:54: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:523:54: runtime error: load of misaligned address 0x00010dbfa668 for type rocksdb::HistogramImpl *, which requires 16 byte alignment 0x00010dbfa668: note: pointer points here 01 00 00 00 c8 88 a5 0d 01 00 00 00 00 00 00 00 01 00 00 00 d0 a1 bf 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:524:9: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:524:47: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:524:62: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/table_cache.cc:228:33: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ table/block_based_table_reader.cc:1554:41: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ table/block_based_table_reader.cc:1396:21: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ include/rocksdb/options.h:931:8: runtime error: reference binding to misaligned address 0x00010dbfa628 for type const std::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1584:13: runtime error: load of misaligned address 0x00010dbfa648 for type __base *const (aka __base<void ()> *const), which requires 16 byte alignment 0x00010dbfa648: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c8 a5 97 0d 01 00 00 00 38 36 9b 0d ^ table/block_based_table_reader.cc:1555:24: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/table_cache.cc:244:54: runtime error: load of misaligned address 0x00010dbfa618 for type const bool, which requires 16 byte alignment 0x00010dbfa618: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/table_cache.cc:246:49: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/version_set.cc:532:12: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:532:12: runtime error: member access within misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/version_set.cc:532:26: runtime error: load of misaligned address 0x00010dbfa5f8 for type const rocksdb::Slice *const, which requires 16 byte alignment 0x00010dbfa5f8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ version_set.cc:493: runtime error: member call on misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ version_set.cc:493: runtime error: member call on misaligned address 0x00010dbfa5e8 for type rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ options.h:931: runtime error: member call on misaligned address 0x00010dbfa5e8 for type rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ options.h:931: runtime error: member call on misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ functional:1765: runtime error: member call on misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1766:9: runtime error: member access within misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1766:9: runtime error: load of misaligned address 0x00010dbfa648 for type __base * (aka __base<void ()> *), which requires 16 byte alignment 0x00010dbfa648: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c8 a5 97 0d 01 00 00 00 38 36 9b 0d ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1766:27: runtime error: member access within misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1768:14: runtime error: member access within misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1768:14: runtime error: load of misaligned address 0x00010dbfa648 for type __base * (aka __base<void ()> *), which requires 16 byte alignment 0x00010dbfa648: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c8 a5 97 0d 01 00 00 00 38 36 9b 0d ^ [ OK ] DBPropertiesTest.ReadLatencyHistogramByLevel (1599 ms) [----------] 1 test from DBPropertiesTest (1599 ms total) [----------] Global test environment tear-down [==========] 1 test from 1 test case ran. (1599 ms total) [ PASSED ] 1 test. ``` So it seems the root cause is that the internal implementation of `std::function` on macOS (and perhaps with libc++ generally?) requires 16-byte aligned memory, but the arena allocator only guarantees that the returned memory will be `sizeof(void*)` aligned, which is only 8-byte alignment on my machine. This patch solves the problem by adjusting the allocator to derive the necessary alignment from `alignof(std::max_align_t)`, which is properly 16 bytes on my machine. As I mentioned in none of RocksDBs tests will cause this unaligned access to actually abort the process, but, on macOS, linking CockroachDB against a version of RocksDB with the above patch and letting it run for just a few seconds will cause a SIGABRT. ``` Process 19792 stopped * thread stop reason EXC_BAD_ACCESS (code=EXC_I386_GPFLT) frame 0x0000000004f5e78f cockroach`DBNewIter + 95 cockroach`DBNewIter: 0x4f5e78f callq *0x28(%rax) 0x4f5e792 jmp 0x4f5e79e ; 0x4f5e794 movq %rcx 0x4f5e798 movq %rax, %rdi (lldb) bt * thread stop reason EXC_BAD_ACCESS (code=EXC_I386_GPFLT) * frame 0x0000000004f5e78f cockroach`DBNewIter + 95 ``` Id get you a backtrace, but [Go doesnt include cgo debug information on macOS]( Ive also tried building against libc++ on Linux, where debug information would be available, but I cant seem to trigger the bug there. In any case, this PR both fixes the segfault in CockroachDB and fixes the warnings reported by ubsan. Closes Differential Revision: D5108596 Pulled By: yiwu-arbug fbshipit-source-id: bd5e4323b2ce915ed4fe78e123cb8996aec75a00/"
,,0.8475,rocksdb,"arena: derive alignment unit from std::max_align_t Summary: As raised in the arena allocator will return memory that is improperly aligned to store a `std::function` on macOS. Oddly, Im unable to tickle this bug without adding a `std::function` field to `struct ReadOptions`óbut my proposal in does exactly that. In any case, heres a simple reproduction. Apply this bogus patch to get a `std::function` into `struct ReadOptions` ``` a/include/rocksdb/options.h +++ b/include/rocksdb/options.h +1035,8 struct ReadOptions { // Default: 0 uint64_t max_skippable_internal_keys; + std::function<void()> foo; + ReadOptions(); ReadOptions(bool cksum, bool cache); }; ``` then compile `db_properties_test` *with ubsan* and run `ReadLatencyHistogramByLevel`: ``` $ make COMPILE_WITH_UBSAN=1 db_properties_test $ ./db_properties_test ``` ubsan will complain about several misaligned accesses: ``` Note: Google Test filter DBPropertiesTest.ReadLatencyHistogramByLevel [==========] Running 1 test from 1 test case. [----------] Global test environment set-up. [----------] 1 test from DBPropertiesTest [ RUN ] DBPropertiesTest.ReadLatencyHistogramByLevel util/coding.h:372:12: runtime error: load of misaligned address 0x00010d85516c for type const unsigned long, which requires 8 byte alignment 0x00010d85516c: note: pointer points here 01 00 34 57 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 78 24 82 0a 01 00 00 00 ^ util/coding.h:362:3: runtime error: store to misaligned address 0x7fff5733fac4 for type unsigned long, which requires 8 byte alignment 0x7fff5733fac4: note: pointer points here 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 1d 96 0d 01 00 00 00 ^ util/coding.h:372:12: runtime error: load of misaligned address 0x00010d85516c for type const unsigned long, which requires 8 byte alignment 0x00010d85516c: note: pointer points here 01 00 34 57 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 78 24 82 0a 01 00 00 00 ^ version_set.cc:854: runtime error: constructor call on misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ version_set.cc:512: runtime error: constructor call on misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ version_set.cc:505: runtime error: constructor call on misaligned address 0x00010dbfa5e8 for type rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ options.h:931: runtime error: constructor call on misaligned address 0x00010dbfa5e8 for type rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ options.h:931: runtime error: constructor call on misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ functional:1583: runtime error: constructor call on misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1585:9: runtime error: member access within misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1585:9: runtime error: store to misaligned address 0x00010dbfa648 for type __base * (aka __base<void ()> *), which requires 16 byte alignment 0x00010dbfa648: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/version_set.cc:864:29: runtime error: upcast of misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:521:12: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:521:12: runtime error: load of misaligned address 0x00010dbfa5d8 for type rocksdb::TableCache *, which requires 16 byte alignment 0x00010dbfa5d8: note: pointer points here 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 ^ db/version_set.cc:522:9: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:522:9: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/version_set.cc:522:24: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:522:38: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:522:57: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:522:57: runtime error: load of misaligned address 0x00010dbfa678 for type rocksdb::RangeDelAggregator *, which requires 16 byte alignment 0x00010dbfa678: note: pointer points here 01 00 00 00 d0 a1 bf 0d 01 00 00 00 00 00 00 00 00 00 00 00 f8 db 70 0a 01 00 00 00 00 00 00 00 ^ db/version_set.cc:523:54: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:523:54: runtime error: load of misaligned address 0x00010dbfa668 for type rocksdb::HistogramImpl *, which requires 16 byte alignment 0x00010dbfa668: note: pointer points here 01 00 00 00 c8 88 a5 0d 01 00 00 00 00 00 00 00 01 00 00 00 d0 a1 bf 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:524:9: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:524:47: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:524:62: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/table_cache.cc:228:33: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ table/block_based_table_reader.cc:1554:41: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ table/block_based_table_reader.cc:1396:21: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ include/rocksdb/options.h:931:8: runtime error: reference binding to misaligned address 0x00010dbfa628 for type const std::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1584:13: runtime error: load of misaligned address 0x00010dbfa648 for type __base *const (aka __base<void ()> *const), which requires 16 byte alignment 0x00010dbfa648: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c8 a5 97 0d 01 00 00 00 38 36 9b 0d ^ table/block_based_table_reader.cc:1555:24: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/table_cache.cc:244:54: runtime error: load of misaligned address 0x00010dbfa618 for type const bool, which requires 16 byte alignment 0x00010dbfa618: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/table_cache.cc:246:49: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/version_set.cc:532:12: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:532:12: runtime error: member access within misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/version_set.cc:532:26: runtime error: load of misaligned address 0x00010dbfa5f8 for type const rocksdb::Slice *const, which requires 16 byte alignment 0x00010dbfa5f8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ version_set.cc:493: runtime error: member call on misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ version_set.cc:493: runtime error: member call on misaligned address 0x00010dbfa5e8 for type rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ options.h:931: runtime error: member call on misaligned address 0x00010dbfa5e8 for type rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ options.h:931: runtime error: member call on misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ functional:1765: runtime error: member call on misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1766:9: runtime error: member access within misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1766:9: runtime error: load of misaligned address 0x00010dbfa648 for type __base * (aka __base<void ()> *), which requires 16 byte alignment 0x00010dbfa648: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c8 a5 97 0d 01 00 00 00 38 36 9b 0d ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1766:27: runtime error: member access within misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1768:14: runtime error: member access within misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1768:14: runtime error: load of misaligned address 0x00010dbfa648 for type __base * (aka __base<void ()> *), which requires 16 byte alignment 0x00010dbfa648: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c8 a5 97 0d 01 00 00 00 38 36 9b 0d ^ [ OK ] DBPropertiesTest.ReadLatencyHistogramByLevel (1599 ms) [----------] 1 test from DBPropertiesTest (1599 ms total) [----------] Global test environment tear-down [==========] 1 test from 1 test case ran. (1599 ms total) [ PASSED ] 1 test. ``` So it seems the root cause is that the internal implementation of `std::function` on macOS (and perhaps with libc++ generally?) requires 16-byte aligned memory, but the arena allocator only guarantees that the returned memory will be `sizeof(void*)` aligned, which is only 8-byte alignment on my machine. This patch solves the problem by adjusting the allocator to derive the necessary alignment from `alignof(std::max_align_t)`, which is properly 16 bytes on my machine. As I mentioned in none of RocksDBs tests will cause this unaligned access to actually abort the process, but, on macOS, linking CockroachDB against a version of RocksDB with the above patch and letting it run for just a few seconds will cause a SIGABRT. ``` Process 19792 stopped * thread stop reason EXC_BAD_ACCESS (code=EXC_I386_GPFLT) frame 0x0000000004f5e78f cockroach`DBNewIter + 95 cockroach`DBNewIter: 0x4f5e78f callq *0x28(%rax) 0x4f5e792 jmp 0x4f5e79e ; 0x4f5e794 movq %rcx 0x4f5e798 movq %rax, %rdi (lldb) bt * thread stop reason EXC_BAD_ACCESS (code=EXC_I386_GPFLT) * frame 0x0000000004f5e78f cockroach`DBNewIter + 95 ``` Id get you a backtrace, but [Go doesnt include cgo debug information on macOS]( Ive also tried building against libc++ on Linux, where debug information would be available, but I cant seem to trigger the bug there. In any case, this PR both fixes the segfault in CockroachDB and fixes the warnings reported by ubsan. Closes Differential Revision: D5108596 Pulled By: yiwu-arbug fbshipit-source-id: bd5e4323b2ce915ed4fe78e123cb8996aec75a00/"
,,0.8461,rocksdb,"arena: derive alignment unit from std::max_align_t Summary: As raised in the arena allocator will return memory that is improperly aligned to store a `std::function` on macOS. Oddly, Im unable to tickle this bug without adding a `std::function` field to `struct ReadOptions`óbut my proposal in does exactly that. In any case, heres a simple reproduction. Apply this bogus patch to get a `std::function` into `struct ReadOptions` ``` a/include/rocksdb/options.h +++ b/include/rocksdb/options.h +1035,8 struct ReadOptions { // Default: 0 uint64_t max_skippable_internal_keys; + std::function<void()> foo; + ReadOptions(); ReadOptions(bool cksum, bool cache); }; ``` then compile `db_properties_test` *with ubsan* and run `ReadLatencyHistogramByLevel`: ``` $ make COMPILE_WITH_UBSAN=1 db_properties_test $ ./db_properties_test ``` ubsan will complain about several misaligned accesses: ``` Note: Google Test filter DBPropertiesTest.ReadLatencyHistogramByLevel [==========] Running 1 test from 1 test case. [----------] Global test environment set-up. [----------] 1 test from DBPropertiesTest [ RUN ] DBPropertiesTest.ReadLatencyHistogramByLevel util/coding.h:372:12: runtime error: load of misaligned address 0x00010d85516c for type const unsigned long, which requires 8 byte alignment 0x00010d85516c: note: pointer points here 01 00 34 57 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 78 24 82 0a 01 00 00 00 ^ util/coding.h:362:3: runtime error: store to misaligned address 0x7fff5733fac4 for type unsigned long, which requires 8 byte alignment 0x7fff5733fac4: note: pointer points here 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 1d 96 0d 01 00 00 00 ^ util/coding.h:372:12: runtime error: load of misaligned address 0x00010d85516c for type const unsigned long, which requires 8 byte alignment 0x00010d85516c: note: pointer points here 01 00 34 57 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 78 24 82 0a 01 00 00 00 ^ version_set.cc:854: runtime error: constructor call on misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ version_set.cc:512: runtime error: constructor call on misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ version_set.cc:505: runtime error: constructor call on misaligned address 0x00010dbfa5e8 for type rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ options.h:931: runtime error: constructor call on misaligned address 0x00010dbfa5e8 for type rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ options.h:931: runtime error: constructor call on misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ functional:1583: runtime error: constructor call on misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1585:9: runtime error: member access within misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1585:9: runtime error: store to misaligned address 0x00010dbfa648 for type __base * (aka __base<void ()> *), which requires 16 byte alignment 0x00010dbfa648: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/version_set.cc:864:29: runtime error: upcast of misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:521:12: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:521:12: runtime error: load of misaligned address 0x00010dbfa5d8 for type rocksdb::TableCache *, which requires 16 byte alignment 0x00010dbfa5d8: note: pointer points here 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 ^ db/version_set.cc:522:9: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:522:9: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/version_set.cc:522:24: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:522:38: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:522:57: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:522:57: runtime error: load of misaligned address 0x00010dbfa678 for type rocksdb::RangeDelAggregator *, which requires 16 byte alignment 0x00010dbfa678: note: pointer points here 01 00 00 00 d0 a1 bf 0d 01 00 00 00 00 00 00 00 00 00 00 00 f8 db 70 0a 01 00 00 00 00 00 00 00 ^ db/version_set.cc:523:54: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:523:54: runtime error: load of misaligned address 0x00010dbfa668 for type rocksdb::HistogramImpl *, which requires 16 byte alignment 0x00010dbfa668: note: pointer points here 01 00 00 00 c8 88 a5 0d 01 00 00 00 00 00 00 00 01 00 00 00 d0 a1 bf 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:524:9: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:524:47: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:524:62: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/table_cache.cc:228:33: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ table/block_based_table_reader.cc:1554:41: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ table/block_based_table_reader.cc:1396:21: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ include/rocksdb/options.h:931:8: runtime error: reference binding to misaligned address 0x00010dbfa628 for type const std::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1584:13: runtime error: load of misaligned address 0x00010dbfa648 for type __base *const (aka __base<void ()> *const), which requires 16 byte alignment 0x00010dbfa648: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c8 a5 97 0d 01 00 00 00 38 36 9b 0d ^ table/block_based_table_reader.cc:1555:24: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/table_cache.cc:244:54: runtime error: load of misaligned address 0x00010dbfa618 for type const bool, which requires 16 byte alignment 0x00010dbfa618: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/table_cache.cc:246:49: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/version_set.cc:532:12: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:532:12: runtime error: member access within misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/version_set.cc:532:26: runtime error: load of misaligned address 0x00010dbfa5f8 for type const rocksdb::Slice *const, which requires 16 byte alignment 0x00010dbfa5f8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ version_set.cc:493: runtime error: member call on misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ version_set.cc:493: runtime error: member call on misaligned address 0x00010dbfa5e8 for type rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ options.h:931: runtime error: member call on misaligned address 0x00010dbfa5e8 for type rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ options.h:931: runtime error: member call on misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ functional:1765: runtime error: member call on misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1766:9: runtime error: member access within misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1766:9: runtime error: load of misaligned address 0x00010dbfa648 for type __base * (aka __base<void ()> *), which requires 16 byte alignment 0x00010dbfa648: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c8 a5 97 0d 01 00 00 00 38 36 9b 0d ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1766:27: runtime error: member access within misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1768:14: runtime error: member access within misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1768:14: runtime error: load of misaligned address 0x00010dbfa648 for type __base * (aka __base<void ()> *), which requires 16 byte alignment 0x00010dbfa648: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c8 a5 97 0d 01 00 00 00 38 36 9b 0d ^ [ OK ] DBPropertiesTest.ReadLatencyHistogramByLevel (1599 ms) [----------] 1 test from DBPropertiesTest (1599 ms total) [----------] Global test environment tear-down [==========] 1 test from 1 test case ran. (1599 ms total) [ PASSED ] 1 test. ``` So it seems the root cause is that the internal implementation of `std::function` on macOS (and perhaps with libc++ generally?) requires 16-byte aligned memory, but the arena allocator only guarantees that the returned memory will be `sizeof(void*)` aligned, which is only 8-byte alignment on my machine. This patch solves the problem by adjusting the allocator to derive the necessary alignment from `alignof(std::max_align_t)`, which is properly 16 bytes on my machine. As I mentioned in none of RocksDBs tests will cause this unaligned access to actually abort the process, but, on macOS, linking CockroachDB against a version of RocksDB with the above patch and letting it run for just a few seconds will cause a SIGABRT. ``` Process 19792 stopped * thread stop reason EXC_BAD_ACCESS (code=EXC_I386_GPFLT) frame 0x0000000004f5e78f cockroach`DBNewIter + 95 cockroach`DBNewIter: 0x4f5e78f callq *0x28(%rax) 0x4f5e792 jmp 0x4f5e79e ; 0x4f5e794 movq %rcx 0x4f5e798 movq %rax, %rdi (lldb) bt * thread stop reason EXC_BAD_ACCESS (code=EXC_I386_GPFLT) * frame 0x0000000004f5e78f cockroach`DBNewIter + 95 ``` Id get you a backtrace, but [Go doesnt include cgo debug information on macOS]( Ive also tried building against libc++ on Linux, where debug information would be available, but I cant seem to trigger the bug there. In any case, this PR both fixes the segfault in CockroachDB and fixes the warnings reported by ubsan. Closes Differential Revision: D5108596 Pulled By: yiwu-arbug fbshipit-source-id: bd5e4323b2ce915ed4fe78e123cb8996aec75a00/"
,,0.5823,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/"
,,0.2711,rocksdb,"Add ValueType::kTypeBlobIndex Summary: Add kTypeBlobIndex value type, which will be used by blob db only, to insert a (key, blob_offset) KV pair. The purpose is to 1. Make it possible to open existing rocksdb instance as blob db. Existing value will be of kTypeIndex type, while value inserted by blob db will be of kTypeBlobIndex. 2. Make rocksdb able to detect if the db contains value written by blob db, if so return error. 3. Make it possible to have blob db optionally store value in SST file (with kTypeValue type) or as a blob value (with kTypeBlobIndex type). The root db (DBImpl) basically pretended kTypeBlobIndex are normal value on write. On Get if is_blob is provided, return whether the value read is of kTypeBlobIndex type, or return Status::NotSupported() status if is_blob is not provided. On scan allow_blob flag is pass and if the flag is true, return wether the value is of kTypeBlobIndex type via iter->IsBlob(). Changes on blob db side will be in a separate patch. Closes Differential Revision: D5838431 Pulled By: yiwu-arbug fbshipit-source-id: 3c5306c62bc13bb11abc03422ec5cbcea1203cca/"
,,0.4819,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/implement lower bound for iterators Summary: for `SeekToFirst()`, just convert it to a regular `Seek()` if lower bound is specified for operations that iterate backwards over user keys (`SeekForPrev`, `SeekToLast`, `Prev`), change `PrevInternal` to check whether user key went below lower bound every time the user key changes same approach we use to ensure we stay within a prefix when `prefix_same_as_start=true`. Closes Differential Revision: D6158654 Pulled By: ajkr fbshipit-source-id: cb0e3a922e2650d2cd4d1c6e1c0f1e8b729ff518/expose a hook to skip tables during iteration Summary: As discussed on the mailing list ([""Skipping entire SSTs while iterating""]( this patch adds a `table_filter` to `ReadOptions` that allows specifying a callback to be executed during iteration before each table in the database is scanned. The callback is passed the tables properties; the table is scanned iff the callback returns true. This can be used in conjunction with a `TablePropertiesCollector` to dramatically speed up scans by skipping tables that are known to contain irrelevant data for the scan at hand. Were using this [downstream in CockroachDB]( already. With this feature, under ideal conditions, we can reduce the time of an incremental backup in from hours to seconds. FYI, the first commit in this PR fixes a segfault that I unfortunately have not figured out how to reproduce outside of CockroachDB. Im hoping you accept it on the grounds that it is not correct to return 8-byte aligned memory from a call to `malloc` on some 64-bit platforms; one correct approach is to infer the necessary alignment from `std::max_align_t`, as done here. As noted in the first commit message, the bug is tickled by having a`std::function` in `struct ReadOptions`. That is, the following patch alone is enough to cause RocksDB to segfault when run from CockroachDB on Darwin. ```diff a/include/rocksdb/options.h +++ b/include/rocksdb/options.h +1546,13 struct ReadOptions { // Default: false bool ignore_range_deletions; + // A callback to determine whether relevant keys for this scan exist in a + // given table based on the tables properties. The callback is passed the + // properties of each table during iteration. If the callback returns false, + // the table will not be scanned. + // Default: empty (every table will be scanned) + std::function<bool(const TableProperties&)> table_filter; + ReadOptions(); ReadOptions(bool cksum, bool cache); }; ``` /cc danhhz Closes Differential Revision: D5054262 Pulled By: yiwu-arbug fbshipit-source-id: dd6b28f2bba6cb8466250d8c5c542d3c92785476/"
,,0.5243,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/TableProperty::oldest_key_time defaults to 0 Summary: We dont propagate TableProperty::oldest_key_time on compaction and just write the default value to SST files. It is more natural to default the value to 0. Also revert db_sst_test back to before Closes Differential Revision: D6165702 Pulled By: yiwu-arbug fbshipit-source-id: ca3ce5928d96ae79a5beb12bb7d8c640a71478a0/Add DB::Properties::kEstimateOldestKeyTime Summary: With FIFO compaction we would like to get the oldest data time for monitoring. The problem is we dont have timestamp for each key in the DB. As an approximation, we expose the earliest of sst file ""creation_time"" property. My plan is to override the property with a more accurate value with blob db, where we actually have timestamp. Closes Differential Revision: D5770600 Pulled By: yiwu-arbug fbshipit-source-id: 03833c8f10bbfbee62f8ea5c0d03c0cafb5d853a/"
,,0.5925,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/"
,,0.0787,rocksdb,Fix naming in InternalKey Summary: Switched all instances of SetMinPossibleForUserKey and SetMaxPossibleForUserKey in accordance to InternalKeyComparators comparison logic Closes Differential Revision: D5804152 Pulled By: axxufb fbshipit-source-id: 80be35e04f2e8abc35cc64abe1fecb03af24e183/
,,0.2591,rocksdb,"Add ValueType::kTypeBlobIndex Summary: Add kTypeBlobIndex value type, which will be used by blob db only, to insert a (key, blob_offset) KV pair. The purpose is to 1. Make it possible to open existing rocksdb instance as blob db. Existing value will be of kTypeIndex type, while value inserted by blob db will be of kTypeBlobIndex. 2. Make rocksdb able to detect if the db contains value written by blob db, if so return error. 3. Make it possible to have blob db optionally store value in SST file (with kTypeValue type) or as a blob value (with kTypeBlobIndex type). The root db (DBImpl) basically pretended kTypeBlobIndex are normal value on write. On Get if is_blob is provided, return whether the value read is of kTypeBlobIndex type, or return Status::NotSupported() status if is_blob is not provided. On scan allow_blob flag is pass and if the flag is true, return wether the value is of kTypeBlobIndex type via iter->IsBlob(). Changes on blob db side will be in a separate patch. Closes Differential Revision: D5838431 Pulled By: yiwu-arbug fbshipit-source-id: 3c5306c62bc13bb11abc03422ec5cbcea1203cca/"
,,0.5685,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/WritePrepared Txn: Compaction/Flush Summary: Update Compaction/Flush to support WritePreparedTxnDB: Add SnapshotChecker which is a proxy to query WritePreparedTxnDB::IsInSnapshot. Pass SnapshotChecker to DBImpl on WritePreparedTxnDB open. CompactionIterator use it to check if a key has been committed and if it is visible to a snapshot. In CompactionIterator: * check if key has been committed. If not, output uncommitted keys AS-IS. * use SnapshotChecker to check if key is visible to a snapshot when in need. * do not output key with seq 0 if the key is not committed. Closes Differential Revision: D5902907 Pulled By: yiwu-arbug fbshipit-source-id: 945e037fdf0aa652dc5ba0ad879461040baa0320/"
,,0.1696,rocksdb,"WritePrepared Txn: Compaction/Flush Summary: Update Compaction/Flush to support WritePreparedTxnDB: Add SnapshotChecker which is a proxy to query WritePreparedTxnDB::IsInSnapshot. Pass SnapshotChecker to DBImpl on WritePreparedTxnDB open. CompactionIterator use it to check if a key has been committed and if it is visible to a snapshot. In CompactionIterator: * check if key has been committed. If not, output uncommitted keys AS-IS. * use SnapshotChecker to check if key is visible to a snapshot when in need. * do not output key with seq 0 if the key is not committed. Closes Differential Revision: D5902907 Pulled By: yiwu-arbug fbshipit-source-id: 945e037fdf0aa652dc5ba0ad879461040baa0320/Make bytes_per_sync and wal_bytes_per_sync mutable Summary: SUMMARY Moves the bytes_per_sync and wal_bytes_per_sync options from immutableoptions to mutable options. Also if wal_bytes_per_sync is changed, the wal file and memtables are flushed. TEST PLAN ran make check all passed Two new tests SetBytesPerSync, SetWalBytesPerSync check that after issuing setoptions with a new value for the var, the db options have the new value. Closes Reviewed By: yiwu-arbug Differential Revision: D5845814 Pulled By: TheRushingWookie fbshipit-source-id: 93b52d779ce623691b546679dcd984a06d2ad1bd/"
,,0.5005,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/implement lower bound for iterators Summary: for `SeekToFirst()`, just convert it to a regular `Seek()` if lower bound is specified for operations that iterate backwards over user keys (`SeekForPrev`, `SeekToLast`, `Prev`), change `PrevInternal` to check whether user key went below lower bound every time the user key changes same approach we use to ensure we stay within a prefix when `prefix_same_as_start=true`. Closes Differential Revision: D6158654 Pulled By: ajkr fbshipit-source-id: cb0e3a922e2650d2cd4d1c6e1c0f1e8b729ff518/Fix tombstone scans in SeekForPrev outside prefix Summary: When doing a Seek() or SeekForPrev() we should stop the moment we see a key with a different prefix as start if ReadOptions:: prefix_same_as_start was set to true Right now we dont stop if we encounter a tombstone outside the prefix while executing SeekForPrev() Closes Differential Revision: D6149638 Pulled By: IslamAbdelRahman fbshipit-source-id: 7f659862d2bf552d3c9104a360c79439ceba2f18/WritePrepared Txn: Iterator Summary: On iterator create, take a snapshot, create a ReadCallback and pass the ReadCallback to the underlying DBIter to check if key is committed. Closes Differential Revision: D6001471 Pulled By: yiwu-arbug fbshipit-source-id: 3565c4cdaf25370ba47008b0e0cb65b31dfe79fe/"
,,0.8389,rocksdb,"arena: derive alignment unit from std::max_align_t Summary: As raised in the arena allocator will return memory that is improperly aligned to store a `std::function` on macOS. Oddly, Im unable to tickle this bug without adding a `std::function` field to `struct ReadOptions`óbut my proposal in does exactly that. In any case, heres a simple reproduction. Apply this bogus patch to get a `std::function` into `struct ReadOptions` ``` a/include/rocksdb/options.h +++ b/include/rocksdb/options.h +1035,8 struct ReadOptions { // Default: 0 uint64_t max_skippable_internal_keys; + std::function<void()> foo; + ReadOptions(); ReadOptions(bool cksum, bool cache); }; ``` then compile `db_properties_test` *with ubsan* and run `ReadLatencyHistogramByLevel`: ``` $ make COMPILE_WITH_UBSAN=1 db_properties_test $ ./db_properties_test ``` ubsan will complain about several misaligned accesses: ``` Note: Google Test filter DBPropertiesTest.ReadLatencyHistogramByLevel [==========] Running 1 test from 1 test case. [----------] Global test environment set-up. [----------] 1 test from DBPropertiesTest [ RUN ] DBPropertiesTest.ReadLatencyHistogramByLevel util/coding.h:372:12: runtime error: load of misaligned address 0x00010d85516c for type const unsigned long, which requires 8 byte alignment 0x00010d85516c: note: pointer points here 01 00 34 57 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 78 24 82 0a 01 00 00 00 ^ util/coding.h:362:3: runtime error: store to misaligned address 0x7fff5733fac4 for type unsigned long, which requires 8 byte alignment 0x7fff5733fac4: note: pointer points here 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 1d 96 0d 01 00 00 00 ^ util/coding.h:372:12: runtime error: load of misaligned address 0x00010d85516c for type const unsigned long, which requires 8 byte alignment 0x00010d85516c: note: pointer points here 01 00 34 57 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 78 24 82 0a 01 00 00 00 ^ version_set.cc:854: runtime error: constructor call on misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ version_set.cc:512: runtime error: constructor call on misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ version_set.cc:505: runtime error: constructor call on misaligned address 0x00010dbfa5e8 for type rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ options.h:931: runtime error: constructor call on misaligned address 0x00010dbfa5e8 for type rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ options.h:931: runtime error: constructor call on misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ functional:1583: runtime error: constructor call on misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1585:9: runtime error: member access within misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1585:9: runtime error: store to misaligned address 0x00010dbfa648 for type __base * (aka __base<void ()> *), which requires 16 byte alignment 0x00010dbfa648: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/version_set.cc:864:29: runtime error: upcast of misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:521:12: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:521:12: runtime error: load of misaligned address 0x00010dbfa5d8 for type rocksdb::TableCache *, which requires 16 byte alignment 0x00010dbfa5d8: note: pointer points here 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 ^ db/version_set.cc:522:9: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:522:9: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/version_set.cc:522:24: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:522:38: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:522:57: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:522:57: runtime error: load of misaligned address 0x00010dbfa678 for type rocksdb::RangeDelAggregator *, which requires 16 byte alignment 0x00010dbfa678: note: pointer points here 01 00 00 00 d0 a1 bf 0d 01 00 00 00 00 00 00 00 00 00 00 00 f8 db 70 0a 01 00 00 00 00 00 00 00 ^ db/version_set.cc:523:54: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:523:54: runtime error: load of misaligned address 0x00010dbfa668 for type rocksdb::HistogramImpl *, which requires 16 byte alignment 0x00010dbfa668: note: pointer points here 01 00 00 00 c8 88 a5 0d 01 00 00 00 00 00 00 00 01 00 00 00 d0 a1 bf 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:524:9: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:524:47: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:524:62: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/table_cache.cc:228:33: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ table/block_based_table_reader.cc:1554:41: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ table/block_based_table_reader.cc:1396:21: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ include/rocksdb/options.h:931:8: runtime error: reference binding to misaligned address 0x00010dbfa628 for type const std::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1584:13: runtime error: load of misaligned address 0x00010dbfa648 for type __base *const (aka __base<void ()> *const), which requires 16 byte alignment 0x00010dbfa648: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c8 a5 97 0d 01 00 00 00 38 36 9b 0d ^ table/block_based_table_reader.cc:1555:24: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/table_cache.cc:244:54: runtime error: load of misaligned address 0x00010dbfa618 for type const bool, which requires 16 byte alignment 0x00010dbfa618: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/table_cache.cc:246:49: runtime error: reference binding to misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/version_set.cc:532:12: runtime error: member access within misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ db/version_set.cc:532:12: runtime error: member access within misaligned address 0x00010dbfa5e8 for type const rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ db/version_set.cc:532:26: runtime error: load of misaligned address 0x00010dbfa5f8 for type const rocksdb::Slice *const, which requires 16 byte alignment 0x00010dbfa5f8: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ version_set.cc:493: runtime error: member call on misaligned address 0x00010dbfa5c8 for type rocksdb::(anonymous namespace)::LevelFileIteratorState, which requires 16 byte alignment 0x00010dbfa5c8: note: pointer points here 00 00 00 00 a0 db 70 0a 01 00 00 00 00 00 00 00 00 00 00 00 90 14 98 0d 01 00 00 00 00 00 00 00 ^ version_set.cc:493: runtime error: member call on misaligned address 0x00010dbfa5e8 for type rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ options.h:931: runtime error: member call on misaligned address 0x00010dbfa5e8 for type rocksdb::ReadOptions, which requires 16 byte alignment 0x00010dbfa5e8: note: pointer points here 00 00 00 00 01 01 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ options.h:931: runtime error: member call on misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ functional:1765: runtime error: member call on misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1766:9: runtime error: member access within misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1766:9: runtime error: load of misaligned address 0x00010dbfa648 for type __base * (aka __base<void ()> *), which requires 16 byte alignment 0x00010dbfa648: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c8 a5 97 0d 01 00 00 00 38 36 9b 0d ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1766:27: runtime error: member access within misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1768:14: runtime error: member access within misaligned address 0x00010dbfa628 for type std::__1::function<void ()>, which requires 16 byte alignment 0x00010dbfa628: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/functional:1768:14: runtime error: load of misaligned address 0x00010dbfa648 for type __base * (aka __base<void ()> *), which requires 16 byte alignment 0x00010dbfa648: note: pointer points here 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c8 a5 97 0d 01 00 00 00 38 36 9b 0d ^ [ OK ] DBPropertiesTest.ReadLatencyHistogramByLevel (1599 ms) [----------] 1 test from DBPropertiesTest (1599 ms total) [----------] Global test environment tear-down [==========] 1 test from 1 test case ran. (1599 ms total) [ PASSED ] 1 test. ``` So it seems the root cause is that the internal implementation of `std::function` on macOS (and perhaps with libc++ generally?) requires 16-byte aligned memory, but the arena allocator only guarantees that the returned memory will be `sizeof(void*)` aligned, which is only 8-byte alignment on my machine. This patch solves the problem by adjusting the allocator to derive the necessary alignment from `alignof(std::max_align_t)`, which is properly 16 bytes on my machine. As I mentioned in none of RocksDBs tests will cause this unaligned access to actually abort the process, but, on macOS, linking CockroachDB against a version of RocksDB with the above patch and letting it run for just a few seconds will cause a SIGABRT. ``` Process 19792 stopped * thread stop reason EXC_BAD_ACCESS (code=EXC_I386_GPFLT) frame 0x0000000004f5e78f cockroach`DBNewIter + 95 cockroach`DBNewIter: 0x4f5e78f callq *0x28(%rax) 0x4f5e792 jmp 0x4f5e79e ; 0x4f5e794 movq %rcx 0x4f5e798 movq %rax, %rdi (lldb) bt * thread stop reason EXC_BAD_ACCESS (code=EXC_I386_GPFLT) * frame 0x0000000004f5e78f cockroach`DBNewIter + 95 ``` Id get you a backtrace, but [Go doesnt include cgo debug information on macOS]( Ive also tried building against libc++ on Linux, where debug information would be available, but I cant seem to trigger the bug there. In any case, this PR both fixes the segfault in CockroachDB and fixes the warnings reported by ubsan. Closes Differential Revision: D5108596 Pulled By: yiwu-arbug fbshipit-source-id: bd5e4323b2ce915ed4fe78e123cb8996aec75a00/"
,,0.1719,rocksdb,"WritePrepared Txn: Compaction/Flush Summary: Update Compaction/Flush to support WritePreparedTxnDB: Add SnapshotChecker which is a proxy to query WritePreparedTxnDB::IsInSnapshot. Pass SnapshotChecker to DBImpl on WritePreparedTxnDB open. CompactionIterator use it to check if a key has been committed and if it is visible to a snapshot. In CompactionIterator: * check if key has been committed. If not, output uncommitted keys AS-IS. * use SnapshotChecker to check if key is visible to a snapshot when in need. * do not output key with seq 0 if the key is not committed. Closes Differential Revision: D5902907 Pulled By: yiwu-arbug fbshipit-source-id: 945e037fdf0aa652dc5ba0ad879461040baa0320/Make bytes_per_sync and wal_bytes_per_sync mutable Summary: SUMMARY Moves the bytes_per_sync and wal_bytes_per_sync options from immutableoptions to mutable options. Also if wal_bytes_per_sync is changed, the wal file and memtables are flushed. TEST PLAN ran make check all passed Two new tests SetBytesPerSync, SetWalBytesPerSync check that after issuing setoptions with a new value for the var, the db options have the new value. Closes Reviewed By: yiwu-arbug Differential Revision: D5845814 Pulled By: TheRushingWookie fbshipit-source-id: 93b52d779ce623691b546679dcd984a06d2ad1bd/"
,,0.2071,rocksdb,"Add DB::Properties::kEstimateOldestKeyTime Summary: With FIFO compaction we would like to get the oldest data time for monitoring. The problem is we dont have timestamp for each key in the DB. As an approximation, we expose the earliest of sst file ""creation_time"" property. My plan is to override the property with a more accurate value with blob db, where we actually have timestamp. Closes Differential Revision: D5770600 Pulled By: yiwu-arbug fbshipit-source-id: 03833c8f10bbfbee62f8ea5c0d03c0cafb5d853a/Blob DB: Store blob index as kTypeBlobIndex in base db Summary: Blob db insert blob index to base db as kTypeBlobIndex type, to tell apart values written by plain rocksdb or blob db. This is to make it possible to migrate from existing rocksdb to blob db. Also with the patch blob db garbage collection get away from OptimisticTransaction. Instead it use a custom write callback to achieve similar behavior as OptimisticTransaction. This is because we need to pass the is_blob_index flag to DBImpl::Get but OptimisticTransaction dont support it. Closes Differential Revision: D6050044 Pulled By: yiwu-arbug fbshipit-source-id: 61dc72ab9977625e75f78cd968e7d8a3976e3632/Add ValueType::kTypeBlobIndex Summary: Add kTypeBlobIndex value type, which will be used by blob db only, to insert a (key, blob_offset) KV pair. The purpose is to 1. Make it possible to open existing rocksdb instance as blob db. Existing value will be of kTypeIndex type, while value inserted by blob db will be of kTypeBlobIndex. 2. Make rocksdb able to detect if the db contains value written by blob db, if so return error. 3. Make it possible to have blob db optionally store value in SST file (with kTypeValue type) or as a blob value (with kTypeBlobIndex type). The root db (DBImpl) basically pretended kTypeBlobIndex are normal value on write. On Get if is_blob is provided, return whether the value read is of kTypeBlobIndex type, or return Status::NotSupported() status if is_blob is not provided. On scan allow_blob flag is pass and if the flag is true, return wether the value is of kTypeBlobIndex type via iter->IsBlob(). Changes on blob db side will be in a separate patch. Closes Differential Revision: D5838431 Pulled By: yiwu-arbug fbshipit-source-id: 3c5306c62bc13bb11abc03422ec5cbcea1203cca/"
,,0.2163,rocksdb,"fix duplicate definition of GetEntryType() Summary: Its also defined in db/dbformat.cc per 7fe3b32896ecbb21d67ec52fccb713cb9bc6a644 Closes Differential Revision: D6219140 Pulled By: ajkr fbshipit-source-id: 0f2b14e41457334a4665c6b7e3f42f1a060a0f35/Add ValueType::kTypeBlobIndex Summary: Add kTypeBlobIndex value type, which will be used by blob db only, to insert a (key, blob_offset) KV pair. The purpose is to 1. Make it possible to open existing rocksdb instance as blob db. Existing value will be of kTypeIndex type, while value inserted by blob db will be of kTypeBlobIndex. 2. Make rocksdb able to detect if the db contains value written by blob db, if so return error. 3. Make it possible to have blob db optionally store value in SST file (with kTypeValue type) or as a blob value (with kTypeBlobIndex type). The root db (DBImpl) basically pretended kTypeBlobIndex are normal value on write. On Get if is_blob is provided, return whether the value read is of kTypeBlobIndex type, or return Status::NotSupported() status if is_blob is not provided. On scan allow_blob flag is pass and if the flag is true, return wether the value is of kTypeBlobIndex type via iter->IsBlob(). Changes on blob db side will be in a separate patch. Closes Differential Revision: D5838431 Pulled By: yiwu-arbug fbshipit-source-id: 3c5306c62bc13bb11abc03422ec5cbcea1203cca/Fix naming in InternalKey Summary: Switched all instances of SetMinPossibleForUserKey and SetMaxPossibleForUserKey in accordance to InternalKeyComparators comparison logic Closes Differential Revision: D5804152 Pulled By: axxufb fbshipit-source-id: 80be35e04f2e8abc35cc64abe1fecb03af24e183/Make InternalKeyComparator final and directly use it in merging iterator Summary: Merging iterator invokes InternalKeyComparator.Compare() frequently to heap merge. By making InternalKeyComparator final and merging iterator to directly use InternalKeyComparator rather than through Iterator interface, we can give compiler a choice to avoid one more virtual function call if possible. I ran readseq benchmark in memory-only use case to make sure the performance at least doesnt regress. I have to disable the final key word in debug build, as a hack test class depends on overriding the class. Closes Differential Revision: D5800461 Pulled By: siying fbshipit-source-id: ab876f22a09bb5c560740911412336e0e25ccb53/"
,,0.2198,rocksdb,"expose a hook to skip tables during iteration Summary: As discussed on the mailing list ([""Skipping entire SSTs while iterating""]( this patch adds a `table_filter` to `ReadOptions` that allows specifying a callback to be executed during iteration before each table in the database is scanned. The callback is passed the tables properties; the table is scanned iff the callback returns true. This can be used in conjunction with a `TablePropertiesCollector` to dramatically speed up scans by skipping tables that are known to contain irrelevant data for the scan at hand. Were using this [downstream in CockroachDB]( already. With this feature, under ideal conditions, we can reduce the time of an incremental backup in from hours to seconds. FYI, the first commit in this PR fixes a segfault that I unfortunately have not figured out how to reproduce outside of CockroachDB. Im hoping you accept it on the grounds that it is not correct to return 8-byte aligned memory from a call to `malloc` on some 64-bit platforms; one correct approach is to infer the necessary alignment from `std::max_align_t`, as done here. As noted in the first commit message, the bug is tickled by having a`std::function` in `struct ReadOptions`. That is, the following patch alone is enough to cause RocksDB to segfault when run from CockroachDB on Darwin. ```diff a/include/rocksdb/options.h +++ b/include/rocksdb/options.h +1546,13 struct ReadOptions { // Default: false bool ignore_range_deletions; + // A callback to determine whether relevant keys for this scan exist in a + // given table based on the tables properties. The callback is passed the + // properties of each table during iteration. If the callback returns false, + // the table will not be scanned. + // Default: empty (every table will be scanned) + std::function<bool(const TableProperties&)> table_filter; + ReadOptions(); ReadOptions(bool cksum, bool cache); }; ``` /cc danhhz Closes Differential Revision: D5054262 Pulled By: yiwu-arbug fbshipit-source-id: dd6b28f2bba6cb8466250d8c5c542d3c92785476/"
,,0.2049,rocksdb,"dynamically change current memtable size Summary: Previously setting `write_buffer_size` with `SetOptions` would only apply to new memtables. An internal user wanted it to take effect immediately, instead of at an arbitrary future point, to prevent OOM. This PR makes the memtables size mutable, and makes `SetOptions()` mutate it. There is one case when we preserve the old behavior, which is when memtable prefix bloom filter is enabled and the user is increasing the memtables capacity. Thats because the prefix bloom filters size is fixed and wouldnt work as well on a larger memtable. Closes Differential Revision: D6228304 Pulled By: ajkr fbshipit-source-id: e44bd9d10a5f8c9d8c464bf7436070bb3eafdfc9/Fix counter for memtable updates Summary: Right now in `PutCFImpl` we always increment NUMBER_KEYS_UPDATED counter for both in-place update or insertion. This PR fixes this by using the correct counter for either case. Closes Differential Revision: D6016300 Pulled By: miasantreble fbshipit-source-id: 0aed327522e659450d533d1c47d3a9f568fac65d/Add ValueType::kTypeBlobIndex Summary: Add kTypeBlobIndex value type, which will be used by blob db only, to insert a (key, blob_offset) KV pair. The purpose is to 1. Make it possible to open existing rocksdb instance as blob db. Existing value will be of kTypeIndex type, while value inserted by blob db will be of kTypeBlobIndex. 2. Make rocksdb able to detect if the db contains value written by blob db, if so return error. 3. Make it possible to have blob db optionally store value in SST file (with kTypeValue type) or as a blob value (with kTypeBlobIndex type). The root db (DBImpl) basically pretended kTypeBlobIndex are normal value on write. On Get if is_blob is provided, return whether the value read is of kTypeBlobIndex type, or return Status::NotSupported() status if is_blob is not provided. On scan allow_blob flag is pass and if the flag is true, return wether the value is of kTypeBlobIndex type via iter->IsBlob(). Changes on blob db side will be in a separate patch. Closes Differential Revision: D5838431 Pulled By: yiwu-arbug fbshipit-source-id: 3c5306c62bc13bb11abc03422ec5cbcea1203cca/"
,,0.2169,rocksdb,"Add DB::Properties::kEstimateOldestKeyTime Summary: With FIFO compaction we would like to get the oldest data time for monitoring. The problem is we dont have timestamp for each key in the DB. As an approximation, we expose the earliest of sst file ""creation_time"" property. My plan is to override the property with a more accurate value with blob db, where we actually have timestamp. Closes Differential Revision: D5770600 Pulled By: yiwu-arbug fbshipit-source-id: 03833c8f10bbfbee62f8ea5c0d03c0cafb5d853a/Blob DB: Store blob index as kTypeBlobIndex in base db Summary: Blob db insert blob index to base db as kTypeBlobIndex type, to tell apart values written by plain rocksdb or blob db. This is to make it possible to migrate from existing rocksdb to blob db. Also with the patch blob db garbage collection get away from OptimisticTransaction. Instead it use a custom write callback to achieve similar behavior as OptimisticTransaction. This is because we need to pass the is_blob_index flag to DBImpl::Get but OptimisticTransaction dont support it. Closes Differential Revision: D6050044 Pulled By: yiwu-arbug fbshipit-source-id: 61dc72ab9977625e75f78cd968e7d8a3976e3632/Add ValueType::kTypeBlobIndex Summary: Add kTypeBlobIndex value type, which will be used by blob db only, to insert a (key, blob_offset) KV pair. The purpose is to 1. Make it possible to open existing rocksdb instance as blob db. Existing value will be of kTypeIndex type, while value inserted by blob db will be of kTypeBlobIndex. 2. Make rocksdb able to detect if the db contains value written by blob db, if so return error. 3. Make it possible to have blob db optionally store value in SST file (with kTypeValue type) or as a blob value (with kTypeBlobIndex type). The root db (DBImpl) basically pretended kTypeBlobIndex are normal value on write. On Get if is_blob is provided, return whether the value read is of kTypeBlobIndex type, or return Status::NotSupported() status if is_blob is not provided. On scan allow_blob flag is pass and if the flag is true, return wether the value is of kTypeBlobIndex type via iter->IsBlob(). Changes on blob db side will be in a separate patch. Closes Differential Revision: D5838431 Pulled By: yiwu-arbug fbshipit-source-id: 3c5306c62bc13bb11abc03422ec5cbcea1203cca/"
,,0.1633,rocksdb,"TableProperty::oldest_key_time defaults to 0 Summary: We dont propagate TableProperty::oldest_key_time on compaction and just write the default value to SST files. It is more natural to default the value to 0. Also revert db_sst_test back to before Closes Differential Revision: D6165702 Pulled By: yiwu-arbug fbshipit-source-id: ca3ce5928d96ae79a5beb12bb7d8c640a71478a0/Fix coverity uninitialized fields warnings Pulled By: ajkr Differential Revision: D6170448 fbshipit-source-id: 5fd6d1608fc0df27c94d9f5059315ce7f79b8f5c/Add DB::Properties::kEstimateOldestKeyTime Summary: With FIFO compaction we would like to get the oldest data time for monitoring. The problem is we dont have timestamp for each key in the DB. As an approximation, we expose the earliest of sst file ""creation_time"" property. My plan is to override the property with a more accurate value with blob db, where we actually have timestamp. Closes Differential Revision: D5770600 Pulled By: yiwu-arbug fbshipit-source-id: 03833c8f10bbfbee62f8ea5c0d03c0cafb5d853a/WritePrepared Txn: Compaction/Flush Summary: Update Compaction/Flush to support WritePreparedTxnDB: Add SnapshotChecker which is a proxy to query WritePreparedTxnDB::IsInSnapshot. Pass SnapshotChecker to DBImpl on WritePreparedTxnDB open. CompactionIterator use it to check if a key has been committed and if it is visible to a snapshot. In CompactionIterator: * check if key has been committed. If not, output uncommitted keys AS-IS. * use SnapshotChecker to check if key is visible to a snapshot when in need. * do not output key with seq 0 if the key is not committed. Closes Differential Revision: D5902907 Pulled By: yiwu-arbug fbshipit-source-id: 945e037fdf0aa652dc5ba0ad879461040baa0320/Make bytes_per_sync and wal_bytes_per_sync mutable Summary: SUMMARY Moves the bytes_per_sync and wal_bytes_per_sync options from immutableoptions to mutable options. Also if wal_bytes_per_sync is changed, the wal file and memtables are flushed. TEST PLAN ran make check all passed Two new tests SetBytesPerSync, SetWalBytesPerSync check that after issuing setoptions with a new value for the var, the db options have the new value. Closes Reviewed By: yiwu-arbug Differential Revision: D5845814 Pulled By: TheRushingWookie fbshipit-source-id: 93b52d779ce623691b546679dcd984a06d2ad1bd/"
,,0.4134,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/Fix unused var warnings in Release mode Summary: MSVC does not support unused attribute at this time. A separate assignment line fixes the issue probably by being counted as usage for MSVC and it no longer complains about unused var. Closes Differential Revision: D6126272 Pulled By: maysamyabandeh fbshipit-source-id: 4907865db45fd75a39a15725c0695aaa17509c1f/Enable MSVC W4 with a few exceptions. Fix warnings and bugs Summary: Closes Differential Revision: D6079011 Pulled By: yiwu-arbug fbshipit-source-id: 988a721e7e7617967859dba71d660fc69f4dff57/WritePrepared Txn: Disable GC during recovery Summary: Disables GC during recovery of a WritePrepared txn db to avoid GCing uncommitted key values. Closes Differential Revision: D6000191 Pulled By: maysamyabandeh fbshipit-source-id: fc4d522c643d24ebf043f811fe4ecd0dd0294675/WritePrepared Txn: Compaction/Flush Summary: Update Compaction/Flush to support WritePreparedTxnDB: Add SnapshotChecker which is a proxy to query WritePreparedTxnDB::IsInSnapshot. Pass SnapshotChecker to DBImpl on WritePreparedTxnDB open. CompactionIterator use it to check if a key has been committed and if it is visible to a snapshot. In CompactionIterator: * check if key has been committed. If not, output uncommitted keys AS-IS. * use SnapshotChecker to check if key is visible to a snapshot when in need. * do not output key with seq 0 if the key is not committed. Closes Differential Revision: D5902907 Pulled By: yiwu-arbug fbshipit-source-id: 945e037fdf0aa652dc5ba0ad879461040baa0320/Make bytes_per_sync and wal_bytes_per_sync mutable Summary: SUMMARY Moves the bytes_per_sync and wal_bytes_per_sync options from immutableoptions to mutable options. Also if wal_bytes_per_sync is changed, the wal file and memtables are flushed. TEST PLAN ran make check all passed Two new tests SetBytesPerSync, SetWalBytesPerSync check that after issuing setoptions with a new value for the var, the db options have the new value. Closes Reviewed By: yiwu-arbug Differential Revision: D5845814 Pulled By: TheRushingWookie fbshipit-source-id: 93b52d779ce623691b546679dcd984a06d2ad1bd/Fix DBImpl::NotifyOnCompactionCompleted data race Summary: Access of `cfd->current()` needs to hold db mutex. The data race is caught by TSAN but hard to reproduce: Closes Differential Revision: D5843884 Pulled By: yiwu-arbug fbshipit-source-id: 0a30a421bc96f51840821538ad6453dc0815a942/fix hanging after CompactFiles with L0 overlap Summary: Bug report: Non-empty `level0_compactions_in_progress_` was aborting `CompactFiles` after incrementing `bg_compaction_scheduled_`, and in that case we never decremented it. This blocked future compactions and prevented DB close as we wait for scheduled compactions to finish/abort during close. I eliminated `CompactFiles`s dependency on `level0_compactions_in_progress_`. Since it takes a contiguous span of L0 files through the last L0 file if any L1+ files are included its fine to run in parallel with other compactions involving L0. We make the same assumption in intra-L0 compaction. Closes Differential Revision: D5780440 Pulled By: ajkr fbshipit-source-id: 15b15d3faf5a699aed4b82a58352d4a7bb23e027/Fix naming in InternalKey Summary: Switched all instances of SetMinPossibleForUserKey and SetMaxPossibleForUserKey in accordance to InternalKeyComparators comparison logic Closes Differential Revision: D5804152 Pulled By: axxufb fbshipit-source-id: 80be35e04f2e8abc35cc64abe1fecb03af24e183/"
,,0.3719,rocksdb,"Blob DB: fix snapshot handling Summary: Blob db will keep blob file if data in the file is visible to an active snapshot. Before this patch it checks whether there is an active snapshot has sequence number greater than the earliest sequence in the file. This is problematic since we take snapshot on every read, if it keep having reads, old blob files will not be cleanup. Change to check if there is an active snapshot falls in the range of [earliest_sequence, obsolete_sequence) where obsolete sequence is 1. if data is relocated to another file by garbage collection, it is the latest sequence at the time garbage collection finish 2. otherwise, it is the latest sequence of the file Closes Differential Revision: D6182519 Pulled By: yiwu-arbug fbshipit-source-id: cdf4c35281f782eb2a9ad6a87b6727bbdff27a45/Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/WritePrepared Txn: Disable GC during recovery Summary: Disables GC during recovery of a WritePrepared txn db to avoid GCing uncommitted key values. Closes Differential Revision: D6000191 Pulled By: maysamyabandeh fbshipit-source-id: fc4d522c643d24ebf043f811fe4ecd0dd0294675/Blob DB: Store blob index as kTypeBlobIndex in base db Summary: Blob db insert blob index to base db as kTypeBlobIndex type, to tell apart values written by plain rocksdb or blob db. This is to make it possible to migrate from existing rocksdb to blob db. Also with the patch blob db garbage collection get away from OptimisticTransaction. Instead it use a custom write callback to achieve similar behavior as OptimisticTransaction. This is because we need to pass the is_blob_index flag to DBImpl::Get but OptimisticTransaction dont support it. Closes Differential Revision: D6050044 Pulled By: yiwu-arbug fbshipit-source-id: 61dc72ab9977625e75f78cd968e7d8a3976e3632/fix DBImpl::NewInternalIterator super-version leak on failure Summary: Close Closes Differential Revision: D5962872 Pulled By: yiwu-arbug fbshipit-source-id: a6472d5c015bea3dc476c572ff5a5c90259e6059/fix file numbers after repair Summary: The file numbers assigned post-repair were sometimes smaller than older files numbers due to `LogAndApply` saving the wrong next file number in the manifest. Mark the highest file seen during repair as used before `LogAndApply` so the correct next file number will be stored. Renamed `MarkFileNumberUsedDuringRecovery` to `MarkFileNumberUsed` since now its used during repair in addition to during recovery Added `TEST_Current_Next_FileNo` to expose the next file number for the unit test. Closes Differential Revision: D6018083 Pulled By: ajkr fbshipit-source-id: 3f25cbf74439cb8f16dd12af90b67f9f9f75e718/WritePrepared Txn: Iterator Summary: On iterator create, take a snapshot, create a ReadCallback and pass the ReadCallback to the underlying DBIter to check if key is committed. Closes Differential Revision: D6001471 Pulled By: yiwu-arbug fbshipit-source-id: 3565c4cdaf25370ba47008b0e0cb65b31dfe79fe/WritePrepared Txn: Compaction/Flush Summary: Update Compaction/Flush to support WritePreparedTxnDB: Add SnapshotChecker which is a proxy to query WritePreparedTxnDB::IsInSnapshot. Pass SnapshotChecker to DBImpl on WritePreparedTxnDB open. CompactionIterator use it to check if a key has been committed and if it is visible to a snapshot. In CompactionIterator: * check if key has been committed. If not, output uncommitted keys AS-IS. * use SnapshotChecker to check if key is visible to a snapshot when in need. * do not output key with seq 0 if the key is not committed. Closes Differential Revision: D5902907 Pulled By: yiwu-arbug fbshipit-source-id: 945e037fdf0aa652dc5ba0ad879461040baa0320/Add ValueType::kTypeBlobIndex Summary: Add kTypeBlobIndex value type, which will be used by blob db only, to insert a (key, blob_offset) KV pair. The purpose is to 1. Make it possible to open existing rocksdb instance as blob db. Existing value will be of kTypeIndex type, while value inserted by blob db will be of kTypeBlobIndex. 2. Make rocksdb able to detect if the db contains value written by blob db, if so return error. 3. Make it possible to have blob db optionally store value in SST file (with kTypeValue type) or as a blob value (with kTypeBlobIndex type). The root db (DBImpl) basically pretended kTypeBlobIndex are normal value on write. On Get if is_blob is provided, return whether the value read is of kTypeBlobIndex type, or return Status::NotSupported() status if is_blob is not provided. On scan allow_blob flag is pass and if the flag is true, return wether the value is of kTypeBlobIndex type via iter->IsBlob(). Changes on blob db side will be in a separate patch. Closes Differential Revision: D5838431 Pulled By: yiwu-arbug fbshipit-source-id: 3c5306c62bc13bb11abc03422ec5cbcea1203cca/Make bytes_per_sync and wal_bytes_per_sync mutable Summary: SUMMARY Moves the bytes_per_sync and wal_bytes_per_sync options from immutableoptions to mutable options. Also if wal_bytes_per_sync is changed, the wal file and memtables are flushed. TEST PLAN ran make check all passed Two new tests SetBytesPerSync, SetWalBytesPerSync check that after issuing setoptions with a new value for the var, the db options have the new value. Closes Reviewed By: yiwu-arbug Differential Revision: D5845814 Pulled By: TheRushingWookie fbshipit-source-id: 93b52d779ce623691b546679dcd984a06d2ad1bd/Fix CLANG Analyze Summary: clang analyze shows warnings after we upgrade the CLANG version. Fix them. Closes Differential Revision: D5769060 Pulled By: siying fbshipit-source-id: 3f8e4df715590d8984f6564b608fa08cfdfa5f14/"
,,0.2556,rocksdb,"WritePrepared Txn: Iterator Summary: On iterator create, take a snapshot, create a ReadCallback and pass the ReadCallback to the underlying DBIter to check if key is committed. Closes Differential Revision: D6001471 Pulled By: yiwu-arbug fbshipit-source-id: 3565c4cdaf25370ba47008b0e0cb65b31dfe79fe/Add ValueType::kTypeBlobIndex Summary: Add kTypeBlobIndex value type, which will be used by blob db only, to insert a (key, blob_offset) KV pair. The purpose is to 1. Make it possible to open existing rocksdb instance as blob db. Existing value will be of kTypeIndex type, while value inserted by blob db will be of kTypeBlobIndex. 2. Make rocksdb able to detect if the db contains value written by blob db, if so return error. 3. Make it possible to have blob db optionally store value in SST file (with kTypeValue type) or as a blob value (with kTypeBlobIndex type). The root db (DBImpl) basically pretended kTypeBlobIndex are normal value on write. On Get if is_blob is provided, return whether the value read is of kTypeBlobIndex type, or return Status::NotSupported() status if is_blob is not provided. On scan allow_blob flag is pass and if the flag is true, return wether the value is of kTypeBlobIndex type via iter->IsBlob(). Changes on blob db side will be in a separate patch. Closes Differential Revision: D5838431 Pulled By: yiwu-arbug fbshipit-source-id: 3c5306c62bc13bb11abc03422ec5cbcea1203cca/"
,,0.5462,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/WritePrepared Txn: Compaction/Flush Summary: Update Compaction/Flush to support WritePreparedTxnDB: Add SnapshotChecker which is a proxy to query WritePreparedTxnDB::IsInSnapshot. Pass SnapshotChecker to DBImpl on WritePreparedTxnDB open. CompactionIterator use it to check if a key has been committed and if it is visible to a snapshot. In CompactionIterator: * check if key has been committed. If not, output uncommitted keys AS-IS. * use SnapshotChecker to check if key is visible to a snapshot when in need. * do not output key with seq 0 if the key is not committed. Closes Differential Revision: D5902907 Pulled By: yiwu-arbug fbshipit-source-id: 945e037fdf0aa652dc5ba0ad879461040baa0320/Make bytes_per_sync and wal_bytes_per_sync mutable Summary: SUMMARY Moves the bytes_per_sync and wal_bytes_per_sync options from immutableoptions to mutable options. Also if wal_bytes_per_sync is changed, the wal file and memtables are flushed. TEST PLAN ran make check all passed Two new tests SetBytesPerSync, SetWalBytesPerSync check that after issuing setoptions with a new value for the var, the db options have the new value. Closes Reviewed By: yiwu-arbug Differential Revision: D5845814 Pulled By: TheRushingWookie fbshipit-source-id: 93b52d779ce623691b546679dcd984a06d2ad1bd/"
,,0.0824,rocksdb,Fix naming in InternalKey Summary: Switched all instances of SetMinPossibleForUserKey and SetMaxPossibleForUserKey in accordance to InternalKeyComparators comparison logic Closes Differential Revision: D5804152 Pulled By: axxufb fbshipit-source-id: 80be35e04f2e8abc35cc64abe1fecb03af24e183/
,,0.5989,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/Add ValueType::kTypeBlobIndex Summary: Add kTypeBlobIndex value type, which will be used by blob db only, to insert a (key, blob_offset) KV pair. The purpose is to 1. Make it possible to open existing rocksdb instance as blob db. Existing value will be of kTypeIndex type, while value inserted by blob db will be of kTypeBlobIndex. 2. Make rocksdb able to detect if the db contains value written by blob db, if so return error. 3. Make it possible to have blob db optionally store value in SST file (with kTypeValue type) or as a blob value (with kTypeBlobIndex type). The root db (DBImpl) basically pretended kTypeBlobIndex are normal value on write. On Get if is_blob is provided, return whether the value read is of kTypeBlobIndex type, or return Status::NotSupported() status if is_blob is not provided. On scan allow_blob flag is pass and if the flag is true, return wether the value is of kTypeBlobIndex type via iter->IsBlob(). Changes on blob db side will be in a separate patch. Closes Differential Revision: D5838431 Pulled By: yiwu-arbug fbshipit-source-id: 3c5306c62bc13bb11abc03422ec5cbcea1203cca/"
,,0.214,rocksdb,"dynamically change current memtable size Summary: Previously setting `write_buffer_size` with `SetOptions` would only apply to new memtables. An internal user wanted it to take effect immediately, instead of at an arbitrary future point, to prevent OOM. This PR makes the memtables size mutable, and makes `SetOptions()` mutate it. There is one case when we preserve the old behavior, which is when memtable prefix bloom filter is enabled and the user is increasing the memtables capacity. Thats because the prefix bloom filters size is fixed and wouldnt work as well on a larger memtable. Closes Differential Revision: D6228304 Pulled By: ajkr fbshipit-source-id: e44bd9d10a5f8c9d8c464bf7436070bb3eafdfc9/Add DB::Properties::kEstimateOldestKeyTime Summary: With FIFO compaction we would like to get the oldest data time for monitoring. The problem is we dont have timestamp for each key in the DB. As an approximation, we expose the earliest of sst file ""creation_time"" property. My plan is to override the property with a more accurate value with blob db, where we actually have timestamp. Closes Differential Revision: D5770600 Pulled By: yiwu-arbug fbshipit-source-id: 03833c8f10bbfbee62f8ea5c0d03c0cafb5d853a/Add ValueType::kTypeBlobIndex Summary: Add kTypeBlobIndex value type, which will be used by blob db only, to insert a (key, blob_offset) KV pair. The purpose is to 1. Make it possible to open existing rocksdb instance as blob db. Existing value will be of kTypeIndex type, while value inserted by blob db will be of kTypeBlobIndex. 2. Make rocksdb able to detect if the db contains value written by blob db, if so return error. 3. Make it possible to have blob db optionally store value in SST file (with kTypeValue type) or as a blob value (with kTypeBlobIndex type). The root db (DBImpl) basically pretended kTypeBlobIndex are normal value on write. On Get if is_blob is provided, return whether the value read is of kTypeBlobIndex type, or return Status::NotSupported() status if is_blob is not provided. On scan allow_blob flag is pass and if the flag is true, return wether the value is of kTypeBlobIndex type via iter->IsBlob(). Changes on blob db side will be in a separate patch. Closes Differential Revision: D5838431 Pulled By: yiwu-arbug fbshipit-source-id: 3c5306c62bc13bb11abc03422ec5cbcea1203cca/"
,,0.1902,rocksdb,"fix file numbers after repair Summary: The file numbers assigned post-repair were sometimes smaller than older files numbers due to `LogAndApply` saving the wrong next file number in the manifest. Mark the highest file seen during repair as used before `LogAndApply` so the correct next file number will be stored. Renamed `MarkFileNumberUsedDuringRecovery` to `MarkFileNumberUsed` since now its used during repair in addition to during recovery Added `TEST_Current_Next_FileNo` to expose the next file number for the unit test. Closes Differential Revision: D6018083 Pulled By: ajkr fbshipit-source-id: 3f25cbf74439cb8f16dd12af90b67f9f9f75e718/Add ValueType::kTypeBlobIndex Summary: Add kTypeBlobIndex value type, which will be used by blob db only, to insert a (key, blob_offset) KV pair. The purpose is to 1. Make it possible to open existing rocksdb instance as blob db. Existing value will be of kTypeIndex type, while value inserted by blob db will be of kTypeBlobIndex. 2. Make rocksdb able to detect if the db contains value written by blob db, if so return error. 3. Make it possible to have blob db optionally store value in SST file (with kTypeValue type) or as a blob value (with kTypeBlobIndex type). The root db (DBImpl) basically pretended kTypeBlobIndex are normal value on write. On Get if is_blob is provided, return whether the value read is of kTypeBlobIndex type, or return Status::NotSupported() status if is_blob is not provided. On scan allow_blob flag is pass and if the flag is true, return wether the value is of kTypeBlobIndex type via iter->IsBlob(). Changes on blob db side will be in a separate patch. Closes Differential Revision: D5838431 Pulled By: yiwu-arbug fbshipit-source-id: 3c5306c62bc13bb11abc03422ec5cbcea1203cca/Make bytes_per_sync and wal_bytes_per_sync mutable Summary: SUMMARY Moves the bytes_per_sync and wal_bytes_per_sync options from immutableoptions to mutable options. Also if wal_bytes_per_sync is changed, the wal file and memtables are flushed. TEST PLAN ran make check all passed Two new tests SetBytesPerSync, SetWalBytesPerSync check that after issuing setoptions with a new value for the var, the db options have the new value. Closes Reviewed By: yiwu-arbug Differential Revision: D5845814 Pulled By: TheRushingWookie fbshipit-source-id: 93b52d779ce623691b546679dcd984a06d2ad1bd/"
,,0.4587,rocksdb,"Blob DB: Add compaction filter to remove expired blob index entries Summary: After adding expiration to blob index in we are now able to add a compaction filter to cleanup expired blob index entries. Closes Differential Revision: D6183812 Pulled By: yiwu-arbug fbshipit-source-id: 9cb03267a9702975290e758c9c176a2c03530b83/Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/Fix coverity issues column_family, compaction_db/iterator Summary: db/column_family.h : 79 ColumnFamilyHandleInternal() CID 1322806 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member internal_cfd_ is not initialized in this constructor nor in any functions that it calls. 80 : ColumnFamilyHandleImpl(nullptr, nullptr, nullptr) {} db/compacted_db_impl.cc: 18CompactedDBImpl::CompactedDBImpl( 19 const DBOptions& options, const std::string& dbname) 20 : DBImpl(options, dbname) { 2. uninit_member: Non-static class member cfd_ is not initialized in this constructor nor in any functions that it calls. 4. uninit_member: Non-static class member version_ is not initialized in this constructor nor in any functions that it calls. CID 1396120 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 6. uninit_member: Non-static class member user_comparator_ is not initialized in this constructor nor in any functions that it calls. 21} db/compaction_iterator.cc: 9. uninit_member: Non-static class member current_user_key_sequence_ is not initialized in this constructor nor in any functions that it calls. 11. uninit_member: Non-static class member current_user_key_snapshot_ is not initialized in this constructor nor in any functions that it calls. CID 1419855 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 13. uninit_member: Non-static class member current_key_committed_ is not initialized in this constructor nor in any functions that it calls. Closes Differential Revision: D6172999 Pulled By: sagar0 fbshipit-source-id: 084d73393faf8022c01359cfb445807b6a782460/Fix unused var warnings in Release mode Summary: MSVC does not support unused attribute at this time. A separate assignment line fixes the issue probably by being counted as usage for MSVC and it no longer complains about unused var. Closes Differential Revision: D6126272 Pulled By: maysamyabandeh fbshipit-source-id: 4907865db45fd75a39a15725c0695aaa17509c1f/WritePrepared Txn: Compaction/Flush Summary: Update Compaction/Flush to support WritePreparedTxnDB: Add SnapshotChecker which is a proxy to query WritePreparedTxnDB::IsInSnapshot. Pass SnapshotChecker to DBImpl on WritePreparedTxnDB open. CompactionIterator use it to check if a key has been committed and if it is visible to a snapshot. In CompactionIterator: * check if key has been committed. If not, output uncommitted keys AS-IS. * use SnapshotChecker to check if key is visible to a snapshot when in need. * do not output key with seq 0 if the key is not committed. Closes Differential Revision: D5902907 Pulled By: yiwu-arbug fbshipit-source-id: 945e037fdf0aa652dc5ba0ad879461040baa0320/Add ValueType::kTypeBlobIndex Summary: Add kTypeBlobIndex value type, which will be used by blob db only, to insert a (key, blob_offset) KV pair. The purpose is to 1. Make it possible to open existing rocksdb instance as blob db. Existing value will be of kTypeIndex type, while value inserted by blob db will be of kTypeBlobIndex. 2. Make rocksdb able to detect if the db contains value written by blob db, if so return error. 3. Make it possible to have blob db optionally store value in SST file (with kTypeValue type) or as a blob value (with kTypeBlobIndex type). The root db (DBImpl) basically pretended kTypeBlobIndex are normal value on write. On Get if is_blob is provided, return whether the value read is of kTypeBlobIndex type, or return Status::NotSupported() status if is_blob is not provided. On scan allow_blob flag is pass and if the flag is true, return wether the value is of kTypeBlobIndex type via iter->IsBlob(). Changes on blob db side will be in a separate patch. Closes Differential Revision: D5838431 Pulled By: yiwu-arbug fbshipit-source-id: 3c5306c62bc13bb11abc03422ec5cbcea1203cca/add counter for deletion dropping optimization Summary: add this counter stat to track usage of deletion-dropping optimization. if usage is low, we can delete it to prevent bugs like Closes Differential Revision: D5665421 Pulled By: ajkr fbshipit-source-id: 881befa2d199838dac88709e7b376a43d304e3d4/"
,,0.2627,rocksdb,"Add ValueType::kTypeBlobIndex Summary: Add kTypeBlobIndex value type, which will be used by blob db only, to insert a (key, blob_offset) KV pair. The purpose is to 1. Make it possible to open existing rocksdb instance as blob db. Existing value will be of kTypeIndex type, while value inserted by blob db will be of kTypeBlobIndex. 2. Make rocksdb able to detect if the db contains value written by blob db, if so return error. 3. Make it possible to have blob db optionally store value in SST file (with kTypeValue type) or as a blob value (with kTypeBlobIndex type). The root db (DBImpl) basically pretended kTypeBlobIndex are normal value on write. On Get if is_blob is provided, return whether the value read is of kTypeBlobIndex type, or return Status::NotSupported() status if is_blob is not provided. On scan allow_blob flag is pass and if the flag is true, return wether the value is of kTypeBlobIndex type via iter->IsBlob(). Changes on blob db side will be in a separate patch. Closes Differential Revision: D5838431 Pulled By: yiwu-arbug fbshipit-source-id: 3c5306c62bc13bb11abc03422ec5cbcea1203cca/"
,,0.46399999999999997,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/Fix coverity uninitialized fields warnings Pulled By: ajkr Differential Revision: D6170448 fbshipit-source-id: 5fd6d1608fc0df27c94d9f5059315ce7f79b8f5c/implement lower bound for iterators Summary: for `SeekToFirst()`, just convert it to a regular `Seek()` if lower bound is specified for operations that iterate backwards over user keys (`SeekForPrev`, `SeekToLast`, `Prev`), change `PrevInternal` to check whether user key went below lower bound every time the user key changes same approach we use to ensure we stay within a prefix when `prefix_same_as_start=true`. Closes Differential Revision: D6158654 Pulled By: ajkr fbshipit-source-id: cb0e3a922e2650d2cd4d1c6e1c0f1e8b729ff518/Fix tombstone scans in SeekForPrev outside prefix Summary: When doing a Seek() or SeekForPrev() we should stop the moment we see a key with a different prefix as start if ReadOptions:: prefix_same_as_start was set to true Right now we dont stop if we encounter a tombstone outside the prefix while executing SeekForPrev() Closes Differential Revision: D6149638 Pulled By: IslamAbdelRahman fbshipit-source-id: 7f659862d2bf552d3c9104a360c79439ceba2f18/Enable MSVC W4 with a few exceptions. Fix warnings and bugs Summary: Closes Differential Revision: D6079011 Pulled By: yiwu-arbug fbshipit-source-id: 988a721e7e7617967859dba71d660fc69f4dff57/WritePrepared Txn: Iterator Summary: On iterator create, take a snapshot, create a ReadCallback and pass the ReadCallback to the underlying DBIter to check if key is committed. Closes Differential Revision: D6001471 Pulled By: yiwu-arbug fbshipit-source-id: 3565c4cdaf25370ba47008b0e0cb65b31dfe79fe/Add ValueType::kTypeBlobIndex Summary: Add kTypeBlobIndex value type, which will be used by blob db only, to insert a (key, blob_offset) KV pair. The purpose is to 1. Make it possible to open existing rocksdb instance as blob db. Existing value will be of kTypeIndex type, while value inserted by blob db will be of kTypeBlobIndex. 2. Make rocksdb able to detect if the db contains value written by blob db, if so return error. 3. Make it possible to have blob db optionally store value in SST file (with kTypeValue type) or as a blob value (with kTypeBlobIndex type). The root db (DBImpl) basically pretended kTypeBlobIndex are normal value on write. On Get if is_blob is provided, return whether the value read is of kTypeBlobIndex type, or return Status::NotSupported() status if is_blob is not provided. On scan allow_blob flag is pass and if the flag is true, return wether the value is of kTypeBlobIndex type via iter->IsBlob(). Changes on blob db side will be in a separate patch. Closes Differential Revision: D5838431 Pulled By: yiwu-arbug fbshipit-source-id: 3c5306c62bc13bb11abc03422ec5cbcea1203cca/Make DBIter class final Summary: DBIter is referenced in ArenaWrappedDBIter, which is a simple wrapper. If DBIter is final, some virtual function call can be avoided. Some functions can even be inlined, like DBIter.value() to ArenaWrappedDBIter.value() and DBIter.key() to ArenaWrappedDBIter.key(). The performance gain is hard to measure. I just ran the memory-only benchmark for readseq and saw it didnt regress. There shouldnt be any harm doing it. Just give compiler more choices. Closes Differential Revision: D5799888 Pulled By: siying fbshipit-source-id: 829788f91310c40282dcfb7e412e6ef489931143/"
,,0.212,rocksdb,"expose a hook to skip tables during iteration Summary: As discussed on the mailing list ([""Skipping entire SSTs while iterating""]( this patch adds a `table_filter` to `ReadOptions` that allows specifying a callback to be executed during iteration before each table in the database is scanned. The callback is passed the tables properties; the table is scanned iff the callback returns true. This can be used in conjunction with a `TablePropertiesCollector` to dramatically speed up scans by skipping tables that are known to contain irrelevant data for the scan at hand. Were using this [downstream in CockroachDB]( already. With this feature, under ideal conditions, we can reduce the time of an incremental backup in from hours to seconds. FYI, the first commit in this PR fixes a segfault that I unfortunately have not figured out how to reproduce outside of CockroachDB. Im hoping you accept it on the grounds that it is not correct to return 8-byte aligned memory from a call to `malloc` on some 64-bit platforms; one correct approach is to infer the necessary alignment from `std::max_align_t`, as done here. As noted in the first commit message, the bug is tickled by having a`std::function` in `struct ReadOptions`. That is, the following patch alone is enough to cause RocksDB to segfault when run from CockroachDB on Darwin. ```diff a/include/rocksdb/options.h +++ b/include/rocksdb/options.h +1546,13 struct ReadOptions { // Default: false bool ignore_range_deletions; + // A callback to determine whether relevant keys for this scan exist in a + // given table based on the tables properties. The callback is passed the + // properties of each table during iteration. If the callback returns false, + // the table will not be scanned. + // Default: empty (every table will be scanned) + std::function<bool(const TableProperties&)> table_filter; + ReadOptions(); ReadOptions(bool cksum, bool cache); }; ``` /cc danhhz Closes Differential Revision: D5054262 Pulled By: yiwu-arbug fbshipit-source-id: dd6b28f2bba6cb8466250d8c5c542d3c92785476/fix DBImpl::NewInternalIterator super-version leak on failure Summary: Close Closes Differential Revision: D5962872 Pulled By: yiwu-arbug fbshipit-source-id: a6472d5c015bea3dc476c572ff5a5c90259e6059/Break down PinnedDataIteratorRandomized Summary: Its timing out under tsan. Closes Differential Revision: D5911766 Pulled By: maysamyabandeh fbshipit-source-id: 2faacc07752ac8713a3a2abb5a4c4b7ae3bdf208/"
,,0.5475,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/Add DB::Properties::kEstimateOldestKeyTime Summary: With FIFO compaction we would like to get the oldest data time for monitoring. The problem is we dont have timestamp for each key in the DB. As an approximation, we expose the earliest of sst file ""creation_time"" property. My plan is to override the property with a more accurate value with blob db, where we actually have timestamp. Closes Differential Revision: D5770600 Pulled By: yiwu-arbug fbshipit-source-id: 03833c8f10bbfbee62f8ea5c0d03c0cafb5d853a/"
,,0.5669,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/WritePrepared Txn: Compaction/Flush Summary: Update Compaction/Flush to support WritePreparedTxnDB: Add SnapshotChecker which is a proxy to query WritePreparedTxnDB::IsInSnapshot. Pass SnapshotChecker to DBImpl on WritePreparedTxnDB open. CompactionIterator use it to check if a key has been committed and if it is visible to a snapshot. In CompactionIterator: * check if key has been committed. If not, output uncommitted keys AS-IS. * use SnapshotChecker to check if key is visible to a snapshot when in need. * do not output key with seq 0 if the key is not committed. Closes Differential Revision: D5902907 Pulled By: yiwu-arbug fbshipit-source-id: 945e037fdf0aa652dc5ba0ad879461040baa0320/"
,,0.4718,rocksdb,"Added support for differential snapshots Summary: The motivation for this PR is to add to RocksDB support for differential (incremental) snapshots, as snapshot of the DB changes between two points in time (one can think of it as diff between to sequence numbers, or the diff D which can be thought of as an SST file or just set of KVs that can be applied to sequence number S1 to get the database to the state at sequence number S2). This feature would be useful for various distributed storages layers built on top of RocksDB, as it should help reduce resources (time and network bandwidth) needed to recover and rebuilt DB instances as replicas in the context of distributed storages. From the API standpoint that would like client app requesting iterator between (start seqnum) and current DB state, and reading the ""diff"". This is a very draft PR for initial review in the discussion on the approach, im going to rework some parts and keep updating the PR. For now, whats done here according to initial discussions: Preserving deletes: We want to be able to optionally preserve recent deletes for some defined period of time, so that if a delete came in recently and might need to be included in the next incremental snapshot it wouldt get dropped by a compaction. This is done by adding new param to Options (preserve deletes flag) and new variable to DB Impl where we keep track of the sequence number after which we dont want to drop tombstones, even if they are otherwise eligible for deletion. I also added a new API call for clients to be able to advance this cutoff seqnum after which we drop deletes; i assume its more flexible to let clients control this, since otherwise wed need to keep some kind of timestamp > seqnum mapping inside the DB, which sounds messy and painful to support. Clients could make use of it by periodically calling GetLatestSequenceNumber(), noting the timestamp, doing some calculation and figuring out by how much we need to advance the cutoff seqnum. Compaction codepath in compaction_iterator.cc has been modified to avoid dropping tombstones with seqnum > cutoff seqnum. Iterator changes: couple params added to ReadOptions, to optionally allow client to request internal keys instead of user keys (so that client can get the latest value of a key, be it delete marker or a put), as well as min timestamp and min seqnum. TableCache changes: I modified table_cache code to be able to quickly exclude SST files from iterators heep if creation_time on the file is less then iter_start_ts as passed in ReadOptions. That would help a lot in some DB settings (like reading very recent data only or using FIFO compactions), but not so much for universal compaction with more or less long iterator time span. Whats left: Still looking at how to best plug that inside DBIter codepath. So far it seems that FindNextUserKeyInternal only parses values as UserKeys, and iter->key() call generally returns user key. Can we add new API to DBIter as internal_key(), and modify this internal method to optionally set saved_key_ to point to the full internal key? I dont need to store actual seqnum there, but I do need to store type. Closes Differential Revision: D6175602 Pulled By: mikhail-antonov fbshipit-source-id: c779a6696ee2d574d86c69cec866a3ae095aa900/fix delete range bug Summary: Fix this [issue]( ajkr PTAL Close Closes Differential Revision: D6078541 Pulled By: yiwu-arbug fbshipit-source-id: ef3db87b37b9156f83ca468aa39dea1f6dbde49d/WritePrepared Txn: Compaction/Flush Summary: Update Compaction/Flush to support WritePreparedTxnDB: Add SnapshotChecker which is a proxy to query WritePreparedTxnDB::IsInSnapshot. Pass SnapshotChecker to DBImpl on WritePreparedTxnDB open. CompactionIterator use it to check if a key has been committed and if it is visible to a snapshot. In CompactionIterator: * check if key has been committed. If not, output uncommitted keys AS-IS. * use SnapshotChecker to check if key is visible to a snapshot when in need. * do not output key with seq 0 if the key is not committed. Closes Differential Revision: D5902907 Pulled By: yiwu-arbug fbshipit-source-id: 945e037fdf0aa652dc5ba0ad879461040baa0320/Remove an ""unused"" variable Summary: PR 2893 introduced a variable that is only used in TEST_SYNC_POINT_CALLBACK. When RocksDB is not built in debug mode, this method is not compiled in, and the variable is unused, which triggers a compiler error. This patch reverts the corresponding part of Closes Reviewed By: yiwu-arbug Differential Revision: D5955679 Pulled By: asandryh fbshipit-source-id: ac4a8e85b22da7f02efb117cd2e4a6e07ba73390/Make bytes_per_sync and wal_bytes_per_sync mutable Summary: SUMMARY Moves the bytes_per_sync and wal_bytes_per_sync options from immutableoptions to mutable options. Also if wal_bytes_per_sync is changed, the wal file and memtables are flushed. TEST PLAN ran make check all passed Two new tests SetBytesPerSync, SetWalBytesPerSync check that after issuing setoptions with a new value for the var, the db options have the new value. Closes Reviewed By: yiwu-arbug Differential Revision: D5845814 Pulled By: TheRushingWookie fbshipit-source-id: 93b52d779ce623691b546679dcd984a06d2ad1bd/Fix CLANG Analyze Summary: clang analyze shows warnings after we upgrade the CLANG version. Fix them. Closes Differential Revision: D5769060 Pulled By: siying fbshipit-source-id: 3f8e4df715590d8984f6564b608fa08cfdfa5f14/add counter for deletion dropping optimization Summary: add this counter stat to track usage of deletion-dropping optimization. if usage is low, we can delete it to prevent bugs like Closes Differential Revision: D5665421 Pulled By: ajkr fbshipit-source-id: 881befa2d199838dac88709e7b376a43d304e3d4/"
,,0.5105,rocksdb,"Add the max trace file size limitation option to Tracing (#4610) Summary: If user do not end the trace manually, the tracing will continue which can potential use up all the storage space and cause problem. In this PR, the max trace file size is added to the TraceOptions and user can set the value if they need or the default is 64GB. Pull Request resolved: Differential Revision: D12893400 Pulled By: zhichao-cao fbshipit-source-id: acf4b5a6076bb691778bdfbac4864e1006758953/FIX Move global const object definitions from .h to .cc (#4691) Summary: Summary We should declare constants in headers and define them in source files. But this commit is only aimed at compound types. I dont know if it is necessary to do the same thing to fundamental types. I used this command to find all of the constant definitions in header files. `find . ""*.h"" | xargs grep ""^const .*=.*""` And here is what I found: ``` ./db/version_edit.h:const uint64_t kFileNumberMask 0x3FFFFFFFFFFFFFFF; ./include/rocksdb/env.h:const size_t kDefaultPageSize 4 * 1024; ./include/rocksdb/statistics.h:const std::vector<std::pair<Tickers, std::string>> TickersNameMap { ./include/rocksdb/statistics.h:const std::vector<std::pair<Histograms, std::string>> HistogramsNameMap { ./include/rocksdb/table.h:const uint32_t kPlainTableVariableLength 0; ./include/rocksdb/utilities/transaction_db.h:const uint32_t kInitialMaxDeadlocks 5; ./port/port_posix.h:const uint32_t kMaxUint32 std::numeric_limits<uint32_t>::max(); ./port/port_posix.h:const int kMaxInt32 std::numeric_limits<int32_t>::max(); ./port/port_posix.h:const uint64_t kMaxUint64 std::numeric_limits<uint64_t>::max(); ./port/port_posix.h:const int64_t kMaxInt64 std::numeric_limits<int64_t>::max(); ./port/port_posix.h:const size_t kMaxSizet std::numeric_limits<size_t>::max(); ./port/win/port_win.h:const uint32_t kMaxUint32 UINT32_MAX; ./port/win/port_win.h:const int kMaxInt32 INT32_MAX; ./port/win/port_win.h:const int64_t kMaxInt64 INT64_MAX; ./port/win/port_win.h:const uint64_t kMaxUint64 UINT64_MAX; ./port/win/port_win.h:const size_t kMaxSizet UINT64_MAX; ./port/win/port_win.h:const size_t kMaxSizet UINT_MAX; ./port/win/port_win.h:const uint32_t kMaxUint32 std::numeric_limits<uint32_t>::max(); ./port/win/port_win.h:const int kMaxInt32 std::numeric_limits<int>::max(); ./port/win/port_win.h:const uint64_t kMaxUint64 std::numeric_limits<uint64_t>::max(); ./port/win/port_win.h:const int64_t kMaxInt64 std::numeric_limits<int64_t>::max(); ./port/win/port_win.h:const size_t kMaxSizet std::numeric_limits<size_t>::max(); ./port/win/port_win.h:const bool kLittleEndian true; ./table/cuckoo_table_factory.h:const uint32_t kCuckooMurmurSeedMultiplier 816922183; ./table/data_block_hash_index.h:const uint8_t kNoEntry 255; ./table/data_block_hash_index.h:const uint8_t kCollision 254; ./table/data_block_hash_index.h:const uint8_t kMaxRestartSupportedByHashIndex 253; ./table/data_block_hash_index.h:const size_t kMaxBlockSizeSupportedByHashIndex 1u 16; ./table/data_block_hash_index.h:const double kDefaultUtilRatio 0.75; ./table/filter_block.h:const uint64_t kNotValid ULLONG_MAX; ./table/format.h:const int kMagicNumberLengthByte 8; ./third-party/fbson/FbsonJsonParser.h:const char* const kJsonDelim "" ,]}\t\r\n""; ./third-party/fbson/FbsonJsonParser.h:const char* const kWhiteSpace "" \t\n\r""; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const BiggestInt kMaxBiggestInt ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const char kDeathTestStyleFlag[] ""death_test_style""; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const char kDeathTestUseFork[] ""death_test_use_fork""; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const char kInternalRunDeathTestFlag[] ""internal_run_death_test""; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const char* pets[] {""cat"", ""dog""}; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const size_t kProtobufOneLinerMaxLength 50; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const int kMaxStackTraceDepth 100; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const T* WithParamInterface<T>::parameter_ NULL; ./util/coding.h:const unsigned int kMaxVarint64Length 10; ./util/filename.h:const size_t kFormatFileNumberBufSize 38; ./util/testutil.h:const SliceTransform* RandomSliceTransform(Random* rnd, int pre_defined ./util/trace_replay.h:const std::string kTraceMagic ""feedcafedeadbeef""; ./util/trace_replay.h:const unsigned int kTraceTimestampSize 8; ./util/trace_replay.h:const unsigned int kTraceTypeSize 1; ./util/trace_replay.h:const unsigned int kTracePayloadLengthSize 4; ./util/trace_replay.h:const unsigned int kTraceMetadataSize ./utilities/cassandra/serialize.h:const int64_t kCharMask 0xFFLL; ./utilities/cassandra/serialize.h:const int32_t kBitsPerByte 8; ``` And these 3 lines are related to this commit: ``` ./include/rocksdb/statistics.h:const std::vector<std::pair<Tickers, std::string>> TickersNameMap { ./include/rocksdb/statistics.h:const std::vector<std::pair<Histograms, std::string>> HistogramsNameMap { ./util/trace_replay.h:const std::string kTraceMagic ""feedcafedeadbeef""; ``` Any comments would be appreciated. Thanks. Pull Request resolved: Differential Revision: D13208049 Pulled By: ajkr fbshipit-source-id: e5ee55fdaec5447fc5798c6721e2821e7cdc0d5b/"
,,0.5058,rocksdb,"Add the max trace file size limitation option to Tracing (#4610) Summary: If user do not end the trace manually, the tracing will continue which can potential use up all the storage space and cause problem. In this PR, the max trace file size is added to the TraceOptions and user can set the value if they need or the default is 64GB. Pull Request resolved: Differential Revision: D12893400 Pulled By: zhichao-cao fbshipit-source-id: acf4b5a6076bb691778bdfbac4864e1006758953/FIX Move global const object definitions from .h to .cc (#4691) Summary: Summary We should declare constants in headers and define them in source files. But this commit is only aimed at compound types. I dont know if it is necessary to do the same thing to fundamental types. I used this command to find all of the constant definitions in header files. `find . ""*.h"" | xargs grep ""^const .*=.*""` And here is what I found: ``` ./db/version_edit.h:const uint64_t kFileNumberMask 0x3FFFFFFFFFFFFFFF; ./include/rocksdb/env.h:const size_t kDefaultPageSize 4 * 1024; ./include/rocksdb/statistics.h:const std::vector<std::pair<Tickers, std::string>> TickersNameMap { ./include/rocksdb/statistics.h:const std::vector<std::pair<Histograms, std::string>> HistogramsNameMap { ./include/rocksdb/table.h:const uint32_t kPlainTableVariableLength 0; ./include/rocksdb/utilities/transaction_db.h:const uint32_t kInitialMaxDeadlocks 5; ./port/port_posix.h:const uint32_t kMaxUint32 std::numeric_limits<uint32_t>::max(); ./port/port_posix.h:const int kMaxInt32 std::numeric_limits<int32_t>::max(); ./port/port_posix.h:const uint64_t kMaxUint64 std::numeric_limits<uint64_t>::max(); ./port/port_posix.h:const int64_t kMaxInt64 std::numeric_limits<int64_t>::max(); ./port/port_posix.h:const size_t kMaxSizet std::numeric_limits<size_t>::max(); ./port/win/port_win.h:const uint32_t kMaxUint32 UINT32_MAX; ./port/win/port_win.h:const int kMaxInt32 INT32_MAX; ./port/win/port_win.h:const int64_t kMaxInt64 INT64_MAX; ./port/win/port_win.h:const uint64_t kMaxUint64 UINT64_MAX; ./port/win/port_win.h:const size_t kMaxSizet UINT64_MAX; ./port/win/port_win.h:const size_t kMaxSizet UINT_MAX; ./port/win/port_win.h:const uint32_t kMaxUint32 std::numeric_limits<uint32_t>::max(); ./port/win/port_win.h:const int kMaxInt32 std::numeric_limits<int>::max(); ./port/win/port_win.h:const uint64_t kMaxUint64 std::numeric_limits<uint64_t>::max(); ./port/win/port_win.h:const int64_t kMaxInt64 std::numeric_limits<int64_t>::max(); ./port/win/port_win.h:const size_t kMaxSizet std::numeric_limits<size_t>::max(); ./port/win/port_win.h:const bool kLittleEndian true; ./table/cuckoo_table_factory.h:const uint32_t kCuckooMurmurSeedMultiplier 816922183; ./table/data_block_hash_index.h:const uint8_t kNoEntry 255; ./table/data_block_hash_index.h:const uint8_t kCollision 254; ./table/data_block_hash_index.h:const uint8_t kMaxRestartSupportedByHashIndex 253; ./table/data_block_hash_index.h:const size_t kMaxBlockSizeSupportedByHashIndex 1u 16; ./table/data_block_hash_index.h:const double kDefaultUtilRatio 0.75; ./table/filter_block.h:const uint64_t kNotValid ULLONG_MAX; ./table/format.h:const int kMagicNumberLengthByte 8; ./third-party/fbson/FbsonJsonParser.h:const char* const kJsonDelim "" ,]}\t\r\n""; ./third-party/fbson/FbsonJsonParser.h:const char* const kWhiteSpace "" \t\n\r""; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const BiggestInt kMaxBiggestInt ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const char kDeathTestStyleFlag[] ""death_test_style""; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const char kDeathTestUseFork[] ""death_test_use_fork""; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const char kInternalRunDeathTestFlag[] ""internal_run_death_test""; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const char* pets[] {""cat"", ""dog""}; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const size_t kProtobufOneLinerMaxLength 50; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const int kMaxStackTraceDepth 100; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const T* WithParamInterface<T>::parameter_ NULL; ./util/coding.h:const unsigned int kMaxVarint64Length 10; ./util/filename.h:const size_t kFormatFileNumberBufSize 38; ./util/testutil.h:const SliceTransform* RandomSliceTransform(Random* rnd, int pre_defined ./util/trace_replay.h:const std::string kTraceMagic ""feedcafedeadbeef""; ./util/trace_replay.h:const unsigned int kTraceTimestampSize 8; ./util/trace_replay.h:const unsigned int kTraceTypeSize 1; ./util/trace_replay.h:const unsigned int kTracePayloadLengthSize 4; ./util/trace_replay.h:const unsigned int kTraceMetadataSize ./utilities/cassandra/serialize.h:const int64_t kCharMask 0xFFLL; ./utilities/cassandra/serialize.h:const int32_t kBitsPerByte 8; ``` And these 3 lines are related to this commit: ``` ./include/rocksdb/statistics.h:const std::vector<std::pair<Tickers, std::string>> TickersNameMap { ./include/rocksdb/statistics.h:const std::vector<std::pair<Histograms, std::string>> HistogramsNameMap { ./util/trace_replay.h:const std::string kTraceMagic ""feedcafedeadbeef""; ``` Any comments would be appreciated. Thanks. Pull Request resolved: Differential Revision: D13208049 Pulled By: ajkr fbshipit-source-id: e5ee55fdaec5447fc5798c6721e2821e7cdc0d5b/"
,,0.096,rocksdb,"Allow full merge when root of history for a key is reached (#4909) Summary: Previously compaction was not collapsing operands for a first key on a layer, even in cases when it was its root of history. Some tests (CompactionJobTest.NonAssocMerge) was actually accounting for that bug, Pull Request resolved: Differential Revision: D13781169 Pulled By: finik fbshipit-source-id: d2de353ecf05bec39b942cd8d5b97a8dc445f336/"
,,0.5065,rocksdb,"FIX Move global const object definitions from .h to .cc (#4691) Summary: Summary We should declare constants in headers and define them in source files. But this commit is only aimed at compound types. I dont know if it is necessary to do the same thing to fundamental types. I used this command to find all of the constant definitions in header files. `find . ""*.h"" | xargs grep ""^const .*=.*""` And here is what I found: ``` ./db/version_edit.h:const uint64_t kFileNumberMask 0x3FFFFFFFFFFFFFFF; ./include/rocksdb/env.h:const size_t kDefaultPageSize 4 * 1024; ./include/rocksdb/statistics.h:const std::vector<std::pair<Tickers, std::string>> TickersNameMap { ./include/rocksdb/statistics.h:const std::vector<std::pair<Histograms, std::string>> HistogramsNameMap { ./include/rocksdb/table.h:const uint32_t kPlainTableVariableLength 0; ./include/rocksdb/utilities/transaction_db.h:const uint32_t kInitialMaxDeadlocks 5; ./port/port_posix.h:const uint32_t kMaxUint32 std::numeric_limits<uint32_t>::max(); ./port/port_posix.h:const int kMaxInt32 std::numeric_limits<int32_t>::max(); ./port/port_posix.h:const uint64_t kMaxUint64 std::numeric_limits<uint64_t>::max(); ./port/port_posix.h:const int64_t kMaxInt64 std::numeric_limits<int64_t>::max(); ./port/port_posix.h:const size_t kMaxSizet std::numeric_limits<size_t>::max(); ./port/win/port_win.h:const uint32_t kMaxUint32 UINT32_MAX; ./port/win/port_win.h:const int kMaxInt32 INT32_MAX; ./port/win/port_win.h:const int64_t kMaxInt64 INT64_MAX; ./port/win/port_win.h:const uint64_t kMaxUint64 UINT64_MAX; ./port/win/port_win.h:const size_t kMaxSizet UINT64_MAX; ./port/win/port_win.h:const size_t kMaxSizet UINT_MAX; ./port/win/port_win.h:const uint32_t kMaxUint32 std::numeric_limits<uint32_t>::max(); ./port/win/port_win.h:const int kMaxInt32 std::numeric_limits<int>::max(); ./port/win/port_win.h:const uint64_t kMaxUint64 std::numeric_limits<uint64_t>::max(); ./port/win/port_win.h:const int64_t kMaxInt64 std::numeric_limits<int64_t>::max(); ./port/win/port_win.h:const size_t kMaxSizet std::numeric_limits<size_t>::max(); ./port/win/port_win.h:const bool kLittleEndian true; ./table/cuckoo_table_factory.h:const uint32_t kCuckooMurmurSeedMultiplier 816922183; ./table/data_block_hash_index.h:const uint8_t kNoEntry 255; ./table/data_block_hash_index.h:const uint8_t kCollision 254; ./table/data_block_hash_index.h:const uint8_t kMaxRestartSupportedByHashIndex 253; ./table/data_block_hash_index.h:const size_t kMaxBlockSizeSupportedByHashIndex 1u 16; ./table/data_block_hash_index.h:const double kDefaultUtilRatio 0.75; ./table/filter_block.h:const uint64_t kNotValid ULLONG_MAX; ./table/format.h:const int kMagicNumberLengthByte 8; ./third-party/fbson/FbsonJsonParser.h:const char* const kJsonDelim "" ,]}\t\r\n""; ./third-party/fbson/FbsonJsonParser.h:const char* const kWhiteSpace "" \t\n\r""; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const BiggestInt kMaxBiggestInt ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const char kDeathTestStyleFlag[] ""death_test_style""; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const char kDeathTestUseFork[] ""death_test_use_fork""; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const char kInternalRunDeathTestFlag[] ""internal_run_death_test""; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const char* pets[] {""cat"", ""dog""}; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const size_t kProtobufOneLinerMaxLength 50; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const int kMaxStackTraceDepth 100; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const T* WithParamInterface<T>::parameter_ NULL; ./util/coding.h:const unsigned int kMaxVarint64Length 10; ./util/filename.h:const size_t kFormatFileNumberBufSize 38; ./util/testutil.h:const SliceTransform* RandomSliceTransform(Random* rnd, int pre_defined ./util/trace_replay.h:const std::string kTraceMagic ""feedcafedeadbeef""; ./util/trace_replay.h:const unsigned int kTraceTimestampSize 8; ./util/trace_replay.h:const unsigned int kTraceTypeSize 1; ./util/trace_replay.h:const unsigned int kTracePayloadLengthSize 4; ./util/trace_replay.h:const unsigned int kTraceMetadataSize ./utilities/cassandra/serialize.h:const int64_t kCharMask 0xFFLL; ./utilities/cassandra/serialize.h:const int32_t kBitsPerByte 8; ``` And these 3 lines are related to this commit: ``` ./include/rocksdb/statistics.h:const std::vector<std::pair<Tickers, std::string>> TickersNameMap { ./include/rocksdb/statistics.h:const std::vector<std::pair<Histograms, std::string>> HistogramsNameMap { ./util/trace_replay.h:const std::string kTraceMagic ""feedcafedeadbeef""; ``` Any comments would be appreciated. Thanks. Pull Request resolved: Differential Revision: D13208049 Pulled By: ajkr fbshipit-source-id: e5ee55fdaec5447fc5798c6721e2821e7cdc0d5b/Fix compatibility of public ticker stats (#4701) Summary: Added back the `NO_ITERATORS` that was removed in 5945e16dfc6e99522c607841cfd387eebed256fc. Marked it as deprecated since it is no longer populated, but kept for API compatibility. Made sure the new tickers, `NO_ITERATOR_CREATED` and `NO_ITERATOR_DELETED`, are appended at the end of the enum, in case people are relying on the int values. The change where `NO_ITERATOR_CREATED` and `NO_ITERATOR_DELETED` were introduced is unreleased so I believe it is ok to change their ordering. Pull Request resolved: Differential Revision: D13142887 Pulled By: ajkr fbshipit-source-id: 29a336ce5b46632ce50ad42ccc4a29013f71d6d6/Divide `NO_ITERATORS` into two counters `NO_ITERATOR_CREATED` and `NO_ITERATOR_DELETE` (#4498) Summary: Currently, `Statistics` can record tick by `recordTick()` whose second parameter is an `uint64_t`. That means tick can only increase. If we want to reduce tick, we have to work around like `RecordTick(statistics_, NO_ITERATORS, uint64_t(-1));`. Thats kind of a hack. So, this PR divide `NO_ITERATORS` into two counters `NO_ITERATOR_CREATED` and `NO_ITERATOR_DELETE`, making the counters increase only. Fixes . Pull Request resolved: Differential Revision: D10395010 Pulled By: sagar0 fbshipit-source-id: cfb523b22a37411c794b4e9da090f1ae30293db2/"
,,0.0951,rocksdb,"Divide `NO_ITERATORS` into two counters `NO_ITERATOR_CREATED` and `NO_ITERATOR_DELETE` (#4498) Summary: Currently, `Statistics` can record tick by `recordTick()` whose second parameter is an `uint64_t`. That means tick can only increase. If we want to reduce tick, we have to work around like `RecordTick(statistics_, NO_ITERATORS, uint64_t(-1));`. Thats kind of a hack. So, this PR divide `NO_ITERATORS` into two counters `NO_ITERATOR_CREATED` and `NO_ITERATOR_DELETE`, making the counters increase only. Fixes . Pull Request resolved: Differential Revision: D10395010 Pulled By: sagar0 fbshipit-source-id: cfb523b22a37411c794b4e9da090f1ae30293db2/"
,,0.0951,rocksdb,"Divide `NO_ITERATORS` into two counters `NO_ITERATOR_CREATED` and `NO_ITERATOR_DELETE` (#4498) Summary: Currently, `Statistics` can record tick by `recordTick()` whose second parameter is an `uint64_t`. That means tick can only increase. If we want to reduce tick, we have to work around like `RecordTick(statistics_, NO_ITERATORS, uint64_t(-1));`. Thats kind of a hack. So, this PR divide `NO_ITERATORS` into two counters `NO_ITERATOR_CREATED` and `NO_ITERATOR_DELETE`, making the counters increase only. Fixes . Pull Request resolved: Differential Revision: D10395010 Pulled By: sagar0 fbshipit-source-id: cfb523b22a37411c794b4e9da090f1ae30293db2/"
,,0.5678,rocksdb,"FIX Move global const object definitions from .h to .cc (#4691) Summary: Summary We should declare constants in headers and define them in source files. But this commit is only aimed at compound types. I dont know if it is necessary to do the same thing to fundamental types. I used this command to find all of the constant definitions in header files. `find . ""*.h"" | xargs grep ""^const .*=.*""` And here is what I found: ``` ./db/version_edit.h:const uint64_t kFileNumberMask 0x3FFFFFFFFFFFFFFF; ./include/rocksdb/env.h:const size_t kDefaultPageSize 4 * 1024; ./include/rocksdb/statistics.h:const std::vector<std::pair<Tickers, std::string>> TickersNameMap { ./include/rocksdb/statistics.h:const std::vector<std::pair<Histograms, std::string>> HistogramsNameMap { ./include/rocksdb/table.h:const uint32_t kPlainTableVariableLength 0; ./include/rocksdb/utilities/transaction_db.h:const uint32_t kInitialMaxDeadlocks 5; ./port/port_posix.h:const uint32_t kMaxUint32 std::numeric_limits<uint32_t>::max(); ./port/port_posix.h:const int kMaxInt32 std::numeric_limits<int32_t>::max(); ./port/port_posix.h:const uint64_t kMaxUint64 std::numeric_limits<uint64_t>::max(); ./port/port_posix.h:const int64_t kMaxInt64 std::numeric_limits<int64_t>::max(); ./port/port_posix.h:const size_t kMaxSizet std::numeric_limits<size_t>::max(); ./port/win/port_win.h:const uint32_t kMaxUint32 UINT32_MAX; ./port/win/port_win.h:const int kMaxInt32 INT32_MAX; ./port/win/port_win.h:const int64_t kMaxInt64 INT64_MAX; ./port/win/port_win.h:const uint64_t kMaxUint64 UINT64_MAX; ./port/win/port_win.h:const size_t kMaxSizet UINT64_MAX; ./port/win/port_win.h:const size_t kMaxSizet UINT_MAX; ./port/win/port_win.h:const uint32_t kMaxUint32 std::numeric_limits<uint32_t>::max(); ./port/win/port_win.h:const int kMaxInt32 std::numeric_limits<int>::max(); ./port/win/port_win.h:const uint64_t kMaxUint64 std::numeric_limits<uint64_t>::max(); ./port/win/port_win.h:const int64_t kMaxInt64 std::numeric_limits<int64_t>::max(); ./port/win/port_win.h:const size_t kMaxSizet std::numeric_limits<size_t>::max(); ./port/win/port_win.h:const bool kLittleEndian true; ./table/cuckoo_table_factory.h:const uint32_t kCuckooMurmurSeedMultiplier 816922183; ./table/data_block_hash_index.h:const uint8_t kNoEntry 255; ./table/data_block_hash_index.h:const uint8_t kCollision 254; ./table/data_block_hash_index.h:const uint8_t kMaxRestartSupportedByHashIndex 253; ./table/data_block_hash_index.h:const size_t kMaxBlockSizeSupportedByHashIndex 1u 16; ./table/data_block_hash_index.h:const double kDefaultUtilRatio 0.75; ./table/filter_block.h:const uint64_t kNotValid ULLONG_MAX; ./table/format.h:const int kMagicNumberLengthByte 8; ./third-party/fbson/FbsonJsonParser.h:const char* const kJsonDelim "" ,]}\t\r\n""; ./third-party/fbson/FbsonJsonParser.h:const char* const kWhiteSpace "" \t\n\r""; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const BiggestInt kMaxBiggestInt ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const char kDeathTestStyleFlag[] ""death_test_style""; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const char kDeathTestUseFork[] ""death_test_use_fork""; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const char kInternalRunDeathTestFlag[] ""internal_run_death_test""; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const char* pets[] {""cat"", ""dog""}; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const size_t kProtobufOneLinerMaxLength 50; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const int kMaxStackTraceDepth 100; ./third-party/gtest-1.7.0/fused-src/gtest/gtest.h:const T* WithParamInterface<T>::parameter_ NULL; ./util/coding.h:const unsigned int kMaxVarint64Length 10; ./util/filename.h:const size_t kFormatFileNumberBufSize 38; ./util/testutil.h:const SliceTransform* RandomSliceTransform(Random* rnd, int pre_defined ./util/trace_replay.h:const std::string kTraceMagic ""feedcafedeadbeef""; ./util/trace_replay.h:const unsigned int kTraceTimestampSize 8; ./util/trace_replay.h:const unsigned int kTraceTypeSize 1; ./util/trace_replay.h:const unsigned int kTracePayloadLengthSize 4; ./util/trace_replay.h:const unsigned int kTraceMetadataSize ./utilities/cassandra/serialize.h:const int64_t kCharMask 0xFFLL; ./utilities/cassandra/serialize.h:const int32_t kBitsPerByte 8; ``` And these 3 lines are related to this commit: ``` ./include/rocksdb/statistics.h:const std::vector<std::pair<Tickers, std::string>> TickersNameMap { ./include/rocksdb/statistics.h:const std::vector<std::pair<Histograms, std::string>> HistogramsNameMap { ./util/trace_replay.h:const std::string kTraceMagic ""feedcafedeadbeef""; ``` Any comments would be appreciated. Thanks. Pull Request resolved: Differential Revision: D13208049 Pulled By: ajkr fbshipit-source-id: e5ee55fdaec5447fc5798c6721e2821e7cdc0d5b/"
,,0.1083,rocksdb,Fix compilation under MSVC VS2015 (#6081) Summary: **NOTE**: this also needs to be back-ported to 6.4.6 and possibly older branches if further releases from them is envisaged. Pull Request resolved: Differential Revision: D18710107 Pulled By: zhichao-cao fbshipit-source-id: 03260f9316566e2bfc12c7d702d6338bb7941e01/
,,0.5303,rocksdb,"Fix compliation error on GCC4.8.2 (#6106) Summary: ``` In file included from /usr/include/c++/4.8.2/algorithm:62:0, from ./db/merge_context.h:7, from ./db/dbformat.h:16, from ./tools/block_cache_analyzer/block_cache_trace_analyzer.h:12, from tools/block_cache_analyzer/block_cache_trace_analyzer.cc:8: /usr/include/c++/4.8.2/bits/stl_algo.h: In instantiation of ë_RandomAccessIterator std::__unguarded_partition(_RandomAccessIterator, _RandomAccessIterator, const _Tp&, _Compare) [with _RandomAccessIterator __gnu_cxx::__normal_iterator<std::pair<std::basic_string<char>, long unsigned int>*, std::vector<std::pair<std::basic_string<char>, long unsigned int> > >; _Tp std::pair<std::basic_string<char>, long unsigned int>; _Compare rocksdb::BlockCacheTraceAnalyzer::WriteSkewness(const string&, const std::vector<long unsigned int>&, rocksdb::TraceType) const::__lambda1]í: /usr/include/c++/4.8.2/bits/stl_algo.h:2296:78: required from ë_RandomAccessIterator std::__unguarded_partition_pivot(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator __gnu_cxx::__normal_iterator<std::pair<std::basic_string<char>, long unsigned int>*, std::vector<std::pair<std::basic_string<char>, long unsigned int> > >; _Compare rocksdb::BlockCacheTraceAnalyzer::WriteSkewness(const string&, const std::vector<long unsigned int>&, rocksdb::TraceType) const::__lambda1]í /usr/include/c++/4.8.2/bits/stl_algo.h:2337:62: required from ëvoid std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator, _Size, _Compare) [with _RandomAccessIterator __gnu_cxx::__normal_iterator<std::pair<std::basic_string<char>, long unsigned int>*, std::vector<std::pair<std::basic_string<char>, long unsigned int> > >; _Size long int; _Compare rocksdb::BlockCacheTraceAnalyzer::WriteSkewness(const string&, const std::vector<long unsigned int>&, rocksdb::TraceType) const::__lambda1]í /usr/include/c++/4.8.2/bits/stl_algo.h:5499:44: required from ëvoid std::sort(_RAIter, _RAIter, _Compare) [with _RAIter __gnu_cxx::__normal_iterator<std::pair<std::basic_string<char>, long unsigned int>*, std::vector<std::pair<std::basic_string<char>, long unsigned int> > >; _Compare rocksdb::BlockCacheTraceAnalyzer::WriteSkewness(const string&, const std::vector<long unsigned int>&, rocksdb::TraceType) const::__lambda1í tools/block_cache_analyzer/block_cache_trace_analyzer.cc:583:79: required from here /usr/include/c++/4.8.2/bits/stl_algo.h:2263:35: error: no match for call to ë(rocksdb::BlockCacheTraceAnalyzer::WriteSkewness(const string&, const std::vector<long unsigned int>&, rocksdb::TraceType) const::__lambda1) (std::pair<std::basic_string<char>, long unsigned int>&, const std::pair<std::basic_string<char>, long unsigned int>&)í while (__comp(*__first, __pivot)) ^ tools/block_cache_analyzer/block_cache_trace_analyzer.cc:582:9: note: candidates are: [=](std::pair<std::string, uint64_t>& a, ^ In file included from /usr/include/c++/4.8.2/algorithm:62:0, from ./db/merge_context.h:7, from ./db/dbformat.h:16, from ./tools/block_cache_analyzer/block_cache_trace_analyzer.h:12, from tools/block_cache_analyzer/block_cache_trace_analyzer.cc:8: /usr/include/c++/4.8.2/bits/stl_algo.h:2263:35: note: bool (*)(std::pair<std::basic_string<char>, long unsigned int>&, std::pair<std::basic_string<char>, long unsigned int>&) while (__comp(*__first, __pivot)) ^ /usr/include/c++/4.8.2/bits/stl_algo.h:2263:35: note: candidate expects 3 arguments, 3 provided tools/block_cache_analyzer/block_cache_trace_analyzer.cc:583:46: note: rocksdb::BlockCacheTraceAnalyzer::WriteSkewness(const string&, const std::vector<long unsigned int>&, rocksdb::TraceType) const::__lambda1 std::pair<std::string, uint64_t>& b) { return b.second a.second; }); ^ tools/block_cache_analyzer/block_cache_trace_analyzer.cc:583:46: note: no known conversion for argument 2 from ëconst std::pair<std::basic_string<char>, long unsigned int>í to ëstd::pair<std::basic_string<char>, long unsigned int>&í In file included from /usr/include/c++/4.8.2/algorithm:62:0, from ./db/merge_context.h:7, from ./db/dbformat.h:16, from ./tools/block_cache_analyzer/block_cache_trace_analyzer.h:12, from tools/block_cache_analyzer/block_cache_trace_analyzer.cc:8: /usr/include/c++/4.8.2/bits/stl_algo.h:2266:34: error: no match for call to ë(rocksdb::BlockCacheTraceAnalyzer::WriteSkewness(const string&, const std::vector<long unsigned int>&, rocksdb::TraceType) const::__lambda1) (const std::pair<std::basic_string<char>, long unsigned int>&, std::pair<std::basic_string<char>, long unsigned int>&)í while (__comp(__pivot, *__last)) ^ tools/block_cache_analyzer/block_cache_trace_analyzer.cc:582:9: note: candidates are: [=](std::pair<std::string, uint64_t>& a, ^ In file included from /usr/include/c++/4.8.2/algorithm:62:0, from ./db/merge_context.h:7, from ./db/dbformat.h:16, from ./tools/block_cache_analyzer/block_cache_trace_analyzer.h:12, from tools/block_cache_analyzer/block_cache_trace_analyzer.cc:8: /usr/include/c++/4.8.2/bits/stl_algo.h:2266:34: note: bool (*)(std::pair<std::basic_string<char>, long unsigned int>&, std::pair<std::basic_string<char>, long unsigned int>&) while (__comp(__pivot, *__last)) ^ /usr/include/c++/4.8.2/bits/stl_algo.h:2266:34: note: candidate expects 3 arguments, 3 provided tools/block_cache_analyzer/block_cache_trace_analyzer.cc:583:46: note: rocksdb::BlockCacheTraceAnalyzer::WriteSkewness(const string&, const std::vector<long unsigned int>&, rocksdb::TraceType) const::__lambda1 std::pair<std::string, uint64_t>& b) { return b.second a.second; }); ^ tools/block_cache_analyzer/block_cache_trace_analyzer.cc:583:46: note: no known conversion for argument 1 from ëconst std::pair<std::basic_string<char>, long unsigned int>í to ëstd::pair<std::basic_string<char>, long unsigned int>&í ``` Pull Request resolved: Differential Revision: D18783943 Pulled By: riversand963 fbshipit-source-id: cc7fc10565f0210b9eebf46b95cb4950ec0b15fa/Fix compilation under MSVC VS2015 (#6081) Summary: **NOTE**: this also needs to be back-ported to 6.4.6 and possibly older branches if further releases from them is envisaged. Pull Request resolved: Differential Revision: D18710107 Pulled By: zhichao-cao fbshipit-source-id: 03260f9316566e2bfc12c7d702d6338bb7941e01/"
,,0.1102,rocksdb,Fix compilation under MSVC VS2015 (#6081) Summary: **NOTE**: this also needs to be back-ported to 6.4.6 and possibly older branches if further releases from them is envisaged. Pull Request resolved: Differential Revision: D18710107 Pulled By: zhichao-cao fbshipit-source-id: 03260f9316566e2bfc12c7d702d6338bb7941e01/
,,0.1102,rocksdb,Fix compilation under MSVC VS2015 (#6081) Summary: **NOTE**: this also needs to be back-ported to 6.4.6 and possibly older branches if further releases from them is envisaged. Pull Request resolved: Differential Revision: D18710107 Pulled By: zhichao-cao fbshipit-source-id: 03260f9316566e2bfc12c7d702d6338bb7941e01/
,,0.1083,rocksdb,Fix compilation under MSVC VS2015 (#6081) Summary: **NOTE**: this also needs to be back-ported to 6.4.6 and possibly older branches if further releases from them is envisaged. Pull Request resolved: Differential Revision: D18710107 Pulled By: zhichao-cao fbshipit-source-id: 03260f9316566e2bfc12c7d702d6338bb7941e01/
,,0.1102,rocksdb,Fix compilation under MSVC VS2015 (#6081) Summary: **NOTE**: this also needs to be back-ported to 6.4.6 and possibly older branches if further releases from them is envisaged. Pull Request resolved: Differential Revision: D18710107 Pulled By: zhichao-cao fbshipit-source-id: 03260f9316566e2bfc12c7d702d6338bb7941e01/
,,0.1102,rocksdb,Fix compilation under MSVC VS2015 (#6081) Summary: **NOTE**: this also needs to be back-ported to 6.4.6 and possibly older branches if further releases from them is envisaged. Pull Request resolved: Differential Revision: D18710107 Pulled By: zhichao-cao fbshipit-source-id: 03260f9316566e2bfc12c7d702d6338bb7941e01/
,,0.1102,rocksdb,Fix compilation under MSVC VS2015 (#6081) Summary: **NOTE**: this also needs to be back-ported to 6.4.6 and possibly older branches if further releases from them is envisaged. Pull Request resolved: Differential Revision: D18710107 Pulled By: zhichao-cao fbshipit-source-id: 03260f9316566e2bfc12c7d702d6338bb7941e01/
,,0.0913,rocksdb,Fix spelling: commited committed (#6481) Summary: In most places in the code the variable names are spelled correctly as COMMITTED but in a couple places not. This fixes them and ensures the variable is always called COMMITTED everywhere. Pull Request resolved: Differential Revision: D20306776 Pulled By: pdillinger fbshipit-source-id: b6c1bfe41db559b4bc6955c530934460c07f7022/
,,0.0929,rocksdb,Fix spelling: commited committed (#6481) Summary: In most places in the code the variable names are spelled correctly as COMMITTED but in a couple places not. This fixes them and ensures the variable is always called COMMITTED everywhere. Pull Request resolved: Differential Revision: D20306776 Pulled By: pdillinger fbshipit-source-id: b6c1bfe41db559b4bc6955c530934460c07f7022/
