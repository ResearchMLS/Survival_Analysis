Topic_no,Keywords,Contrib,System,Text
10,"issue, type, pointer, fix, library, message, git_svn, structure, time, avoid, native, parser, field, order, call, initialized_constructor, functions_call, load, id_bf, define",0.0865,conscrypt,am f26d5287: am b02e9dea: Fix parsing of long format DER octet string. am: 14035dcc0c * commit 14035dcc0c71a075c5ecf32a0e62295b890908f0: Fix parsing of long format DER octet string./
,,0.1258,conscrypt,"Add unused var args macro so OpenJDK compiles with debug am: e939897c4b am: 0315eed854 am: e03c736035 Change-Id: Ie7e81a4e3baa735e748d4947256b361ebe31f37a/Add unused var args macro so OpenJDK compiles with debug am: e939897c4b am: 0315eed854 Change-Id: I2e3224a33f3de0903fdd137de2539255dfd1dc0c/Add unused var args macro so OpenJDK compiles with debug am: e939897c4b Change-Id: Ie697aa36fd1417e9e25af13663381aed4ccf498c/Add unused var args macro so OpenJDK compiles with debug Currently the OpenJDK macros are not hooked up to any logging function, so they fail to compile with all the strict checking enabled. Test: enable all WITH_JNI_TRACE; mmma external/conscrypt Change-Id: Ia71296962940eca6afe934a20ffda054760b0907/"
,,0.1359,conscrypt,"User-friendly errors when native library fails to load (#295) Currently, we throw in static initialization of NativeCryptoJni, which leads to ClassNotFoundException whenever we try to access the native code at runtime. The user has no way of knowing that the library failed to load, or why. This PR attempts to make it more clear as to what went wrong, by doing the following: Log each load error, in the order attempted. Select the ""best"" load error to be thrown Dont throw from the NativeCrypto static initializer. Rather, save the best error and throw when attempting to access top-level conscrypt classes./"
,,0.1347,conscrypt,"User-friendly errors when native library fails to load (#295) Currently, we throw in static initialization of NativeCryptoJni, which leads to ClassNotFoundException whenever we try to access the native code at runtime. The user has no way of knowing that the library failed to load, or why. This PR attempts to make it more clear as to what went wrong, by doing the following: Log each load error, in the order attempted. Select the ""best"" load error to be thrown Dont throw from the NativeCrypto static initializer. Rather, save the best error and throw when attempting to access top-level conscrypt classes./"
,,0.0895,conscrypt,"Refactor OpenSSLCipher (#654) The heavily-nested class structure makes it hard to follow what every class is doing. Instead, break them out into their own classes by algorithm./"
,,0.0828,frostwire,[desktop] fixed transfers visible due to native translation of path/
,,0.0704,frostwire,[common] fixed Archive.org search results/
,,0.0704,frostwire,[common] fixed Archive.org search results/
,,0.0848,frostwire,[desktop] should fix Select-All key shortcut bug on OSX (Issue
,,0.0599,frostwire,"[android] Issue 662, NPE at LoaderManagerImpl.hasRunningLoaders/"
,,0.0764,frostwire,[android] debug output shows more about possible leakable class member/
,,0.1187,frostwire,"[android] NPE issue with FWVibrator/[android] Prevents system error on restart When the app was being shutdown a second time it was trying to unregister a receiver that hadnt been registered. This was because engineServiceStarter wasnt being called upon restart. engineServiceStarter was an instance method that was called upon onApplicationCreate. This method needs to be called in the background because it touched the configuration manager at some point. I could not invoke it with async(getApplication(), this.engineServiceStarter) because the executor verifier would complain about possible leaks, therefore I had to make the method static, however, async does not take two context parameters and a method so I pass the references to engine (which I now need to perform the internal assigments it used to do) and the application in a weak reference holding class. Perhaps this can be simplified/"
,,0.0946,frostwire,"[desktop] cant cast system class loader into URLClassLoader (java9+) For now a somewhat incomplete classpath is included in bug reports, the one coming out of System.getProperty(java.class.path) TODO: Dig into getting the classpath of each module loaded. ModuleLayer.boot().configuration().modules()/"
,,0.124,frostwire,"[desktop/mac] .dylibs signed libosx_jdk8.dylib contains native dispatch functions for macOS, this needs to be rebuilt to pass new mac notarization process the new .dylib will only contain Dispatch.m symbols as the rest are not used, memory savings yay. Source here: libJMPlayer.dylib needs to be rebuilt as well with newer MacOS SDK to pass notarization, this will be a bitch but it might help fix a few bugs of the MPlayer on macOS/"
,,0.0744,frostwire,[android] class casting issue fix on TransferDetailActivity::initUIBittorrentDownload/
,,0.3249,javacpp,"* Started using version numbers, friendly to tools like Maven, and placing packages in a sort of [Maven repository (issue * All files now get extracted into a temporary subdirectory, and with the appropriate platform-dependent linker options, or with libraries patched up after the fact with tools such as `install_name_tool` of Mac OS X, most native dynamic linkers can load dependent libraries from there * Changed the default value of the annotation from 0 to 1, and fixed the `Generator` when it is used with member getters and setters * Renamed `mingw-*.properties` to `windows-*-mingw.properties` for consistency * Made the `Generator` allocate native heap memory for callback arguments passed (in addition to `FunctionPointer`), rendering their behavior consistent with return in the case of function calls (issue * `Generator` now uses `std::runtime_error(std::string&)` instead of assuming that some nonstandard `std::exception(std::string&)` constructor exists (issue * Fixed `Generator` producing incorrect code when applying invalid annotations such as on a method that returns something else than a `Pointer` object (issue * Before loading the JNI library, the `Loader` now also tries to extract and load libraries listed in the preload={...})` annotation values, and to support library names with version numbers, each value has to follow the format (or to have `Builder` use it for the compiler as well), where ""version"" is the version number found in the filename as required by the native dynamic linker, usually a short sequence of digits and dots, but it can be anything (e.g.: would map to ""libmylib.so.4.2"", ""libmylib.4.2.dylib"", and ""mylib.4.2.dll"" under Linux, Mac OS X, and Windows respectively) * Stopped using `java.net.URL` as hash key in `Loader` (very bad idea)/ * Fixed syntax error in `VectorAdapter`, which GCC and Visual C++ would still happily compile * Added new `source.suffix` property to have the names of generated source files end with something else than `.cpp` and support frameworks like CUDA that require filenames with a `.cu` extension to compile properly, and also changed the `-cpp` command line option to `-nocompile`/Fixed Maven build and Mac OS X `-framework` option (issue and other minor things/"
,,0.2971,javacpp,"* Started using version numbers, friendly to tools like Maven, and placing packages in a sort of [Maven repository (issue * All files now get extracted into a temporary subdirectory, and with the appropriate platform-dependent linker options, or with libraries patched up after the fact with tools such as `install_name_tool` of Mac OS X, most native dynamic linkers can load dependent libraries from there * Changed the default value of the annotation from 0 to 1, and fixed the `Generator` when it is used with member getters and setters * Renamed `mingw-*.properties` to `windows-*-mingw.properties` for consistency * Made the `Generator` allocate native heap memory for callback arguments passed (in addition to `FunctionPointer`), rendering their behavior consistent with return in the case of function calls (issue * `Generator` now uses `std::runtime_error(std::string&)` instead of assuming that some nonstandard `std::exception(std::string&)` constructor exists (issue * Fixed `Generator` producing incorrect code when applying invalid annotations such as on a method that returns something else than a `Pointer` object (issue"
,,0.3599,javacpp,"* New annotation to reduce the size of generated code and optimize runtime performance of functions that are guaranteed not to throw exceptions, or for cases when we do not mind that the JVM may crash and burn * Trying to generate code for non-static native methods inside a class not extending `Pointer` now generates proper warning (issue * Fixed regression where the notation generates incorrect code for types other than `Pointer` (issue * Fixed generating incorrect code on primitive types/ * Trying to generate code for non-static native methods inside a class not extending `Pointer` now generates proper warning (issue * Fixed regression where the notation generates incorrect code for types other than `Pointer` (issue * Started using version numbers, friendly to tools like Maven, and placing packages in a sort of [Maven repository (issue * All files now get extracted into a temporary subdirectory, and with the appropriate platform-dependent linker options, or with libraries patched up after the fact with tools such as `install_name_tool` of Mac OS X, most native dynamic linkers can load dependent libraries from there * Changed the default value of the annotation from 0 to 1, and fixed the `Generator` when it is used with member getters and setters * Renamed `mingw-*.properties` to `windows-*-mingw.properties` for consistency * Made the `Generator` allocate native heap memory for callback arguments passed (in addition to `FunctionPointer`), rendering their behavior consistent with return in the case of function calls (issue * `Generator` now uses `std::runtime_error(std::string&)` instead of assuming that some nonstandard `std::exception(std::string&)` constructor exists (issue * Fixed `Generator` producing incorrect code when applying invalid annotations such as on a method that returns something else than a `Pointer` object (issue * Fixed syntax error in `VectorAdapter`, which GCC and Visual C++ would still happily compile * Added new `source.suffix` property to have the names of generated source files end with something else than `.cpp` and support frameworks like CUDA that require filenames with a `.cu` extension to compile properly, and also changed the `-cpp` command line option to `-nocompile`/"
,,0.1854,javacpp,"* Fixed callback parameter casting of primitive and `String` types * An empty can now be used to let `Generator` know of entities that are not part of any scope, such as macros and operators * Turned `FunctionPointer` into an `abstract class` with `protected` constructors, but if users still try to use it as function parameters, `Generator` now logs a warning indicating that a subclass should be used (issue"
,,0.1423,javacpp,"* Fixed `Loader.sizeof(Pointer.class)` to return the `sizeof(void*)` * In addition to methods and parameters, we may now apply to annotation types as well, allowing us to shorten expressions like int[]` to int[]`, to support `std::vector<int>`, and similarly for and `std::string`/"
,,0.1974,javacpp,"* Fixed callback parameter casting of primitive and `String` types * An empty can now be used to let `Generator` know of entities that are not part of any scope, such as macros and operators * Turned `FunctionPointer` into an `abstract class` with `protected` constructors, but if users still try to use it as function parameters, `Generator` now logs a warning indicating that a subclass should be used (issue"
,,0.3011,javacpp,"* Fixed not working along parameters with an * Fixed `Loader.sizeof(Pointer.class)` to return the `sizeof(void*)` * In addition to methods and parameters, we may now apply to annotation types as well, allowing us to shorten expressions like int[]` to int[]`, to support `std::vector<int>`, and similarly for and `std::string`/ * Fixed callback parameter casting of primitive and `String` types * An empty can now be used to let `Generator` know of entities that are not part of any scope, such as macros and operators * Turned `FunctionPointer` into an `abstract class` with `protected` constructors, but if users still try to use it as function parameters, `Generator` now logs a warning indicating that a subclass should be used (issue * Fixed `Pointer.equals(null)` throwing `NullPointerException` (issue * would erroneously prevent `sizeof()` operations from getting generated/ * Fixed problems when trying to map `java.lang.String` to other native types than `char*`, such as `unsigned char*`/ * JavaCPP now uses the `new (std::nothrow)` operator for allocation, which guarantees that allocation of primitive native arrays wont throw exceptions, making it possible to build C++ exception free JNI libraries/"
,,0.1795,javacpp,"Fixed `BuildMojo` not working without specifying any class or package after last change to `Builder`/ * Exported `Loader.isLoadLibraries()`, which always returns true, except when the `Builder` loads the classes * Made it possible to specify a nested class (with a $ character in the name) on the command line * When `Pointer.limit 0`, the methods `put()`, `zero()`, and `asBuffer()` now assume a size of 1/Modified `Builder` to prevent requiring the `jvm` library for cases where linking has a high probability of failure/"
,,0.0657,javacpp,Fixed `BuildMojo` not working without specifying any class or package after last change to `Builder` (fix
,,0.2227,javacpp,"Fixed compile error of `FunctionPointer` deallocator with * Fixed compiler error on 32-bit Mac OS X/Fixed a few small things/Modified `Builder` to prevent requiring the `jvm` library for cases where linking has a high probability of failure/ * Renamed various variables in `Generator` to make the generated code more readable * Fixed memory corruption when using on a function that returns by value an `std::string` (issue * Fixed memory corruption when returning by value an `std::vector<>` using an adapter * Added `Pointer.zero()` method that calls `memset(0)` on the range * For easier memory management, more than one `Pointer` now allowed to share the `deallocator` when ""casting"" them/ * Fixed not working when attempting to `return` the argument/Fixed a few things related to named `FunctionPointer` callbacks/"
,,0.3011,javacpp,"* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/ * To help diagnose `UnsatisfiedLinkError` thrown by `Loader.load()`, they have been augmented with a potential cause originating from the ""preloading"" of libraries, whose premature deletion has also been fixed/ * Provided new annotation value to let users specify the name of the native library used by both `Builder` and `Loader`, where different classes with the same name get built together, which also works on nested classes (issue"
,,0.20600000000000002,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2077,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.0903,javacpp,* Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.0903,javacpp,* Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.0843,javacpp,* Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2094,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2026,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2162,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.0883,javacpp,* Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.1991,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2009,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2691,javacpp,"* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/ * Provided new annotation value to let users specify the name of the native library used by both `Builder` and `Loader`, where different classes with the same name get built together, which also works on nested classes (issue"
,,0.2094,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2094,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.0863,javacpp,* Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.0843,javacpp,* Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.20600000000000002,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2111,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2043,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2128,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.0863,javacpp,* Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.0843,javacpp,* Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.0883,javacpp,* Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2128,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.20600000000000002,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2077,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.0863,javacpp,* Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.0843,javacpp,* Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.0903,javacpp,* Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.20600000000000002,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.1991,javacpp,* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/
,,0.2986,javacpp,"* Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic * Worked around bug of `InputStream.available()` always returning 0 with the ` protocol in `Loader.extractResource(URL)`/Released version 0.4 * Fixed potential problem with methods of `FunctionPointer` annotated with * Upgraded references of the Android NDK to version r8d/ * Fixed callbacks not working on Android anymore (issue * Added some Javadoc to most of the code/ * Provided new annotation value to let users specify the name of the native library used by both `Builder` and `Loader`, where different classes with the same name get built together, which also works on nested classes (issue"
,,0.1341,javacpp,"* Fixed callbacks when used with custom class loaders such as with Web containers/ * Fixed using (or other with annotations) on callbacks (issue incidentally allowing them to return a `String`/ * By default, `Builder` now links to the `jvm` library only when required, when using the `-header` command line option (issue"
,,0.0724,javacpp,"* When catching a C++ exception, the first class declared after `throws` now gets thrown (issue instead of `RuntimeException`, which is still used by default * Fixed Java resource leak after catching a C++ exception/"
,,0.0744,javacpp,"* When catching a C++ exception, the first class declared after `throws` now gets thrown (issue instead of `RuntimeException`, which is still used by default * Fixed Java resource leak after catching a C++ exception/"
,,0.1261,javacpp,"* Fixed invalid code generated for `FunctionPointer` parameters annotated with * When catching a C++ exception, the first class declared after `throws` now gets thrown (issue instead of `RuntimeException`, which is still used by default * Fixed Java resource leak after catching a C++ exception/"
,,0.1008,javacpp,* Fixed a few potential issues with the hacks in `Loader` * Generalized somewhat more the compiler options used inside `linux-arm.properties` (issue javacv:418)/
,,0.1121,javacpp,* Fixed a few potential issues with the hacks in `Loader` * Generalized somewhat more the compiler options used inside `linux-arm.properties` (issue javacv:418)/
,,0.1479,javacpp,"* Made `Loader.load()` work, within reason, even when all annotations and resources have been removed, for example, by ProGuard * Fixed compile error when using a `FunctionPointer` as parameter from outside its top-level enclosing class * The `Parser` now filters tokens appropriately with preprocessor directives * Improved the C++ support of the `Parser` for macros, templates, etc/"
,,0.1177,javacpp,* Fixed a few potential issues with the hacks in `Loader` * Generalized somewhat more the compiler options used inside `linux-arm.properties` (issue javacv:418)/
,,0.1121,javacpp,* Fixed a few potential issues with the hacks in `Loader` * Generalized somewhat more the compiler options used inside `linux-arm.properties` (issue javacv:418)/
,,0.1613,javacpp,"* Cleaned up and optimized `Generator` a bit, and fixed a crash that could occur when `FindClass()` returns NULL/ * Made `Loader.load()` work, within reason, even when all annotations and resources have been removed, for example, by ProGuard * Fixed compile error when using a `FunctionPointer` as parameter from outside its top-level enclosing class * The `Parser` now filters tokens appropriately with preprocessor directives * Improved the C++ support of the `Parser` for macros, templates, etc/"
,,0.1808,javacpp,"* Added `public long Pointer.address()` getter method, useful when one needs to subtract two pointers * Removed old NetBeans project files that cause a conflict when trying to open as a Maven project (issue javacv:210)/ * Fixed compilation error on `FunctionPointer` classes containing no native callback methods * Continued to clean up the `Parser` and improve the support of enumerations/ * Added a `platform.library.path` property, such as ""lib/armeabi/"" in the case of the ""android-arm"" platform, to be used instead of ""package/platform"" (issue javacv:427) * Generalized references to the path of the Android NDK * Improved a few small things in the set of `Pointer` classes`/"
,,0.1038,javacpp,"* Added a `platform.library.path` property, such as ""lib/armeabi/"" in the case of the ""android-arm"" platform, to be used instead of ""package/platform"" (issue javacv:427) * Generalized references to the path of the Android NDK * Improved a few small things in the set of `Pointer` classes`/"
,,0.1103,javacpp,"* Added a `platform.library.path` property, such as ""lib/armeabi/"" in the case of the ""android-arm"" platform, to be used instead of ""package/platform"" (issue javacv:427) * Generalized references to the path of the Android NDK * Improved a few small things in the set of `Pointer` classes`/"
,,0.1519,javacpp,"* Move from Google Code to GitHub as main source code repository * Place build-time classes in the `org.bytedeco.javacpp.tools` package and bring out static nested classes, in an effort to avoid conflicts and ease development * Rename the `com.googlecode.javacpp` package to `org.bytedeco.javacpp`/"
,,0.1991,javacpp,"* Fixed compilation error on `FunctionPointer` classes containing no native callback methods * Continued to clean up the `Parser` and improve the support of enumerations/ * Annotations such as or are no longer ignored on parameters of getters or setters annotated with * Fixed some other corner cases in `Generator` * Added for convenience to `PointerPointer` a generic parameter `<P extends Pointer>` and the associated `get(Class<P> ...)` getters, as well as `String` getters and setters * Passing a `Class` object as first argument to a native method that returns a `Pointer` now determines the runtime type of that returned object/"
,,0.3352,javacpp,"* Fix `Generator.checkPlatform()` not checking super classes/ * Fix issues with pointers to function pointers/ * Fix issues in the `Parser` with the `long double`, `ptrdiff_t`, `intptr_t`, `uintptr_t`, `off_t` types, optional parentheses, const data types in templates, declarator names equal to a type name, friend functions, inline constructors, `typedef void` declarations within namespaces/ * Fix issues in the `Parser` with access specifiers and casting of const values by reference/ * Fix a few other minor issues in the `Parser`/"
,,0.2359,javacpp,"* Fix issues in the `Parser` with the `long double`, `ptrdiff_t`, `intptr_t`, `uintptr_t`, `off_t` types, optional parentheses, const data types in templates, declarator names equal to a type name, friend functions, inline constructors, `typedef void` declarations within namespaces/"
,,0.2375,javacpp,"* Fix issues in the `Parser` with the `long double`, `ptrdiff_t`, `intptr_t`, `uintptr_t`, `off_t` types, optional parentheses, const data types in templates, declarator names equal to a type name, friend functions, inline constructors, `typedef void` declarations within namespaces/"
,,0.2327,javacpp,"* Fix issues in the `Parser` with the `long double`, `ptrdiff_t`, `intptr_t`, `uintptr_t`, `off_t` types, optional parentheses, const data types in templates, declarator names equal to a type name, friend functions, inline constructors, `typedef void` declarations within namespaces/"
,,0.0723,javacpp,* Fix a few other minor issues in the `Parser`/
,,0.0588,javacpp,"* Fix `NullPointerException` when leaving the `includePath`, `linkPath`, or `preloadPath` Mojo parameter empty/"
,,0.26,javacpp,"* Fix issues in the `Parser` with the `long double`, `ptrdiff_t`, `intptr_t`, `uintptr_t`, `off_t` types, optional parentheses, const data types in templates, declarator names equal to a type name, friend functions, inline constructors, `typedef void` declarations within namespaces/ * Fix a few other minor issues in the `Parser`/"
,,0.1274,javacpp,* Fix `Generator.checkPlatform()` not checking super classes/ * Fix issues with pointers to function pointers/
,,0.2755,javacpp,"* Fix some `Parser` exceptions on valid declarations with macro expansions or overloaded cast operators/ * Fix some `Parser` exceptions on valid declarations with template arguments, and make `Info.javaName` usable in the case of `enum`/ * Use `Long.decode()` inside the `Tokenizer` to test more precisely when integer values are larger than 32 bits * Have the `Parser` produce ... put(... )` methods for standard C++ containers, avoiding mistaken calls to `Pointer.put(Pointer)` ([issue javacv:34]( * Let the `Parser` apply `Info.skip` in the case of macros as well * Remove warning log messages when using the annotation/"
,,0.129,javacpp,* Fix some `Parser` exceptions on valid declarations with macro expansions or overloaded cast operators/
,,0.129,javacpp,* Fix some `Parser` exceptions on valid declarations with macro expansions or overloaded cast operators/
,,0.1976,javacpp,"* Use `Long.decode()` inside the `Tokenizer` to test more precisely when integer values are larger than 32 bits * Have the `Parser` produce ... put(... )` methods for standard C++ containers, avoiding mistaken calls to `Pointer.put(Pointer)` ([issue javacv:34]( * Let the `Parser` apply `Info.skip` in the case of macros as well * Remove warning log messages when using the annotation/"
,,0.2004,javacpp,"* Use `Long.decode()` inside the `Tokenizer` to test more precisely when integer values are larger than 32 bits * Have the `Parser` produce ... put(... )` methods for standard C++ containers, avoiding mistaken calls to `Pointer.put(Pointer)` ([issue javacv:34]( * Let the `Parser` apply `Info.skip` in the case of macros as well * Remove warning log messages when using the annotation/"
,,0.075,javacpp,"* Fix multiple ""platform.preload"" or ""platform.preloadpath"" properties not getting considered by the `Loader`/"
,,0.0965,javacpp,* Add `SharedPtrAdapter` and corresponding annotation to support `shared_ptr` containers * Fix a few small issues with the `Parser` and the `Generator`/
,,0.0786,javacpp,* Fix a few more small issues with the `Parser` and the `Generator`/
,,0.1989,javacpp,"* Fix a few more small issues with the `Parser` and the `Generator`/ * Add `SharedPtrAdapter` and corresponding annotation to support `shared_ptr` containers * Fix a few small issues with the `Parser` and the `Generator`/ * In addition to direct NIO buffers, also accept as function arguments non-direct ones backed by arrays (issue bytedeco/javacpp-presets#36)/ * Fix callback functions defined inside a"
,,0.3601,javacpp,"* Fix `Parser` errors caused by constructors in nested `typedef struct` constructs, and skip over pointer names too (issue bytedeco/javacpp-presets#62)/ * Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/ * Fix `Parser` errors on unnamed `namespace` blocks, preprocessor directives with comments, and empty macros/ * Fix and enhance in various ways the support of `Parser` and `Generator` for function pointers, virtual functions, and abstract classes * Improve `Parser` check for `const` references and pointers required to output appropriate annotation * Add `Info.purify` to force the `Parser` in producing abstract classes/ * Fix `Tokenizer` failing on some character and string literals * Fix `Parser` errors caused by constructors in `typedef struct` constructs * Generalize `Info.virtualize` to let non-pure virtual functions get annotated with native` * Make `VectorAdapter` work even with elements that have no default constructor * Add `Parser` support for `std::pair` as a sort of zero-dimensional container type/ * Fix `Parser` crash on empty comments (issue"
,,0.3267,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/ * Fix and enhance in various ways the support of `Parser` and `Generator` for function pointers, virtual functions, and abstract classes * Improve `Parser` check for `const` references and pointers required to output appropriate annotation * Add `Info.purify` to force the `Parser` in producing abstract classes/ * Fix `Tokenizer` failing on some character and string literals * Fix `Parser` errors caused by constructors in `typedef struct` constructs * Generalize `Info.virtualize` to let non-pure virtual functions get annotated with native` * Make `VectorAdapter` work even with elements that have no default constructor * Add `Parser` support for `std::pair` as a sort of zero-dimensional container type/"
,,0.3255,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/ * Fix and enhance in various ways the support of `Parser` and `Generator` for function pointers, virtual functions, and abstract classes * Improve `Parser` check for `const` references and pointers required to output appropriate annotation * Add `Info.purify` to force the `Parser` in producing abstract classes/ * Fix `Tokenizer` failing on some character and string literals * Fix `Parser` errors caused by constructors in `typedef struct` constructs * Generalize `Info.virtualize` to let non-pure virtual functions get annotated with native` * Make `VectorAdapter` work even with elements that have no default constructor * Add `Parser` support for `std::pair` as a sort of zero-dimensional container type/"
,,0.2369,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/ * Fix `Tokenizer` failing on some character and string literals * Fix `Parser` errors caused by constructors in `typedef struct` constructs * Generalize `Info.virtualize` to let non-pure virtual functions get annotated with native` * Make `VectorAdapter` work even with elements that have no default constructor * Add `Parser` support for `std::pair` as a sort of zero-dimensional container type/"
,,0.2002,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/ * Fix and enhance in various ways the support of `Parser` and `Generator` for function pointers, virtual functions, and abstract classes * Improve `Parser` check for `const` references and pointers required to output appropriate annotation * Add `Info.purify` to force the `Parser` in producing abstract classes/"
,,0.2338,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/ * Fix `Tokenizer` failing on some character and string literals * Fix `Parser` errors caused by constructors in `typedef struct` constructs * Generalize `Info.virtualize` to let non-pure virtual functions get annotated with native` * Make `VectorAdapter` work even with elements that have no default constructor * Add `Parser` support for `std::pair` as a sort of zero-dimensional container type/"
,,0.2353,javacpp,"* Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/ * Fix `Tokenizer` failing on some character and string literals * Fix `Parser` errors caused by constructors in `typedef struct` constructs * Generalize `Info.virtualize` to let non-pure virtual functions get annotated with native` * Make `VectorAdapter` work even with elements that have no default constructor * Add `Parser` support for `std::pair` as a sort of zero-dimensional container type/"
,,0.3669,javacpp,"* Fix `Generator` performance issue on classes with a lot of methods (issue bytedeco/javacpp-presets#36)/ * Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception/ * Fix and enhance in various ways the support of `Parser` and `Generator` for function pointers, virtual functions, and abstract classes * Improve `Parser` check for `const` references and pointers required to output appropriate annotation * Add `Info.purify` to force the `Parser` in producing abstract classes/ * Fix `Tokenizer` failing on some character and string literals * Fix `Parser` errors caused by constructors in `typedef struct` constructs * Generalize `Info.virtualize` to let non-pure virtual functions get annotated with native` * Make `VectorAdapter` work even with elements that have no default constructor * Add `Parser` support for `std::pair` as a sort of zero-dimensional container type/"
,,0.3787,javacpp,"* Log when `Pointer.deallocator` gets registered, garbage collected, or deallocated manually, if `Logger.isDebugEnabled()` (redirectable to SLF4J) * Make `Pointer implements AutoCloseable` to let us try-with-resources, thus bumping requirements to Java SE 7 and Android 4.0/ * Fix `Parser` support for the `interface` keyword of the Microsoft C/C++ Compiler/ * Fix `Parser` bug involving simple types and skipped identifiers/ * Fix a couple of `Parser` issues on complex template types (issue * Fix some incorrectly translated comments in `Parser` (issue * Fix one more potential `NullPointerException` in `Parser` (issue * Properly parse overloaded `new` and `delete` operators, `friend` declarations, and default constructors with an explicit `void` parameter (issue * Fix a couple of potential `NullPointerException` in `Parser` (issue * Forbid `Parser` from producing `abstract` classes, preventing C++ factory methods and such from working properly (issue"
,,0.2154,javacpp,"* Fix a couple of `Parser` issues on complex template types (issue * Properly parse overloaded `new` and `delete` operators, `friend` declarations, and default constructors with an explicit `void` parameter (issue * Fix a couple of potential `NullPointerException` in `Parser` (issue"
,,0.1591,javacpp,"* Log when `Pointer.deallocator` gets registered, garbage collected, or deallocated manually, if `Logger.isDebugEnabled()` (redirectable to SLF4J) * Make `Pointer implements AutoCloseable` to let us try-with-resources, thus bumping requirements to Java SE 7 and Android 4.0/"
,,0.161,javacpp,"* Log when `Pointer.deallocator` gets registered, garbage collected, or deallocated manually, if `Logger.isDebugEnabled()` (redirectable to SLF4J) * Make `Pointer implements AutoCloseable` to let us try-with-resources, thus bumping requirements to Java SE 7 and Android 4.0/"
,,0.1573,javacpp,"* Log when `Pointer.deallocator` gets registered, garbage collected, or deallocated manually, if `Logger.isDebugEnabled()` (redirectable to SLF4J) * Make `Pointer implements AutoCloseable` to let us try-with-resources, thus bumping requirements to Java SE 7 and Android 4.0/"
,,0.2407,javacpp,"* Log when `Pointer.deallocator` gets registered, garbage collected, or deallocated manually, if `Logger.isDebugEnabled()` (redirectable to SLF4J) * Make `Pointer implements AutoCloseable` to let us try-with-resources, thus bumping requirements to Java SE 7 and Android 4.0/ * Properly parse overloaded `new` and `delete` operators, `friend` declarations, and default constructors with an explicit `void` parameter (issue * Fix a couple of potential `NullPointerException` in `Parser` (issue"
,,0.1473,javacpp,"* Fix `Parser` support for the `interface` keyword of the Microsoft C/C++ Compiler/ * Properly parse overloaded `new` and `delete` operators, `friend` declarations, and default constructors with an explicit `void` parameter (issue * Fix a couple of potential `NullPointerException` in `Parser` (issue"
,,0.16,javacpp,"* Adjust `BytePointer`, `CharPointer`, `IntPointer`, and `StringAdapter` to work with data strings that are not null-terminated (issue * Fix crash when trying to create objects from abstract classes, to let the exception be thrown on return (issue * Insure `Generator` casts properly to `jweak` when calling `DeleteWeakGlobalRef()` (issue"
,,0.161,javacpp,"* Log when `Pointer.deallocator` gets registered, garbage collected, or deallocated manually, if `Logger.isDebugEnabled()` (redirectable to SLF4J) * Make `Pointer implements AutoCloseable` to let us try-with-resources, thus bumping requirements to Java SE 7 and Android 4.0/"
,,0.1535,javacpp,"* Log when `Pointer.deallocator` gets registered, garbage collected, or deallocated manually, if `Logger.isDebugEnabled()` (redirectable to SLF4J) * Make `Pointer implements AutoCloseable` to let us try-with-resources, thus bumping requirements to Java SE 7 and Android 4.0/"
,,0.4448,javacpp,"* Fix the `Parser` producing invalid comments for macros/ * Fix the `Parser` skipping over some declarations by mistake * To let users specify `...` varargs as `Info.pointerTypes()`, have the `Parser` replace them with array `[]` when not found on the last parameter/ * Enhance basic support for containers of the style `std::vector<std::pair< ... > >` with user-friendly array-based setter methods * Fix `Generator` not passing function objects even when annotating `FunctionPointer` parameters with or * Map `bool*` to `boolean[]` tentatively in `Parser` since `sizeof(bool) sizeof(jboolean)` on most platforms/ * Allow `Parser` to generate annotations and overloaded `put()` methods in basic containers too * Move list of basic containers and types to `Info.cppTypes` of the ""basic/containers"" and ""basic/types"" `InfoMap` entries, letting users change them at build time * Fix some `Parser` issues with `typedef` and forward declarations inside `class` definitions/ * Insure `Parser` maps 64-bit values in C++ `enum` to `long` variables (issue * Fix `Generator` trying to cast improperly objects on return from functions * Make `Parser` take `constexpr` into account/ * Make `Parser` take namespace aliases into account, and fix a couple of preprocessing issues with `TokenIndexer`/ * Fix primitive arrays and NIO buffers not getting updated on return when used as arguments with adapters (issue bytedeco/javacpp-presets#109) * Remove confusing and now unnecessary empty constructors/"
,,0.2493,javacpp,"* Allow `Parser` to generate annotations and overloaded `put()` methods in basic containers too * Move list of basic containers and types to `Info.cppTypes` of the ""basic/containers"" and ""basic/types"" `InfoMap` entries, letting users change them at build time * Fix some `Parser` issues with `typedef` and forward declarations inside `class` definitions/"
,,0.0744,javacpp,* Add missing calls to `close()` for `InputStream` and `OutputStream` in `Loader` (issue * Remove `Piper` class no longer needed with Java SE 7/
,,0.0704,javacpp,* Fix potential race condition when deallocating `Pointer` objects from multiple threads/
,,0.3009,javacpp,"* Allow `Parser` to generate annotations and overloaded `put()` methods in basic containers too * Move list of basic containers and types to `Info.cppTypes` of the ""basic/containers"" and ""basic/types"" `InfoMap` entries, letting users change them at build time * Fix some `Parser` issues with `typedef` and forward declarations inside `class` definitions/ * Make `Parser` take namespace aliases into account, and fix a couple of preprocessing issues with `TokenIndexer`/"
,,0.1484,javacpp,"* Prevent `Generator` from initializing classes when preloading them, which can cause problems (issue bytedeco/javacpp-presets#126)/ * Add logging to `Loader.loadLibrary()` to help diagnose loading problems (issue"
,,0.1062,javacpp,"* Make `Parser` take namespace aliases into account, and fix a couple of preprocessing issues with `TokenIndexer`/"
,,0.1293,javacpp,"* Fix the `Parser` skipping over some declarations by mistake * To let users specify `...` varargs as `Info.pointerTypes()`, have the `Parser` replace them with array `[]` when not found on the last parameter/ * Make `Parser` take namespace aliases into account, and fix a couple of preprocessing issues with `TokenIndexer`/"
,,0.1004,javacpp,"* Make `Parser` take namespace aliases into account, and fix a couple of preprocessing issues with `TokenIndexer`/"
,,0.0704,javacpp,* Add missing calls to `close()` for `InputStream` and `OutputStream` in `Loader` (issue * Remove `Piper` class no longer needed with Java SE 7/
,,0.3695,javacpp,"* Enhance basic support for containers of the style `std::vector<std::pair< ... > >` with user-friendly array-based setter methods * Fix `Generator` not passing function objects even when annotating `FunctionPointer` parameters with or * Map `bool*` to `boolean[]` tentatively in `Parser` since `sizeof(bool) sizeof(jboolean)` on most platforms/ * Allow `Parser` to generate annotations and overloaded `put()` methods in basic containers too * Move list of basic containers and types to `Info.cppTypes` of the ""basic/containers"" and ""basic/types"" `InfoMap` entries, letting users change them at build time * Fix some `Parser` issues with `typedef` and forward declarations inside `class` definitions/ * Fix `Generator` trying to cast improperly objects on return from functions * Make `Parser` take `constexpr` into account/ * Fix potential race condition when deallocating `Pointer` objects from multiple threads/"
,,0.1159,javacpp,* Fix `Generator` trying to cast improperly objects on return from functions * Make `Parser` take `constexpr` into account/
,,0.377,javacpp,"* Prevent `Generator` from initializing classes when preloading them, which can cause problems (issue bytedeco/javacpp-presets#126)/ * Enhance basic support for containers of the style `std::vector<std::pair< ... > >` with user-friendly array-based setter methods * Fix `Generator` not passing function objects even when annotating `FunctionPointer` parameters with or * Map `bool*` to `boolean[]` tentatively in `Parser` since `sizeof(bool) sizeof(jboolean)` on most platforms/ * Allow `Parser` to generate annotations and overloaded `put()` methods in basic containers too * Move list of basic containers and types to `Info.cppTypes` of the ""basic/containers"" and ""basic/types"" `InfoMap` entries, letting users change them at build time * Fix some `Parser` issues with `typedef` and forward declarations inside `class` definitions/ * Fix `Generator` trying to cast improperly objects on return from functions * Make `Parser` take `constexpr` into account/ * Fix primitive arrays and NIO buffers not getting updated on return when used as arguments with adapters (issue bytedeco/javacpp-presets#109) * Remove confusing and now unnecessary empty constructors/"
,,0.1302,javacpp,"* Prevent `Loader` from extracting libraries more than once, which can cause problems (issue bytedeco/javacpp-presets#126) * Make `Indexer implements AutoCloseable` to let us try-with-resources/"
,,0.376,javacpp,"* Make `Parser` take into account Java keywords not reserved in C++, casting issues with `int64_t`, and `const` value types in basic containers/ * Fix corner cases when checking for the platform in `Generator` and `Parser`/Remove a potential NullPointerException in Parser (pull pull request from osialr/staging/mark-c-funcs-as-noexception * Annotate functions originating from `cinclude` with functions from c includes with noexception This allows the Generator to avoid wrapping the function invocations with try/catch when no exception is possible/ * Add support for C++11 `default` and `delete` on function declarations (issue * Add support for `enum` without enumerator list (issue * Add support for C++11 typed `enum` (issue * Add missing space for `const` types when normalizing template arguments in `Parser` (issue bytedeco/javacpp-presets#165)/ * Enhance `Parser` to support a bit better `&&` tokens and C++11 rvalue references (issue bytedeco/javacpp-presets#160)/Merge pull request from georgekankava/staging/nested-blocks-of-code-should-not-be-left-empty-fix-1 Do at least something for exceptions we swallow but do not expect/ * Fix `NullPointerException` in `Parser` on unexpected forms of function pointers (issue * Let `Parser` use adapters in the case `FunctionPointer` as well (issue bytedeco/javacpp-presets#145)/Fix up functionality for `Info.flatten`/"
,,0.1356,javacpp,* Set the internal DT_SONAME field in libraries created for Android (issue bytedeco/javacpp-presets#188)/Clarify `IllegalArgumentException` when it occurs on `new File(URI)` in `Builder`/ * Make `Builder` fail on `ClassNotFoundException` or `NoClassDefFoundError` instead of logging warnings/Merge pull request from 243826/master Fix `Builder` potentially generating code multiple times for the same class (issue
,,0.1161,javacpp,* Enhance `Parser` to support a bit better `&&` tokens and C++11 rvalue references (issue bytedeco/javacpp-presets#160)/
,,0.2017,javacpp,Merge pull request from osialr/staging/mark-c-funcs-as-noexception * Annotate functions originating from `cinclude` with functions from c includes with noexception This allows the Generator to avoid wrapping the function invocations with try/catch when no exception is possible/ * Fix `TokenIndexer` inserting an invalid token while expanding macros ending with a backslash (issue
,,0.12,javacpp,* Enhance `Parser` to support a bit better `&&` tokens and C++11 rvalue references (issue bytedeco/javacpp-presets#160)/
,,0.1102,javacpp,"* Make `Builder` fail on `ClassNotFoundException` or `NoClassDefFoundError` instead of logging warnings/ * Prepend ""javacpp."" to all properties associated with Maven in `BuildMojo` to avoid name clashes/"
,,0.1561,javacpp,"* Make `Parser` take into account Java keywords not reserved in C++, casting issues with `int64_t`, and `const` value types in basic containers/ * Fix corner cases when checking for the platform in `Generator` and `Parser`/"
,,0.0758,javacpp,* Add support for C++11 `default` and `delete` on function declarations (issue
,,0.1161,javacpp,* Enhance `Parser` to support a bit better `&&` tokens and C++11 rvalue references (issue bytedeco/javacpp-presets#160)/
,,0.1797,javacpp,Fix potential compilation error with VectorAdapter/ * Fix corner cases when checking for the platform in `Generator` and `Parser`/ * Let users define the `GENERIC_EXCEPTION_CLASS` macro (default of `std::exception`) to indicate the base exception thrown by native methods/ * Adjust a few things in `Generator` preventing from working properly in some cases (issue bytedeco/javacpp-presets#143)/
,,0.1179,javacpp,* Fix `TokenIndexer` inserting an invalid token while expanding macros ending with a backslash (issue
,,0.0828,javacpp,Remove a potential NullPointerException in Parser (pull up functionality for `Info.flatten`/
,,0.08,javacpp,Fix potentially failing tests/ * Fix `Loader.load()` error when called right after `Builder.build()` within the same process/
,,0.1151,javacpp,* Fix `IndexerTest` potentially failing with `OutOfMemoryError` (issue bytedeco/javacpp-presets#234) * Preload libraries to work around some cases when they refuse to load once renamed (issue deeplearning4j/libnd4j#235) * Fix compilation error on some `linux-ppc64le` platforms (issue deeplearning4j/libnd4j#232)/ * Fix `Loader.load()` error when called right after `Builder.build()` within the same process/
,,0.2365,javacpp,"* Fix potential `ParserException` on comments found after annotations before function declarations/ * Fix `NullPointerException` in `Parser` on variadic templates (issue * Use `Info.cppTypes` for all `Parser` type substitutions, in addition to macros and templates (issue bytedeco/javacpp-presets#192)/"
,,0.1047,javacpp,* Fix `NullPointerException` in `Builder` on inaccessible directories/ * Fix `NullPointerException` in `Builder` on invalid `java.home` system property/ * Fix `Loader.load()` error when called right after `Builder.build()` within the same process/
,,0.1715,javacpp,"* Use `Info.cppTypes` for all `Parser` type substitutions, in addition to macros and templates (issue bytedeco/javacpp-presets#192)/"
,,0.1577,javacpp,* Make sure `JavaCPP_getStringBytes()` is defined to handle exception messages when using callbacks/ * Consider `FunctionPointer` annotated with empty as non-member function pointers (issue * Treat all `String` with `Charset.defaultCharset()` (or define `MODIFIED_UTF8_STRING` for old behavior) (issue
,,0.1042,javacpp,* Add `UniquePtrAdapter` and corresponding annotation to support `unique_ptr` containers (issue bytedeco/javacpp-presets#266)/
,,0.1325,javacpp,"* Add ""org.bytedeco.javacpp.maxphysicalbytes"" system property to force calls to `System.gc()` based on `Pointer.physicalBytes()` * Allow strings ending with ""t"", ""g"", ""m"", etc to specify the number of bytes in system properties (issue * Synchronize memory allocation in `Pointer` when low on memory to avoid `OutOfMemoryError`/"
,,0.4192,javacpp,"* Make sure `Parser` exhausts all combinations of method parameter types even with duplicates (issue bytedeco/javacv#518)/ * Have `Parser` annotate the `allocate()` functions and not the actual constructors (issue bytedeco/javacpp-presets#297)/ * Fix `Parser` handling of `class`, `struct`, or `union` types with variables declared in the same statement/ * Make sure default values placed in `nullValue` by the `Parser` have the right type (issue bytedeco/javacv#518)/ * Fix `Parser` incorrectly skipping over some template function declarations/ * Insure `Parser` properly ignores the `auto`, `mutable`, `register`, `thread_local`, and `volatile` C++ keywords for storage classes * Fix `Generator` and `Parser` for types like `std::unordered_map<std::string,std::pair<int,int> >` (issue bytedeco/javacpp-presets#266)/ * Fix `Parser` not accepting namespace aliases with `::` tokens in them (issue bytedeco/javacpp-presets#265)/Fix `Parser` incorrectly escaping quotes for multiline `nullValue` of or pull request from mirosval/master * Fix `Parser` not expecting `friend class` declarations that start with `::`/Fix unexpected token :: This problem arose with tensorflow 0.10, javacpp was unable to parse a file that contained friend class with global scope identifier./ * Let `Parser` accept identifiers in addition to integer literals for bit fields (issue * Add support for data member pointers as pseudo-`FunctionPointer` (issue"
,,0.2148,javacpp,"* Allow C++ types to be prefixed by `class`, `struct`, or `union` to work around name clashes (pull bytedeco/javacpp-presets#266)/ * Add `std::forward_list`, `std::priority_queue`, `std::unordered_map`, and `std::unordered_set` to the list of ""basic/containers"" in `InfoMap` (issue bytedeco/javacpp-presets#266)/ * Add `UniquePtrAdapter` and corresponding annotation to support `unique_ptr` containers (issue bytedeco/javacpp-presets#266)/"
,,0.2081,javacpp,"* Insure `Parser` properly ignores the `auto`, `mutable`, `register`, `thread_local`, and `volatile` C++ keywords for storage classes * Fix `Generator` and `Parser` for types like `std::unordered_map<std::string,std::pair<int,int> >` (issue bytedeco/javacpp-presets#266)/"
,,0.3574,javacpp,"* Accelerate call to `Pointer.physicalBytes()` on Linux (issue * Allow C++ types to be prefixed by `class`, `struct`, or `union` to work around name clashes (pull bytedeco/javacpp-presets#266)/ * Insure `Parser` properly ignores the `auto`, `mutable`, `register`, `thread_local`, and `volatile` C++ keywords for storage classes * Fix `Generator` and `Parser` for types like `std::unordered_map<std::string,std::pair<int,int> >` (issue bytedeco/javacpp-presets#266)/ * Add ""org.bytedeco.javacpp.maxphysicalbytes"" system property to force calls to `System.gc()` based on `Pointer.physicalBytes()` * Allow strings ending with ""t"", ""g"", ""m"", etc to specify the number of bytes in system properties (issue * Add `UniquePtrAdapter` and corresponding annotation to support `unique_ptr` containers (issue bytedeco/javacpp-presets#266)/ * Add support for data member pointers as pseudo-`FunctionPointer` (issue"
,,0.0833,javacpp,"Update version in the `pom.xml` file to 1.3-SNAPSHOT * Print memory sizes in a human-readable format with `Pointer.formatBytes()` * Map standard `malloc()`, `calloc()`, `realloc()`, and `free()` functions (issue"
,,0.1322,javacpp,"* Take into account `const` on function parameters when looking up in `InfoMap`, and fix some incorrectly translated macros into variables * Add to `InfoMap.defaults` more names that are reserved in Java, but not in C++ * Add via support for function pointers passed by reference, as well as support for `Info.javaText` with `typedef`/"
,,0.2561,javacpp,"Update version in the `pom.xml` file to 1.3.1-SNAPSHOT * Fix potential issues with `Parser` repeating the or annotations on parameters * To support Scala singleton objects better, consider as `static` methods from objects that are not `Pointer` * Allow `Loader.extractResource()` and `cacheResource()` to extract or cache all files from a directory in a JAR file * Create version-less symbolic links to libraries in cache on those platforms where it is useful to link easily * Use `java.io.tmpdir` as fallback in `Loader.getCacheDir()`, and throw a clear exception on failure/ * Add support for `decltype()` declarations (issue * Fix `Parser` not properly mapping the type of `long` anonymous enums/ * Take into account `const` on function parameters when looking up in `InfoMap`, and fix some incorrectly translated macros into variables * Add to `InfoMap.defaults` more names that are reserved in Java, but not in C++ * Add via support for function pointers passed by reference, as well as support for `Info.javaText` with `typedef`/"
,,0.1155,javacpp,* Fix broken `outputDirectory` property and corresponding `-d` command line option (issue * Add `Loader.extractResources()` and `cacheResources()` methods to extract or cache all resources with given name/
,,0.1439,javacpp,"* Take into account `const` on function parameters when looking up in `InfoMap`, and fix some incorrectly translated macros into variables * Add to `InfoMap.defaults` more names that are reserved in Java, but not in C++ * Add via support for function pointers passed by reference, as well as support for `Info.javaText` with `typedef`/"
,,0.073,javacpp,* Add support for `decltype()` declarations (issue
,,0.2396,javacpp,"Update version in the `pom.xml` file to 1.3.1-SNAPSHOT * Fix potential issues with `Parser` repeating the or annotations on parameters * To support Scala singleton objects better, consider as `static` methods from objects that are not `Pointer` * Allow `Loader.extractResource()` and `cacheResource()` to extract or cache all files from a directory in a JAR file * Create version-less symbolic links to libraries in cache on those platforms where it is useful to link easily * Use `java.io.tmpdir` as fallback in `Loader.getCacheDir()`, and throw a clear exception on failure/ * Allow users to define `NO_JNI_DETACH_THREAD` to prevent callbacks from reinitializing threads (issue * Fix `Generator` when a `FunctionPointer` contains methods that start with ""get"" or ""put"" (issue * Take into account `const` on function parameters when looking up in `InfoMap`, and fix some incorrectly translated macros into variables * Add to `InfoMap.defaults` more names that are reserved in Java, but not in C++ * Add via support for function pointers passed by reference, as well as support for `Info.javaText` with `typedef`/"
,,0.2015,javacpp,"* Fix `Parser` not considering empty `class`, `struct`, or `union` declarations as opaque forward declarations/ * Make `Parser` strip return type annotations when naming `FunctionPointer` (issue * Fix `Parser` handling of `std::map` and of documentation comments containing the ""*/"" sequence/"
,,0.0782,javacpp,"* Fix `SharedPtrAdapter` and `UniquePtrAdapter` of the `Generator` for `const` types (issue `totalProcessors()`, `totalCores()`, `totalChips()` methods on Android/"
,,0.348,javacpp,"* Add `Builder.encoding` option to let users specify I/O character set name (issue bytedeco/javacpp-presets#195)/ * Fix `Parser` translation of strings containing the ""::"" subsequence (issue * Fix `Parser` error on member variables with initializers plus `Info.skip()` (issue bugs in Parser * Fix `Parser` incorrectly recognizing values as pointers when `const` is placed after type (issue * Add `Parser` support for C++11 `using` declarations that act as `typedef` (issue * Let `Parser` accept variables initialized with parentheses (issue * Fix `Parser` confusion between attributes and namespace-less templates (issue * Make it possible to rename enumerators of C++ `enum class` (issue"
,,0.1121,javacpp,* Add `Builder.encoding` option to let users specify I/O character set name (issue bytedeco/javacpp-presets#195)/
,,0.1121,javacpp,* Add `Builder.encoding` option to let users specify I/O character set name (issue bytedeco/javacpp-presets#195)/
,,0.1102,javacpp,* Add `Builder.encoding` option to let users specify I/O character set name (issue bytedeco/javacpp-presets#195)/
,,0.3328,javacpp,* Call `malloc_trim(0)` after `System.gc()` on Linux to make sure memory gets released (issue bytedeco/javacpp-presets#423)/ * Add `Builder.encoding` option to let users specify I/O character set name (issue bytedeco/javacpp-presets#195)/ * Fix potential compile errors with Android caused by superfluous `typedef` from `Generator` (issue bugs in Parser * Fix `Parser` incorrectly recognizing values as pointers when `const` is placed after type (issue * Add `Parser` support for C++11 `using` declarations that act as `typedef` (issue * Let `Parser` accept variables initialized with parentheses (issue * Fix `Parser` confusion between attributes and namespace-less templates (issue
,,0.1598,javacpp,* Fix `Parser` incorrectly resolving type definitions with classes of the same name in parent namespaces * Fix `Generator` compile errors for `const` template types of classes using the annotation/
,,0.1735,javacpp,* Fix `Parser` incorrectly resolving type definitions with classes of the same name in parent namespaces * Fix `Generator` compile errors for `const` template types of classes using the annotation/
,,0.1667,javacpp,* Fix `Parser` incorrectly resolving type definitions with classes of the same name in parent namespaces * Fix `Generator` compile errors for `const` template types of classes using the annotation/
,,0.1236,javacpp,* Add `LoadEnabled` interface to allow classes to modify their `ClassProperties` at runtime Also fix additional issues with `Parser`/
,,0.483,javacpp,"* Fix `Parser` failing on variables with direct list initialization `{ ... }` (issue * Fix `Parser` not producing annotations for types with `Info.cast()` on `operator()`, as well as failing on `using operator` statements/ * Produce `pop_back()` and `push_back()` for relevant basic containers in `Parser` (issue bytedeco/javacv#659)/ * Output single value setters for containers in `Parser` to avoid surprises (issue * Add `Parser` support for C++11 `using` declarations inheriting constructors (issue bytedeco/javacpp-presets#491) * Fix compiler error when defining `std::set` or `std::unordered_set` with `Parser`/ * Add `LoadEnabled` interface to allow classes to modify their `ClassProperties` at runtime Also fix additional issues with `Parser`/ * Move `sizeof()` and `offsetof()` data to global variables to prevent `StackOverflowError` in `JNI_OnLoad()` (issue bytedeco/javacpp-presets#331) * Propagate within `Parser` type information from macros to other macros referencing them Also fix a few more issues with `Parser`/ * Add support for `JNI_OnLoad_libname()` naming scheme for iOS via new `platform.library.static=true` property * Improve the clarity of error messages on `Parser` failures * Fix `Parser` issues with multiple `typedef` declarations in a single statement * Require to pick up alternate names from attributes/ * Add annotation value to remove header files from inherited Also fix a few more issues with `Parser`/ * Fix a few issues with `Parser`, including missing `PointerPointer` member setters (issue bytedeco/javacpp-presets#478)/ * Fix potential race conditions and various issues with `Loader` that could prevent libraries like MKL from working properly/"
,,0.2691,javacpp,* Add `Parser` support for C++11 `using` declarations inheriting constructors (issue bytedeco/javacpp-presets#491) * Fix compiler error when defining `std::set` or `std::unordered_set` with `Parser`/ * Move `sizeof()` and `offsetof()` data to global variables to prevent `StackOverflowError` in `JNI_OnLoad()` (issue bytedeco/javacpp-presets#331) * Propagate within `Parser` type information from macros to other macros referencing them Also fix a few more issues with `Parser`/
,,0.0792,javacpp,* Have `Builder` generate base JNI functions into `jnijavacpp.cpp` for better iOS support (issue
,,0.2018,javacpp,* Add support for `JNI_OnLoad_libname()` naming scheme for iOS via new `platform.library.static=true` property * Improve the clarity of error messages on `Parser` failures * Fix `Parser` issues with multiple `typedef` declarations in a single statement * Require to pick up alternate names from attributes/
,,0.1838,javacpp,* Add support for `JNI_OnLoad_libname()` naming scheme for iOS via new `platform.library.static=true` property * Improve the clarity of error messages on `Parser` failures * Fix `Parser` issues with multiple `typedef` declarations in a single statement * Require to pick up alternate names from attributes/
,,0.2812,javacpp,* Move `sizeof()` and `offsetof()` data to global variables to prevent `StackOverflowError` in `JNI_OnLoad()` (issue bytedeco/javacpp-presets#331) * Propagate within `Parser` type information from macros to other macros referencing them Also fix a few more issues with `Parser`/ * Add support for `JNI_OnLoad_libname()` naming scheme for iOS via new `platform.library.static=true` property * Improve the clarity of error messages on `Parser` failures * Fix `Parser` issues with multiple `typedef` declarations in a single statement * Require to pick up alternate names from attributes/
,,0.1257,javacpp,"* Fix a few issues with `Parser`, including missing `PointerPointer` member setters (issue bytedeco/javacpp-presets#478)/"
,,0.2149,javacpp,"* Fix `Parser` issue with multiple container types (`std::vector`, etc) getting mixed up when mapped to adapters etc) Also silence useless attribute warnings when compiling for Android/ * Add support for `JNI_OnLoad_libname()` naming scheme for iOS via new `platform.library.static=true` property * Improve the clarity of error messages on `Parser` failures * Fix `Parser` issues with multiple `typedef` declarations in a single statement * Require to pick up alternate names from attributes/"
,,0.2771,javacpp,* Add support for `JNI_OnLoad_libname()` naming scheme for iOS via new `platform.library.static=true` property * Improve the clarity of error messages on `Parser` failures * Fix `Parser` issues with multiple `typedef` declarations in a single statement * Require to pick up alternate names from attributes/ * Add annotation value to remove header files from inherited Also fix a few more issues with `Parser`/ * Fix potential race conditions and various issues with `Loader` that could prevent libraries like MKL from working properly/
,,0.3812,javacpp,* Prevent `JNI_OnLoad()` from failing when `Loader.putMemberOffset()` cannot find a class * Throw clear error message when `Loader.load()` gets called on a class not supporting current platform/ * Fix `Generator` issues with return of `String` or `Pointer` types (issue bytedeco/javacpp-presets#499)/ * Have `Builder` generate base JNI functions into `jnijavacpp.cpp` for better iOS support (issue * Move `sizeof()` and `offsetof()` data to global variables to prevent `StackOverflowError` in `JNI_OnLoad()` (issue bytedeco/javacpp-presets#331) * Propagate within `Parser` type information from macros to other macros referencing them Also fix a few more issues with `Parser`/ * Add support for `JNI_OnLoad_libname()` naming scheme for iOS via new `platform.library.static=true` property * Improve the clarity of error messages on `Parser` failures * Fix `Parser` issues with multiple `typedef` declarations in a single statement * Require to pick up alternate names from attributes/ * Add annotation value to remove header files from inherited Also fix a few more issues with `Parser`/
,,0.1561,javacpp,* Add `LoadEnabled` interface to allow classes to modify their `ClassProperties` at runtime Also fix additional issues with `Parser`/ * Add annotation value to remove header files from inherited Also fix a few more issues with `Parser`/
,,0.1,javacpp,* Add annotation value to remove header files from inherited Also fix a few more issues with `Parser`/
,,0.4386,javacpp,"* Fix `Parser` failing on constructors of class templates/ * Fix `Parser` failing on `const void*&` or similar function arguments/Fix logic of last commit surrounding function arguments and qualified names/ * Fix `Parser` incorrectly referring to function arguments with impossibly qualified names/ * Allow using `new Info().enumerate()` to map all C++ `enum` to Java `enum` types by default * Fix `Parser` issues surrounding enum classes, anonymous namespaces, and pure virtual classes/ * Fix `Parser` failing on `enum` declarations where the first line is a macro (issue * Add `Info.enumerate` to let `Parser` map C++ enum classes to Java enum types (issue `Parser` failing on `enum` declarations with attributes/ * Fix `Parser` ignoring `Info.define` and other information for macros actually defined/Fix various small issues with `Parser`/ * Make it possible to define read-only containers with `Parser` by prepending `const ` (issue * Fix `Parser` failure of variable or function declarations on names starting with `::`/ * Access elements of basic containers defined in `Parser` with `at()` instead of `operator[]` (issue"
,,0.0951,javacpp,* Fix missing `jnijavacpp.cpp` when processing classes from different packages (issue * Fix `NullPointerException` in `Builder` when copying resources for static libraries/
,,0.1316,javacpp,* Add `Info.enumerate` to let `Parser` map C++ enum classes to Java enum types (issue
,,0.1161,javacpp,* Fix `Parser` ignoring `Info.define` and other information for macros actually defined/Fix various small issues with `Parser`/
,,0.3741,javacpp,"* Allow using `new Info().enumerate()` to map all C++ `enum` to Java `enum` types by default * Fix `Parser` issues surrounding enum classes, anonymous namespaces, and pure virtual classes/ * Make call to `Pointer.physicalBytes()` thread safe and remove lock (issue * Add `Info.enumerate` to let `Parser` map C++ enum classes to Java enum types (issue * Fix `SharedPtrAdapter` and `UniquePtrAdapter` failing to take ownership of temporary objects/ * Fix `Generator` incorrectly splitting type names for template arguments containing function types/ * Let `Generator` pick up annotations from super classes as well/ * Make it possible to define read-only containers with `Parser` by prepending `const ` (issue exceptions thrown in code generated for ...)`/ * Access elements of basic containers defined in `Parser` with `at()` instead of `operator[]` (issue"
,,0.1355,javacpp,* Access elements of basic containers defined in `Parser` with `at()` instead of `operator[]` (issue
,,0.1373,javacpp,* Let `Parser` create mutable instances of map containers without `const ` prefix (issue bytedeco/javacpp-presets#595) * Fix `Parser` sometimes ignoring `define` of `const ` containers (pull bytedeco/javacpp-presets#547)/ * Fix `Parser` from outputting accessors not available with `std::forward_list` or `std::list`/
,,0.1181,javacpp,* Fix `Builder` not bundling libraries containing a `#` fragment only useful at load time/
,,0.1023,javacpp,* Fix issues with anonymous classes by calling `getEnclosingClass()` instead of `getDeclaringClass()`/ * Make `Generator` use `GENERIC_EXCEPTION_TOSTRING` macro on `GENERIC_EXCEPTION_CLASS` instead of the default `what()`/
,,0.2537,javacpp,"* Add default `Info` to map `noexcept` attribute from C++11 to annotation * Fix `Parser` failures on variadic function template arguments `...` and destructor attributes (pull bytedeco/javacpp-presets#622)/ * Add `Loader.getLoadedLibraries()` method for debugging purposes and fix flaky `BuilderTest` (issue * Call `PointerScope.attach()` as part of `Pointer.deallocator()`, instead of `init()`, to support custom deallocators as well * Prevent `Parser` from appending annotations to setter methods of variables to satisfy the `Generator`/ * Fix `Parser` failing when a value of an `std::pair` basic container is also an `std::pair` (issue bytedeco/javacpp-presets#614)/"
,,0.1377,javacpp,"* Allow `Builder` to execute `javac` and `java` for convenience, and remove ""."" from class path (issue * Allow `Builder` to create links for resource libraries even when no Java classes are built * Fix `Loader.cacheResource()` creating a subdirectory named ""null"" when caching a top-level file/"
,,0.1503,javacpp,* Add default `Info` to map `noexcept` attribute from C++11 to annotation * Fix `Parser` failures on variadic function template arguments `...` and destructor attributes (pull bytedeco/javacpp-presets#622)/
,,0.1735,javacpp,* Fix `Generator` output for parameters of function pointers/ * Enhance `Generator` with for primitive types and for `FunctionPointer` methods/Include member name in JavaCPP_exception message for pure virtual functions (pull
,,0.2063,javacpp,"* Fix `Parser` taking the global package as the target package even when both are set/ * Fix `Parser` not picking up `Info` for cast `operator` declarations with `const`, `&`, or `*` (issue bytedeco/javacpp-presets#377)/ * Replace calls to `Class.getResource()` with `Loader.findResource()` to work around issues with JPMS ([pull * Enhance `Loader.findResources()` with `Class.getResource()` and search among parent packages * Take shortest common package name among all user classes for the default output path of `Builder`/ * Fix `Parser` mapping of `const` function pointer variable declarations/"
,,0.1632,javacpp,* Fix `Parser` taking the global package as the target package even when both are set/ * Add validation for `Builder.environmentVariables` to prevent `NullPointerException` in `executeCommand()`/ * Replace calls to `Class.getResource()` with `Loader.findResource()` to work around issues with JPMS ([pull * Enhance `Loader.findResources()` with `Class.getResource()` and search among parent packages * Take shortest common package name among all user classes for the default output path of `Builder`/
,,0.0673,javacpp,* Fix `Generator` errors for and other on return values/
,,0.1161,javacpp,"* Support multiple instances of `FunctionPointer` subclasses, up to the value in (issue bytedeco/javacpp-presets#683)/"
,,0.3879,javacpp,"* Support multiple instances of `FunctionPointer` subclasses, up to the value in (issue bytedeco/javacpp-presets#683)/ * Prevent `ClassCastException` in `Loader` on illegal system properties (issue * Fix `Parser` not replacing all type names of the base class with `Info.flatten` (issue leave `Parser` fall back on `Info` for the type when not explicitly available for constructors/ * Let `Parser` pick up `Info` explicitly for all constructors by considering their names as functions (issue * Fix `Parser` overlooking `Info` for constructors inside templates (issue * Fix `Parser` not always generating files using the simple names of classes/ * Add `Parser` support for attributes appearing after `struct` declarations (issue bytedeco/javacpp-presets#685)/ * Fix `Parser` overlooking `Info` for constructors inside a namespace (issue * Fix `Parser` applying some `Info.annotations` at the wrong place (issue"
,,0.1008,javacpp,* Allow prefixing library names with `:` to have `Loader` consider them as filenames with prefix and suffix already included/Fix Builder failing to overwrite files on copy/
,,0.2405,javacpp,"* Support multiple instances of `FunctionPointer` subclasses, up to the value in (issue bytedeco/javacpp-presets#683)/ * Add `Loader.loadGlobal()` to load symbols globally as often required by Python libraries (issue ContinuumIO/anaconda-issues#6401)/ * Fix some `Generator` issues with `FunctionPointer` passed or returned"
,,0.0724,javacpp,Fix spurious library generation when overriding with an additional annotation/
,,0.1161,javacpp,"* Support multiple instances of `FunctionPointer` subclasses, up to the value in (issue bytedeco/javacpp-presets#683)/"
,,0.1068,javacpp,* Fix compile errors caused by `Generator` occurring with callback functions returning a value by reference * Make `Builder` expand entries from the user class path with `*` as basename to all JAR files in the directory/
,,0.4431,javacpp,"* Fix `Parser` issues when casting `const` pointers or enumerating anonymous `enum` declarations/ * Avoid `Parser` writing `allocateArray()` when single `int`, `long`, `float`, or `double` constructor already exists (issue bytedeco/javacv#1224)/Prevent `NullPointerException` in `Parser` for function pointers declared with `using`/ * Let `Parser` add or annotations to non-translated enumerators as well * Make `Parser` pick up the names of type aliases for function pointers declared with `using` * Fix `Parser` failing on lambda expressions found inside member initialization lists of constructors * Add special support for `constexpr` variables in `Parser` by disabling their member setters automatically * Fix `Parser` not placing `&` and `*` at the right place inside template arguments containing function declarations * Support more basic containers in `Parser` by comparing their names in a case-insensitive manner and add annotations missing from index types * Fix `Generator` taking the annotation of the paired method for the index instead of the value argument of a setter * Fix `Parser` sometimes considering global C++ identifiers starting with `::` as if they were local/"
,,0.3779,javacpp,* Let `Parser` add or annotations to non-translated enumerators as well * Make `Parser` pick up the names of type aliases for function pointers declared with `using` * Fix `Parser` failing on lambda expressions found inside member initialization lists of constructors * Add special support for `constexpr` variables in `Parser` by disabling their member setters automatically * Fix `Parser` not placing `&` and `*` at the right place inside template arguments containing function declarations * Support more basic containers in `Parser` by comparing their names in a case-insensitive manner and add annotations missing from index types * Fix `Generator` taking the annotation of the paired method for the index instead of the value argument of a setter * Fix `Parser` sometimes considering global C++ identifiers starting with `::` as if they were local/
,,0.3856,javacpp,* Let `Parser` add or annotations to non-translated enumerators as well * Make `Parser` pick up the names of type aliases for function pointers declared with `using` * Fix `Parser` failing on lambda expressions found inside member initialization lists of constructors * Add special support for `constexpr` variables in `Parser` by disabling their member setters automatically * Fix `Parser` not placing `&` and `*` at the right place inside template arguments containing function declarations * Support more basic containers in `Parser` by comparing their names in a case-insensitive manner and add annotations missing from index types * Fix `Generator` taking the annotation of the paired method for the index instead of the value argument of a setter * Fix `Parser` sometimes considering global C++ identifiers starting with `::` as if they were local/
,,0.42100000000000004,javacpp,* Prevent `Generator` from copying data unnecessarily when returning Java arrays from adapters (issue * Allow once more `abstract` subclasses of `FunctionPointer` (issue * Make sure `Generator` ignores deallocators on `const` values returned from adapters (issue * Let `Parser` add or annotations to non-translated enumerators as well * Make `Parser` pick up the names of type aliases for function pointers declared with `using` * Fix `Parser` failing on lambda expressions found inside member initialization lists of constructors * Add special support for `constexpr` variables in `Parser` by disabling their member setters automatically * Fix `Parser` not placing `&` and `*` at the right place inside template arguments containing function declarations * Support more basic containers in `Parser` by comparing their names in a case-insensitive manner and add annotations missing from index types * Fix `Generator` taking the annotation of the paired method for the index instead of the value argument of a setter * Fix `Parser` sometimes considering global C++ identifiers starting with `::` as if they were local/ * Fix compile errors caused by `Generator` occurring with callback functions returning a value by reference * Make `Builder` expand entries from the user class path with `*` as basename to all JAR files in the directory/ * Fix compiler error with `SharedPtrAdapter` and `UniquePtrAdapter` in callback functions (pull
,,0.0599,javacpp,Fix IndexerTest and PointerTest on 32-bit platforms (issue
,,0.1675,javacpp,* Prevent `Parser` from outputting `asPointer()` cast methods with multiple inheritance (issue * Fix `Parser` using fully qualified names for annotations of nested classes (issue * Fix `Parser` incorrectly inheriting default constructors multiple times with `using`/
,,0.0731,javacpp,* Make `Generator` avoid ambiguous conversion errors from `UniquePtrAdapter` to `std::unique_ptr` (pull IndexerTest and PointerTest on 32-bit platforms (issue
,,0.1101,javacpp,* Add `Generator` support for `enum` classes with `boolean` values (issue
,,0.114,javacpp,* Fix `Pointer` losing its owner when mistakenly ignoring deallocators for `const` values returned from adapters/
,,0.1121,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/
,,0.4331,javacpp,"* Fix `Parser` producing invalid wrappers for basic containers like `std::set<std::pair<...> >`/ * Fix `Parser` outputting invalid Java code for `enum` of `boolean`, `byte`, and `short` types (issue * Fix `Parser` not picking up `Info` for declarations with `decltype()` specifier/ * Make sure `Parser` recognizes base classes of `struct` as `public` by default * Fix `Parser` error on initializer lists containing C++11 style `{ ... }` for template instances * Change the default mapping of `jboolean` to `BooleanPointer` instead of `BoolPointer`/ * Fix `Parser` error on function declarations with `...` varargs as single parameter * Make `Parser` skip over `&&`-qualified functions automatically since they cannot be supported/ * Fix `Parser` annotating pointer cast `operator` methods with incorrect (issue * Let users override `Info.enumerate` on a per-`enum` basis and allow attributes after `enum class` * Fix `Parser` not considering identifiers as type names when placed directly after `friend` or in `template<>` * Check for defined `NO_WINDOWS_H` macro in `Generator` to skip `#include * Include in the defaults of `InfoMap` mappings missing for the `std::array` and `jchar` types * Fix various `Parser` failures with attributes on constructors, empty macros, enum classes, friend classes, inherited constructors, and keywords in parameter names * Add to `Parser` support for C++11 attributes found within `[[` and `]]` brackets/"
,,0.1448,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/ * Fix compiler failures in `Builder` with platform properties containing relative paths/
,,0.0883,javacpp,* Fix `Parser` not evaluating `using namespace` with respect to the current block (issue
,,0.2407,javacpp,"* Include in the defaults of `InfoMap` mappings missing for the `std::array` and `jchar` types * Fix various `Parser` failures with attributes on constructors, empty macros, enum classes, friend classes, inherited constructors, and keywords in parameter names * Add to `Parser` support for C++11 attributes found within `[[` and `]]` brackets/"
,,0.2832,javacpp,"* Make sure `Parser` recognizes base classes of `struct` as `public` by default * Fix `Parser` error on initializer lists containing C++11 style `{ ... }` for template instances * Change the default mapping of `jboolean` to `BooleanPointer` instead of `BoolPointer`/ * Include in the defaults of `InfoMap` mappings missing for the `std::array` and `jchar` types * Fix various `Parser` failures with attributes on constructors, empty macros, enum classes, friend classes, inherited constructors, and keywords in parameter names * Add to `Parser` support for C++11 attributes found within `[[` and `]]` brackets/"
,,0.1141,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/
,,0.3396,javacpp,"* Add `Generator` support for `enum` classes with `boolean` values (issue * Pick up in `Generator` the annotation from paired method too for global getters and setters (issue around issue with the __cplusplus macro of Visual Studio/ * Fix `Pointer` losing its owner when mistakenly ignoring deallocators for `const` values returned from adapters/ * Let users override `Info.enumerate` on a per-`enum` basis and allow attributes after `enum class` * Fix `Parser` not considering identifiers as type names when placed directly after `friend` or in `template<>` * Check for defined `NO_WINDOWS_H` macro in `Generator` to skip `#include * Fix errors with ..."")` in `Generator` by using Java names for C++ (issue"
,,0.1101,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/
,,0.1121,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/
,,0.1202,javacpp,* Add presets for `jnijavacpp` and `javacpp-platform` artifact to fix issues at load time (issue bytedeco/javacv#1305)/
,,0.1277,jna,use more appropriate exception types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix javadoc errors git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1339,jna,avoid overwriting unmodified Pointer objects git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0723,jna,fix compiler error git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1063,jna,Merge pull request from twall/optimized-struct-init Avoid superfluous memory allocation when Structure base address provided.../
,,0.1393,jna,Merge pull request from java-native-access/490-fix-win32-struct-return Fixes issue issue by allowing specification of calling convention/Fixes issue handle typemapper-returned String/WString with associated tests/
,,0.4714,jna,"Pass objects into JNI code in addition to raw pointer value (prevent premature GC) The Memory/Pointer object delegates the native calls to static methods in the Native class. This causes the Memory/Pointer object to become prematurely eligable for GC for this case: Memory pointer something and work on Memory> String result pointer.getWideString(0) nothing more with Memory> getWideString(0) calls back into the JVM and allocates a new java string. In this case the GC can become active and collect the Memory object. After this it is possible to run the finalizer, that in turn frees the native memory backing the memory object. The native function now possibly accesses freed memory. The native code needs to hold references to the relevant object itself, this is implemented here. Changes: API relevant changes: Deprecate Native#getDirectByteBuffer(long, long) it is functional, but discouraged to be used and should be removed in future JNI-Layer (Native.java + dispatch.c): All set<Type> and get<Type>, write and read methods that took a pointer address are modified to take a pointer object, the raw pointer value and an offset All invoke<ReturnType> methods that took a pointer adress (function pointer) are modified to take a function object and the raw function pointer value Build-System/Native: the jni api version as bumped from 5.0.0 to 5.1.0 (the major version was raised in the 4.3.0 development cycle, so not modified) all prebuild native libraries were replaced with the ""OUT_OF_DATE"" marker, where no replacement could be build immediately getDirectByteBuffer(long, long) is the only API relevant method, allother methods modified are package private and so are not considered API. getDirectByteBuffer is overloaded with a package private variant getDirectByteBuffer(Pointer, long, long, long) that reflects the above described changes. Executed tests: linux-amd64: all unittests of jna pass linux-arm: 1 unittest fails (unload of jnalib, emulated environment (qemu), slow execution leads to timeout) linux-x86: all unittests of jna pass (32bit chroot on 64bit kernel) windows-64bit: 2 tests fail (before and after: DirectTypeMapperTest and NativeTest#testSizeOf (bool should be 1, is 4) windows-32bit: 2 tests fails (one less that before the change (testLongStringGeneration), other errors see x64) Performance: Check was done with JMH the comparison was between master and the proposed pointer_native_direct branch: java benchmarks-master.jar 10 10 5 The benchmarks initialize a Memory block and access it via getInt and getString, one with an offset of 0 and on with an offset of 5 bytes. The testmatrix: testInt testIntWithOffset testString testStringWithOffset linux64-jdk7 108% 108% 100% 101% linux64-jdk8 107% 108% 100% 100% linux32-jdk8 97% 97% 112% 112% win32-jdk8 90% 95% 98% 98% win64-jdk8 95% 95% 97% 97%/"
,,0.0895,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.1141,jna,fix misleading error message git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0577,jna,fix issue git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0936,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.126,jna,Allow handling of uncaught callback exceptions git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix issue git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1197,jna,attempt to find cause of w32 cleanup failure git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix compiler warnings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1674,jna,"fix failing test on osx git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/narrow direct callback test failure git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/improve test coverage, structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix exception type git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix tests on IBM J9 (windows) VM git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/add last error exception for direct calls git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Handle last error as an exception if declared git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0942,jna,Fix issue 135 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix web start native library loading bugs git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0957,jna,address issue 156 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix issue 151 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0577,jna,fix potential NPE git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1779,jna,"make unpacked path available as a system property, track down JVM error in System.load/fix alignment on osx/ppc/fix broken test on XP/improve library load debugging/fix library load error w/unicode/fix amd64 native thread cleanup test/fix padding on ppc/fix broken test/auto-strip profiler prefix set in jna.profiler.prefix/avoid static field initialization bug/fix struct padding test on linux-arm/fix padding for windows/"
,,0.3278,jna,"Merge pull request from lwahonen/master Make native debug flags toggleable at runtime/Make native debug flags toggleable at runtime/Update javadoc, revise recommended getLastError/LastErrorException usage/Merge pull request from java-native-access/494-no-onunload-callback Fixes NOTE: sporadic failure seen on linux x86-64, crash in DirectTest/avoid calling back to JVM on shared library unload/Fixes issue handle typemapper-returned String/WString with associated tests/Merge pull request from twall/issue-467-direct-enum-type-mapping Fixes enum type mapping for direct-mapped libraries. Should also improve type mapper lookups for direct-mapped libraries./add tests for type-mapping of enums Add changelog entry, fixes"
,,0.4618,jna,"Pass objects into JNI code in addition to raw pointer value (prevent premature GC) The Memory/Pointer object delegates the native calls to static methods in the Native class. This causes the Memory/Pointer object to become prematurely eligable for GC for this case: Memory pointer something and work on Memory> String result pointer.getWideString(0) nothing more with Memory> getWideString(0) calls back into the JVM and allocates a new java string. In this case the GC can become active and collect the Memory object. After this it is possible to run the finalizer, that in turn frees the native memory backing the memory object. The native function now possibly accesses freed memory. The native code needs to hold references to the relevant object itself, this is implemented here. Changes: API relevant changes: Deprecate Native#getDirectByteBuffer(long, long) it is functional, but discouraged to be used and should be removed in future JNI-Layer (Native.java + dispatch.c): All set<Type> and get<Type>, write and read methods that took a pointer address are modified to take a pointer object, the raw pointer value and an offset All invoke<ReturnType> methods that took a pointer adress (function pointer) are modified to take a function object and the raw function pointer value Build-System/Native: the jni api version as bumped from 5.0.0 to 5.1.0 (the major version was raised in the 4.3.0 development cycle, so not modified) all prebuild native libraries were replaced with the ""OUT_OF_DATE"" marker, where no replacement could be build immediately getDirectByteBuffer(long, long) is the only API relevant method, allother methods modified are package private and so are not considered API. getDirectByteBuffer is overloaded with a package private variant getDirectByteBuffer(Pointer, long, long, long) that reflects the above described changes. Executed tests: linux-amd64: all unittests of jna pass linux-arm: 1 unittest fails (unload of jnalib, emulated environment (qemu), slow execution leads to timeout) linux-x86: all unittests of jna pass (32bit chroot on 64bit kernel) windows-64bit: 2 tests fail (before and after: DirectTypeMapperTest and NativeTest#testSizeOf (bool should be 1, is 4) windows-32bit: 2 tests fails (one less that before the change (testLongStringGeneration), other errors see x64) Performance: Check was done with JMH the comparison was between master and the proposed pointer_native_direct branch: java benchmarks-master.jar 10 10 5 The benchmarks initialize a Memory block and access it via getInt and getString, one with an offset of 0 and on with an offset of 5 bytes. The testmatrix: testInt testIntWithOffset testString testStringWithOffset linux64-jdk7 108% 108% 100% 101% linux64-jdk8 107% 108% 100% 100% linux32-jdk8 97% 97% 112% 112% win32-jdk8 90% 95% 98% 98% win64-jdk8 95% 95% 97% 97%/"
,,0.0936,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.0772,jna,Merge pull request from matthiasblaesing/directmapping Improve/Fix direct mapping support/
,,0.0951,jna,"Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1398,jna,"Small optimization of NativeString constructor do the String writing here instead of via Pointer#setString(), to avoid converting the String to bytes twice. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0599,jna,fix issue 111 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0758,jna,Fixes issue handle typemapper-returned String/WString with associated tests/
,,0.1208,jna,add length-specified Pointer.getStringArray() update sunos-amd64.jar native remove debug output git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix bug writing null-valued ByReference structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix Structure equals/hashcode git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1339,jna,avoid overwriting unmodified Pointer objects git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0813,jna,fix read of NIO Buffer fields within structure git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0556,jna,fix issue 151 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1255,jna,fix Structure(Pointer) array field init bugs git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix NPE in array element initialization git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1046,jna,Merge branch improved_last_error of github.com:twall/jna into native-struct-ptr-creation/avoid NPE/Merge pull request from twall/optimized-struct-init Avoid superfluous memory allocation when Structure base address provided.../
,,0.1287,jna,fix bug if ByValue types are explicitly used in struct fields/fix javadoc warnings/add missing methods on opaque pointer fix NPE/
,,0.4671,jna,"Pass objects into JNI code in addition to raw pointer value (prevent premature GC) The Memory/Pointer object delegates the native calls to static methods in the Native class. This causes the Memory/Pointer object to become prematurely eligable for GC for this case: Memory pointer something and work on Memory> String result pointer.getWideString(0) nothing more with Memory> getWideString(0) calls back into the JVM and allocates a new java string. In this case the GC can become active and collect the Memory object. After this it is possible to run the finalizer, that in turn frees the native memory backing the memory object. The native function now possibly accesses freed memory. The native code needs to hold references to the relevant object itself, this is implemented here. Changes: API relevant changes: Deprecate Native#getDirectByteBuffer(long, long) it is functional, but discouraged to be used and should be removed in future JNI-Layer (Native.java + dispatch.c): All set<Type> and get<Type>, write and read methods that took a pointer address are modified to take a pointer object, the raw pointer value and an offset All invoke<ReturnType> methods that took a pointer adress (function pointer) are modified to take a function object and the raw function pointer value Build-System/Native: the jni api version as bumped from 5.0.0 to 5.1.0 (the major version was raised in the 4.3.0 development cycle, so not modified) all prebuild native libraries were replaced with the ""OUT_OF_DATE"" marker, where no replacement could be build immediately getDirectByteBuffer(long, long) is the only API relevant method, allother methods modified are package private and so are not considered API. getDirectByteBuffer is overloaded with a package private variant getDirectByteBuffer(Pointer, long, long, long) that reflects the above described changes. Executed tests: linux-amd64: all unittests of jna pass linux-arm: 1 unittest fails (unload of jnalib, emulated environment (qemu), slow execution leads to timeout) linux-x86: all unittests of jna pass (32bit chroot on 64bit kernel) windows-64bit: 2 tests fail (before and after: DirectTypeMapperTest and NativeTest#testSizeOf (bool should be 1, is 4) windows-32bit: 2 tests fails (one less that before the change (testLongStringGeneration), other errors see x64) Performance: Check was done with JMH the comparison was between master and the proposed pointer_native_direct branch: java benchmarks-master.jar 10 10 5 The benchmarks initialize a Memory block and access it via getInt and getString, one with an offset of 0 and on with an offset of 5 bytes. The testmatrix: testInt testIntWithOffset testString testStringWithOffset linux64-jdk7 108% 108% 100% 101% linux64-jdk8 107% 108% 100% 100% linux32-jdk8 97% 97% 112% 112% win32-jdk8 90% 95% 98% 98% win64-jdk8 95% 95% 97% 97%/"
,,0.0936,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.4218,jna,"Dont keep a strong reference to the library proxy Keep a mapping for the proxy on calls to loadLibrary Dont fail if no alpha on shaped window demo Clean up a few comments git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow Pointer[] as field in Structure Clean up error messages when Structure size calculation fails git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix stdcall stack sizing for NativeMapped git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Start on issue Main thing I wanted to do was get the second parameter to ToNativeConverter.toNative() in there so we dont have future API breakage by adding it later. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Implement (most of) the fixes from issue git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix UnsatisfiedLinkError calling toString on a Library interface git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Avoid wrapping a native callback proxy with a CallbackReference proxy git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Clean up varargs Add per-field Structure read/write Avoid automatic writes to volatile structure fields Read/wrap function pointers in Structure fields Disallow Memory/Function as declared Structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.3602,jna,"Fix bug in STructure.toArray w/nested struct arrays git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix bug in nested struct array read/write git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix FFIType.size_t ctor signatore git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix bug in stdcall function mapping when using struct by value Defer size_t/off_t definition, for now git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate Structure.ByReference reads Cache native library options as well as alignments/type mappers Ensure library options are passed to callbacks Add protection around remaining Pointer read/write calls Consolidate wide character reads/writes Avoid stack overflow reading self-referential structures or loops More prettification of Structure.toString Add size_t/off_t standard types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix NPE when sizing struct with a struct array field git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Avoid NPE in toString git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate structure ffi type info initialization and avoid premature GC Enable union by-value by using largest fields type info Explicitly throw IllegalArgument on bad type info Throw IllegalState on missing type info Explicitly write version/md5 info into Makefile from ant (to avoid platform-specific variances in sed) Make Structure.ByValue/ByReference public to allow client code comparisons Consolidate Structure field get/set operations Avoid extra Pointer peer lookup from native code (wmeissner) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1675,jna,ensure memory is initialized before Structure.read() avoid NPE git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix bug in ByValue structs using NativeMapped git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/partial fix for aix/ppc git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix NPE when using NativeMapped within Structure ( git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1692,jna,fix field access git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix division by zero on OSX/ppc calculating struct size Fix overwriting of already-initialized NativeMapped field in struct when calculating struct size git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2257,jna,Fix class cast exception read all TYPE_MAPPERs regardless of access git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix pointer field read bug git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Allow arbitrary callback method names Allow specification of callback type mapper with TYPE_MAPPER Allow write with uninitialized boxed primitives in Structure Fix memory leak with callbacks called from native threads w/no java context Fix Structure derived classes to allow setting TypeMapper git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1283,jna,fix cacheing of union type information git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2467,jna,"fix bug reading Structure.ByReference fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix comments/javadoc git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/avoid writing final Structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/avoid Structure.equals in read/write reduce overhead of Structure.toString when struct contents arent actually used git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix Structure equals/hashcode git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/improve test coverage, structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0833,jna,avoid auto-allocating structure memory if memory already provided git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1519,jna,Fixed incorrect comments on autoread/write. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix issue 152 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/avoid deprecated function git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix issue 133 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0872,jna,fix Structure(Pointer) array field init bugs git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix Structure.StructureSet.Iterator bug git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0829,jna,"fix javadoc comment for field ordering/fix struct layout cacheing in Union/fix JIRA issue 188/avoid attempts to write to final fields on J2ME/re-enable WCE failing tests, fixes to allow proper phoneME operation w/r/t AWT classes/"
,,0.096,jna,fixes build on w32/avoid using deprecated setTypeMapper/fix javadoc errors/fix broken Structure.setFieldOrder issue/fix issue failing tests in StructureTest (avoid returning self when sharing memory)/address issue
,,0.1286,jna,Merge branch master of Pulling master back to get compilation fixes./fix union sizing/layout issue/fixes for oracle openjdk/Merge pull request from tomohiron/fix_dump_memory fix dump memory problem/fix Structure.toString because it dumped memory when jna.dump_memory was false/Merge pull request from twall/optimized-struct-init Avoid superfluous memory allocation when Structure base address provided.../
,,0.1729,jna,"fix bug if ByValue types are explicitly used in struct fields/fix alignment on osx/ppc/avoid static field initialization bug/ fix typo/fix struct padding test on linux-arm/update sunos natives, fix struct padding test expected results/"
,,0.1881,jna,Fixes broken platform tests broken on OSX/Merge pull request from sjappig/master Issue Structure leaves always one element in ThreadLocal set/Issue Structure leaves always one element in ThreadLocal set/
,,0.319,jna,"Merge pull request from java-native-access/494-no-onunload-callback Fixes NOTE: sporadic failure seen on linux x86-64, crash in DirectTest/fix Javadoc warning/Merge pull request from java-native-access/475-immutable-struct-equals [475] Avoid touching native memory from Structure.hashCode/equals/Fix issue pull request from twall/issue-467-direct-enum-type-mapping Fixes enum type mapping for direct-mapped libraries. Should also improve type mapper lookups for direct-mapped libraries./add tests for type-mapping of enums Add changelog entry, fixes"
,,0.1359,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/Merge pull request from matthiasblaesing/debug_hex_string Add 0x prefix to Structure debug output when hexadecimal values are printed/Add 0x prefix to Structure debug output when hexadecimal values are printed Closes:
,,0.2759,jna,"fix bug reading Structure.ByReference fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/avoid writing final Structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix bug writing null-valued ByReference structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/avoid Structure.equals in read/write reduce overhead of Structure.toString when struct contents arent actually used git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix Structure equals/hashcode git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/improve test coverage, structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.121,jna,fix read of NIO Buffer fields within structure git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/avoid auto-allocating structure memory if memory already provided git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1667,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix issue 152 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix deprecation warnings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix issue 133 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1875,jna,fix Structure(Pointer) array field init bugs git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix NPE in array element initialization git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/add two (failing) tests based on Samuel Audets reports on lack of field initialization in Structure with Pointer ctors git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix Structure.StructureSet.Iterator bug git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1039,jna,"fix struct layout cacheing in Union/include error string in LastErrorException, if available, update wince native/fix JIRA issue 188/avoid attempts to write to final fields on J2ME/re-enable WCE failing tests, fixes to allow proper phoneME operation w/r/t AWT classes/"
,,0.0913,jna,Avoid overwriting string fields within structures when unnecessary; fix failing direct mode tests/
,,0.0869,jna,"fixes build on w32/fix gcc version check, avoid deprecated function in structure test/fix broken Structure.setFieldOrder issue/fix failing tests in StructureTest (avoid returning self when sharing memory)/address issue"
,,0.1389,jna,fix test on 32-bit/Merge branch master of Pulling master back to get compilation fixes./fix union sizing/layout issue/Merge pull request from tomohiron/fix_dump_memory fix dump memory problem/fix Structure.toString because it dumped memory when jna.dump_memory was false/Merge branch improved_last_error of github.com:twall/jna into native-struct-ptr-creation/Merge pull request from twall/optimized-struct-init Avoid superfluous memory allocation when Structure base address provided.../
,,0.1526,jna,"fix bug if ByValue types are explicitly used in struct fields/fix alignment on osx/ppc/work around linux-arm class incompatibility bug in StructureTest/avoid static field initialization bug/update sunos natives, fix struct padding test expected results/"
,,0.1755,jna,Merge pull request from sjappig/master Issue Structure leaves always one element in ThreadLocal set/Issue Structure leaves always one element in ThreadLocal set/
,,0.1138,jna,Merge pull request from java-native-access/475-immutable-struct-equals [475] Avoid touching native memory from Structure.hashCode/equals/Fix issue
,,0.1325,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/Merge pull request from matthiasblaesing/debug_hex_string Add 0x prefix to Structure debug output when hexadecimal values are printed/Add 0x prefix to Structure debug output when hexadecimal values are printed Closes:
,,0.2134,jna,Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0891,jna,Fix memory leak in callbacks git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0916,jna,Allow handling of uncaught callback exceptions git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1202,jna,fix typo git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix cacheing of union type information git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0923,jna,fix compilation warnings/errors on win64 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/avoid making JNI calls after thrown exceptions git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0849,jna,"add linux x86/amd64 natives, w64 native, fix w64 compiler warnings/"
,,0.0813,jna,"Fix compiler warnings on OSX, remove no-longer-supported JAWT operations from OSX/"
,,0.0798,jna,Fixes issue handle typemapper-returned String/WString with associated tests/
,,0.0763,jna,fix issue git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Apply patch from issue support opening current process on Unix git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1776,jna,fix compiler warnings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix SIGBUS/SIGSEGV on sparc git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix direct struct by value mapping git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix compiler warning in sizeof git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2597,jna,"avoid potential error if dispatch fails due to bad arguments git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix issue 125 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix compilation warnings/errors on win64 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix failing test on osx git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/improve test coverage, structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix compiler warnings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/throw call errors *after* any cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix placement of exception throw git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/avoid making JNI calls after thrown exceptions git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix setjmp/longjmp compiler warnings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix tests on windows git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix w32 compilation errors git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/remove debug output git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/add last error exception for direct calls git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Handle last error as an exception if declared git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0577,jna,fix typo in comment git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/addrss issue 154 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0848,jna,fix unused parameter warnings under gcc git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Bump native code bug revision git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0804,jna,Fixed a number if UNUSED warnings. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1193,jna,"accommodate long path names, fixes unpacked path available as a system property, track down JVM error in System.load/fix snprintf on windows/revise last error checking/fix w32 compile error/fix library load error w/unicode/fix amd64 native thread cleanup test/fix 32-bit build under MSVC 10/clean up platform tests and error handling on windows/add CoInit constants fix last error formatting/fix broken callback test on BSD/"
,,0.1729,jna,Merge pull request from marco2357/master fixed direct-mapping type-mapped pointer result types/fixed direct-mapping type-mapped pointer result types/
,,0.0833,jna,"Fix compiler warnings on OSX, remove no-longer-supported JAWT operations from OSX/"
,,0.3723,jna,"Merge pull request from java-native-access/494-no-onunload-callback Fixes NOTE: sporadic failure seen on linux x86-64, crash in DirectTest/avoid calling back to JVM on shared library unload/Merge pull request from java-native-access/490-fix-win32-struct-return Fixes issue issue by allowing specification of calling convention/Fixes issue handle typemapper-returned String/WString with associated tests/Merge pull request from twall/issue-467-direct-enum-type-mapping Fixes enum type mapping for direct-mapped libraries. Should also improve type mapper lookups for direct-mapped libraries./add tests for type-mapping of enums Add changelog entry, fixes"
,,0.4722,jna,"Merge pull request from matthiasblaesing/warnings_fix Make warnings treated as errors for dispatch.c and protect.c/Document warning configuration and fix strdup (#define based on compiler)/Make warnings treated as errors for dispatch.c and protect.c This follows an advise given by David Keller, to replace a unittest to ensure correct version of strerror_r is used. Quote: Im afraid the strerror(EBADF) can also produce Bad file number depending on the libc (e.g. Android libc vs Glibc). If I were you, Id remove the strerror_r() unit test as the new code will trigger a warning if the wrong strerror_r() is picked (invalid conversion from int to char*: warning: initialization makes pointer from integer without a cast) and treat warnings as errors with header inclusion on Visual Studio/MinGW/Ensure XSI-compliant strerror_r is used. This macro was used after some standard header includes. Depending on implementation, if one of theses headers were using the later presence of _XOPEN_SOURCE macro wouldnt matter. This prevents uninitialized buffer from being passed to snprintf. Signed-off-by: David Keller objects into JNI code in addition to raw pointer value (prevent premature GC) The Memory/Pointer object delegates the native calls to static methods in the Native class. This causes the Memory/Pointer object to become prematurely eligable for GC for this case: Memory pointer something and work on Memory> String result pointer.getWideString(0) nothing more with Memory> getWideString(0) calls back into the JVM and allocates a new java string. In this case the GC can become active and collect the Memory object. After this it is possible to run the finalizer, that in turn frees the native memory backing the memory object. The native function now possibly accesses freed memory. The native code needs to hold references to the relevant object itself, this is implemented here. Changes: API relevant changes: Deprecate Native#getDirectByteBuffer(long, long) it is functional, but discouraged to be used and should be removed in future JNI-Layer (Native.java + dispatch.c): All set<Type> and get<Type>, write and read methods that took a pointer address are modified to take a pointer object, the raw pointer value and an offset All invoke<ReturnType> methods that took a pointer adress (function pointer) are modified to take a function object and the raw function pointer value Build-System/Native: the jni api version as bumped from 5.0.0 to 5.1.0 (the major version was raised in the 4.3.0 development cycle, so not modified) all prebuild native libraries were replaced with the ""OUT_OF_DATE"" marker, where no replacement could be build immediately getDirectByteBuffer(long, long) is the only API relevant method, allother methods modified are package private and so are not considered API. getDirectByteBuffer is overloaded with a package private variant getDirectByteBuffer(Pointer, long, long, long) that reflects the above described changes. Executed tests: linux-amd64: all unittests of jna pass linux-arm: 1 unittest fails (unload of jnalib, emulated environment (qemu), slow execution leads to timeout) linux-x86: all unittests of jna pass (32bit chroot on 64bit kernel) windows-64bit: 2 tests fail (before and after: DirectTypeMapperTest and NativeTest#testSizeOf (bool should be 1, is 4) windows-32bit: 2 tests fails (one less that before the change (testLongStringGeneration), other errors see x64) Performance: Check was done with JMH the comparison was between master and the proposed pointer_native_direct branch: java benchmarks-master.jar 10 10 5 The benchmarks initialize a Memory block and access it via getInt and getString, one with an offset of 0 and on with an offset of 5 bytes. The testmatrix: testInt testIntWithOffset testString testStringWithOffset linux64-jdk7 108% 108% 100% 101% linux64-jdk8 107% 108% 100% 100% linux32-jdk8 97% 97% 112% 112% win32-jdk8 90% 95% 98% 98% win64-jdk8 95% 95% 97% 97%/"
,,0.1979,jna,"Merge pull request from matthiasblaesing/directmapping Improve/Fix direct mapping support/A NULL pointer passed to a IntegerType based direct mapping causes JVM crash When a IntergetType based type is defined in a direct mapping and a NullPointer is passed to that call, a method call is tried on that NullPointer via JNI, resulting in a JVM crash. This changeset replaces the value with ""0"" if a NULL pointer is passed and adds unittests for the possible calling conventions. Closes:"
,,0.0895,jna,"Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.215,jna,Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0944,jna,fix compilation warnings/errors on win64 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix tests on windows git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Handle last error as an exception if declared git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0833,jna,"Fix compiler warnings on OSX, remove no-longer-supported JAWT operations from OSX/"
,,0.0798,jna,Fixes issue handle typemapper-returned String/WString with associated tests/
,,0.2485,jna,"Merge pull request from matthiasblaesing/warnings_fix Make warnings treated as errors for dispatch.c and protect.c/Document warning configuration and fix strdup (#define based on compiler)/Make warnings treated as errors for dispatch.c and protect.c This follows an advise given by David Keller, to replace a unittest to ensure correct version of strerror_r is used. Quote: Im afraid the strerror(EBADF) can also produce Bad file number depending on the libc (e.g. Android libc vs Glibc). If I were you, Id remove the strerror_r() unit test as the new code will trigger a warning if the wrong strerror_r() is picked (invalid conversion from int to char*: warning: initialization makes pointer from integer without a cast) and treat warnings as errors with header inclusion on Visual Studio/MinGW/Ensure XSI-compliant strerror_r is used. This macro was used after some standard header includes. Depending on implementation, if one of theses headers were using the later presence of _XOPEN_SOURCE macro wouldnt matter. This prevents uninitialized buffer from being passed to snprintf. Signed-off-by: David Keller"
,,0.09699999999999999,jna,"Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1019,jna,tests for union by value fix git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0876,jna,fix issue 125 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix w32 compilation errors git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Handle last error as an exception if declared git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0891,jna,"add linux x86/amd64 natives, w64 native, fix w64 compiler warnings/"
,,0.1676,jna,Merge pull request from marco2357/master fixed direct-mapping type-mapped pointer result types/fixed direct-mapping type-mapped pointer result types/
,,0.0813,jna,"Fix compiler warnings on OSX, remove no-longer-supported JAWT operations from OSX/"
,,0.0697,jna,Fixes issue handle typemapper-returned String/WString with associated tests/
,,0.0657,jna,"fix varargs on ARM/updated ""Promote float varargs to double"" bug fix/"
,,0.1719,jna,"Merge pull request from matthiasblaesing/warnings_fix Make warnings treated as errors for dispatch.c and protect.c/Make warnings treated as errors for dispatch.c and protect.c This follows an advise given by David Keller, to replace a unittest to ensure correct version of strerror_r is used. Quote: Im afraid the strerror(EBADF) can also produce Bad file number depending on the libc (e.g. Android libc vs Glibc). If I were you, Id remove the strerror_r() unit test as the new code will trigger a warning if the wrong strerror_r() is picked (invalid conversion from int to char*: warning: initialization makes pointer from integer without a cast) and treat warnings as errors with"
,,0.1948,jna,Allow arbitrary callback method names Allow specification of callback type mapper with TYPE_MAPPER Allow write with uninitialized boxed primitives in Structure Fix memory leak with callbacks called from native threads w/no java context Fix Structure derived classes to allow setting TypeMapper git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0916,jna,Allow handling of uncaught callback exceptions git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.106,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1019,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1039,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1039,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1332,jna,fix TrayIcon mouseover exception in WindowUtils git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix transparent window toggle on OSX git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix win32 bug toggling windows transparent/opaque git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix double buffering bug on transparent windows git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0998,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0692,jna,fix mappings to properly work on 32-bit windows (fixes memory faults)/
,,0.1039,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1039,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0998,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1019,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2341,jna,Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0998,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0797,jna,"Merge pull request from twall/x11-demo-fixes X11 demo fixes/patch missing code, remove apparent duplicate code, fix overall compilation/fix None comparison/fix VisualID access/"
,,0.1822,jna,Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix compilation error in file monitor example git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1038,jna,fix incorrectly-named byReference classes to ByReference/
,,0.1325,jna,Dont keep a strong reference to the library proxy Keep a mapping for the proxy on calls to loadLibrary Dont fail if no alpha on shaped window demo Clean up a few comments git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0621,jna,Merge pull request from headcrashing/master New Windows Shell API mapping: SHGetSpecialFolderPath/
,,0.10300000000000001,jna,extract integer type with platform-specific size remove temporary file suffix altogether git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0786,jna,fix email address git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2035,jna,"Addition win32 api : SendMessage, GetActiveWindow, COPYDATASTRUCT and a few constants + a demo application (#774) * Added a few mapping of win32 api : SendMessage and GetActiveWindow. Added some constants and structures (COPYDATASTRUCT and CWPSTRUCT from the win 32 api. Added a Win32WindowMessagesDemo to demonstrate complex messages exchange through WM_COPYDATA and with a hooked winproc. * Corrections done to take into account, the comment of the pull request : cf * Replaced Win32WindowMessagesDemo.java by User32WindowMessagesTest.java * changed data types to int where appropriate * added pull request in CHANGES.md * Addition of forgotten test class : User32WindowMessagesTest.java * Correction of compilation error of unit test/com/sun/jna/platform/win32/User32WindowMessagesTest.java detected by travis with jdk 6. * Merged from jna master to be up to date with 4.4 release. Corrected comments and license info./"
,,0.1606,jna,"Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Added Kernel32Util.FormatMessageFromLastError and FormatMessageFromHR. Added Win32Exception that properly maps system error messages, to be used in Win32 util classes instead of LastErrorException thats a cross-platform version that doesnt try to format the string error. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1953,jna,Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1884,jna,Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1901,jna,Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1849,jna,Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1901,jna,Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1936,jna,Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1901,jna,Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0874,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.1918,jna,Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0772,jna,fix issue 125 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/remove debug output git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix Structure equals/hashcode git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1319,jna,avoid overwriting unmodified Pointer objects git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1019,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0895,jna,Avoid overwriting string fields within structures when unnecessary; fix failing direct mode tests/
,,0.0673,jna,address issue
,,0.11199999999999999,jna,add more NativeMapped tests (IntegerType) to validate issue pull request from java-native-access/475-immutable-struct-equals [475] Avoid touching native memory from Structure.hashCode/equals/Fix issue
,,0.0916,jna,Allow handling of uncaught callback exceptions git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0577,jna,fix issue 111 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0998,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1169,jna,Merge branch master of Pulling master back to get compilation fixes./symlink creation now broken on osx 10.8.3/Merge pull request from twall/optimized-struct-init Avoid superfluous memory allocation when Structure base address provided.../
,,0.1474,jna,Fixes issue handle typemapper-returned String/WString with associated tests/Merge pull request from java-native-access/475-immutable-struct-equals [475] Avoid touching native memory from Structure.hashCode/equals/Fix issue testing workarounds for JVM thread handling bug on OSX/fix more merge fallout/avoid JVM hang when using native threads with callbacks/
,,0.1049,jna,Merge pull request from lgoldstein/load-library-fix Fix return type of Native#loadLibrary to match unconstrained generic Ö/Fix return type of Native#loadLibrary to match unconstrained generic type/Merge pull request from java-native-access/531-callback-cc-from-options [531] Fix stdcall callback calling convention/
,,0.096,jna,Fix UnsatisfiedLinkError calling toString on a Library interface git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2424,jna,"Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/reinstate w32 JAWT workaround; tests work without it, but demo code doesnt git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Avoid error loading JAWT when running headless Use primary colors in window shape test (Dan) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Use simpler workaround for loading AWT/JAWT on X11-based platforms git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1022,jna,Fix class cast exception read all TYPE_MAPPERs regardless of access git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1138,jna,"find proper c library automatically, avoids ubuntu crash git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/provide more info in test failures git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0906,jna,Merge branch master of Pulling master back to get compilation fixes./fix framework loading on OSX/fix some tests under clover/
,,0.0843,jna,"accommodate long path names, fixes library load error w/unicode/leave test file behind on failure/"
,,0.0833,jna,"Fix compiler warnings on OSX, remove no-longer-supported JAWT operations from OSX/"
,,0.0998,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.0618,jna,fix build on w32/address issue
,,0.1044,jna,Merge pull request from twall/optimized-struct-init Avoid superfluous memory allocation when Structure base address provided.../
,,0.1023,jna,fix test for 32-bit platforms/add more NativeMapped return type tests (IntegerType) to validate issue
,,0.087,jna,Fix NPE on non-windows platforms git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1724,jna,Fix issue# 68 File monitor thread terminates on any removeWatch call. kludge: fix intermittent failures on slow W2K box. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix issue# 68 File monitor thread terminates on any removeWatch call. (only formatting and debug info changes) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix issue# 68 File monitor thread terminates on any removeWatch call. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix for Jira issue: 67 FileMonitor incorrectly handles FILE_DELETED notification mask. Added a unit test and committed fix. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix testMultipleWatches() by clearing prior events. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0865,jna,Fix X11 keyboard test (XQueryKeymap result is not documented) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1019,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1218,jna,Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0673,jna,fix javadoc errors git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0833,jna,"find proper c library automatically, avoids ubuntu crash git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix kernel32 function lookup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/add last error exception for direct calls git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Handle last error as an exception if declared git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.098,jna,fix web start native library loading bugs git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0932,jna,Merge branch master of Pulling master back to get compilation fixes./fix framework loading on OSX/fix javadoc warnings/Merge branch improved_last_error of github.com:twall/jna into native-struct-ptr-creation/
,,0.0987,jna,fix formatting/improve library load debugging/fix library load error w/unicode/auto-strip profiler prefix set in jna.profiler.prefix/fix failing test on XP/add test for GetLastError interception/fix w32 test/work around solaris/x86 JVM bug/
,,0.0588,jna,fixes issue
,,0.0851,jna,Merge pull request from lgoldstein/issue-604 Fixed issue Kernel32#GetLastError() always returns ERROR_SUCCESS/Fixed issue Kernel32#GetLastError() always returns ERROR_SUCCESS/
,,0.0916,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.196,jna,"Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1215,jna,"improve test coverage, structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0891,jna,"update sunos natives, fix struct padding test expected results/"
,,0.0813,jna,"Fix compiler warnings on OSX, remove no-longer-supported JAWT operations from OSX/"
,,0.1147,jna,"Only analyse binary to determine hardfloat vs. softfloat on arm The ELFAnalyser analyses the java binary to determine, whether the hardfloat/softfloat flags are set. This causes issues if a security manager is in place and limits file accessibility. The JNA code base needs read access on the /proc/self/exe symlink and the referenced binary. This change reduces the cases where the executing binary is read. On platforms, that dont need it, the detection step is skipped. Close:"
,,0.0906,jna,"Apply xylos library load patch, fix versioned name checking tests git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0872,jna,Merge branch master of Pulling master back to get compilation fixes./fix framework loading on OSX/Merge branch improved_last_error of github.com:twall/jna into native-struct-ptr-creation/
,,0.1557,jna,Fix wchar_t* return when null Allow Pointer[] as function argument Fix window utils test on osx to avoid os-cast shadows git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0717,jna,avoid premature GC of Memory with NIO Buffers extant git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0717,jna,fix bug with aliasing buffers in Memory ByteBuffer tracking/
,,0.073,jna,Merge pull request from matthiasblaesing/directmapping Improve/Fix direct mapping support/
,,0.0936,jna,Allow handling of uncaught callback exceptions git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1713,jna,use more appropriate exception types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix issue 111 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix cacheing of union type information git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0906,jna,narrow direct callback test failure git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1067,jna,Merge pull request from twall/improved_last_error Improved last error/Merge pull request from twall/optimized-struct-init Avoid superfluous memory allocation when Structure base address provided.../
,,0.0798,jna,Fixes issue handle typemapper-returned String/WString with associated tests/
,,0.0872,jna,Merge pull request from java-native-access/531-callback-cc-from-options [531] Fix stdcall callback calling convention/
,,0.0916,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.196,jna,"Add callback tests for smaller int types Copy generic java.nio.Buffer support from v3 branch + tests Copy missed sparc-isms from v3 branch for building sunos variants Add stubs for platform-specific jars Include libffi testsuite Remove /lib64 references as per v3 branch Auto-generate os prefix from os.name (as per v3 branch) to automatically handle new targets Update overview to include Buffer, function pointer info Include src.zip and doc.zip in dist generation git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0685,jna,add length-specified Pointer.getStringArray() update sunos-amd64.jar native remove debug output git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1339,jna,avoid overwriting unmodified Pointer objects git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0686,jna,Fix INVALID_HANDLE_VALUE git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0859,jna,fix issue 151 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix deprecation warnings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0895,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.201,jna,"extract integer type with platform-specific size remove temporary file suffix altogether git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Implement (most of) the fixes from issue git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0786,jna,Merge pull request from twall/x11-demo-fixes X11 demo fixes/
,,0.223,jna,Clean up varargs Add per-field Structure read/write Avoid automatic writes to volatile structure fields Read/wrap function pointers in Structure fields Disallow Memory/Function as declared Structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.063,jna,address issue
,,0.1953,jna,Allow ByReference types in callbacks Clean up some Structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1622,jna,Merge pull request from marco2357/master fixed direct-mapping type-mapped pointer result types/fixed direct-mapping type-mapped pointer result types/
,,0.105,jna,Fix stdcall callbacks catch all exceptions when invoking callback git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/extract integer type with platform-specific size remove temporary file suffix altogether git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0833,jna,fix definition of HWND_BROADCAST git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0879,jna,fix INVALID_HANDLE_VALUE (64-bit) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix INVALID_HANDLE_VALUE git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Advapi32: GetUserNameW LookupAccountNameW ConvertSidToStringSidW ConvertStringSidToSidW GetLengthSid Netapi32: NetGetJoinInformation NetApiBufferFree Secur32: GetUserNameExW W32Errors: Almost full port of winerror.h Advapi32Util: GetUserName LookupAccountName ConvertSidToStringSid Netapi32Util: GetDomainName Secur32Util GetUserNameEx git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1084,jna,Start on issue Main thing I wanted to do was get the second parameter to ToNativeConverter.toNative() in there so we dont have future API breakage by adding it later. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0998,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2679,jna,"Fixes issue handle typemapper-returned String/WString with associated tests/Merge pull request from twall/issue-467-direct-enum-type-mapping Fixes enum type mapping for direct-mapped libraries. Should also improve type mapper lookups for direct-mapped libraries./add tests for type-mapping of enums Add changelog entry, fixes"
,,0.0609,jna,address issue
,,0.0916,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.0673,jna,address issue
,,0.11199999999999999,jna,"fix stdcall stack sizing for NativeMapped git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Enable VM crash protection on w32, linux Move native library init from Pointer to Native Fix Pointer.setNativeLong bug Make library initialization explicit in Pointer/NativeLibrary Javadoc cleanup git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0982,jna,"Fix bug in stdcall function mapping when using struct by value Defer size_t/off_t definition, for now git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0895,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.0998,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1039,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0833,jna,Fix stdcall callbacks catch all exceptions when invoking callback git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0936,jna,Allow handling of uncaught callback exceptions git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1257,jna,Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1957,jna,fix stdcall stack sizing for NativeMapped git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Start on issue Main thing I wanted to do was get the second parameter to ToNativeConverter.toNative() in there so we dont have future API breakage by adding it later. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add auto-conversion for custom types Fix X11 lib for 64-bit use git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0818,jna,Fixes issue handle typemapper-returned String/WString with associated tests/
,,0.10400000000000001,jna,Fix GetLastError bug Make ByReference derive from Memory git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0895,jna,fix definition of HWND_BROADCAST git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1202,jna,fix cacheing of union type information git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0694,jna,address issue
,,0.0717,jna,avoid static field initialization bug/
,,0.2534,jna,Fix NPE when sizing struct with a struct array field git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Consolidate structure ffi type info initialization and avoid premature GC Enable union by-value by using largest fields type info Explicitly throw IllegalArgument on bad type info Throw IllegalState on missing type info Explicitly write version/md5 info into Makefile from ant (to avoid platform-specific variances in sed) Make Structure.ByValue/ByReference public to allow client code comparisons Consolidate Structure field get/set operations Avoid extra Pointer peer lookup from native code (wmeissner) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1222,jna,fix cacheing of union type information git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1177,jna,"improve test coverage, structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1019,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0673,jna,fix struct layout cacheing in Union/
,,0.0566,jna,address issue
,,0.0957,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.1102,jna,fix 1 byte struct by value return git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/down to 2 failing tests git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix win64 fp return git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix some win64 bugs with structure handling git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix a few win64 tests use ffi_closure_alloc everywhere git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0697,jna,more mingw-64 fixes git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix configure/build with mingw-64 (tests still fail) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0867,jna,mark more xfail (no long double) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix some win64 bugs with structure handling git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0843,jna,more win64 fixes git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix some win64 bugs with structure handling git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0673,jna,Fix bug in callback proxy.equals (wolfgang.roekelein) Clean up some javadoc git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0778,jna,Fixes issue handle typemapper-returned String/WString with associated tests/
,,0.126,jna,fix bug writing null-valued ByReference structure fields git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0643,jna,fix Structure equals/hashcode git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0686,jna,Fix INVALID_HANDLE_VALUE git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0874,jna,fix tests on windows git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0977,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.2927,jna,Consolidate Structure.ByReference reads Cache native library options as well as alignments/type mappers Ensure library options are passed to callbacks Add protection around remaining Pointer read/write calls Consolidate wide character reads/writes Avoid stack overflow reading self-referential structures or loops More prettification of Structure.toString Add size_t/off_t standard types git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Move w32 JAWT load into native code Fix Structure.ByValue for callback arg/return Perform better type checking on callback arg/return types Propagate library/symbol lookup error messages Enable loading of libraries with non-ascii names Tighten type checking in native code git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2027,jna,Allow arbitrary callback method names Allow specification of callback type mapper with TYPE_MAPPER Allow write with uninitialized boxed primitives in Structure Fix memory leak with callbacks called from native threads w/no java context Fix Structure derived classes to allow setting TypeMapper git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1328,jna,"narrow direct callback test failure git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/improve test coverage, structure field error messages git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1039,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0618,jna,fix build on w32/address issue
,,0.0916,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.063,jna,address issue
,,0.1039,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1019,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1039,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.106,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1039,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1039,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1,jna,Fix bug checking IntegerType limits git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1571,jna,Fix division by zero on OSX/ppc calculating struct size Fix overwriting of already-initialized NativeMapped field in struct when calculating struct size git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0652,jna,address issue
,,0.1026,jna,provide more info in test failures git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix tests on IBM J9 (windows) VM git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fix test failures on IBM J9 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0883,jna,"Merge branch master of Pulling master back to get compilation fixes./add test for loading from path with unicode characters (fails on XP, at least)/fixes for oracle openjdk/fix some tests under clover/fix load/unload tests/"
,,0.1615,jna,"Merge pull request from java-native-access/494-no-onunload-callback Fixes NOTE: sporadic failure seen on linux x86-64, crash in DirectTest/avoid calling back to JVM on shared library unload/"
,,0.0751,jna,Merge pull request from matthiasblaesing/directmapping Improve/Fix direct mapping support/
,,0.0566,jna,mark more xfail (no long double) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0916,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.1019,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0577,jna,fix issue 125 git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.106,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0998,jna,more win64 fixes git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/mark more xfail (no long double) git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix some win64 bugs with structure handling git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix a few win64 tests use ffi_closure_alloc everywhere git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix unused parameter warnings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0828,jna,fix a few win64 tests use ffi_closure_alloc everywhere git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix unused parameter warnings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0848,jna,fix a few win64 tests use ffi_closure_alloc everywhere git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix unused parameter warnings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0848,jna,fix a few win64 tests use ffi_closure_alloc everywhere git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix unused parameter warnings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0938,jna,fix some win64 bugs with structure handling git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix a few win64 tests use ffi_closure_alloc everywhere git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/fix unused parameter warnings git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1019,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1019,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0718,jna,"Added jnacontrib.x11.api.X.Window.getSubwindows and fixed jnacontrib.x11.api.X.Window.getXXXProperty, returns null if the window property is not found./"
,,0.0874,jna,fix tests on windows git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1019,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.073,jna,Merge pull request from matthiasblaesing/directmapping Improve/Fix direct mapping support/
,,0.0932,jna,Avoid overwriting string fields within structures when unnecessary; fix failing direct mode tests/
,,0.0982,jna,add more NativeMapped return type tests (IntegerType) to validate issue
,,0.11199999999999999,jna,fix failing test on osx git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/narrow direct callback test failure git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0697,jna,Fixes issue handle typemapper-returned String/WString with associated tests/
,,0.1019,jna,Fixed all the trivial warnings. Down to about 30 or so. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0919,jna,fix web start native library loading bugs git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0697,jna,report correct javaws error on win64/fix web start test timeout/
,,0.0726,jna,"fix web start tests on OSX (still requires dialog dismissal, at least on first run)/add javaws fallback for OSX, show paths attempted in error/"
,,0.1641,jna,Merge pull request from marco2357/master fixed direct-mapping type-mapped pointer result types/improved testcase/fixed direct-mapping type-mapped pointer result types/
,,0.2679,jna,"Fixes issue handle typemapper-returned String/WString with associated tests/Merge pull request from twall/issue-467-direct-enum-type-mapping Fixes enum type mapping for direct-mapped libraries. Should also improve type mapper lookups for direct-mapped libraries./add tests for type-mapping of enums Add changelog entry, fixes"
,,0.0887,jna,Merge pull request from rofl0r/master fix build error on ppc when long double double/fix build on ppc when long double double/
,,0.0664,jna,Fix for closures with sunpro compiler/
,,0.1224,jna,Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Commented out impersonation test. Wild guess on which ones failing. Fixed warnings with function parameter names. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0804,jna,"Added Advapi32.GetOldestEventLogRecord. Added WinNT.EVENTLOGRECORD. Bug: ReadEventLog broken, added full test. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1368,jna,"Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Added Netapi32.DsGetDcName, DsGetForestTrustInformation and DsEnumerateDomainTrusts. Ported some of DsGetDC.h and NTSecApi.h. Bug: Netapi32Util.getDCName returns wrong value. Bug: Netapi32Util.getCurrentUserLocalGroups doesnt work for a user logged onto a domain. Added WinNT.LARGE_INTEGER. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.2083,jna,"Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add platform.win32.Secur32.ImpersonateSecurityContext and RevertSecurityContext. Fix platform.win32.Secur32.QuerySecurityContextToken take a CtxtHandle, avoid indirection. Updated release notes with win32 changes so far. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.2965,jna,"Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/Enhance SSPI function converage and bugfix SecBufferDesc (Re-)Bind SSPI functions: InitializeSecurityContext AcceptSecurityContext QueryCredentialsAttributes QuerySecurityPackageInfo EncryptMessage DecryptMessage MakeSignature VerifySignature Add binding for SEC_WINNT_AUTH_IDENTITY structure. The existing SecBufferDesc binding is replaced as the binding does not correctly map the native structure. The pBuffers member is not an array of SecBuffer.ByReference, but a pointer to an array of SecBuffers. This manifests when more than one buffer is specified. The SecBufferDesc structure is the literal transliteration of the native C header. In addition a ManagedSecBufferDesc was introduced, that allows easy access to its members, as long, as the structure is managed from the java side. Closes:"
,,0.1545,jna,"Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Added Kernel32Util.FormatMessageFromLastError and FormatMessageFromHR. Added Win32Exception that properly maps system error messages, to be used in Win32 util classes instead of LastErrorException thats a cross-platform version that doesnt try to format the string error. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1385,jna,"Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Added Netapi32.DsGetDcName, DsGetForestTrustInformation and DsEnumerateDomainTrusts. Ported some of DsGetDC.h and NTSecApi.h. Bug: Netapi32Util.getDCName returns wrong value. Bug: Netapi32Util.getCurrentUserLocalGroups doesnt work for a user logged onto a domain. Added WinNT.LARGE_INTEGER. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1339,jna,Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.2177,jna,"Fix error not reported properly in getTokenGroups/getTokenAccount. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Bug: read() of uninitialized memory in getTokenGroups/getTokenAccount. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Added Kernel32Util.FormatMessageFromLastError and FormatMessageFromHR. Added Win32Exception that properly maps system error messages, to be used in Win32 util classes instead of LastErrorException thats a cross-platform version that doesnt try to format the string error. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1026,jna,Fixed Javadoc warnings. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fixed Javadoc warnings. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0874,jna,Merge pull request from danwi/registry_get_empty_values Add fix for issue in Advapi32Util (reading empty values)/Add fix for issue in Advapi32Util (reading empty values) With this fix it is possible to read values from registry of the following types even when the size of the value is 0: REG_SZ REG_EXPAND_SZ REG_MULTI_SZ REG_NONE REG_BINARY (fixed by earlier committer) Advapi32UtilTest updated with unit test triggering the bug./Merge pull request from phailwhale22/master Closes issue for issue (continued yet again) Im failing hard... ok to merge? Indentation was fixed and I removed the try block./fix for issue
,,0.0717,jna,Merge pull request from sakamotodesu/fixed_460 fixed thanks Fix to illegal pointer access/
,,0.1713,jna,"Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Added Netapi32.DsGetDcName, DsGetForestTrustInformation and DsEnumerateDomainTrusts. Ported some of DsGetDC.h and NTSecApi.h. Bug: Netapi32Util.getDCName returns wrong value. Bug: Netapi32Util.getCurrentUserLocalGroups doesnt work for a user logged onto a domain. Added WinNT.LARGE_INTEGER. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Added Kernel32Util.FormatMessageFromLastError and FormatMessageFromHR. Added Win32Exception that properly maps system error messages, to be used in Win32 util classes instead of LastErrorException thats a cross-platform version that doesnt try to format the string error. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.122,jna,Fix platform.win32.Netapi32Util.getDC AV on Win64 Fix Advapi32Test.testGetTokenOwnerInformation AV. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1339,jna,Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1339,jna,Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.063,jna,address issue
,,0.1339,jna,Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1339,jna,Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1651,jna,"Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Added Kernel32Util.FormatMessageFromLastError and FormatMessageFromHR. Added Win32Exception that properly maps system error messages, to be used in Win32 util classes instead of LastErrorException thats a cross-platform version that doesnt try to format the string error. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0685,jna,fix javadoc warnings/clean up platform tests and error handling on windows/
,,0.1038,jna,fix incorrectly-named byReference classes to ByReference/
,,0.1651,jna,"Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Added Kernel32Util.FormatMessageFromLastError and FormatMessageFromHR. Added Win32Exception that properly maps system error messages, to be used in Win32 util classes instead of LastErrorException thats a cross-platform version that doesnt try to format the string error. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1319,jna,Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0977,jna,Fix platform.win32.Kernel32.GetNativeSystemInfo and GetSystemInfo AV on Win64. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0716,jna,address issue
,,0.0854,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.1825,jna,Fix error not reported properly in getTokenGroups/getTokenAccount. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Bug: read() of uninitialized memory in getTokenGroups/getTokenAccount. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Commented out impersonation test. Wild guess on which ones failing. Fixed warnings with function parameter names. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1204,jna,"Fix platform.win32.Netapi32Util.getDC AV on Win64 Fix Advapi32Test.testGetTokenOwnerInformation AV. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Build break: fixed service name in Advapi32Test. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Added Advapi32.GetOldestEventLogRecord. Added WinNT.EVENTLOGRECORD. Bug: ReadEventLog broken, added full test. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0849,jna,"Fixed testReadFile, not always null-terminated./"
,,0.0621,jna,Merge pull request from headcrashing/master New Windows Shell API mapping: SHGetSpecialFolderPath/
,,0.1385,jna,"Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Added Netapi32.DsGetDcName, DsGetForestTrustInformation and DsEnumerateDomainTrusts. Ported some of DsGetDC.h and NTSecApi.h. Bug: Netapi32Util.getDCName returns wrong value. Bug: Netapi32Util.getCurrentUserLocalGroups doesnt work for a user logged onto a domain. Added WinNT.LARGE_INTEGER. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.2067,jna,"Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Add platform.win32.Secur32.ImpersonateSecurityContext and RevertSecurityContext. Fix platform.win32.Secur32.QuerySecurityContextToken take a CtxtHandle, avoid indirection. Updated release notes with win32 changes so far. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.2928,jna,"Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/Enhance SSPI function converage and bugfix SecBufferDesc (Re-)Bind SSPI functions: InitializeSecurityContext AcceptSecurityContext QueryCredentialsAttributes QuerySecurityPackageInfo EncryptMessage DecryptMessage MakeSignature VerifySignature Add binding for SEC_WINNT_AUTH_IDENTITY structure. The existing SecBufferDesc binding is replaced as the binding does not correctly map the native structure. The pBuffers member is not an array of SecBuffer.ByReference, but a pointer to an array of SecBuffers. This manifests when more than one buffer is specified. The SecBufferDesc structure is the literal transliteration of the native C header. In addition a ManagedSecBufferDesc was introduced, that allows easy access to its members, as long, as the structure is managed from the java side. Closes:"
,,0.1867,jna,Merge pull request from java-native-access/strret Fix binding of IShellFolder#GetDisplayNameOf the STRRET must be bound as a structure/Fix binding of IShellFolder#GetDisplayNameOf the STRRET must be bound as a structure/
,,0.1339,jna,Updated copyright notices so that Tim doesnt go to jail for my bugs (also makes my company legal happy). git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1332,jna,"Bug: read() of uninitialized memory in getTokenGroups/getTokenAccount. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Added Netapi32.DsGetDcName, DsGetForestTrustInformation and DsEnumerateDomainTrusts. Ported some of DsGetDC.h and NTSecApi.h. Bug: Netapi32Util.getDCName returns wrong value. Bug: Netapi32Util.getCurrentUserLocalGroups doesnt work for a user logged onto a domain. Added WinNT.LARGE_INTEGER. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1339,jna,"Fix platform.win32.Netapi32Util.getDC AV on Win64 Fix Advapi32Test.testGetTokenOwnerInformation AV. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Added Advapi32.GetOldestEventLogRecord. Added WinNT.EVENTLOGRECORD. Bug: ReadEventLog broken, added full test. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.0936,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.0609,jna,address issue
,,0.0936,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.3455,jna,"Updated bindings and testcases for WinCrypt/Crypt32 CryptSignMessage + CryptVerifyMessageSignature functions and structures rebound and updated testcase to test full cycle In the structures holding arrays, the basic binding hold now only a pointer and adds a helper, that converts the pointer to the array of structures. Allowing improved bindings to use the pointer to add custom bindings. WinCryptUtil.MANAGED_CRYPT_SIGN_MESSAGE_PARA is a sample for this. Updated a working test for Crypt32#CertNameToStr Adding working version of Crypt32Util#CertNameToStr Use custom PKCS12 Store to test CertGetCertificateChain and update bindings of associated structures Use Structure#createFieldsOrder and hold fieldOrder in static field instead of recreating it on all calls Move Indent to 4 spaces (as in surrounding code)/"
,,0.3593,jna,"Updated bindings and testcases for WinCrypt/Crypt32 CryptSignMessage + CryptVerifyMessageSignature functions and structures rebound and updated testcase to test full cycle In the structures holding arrays, the basic binding hold now only a pointer and adds a helper, that converts the pointer to the array of structures. Allowing improved bindings to use the pointer to add custom bindings. WinCryptUtil.MANAGED_CRYPT_SIGN_MESSAGE_PARA is a sample for this. Updated a working test for Crypt32#CertNameToStr Adding working version of Crypt32Util#CertNameToStr Use custom PKCS12 Store to test CertGetCertificateChain and update bindings of associated structures Use Structure#createFieldsOrder and hold fieldOrder in static field instead of recreating it on all calls Move Indent to 4 spaces (as in surrounding code)/"
,,0.0588,jna,address issue
,,0.3614,jna,"Updated bindings and testcases for WinCrypt/Crypt32 CryptSignMessage + CryptVerifyMessageSignature functions and structures rebound and updated testcase to test full cycle In the structures holding arrays, the basic binding hold now only a pointer and adds a helper, that converts the pointer to the array of structures. Allowing improved bindings to use the pointer to add custom bindings. WinCryptUtil.MANAGED_CRYPT_SIGN_MESSAGE_PARA is a sample for this. Updated a working test for Crypt32#CertNameToStr Adding working version of Crypt32Util#CertNameToStr Use custom PKCS12 Store to test CertGetCertificateChain and update bindings of associated structures Use Structure#createFieldsOrder and hold fieldOrder in static field instead of recreating it on all calls Move Indent to 4 spaces (as in surrounding code)/"
,,0.3466,jna,"Updated bindings and testcases for WinCrypt/Crypt32 CryptSignMessage + CryptVerifyMessageSignature functions and structures rebound and updated testcase to test full cycle In the structures holding arrays, the basic binding hold now only a pointer and adds a helper, that converts the pointer to the array of structures. Allowing improved bindings to use the pointer to add custom bindings. WinCryptUtil.MANAGED_CRYPT_SIGN_MESSAGE_PARA is a sample for this. Updated a working test for Crypt32#CertNameToStr Adding working version of Crypt32Util#CertNameToStr Use custom PKCS12 Store to test CertGetCertificateChain and update bindings of associated structures Use Structure#createFieldsOrder and hold fieldOrder in static field instead of recreating it on all calls Move Indent to 4 spaces (as in surrounding code)/"
,,0.0737,jna,address issue
,,0.3015,jna,"Merge pull request from matthiasblaesing/sspi2 Enhance SSPI function converage and bugfix SecBufferDesc/Enhance SSPI function converage and bugfix SecBufferDesc (Re-)Bind SSPI functions: InitializeSecurityContext AcceptSecurityContext QueryCredentialsAttributes QuerySecurityPackageInfo EncryptMessage DecryptMessage MakeSignature VerifySignature Add binding for SEC_WINNT_AUTH_IDENTITY structure. The existing SecBufferDesc binding is replaced as the binding does not correctly map the native structure. The pBuffers member is not an array of SecBuffer.ByReference, but a pointer to an array of SecBuffers. This manifests when more than one buffer is specified. The SecBufferDesc structure is the literal transliteration of the native C header. In addition a ManagedSecBufferDesc was introduced, that allows easy access to its members, as long, as the structure is managed from the java side. Closes:"
,,0.063,jna,address issue
,,0.4582,jna,"Merge pull request from matthiasblaesing/flexibleVariantConversion Followup fixes for some regressions/REFIID#equals is now defined based on content again (regression fix)/Make REFIID a real pointer type to fix native callbacks After the change introduced in d7f91f118df04b6966ae9539c9e7607c48be6df8 native callbacks for the COM handling error out (see below). Analysing the stack trace this happens after the java function was called. There structures are syncing back from java to native. I asume the calling programm passes in a readonly version of the IID and so the write fails. This code path was not hit before the above mentioned changeset, because there is a typeguard, that prevents syncing for ByValue calls (which were removed be the changeset). In addition to this, a fix ComEventCallbacks_Test to not depend on an installed office was commited. Now the Internet Explorer is used, as it can be expected to be present. Tests from ConnectionPointerContainer_Test duplicated a good part of ComEventCallbacks_Test so the cases were integrated into ComEventCallbacks_Test. The exception leading to this fix (CallbackReference.java:513 synchronised structed passed by reference after the java invocation): JNA: Callback threw the following exception: java.lang.Error: Invalid memory access at com.sun.jna.Native.setInt(Native Method) at com.sun.jna.Pointer.setInt(Pointer.java:1124) at com.sun.jna.Pointer.setValue(Pointer.java:925) at com.sun.jna.Structure.writeField(Structure.java:842) at com.sun.jna.Structure.write(Structure.java:754) at com.sun.jna.Structure.autoWrite(Structure.java:2047) at com.sun.jna.CallbackReference$DefaultCallbackProxy.invokeCallback(CallbackReference.java:513) at com.sun.jna.CallbackReference$DefaultCallbackProxy.callback(CallbackReference.java:528) at com.sun.jna.Native.invokeInt(Native Method) at com.sun.jna.Function.invoke(Function.java:390) at com.sun.jna.Function.invoke(Function.java:323) at com.sun.jna.Function.invoke(Function.java:275) at com.sun.jna.Function.invoke(Function.java:266) at com.sun.jna.platform.win32.COM.COMInvoker._invokeNativeObject(COMInvoker.java:37) at com.sun.jna.platform.win32.COM.ConnectionPoint.Advise(ConnectionPoint.java:42) at com.sun.jna.platform.win32.COM.ComEventCallbacks_Test.cause_Quit_Event(ComEventCallbacks_Test.java:236) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) at org.junit.runners.ParentRunner.run(ParentRunner.java:309) at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38) at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:532) at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1179) at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:1030)/"
,,0.0673,jna,fix mappings to properly work on 32-bit windows (fixes memory faults)/
,,0.063,jna,address issue
,,0.1082,jna,"more unsigned fixes/fix some unsigned pointer-aliasing types, platform/win32/"
,,0.0618,jna,fix use 16-bit mask for upper/lower parts of DWORD/address issue
,,0.0998,jna,bug trapping code/fix incorrectly-named byReference classes to ByReference/
,,0.0895,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.0648,jna,fix shell32 alignment on win64/correct mappings causing failure on win64/
,,0.0609,jna,address issue
,,0.1061,jna,"fix some unsigned pointer-aliasing types, platform/win32/"
,,0.0895,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.0652,jna,address issue
,,0.1944,jna,"Addition win32 api : SendMessage, GetActiveWindow, COPYDATASTRUCT and a few constants + a demo application (#774) * Added a few mapping of win32 api : SendMessage and GetActiveWindow. Added some constants and structures (COPYDATASTRUCT and CWPSTRUCT from the win 32 api. Added a Win32WindowMessagesDemo to demonstrate complex messages exchange through WM_COPYDATA and with a hooked winproc. * Corrections done to take into account, the comment of the pull request : cf * Replaced Win32WindowMessagesDemo.java by User32WindowMessagesTest.java * changed data types to int where appropriate * added pull request in CHANGES.md * Addition of forgotten test class : User32WindowMessagesTest.java * Correction of compilation error of unit test/com/sun/jna/platform/win32/User32WindowMessagesTest.java detected by travis with jdk 6. * Merged from jna master to be up to date with 4.4 release. Corrected comments and license info./"
,,0.0957,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.1038,jna,fix incorrectly-named byReference classes to ByReference/
,,0.0616,jna,clean up platform tests and error handling on windows/
,,0.0874,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.23399999999999999,jna,"Merge pull request from matthiasblaesing/safearray_by_ref Fix SAFEARRAY ByReference in VARIANT/Fix SAFEARRAY ByReference in VARIANT A SAFEARRAY byref that is wrapped in a VARIANT is a **SAFEARRAY. To model this in JNA a pseudo structure SAFEARRAYByReference is introduced. This approach is used, so that the referenced SAFEARRAY is read after a native call. To make it possible to pass a SAFEARRAYByReference and an IntByReference through the ProxyObject helper, c.s.j.platform.win32.COM.util.Convert is modified to reflectivly invoke a matching VARIANT constructor. This change was manually tested with the GdPicture.NET library using ProxyObject and COMLateBindingObject based binding./"
,,0.063,jna,address issue
,,0.1967,jna,"Addition win32 api : SendMessage, GetActiveWindow, COPYDATASTRUCT and a few constants + a demo application (#774) * Added a few mapping of win32 api : SendMessage and GetActiveWindow. Added some constants and structures (COPYDATASTRUCT and CWPSTRUCT from the win 32 api. Added a Win32WindowMessagesDemo to demonstrate complex messages exchange through WM_COPYDATA and with a hooked winproc. * Corrections done to take into account, the comment of the pull request : cf * Replaced Win32WindowMessagesDemo.java by User32WindowMessagesTest.java * changed data types to int where appropriate * added pull request in CHANGES.md * Addition of forgotten test class : User32WindowMessagesTest.java * Correction of compilation error of unit test/com/sun/jna/platform/win32/User32WindowMessagesTest.java detected by travis with jdk 6. * Merged from jna master to be up to date with 4.4 release. Corrected comments and license info./"
,,0.063,jna,address issue
,,0.1188,jna,Added WinspoolUtil.getPrinterInfo4. Not expecting failure in spool tests on the first call: when no printers are installed the function succeeds and returns 0 bytes required and 0 printers returned. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1355,jna,Merge pull request from biggunbenny/master Pull request on issue as requested. Properly read native data on first entry of array of printer info structs./Fixed bug in WinspoolUtil.getPrinterInfo1() and WinspoolUtil.getPrinterInfo4() where the first elements fields was never populated/
,,0.1868,jna,"Added WinspoolUtil.getPrinterInfo4. Not expecting failure in spool tests on the first call: when no printers are installed the function succeeds and returns 0 bytes required and 0 printers returned. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Added Advapi32.GetOldestEventLogRecord. Added WinNT.EVENTLOGRECORD. Bug: ReadEventLog broken, added full test. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Hopefully fixed the WinspoolTest for when therere no printers installed. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fixed spool tests for cases where no printers are available. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/"
,,0.1294,jna,Added WinspoolUtil.getPrinterInfo4. Not expecting failure in spool tests on the first call: when no printers are installed the function succeeds and returns 0 bytes required and 0 printers returned. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/Fixed spool tests for cases where no printers are available. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.1022,jna,Fixed spool tests for cases where no printers are available. git-svn-id: 2f8a963e-d2e4-e7d0-97bf-ccb7fcea9d80/
,,0.0609,jna,address issue
,,0.0665,jna,use correct type mapper for SERVICE_FAILURE_ACTIONS/implemented failure configuration of windows services/
,,0.0704,jna,use correct type mapper for SERVICE_FAILURE_ACTIONS/implemented failure configuration of windows services/
,,0.0609,jna,address issue
,,0.0716,jna,address issue
,,0.0694,jna,address issue
,,0.0673,jna,address issue
,,0.4704,jna,"Pass objects into JNI code in addition to raw pointer value (prevent premature GC) The Memory/Pointer object delegates the native calls to static methods in the Native class. This causes the Memory/Pointer object to become prematurely eligable for GC for this case: Memory pointer something and work on Memory> String result pointer.getWideString(0) nothing more with Memory> getWideString(0) calls back into the JVM and allocates a new java string. In this case the GC can become active and collect the Memory object. After this it is possible to run the finalizer, that in turn frees the native memory backing the memory object. The native function now possibly accesses freed memory. The native code needs to hold references to the relevant object itself, this is implemented here. Changes: API relevant changes: Deprecate Native#getDirectByteBuffer(long, long) it is functional, but discouraged to be used and should be removed in future JNI-Layer (Native.java + dispatch.c): All set<Type> and get<Type>, write and read methods that took a pointer address are modified to take a pointer object, the raw pointer value and an offset All invoke<ReturnType> methods that took a pointer adress (function pointer) are modified to take a function object and the raw function pointer value Build-System/Native: the jni api version as bumped from 5.0.0 to 5.1.0 (the major version was raised in the 4.3.0 development cycle, so not modified) all prebuild native libraries were replaced with the ""OUT_OF_DATE"" marker, where no replacement could be build immediately getDirectByteBuffer(long, long) is the only API relevant method, allother methods modified are package private and so are not considered API. getDirectByteBuffer is overloaded with a package private variant getDirectByteBuffer(Pointer, long, long, long) that reflects the above described changes. Executed tests: linux-amd64: all unittests of jna pass linux-arm: 1 unittest fails (unload of jnalib, emulated environment (qemu), slow execution leads to timeout) linux-x86: all unittests of jna pass (32bit chroot on 64bit kernel) windows-64bit: 2 tests fail (before and after: DirectTypeMapperTest and NativeTest#testSizeOf (bool should be 1, is 4) windows-32bit: 2 tests fails (one less that before the change (testLongStringGeneration), other errors see x64) Performance: Check was done with JMH the comparison was between master and the proposed pointer_native_direct branch: java benchmarks-master.jar 10 10 5 The benchmarks initialize a Memory block and access it via getInt and getString, one with an offset of 0 and on with an offset of 5 bytes. The testmatrix: testInt testIntWithOffset testString testStringWithOffset linux64-jdk7 108% 108% 100% 101% linux64-jdk8 107% 108% 100% 100% linux32-jdk8 97% 97% 112% 112% win32-jdk8 90% 95% 98% 98% win64-jdk8 95% 95% 97% 97%/"
,,0.0694,jna,address issue
,,0.0833,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.261,jna,"Testsuite fixes (was Re: [PATCH] Fix libffi on m68k-linux-gnu, completely) Dixi quodÖ >although I believe some 3.0.11 checks to be broken: And indeed, with a few minor changes on top of git master, I still get a full run of PASS plus one XPASS on amd64-linux With the other patches (from this messageís parent) and these applied, I get a full PASS on m68k-linux as well. So, please git am these three diffs ? bye, //mirabilos FWIW, Im quite impressed with mksh interactively. I thought it was much *much* more bare bones. But it turns out it beats the living hell out of ksh93 in that respect. Id even consider it for my daily use if I hadnt wasted half my life on my zsh setup. :-) Frank Terbeck in From 5cb15a3bad1f0fb360520dd48bfc938c821cdcca Mon Sep 17 00:00:00 2001 From: Thorsten Glaser Date: Sun, 2 Dec 2012 23:20:56 +0000 Subject: [PATCH 1/2] Fix tests writing to a closure retval via pointer casts As explained in all other tests that do the same cast to an ffi_arg pointer instead. PASS on amd64-linux (Xen domU) and m68k-linux (ARAnyM) Signed-off-by: Thorsten Glaser"
,,0.2541,jna,"Testsuite fixes (was Re: [PATCH] Fix libffi on m68k-linux-gnu, completely) Dixi quodÖ >although I believe some 3.0.11 checks to be broken: And indeed, with a few minor changes on top of git master, I still get a full run of PASS plus one XPASS on amd64-linux With the other patches (from this messageís parent) and these applied, I get a full PASS on m68k-linux as well. So, please git am these three diffs ? bye, //mirabilos FWIW, Im quite impressed with mksh interactively. I thought it was much *much* more bare bones. But it turns out it beats the living hell out of ksh93 in that respect. Id even consider it for my daily use if I hadnt wasted half my life on my zsh setup. :-) Frank Terbeck in From 5cb15a3bad1f0fb360520dd48bfc938c821cdcca Mon Sep 17 00:00:00 2001 From: Thorsten Glaser Date: Sun, 2 Dec 2012 23:20:56 +0000 Subject: [PATCH 1/2] Fix tests writing to a closure retval via pointer casts As explained in all other tests that do the same cast to an ffi_arg pointer instead. PASS on amd64-linux (Xen domU) and m68k-linux (ARAnyM) Signed-off-by: Thorsten Glaser"
,,0.261,jna,"Testsuite fixes (was Re: [PATCH] Fix libffi on m68k-linux-gnu, completely) Dixi quodÖ >although I believe some 3.0.11 checks to be broken: And indeed, with a few minor changes on top of git master, I still get a full run of PASS plus one XPASS on amd64-linux With the other patches (from this messageís parent) and these applied, I get a full PASS on m68k-linux as well. So, please git am these three diffs ? bye, //mirabilos FWIW, Im quite impressed with mksh interactively. I thought it was much *much* more bare bones. But it turns out it beats the living hell out of ksh93 in that respect. Id even consider it for my daily use if I hadnt wasted half my life on my zsh setup. :-) Frank Terbeck in From 5cb15a3bad1f0fb360520dd48bfc938c821cdcca Mon Sep 17 00:00:00 2001 From: Thorsten Glaser Date: Sun, 2 Dec 2012 23:20:56 +0000 Subject: [PATCH 1/2] Fix tests writing to a closure retval via pointer casts As explained in all other tests that do the same cast to an ffi_arg pointer instead. PASS on amd64-linux (Xen domU) and m68k-linux (ARAnyM) Signed-off-by: Thorsten Glaser"
,,0.0818,jna,some fixed and extension for Variant date/fix to VARIANT class/
,,0.1038,jna,fix incorrectly-named byReference classes to ByReference/
,,0.0634,jna,"Fix variant constructors, add a test that makes sure they now longer throw immediately/"
,,0.2243,jna,"Merge pull request from matthiasblaesing/safearray_by_ref Fix SAFEARRAY ByReference in VARIANT/Fix SAFEARRAY ByReference in VARIANT A SAFEARRAY byref that is wrapped in a VARIANT is a **SAFEARRAY. To model this in JNA a pseudo structure SAFEARRAYByReference is introduced. This approach is used, so that the referenced SAFEARRAY is read after a native call. To make it possible to pass a SAFEARRAYByReference and an IntByReference through the ProxyObject helper, c.s.j.platform.win32.COM.util.Convert is modified to reflectivly invoke a matching VARIANT constructor. This change was manually tested with the GdPicture.NET library using ProxyObject and COMLateBindingObject based binding./"
,,0.1299,jna,"Merge pull request from matthiasblaesing/com_memory_leak_string_property Fix memory leak in COMLateBindingObject#getStringProperty/Fix memory leak in COMLateBindingObject#getStringProperty Variants that hold strings utilize a BSTR. BSTRs are special in the sense, that they are allocated by SysAllocString and freed by SysFreeString and the memory needs to be explicitly cleared. For Variants this is handled by VariantClear. VariantClear clears the data contained in the Variant and frees that data (not the Variant itself). The Variant structure is caller allocated and in JNA located in auto-allocated memory and does not need to be explicitly freed. This closes"
,,0.0787,jna,"Folded up the logic for the if statement This is a minor code style fix for the method ""FAILED"" [removed 3 lines and simplified the statement]/"
,,0.1038,jna,fix incorrectly-named byReference classes to ByReference/
,,0.0923,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.1038,jna,fix incorrectly-named byReference classes to ByReference/
,,0.0823,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.0946,jna,some small bug fixes to TLB generating/bug trapping code/some changes to find the bug/fix incorrectly-named byReference classes to ByReference/some changes to find issue with JNA 4/
,,0.24100000000000002,jna,"Merge pull request from matthiasblaesing/safearray_by_ref Fix SAFEARRAY ByReference in VARIANT/Fix SAFEARRAY ByReference in VARIANT A SAFEARRAY byref that is wrapped in a VARIANT is a **SAFEARRAY. To model this in JNA a pseudo structure SAFEARRAYByReference is introduced. This approach is used, so that the referenced SAFEARRAY is read after a native call. To make it possible to pass a SAFEARRAYByReference and an IntByReference through the ProxyObject helper, c.s.j.platform.win32.COM.util.Convert is modified to reflectivly invoke a matching VARIANT constructor. This change was manually tested with the GdPicture.NET library using ProxyObject and COMLateBindingObject based binding./"
,,0.0692,jna,"Fix variant constructors, add a test that makes sure they now longer throw immediately/"
,,0.1038,jna,fix incorrectly-named byReference classes to ByReference/
,,0.0903,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.1255,jna,Improve binding of TypeLib bindings fix wrong function signature in ITypeLib/TypeLib for FindName/IsName and adjust callers TypeLib#ReleaseLibAttr did not pass parameter to native method LPOLESTR.ByReference is derived from wrong type (BSTR instead of LPOLESTR) Fix/Add unittests/
,,0.0948,jna,remove console output from tests (COM tests still need cleanup and proper assertions)/fix incorrectly-named byReference classes to ByReference/
,,0.1293,jna,Improve binding of TypeLib bindings fix wrong function signature in ITypeLib/TypeLib for FindName/IsName and adjust callers TypeLib#ReleaseLibAttr did not pass parameter to native method LPOLESTR.ByReference is derived from wrong type (BSTR instead of LPOLESTR) Fix/Add unittests/
,,0.0636,jna,TypeLibrary test fails because MS changed method count in Microsoft Shell Controls And Automation/
,,0.0948,jna,remove console output from tests (COM tests still need cleanup and proper assertions)/fix incorrectly-named byReference classes to ByReference/
,,0.1038,jna,fix incorrectly-named byReference classes to ByReference/
,,0.0843,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.3733,jna,"Allow calling COM methods/getters requirering hybrid calling (METHOD+PROPERTYGET convention) It was found, that calling InchesToPoints method from word type library failed. Research lead to Summary: there are methods in the word typelibrary that require both PROPERTYGET _and_ METHOD to be set. With only one of these set the call fails. The article from delphitools argues, that automation compatible libraries need to be compatible with VisualBasic which does not distingish methods and property getters and will set both flags always. The MSDN article advises this behaviour: ""[...] Some languages cannot distinguish between retrieving a property and calling a method. In this case, you should set the flags DISPATCH_PROPERTYGET and DISPATCH_METHOD. [...]"" This further support the advised way from delphitools and was implemented./"
,,0.1038,jna,fix incorrectly-named byReference classes to ByReference/
,,0.1038,jna,fix incorrectly-named byReference classes to ByReference/
,,0.0883,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.1274,jna,Improve binding of TypeLib bindings fix wrong function signature in ITypeLib/TypeLib for FindName/IsName and adjust callers TypeLib#ReleaseLibAttr did not pass parameter to native method LPOLESTR.ByReference is derived from wrong type (BSTR instead of LPOLESTR) Fix/Add unittests/
,,0.0936,jna,Merge pull request from matthiasblaesing/unlockedLoad Bugfix deadlock when Pointer and Native classes are loaded from different threads in parallel/
,,0.1038,jna,fix incorrectly-named byReference classes to ByReference/
,,0.0764,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.1038,jna,fix incorrectly-named byReference classes to ByReference/
,,0.1038,jna,fix incorrectly-named byReference classes to ByReference/
,,0.0962,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.1255,jna,Improve binding of TypeLib bindings fix wrong function signature in ITypeLib/TypeLib for FindName/IsName and adjust callers TypeLib#ReleaseLibAttr did not pass parameter to native method LPOLESTR.ByReference is derived from wrong type (BSTR instead of LPOLESTR) Fix/Add unittests/
,,0.0883,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.1133,jna,"Only analyse binary to determine hardfloat vs. softfloat on arm The ELFAnalyser analyses the java binary to determine, whether the hardfloat/softfloat flags are set. This causes issues if a security manager is in place and limits file accessibility. The JNA code base needs read access on the /proc/self/exe symlink and the referenced binary. This change reduces the cases where the executing binary is read. On platforms, that dont need it, the detection step is skipped. Close:"
,,0.0942,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.1293,jna,Improve binding of TypeLib bindings fix wrong function signature in ITypeLib/TypeLib for FindName/IsName and adjust callers TypeLib#ReleaseLibAttr did not pass parameter to native method LPOLESTR.ByReference is derived from wrong type (BSTR instead of LPOLESTR) Fix/Add unittests/
,,0.1038,jna,fix incorrectly-named byReference classes to ByReference/
,,0.3858,jna,"Allow calling COM methods/getters requirering hybrid calling (METHOD+PROPERTYGET convention) It was found, that calling InchesToPoints method from word type library failed. Research lead to Summary: there are methods in the word typelibrary that require both PROPERTYGET _and_ METHOD to be set. With only one of these set the call fails. The article from delphitools argues, that automation compatible libraries need to be compatible with VisualBasic which does not distingish methods and property getters and will set both flags always. The MSDN article advises this behaviour: ""[...] Some languages cannot distinguish between retrieving a property and calling a method. In this case, you should set the flags DISPATCH_PROPERTYGET and DISPATCH_METHOD. [...]"" This further support the advised way from delphitools and was implemented./"
,,0.0823,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.0903,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.0883,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.0863,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.0903,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.2719,jna,Merge pull request from matthiasblaesing/flexibleVariantConversion Followup fixes for some regressions/REFIID#equals is now defined based on content again (regression fix)/Make conversion to/from java in c.s.j.p.win32.COM.util more flexible ProxyObject and Callback both use the Convert class as helper to convert java object to/from VARIANT. This change adds more flexibility and adds tests to fixate and check conversion./Make (Un)marshalling context sensitive Depending on the context the unmarshalling of the supplied data in callbacks is unwrapped further than before. The NavigateComplete2 event from the interface DWebBrowserEvents2 demonstrates this. The URL is passed as a Variant pointing to a Variant containing the string. Without this fix NULL is returned. To test this ComEventCallbacks_Test.java was moved to use Internet Explorer instead of MS Office./
,,0.2477,jna,"Merge pull request from matthiasblaesing/flexibleVariantConversion Followup fixes for some regressions/Make conversion to/from java in c.s.j.p.win32.COM.util more flexible ProxyObject and Callback both use the Convert class as helper to convert java object to/from VARIANT. This change adds more flexibility and adds tests to fixate and check conversion./Merge pull request from matthiasblaesing/safearray Implement SAFEARRAY access and bugfix VARIANT/VARIANT: Fix wrong asumptions, datatypes and add add unittests/Make (Un)marshalling context sensitive Depending on the context the unmarshalling of the supplied data in callbacks is unwrapped further than before. The NavigateComplete2 event from the interface DWebBrowserEvents2 demonstrates this. The URL is passed as a Variant pointing to a Variant containing the string. Without this fix NULL is returned. To test this ComEventCallbacks_Test.java was moved to use Internet Explorer instead of MS Office./"
,,0.2354,jna,"Merge pull request from matthiasblaesing/safearray_by_ref Fix SAFEARRAY ByReference in VARIANT/Fix SAFEARRAY ByReference in VARIANT A SAFEARRAY byref that is wrapped in a VARIANT is a **SAFEARRAY. To model this in JNA a pseudo structure SAFEARRAYByReference is introduced. This approach is used, so that the referenced SAFEARRAY is read after a native call. To make it possible to pass a SAFEARRAYByReference and an IntByReference through the ProxyObject helper, c.s.j.platform.win32.COM.util.Convert is modified to reflectivly invoke a matching VARIANT constructor. This change was manually tested with the GdPicture.NET library using ProxyObject and COMLateBindingObject based binding./"
,,0.2898,jna,"COM Call through the `com.sun.jna.platform.win32.COM.util.Factory` loose stack trace information The execution of business method invoked via com.sun.jna.platform.win32.COM.util.Factory is dispatched into a different thread, that has COM initialized. If the execution of one of these methods raises an Exception, the exception is unwrapped as far as possible. This in turn looses the call information on the call site. This is corrected here by concatenating the two stacktraces. While not strictly correct, it results in stack traces, that give enough information to trace them back to their origin./"
,,0.0843,jna,"REFIID in MSDN is defined as IID &, and IID is defined as GUID. Not sure why all of these had REFIID.ByValue, as it a) doesnt work b) crashes the JVM with invalid memory access/"
,,0.4288,jna,"Merge pull request from matthiasblaesing/flexibleVariantConversion Followup fixes for some regressions/Make conversion to/from java in c.s.j.p.win32.COM.util more flexible ProxyObject and Callback both use the Convert class as helper to convert java object to/from VARIANT. This change adds more flexibility and adds tests to fixate and check conversion./Make (Un)marshalling context sensitive Depending on the context the unmarshalling of the supplied data in callbacks is unwrapped further than before. The NavigateComplete2 event from the interface DWebBrowserEvents2 demonstrates this. The URL is passed as a Variant pointing to a Variant containing the string. Without this fix NULL is returned. To test this ComEventCallbacks_Test.java was moved to use Internet Explorer instead of MS Office./Allow calling COM methods/getters requirering hybrid calling (METHOD+PROPERTYGET convention) It was found, that calling InchesToPoints method from word type library failed. Research lead to Summary: there are methods in the word typelibrary that require both PROPERTYGET _and_ METHOD to be set. With only one of these set the call fails. The article from delphitools argues, that automation compatible libraries need to be compatible with VisualBasic which does not distingish methods and property getters and will set both flags always. The MSDN article advises this behaviour: ""[...] Some languages cannot distinguish between retrieving a property and calling a method. In this case, you should set the flags DISPATCH_PROPERTYGET and DISPATCH_METHOD. [...]"" This further support the advised way from delphitools and was implemented./"
,,0.4601,jna,"Make REFIID a real pointer type to fix native callbacks After the change introduced in d7f91f118df04b6966ae9539c9e7607c48be6df8 native callbacks for the COM handling error out (see below). Analysing the stack trace this happens after the java function was called. There structures are syncing back from java to native. I asume the calling programm passes in a readonly version of the IID and so the write fails. This code path was not hit before the above mentioned changeset, because there is a typeguard, that prevents syncing for ByValue calls (which were removed be the changeset). In addition to this, a fix ComEventCallbacks_Test to not depend on an installed office was commited. Now the Internet Explorer is used, as it can be expected to be present. Tests from ConnectionPointerContainer_Test duplicated a good part of ComEventCallbacks_Test so the cases were integrated into ComEventCallbacks_Test. The exception leading to this fix (CallbackReference.java:513 synchronised structed passed by reference after the java invocation): JNA: Callback threw the following exception: java.lang.Error: Invalid memory access at com.sun.jna.Native.setInt(Native Method) at com.sun.jna.Pointer.setInt(Pointer.java:1124) at com.sun.jna.Pointer.setValue(Pointer.java:925) at com.sun.jna.Structure.writeField(Structure.java:842) at com.sun.jna.Structure.write(Structure.java:754) at com.sun.jna.Structure.autoWrite(Structure.java:2047) at com.sun.jna.CallbackReference$DefaultCallbackProxy.invokeCallback(CallbackReference.java:513) at com.sun.jna.CallbackReference$DefaultCallbackProxy.callback(CallbackReference.java:528) at com.sun.jna.Native.invokeInt(Native Method) at com.sun.jna.Function.invoke(Function.java:390) at com.sun.jna.Function.invoke(Function.java:323) at com.sun.jna.Function.invoke(Function.java:275) at com.sun.jna.Function.invoke(Function.java:266) at com.sun.jna.platform.win32.COM.COMInvoker._invokeNativeObject(COMInvoker.java:37) at com.sun.jna.platform.win32.COM.ConnectionPoint.Advise(ConnectionPoint.java:42) at com.sun.jna.platform.win32.COM.ComEventCallbacks_Test.cause_Quit_Event(ComEventCallbacks_Test.java:236) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) at org.junit.runners.ParentRunner.run(ParentRunner.java:309) at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38) at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:532) at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1179) at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:1030)/"
,,0.4658,jna,"Make REFIID a real pointer type to fix native callbacks After the change introduced in d7f91f118df04b6966ae9539c9e7607c48be6df8 native callbacks for the COM handling error out (see below). Analysing the stack trace this happens after the java function was called. There structures are syncing back from java to native. I asume the calling programm passes in a readonly version of the IID and so the write fails. This code path was not hit before the above mentioned changeset, because there is a typeguard, that prevents syncing for ByValue calls (which were removed be the changeset). In addition to this, a fix ComEventCallbacks_Test to not depend on an installed office was commited. Now the Internet Explorer is used, as it can be expected to be present. Tests from ConnectionPointerContainer_Test duplicated a good part of ComEventCallbacks_Test so the cases were integrated into ComEventCallbacks_Test. The exception leading to this fix (CallbackReference.java:513 synchronised structed passed by reference after the java invocation): JNA: Callback threw the following exception: java.lang.Error: Invalid memory access at com.sun.jna.Native.setInt(Native Method) at com.sun.jna.Pointer.setInt(Pointer.java:1124) at com.sun.jna.Pointer.setValue(Pointer.java:925) at com.sun.jna.Structure.writeField(Structure.java:842) at com.sun.jna.Structure.write(Structure.java:754) at com.sun.jna.Structure.autoWrite(Structure.java:2047) at com.sun.jna.CallbackReference$DefaultCallbackProxy.invokeCallback(CallbackReference.java:513) at com.sun.jna.CallbackReference$DefaultCallbackProxy.callback(CallbackReference.java:528) at com.sun.jna.Native.invokeInt(Native Method) at com.sun.jna.Function.invoke(Function.java:390) at com.sun.jna.Function.invoke(Function.java:323) at com.sun.jna.Function.invoke(Function.java:275) at com.sun.jna.Function.invoke(Function.java:266) at com.sun.jna.platform.win32.COM.COMInvoker._invokeNativeObject(COMInvoker.java:37) at com.sun.jna.platform.win32.COM.ConnectionPoint.Advise(ConnectionPoint.java:42) at com.sun.jna.platform.win32.COM.ComEventCallbacks_Test.cause_Quit_Event(ComEventCallbacks_Test.java:236) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:497) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) at org.junit.runners.ParentRunner.run(ParentRunner.java:309) at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38) at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:532) at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1179) at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:1030)/"
,,0.2215,jna,Merge pull request from matthiasblaesing/flexibleVariantConversion Followup fixes for some regressions/REFIID#equals is now defined based on content again (regression fix)/Make (Un)marshalling context sensitive Depending on the context the unmarshalling of the supplied data in callbacks is unwrapped further than before. The NavigateComplete2 event from the interface DWebBrowserEvents2 demonstrates this. The URL is passed as a Variant pointing to a Variant containing the string. Without this fix NULL is returned. To test this ComEventCallbacks_Test.java was moved to use Internet Explorer instead of MS Office./
,,0.2961,jna,"COM Call through the `com.sun.jna.platform.win32.COM.util.Factory` loose stack trace information The execution of business method invoked via com.sun.jna.platform.win32.COM.util.Factory is dispatched into a different thread, that has COM initialized. If the execution of one of these methods raises an Exception, the exception is unwrapped as far as possible. This in turn looses the call information on the call site. This is corrected here by concatenating the two stacktraces. While not strictly correct, it results in stack traces, that give enough information to trace them back to their origin./"
,,0.3754,jna,"Allow calling COM methods/getters requirering hybrid calling (METHOD+PROPERTYGET convention) It was found, that calling InchesToPoints method from word type library failed. Research lead to Summary: there are methods in the word typelibrary that require both PROPERTYGET _and_ METHOD to be set. With only one of these set the call fails. The article from delphitools argues, that automation compatible libraries need to be compatible with VisualBasic which does not distingish methods and property getters and will set both flags always. The MSDN article advises this behaviour: ""[...] Some languages cannot distinguish between retrieving a property and calling a method. In this case, you should set the flags DISPATCH_PROPERTYGET and DISPATCH_METHOD. [...]"" This further support the advised way from delphitools and was implemented./"
,,0.0614,jna,fix mappings to properly work on 32-bit windows (fixes memory faults)/
,,0.073,jna,Merge pull request from matthiasblaesing/directmapping Improve/Fix direct mapping support/
,,0.1903,jna,Merge pull request from java-native-access/strret Fix binding of IShellFolder#GetDisplayNameOf the STRRET must be bound as a structure/Fix binding of IShellFolder#GetDisplayNameOf the STRRET must be bound as a structure/
,,0.1762,jna,Merge pull request from matthiasblaesing/javadoc Fix javadoc warnings/Fix javadoc warnings/Merge pull request from java-native-access/strret Fix binding of IShellFolder#GetDisplayNameOf the STRRET must be bound as a structure/Fix binding of IShellFolder#GetDisplayNameOf the STRRET must be bound as a structure/
,,0.2013,jna,Merge pull request from java-native-access/strret Fix binding of IShellFolder#GetDisplayNameOf the STRRET must be bound as a structure/Fix binding of IShellFolder#GetDisplayNameOf the STRRET must be bound as a structure/
,,0.2948,jna,"COM Call through the `com.sun.jna.platform.win32.COM.util.Factory` loose stack trace information The execution of business method invoked via com.sun.jna.platform.win32.COM.util.Factory is dispatched into a different thread, that has COM initialized. If the execution of one of these methods raises an Exception, the exception is unwrapped as far as possible. This in turn looses the call information on the call site. This is corrected here by concatenating the two stacktraces. While not strictly correct, it results in stack traces, that give enough information to trace them back to their origin./"
,,0.1239,jna,"Ensure test stability by using dist binaries When native interface is changed the files under lib/native are invalidated and replace with out-of-date.jar. This will cause the ELFAnalyserTest to fail. It is expected, that the dist files will be more stable than the lib/native files./"
,,0.0792,jna,Merge pull request from matthiasblaesing/directmapping Improve/Fix direct mapping support/
,,0.1,OpenDDS,"Wed Nov 3 15:29:11 UTC 2010 Don Hudson Removed DataReaderImpl::operator<<(ostream& str, WriterInfo::WriterState value) since it didnt function as intended on some platforms because WriterState is an enum nad replaced it with get_state_str(). Added type ENTITYKIND_OPENDDS_NIL_WRITER for use in infrastructure testing where there is no writer. Changed FooTest4 to use ENTITYKIND_OPENDDS_NIL_WRITER since the test has no writer by design. This eliminates multiple warnings ""failed to find publication data for ..."" that are misleading for this test./"
,,0.1201,OpenDDS,Migrated error handler parameter to a shell from a window type. Editor work in progress. Migrating to using EMF.Edit commands to make changes to model elements. There is still some portions of the notification chains in both directions that is not working completely./Fixed issue with empty modelfile causing crash of editor when opening the resource after creation./Work in progress to account for an error in the previous checkin./
,,0.1407,OpenDDS,Thu May 19 14:46:17 UTC 2011 Phil Mesnier * tools/dissector/packet.cpp: Fix for dissecting TCP frames that contain multiple DCPS messages. Also works for DCPS messages that span TCP frames./
,,0.4044,OpenDDS,"Tue Jul 26 19:06:14 UTC 2011 Phil Mesnier * dds/idl/be_global.h: * dds/idl/be_global.cpp: * dds/idl/be_produce.cpp: * dds/idl/dds_visitor.cpp: * dds/idl/wireshark_generator.h: * dds/idl/wireshark_generator.cpp: Added generator of wireshark dissector configuration files. To run, add ""-Gws"" to the opendds_idl command line. Running on yields in the local directory. This *_ws.ini file can then be used by the wireshark dissector to process sample data messages. * tools/dissector/giop_base.h: * tools/dissector/giop_base.cpp: * tools/dissector/packet-datawriter.h: * tools/dissector/packet-datawriter.cpp: * tools/dissector/packet-opendds.h: * tools/dissector/packet-opendds.cpp: * tools/dissector/packet-repo.h: * tools/dissector/packet-repo.cpp: Fixed a couple of compiler warnings. Added decomposition of content filter ID values, enabled the parsing of inforepo messages without first storing the inforepo ior in ""IOR.txt"" for wireshark. * tools/dissector/sample_dissector.h: * tools/dissector/sample_dissector.cpp: * tools/dissector/sample_manager.h: * tools/dissector/sample_manager.cpp: Added ""CORBA::<typename>"" as an alternative basic type id for parsing. The idl compiler emits C++ mapped types rather than the original CORBA IDL type name for predefined types. User specified types are used as-is. Also, translations between string types were simplified, favoring std::string where ever posible./"
,,0.4082,OpenDDS,"Tue Jul 26 19:06:14 UTC 2011 Phil Mesnier * dds/idl/be_global.h: * dds/idl/be_global.cpp: * dds/idl/be_produce.cpp: * dds/idl/dds_visitor.cpp: * dds/idl/wireshark_generator.h: * dds/idl/wireshark_generator.cpp: Added generator of wireshark dissector configuration files. To run, add ""-Gws"" to the opendds_idl command line. Running on yields in the local directory. This *_ws.ini file can then be used by the wireshark dissector to process sample data messages. * tools/dissector/giop_base.h: * tools/dissector/giop_base.cpp: * tools/dissector/packet-datawriter.h: * tools/dissector/packet-datawriter.cpp: * tools/dissector/packet-opendds.h: * tools/dissector/packet-opendds.cpp: * tools/dissector/packet-repo.h: * tools/dissector/packet-repo.cpp: Fixed a couple of compiler warnings. Added decomposition of content filter ID values, enabled the parsing of inforepo messages without first storing the inforepo ior in ""IOR.txt"" for wireshark. * tools/dissector/sample_dissector.h: * tools/dissector/sample_dissector.cpp: * tools/dissector/sample_manager.h: * tools/dissector/sample_manager.cpp: Added ""CORBA::<typename>"" as an alternative basic type id for parsing. The idl compiler emits C++ mapped types rather than the original CORBA IDL type name for predefined types. User specified types are used as-is. Also, translations between string types were simplified, favoring std::string where ever posible./"
,,0.4044,OpenDDS,"Tue Jul 26 19:06:14 UTC 2011 Phil Mesnier * dds/idl/be_global.h: * dds/idl/be_global.cpp: * dds/idl/be_produce.cpp: * dds/idl/dds_visitor.cpp: * dds/idl/wireshark_generator.h: * dds/idl/wireshark_generator.cpp: Added generator of wireshark dissector configuration files. To run, add ""-Gws"" to the opendds_idl command line. Running on yields in the local directory. This *_ws.ini file can then be used by the wireshark dissector to process sample data messages. * tools/dissector/giop_base.h: * tools/dissector/giop_base.cpp: * tools/dissector/packet-datawriter.h: * tools/dissector/packet-datawriter.cpp: * tools/dissector/packet-opendds.h: * tools/dissector/packet-opendds.cpp: * tools/dissector/packet-repo.h: * tools/dissector/packet-repo.cpp: Fixed a couple of compiler warnings. Added decomposition of content filter ID values, enabled the parsing of inforepo messages without first storing the inforepo ior in ""IOR.txt"" for wireshark. * tools/dissector/sample_dissector.h: * tools/dissector/sample_dissector.cpp: * tools/dissector/sample_manager.h: * tools/dissector/sample_manager.cpp: Added ""CORBA::<typename>"" as an alternative basic type id for parsing. The idl compiler emits C++ mapped types rather than the original CORBA IDL type name for predefined types. User specified types are used as-is. Also, translations between string types were simplified, favoring std::string where ever posible./"
,,0.4101,OpenDDS,"Tue Jul 26 19:06:14 UTC 2011 Phil Mesnier * dds/idl/be_global.h: * dds/idl/be_global.cpp: * dds/idl/be_produce.cpp: * dds/idl/dds_visitor.cpp: * dds/idl/wireshark_generator.h: * dds/idl/wireshark_generator.cpp: Added generator of wireshark dissector configuration files. To run, add ""-Gws"" to the opendds_idl command line. Running on yields in the local directory. This *_ws.ini file can then be used by the wireshark dissector to process sample data messages. * tools/dissector/giop_base.h: * tools/dissector/giop_base.cpp: * tools/dissector/packet-datawriter.h: * tools/dissector/packet-datawriter.cpp: * tools/dissector/packet-opendds.h: * tools/dissector/packet-opendds.cpp: * tools/dissector/packet-repo.h: * tools/dissector/packet-repo.cpp: Fixed a couple of compiler warnings. Added decomposition of content filter ID values, enabled the parsing of inforepo messages without first storing the inforepo ior in ""IOR.txt"" for wireshark. * tools/dissector/sample_dissector.h: * tools/dissector/sample_dissector.cpp: * tools/dissector/sample_manager.h: * tools/dissector/sample_manager.cpp: Added ""CORBA::<typename>"" as an alternative basic type id for parsing. The idl compiler emits C++ mapped types rather than the original CORBA IDL type name for predefined types. User specified types are used as-is. Also, translations between string types were simplified, favoring std::string where ever posible./"
,,0.0664,OpenDDS,coverity fixes/
,,0.0686,OpenDDS,coverity fixes/
,,0.0786,OpenDDS,updated DCPS_debug_level used for every received sample/
,,0.0686,OpenDDS,coverity fixes/
,,0.1176,OpenDDS,"Fri Jun 22 07:26:09 UTC 2012 Johnny Willemsen * dds/DCPS/GroupRakeData.cpp: Use this-> to make clear it is a member we are using * dds/DCPS/InstanceState.h: * dds/DCPS/SubscriberImpl.h: * dds/DCPS/WriteDataContainer.h: Doxygen fixes * dds/DCPS/InstanceState.inl: Use prefix increment, improves performance * dds/DCPS/SubscriptionInstance.h: No need to check a pointer for 0 before calling delete on it/"
,,0.1157,OpenDDS,"Fri Jun 22 07:26:09 UTC 2012 Johnny Willemsen * dds/DCPS/GroupRakeData.cpp: Use this-> to make clear it is a member we are using * dds/DCPS/InstanceState.h: * dds/DCPS/SubscriberImpl.h: * dds/DCPS/WriteDataContainer.h: Doxygen fixes * dds/DCPS/InstanceState.inl: Use prefix increment, improves performance * dds/DCPS/SubscriptionInstance.h: No need to check a pointer for 0 before calling delete on it/"
,,0.1194,OpenDDS,"Fri Jun 22 07:26:09 UTC 2012 Johnny Willemsen * dds/DCPS/GroupRakeData.cpp: Use this-> to make clear it is a member we are using * dds/DCPS/InstanceState.h: * dds/DCPS/SubscriberImpl.h: * dds/DCPS/WriteDataContainer.h: Doxygen fixes * dds/DCPS/InstanceState.inl: Use prefix increment, improves performance * dds/DCPS/SubscriptionInstance.h: No need to check a pointer for 0 before calling delete on it/"
,,0.1231,OpenDDS,"Fri Jun 22 07:26:09 UTC 2012 Johnny Willemsen * dds/DCPS/GroupRakeData.cpp: Use this-> to make clear it is a member we are using * dds/DCPS/InstanceState.h: * dds/DCPS/SubscriberImpl.h: * dds/DCPS/WriteDataContainer.h: Doxygen fixes * dds/DCPS/InstanceState.inl: Use prefix increment, improves performance * dds/DCPS/SubscriptionInstance.h: No need to check a pointer for 0 before calling delete on it/"
,,0.1157,OpenDDS,"Fri Jun 22 07:26:09 UTC 2012 Johnny Willemsen * dds/DCPS/GroupRakeData.cpp: Use this-> to make clear it is a member we are using * dds/DCPS/InstanceState.h: * dds/DCPS/SubscriberImpl.h: * dds/DCPS/WriteDataContainer.h: Doxygen fixes * dds/DCPS/InstanceState.inl: Use prefix increment, improves performance * dds/DCPS/SubscriptionInstance.h: No need to check a pointer for 0 before calling delete on it/"
,,0.1002,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.1479,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/avoid holding DWI/WDC lock while sending control messages; when dispose/unregister happen at the same time use a single message/
,,0.1317,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/Rework pending_messages to allow debug message if pending messages exist/
,,0.1081,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.1002,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.1002,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.1022,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.1042,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.1022,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.1022,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.1448,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/Remove debug statement/Cleaning up branch getting rid of superfluous debug logging/
,,0.0982,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.1735,OpenDDS,"Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/Created common interface to allow stop_associating to be called with a set of readers or writers guids. Added call to stop_associating in DataReaderImpl::remove_all_associations/Cleaning up branch getting rid of superfluous debug logging/cleaned up some unused/unnecessary, fixed pending_data by adding loaned_to_dw counter, fixed send_suspended_data to use add_sending_data and lock/"
,,0.14300000000000002,OpenDDS,"Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/Created common interface to allow stop_associating to be called with a set of readers or writers guids. Added call to stop_associating in DataReaderImpl::remove_all_associations/cleaned up some unused/unnecessary, fixed pending_data by adding loaned_to_dw counter, fixed send_suspended_data to use add_sending_data and lock/"
,,0.1022,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.0982,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.1062,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.1042,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.0982,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.1002,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.1062,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.0982,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.066,OpenDDS,Remove or make conditional on DCPS_debug_level debug messages/
,,0.1022,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.0951,OpenDDS,Fix build errors on LynxOS/Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.1002,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.0941,OpenDDS,removed some commenting in prep for merge back to trunk. Added DomainParticipantImpl changes to avoid deadlock with liveliness timers while calling delete_contained_entities/
,,0.2323,OpenDDS,"Resolving issue with wfa_condition_, ACE_Condition and Thread_Mutex includes/Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/Removed Error messages for that are not in fact error states/Remove debug message/Cleaning up branch getting rid of superfluous debug logging/removed some commenting in prep for merge back to trunk. Added DomainParticipantImpl changes to avoid deadlock with liveliness timers while calling delete_contained_entities/cleaned up some unused/unnecessary, fixed pending_data by adding loaned_to_dw counter, fixed send_suspended_data to use add_sending_data and lock/"
,,0.1048,OpenDDS,removed some commenting in prep for merge back to trunk. Added DomainParticipantImpl changes to avoid deadlock with liveliness timers while calling delete_contained_entities/
,,0.1888,OpenDDS,"Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/Created common interface to allow stop_associating to be called with a set of readers or writers guids. Added call to stop_associating in DataReaderImpl::remove_all_associations/Fixed locking in DataReaderImpl so that Federation did not get hung up, and allow more time in test for Federated Info Repos to shutdown/Cleaning up branch getting rid of superfluous debug logging/avoid holding DWI/WDC lock while sending control messages; when dispose/unregister happen at the same time use a single message/"
,,0.0776,OpenDDS,Fixed one instance of OPENDDS_MULTIMAP_CMP where it was mistakenly evaluating to std::map instead of std::multimap/Fix build for non-safety profile builds/
,,0.0809,OpenDDS,Expand the relevant parts of the ACE_DES_FREE macro to avoid a warning from clang/
,,0.1066,OpenDDS,removed some commenting in prep for merge back to trunk. Added DomainParticipantImpl changes to avoid deadlock with liveliness timers while calling delete_contained_entities/
,,0.0923,OpenDDS,removed some commenting in prep for merge back to trunk. Added DomainParticipantImpl changes to avoid deadlock with liveliness timers while calling delete_contained_entities/
,,0.12,OpenDDS,"Resolving issue with wfa_condition_, ACE_Condition and Thread_Mutex includes/Cleaning up branch getting rid of superfluous debug logging/cleaned up some unused/unnecessary, fixed pending_data by adding loaned_to_dw counter, fixed send_suspended_data to use add_sending_data and lock/"
,,0.066,OpenDDS,"Fixed one OPENDDS_MAP to 2 argument macro, not 3/"
,,0.1002,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/
,,0.1325,OpenDDS,Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/avoid holding DWI/WDC lock while sending control messages; when dispose/unregister happen at the same time use a single message/
,,0.1935,OpenDDS,"Cleaning up code slated for removal and superfluous debugging changes from branch wait_for_ack development in prep to merge to trunk/Created common interface to allow stop_associating to be called with a set of readers or writers guids. Added call to stop_associating in DataReaderImpl::remove_all_associations/Cleaning up branch getting rid of superfluous debug logging/avoid holding DWI/WDC lock while sending control messages; when dispose/unregister happen at the same time use a single message/cleaned up some unused/unnecessary, fixed pending_data by adding loaned_to_dw counter, fixed send_suspended_data to use add_sending_data and lock/"
,,0.0697,OpenDDS,Merge pull request from objectcomputing/writer_reader_impl_templates Fix errors in no BITS builds and java builds./Fix built-in-topics builds./
,,0.0717,OpenDDS,Merge pull request from objectcomputing/writer_reader_impl_templates Fix errors in no BITS builds and java builds./Fix built-in-topics builds./
,,0.0795,OpenDDS,Demarshalling strings in union now use proper String_var. Fixed test./Merge pull request from mitza-oci/idl-fixed-FACE Support for IDL fixed data type in FACE code generation./Support for IDL fixed data type in FACE code generation./
,,0.0956,OpenDDS,Merge pull request from mitza-oci/idl-fixed-FACE Support for IDL fixed data type in FACE code generation./Support for IDL fixed data type in FACE code generation./
,,0.0618,OpenDDS,Fix compiler warnings./Fix build error./
,,0.0616,OpenDDS,Provide some context for Redmine Issue# 1446 error message logging/
,,0.0596,OpenDDS,Provide some context for Redmine Issue# 1446 error message logging/
,,0.0917,OpenDDS,Merge pull request from mitza-oci/lynxos-warnings Fixed compiler warnings on LynxOS-178./Fixed compiler warnings on LynxOS-178./
,,0.0913,OpenDDS,Merge pull request from objectcomputing/ts_api_updates_redmine_2334 Changes for face issues/Make log message not an ERROR log message but rather a warning if the instance handle is not found/Merge pull request from objectcomputing/writer_reader_impl_templates Fix errors in no BITS builds and java builds./Fix built-in-topics builds./Fixes for no builtin topics builds./Merge remote branch upstream/master into face-conf-test-suite Conflicts: dds/CORBA/tao/BasicSequences.cpp dds/CORBA/tao/ORB_Misc.cpp dds/CORBA/tao/OctetSeqC.cpp dds/CORBA/tao/SystemException.cpp/Decrease to DCPS_debug_level 4 to match end historic logging/Increase debug level for datawriter liveliness message logging and add identifiers for writer and reader in log msg/
,,0.0737,OpenDDS,Merge pull request from objectcomputing/writer_reader_impl_templates Fix errors in no BITS builds and java builds./Fix built-in-topics builds./
,,0.0784,OpenDDS,Avoid potential ambiguous symbol with std::size./
,,0.0804,OpenDDS,Added required sections for static discovery. Fixed local_address./
,,0.0556,OpenDDS,Fix log message for w_char builds/
,,0.1143,OpenDDS,"Merge pull request from objectcomputing/ipv6_changes Fix issue where locator was being improperly set due to local_addressÖ/Sedp Fix issue where locator was being improperly set due to local_address_string being non empty, but only populated with the updated port number and no address. Need to detect this scenario and populate locator with appropriate interfaces./Avoid top level const/Merge pull request from objectcomputing/ipv6_updates Fix issues with IPV6 enabled builds on Windows./Merge pull request from mitza-oci/master Removed workarounds for GCC 3.3.x bugs./Removed workarounds for GCC 3.3.x bugs./"
,,0.0673,OpenDDS,Merge pull request from jrw972/master Fix wide character builds/Fix wide-character builds/
,,0.0673,OpenDDS,Merge pull request from jrw972/master Fix wide character builds/Fix wide-character builds/
,,0.0673,OpenDDS,Merge pull request from jrw972/master Fix wide character builds/Fix wide-character builds/
,,0.2609,OpenDDS,Send acknack when reader is going away The following sequence was observed in the StaticDiscovery test: Writer Reader Send last sample ... Process last sample ... Terminate ... Wait for acks ... Timeout The goal is to avoid the timeout. There are three options: 1. Decrease the WaitForAck timeout. 2. Add a delay to the reader so that it will receive a heartbeat from the writer and send an acknack. 3. Have the reader send an acknack before it goes away. If the writer receives it then it will not timeout. This commit implements option 3. The StaticDiscoveryTest was modified to set the history depth when available./
,,0.0694,OpenDDS,Merge pull request from iamtheschmitzer/master Fix Thrasher run_test.pl/
,,0.0689,OpenDDS,"Fix some reliability issues with sending naks, synack, and nakack/"
,,0.0648,OpenDDS,"Fix some reliability issues with sending naks, synack, and nakack/"
,,0.0919,OpenDDS,"Fix multimap insert for SunOS/Fix some reliability issues with sending naks, synack, and nakack/"
,,0.1188,OpenDDS,"In connect_datalink, get an rch to the config to make sure it is still viable when accessing its local_address, otherwise if config_i_ is nil or transport is shutting down return (check this again after lock is acquired). Pass a ACE_INET_Addr local_address into the blob_to_key helper function to guard against the config_i_ going away while waiting for the call to resolve and avoid the possible access violation./"
,,0.1222,OpenDDS,"In connect_datalink, get an rch to the config to make sure it is still viable when accessing its local_address, otherwise if config_i_ is nil or transport is shutting down return (check this again after lock is acquired). Pass a ACE_INET_Addr local_address into the blob_to_key helper function to guard against the config_i_ going away while waiting for the call to resolve and avoid the possible access violation./"
,,0.0757,OpenDDS,"Merge pull request from iamtheschmitzer/master Log errno, rather than message, fix LargeSample rtps.ini./Dont call get_ip_interfaces when in safety profile to prevent error logging./"
,,0.2675,OpenDDS,"Send acknack when reader is going away The following sequence was observed in the StaticDiscovery test: Writer Reader Send last sample ... Process last sample ... Terminate ... Wait for acks ... Timeout The goal is to avoid the timeout. There are three options: 1. Decrease the WaitForAck timeout. 2. Add a delay to the reader so that it will receive a heartbeat from the writer and send an acknack. 3. Have the reader send an acknack before it goes away. If the writer receives it then it will not timeout. This commit implements option 3. The StaticDiscoveryTest was modified to set the history depth when available./Remove use of reverse lock and use individual release/acquire calls so that if the transport client it shut down while the lock is released, upon return from connect_datalink (should fail) the lock will not be automatically accessed. If datalink fails to connect in associate, return false./"
,,0.2623,OpenDDS,Send acknack when reader is going away The following sequence was observed in the StaticDiscovery test: Writer Reader Send last sample ... Process last sample ... Terminate ... Wait for acks ... Timeout The goal is to avoid the timeout. There are three options: 1. Decrease the WaitForAck timeout. 2. Add a delay to the reader so that it will receive a heartbeat from the writer and send an acknack. 3. Have the reader send an acknack before it goes away. If the writer receives it then it will not timeout. This commit implements option 3. The StaticDiscoveryTest was modified to set the history depth when available./
,,0.2651,OpenDDS,Send acknack when reader is going away The following sequence was observed in the StaticDiscovery test: Writer Reader Send last sample ... Process last sample ... Terminate ... Wait for acks ... Timeout The goal is to avoid the timeout. There are three options: 1. Decrease the WaitForAck timeout. 2. Add a delay to the reader so that it will receive a heartbeat from the writer and send an acknack. 3. Have the reader send an acknack before it goes away. If the writer receives it then it will not timeout. This commit implements option 3. The StaticDiscoveryTest was modified to set the history depth when available./
,,0.2679,OpenDDS,Send acknack when reader is going away The following sequence was observed in the StaticDiscovery test: Writer Reader Send last sample ... Process last sample ... Terminate ... Wait for acks ... Timeout The goal is to avoid the timeout. There are three options: 1. Decrease the WaitForAck timeout. 2. Add a delay to the reader so that it will receive a heartbeat from the writer and send an acknack. 3. Have the reader send an acknack before it goes away. If the writer receives it then it will not timeout. This commit implements option 3. The StaticDiscoveryTest was modified to set the history depth when available./
,,0.2637,OpenDDS,Send acknack when reader is going away The following sequence was observed in the StaticDiscovery test: Writer Reader Send last sample ... Process last sample ... Terminate ... Wait for acks ... Timeout The goal is to avoid the timeout. There are three options: 1. Decrease the WaitForAck timeout. 2. Add a delay to the reader so that it will receive a heartbeat from the writer and send an acknack. 3. Have the reader send an acknack before it goes away. If the writer receives it then it will not timeout. This commit implements option 3. The StaticDiscoveryTest was modified to set the history depth when available./
,,0.2272,OpenDDS,"Add Safety profile builds must be configured with an address for discovery and transport. One way to do this is to specify a local_address in the configuration file. To avoid (1) manually editing every test configuration file and (2) parsing every configuration file to determine if and how the local_address should appear, we introduced a configuration variable for the common section (and command-line option) called DCPSDefaultAddress. The default address overrides any that would be determined automatically but does not override a local_address appearing in a file. This commit introduces the following changes: * Adds default_address to the Service_Participant. * Causes Sedp to use the default address when computing locators for Spdp. * Causes Rtps to use the default address when computing locators for Sedp. * The test framework will set the default address when DOC_TEST_*_IP_ADDRESS is defined./"
,,0.2637,OpenDDS,Send acknack when reader is going away The following sequence was observed in the StaticDiscovery test: Writer Reader Send last sample ... Process last sample ... Terminate ... Wait for acks ... Timeout The goal is to avoid the timeout. There are three options: 1. Decrease the WaitForAck timeout. 2. Add a delay to the reader so that it will receive a heartbeat from the writer and send an acknack. 3. Have the reader send an acknack before it goes away. If the writer receives it then it will not timeout. This commit implements option 3. The StaticDiscoveryTest was modified to set the history depth when available./
,,0.2281,OpenDDS,"Merge pull request from jrw972/master Fix wide character builds/Fix wide character builds/Add Safety profile builds must be configured with an address for discovery and transport. One way to do this is to specify a local_address in the configuration file. To avoid (1) manually editing every test configuration file and (2) parsing every configuration file to determine if and how the local_address should appear, we introduced a configuration variable for the common section (and command-line option) called DCPSDefaultAddress. The default address overrides any that would be determined automatically but does not override a local_address appearing in a file. This commit introduces the following changes: * Adds default_address to the Service_Participant. * Causes Sedp to use the default address when computing locators for Spdp. * Causes Rtps to use the default address when computing locators for Sedp. * The test framework will set the default address when DOC_TEST_*_IP_ADDRESS is defined./"
,,0.2722,OpenDDS,Send acknack when reader is going away The following sequence was observed in the StaticDiscovery test: Writer Reader Send last sample ... Process last sample ... Terminate ... Wait for acks ... Timeout The goal is to avoid the timeout. There are three options: 1. Decrease the WaitForAck timeout. 2. Add a delay to the reader so that it will receive a heartbeat from the writer and send an acknack. 3. Have the reader send an acknack before it goes away. If the writer receives it then it will not timeout. This commit implements option 3. The StaticDiscoveryTest was modified to set the history depth when available./
,,0.228,OpenDDS,"Add Safety profile builds must be configured with an address for discovery and transport. One way to do this is to specify a local_address in the configuration file. To avoid (1) manually editing every test configuration file and (2) parsing every configuration file to determine if and how the local_address should appear, we introduced a configuration variable for the common section (and command-line option) called DCPSDefaultAddress. The default address overrides any that would be determined automatically but does not override a local_address appearing in a file. This commit introduces the following changes: * Adds default_address to the Service_Participant. * Causes Sedp to use the default address when computing locators for Spdp. * Causes Rtps to use the default address when computing locators for Sedp. * The test framework will set the default address when DOC_TEST_*_IP_ADDRESS is defined./Fixed handling of RTPS Discoverys SedpLocalAddress config option./"
,,0.2524,OpenDDS,"Merge pull request from jrw972/master Fix wide character builds/Fix wide character builds/Fix wide character builds/Add Safety profile builds must be configured with an address for discovery and transport. One way to do this is to specify a local_address in the configuration file. To avoid (1) manually editing every test configuration file and (2) parsing every configuration file to determine if and how the local_address should appear, we introduced a configuration variable for the common section (and command-line option) called DCPSDefaultAddress. The default address overrides any that would be determined automatically but does not override a local_address appearing in a file. This commit introduces the following changes: * Adds default_address to the Service_Participant. * Causes Sedp to use the default address when computing locators for Spdp. * Causes Rtps to use the default address when computing locators for Sedp. * The test framework will set the default address when DOC_TEST_*_IP_ADDRESS is defined./"
,,0.0987,OpenDDS,InfoRepo dispatching ORB isnt compatible with BiDir GIOP Instead configure the ORB to avoid nested upcalls/
,,0.1063,OpenDDS,InfoRepo dispatching ORB isnt compatible with BiDir GIOP Instead configure the ORB to avoid nested upcalls/
,,0.12,OpenDDS,Fixed fuzz script error/InfoRepo dispatching ORB isnt compatible with BiDir GIOP Instead configure the ORB to avoid nested upcalls/Merge pull request from mitza-oci/master Fixed compile error when built-in topics are disabled./Fixed compile error when built-in topics are disabled./Merge pull request from mitza-oci/master Fixed reference counting and other memory management bugs/
,,0.0792,OpenDDS,"Merge pull request from nxdefiant/master Solaris: Fix NOSIGNAL collision, nm variant/FACE: Avoid collision which Solaris NOSIGNAL/"
,,0.0787,OpenDDS,Merge pull request from mitza-oci/master Fixed a bug in Java mapping generation for structs with short names (4 or less)/Fixed a bug in Java mapping generation for structs with short names (4 or less)/
,,0.0764,OpenDDS,Fixed dissector bugs./Initial wireshark fixes for debugging (not final)/
,,0.0681,OpenDDS,Fixed dissector bugs./
,,0.1,OpenDDS,Merge pull request from mathersm/Issue-368_Extend_OpenDDS_TypeSupport_with_an_unregister_type_operation Issue 368 extend open dds type support with an unregister type operation/Merge branch Issue-368_Extend_OpenDDS_TypeSupport_with_an_unregister_type_operation of into Issue-368_Extend_OpenDDS_TypeSupport_with_an_unregister_type_operation/Merge pull request from jwillemsen/master Minor typo and doxygen fixes/
,,0.1119,OpenDDS,Merge pull request from mathersm/Issue-368_Extend_OpenDDS_TypeSupport_with_an_unregister_type_operation Issue 368 extend open dds type support with an unregister type operation/Merge branch Issue-368_Extend_OpenDDS_TypeSupport_with_an_unregister_type_operation of into Issue-368_Extend_OpenDDS_TypeSupport_with_an_unregister_type_operation/Fix SubscriptionInstance/PublicationInstance being accessed by watchdogs after deletion/Merge pull request from jwillemsen/master Minor typo and doxygen fixes/
,,0.1616,OpenDDS,"Merge pull request from huangminghuang/DataWriterContainer_fix Fix memory access error in WriteDataContainer/Merge pull request from oschwaldp-oci/coverity_issues_fixes Coverity issues fixes/Fix memory access error in WriteDataContainer/Addressing Coverity Scan CID: 1380666. Initialize publication_id_./Merge pull request from oschwaldp-oci/coverity_issues_fixes Fixing issue causing FooTest5 blocking variant to fail. Now that stÖ/Fixing issue causing FooTest5 blocking variant to fail. Now that stale is being reset to 0, make sure this is the case before broadcasting to wakeup_blocking_writers./Merge pull request from oschwaldp-oci/coverity_issues_fixes Fix issues reported by Coverity./Fix NULL to be 0 following convention./Addressing Coverity Scan CID: 1231781. Set stale pointer to null after release_buffer to not pass freed pointer to wakeup_blocking_writers./Fix SubscriptionInstance/PublicationInstance being accessed by watchdogs after deletion/"
,,0.1195,OpenDDS,"Extend logging in case of a failure * dds/DCPS/DomainParticipantImpl.cpp:/Merge pull request from mitza-oci/master Error handling for invalid filter expressions in writer-side content filtering/Error handling for invalid filter expressions in writer-side content filtering/Merge pull request from jwillemsen/master Fixed typo in comment and minor code improvements/Check if we have a typesupport found, if not, log an error instead of crashing on a nil pointer * dds/DCPS/DomainParticipantImpl.cpp:/Merge pull request from jwillemsen/master Minor typo and doxygen fixes/Avoid implicit conversion from pointer to RcHandle/Rework again includes, still causes problems in some older builds * dds/DCPS/DomainParticipantImpl.cpp: * dds/DCPS/RecorderImpl.cpp: * dds/DCPS/ReplayerImpl.h: * dds/DCPS/WriterDataSampleList.h: * tests/DCPS/LivelinessTest/publisher.cpp:/"
,,0.0782,OpenDDS,Merge pull request from mathersm/Issue-368_Extend_OpenDDS_TypeSupport_with_an_unregister_type_operation Issue 368 extend open dds type support with an unregister type operation/
,,0.0913,OpenDDS,Merge branch master of into jwi-gendirbug/Merge pull request from mathersm/Issue-368_Extend_OpenDDS_TypeSupport_with_an_unregister_type_operation Issue 368 extend open dds type support with an unregister type operation/
,,0.0895,OpenDDS,Merge branch master of into jwi-gendirbug/Merge pull request from mathersm/Issue-368_Extend_OpenDDS_TypeSupport_with_an_unregister_type_operation Issue 368 extend open dds type support with an unregister type operation/
,,0.0636,OpenDDS,"Working to fix call to global operator new, not allowed in safety_profile./"
,,0.1104,OpenDDS,Merge pull request from mathersm/Issue-368_Extend_OpenDDS_TypeSupport_with_an_unregister_type_operation Issue 368 extend open dds type support with an unregister type operation/Merge branch Issue-368_Extend_OpenDDS_TypeSupport_with_an_unregister_type_operation of into Issue-368_Extend_OpenDDS_TypeSupport_with_an_unregister_type_operation/Cleaning up unnecessary code. Converted the case of a call to unregister_type with an unregisted type name to be an error condition instead of a pseudo-success (meeting intent of operation)./
,,0.0625,OpenDDS,"Initial support for Wireshark 2.x, see TODO comments proto_tree_add* still needs to be handled as this has a large breaking change in wireshark/"
,,0.0645,OpenDDS,"Initial support for Wireshark 2.x, see TODO comments proto_tree_add* still needs to be handled as this has a large breaking change in wireshark/"
,,0.0577,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0643,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0577,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0599,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0621,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0556,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0577,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0556,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0599,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0577,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0556,OpenDDS,Coverity Scan Defect: Addressing Unchecked dynamic_cast issues./
,,0.0669,OpenDDS,When deserialization fails stop processing * dds/DCPS/RTPS/Sedp.cpp:/
,,0.1044,OpenDDS,Merge pull request from jwillemsen/jwi-msvc-versioned Fixed versioned namespace macro location/Fixed versioned namespace macro location * dds/DCPS/DataDurabilityCache.h:/
,,0.0765,OpenDDS,Logging fixes * dds/DCPS/DataWriterImpl_T.h:/Merge pull request from jwillemsen/jwi-loggingmethodfix Fixed logging statement/Fixed logging statement * dds/DCPS/DataWriterImpl_T.h:/Merge pull request from huangminghuang/ArrayTestFix Fix tools/modeling/tests/Arrays serialization error/Fix tools/modeling/tests/Arrays serialization error/
,,0.066,OpenDDS,Merge pull request from oschwaldp-oci/coverity_issues_fixes Coverity issues fixes/Handle thrown exception BAD_PARAM./
,,0.0673,OpenDDS,Merge pull request from oschwaldp-oci/coverity_issues_fixes Coverity issues fixes/
,,0.0918,OpenDDS,Merge pull request from oschwaldp-oci/coverity_issues_fixes Addressing Coverity Scan Reported Defects./Merge branch master into jwi-endhistorysampleleak/Merge pull request from mitza-oci/tests-coverity-bugs Fixed Coverity-reported issues in tests/WriteDataContainer test: use smart pointers to avoid resource leaks when returning due to error/
,,0.0784,OpenDDS,Merge pull request from mitza-oci/master Fixed compiler warnings/Fixed compiler warnings/
,,0.0843,OpenDDS,Merge pull request from mitza-oci/master Fixed compiler warnings/Fixed compiler warnings/
,,0.0936,OpenDDS,Merge pull request from huangminghuang/rtps_udp-deadlock Fix RtpsUdpDataLink deadlock issue/Fix RtpsUdpDataLink deadlock issue/
,,0.0785,OpenDDS,"Revert changes to WaitSet.cpp from commit ""Handle thrown exception BAD_PARAM."" This reverts partial commit 366f81655ecbd994e36176d67a0766e7549cdbba./Handle thrown exception BAD_PARAM./Merge pull request from mitza-oci/master Fixed compiler warnings/Fixed compiler warnings/"
,,0.2409,OpenDDS,"Dissector: Handle invalid ITLs, mark missing ITLs Handle Segfaults in sample dissectors from invalid ITLs. This wouldnt detect if an ITL is valid, just check if a pointer is definitely invalid during the payload dissection, inform the user via the GUI that the error is most likely caused by an invalid ITL file and exit as gracefully as possible (exit()). Ideally it would just mark the packets as malformed and recover, but that code is less than ideal (using set long jump from the SIGSEGV handler). Also in this commit is using Wiresharks expert info to inform the user in the GUI that it couldnt dissect a sample payload for other reasons: No Topic to Track or No Dissector could be found for the Type./"
,,0.3946,OpenDDS,"Dissector: Handle invalid ITLs, mark missing ITLs Handle Segfaults in sample dissectors from invalid ITLs. This wouldnt detect if an ITL is valid, just check if a pointer is definitely invalid during the payload dissection, inform the user via the GUI that the error is most likely caused by an invalid ITL file and exit as gracefully as possible (exit()). Ideally it would just mark the packets as malformed and recover, but that code is less than ideal (using set long jump from the SIGSEGV handler). Also in this commit is using Wiresharks expert info to inform the user in the GUI that it couldnt dissect a sample payload for other reasons: No Topic to Track or No Dissector could be found for the Type./Dissector: Leaks dyn. field names and array/Dissector: Basic Payload Dissection in WS2 This is the basic framework for payload dissection in wireshark2. Involves adding a hf vector to the Sample_Manager Singleton, adding fields as they encountered in Sample_Dissector, and merging them with the constant DCPS fields and passing the result to wireshark when DCPS is registered. Sample Fields are left with a int that is the wireshark field id (hf_). During packet dissect, Sample_Fields are passed the wireshark field id and using that they can add data corresponding to their field. Payload type is now set on opendds.sample.payload and payload contents are added in a tree under that. Work left as of writing this is: to fix/complete registration of non string fields, involve composite types (seq, union, etc), clean up Sample_Manager usage, check/stop possible leak of dynamically generated field names and get working with tests other than Messenger./"
,,0.3289,OpenDDS,"Dissector: Leaks dyn. field names and array/Dissector: Basic Payload Dissection in WS2 This is the basic framework for payload dissection in wireshark2. Involves adding a hf vector to the Sample_Manager Singleton, adding fields as they encountered in Sample_Dissector, and merging them with the constant DCPS fields and passing the result to wireshark when DCPS is registered. Sample Fields are left with a int that is the wireshark field id (hf_). During packet dissect, Sample_Fields are passed the wireshark field id and using that they can add data corresponding to their field. Payload type is now set on opendds.sample.payload and payload contents are added in a tree under that. Work left as of writing this is: to fix/complete registration of non string fields, involve composite types (seq, union, etc), clean up Sample_Manager usage, check/stop possible leak of dynamically generated field names and get working with tests other than Messenger./"
,,0.3106,OpenDDS,"Dissector: Basic Payload Dissection in WS2 This is the basic framework for payload dissection in wireshark2. Involves adding a hf vector to the Sample_Manager Singleton, adding fields as they encountered in Sample_Dissector, and merging them with the constant DCPS fields and passing the result to wireshark when DCPS is registered. Sample Fields are left with a int that is the wireshark field id (hf_). During packet dissect, Sample_Fields are passed the wireshark field id and using that they can add data corresponding to their field. Payload type is now set on opendds.sample.payload and payload contents are added in a tree under that. Work left as of writing this is: to fix/complete registration of non string fields, involve composite types (seq, union, etc), clean up Sample_Manager usage, check/stop possible leak of dynamically generated field names and get working with tests other than Messenger./"
,,0.3722,OpenDDS,"Dissector: Handle invalid ITLs, mark missing ITLs Handle Segfaults in sample dissectors from invalid ITLs. This wouldnt detect if an ITL is valid, just check if a pointer is definitely invalid during the payload dissection, inform the user via the GUI that the error is most likely caused by an invalid ITL file and exit as gracefully as possible (exit()). Ideally it would just mark the packets as malformed and recover, but that code is less than ideal (using set long jump from the SIGSEGV handler). Also in this commit is using Wiresharks expert info to inform the user in the GUI that it couldnt dissect a sample payload for other reasons: No Topic to Track or No Dissector could be found for the Type./Dissector: Basic Payload Dissection in WS2 This is the basic framework for payload dissection in wireshark2. Involves adding a hf vector to the Sample_Manager Singleton, adding fields as they encountered in Sample_Dissector, and merging them with the constant DCPS fields and passing the result to wireshark when DCPS is registered. Sample Fields are left with a int that is the wireshark field id (hf_). During packet dissect, Sample_Fields are passed the wireshark field id and using that they can add data corresponding to their field. Payload type is now set on opendds.sample.payload and payload contents are added in a tree under that. Work left as of writing this is: to fix/complete registration of non string fields, involve composite types (seq, union, etc), clean up Sample_Manager usage, check/stop possible leak of dynamically generated field names and get working with tests other than Messenger./DCPS Dissector now running on Wireshark 2.4.1 Added ""ws"" prefix to remaining calls to proto_tree_add and tvb_length./"
,,0.0737,OpenDDS,Merge pull request from huangminghuang/memory-leak-fixes Fourth batch of memory leak fixes/Added WeakRcHandle to break reference cycles/
,,0.0702,OpenDDS,Avoid storing TcpConnection pointer in TcpReceiveStrategy/
,,0.0702,OpenDDS,Avoid storing TcpConnection pointer in TcpReceiveStrategy/
,,0.0618,OpenDDS,Fix race condition for accessing ownership manager/
,,0.0664,OpenDDS,Merge pull request from huangminghuang/master Third batch of memory leak fixes/Fix memory leaks in Sedp/
,,0.0737,OpenDDS,Merge pull request from huangminghuang/memory-leak-fixes Fourth batch of memory leak fixes/Added WeakRcHandle to break reference cycles/
,,0.1603,OpenDDS,"Dissector: Adjustments for WS compatibility Made some changes to README Sample Dissection enabled for Wireshark 1.x. Attempted to make compatible with the next release, 2.5/2.6, but it has an assertion error on start up. 1.10 and before segfaults. Tested successfully with 1.12, 2.0, 2.2, and 2.4 on Linux./Dissector: Various Smaller Tasks Completely Removed ws_proto_tree_add_text(). Mark Packet if a determinable error occurs during sample dissection./"
,,0.094,OpenDDS,"Dissector: Adjustments for WS compatibility Made some changes to README Sample Dissection enabled for Wireshark 1.x. Attempted to make compatible with the next release, 2.5/2.6, but it has an assertion error on start up. 1.10 and before segfaults. Tested successfully with 1.12, 2.0, 2.2, and 2.4 on Linux./"
,,0.3857,OpenDDS,"Merge pull request from iguessthislldo/wireshark_improvements dissector: Fixed Type Support and expert changes/dissector: Fixed Type Support and expert changes Added support for dissection for OpenDDS fixed-point numbers which are converted to doubles for numerical functions. If ACE_CDR::Fixed is missing, a message will be displayed that this is so. Also started marking some packets with a warning instead of marking it as malformed. For example, when an individual field fails for some reason or non essential information is unavailable, like the dissector ITL file./Merge pull request from iguessthislldo/wireshark_improvements Dissector macOS support, configure script, fixed throw spec problem/Merge pull request from iguessthislldo/wireshark2 Wireshark 2 Dissector: Fixes for Windows and Scoreboard/Access Fixed Type Attributes/Dissector: Changes for Scoreboard, and others Also: Print ITL files and types found Fixed Bug where every field was a struct/Dissector: Fixed Types TODO Comment/Dissector: %s %C ACE_DEBUG/Dissector: Fixs for PR Addressing Adams inital comments, Codacy, the Merge Conflict and a few things I found along the way./Dissector: Namespace Resolution and Union Bug Added Sample_Base as a Parent Class to Sample_Field and Sample_Dissector. Sample_Base holds wireshark namespace and field for every context that its child class is used in. Tweaked Array and Sequence Labels and Namespace. For now using ""_e"" (for element) to access an element of the sequence or array. Removed namespace debug messages. Fixed bug in Union length calculation that caused String Key Test to hang on dissection./"
,,0.2902,OpenDDS,"Merge pull request from iguessthislldo/wireshark2 Wireshark 2 Dissector: Fixes for Windows and Scoreboard/Dissector: Changes for Scoreboard, and others Also: Print ITL files and types found Fixed Bug where every field was a struct/Dissector: Adjustments for WS compatibility Made some changes to README Sample Dissection enabled for Wireshark 1.x. Attempted to make compatible with the next release, 2.5/2.6, but it has an assertion error on start up. 1.10 and before segfaults. Tested successfully with 1.12, 2.0, 2.2, and 2.4 on Linux./Dissector: Namespace Resolution and Union Bug Added Sample_Base as a Parent Class to Sample_Field and Sample_Dissector. Sample_Base holds wireshark namespace and field for every context that its child class is used in. Tweaked Array and Sequence Labels and Namespace. For now using ""_e"" (for element) to access an element of the sequence or array. Removed namespace debug messages. Fixed bug in Union length calculation that caused String Key Test to hang on dissection./"
,,0.3984,OpenDDS,"Merge pull request from iguessthislldo/wireshark_improvements Dissector Fixes for Fixed Type Support, Expert, and configure/Merge pull request from iguessthislldo/wireshark_improvements dissector: Fixed Type Support and expert changes/dissector: Fixed Type Support and expert changes Added support for dissection for OpenDDS fixed-point numbers which are converted to doubles for numerical functions. If ACE_CDR::Fixed is missing, a message will be displayed that this is so. Also started marking some packets with a warning instead of marking it as malformed. For example, when an individual field fails for some reason or non essential information is unavailable, like the dissector ITL file./Merge pull request from iguessthislldo/wireshark_improvements Dissector macOS support, configure script, fixed throw spec problem/Merge pull request from iguessthislldo/wireshark2 Wireshark 2 Dissector: Fixes for Windows and Scoreboard/Access Fixed Type Attributes/Dissector: Changes for Scoreboard, and others Also: Print ITL files and types found Fixed Bug where every field was a struct/Dissector: Various Smaller Tasks Completely Removed ws_proto_tree_add_text(). Mark Packet if a determinable error occurs during sample dissection./Dissector: Serializer Refactor: Compiles, but broken/Dissector: Namespace Resolution and Union Bug Added Sample_Base as a Parent Class to Sample_Field and Sample_Dissector. Sample_Base holds wireshark namespace and field for every context that its child class is used in. Tweaked Array and Sequence Labels and Namespace. For now using ""_e"" (for element) to access an element of the sequence or array. Removed namespace debug messages. Fixed bug in Union length calculation that caused String Key Test to hang on dissection./"
,,0.1021,OpenDDS,"Dissector: Adjustments for WS compatibility Made some changes to README Sample Dissection enabled for Wireshark 1.x. Attempted to make compatible with the next release, 2.5/2.6, but it has an assertion error on start up. 1.10 and before segfaults. Tested successfully with 1.12, 2.0, 2.2, and 2.4 on Linux./"
,,0.1284,OpenDDS,Dissector: Various Smaller Tasks Completely Removed ws_proto_tree_add_text(). Mark Packet if a determinable error occurs during sample dissection./
,,0.4264,OpenDDS,"Merge pull request from iguessthislldo/wireshark_improvements Dissector Fixes for Fixed Type Support, Expert, and configure/dissctor: Skip over fixed types if we ignore them This was something I forgot to add to Fixed Type Support: If we are just getting the size of the payload or ACE is missing we should have the serializer skip over the fixed type data, otherwise the next field would start at the fixed type data instead (very much not good)./Merge pull request from iguessthislldo/wireshark_improvements dissector: Fixed Type Support and expert changes/dissector: default to base 10 for ITL for Fixed Also fixed array length in dissector./dissector: Fixed Type Support and expert changes Added support for dissection for OpenDDS fixed-point numbers which are converted to doubles for numerical functions. If ACE_CDR::Fixed is missing, a message will be displayed that this is so. Also started marking some packets with a warning instead of marking it as malformed. For example, when an individual field fails for some reason or non essential information is unavailable, like the dissector ITL file./Merge pull request from iguessthislldo/wireshark_improvements Dissector macOS support, configure script, fixed throw spec problem/dissector: Fixed macOS wide chars/strings This was fixed by specifying ""UTF-16LE"" instead of ""UTF-16"", which must be ""UTF-16BE"" on macOS iconv./Merge pull request from iguessthislldo/wireshark2 Wireshark 2 Dissector: Fixes for Windows and Scoreboard/Dissector: Changes for Scoreboard, and others Also: Print ITL files and types found Fixed Bug where every field was a struct/Dissector: %s %C ACE_DEBUG/Dissector: READ and error handling fix/Dissector: Adjustments for WS compatibility Made some changes to README Sample Dissection enabled for Wireshark 1.x. Attempted to make compatible with the next release, 2.5/2.6, but it has an assertion error on start up. 1.10 and before segfaults. Tested successfully with 1.12, 2.0, 2.2, and 2.4 on Linux./Dissector: Fixs for PR Addressing Adams inital comments, Codacy, the Merge Conflict and a few things I found along the way./Dissector: Various Smaller Tasks Completely Removed ws_proto_tree_add_text(). Mark Packet if a determinable error occurs during sample dissection./Dissector: Serializer Refactor: Compiles, but broken/Dissector: Namespace Resolution and Union Bug Added Sample_Base as a Parent Class to Sample_Field and Sample_Dissector. Sample_Base holds wireshark namespace and field for every context that its child class is used in. Tweaked Array and Sequence Labels and Namespace. For now using ""_e"" (for element) to access an element of the sequence or array. Removed namespace debug messages. Fixed bug in Union length calculation that caused String Key Test to hang on dissection./"
,,0.2911,OpenDDS,"dissector: default to base 10 for ITL for Fixed Also fixed array length in dissector./dissector: Fixed Type Support and expert changes Added support for dissection for OpenDDS fixed-point numbers which are converted to doubles for numerical functions. If ACE_CDR::Fixed is missing, a message will be displayed that this is so. Also started marking some packets with a warning instead of marking it as malformed. For example, when an individual field fails for some reason or non essential information is unavailable, like the dissector ITL file./Merge pull request from iguessthislldo/wireshark_improvements Dissector macOS support, configure script, fixed throw spec problem/Access Fixed Type Attributes/"
,,0.3236,OpenDDS,"Merge pull request from iguessthislldo/wireshark_improvements dissector: Fixed Type Support and expert changes/dissector: default to base 10 for ITL for Fixed Also fixed array length in dissector./dissector: Fixed Type Support and expert changes Added support for dissection for OpenDDS fixed-point numbers which are converted to doubles for numerical functions. If ACE_CDR::Fixed is missing, a message will be displayed that this is so. Also started marking some packets with a warning instead of marking it as malformed. For example, when an individual field fails for some reason or non essential information is unavailable, like the dissector ITL file./Dissector: Fixs for PR Addressing Adams inital comments, Codacy, the Merge Conflict and a few things I found along the way./"
,,0.0825,OpenDDS,Merge pull request from mitza-oci/master Filter Eval: improved error message/fixed an error message used when a filter string using MOD fails to parse/
,,0.1119,OpenDDS,Various Improvements to the Dissector Made small changes to make it more complaint with what Wireshark is expecting. Some Formatting fixes and more comments Fixed a malformed packet error where multiple samples causes a boundary error of some kind./
,,0.1557,OpenDDS,"Dissector: Refctr SD with RCH (Compiles but broken)/Dissector: Move Field Info into Field_Context Put the Wireshark field struct into Field_Context to be collected after the entire tree has been evaluated. Refactored almost all the code to account for this change, which consists of initializing the protocol tree in two passes. Dissectors now need to be able to be deleted if the first pass fails./dissector: formating fixes and comments/"
,,0.1726,OpenDDS,"Dissector: Refctr SD with RCH (Compiles but broken)/Dissector: Move Field Info into Field_Context Put the Wireshark field struct into Field_Context to be collected after the entire tree has been evaluated. Refactored almost all the code to account for this change, which consists of initializing the protocol tree in two passes. Dissectors now need to be able to be deleted if the first pass fails./Various Improvements to the Dissector Made small changes to make it more complaint with what Wireshark is expecting. Some Formatting fixes and more comments Fixed a malformed packet error where multiple samples causes a boundary error of some kind./"
,,0.1873,OpenDDS,"Dissector: Refctr SD with RCH (Compiles but broken)/Dissector: Move Field Info into Field_Context Put the Wireshark field struct into Field_Context to be collected after the entire tree has been evaluated. Refactored almost all the code to account for this change, which consists of initializing the protocol tree in two passes. Dissectors now need to be able to be deleted if the first pass fails./dissector: formating fixes and comments/Various Improvements to the Dissector Made small changes to make it more complaint with what Wireshark is expecting. Some Formatting fixes and more comments Fixed a malformed packet error where multiple samples causes a boundary error of some kind./"
,,0.1907,OpenDDS,"Dissector: Refctr SD with RCH (Compiles but broken)/Dissector: Move Field Info into Field_Context Put the Wireshark field struct into Field_Context to be collected after the entire tree has been evaluated. Refactored almost all the code to account for this change, which consists of initializing the protocol tree in two passes. Dissectors now need to be able to be deleted if the first pass fails./dissector: formating fixes and comments/Various Improvements to the Dissector Made small changes to make it more complaint with what Wireshark is expecting. Some Formatting fixes and more comments Fixed a malformed packet error where multiple samples causes a boundary error of some kind./"
,,0.0931,OpenDDS,"BIT Test: Fix prst_repo transport option/Merge pull request from iguessthislldo/bit Built In Topic Test Fixes/BIT Test: Small Error message correction/Added Explicit ""ERRORS"" to BIT Test monitor/"
,,0.0725,OpenDDS,BIT Test: Fix prst_repo transport option/Merge pull request from iguessthislldo/bit Built In Topic Test Fixes/
,,0.179,OpenDDS,"adding add_security_info() for builtins and fixing associtaion order, wrapping up 8.8.9.2 and 8.8.9.3 ... still need to handle exchange for builtins/creating preauth associate, fixing data reader / writer qos property issue/Security spec makes a breaking change to how GUIDs relate to VendorIds/another intermediate commit on the way towards 8.8.2, adds security fields to DiscoveredParticipant and fixes a few testing issues/"
,,0.0577,OpenDDS,Merge pull request from huangminghuang/deadlock-fix Deadlock fix/Fix deadlock issue/
,,0.1332,OpenDDS,bug fixes and improved logging for submessage crypto/Updated debug logging. Its expected that some participant announcements will not have security parameters (unsecured participants on the same domain)./fixed an error on older compilers/fixed more stuff/fixed stuff/
,,0.0689,OpenDDS,Continued debugging the auth handshake Fixed typo in DdsSecurityCore.idl/
,,0.1872,OpenDDS,"adding add_security_info() for builtins and fixing associtaion order, wrapping up 8.8.9.2 and 8.8.9.3 ... still need to handle exchange for builtins/creating preauth associate, fixing data reader / writer qos property issue/Security spec makes a breaking change to how GUIDs relate to VendorIds/another intermediate commit on the way towards 8.8.2, adds security fields to DiscoveredParticipant and fixes a few testing issues/"
,,0.1283,OpenDDS,"Security spec makes a breaking change to how GUIDs relate to VendorIds/another intermediate commit on the way towards 8.8.2, adds security fields to DiscoveredParticipant and fixes a few testing issues/moving Spdp token retrieval to constructor so we can set participant tokens in auth up front, error and logging cleanup/Fixed C++98 build error by removing delegate constructor/"
,,0.2327,OpenDDS,"fixed class name in logging/adding token exchange for secure builtins, minor bug fix with builtin handle caching, fixing error text in crypto and elsewhere/adding add_security_info() for builtins and fixing associtaion order, wrapping up 8.8.9.2 and 8.8.9.3 ... still need to handle exchange for builtins/a few fixes for writing participant volatile messages, but still not correct/fixing a few deadlock issues (Spdp and Sedp share their global lock... who knew?\) and fixing a participant repoid lookup for generating reader / writer handles/stateless message field fixes/creating preauth associate, fixing data reader / writer qos property issue/Security spec makes a breaking change to how GUIDs relate to VendorIds/another intermediate commit on the way towards 8.8.2, adds security fields to DiscoveredParticipant and fixes a few testing issues/Fixed compiler warnings/Setting length on PropertySeq to avoid illegal access exceptions/Added note that signal_liveliness functionality may change pending issue resolution/"
,,0.2804,OpenDDS,"Spdp: debug logging in match_authentication/updating stateless resend logic to avoid immediate resends/Adding a bit more debugging for auth attempts and timeouts, switching to use remove_discovered_participant() on timeout/Updated debug logging. Its expected that some participant announcements will not have security parameters (unsecured participants on the same domain)./Continued interop fixes/adding add_security_info() for builtins and fixing associtaion order, wrapping up 8.8.9.2 and 8.8.9.3 ... still need to handle exchange for builtins/a few fixes for writing participant volatile messages, but still not correct/fixing a few deadlock issues (Spdp and Sedp share their global lock... who knew?\) and fixing a participant repoid lookup for generating reader / writer handles/Continued debugging the auth handshake Fixed typo in DdsSecurityCore.idl/Debugging fixes for Authentication/stateless message field fixes/creating preauth associate, fixing data reader / writer qos property issue/Security spec makes a breaking change to how GUIDs relate to VendorIds/fixing error/debug message typos/Fixed compile bug impacting Fedora/another intermediate commit on the way towards 8.8.2, adds security fields to DiscoveredParticipant and fixes a few testing issues/adding back missing non-security path code, fixing one run_test.pl execute permissions/moving Spdp token retrieval to constructor so we can set participant tokens in auth up front, error and logging cleanup/Fixed C++98 build error by removing delegate constructor/"
,,0.1293,OpenDDS,Merge pull request from kpansky/FixFaceReadMessage Fix for readcondition leak in OpenDDS::FaceTSS::receive_message/Fix for readcondition leak in OpenDDS::FaceTSS::receive_message/
,,0.078,OpenDDS,DCPS_IR_Publication: Fix Debug Message GUID values/
,,0.0887,OpenDDS,Merge pull request from iguessthislldo/bit Built In Topic Test Fixes/DCPS_IR_Subscription.cpp: debug message was integer id based/
,,0.1039,OpenDDS,Merge pull request from iguessthislldo/wireshark_improvements Fix ws_common.h for Wireshark 1.2 and 1.3/ws_common.h: Fix order for WS 1.2/1.3/Dissector: Fix ws_tvb_get_string/
,,0.0648,OpenDDS,fixed error when built-in topics are disabled/
,,0.0681,OpenDDS,BIT Test: Simplify a debug message/
,,0.0672,OpenDDS,"fixing duplicate variable declaration and formatting issues from code review resolution changes/Initial implementation of 8.8.5 and rest of 8.8.6, changes to tests & script & dds log messages to allow for failure test/"
,,0.2901,OpenDDS,"Store Last Part. Id in Repo Persistence This change explicitly stores the int id of the last created participant in the repo persistence instead of inferring it from the participants stored in persistence with the highest value id. This avoids the situation where: 1. A repo with persistence is running. 2. A participant ""A"" enters and leaves while still being the most recently created participant. 3. The repo is shutdown and restarted, and loads the participants from persistence file. 4. A new participant ""B"" is created and gets the same GUID as participant ""A"" if events occur in a certain order./"
,,0.2929,OpenDDS,"Store Last Part. Id in Repo Persistence This change explicitly stores the int id of the last created participant in the repo persistence instead of inferring it from the participants stored in persistence with the highest value id. This avoids the situation where: 1. A repo with persistence is running. 2. A participant ""A"" enters and leaves while still being the most recently created participant. 3. The repo is shutdown and restarted, and loads the participants from persistence file. 4. A new participant ""B"" is created and gets the same GUID as participant ""A"" if events occur in a certain order./"
,,0.2929,OpenDDS,"Store Last Part. Id in Repo Persistence This change explicitly stores the int id of the last created participant in the repo persistence instead of inferring it from the participants stored in persistence with the highest value id. This avoids the situation where: 1. A repo with persistence is running. 2. A participant ""A"" enters and leaves while still being the most recently created participant. 3. The repo is shutdown and restarted, and loads the participants from persistence file. 4. A new participant ""B"" is created and gets the same GUID as participant ""A"" if events occur in a certain order./"
,,0.2888,OpenDDS,"Store Last Part. Id in Repo Persistence This change explicitly stores the int id of the last created participant in the repo persistence instead of inferring it from the participants stored in persistence with the highest value id. This avoids the situation where: 1. A repo with persistence is running. 2. A participant ""A"" enters and leaves while still being the most recently created participant. 3. The repo is shutdown and restarted, and loads the participants from persistence file. 4. A new participant ""B"" is created and gets the same GUID as participant ""A"" if events occur in a certain order./"
,,0.2915,OpenDDS,"Store Last Part. Id in Repo Persistence This change explicitly stores the int id of the last created participant in the repo persistence instead of inferring it from the participants stored in persistence with the highest value id. This avoids the situation where: 1. A repo with persistence is running. 2. A participant ""A"" enters and leaves while still being the most recently created participant. 3. The repo is shutdown and restarted, and loads the participants from persistence file. 4. A new participant ""B"" is created and gets the same GUID as participant ""A"" if events occur in a certain order./"
,,0.2888,OpenDDS,"Store Last Part. Id in Repo Persistence This change explicitly stores the int id of the last created participant in the repo persistence instead of inferring it from the participants stored in persistence with the highest value id. This avoids the situation where: 1. A repo with persistence is running. 2. A participant ""A"" enters and leaves while still being the most recently created participant. 3. The repo is shutdown and restarted, and loads the participants from persistence file. 4. A new participant ""B"" is created and gets the same GUID as participant ""A"" if events occur in a certain order./"
,,0.2901,OpenDDS,"Store Last Part. Id in Repo Persistence This change explicitly stores the int id of the last created participant in the repo persistence instead of inferring it from the participants stored in persistence with the highest value id. This avoids the situation where: 1. A repo with persistence is running. 2. A participant ""A"" enters and leaves while still being the most recently created participant. 3. The repo is shutdown and restarted, and loads the participants from persistence file. 4. A new participant ""B"" is created and gets the same GUID as participant ""A"" if events occur in a certain order./"
,,0.1238,OpenDDS,Merge pull request from iguessthislldo/igtd/wireshark_improvements dissector: Check if Deserialization Failed/dissector: Check if Deserialization Failed/
,,0.11599999999999999,OpenDDS,Merge pull request from iguessthislldo/igtd/wireshark_improvements dissector: Check if Deserialization Failed/dissector: Check if Deserialization Failed/
,,0.2816,OpenDDS,"Merge pull request from simpsont-oci/master Fixes for Deadline Test timing issues/Merge pull request from simpsont-oci/master Fixes for Deadline Test timing issues/Merge pull request from simpsont-oci/master StaticDiscoveryTest cleanup (coverity, owernship profile)/Merge pull request from simpsont-oci/master StaticDiscoveryTest cleanup (coverity, owernship profile)/Adding transport exception catch to StaticDiscoveryTest to make coverity happy/Adding transport exception catch to StaticDiscoveryTest to make coverity happy/Merge pull request from simpsont-oci/master Adding durability / history depth to fix occasional StaticDiscoveryTest failures under load./Merge pull request from simpsont-oci/master Adding durability / history depth to fix occasional StaticDiscoveryTest failures under load./fixing issue with multi-process static discovery tests not knowing all writer names/fixing issue with multi-process static discovery tests not knowing all writer names/adding durability / history depth to fix occassional test failure under load. adding per-writer message tracking. adding support for binding generated transport configs even when using rtps discovery to help with debugging./adding durability / history depth to fix occassional test failure under load. adding per-writer message tracking. adding support for binding generated transport configs even when using rtps discovery to help with debugging./"
,,0.3297,OpenDDS,Merge pull request from simpsont-oci/master Adding durability / history depth to fix occasional StaticDiscoveryTest failures under load./Merge pull request from simpsont-oci/master Adding durability / history depth to fix occasional StaticDiscoveryTest failures under load./fixing issue with multi-process static discovery tests not knowing all writer names/fixing issue with multi-process static discovery tests not knowing all writer names/adding durability / history depth to fix occassional test failure under load. adding per-writer message tracking. adding support for binding generated transport configs even when using rtps discovery to help with debugging./adding durability / history depth to fix occassional test failure under load. adding per-writer message tracking. adding support for binding generated transport configs even when using rtps discovery to help with debugging./
,,0.3244,OpenDDS,Merge pull request from simpsont-oci/master Adding durability / history depth to fix occasional StaticDiscoveryTest failures under load./Merge pull request from simpsont-oci/master Adding durability / history depth to fix occasional StaticDiscoveryTest failures under load./fixing issue with multi-process static discovery tests not knowing all writer names/fixing issue with multi-process static discovery tests not knowing all writer names/adding durability / history depth to fix occassional test failure under load. adding per-writer message tracking. adding support for binding generated transport configs even when using rtps discovery to help with debugging./adding durability / history depth to fix occassional test failure under load. adding per-writer message tracking. adding support for binding generated transport configs even when using rtps discovery to help with debugging./
,,0.1551,OpenDDS,"FilterEvaluator.cpp: Prefix ++s for Codacy/FilterEvaluator.cpp: Prefix ++s for Codacy/Renamed ""Unsafe Fields"" to ""Non-Key Fields"" Also fixed a mistake made in the previous commit/Renamed ""Unsafe Fields"" to ""Non-Key Fields"" Also fixed a mistake made in the previous commit/"
,,0.1196,OpenDDS,wrapping watchdog operations with separate lock to avoid race conditions between incoming data and qos changes/wrapping watchdog operations with separate lock to avoid race conditions between incoming data and qos changes/
,,0.18600000000000003,OpenDDS,Merge pull request from simpsont-oci/master Adding durability / history depth to fix occasional StaticDiscoveryTest failures under load./Merge pull request from simpsont-oci/master Adding durability / history depth to fix occasional StaticDiscoveryTest failures under load./build fixes for the with-security configuration/
,,0.1549,OpenDDS,Merge pull request from simpsont-oci/master Fixes for Deadline Test timing issues/Merge pull request from simpsont-oci/master Fixes for Deadline Test timing issues/Merge pull request from simpsont-oci/master Adding durability / history depth to fix occasional StaticDiscoveryTest failures under load./Merge pull request from simpsont-oci/master Adding durability / history depth to fix occasional StaticDiscoveryTest failures under load./build fixes for the with-security configuration/
,,0.106,OpenDDS,"MetaStruct: Fix Compiler Issues Print ACE_UNUSED_ARG if there is Sample Info but no keys Move isDcpsKey() out side of ifndef NO_MULTI_TOPICS blocks/MetaStruct: Fix Compiler Issues Print ACE_UNUSED_ARG if there is Sample Info but no keys Move isDcpsKey() out side of ifndef NO_MULTI_TOPICS blocks/Renamed ""Unsafe Fields"" to ""Non-Key Fields"" Also fixed a mistake made in the previous commit/Renamed ""Unsafe Fields"" to ""Non-Key Fields"" Also fixed a mistake made in the previous commit/"
,,0.1045,OpenDDS,Fix Comments for Invalid Data Samples in QC/CFT/Fix Comments for Invalid Data Samples in QC/CFT/
,,0.1725,OpenDDS,Merge pull request from jmmorato/master Fixed set_qos method for not enabled DataWriters and DataReaders/Fixed set_qos method for not enabled DataWriters and DataReaders/Merge pull request from simpsont-oci/master Fixes for Deadline Test timing issues/Merge pull request from simpsont-oci/master Fixes for Deadline Test timing issues/removing commented out debug statements/removing commented out debug statements/wrapping watchdog operations with separate lock to avoid race conditions between incoming data and qos changes/wrapping watchdog operations with separate lock to avoid race conditions between incoming data and qos changes/Merge pull request from simpsont-oci/master Adding durability / history depth to fix occasional StaticDiscoveryTest failures under load./Merge pull request from simpsont-oci/master Adding durability / history depth to fix occasional StaticDiscoveryTest failures under load./fixing debug typo/fixing debug typo/
,,0.2082,OpenDDS,"Merge pull request from iguessthislldo/qcfilterfix Fix Occasional QueryCondition Test Failure/Merge pull request from iguessthislldo/qcfilterfix Fix Occasional QueryCondition Test Failure/Fix Comments for Invalid Data Samples in QC/CFT/Fix Comments for Invalid Data Samples in QC/CFT/Renamed ""Unsafe Fields"" to ""Non-Key Fields"" Also fixed a mistake made in the previous commit/Renamed ""Unsafe Fields"" to ""Non-Key Fields"" Also fixed a mistake made in the previous commit/"
,,0.0673,OpenDDS,build fixes for the with-security configuration/
,,0.115,OpenDDS,"send_builtin_crypto_tokens() should be checking for BUILTIN entity kinds to differentiate between readers and writers. Small debug logging cleanup to match create_and_send_datareader_tokens debug logging lines./Merge branch master into fix-local-acl-data/fixed warnings, style issues, OpenSSL 1.0.x compat/build fixes for the with-security configuration/fuzz script fixes/"
,,0.0717,OpenDDS,build fixes/build fixes for the with-security configuration/
,,0.1088,OpenDDS,"Merge pull request from iguessthislldo/qcfilterfix Fix Occasional QueryCondition Test Failure/Merge pull request from iguessthislldo/qcfilterfix Fix Occasional QueryCondition Test Failure/Merge branch master into fix-local-acl-data/fixed warnings, style issues, OpenSSL 1.0.x compat/build fixes for the with-security configuration/post-merge cleanup; fixed method names in logging statements/fixed a debug log message/"
,,0.1254,OpenDDS,"Renamed ""Unsafe Fields"" to ""Non-Key Fields"" Also fixed a mistake made in the previous commit/Renamed ""Unsafe Fields"" to ""Non-Key Fields"" Also fixed a mistake made in the previous commit/"
,,0.1151,OpenDDS,"Restore ""Normal"" Failure of Persistent IR BIT Test/Init IR BIT entities first So that they always have the same GUIDs acess InfoRepo Persistence. This does not solve the ongoing problem with the persistent repo BIT test as hoped though./"
,,0.3159,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./fixed unused variable warnings (cherry picked from commit 292bdf223b9786c1552f6312a15f6d957243a945)/"
,,0.312,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./fixed unused variable warnings (cherry picked from commit 292bdf223b9786c1552f6312a15f6d957243a945)/"
,,0.0883,OpenDDS,Merge pull request from objectcomputing/issue-994-cpp11-mapping2 Complex keys in the C++11 mapping (Issue 994)/Some fixes but not enough.../
,,0.1446,OpenDDS,Set IDL4 as Default and Fix IDL Files/opendds_idl: Fix KeyOnly< for Standalone Unions/Merge pull request from objectcomputing/issue-994-cpp11-mapping2 Complex keys in the C++11 mapping (Issue 994)/Fixes for nested structs/arrays in C++11 IDL/Fixed issues with compiling C++11 Messenger IDL; Added export file./Initial IDL-Generator changes migrated from issue-994-cpp11-mapping./
,,0.1693,OpenDDS,Set IDL4 as Default and Fix IDL Files/opendds_idl: Attempt to fix c++11 and annotations/Merge pull request from objectcomputing/issue-994-cpp11-mapping2 Complex keys in the C++11 mapping (Issue 994)/Fixes for nested structs/arrays in C++11 IDL/Fix issue with double-parens being generated for unions./Some fixes but not enough.../Fixed issues with compiling C++11 Messenger IDL; Added export file./Initial IDL-Generator changes migrated from issue-994-cpp11-mapping./
,,0.33399999999999996,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./"
,,0.32299999999999995,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./rtps_udp transport: updated list of errnos which are not treated as errors when sending to include EADDRNOTAVAIL which is seen on some platforms during (temporary) network outages/"
,,0.32299999999999995,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./"
,,0.2807,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./remove debugging output/Merge pull request from simpsont-oci/master Fixes for Deadline Test timing issues (cherry picked from commit 2f75334792a29f4338c5dfdaaddb6ea2777421c8) Conflicts: tests/DCPS/StaticDiscovery/StaticDiscoveryTest.cpp/"
,,0.3272,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./"
,,0.0871,OpenDDS,Shared Memory Transport Platform Macros Created common shared memory platform macros to reduce redundancy. Incorporated fix for older Android NDKs with newer APIs:
,,0.0904,OpenDDS,Shared Memory Transport Platform Macros Created common shared memory platform macros to reduce redundancy. Incorporated fix for older Android NDKs with newer APIs:
,,0.092,OpenDDS,Shared Memory Transport Platform Macros Created common shared memory platform macros to reduce redundancy. Incorporated fix for older Android NDKs with newer APIs:
,,0.3272,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./"
,,0.3244,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./"
,,0.3258,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./"
,,0.315,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./Merge pull request from jwillemsen/jwi-subcriptiontypos Fixed subcription typo/Fixed subcription typo * dds/DCPS/RTPS/Sedp.cpp: * dds/DCPS/transport/framework/DataLink.h: * dds/InfoRepo/DCPS_IR_Topic.h: * dds/InfoRepo/DCPS_IR_Topic_Description.cpp:/"
,,0.33399999999999996,OpenDDS,"Problem: RTPS does not work behind NATing firewalls Network address translation (NAT) breaks RTPS in at least two ways. Assume that two participants want to communicate via RTPS over the public Internet and both of them are behind a firewall/router that performs NAT. First, multicast cannot be used for discovery because the firewall will most likely not forward multicast traffic and even if it did, multicast is not supported on the public Internet. Second, the locators advertised by SPDP and SEDP are only valid on the local LAN due to NAT. Solution: Relay RTPS messages through a well-known server. The server uses a security property at the participant level to create virtual multicast groups. Whenever a participant in one of the groups sends a message, all of the other participants in the group will receive the message. See the README.rst for more details./"
,,0.1036,OpenDDS,"update verbosity of log statement whose static text contains ""notice"" to ""LM_NOTICE"" We find two patches between OpenDDS-2.2 and OpenDDS-2.3. These two patches both update the verbosity of log statements whose static text contains ""notice"" to LM_NOTICE. They taken place in dds/DCPS/Service_Participant.cpp. One of them is as follows: if (this->cf_.open_section(root, COMMON_SECTION_NAME, 0, sect) 0) { if (DCPS_debug_level > 0) { // This is not an error if the configuration file does not have // a common section. The code default configuration will be used. ACE_DEBUG((LM_DEBUG, ACE_TEXT(""(%P|%t)Service_Participant::load_common_configuration "") + ACE_DEBUG((LM_NOTICE, + ACE_TEXT(""(%P|%t) NOTICE: Service_Participant::load_common_configuration "") ACE_TEXT(""failed to open section %s\n""), COMMON_SECTION_NAME)); }/"
,,0.179,OpenDDS,"fixing dereference issue in v8 generation for arrays/fixes for v8 generation including support for arrays, adding rapidjson generator and support for disabling default generators and adding arbitrary includes to cpp files to command line (to support additional typesupport generation for types that are already included in core library)/type converter helper functions, fixes for copyFromV8 for structs / sequences, implement helper functions/fixing compile issues for node-opendds test, compiles now but untested and lacking support for writing unions/update idl v8 generation to use decimal strings for signed and unsigned 64-bit integers to avoid javascript number truncation for numbers above 2^53/"
,,0.1119,OpenDDS,Merge pull request from simpsont-oci/datalink_listener_and_sedp_queue_size_fix Fixing a deadlock issue encountered under heavy discovery load/fixing deadlock issue when datalink tries to call default listener while holding pub_sub_maps_lock_ mutex and encounters a full sedp task queue/
,,0.0731,OpenDDS,Merge pull request from iguessthislldo/igtd/security Security Fixes/Security: Fix Part QOS Update Not Sending/
,,0.0657,OpenDDS,Merge pull request from iguessthislldo/igtd/security Security Fixes/Security Debug Options/
,,0.0636,OpenDDS,Merge pull request from iguessthislldo/igtd/security Security Fixes/Security Debug Options/
,,0.094,OpenDDS,"Merge pull request from simpsont-oci/fix_messenger_leaks Security Registry and cleanup/removing cached pointer to ServiceParticipant reactor timer from AccessControlBuiltinImpl::RevokePermissionsTimer in order to avoid segfault during shutdown (canceling a timer thats already been canceled, since the reactor was destroyed)/"
,,0.0797,OpenDDS,Merge pull request from iguessthislldo/igtd/security Security Fixes/Security Debug Options/Fix log points from last commit/These just seem to break security/Fix QOS Conflicts on Security Endpoints/
,,0.0738,OpenDDS,Merge pull request from iguessthislldo/igtd/security Security Fixes/Fix Mistakes in Last Commit/Fix QOS Conflicts on Security Endpoints/
,,0.1073,OpenDDS,"Merge pull request from simpsont-oci/fix_messenger_leaks Security Registry and cleanup/Merge pull request from iguessthislldo/igtd/security Security Fixes/removing cached pointer to ServiceParticipant reactor timer from AccessControlBuiltinImpl::RevokePermissionsTimer in order to avoid segfault during shutdown (canceling a timer thats already been canceled, since the reactor was destroyed)/Add Missing Error Message/"
,,0.0724,OpenDDS,Merge pull request from iguessthislldo/igtd/security Security Fixes/Fix QOS Conflicts on Security Endpoints/
,,0.0636,OpenDDS,Merge pull request from iguessthislldo/igtd/security Security Fixes/Security Debug Options/
,,0.0781,OpenDDS,Merge pull request from simpsont-oci/unit_tests_and_valgrind_issues_cleanup Unit tests and valgrind issues cleanup/updating DisjointSequence::fill_bitmap_range to avoid looping over individual bits (use hardware shifts)/fixing several issues caught during valgrind run of scalability testing/
,,0.0616,OpenDDS,removing test debug output for safety profile/
,,0.1151,OpenDDS,Merge pull request from jrw972/coverity Coverity issues/Coverity 1481723/Merge pull request from simpsont-oci/security_registry_instance_fix Fix security registry instance creation during shutdown issues/migrate constant static strings to const char* to avoid state object cleanup order issues/
,,0.1017,OpenDDS,Merge pull request from jrw972/coverity Coverity issues/Coverity 1481723/
,,0.0719,OpenDDS,Merge pull request from mitza-oci/disjoint-range DisjointSequence fill_bitmap_range bug fix/DisjointSequence: fix bitmap range that ends at bit 31 See unit test change in parent commit/
,,0.5503,OpenDDS,"Merge pull request from jrw972/rtps-relay-coverity Fix coverity errors/Merge pull request from jrw972/rtps-relay-segfault Fix segfault from manually managing ACE_Message_Block/Fix compiler warnings/Relay addresses not updated when client changes servers Previously, the relay addresses were bundled with the reader and writer entries. Suppose there are two relays A and B and a client connects to A, switches to B, and then switches back to A before the participant lease duration. This causes A to write entries for the participant and then B will write entries for the participant. However, the client is associated with A but the topic says it should be associated with B. To solve this problem, remove the relay addresses from the reader and writer entries and create a new topic for participant to relay pairings (Responsible Relay). The relays maintain the Responsible Relay topic based on the traffic that they are observing. The Reader and Writer entries are just for matching. For this change, we had to remove the local/remote distinction in the QosIndex. This means that every relay must maintain a complete association table./Fix segfault from manually managing ACE_Message_Block/SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./RtpsRelay: Implement rapid association (#1317) * Implement rapid association * Install the RtpsRelay library * Fixes from review * Fix whitespace * Fix control flow * Fix Coverity/Merge pull request from mitza-oci/master RtpsRelay: fixed static, asan, Windows issues/RtpsRelay: fixed static, asan, Windows issues/"
,,0.5546,OpenDDS,"Merge pull request from jrw972/rtps-relay-coverity Fix coverity errors/Fix compiler warnings/Relay addresses not updated when client changes servers Previously, the relay addresses were bundled with the reader and writer entries. Suppose there are two relays A and B and a client connects to A, switches to B, and then switches back to A before the participant lease duration. This causes A to write entries for the participant and then B will write entries for the participant. However, the client is associated with A but the topic says it should be associated with B. To solve this problem, remove the relay addresses from the reader and writer entries and create a new topic for participant to relay pairings (Responsible Relay). The relays maintain the Responsible Relay topic based on the traffic that they are observing. The Reader and Writer entries are just for matching. For this change, we had to remove the local/remote distinction in the QosIndex. This means that every relay must maintain a complete association table./SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./Fixes from review/RtpsRelay: Implement rapid association (#1317) * Implement rapid association * Install the RtpsRelay library * Fixes from review * Fix whitespace * Fix control flow * Fix Coverity/Merge pull request from mitza-oci/master RtpsRelay: fixed static, asan, Windows issues/RtpsRelay: fixed static, asan, Windows issues/"
,,0.5379999999999999,OpenDDS,"Relay addresses not updated when client changes servers Previously, the relay addresses were bundled with the reader and writer entries. Suppose there are two relays A and B and a client connects to A, switches to B, and then switches back to A before the participant lease duration. This causes A to write entries for the participant and then B will write entries for the participant. However, the client is associated with A but the topic says it should be associated with B. To solve this problem, remove the relay addresses from the reader and writer entries and create a new topic for participant to relay pairings (Responsible Relay). The relays maintain the Responsible Relay topic based on the traffic that they are observing. The Reader and Writer entries are just for matching. For this change, we had to remove the local/remote distinction in the QosIndex. This means that every relay must maintain a complete association table./SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./RtpsRelay: Implement rapid association (#1317) * Implement rapid association * Install the RtpsRelay library * Fixes from review * Fix whitespace * Fix control flow * Fix Coverity/"
,,0.2488,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2552,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.0962,OpenDDS,migrate TransportClient impls_ to use WeakRcHandle to avoid segfault issues when impl is cleaned up/
,,0.2901,OpenDDS,"Merge pull request from simpsont-oci/dpshutdown_intermittent_deadlock_fixes fixing periodic dpshutdown deadlock issues/fixing codacy issue/attempting to fix dpshutdown build / run issues for expanded transports/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.252,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2504,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2536,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2536,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2536,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2552,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2532,OpenDDS,"More Fixes/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.0965,OpenDDS,Merge pull request from iguessthislldo/igtd/querycondition Fix for Occasional QueryCondition Test Failure/Fix for QueryCondition Test Delete DR Listeners in run_complex_filtering_test before cleanup to try to fix occasional failures on scoreboard./
,,0.2472,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.0719,OpenDDS,"Improving waiting mechanisms and debugging output in Thrasher test, adding additional test case/"
,,0.0683,OpenDDS,"Improving waiting mechanisms and debugging output in Thrasher test, adding additional test case/"
,,0.0887,OpenDDS,"fixing wchar compilation issues for thrasher test/Improving waiting mechanisms and debugging output in Thrasher test, adding additional test case/"
,,0.1102,OpenDDS,"Merge pull request from simpsont-oci/json_union_struct_deserialization_fix Fix JSON Deserialization For Unions Containing Structs, Sequences, Unions, Fixeds/"
,,0.2507,OpenDDS,"Merge pull request from simpsont-oci/json_union_struct_deserialization_fix Fix JSON Deserialization For Unions Containing Structs, Sequences, Unions, Fixeds/updating union member initialization for json deserialization to include union & fixed types/updating union member initialization for json deserialization to include union & fixed types/"
,,0.2595,OpenDDS,"Merge pull request from simpsont-oci/json_union_struct_deserialization_fix Fix JSON Deserialization For Unions Containing Structs, Sequences, Unions, Fixeds/updating union member initialization for json deserialization to include union & fixed types/updating union member initialization for json deserialization to include union & fixed types/"
,,0.066,OpenDDS,Merge pull request from iguessthislldo/igtd/1067_fixes Fixes for 1067/Changes for Coverity/
,,0.066,OpenDDS,Merge pull request from iguessthislldo/igtd/1067_fixes Fixes for 1067/Changes for Coverity/
,,0.5644,OpenDDS,"SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./Merge pull request from iguessthislldo/igtd/pr1274 Fixes for 1274/Fix Coverity issues/Fix Out of Order Declaration, Simplify/Fix Mistake in DiscoveryBase.h/Various Fixes/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2568,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.4141,OpenDDS,"Fixes after Review/Merge remote-tracking branch origin/master into dpshutdown_intermittent_deadlock_fixes/Merge pull request from jrw972/reactor-interceptor-wait ReactorInterceptor wait is broken/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./ReactorInterceptor wait is broken To support a straight enqueue while processing commands in the ReactorInterceptor, it was necessary to release the queue lock before each command was executed. This broke the existing semantics of wait because the following sequence was possible: Non-reactor thread: execute_or_enqueue (command is placed on the queue) Reactor thread: command is take off the queue but not executed yet Non-reactor thread: wait (returns immediately since the queue is empty) ... wait returned without the command being executed ... Solution: enqueue and execute_or_enqueue return a Command with a wait method. A thread can use this wait on a specify command to complete. The ReactorInterceptor signals the Command to unblock any waiting thread./"
,,0.2601,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2536,OpenDDS,"Fixes after Review/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2552,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2548,OpenDDS,"More Fixes/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2552,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.4095,OpenDDS,"Merge remote-tracking branch origin/master into dpshutdown_intermittent_deadlock_fixes/Merge pull request from jrw972/reactor-interceptor-wait ReactorInterceptor wait is broken/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./ReactorInterceptor wait is broken To support a straight enqueue while processing commands in the ReactorInterceptor, it was necessary to release the queue lock before each command was executed. This broke the existing semantics of wait because the following sequence was possible: Non-reactor thread: execute_or_enqueue (command is placed on the queue) Reactor thread: command is take off the queue but not executed yet Non-reactor thread: wait (returns immediately since the queue is empty) ... wait returned without the command being executed ... Solution: enqueue and execute_or_enqueue return a Command with a wait method. A thread can use this wait on a specify command to complete. The ReactorInterceptor signals the Command to unblock any waiting thread./"
,,0.2504,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2601,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2488,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.4221,OpenDDS,"Merge remote-tracking branch origin/master into dpshutdown_intermittent_deadlock_fixes/Merge pull request from jrw972/reactor-interceptor-wait ReactorInterceptor wait is broken/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./ReactorInterceptor wait is broken To support a straight enqueue while processing commands in the ReactorInterceptor, it was necessary to release the queue lock before each command was executed. This broke the existing semantics of wait because the following sequence was possible: Non-reactor thread: execute_or_enqueue (command is placed on the queue) Reactor thread: command is take off the queue but not executed yet Non-reactor thread: wait (returns immediately since the queue is empty) ... wait returned without the command being executed ... Solution: enqueue and execute_or_enqueue return a Command with a wait method. A thread can use this wait on a specify command to complete. The ReactorInterceptor signals the Command to unblock any waiting thread./"
,,0.2601,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.3997,OpenDDS,"Fixes after Review/Merge remote-tracking branch origin/master into dpshutdown_intermittent_deadlock_fixes/Merge pull request from jrw972/reactor-interceptor-wait ReactorInterceptor wait is broken/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./ReactorInterceptor wait is broken To support a straight enqueue while processing commands in the ReactorInterceptor, it was necessary to release the queue lock before each command was executed. This broke the existing semantics of wait because the following sequence was possible: Non-reactor thread: execute_or_enqueue (command is placed on the queue) Reactor thread: command is take off the queue but not executed yet Non-reactor thread: wait (returns immediately since the queue is empty) ... wait returned without the command being executed ... Solution: enqueue and execute_or_enqueue return a Command with a wait method. A thread can use this wait on a specify command to complete. The ReactorInterceptor signals the Command to unblock any waiting thread./Merge pull request from simpsont-oci/fixes_for_rtps_discovery_with_tcp_transport Fixes for RTPS discovery with TCP transport/"
,,0.1179,OpenDDS,"resolving some locking order issues causing deadlock during association, reducing lock granularity for TransportImpl::pending_connections_/"
,,0.1581,OpenDDS,Merge pull request from simpsont-oci/dpshutdown_intermittent_deadlock_fixes fixing periodic dpshutdown deadlock issues/fixing periodic dpshutdown deadlock issues from holding TransportInst::lock_ during shutdown/migrate TransportClient impls_ to use WeakRcHandle to avoid segfault issues when impl is cleaned up/
,,0.1632,OpenDDS,Merge pull request from simpsont-oci/dpshutdown_intermittent_deadlock_fixes fixing periodic dpshutdown deadlock issues/fixing periodic dpshutdown deadlock issues from holding TransportInst::lock_ during shutdown/migrate TransportClient impls_ to use WeakRcHandle to avoid segfault issues when impl is cleaned up/
,,0.4153,OpenDDS,"Merge remote-tracking branch origin/master into dpshutdown_intermittent_deadlock_fixes/Merge pull request from jrw972/reactor-interceptor-wait ReactorInterceptor wait is broken/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./ReactorInterceptor wait is broken To support a straight enqueue while processing commands in the ReactorInterceptor, it was necessary to release the queue lock before each command was executed. This broke the existing semantics of wait because the following sequence was possible: Non-reactor thread: execute_or_enqueue (command is placed on the queue) Reactor thread: command is take off the queue but not executed yet Non-reactor thread: wait (returns immediately since the queue is empty) ... wait returned without the command being executed ... Solution: enqueue and execute_or_enqueue return a Command with a wait method. A thread can use this wait on a specify command to complete. The ReactorInterceptor signals the Command to unblock any waiting thread./migrate TransportClient impls_ to use WeakRcHandle to avoid segfault issues when impl is cleaned up/"
,,0.2504,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.4175,OpenDDS,"Merge remote-tracking branch origin/master into dpshutdown_intermittent_deadlock_fixes/Merge pull request from jrw972/reactor-interceptor-wait ReactorInterceptor wait is broken/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./ReactorInterceptor wait is broken To support a straight enqueue while processing commands in the ReactorInterceptor, it was necessary to release the queue lock before each command was executed. This broke the existing semantics of wait because the following sequence was possible: Non-reactor thread: execute_or_enqueue (command is placed on the queue) Reactor thread: command is take off the queue but not executed yet Non-reactor thread: wait (returns immediately since the queue is empty) ... wait returned without the command being executed ... Solution: enqueue and execute_or_enqueue return a Command with a wait method. A thread can use this wait on a specify command to complete. The ReactorInterceptor signals the Command to unblock any waiting thread./migrate TransportClient impls_ to use WeakRcHandle to avoid segfault issues when impl is cleaned up/"
,,0.2467,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./Merge pull request from simpsont-oci/fixes_for_rtps_discovery_with_tcp_transport Fixes for RTPS discovery with TCP transport/"
,,0.1121,OpenDDS,"resolving some locking order issues causing deadlock during association, reducing lock granularity for TransportImpl::pending_connections_/"
,,0.252,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.4072,OpenDDS,"More Fixes/Merge remote-tracking branch origin/master into dpshutdown_intermittent_deadlock_fixes/Merge pull request from jrw972/reactor-interceptor-wait ReactorInterceptor wait is broken/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./ReactorInterceptor wait is broken To support a straight enqueue while processing commands in the ReactorInterceptor, it was necessary to release the queue lock before each command was executed. This broke the existing semantics of wait because the following sequence was possible: Non-reactor thread: execute_or_enqueue (command is placed on the queue) Reactor thread: command is take off the queue but not executed yet Non-reactor thread: wait (returns immediately since the queue is empty) ... wait returned without the command being executed ... Solution: enqueue and execute_or_enqueue return a Command with a wait method. A thread can use this wait on a specify command to complete. The ReactorInterceptor signals the Command to unblock any waiting thread./"
,,0.5944,OpenDDS,"SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./Merge pull request from simpsont-oci/resolve_setqospartition_errors Resolve SetQosPartition Errors/Fixes after Review/Merge remote-tracking branch origin/master into dpshutdown_intermittent_deadlock_fixes/Merge pull request from jrw972/reactor-interceptor-wait ReactorInterceptor wait is broken/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./ReactorInterceptor wait is broken To support a straight enqueue while processing commands in the ReactorInterceptor, it was necessary to release the queue lock before each command was executed. This broke the existing semantics of wait because the following sequence was possible: Non-reactor thread: execute_or_enqueue (command is placed on the queue) Reactor thread: command is take off the queue but not executed yet Non-reactor thread: wait (returns immediately since the queue is empty) ... wait returned without the command being executed ... Solution: enqueue and execute_or_enqueue return a Command with a wait method. A thread can use this wait on a specify command to complete. The ReactorInterceptor signals the Command to unblock any waiting thread./Fix RtpsUdpDataLink.cpp/release locks before calling tqe->data_delivered to avoid opposing lock order deadlock during shutdown/remove_sample/Merge pull request from simpsont-oci/fixes_for_rtps_discovery_with_tcp_transport Fixes for RTPS discovery with TCP transport/"
,,0.1335,OpenDDS,"fixing wchar compilation issue in RtpsUdpReceiveStrategy, there appear to be other mpc project issues but not related to rtps or thrasher so ignoring for now/Merge pull request from mitza-oci/master Fixed test failures and Coverity issues from DDS Security full-message protection/Fixed Coverity issues from DDS Security full-message protection/"
,,0.16899999999999998,OpenDDS,"resolving some locking order issues causing deadlock during association, reducing lock granularity for TransportImpl::pending_connections_/Merge pull request from simpsont-oci/dpshutdown_intermittent_deadlock_fixes fixing periodic dpshutdown deadlock issues/fixing periodic dpshutdown deadlock issues from holding TransportInst::lock_ during shutdown/Merge pull request from simpsont-oci/fixes_for_rtps_discovery_with_tcp_transport Fixes for RTPS discovery with TCP transport/"
,,0.5696,OpenDDS,"SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.114,OpenDDS,"resolving some locking order issues causing deadlock during association, reducing lock granularity for TransportImpl::pending_connections_/"
,,0.4836,OpenDDS,"attempting to fix thrasher test post-assoc data / heartbeat race condition by storing assoc hb.last as start of nackable range for non-durable readers/SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./Merge pull request from simpsont-oci/resolve_setqospartition_errors Resolve SetQosPartition Errors/Merge pull request from simpsont-oci/fix_rtps_customize_queue_element_asan_issue Fix gcc asan issue in RtpsUdpDatalinks customize_queue_element/adding locking around RtpsWriter::elems_not_acked_ to prevent segfault issue/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./Merge pull request from simpsont-oci/fix_coverity_1138_issue removing dead code found by coverity scan after PR 1138 was merged/Fix RtpsUdpDataLink.cpp/removing dead code found by coverity scan after PR 1138 was merged/adding info_dst prefix to non-final pre-association heartbeats (now distinct from normal hb)/release locks before calling tqe->data_delivered to avoid opposing lock order deadlock during shutdown/remove_sample/Merge pull request from simpsont-oci/fixes_for_rtps_discovery_with_tcp_transport Fixes for RTPS discovery with TCP transport/"
,,0.5831,OpenDDS,"SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./Merge pull request from jrw972/ice-locking Fix deadlock caused by lock protecting stun_server_address/Fix deadlock caused by lock protecting stun_servr_address/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2915,OpenDDS,"resolving some locking order issues causing deadlock during association, reducing lock granularity for TransportImpl::pending_connections_/Fixes after Review/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./Merge pull request from simpsont-oci/fixes_for_rtps_discovery_with_tcp_transport Fixes for RTPS discovery with TCP transport/"
,,0.1067,OpenDDS,"resolving some locking order issues causing deadlock during association, reducing lock granularity for TransportImpl::pending_connections_/Merge pull request from simpsont-oci/fixes_for_rtps_discovery_with_tcp_transport Fixes for RTPS discovery with TCP transport/"
,,0.2469,OpenDDS,"resolving merge compile issues, shifting ACE_Time_Value usage to TimeDuration where possible in TcpConnection/resolving PR comments, fixing valgrind issue/Fixes after Review/Merge pull request from simpsont-oci/dpshutdown_intermittent_deadlock_fixes fixing periodic dpshutdown deadlock issues/removing thread_id check (seems to break reconnect test), adding error handling reference removal, fixing whitespace issue/More Various Fixes/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./Merge pull request from simpsont-oci/fixes_for_rtps_discovery_with_tcp_transport Fixes for RTPS discovery with TCP transport/"
,,0.252,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.26,OpenDDS,"resolving merge compile issues, shifting ACE_Time_Value usage to TimeDuration where possible in TcpConnection/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.565,OpenDDS,"SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./Fixes after Review/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2568,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.1033,OpenDDS,"migrate away from recursive mutex, reinstate const because we can, fix goofy variable declaration alignment/attempting to fix corruption in DomainParticipantFactoryImpl::delete_participant during call to Util::remove on participants_ by increasing scope of locks for participants_protector_/"
,,0.2548,OpenDDS,"Various Fixes/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2901,OpenDDS,"Merge pull request from jrw972/security-exception Add security exception when participant is not authorized for a domain/Add security exception when participant is not authorized for a domain/Various Fixes/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2536,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2552,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.42100000000000004,OpenDDS,"Merge remote-tracking branch origin/master into dpshutdown_intermittent_deadlock_fixes/Merge pull request from jrw972/reactor-interceptor-wait ReactorInterceptor wait is broken/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./ReactorInterceptor wait is broken To support a straight enqueue while processing commands in the ReactorInterceptor, it was necessary to release the queue lock before each command was executed. This broke the existing semantics of wait because the following sequence was possible: Non-reactor thread: execute_or_enqueue (command is placed on the queue) Reactor thread: command is take off the queue but not executed yet Non-reactor thread: wait (returns immediately since the queue is empty) ... wait returned without the command being executed ... Solution: enqueue and execute_or_enqueue return a Command with a wait method. A thread can use this wait on a specify command to complete. The ReactorInterceptor signals the Command to unblock any waiting thread./"
,,0.552,OpenDDS,"SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./Merge pull request from simpsont-oci/initialize_result_command_result_value fixing coverity issue of uninitialized result value in result command/fixing coverity issue of uninitialized result value in result command/resolving PR comments, fixing valgrind issue/Merge remote-tracking branch origin/master into dpshutdown_intermittent_deadlock_fixes/Merge pull request from mitza-oci/master fixed RcHandle reference count from PR#1262/fixed RcHandle reference count from PR#1262/Merge pull request from jrw972/reactor-interceptor-wait ReactorInterceptor wait is broken/ReactorInterceptor wait is broken To support a straight enqueue while processing commands in the ReactorInterceptor, it was necessary to release the queue lock before each command was executed. This broke the existing semantics of wait because the following sequence was possible: Non-reactor thread: execute_or_enqueue (command is placed on the queue) Reactor thread: command is take off the queue but not executed yet Non-reactor thread: wait (returns immediately since the queue is empty) ... wait returned without the command being executed ... Solution: enqueue and execute_or_enqueue return a Command with a wait method. A thread can use this wait on a specify command to complete. The ReactorInterceptor signals the Command to unblock any waiting thread./Merge pull request from simpsont-oci/fixes_for_rtps_discovery_with_tcp_transport Fixes for RTPS discovery with TCP transport/"
,,0.252,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2633,OpenDDS,"Fix TimeBasedFilter Test/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2548,OpenDDS,"Fixes after Review/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./fixed typo/"
,,0.2585,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.0702,OpenDDS,Merge pull request from iguessthislldo/igtd/querycondition Fix for Occasional QueryCondition Test Failure/
,,0.2552,OpenDDS,"More Fixes/Fixes after Review/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2536,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2611,OpenDDS,"More Fixes/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.4164,OpenDDS,"Fix TimeBasedFilter Test/Fixes after Review/Merge remote-tracking branch origin/master into dpshutdown_intermittent_deadlock_fixes/Merge pull request from jrw972/reactor-interceptor-wait ReactorInterceptor wait is broken/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./ReactorInterceptor wait is broken To support a straight enqueue while processing commands in the ReactorInterceptor, it was necessary to release the queue lock before each command was executed. This broke the existing semantics of wait because the following sequence was possible: Non-reactor thread: execute_or_enqueue (command is placed on the queue) Reactor thread: command is take off the queue but not executed yet Non-reactor thread: wait (returns immediately since the queue is empty) ... wait returned without the command being executed ... Solution: enqueue and execute_or_enqueue return a Command with a wait method. A thread can use this wait on a specify command to complete. The ReactorInterceptor signals the Command to unblock any waiting thread./"
,,0.3958,OpenDDS,"Fixes after Review/Merge remote-tracking branch origin/master into dpshutdown_intermittent_deadlock_fixes/Merge pull request from jrw972/reactor-interceptor-wait ReactorInterceptor wait is broken/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./ReactorInterceptor wait is broken To support a straight enqueue while processing commands in the ReactorInterceptor, it was necessary to release the queue lock before each command was executed. This broke the existing semantics of wait because the following sequence was possible: Non-reactor thread: execute_or_enqueue (command is placed on the queue) Reactor thread: command is take off the queue but not executed yet Non-reactor thread: wait (returns immediately since the queue is empty) ... wait returned without the command being executed ... Solution: enqueue and execute_or_enqueue return a Command with a wait method. A thread can use this wait on a specify command to complete. The ReactorInterceptor signals the Command to unblock any waiting thread./"
,,0.2411,OpenDDS,"Merge pull request from simpsont-oci/fix_intermittent_shared_transport_shmem_test_failures Fix Intermittent SharedTransport Shmem Test Failures/Merge pull request from simpsont-oci/dpshutdown_intermittent_deadlock_fixes fixing periodic dpshutdown deadlock issues/downgrading ReactorInterceptor null reactor init error to a warning to allow for inline construction when reactor task hasnt been initialized yet/Merge remote-tracking branch origin/master into dpshutdown_intermittent_deadlock_fixes/Merge pull request from jrw972/reactor-interceptor-wait ReactorInterceptor wait is broken/ReactorInterceptor wait is broken To support a straight enqueue while processing commands in the ReactorInterceptor, it was necessary to release the queue lock before each command was executed. This broke the existing semantics of wait because the following sequence was possible: Non-reactor thread: execute_or_enqueue (command is placed on the queue) Reactor thread: command is take off the queue but not executed yet Non-reactor thread: wait (returns immediately since the queue is empty) ... wait returned without the command being executed ... Solution: enqueue and execute_or_enqueue return a Command with a wait method. A thread can use this wait on a specify command to complete. The ReactorInterceptor signals the Command to unblock any waiting thread./Merge pull request from simpsont-oci/fixes_for_rtps_discovery_with_tcp_transport Fixes for RTPS discovery with TCP transport/"
,,0.4152,OpenDDS,"Merge remote-tracking branch origin/master into dpshutdown_intermittent_deadlock_fixes/Merge pull request from jrw972/reactor-interceptor-wait ReactorInterceptor wait is broken/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./ReactorInterceptor wait is broken To support a straight enqueue while processing commands in the ReactorInterceptor, it was necessary to release the queue lock before each command was executed. This broke the existing semantics of wait because the following sequence was possible: Non-reactor thread: execute_or_enqueue (command is placed on the queue) Reactor thread: command is take off the queue but not executed yet Non-reactor thread: wait (returns immediately since the queue is empty) ... wait returned without the command being executed ... Solution: enqueue and execute_or_enqueue return a Command with a wait method. A thread can use this wait on a specify command to complete. The ReactorInterceptor signals the Command to unblock any waiting thread./"
,,0.252,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.5196,OpenDDS,"SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./Merge pull request from simpsont-oci/dpshutdown_intermittent_deadlock_fixes fixing periodic dpshutdown deadlock issues/moving Sedp::Writer call of association_complete to enqueued ReactorInterceptor call to avoid deadlock/"
,,0.562,OpenDDS,"fixed compile errors/SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./RtpsRelay: Implement rapid association (#1317) * Implement rapid association * Install the RtpsRelay library * Fixes from review * Fix whitespace * Fix control flow * Fix Coverity/Fix Out of Order Declaration, Simplify/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.5857,OpenDDS,"SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./RtpsRelay: Implement rapid association (#1317) * Implement rapid association * Install the RtpsRelay library * Fixes from review * Fix whitespace * Fix control flow * Fix Coverity/Fix Out of Order Declaration, Simplify/Merge pull request from simpsont-oci/dpshutdown_intermittent_deadlock_fixes fixing periodic dpshutdown deadlock issues/moving Sedp::Writer call of association_complete to enqueued ReactorInterceptor call to avoid deadlock/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.5752,OpenDDS,"SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./Fixes from review/RtpsRelay: Implement rapid association (#1317) * Implement rapid association * Install the RtpsRelay library * Fixes from review * Fix whitespace * Fix control flow * Fix Coverity/Fix Out of Order Declaration, Simplify/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2554,OpenDDS,"Fixes after Review/Various Fixes/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2488,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2504,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2568,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.4084,OpenDDS,"Merge remote-tracking branch origin/master into dpshutdown_intermittent_deadlock_fixes/Merge pull request from jrw972/reactor-interceptor-wait ReactorInterceptor wait is broken/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./ReactorInterceptor wait is broken To support a straight enqueue while processing commands in the ReactorInterceptor, it was necessary to release the queue lock before each command was executed. This broke the existing semantics of wait because the following sequence was possible: Non-reactor thread: execute_or_enqueue (command is placed on the queue) Reactor thread: command is take off the queue but not executed yet Non-reactor thread: wait (returns immediately since the queue is empty) ... wait returned without the command being executed ... Solution: enqueue and execute_or_enqueue return a Command with a wait method. A thread can use this wait on a specify command to complete. The ReactorInterceptor signals the Command to unblock any waiting thread./"
,,0.2585,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2504,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2572,OpenDDS,"Merge pull request from jrw972/ice-fixes Fix ICE bugs/Fix ICE bugs * Force loading of default plugins if necessary * Fix deserialization bug * Include ICE Agent Info in SPDP/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.5819,OpenDDS,"SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./Fixes from review/Merge pull request from jrw972/ice-locking Fix deadlock caused by lock protecting stun_server_address/Fix deadlock caused by lock protecting stun_servr_address/Merge pull request from mitza-oci/master Fixed test failures and Coverity issues from DDS Security full-message protection/Merge pull request from simpsont-oci/dpshutdown_intermittent_deadlock_fixes fixing periodic dpshutdown deadlock issues/moving Sedp::Writer call of association_complete to enqueued ReactorInterceptor call to avoid deadlock/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.5541,OpenDDS,"Merge pull request from jrw972/rtps-relay-coverity Fix coverity errors/Fix compiler warnings/Fix coverity errors/SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./Fixes from review/RtpsRelay: Implement rapid association (#1317) * Implement rapid association * Install the RtpsRelay library * Fixes from review * Fix whitespace * Fix control flow * Fix Coverity/Merge pull request from jrw972/ice-fixes Fix ICE bugs/Fix ICE bugs * Force loading of default plugins if necessary * Fix deserialization bug * Include ICE Agent Info in SPDP/Merge pull request from iguessthislldo/igtd/pr1274 Fixes for 1274/Fix Coverity issues/Merge pull request from mitza-oci/master RtpsRelay: fixed static, asan, Windows issues/RtpsRelay: fixed static, asan, Windows issues/Merge pull request from mitza-oci/master Fixed test failures and Coverity issues from DDS Security full-message protection/Fixed Coverity issues from DDS Security full-message protection/Fix Out of Order Declaration, Simplify/One whitespace error/Fixes after Review/Merge pull request from simpsont-oci/dpshutdown_intermittent_deadlock_fixes fixing periodic dpshutdown deadlock issues/moving Sedp::Writer call of association_complete to enqueued ReactorInterceptor call to avoid deadlock/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.1389,OpenDDS,Fixes from review/Merge pull request from mitza-oci/master Fixed test failures and Coverity issues from DDS Security full-message protection/Fixed Coverity issues from DDS Security full-message protection/
,,0.2308,OpenDDS,"Fixed style issues/Fixed style issues/Bug fix + test app for: ""create_new_topic(), called near the end of create_topic_i(), can return nullptr. This needs to be checked before attempting to enable() it.""/Fixes after Review/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.3999,OpenDDS,"Merge remote-tracking branch origin/master into dpshutdown_intermittent_deadlock_fixes/Merge pull request from jrw972/reactor-interceptor-wait ReactorInterceptor wait is broken/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./ReactorInterceptor wait is broken To support a straight enqueue while processing commands in the ReactorInterceptor, it was necessary to release the queue lock before each command was executed. This broke the existing semantics of wait because the following sequence was possible: Non-reactor thread: execute_or_enqueue (command is placed on the queue) Reactor thread: command is take off the queue but not executed yet Non-reactor thread: wait (returns immediately since the queue is empty) ... wait returned without the command being executed ... Solution: enqueue and execute_or_enqueue return a Command with a wait method. A thread can use this wait on a specify command to complete. The ReactorInterceptor signals the Command to unblock any waiting thread./switching InstanceState::reader_ from DataReaderImpl* to WeakRcHandle<DataReaderImpl> to avoid invalid reads when checking ownership, etc/fixed whitespace/fixed inline build/"
,,0.2944,OpenDDS,"Service_Participant.cpp: Style Fixes/Merge pull request from simpsont-oci/fix_static_string_invalid_use_after_free Fixing gccasan issue for invalid use after free/fixing gccasan issue for invalid use after free of global const ACE_CString object by changing to const char[]/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2552,OpenDDS,"Fixes after Review/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2628,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./switching InstanceState::reader_ from DataReaderImpl* to WeakRcHandle<DataReaderImpl> to avoid invalid reads when checking ownership, etc/"
,,0.2504,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.511,OpenDDS,"SPDP improvements for the RtpsRelay * Add INFO_DST to SPDP messages that are sent in response to discovered a new participant. This allows the RtpsRelay to only forward the SPDP message to the intended destination. * Both SPDP and RTPS transports send a beacon to the RtpsRelay. The period of the beacon is configurable. The beacon is sent unconditionally. * Polling was converted to events in SPDP to handle authentication timeouts and resends. * Three helper classes: * JobQueue allows a thread to post a job on a Reactor. * PeriodicTask a wrapper for periodic tasks. * SporadicTask a wrapper for sporadic (one-shot) tasks. * ReactorTask has an implicit ReactorInterceptor. As an aside, the JobQueue was motivated by a deadlock where a ReactorInterceptor command acquired a lock so that a subsequenct execute_or_enqueue was not safe because the same lock was already held. This suggests that there are probably other situations where ReactorInterceptor commands are acquiring locks which may result in the same problem. I recommend the following: 1. Dont use the ReactorInterceptor as a general-purpose job queue. Use JobQueue. 2. Limit ReactorInterceptor commands to dealing with the reactor and perhaps a small number of control variables. Furthermore, all state updates should be performed by ReactorInterceptor commands. This implicitly provides atomicity. PeriodicTask and SporadicTask are examples of this. 3. Avoid waiting for ReactorInterceptor commands. Specifically, it is common to wait for a timer id so that it can be cancelled later. An alternative approach would be to writer a helper and use multiple instances so the timer id is not necessary. Alternatively, the helper can maintain a list of timer ids. In either case, writing a helper is good because it separates out the complexity of deadling with the reactor./Fixes after Review/"
,,0.2552,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2665,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2552,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2595,OpenDDS,"Various Fixes/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.0833,OpenDDS,Merge pull request from jrw972/rtps-relay-coverity Fix coverity errors/Fix coverity errors/
,,0.2504,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2496,OpenDDS,"Fix TimePoint Default Constructor/Fixes after Review/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2601,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2552,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.0981,OpenDDS,"migrate away from recursive mutex, reinstate const because we can, fix goofy variable declaration alignment/attempting to fix corruption in DomainParticipantFactoryImpl::delete_participant during call to Util::remove on participants_ by increasing scope of locks for participants_protector_/"
,,0.2536,OpenDDS,"Fixes after Review/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.252,OpenDDS,"Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.2536,OpenDDS,"Fixes after Review/Refactor with Stricter Time Types Types representing monotonic clock time, system clock time and time duration. Refactored the core libraries to use them over ACE_Time_Value wherever possible. Tests were left alone for the most part unless they interacted with the converted values in the core libraries. Also fixes for the previous monotonic commits./"
,,0.1878,OpenDDS,Fix compiler warnings in RtpsRelay/Merge pull request from jrw972/rtps-relay-compiler-warnings Fix compiler warnings related to RtpsRelay/Fix compiler warnings related to RtpsRelay/Inadequate logging for handle_input Solution: Print the error message that causes a read with negative bytes./addressed review comments and CI build issues with namespaces./Fix constants and serialization/Avoid unnecessary conversions between strings and addresses/
,,0.1523,OpenDDS,Merge pull request from jrw972/compiler-warnings-rtps-relay Fix compiler warnings around RtpsRelay/Avoid static cast/Fix compiler warnings around RtpsRelay/
,,0.1913,OpenDDS,Merge pull request from jrw972/rtps-relay-compiler-warnings Fix compiler warnings related to RtpsRelay/Fix compiler warnings related to RtpsRelay/Merge pull request from jrw972/governance-typo Fix typo in RtpsRelay arguments/Fix typo in RtpsRelay arguments/Avoid unnecessary conversions between strings and addresses/
,,0.18100000000000002,OpenDDS,Fix compiler warnings in RtpsRelay/Merge pull request from jrw972/compiler-warnings-rtps-relay Fix compiler warnings around RtpsRelay/Fix compiler warnings around RtpsRelay/
,,0.1218,OpenDDS,Fix compiler warnings in RtpsRelay/Avoid unnecessary conversions between strings and addresses/
,,0.1694,OpenDDS,Merge pull request from jrw972/rtps-relay-compiler-warnings Fix compiler warnings related to RtpsRelay/Fix compiler warnings related to RtpsRelay/Avoid unnecessary conversions between strings and addresses/
,,0.18100000000000002,OpenDDS,Fix compiler warnings in RtpsRelay/Merge pull request from jrw972/compiler-warnings-rtps-relay Fix compiler warnings around RtpsRelay/Fix compiler warnings around RtpsRelay/
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.098,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.098,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.1458,OpenDDS,Merge pull request from jrw972/compiler-warnings-rtps-relay Fix compiler warnings around RtpsRelay/Fix compiler warnings around RtpsRelay/
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.1252,OpenDDS,"Merge pull request from simpsont-oci/rtps_coverity_issues Fixing Minor RTPS Coverity / Test Issues/fixing coverity issues/Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.0798,OpenDDS,Merge pull request from iguessthislldo/igtd/issue1336 Fix CMake Library Scope Issue
,,0.0859,OpenDDS,Merge pull request from iguessthislldo/igtd/issue1336 Fix CMake Library Scope Issue
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.098,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.0923,OpenDDS,idl2jni: fix missing include/Fix slash issue in idl2jni Fix issue that was putting IDL results in TAO_ROOT/tao instead of the current directory. Also do some minor work in idl2jni and opendds_idl./
,,0.0731,OpenDDS,Fix slash issue in idl2jni Fix issue that was putting IDL results in TAO_ROOT/tao instead of the current directory. Also do some minor work in idl2jni and opendds_idl./
,,0.0919,OpenDDS,Merge pull request from iguessthislldo/igtd/cmake_ace_bin Fix Issues with Installed OpenDDS/Actually Fix opendds_idl/Fix Segfault in opendds_idl When DDS_ROOT isnt Defined/
,,0.1103,OpenDDS,Fix slash issue in idl2jni Fix issue that was putting IDL results in TAO_ROOT/tao instead of the current directory. Also do some minor work in idl2jni and opendds_idl./Merge pull request from iguessthislldo/igtd/cmake_ace_bin Fix Issues with Installed OpenDDS/Actually Fix opendds_idl/
,,0.1014,OpenDDS,"Change annotation terminology Use the term ""topic type annotations"" instead of ""topic annotations"" to try to avoid giving the impression that only the annotation should be used./"
,,0.0824,OpenDDS,Fix slash issue in idl2jni Fix issue that was putting IDL results in TAO_ROOT/tao instead of the current directory. Also do some minor work in idl2jni and opendds_idl./
,,0.0915,OpenDDS,Merge pull request from kuznetsovmoci/Monitor_RORWAR_PULL_bug1 Fixed Monitor Coverity error/Fixed Monitor Coverity error/Debugging Messenger test; Cleanup/Fixing FORWARD_NULL issue/
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.0618,OpenDDS,added intersect_sorted_ranges and intersect; modified debug codeî/
,,0.09699999999999999,OpenDDS,Avoid ACE_SYNCH_MUTEX in the OpenDDS_Rtps library. Use of a preprocessor macro isnt warranted and sync is spelled wrong anyway./
,,0.0951,OpenDDS,Avoid ACE_SYNCH_MUTEX in the OpenDDS_Rtps library. Use of a preprocessor macro isnt warranted and sync is spelled wrong anyway./
,,0.0989,OpenDDS,Avoid ACE_SYNCH_MUTEX in the OpenDDS_Rtps library. Use of a preprocessor macro isnt warranted and sync is spelled wrong anyway./
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.0597,OpenDDS,added intersect_sorted_ranges and intersect; modified debug codeî/
,,0.149,OpenDDS,Merge pull request from simpsont-oci/qos_xml_coverity_fixes Potental null pointer dereference issue in QOS_Common.cpp (Coverity)/fixing potental null pointer dereference issue in QOS_Common.cpp for Coverity/fixing many (not all) ACE_ERROR usages with priorities other than LM_ERROR and LM_WARNING/
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.1,OpenDDS,"Merge pull request from simpsont-oci/attempt_thrasher_corruption_fix Add Thrasher Test for rtps_udp transport, Fix WaitForAck & Durability Issues It Exposed/"
,,0.1034,OpenDDS,"Merge pull request from jrw972/spdp-governor RtpsRelay: bug fixes, rate limiting, performance statistics/Improve lookup of destination guids in RtpsRelay Use hash Avoid getting list of matched readers/writers/"
,,0.2591,OpenDDS,"Merge pull request from jrw972/spdp-governor RtpsRelay: bug fixes, rate limiting, performance statistics/Fix deadlock and invalid iterator in RtpsRelay Deadlock was a classic case for ReactorInterceptor. The invalid iterator occurred when expiring clients./Add Governor to RtpsRelay A message resulting in high fan-out, like an SPDP broadcast from the Application Participant, has the potential to flood the network with datagrams, many of which would be dropped. This change adds a Governor for incoming messages that generate more than one send. A measured throughput is compared to a maximum throughput to determine if the send needs to be delayed. After the delay, the message is sent (regardless of the throughput) to avoid starvation./Merge pull request from jrw972/rpts-relay-compiler-warnings Fix compiler warnings in RtpsRelay/"
,,0.1026,OpenDDS,"Merge pull request from jrw972/spdp-governor RtpsRelay: bug fixes, rate limiting, performance statistics/Fix deadlock and invalid iterator in RtpsRelay Deadlock was a classic case for ReactorInterceptor. The invalid iterator occurred when expiring clients./"
,,0.1425,OpenDDS,"Merge pull request from jrw972/spdp-governor RtpsRelay: bug fixes, rate limiting, performance statistics/Fix deadlock and invalid iterator in RtpsRelay Deadlock was a classic case for ReactorInterceptor. The invalid iterator occurred when expiring clients./Improve lookup of destination guids in RtpsRelay Use hash Avoid getting list of matched readers/writers/"
,,0.2355,OpenDDS,"Merge pull request from jrw972/spdp-governor RtpsRelay: bug fixes, rate limiting, performance statistics/Fix deadlock and invalid iterator in RtpsRelay Deadlock was a classic case for ReactorInterceptor. The invalid iterator occurred when expiring clients./Fix build errors/Add Governor to RtpsRelay A message resulting in high fan-out, like an SPDP broadcast from the Application Participant, has the potential to flood the network with datagrams, many of which would be dropped. This change adds a Governor for incoming messages that generate more than one send. A measured throughput is compared to a maximum throughput to determine if the send needs to be delayed. After the delay, the message is sent (regardless of the throughput) to avoid starvation./"
,,0.1328,OpenDDS,"Merge pull request from jrw972/spdp-governor RtpsRelay: bug fixes, rate limiting, performance statistics/Fix deadlock and invalid iterator in RtpsRelay Deadlock was a classic case for ReactorInterceptor. The invalid iterator occurred when expiring clients./Merge pull request from jrw972/rpts-relay-compiler-warnings Fix compiler warnings in RtpsRelay/"
,,0.1064,OpenDDS,"Merge pull request from jrw972/spdp-governor RtpsRelay: bug fixes, rate limiting, performance statistics/Fix deadlock and invalid iterator in RtpsRelay Deadlock was a classic case for ReactorInterceptor. The invalid iterator occurred when expiring clients./"
,,0.1276,OpenDDS,"Merge pull request from jrw972/spdp-governor RtpsRelay: bug fixes, rate limiting, performance statistics/Fix deadlock and invalid iterator in RtpsRelay Deadlock was a classic case for ReactorInterceptor. The invalid iterator occurred when expiring clients./Merge pull request from jrw972/rpts-relay-compiler-warnings Fix compiler warnings in RtpsRelay/"
,,0.2547,OpenDDS,"Merge pull request from jrw972/spdp-governor RtpsRelay: bug fixes, rate limiting, performance statistics/Fix deadlock and invalid iterator in RtpsRelay Deadlock was a classic case for ReactorInterceptor. The invalid iterator occurred when expiring clients./Add Governor to RtpsRelay A message resulting in high fan-out, like an SPDP broadcast from the Application Participant, has the potential to flood the network with datagrams, many of which would be dropped. This change adds a Governor for incoming messages that generate more than one send. A measured throughput is compared to a maximum throughput to determine if the send needs to be delayed. After the delay, the message is sent (regardless of the throughput) to avoid starvation./"
,,0.1259,OpenDDS,"Merge pull request from jrw972/spdp-governor RtpsRelay: bug fixes, rate limiting, performance statistics/Fix deadlock and invalid iterator in RtpsRelay Deadlock was a classic case for ReactorInterceptor. The invalid iterator occurred when expiring clients./Merge pull request from jrw972/rpts-relay-compiler-warnings Fix compiler warnings in RtpsRelay/"
,,0.0982,OpenDDS,Merge pull request from wilsongOCI/master SPDP transport test fails for IPv6/SPDP test fails for IPv6 Converted IPv4 address to IPv6 for send_addr/
,,0.2135,OpenDDS,"Merge pull request from iguessthislldo/igtd/release_script Use ""-dev"" version suffix to indicate development versions (master branch between releases)/Differentiate if OpenDDS is Not a Release New version scheme where between releases OpenDDS master will have a version consisting of the next planned major or minor version and `-dev` (`3.14.0-dev` in the current case). Release Script Changes: Modify for new version scheme, allowing next version to be overridden. Use `Getopt::Long`. Turn `STEPS` argument into an option because of issues with the step expressions and `Getopt::Long` Release date inserted into files is now shorter: Feb 22 2020, for example. Regularize step names. Added `OPENDDS_IS_RELEASE` to `dds/Version.h` which is defined as 1 in releases, 0 all other times. Update AUTHORS file./"
,,0.1016,OpenDDS,Another iterator type fix (see pull request from simpsont-oci/fix_transport_client_pending_association_timeout_issue Fix TransportClient::PendingAssoc Timeout SEGV Issues/fix pending association timeout segv issues/Merge pull request from objectcomputing/tcp-reconnect-fix fix Windows non-blocking close issue/Fix issue to delete datawriter in suspended mode/
,,0.2513,OpenDDS,"Merge pull request from jrw972/fix-reliability Fix reliability in rtps_udp/Fix reliability in rtps_udp The association design requires that a writer receive an acknack from a reader and reader receives data or a heartbeat from writer. There were two issues with this design. If writer has no data, it will not respond to the acknack with a heartbeat so the writer will be associated but the reader will not. There was no reliability in the design as the reader would not retry to send the acknack. Solution: Add retry logic to the reader so it will resend acknacks and add logic to the writer so that it will respond with a heartbeat./addressing compile errors and review comments... renaming a few things and pushing magic numbers into configurable locations/Merge pull request from simpsont-oci/rtps_reader_stop Honor DataLink::pre_stop for RTPS readers/Honor DataLink::pre_stop for RTPS readers/Merge pull request from simpsont-oci/prevent_rtpswriter_remove_reader_deadlock Fix Potential Deadlock In RtpsWriter::remove_reader()/fix potential deadlock caused by holding rtpswriter lock while calling data_dropped/Merge pull request from mitza-oci/interop rtps_udp 2.4 interop fixes/Merge pull request from simpsont-oci/fix_multi_transport_messenger_test Fix multi-transport Messenger test/rtps_udp 2.4 interop fixes allow heartbeats with the ""first"" number one larger than the ""last"" for volatile durability, first received data is delivered/"
,,0.1619,OpenDDS,Merge pull request from kuznetsovmoci/Secure_Participant_Discovery_2 Fixes for Secure Participant Discovery/Fixes for Secure Participant Discovery/Fixes for Secure Participant Discovery/Bug fixes for Secure Participant Discovery/Fixes for Secure Participant Discovery/
,,0.114,OpenDDS,addressing compile errors and review comments... renaming a few things and pushing magic numbers into configurable locations/
,,0.2553,OpenDDS,"Merge pull request from jrw972/fix-reliability Fix reliability in rtps_udp/Fix reliability in rtps_udp The association design requires that a writer receive an acknack from a reader and reader receives data or a heartbeat from writer. There were two issues with this design. If writer has no data, it will not respond to the acknack with a heartbeat so the writer will be associated but the reader will not. There was no reliability in the design as the reader would not retry to send the acknack. Solution: Add retry logic to the reader so it will resend acknacks and add logic to the writer so that it will respond with a heartbeat./addressing compile errors and review comments... renaming a few things and pushing magic numbers into configurable locations/Merge pull request from simpsont-oci/rtps_reader_stop Honor DataLink::pre_stop for RTPS readers/Honor DataLink::pre_stop for RTPS readers/Merge pull request from simpsont-oci/prevent_rtpswriter_remove_reader_deadlock Fix Potential Deadlock In RtpsWriter::remove_reader()/Merge pull request from simpsont-oci/fixing_ooo_data_and_fragment_issues Fixing Out-of-Order / Missing Data and Fragment Handling Issues/fix potential deadlock caused by holding rtpswriter lock while calling data_dropped/fixing out of order / missing data issues and dropped early fragment issues/Merge pull request from simpsont-oci/scale_and_thrasher_fix_for_first_data_delivered Fixing Scale & Thrasher Issues for Previous Interop Fix (First Data Delivered)/Merge pull request from simpsont-oci/fix_unlocked_remove Fix Unlocked Removal Methods & Usage For TransportSendBuffer / SingleSendBuffer/fix unlocked remove methods & use for TransportSendBuffer / SingleSendBuffer/Updated to fix issues with bitmap zero length memory access./Merge pull request from mitza-oci/interop rtps_udp 2.4 interop fixes/Merge pull request from simpsont-oci/fix_multi_transport_messenger_test Fix multi-transport Messenger test/fixing issues for multiple remote writers/ensure invoke_on_callback always called for first hb, and fix logic for handshake check/rtps_udp 2.4 interop fixes allow heartbeats with the ""first"" number one larger than the ""last"" for volatile durability, first received data is delivered/"
,,0.114,OpenDDS,addressing compile errors and review comments... renaming a few things and pushing magic numbers into configurable locations/
,,0.0897,OpenDDS,Merge pull request from iguessthislldo/igtd/filter_instance_register Fix Filtering Instance Registration by Non-Key Fields/Add Tests for Instance Registration Filter Bug Added unit test for DataSampleHeader::valid_data(). Added error message to dds_demarshal()./
,,0.1518,OpenDDS,Merge pull request from kuznetsovmoci/Secure_Participant_Discovery_2 Fixes for Secure Participant Discovery/Fixes for Secure Participant Discovery/Fixes for Secure Participant Discovery/Fixes for Secure Participant Discovery/
,,0.1216,OpenDDS,addressing compile errors and review comments... renaming a few things and pushing magic numbers into configurable locations/
,,0.1159,OpenDDS,addressing compile errors and review comments... renaming a few things and pushing magic numbers into configurable locations/
,,0.1641,OpenDDS,Merge pull request from kuznetsovmoci/Secure_Participant_Discovery_2 Fixes for Secure Participant Discovery/Fixes for Secure Participant Discovery/Fixes for Secure Participant Discovery/Fixes for Secure Participant Discovery/Bug fixes for Secure Participant Discovery/Merge pull request from simpsont-oci/fix_multi_transport_messenger_test Fix multi-transport Messenger test/Fixes for Secure Participant Discovery/
,,0.0812,OpenDDS,Merge pull request from iguessthislldo/igtd/filter_instance_register Fix Filtering Instance Registration by Non-Key Fields/Add Tests for Instance Registration Filter Bug Added unit test for DataSampleHeader::valid_data(). Added error message to dds_demarshal()./
,,0.1208,OpenDDS,fixing configutils compile error for safety profile/addressing compile errors and review comments... renaming a few things and pushing magic numbers into configurable locations/
,,0.0989,OpenDDS,"Merge pull request from jrw972/spdp-governor RtpsRelay: bug fixes, rate limiting, performance statistics/Fix deadlock and invalid iterator in RtpsRelay Deadlock was a classic case for ReactorInterceptor. The invalid iterator occurred when expiring clients./"
,,0.0681,pljava,Fixes to some problems reported by Filip Hrbek/
,,0.0681,pljava,Fixes to some problems reported by Filip Hrbek/
,,0.0657,pljava,Fixed bug causing primitive arrays to fail./
,,0.0757,pljava,Fixed bug Jar owner in the sqlj.jar_repository table changed type from oid to name./
,,0.0823,pljava,Fixed bug bug Jar owner in the sqlj.jar_repository table changed type from oid to name./
,,0.0833,pljava,Fixed bug Jar owner in the sqlj.jar_repository table changed type from oid to name./
,,0.0664,pljava,Fix for bug in the other direction./Fix for bug
,,0.1048,pljava,The previous commit to fix custom variable setup was busted. The argument order was wrong for integer variable setup./
,,0.0829,pljava,Bugfix 1010956: Function returning complex objects with POD arrays cause a segfault _doubleArray_coerceObject() now correctly handles arrays of type Double[]/
,,0.0751,pljava,Bugfix 1010953: Segfault when assigning an array to ResultSet column _intArray_coerceObject() did not expect Integer[] arrays./
,,0.0883,pljava,Bugfix 1010956: Function returning complex objects with POD arrays cause a segfault _floatArray_coerceObject() now correctly handles arrays of type Float[]/
,,0.092,pljava,Bugfix 1010956: Function returning complex objects with POD arrays cause a segfault _longArray_coerceObject() now correctly handles arrays of type Long[]/
,,0.1296,pljava,Merge pull request from r0ml/fix_enum fixes bug that prevents setting enums from java procedures/fixes bug that prevents setting enums from java procedures/
,,0.1593,pljava,"Merge pull request from jcflack/workaround/master/javac7 Workaround breakage seen with Java 7/Revert change made in bd6f79c because type mapping broke. Issue stopped the DDRProcessor from finding the correct return type for this example function, so in bd6f79c and 7b5f28d an explicit type annotation was added. DDRProcessor finds the right type again, so reverting the explicit annotation (which only served to mask a problem)./"
,,0.2178,pljava,"Merge pull request from jcflack/bug/master/issue54 Only ignore the expected exception in method lookup./Only ignore the expected exception in method lookup. That way other exceptions (like a problem in a class initializer, or out of memory) will not be hidden from view. Closes a few more conversion (not sign-) warnings. count|how 2 | fixed with obvious cast lacking in PG macro (e.g. PGUNSIXBIT) 5 | fixed using `size_t/Size` not `int`, locally verifiable 1 | cast to member defined by others, static `AssertVariableIsOfType` 1 | fixed with width suffix on literal/"
,,0.2546,pljava,"Squash silly conversion-to-bool warnings. nar-maven-plugin turns on such aggressive gcc warnings that it ends up warning about a b ? c : d where the things are all bool. Sure, strictly by the standard, c and d get integer-promoted and then have to be narrowed back to bool, but gcc would know better than to give a warning if bool really were _Bool. The thing is, PostgreSQLs c.h is defining it to be char, so gcc doesnt know better. If it were happening a ton of places I would just live with it or turn off the warning, but changing two places isnt so bad. Rewrote using if to look less dorky than hanging a (bool) cast on a perfectly obviously boolean expression./Merge pull request from kenolson/bug/master/msvc_build Fix to allow building pljava with Microsoft Visual C/Fix to allow building pljava with Microsoft Visual C Code changes to allow compilation and linking with Microsoft Visual C. Maven build process conditionalized to to detect Visual C and adjust options appropriately. See msvc-build-notes.txt for full details. Property names updated for clarity/Merge pull request from jcflack/bug/master/noargsigs Address spurious error with zero-arg method sigs./Address spurious error with zero-arg method sigs. Spun the loop in parseParameters slightly so it doesnt complain in the corner case of an explicit method signature of no parameters. Also made the messages clearer for when the signature really doesnt match whats expected./"
,,0.2849,pljava,"Squash silly conversion-to-bool warnings. nar-maven-plugin turns on such aggressive gcc warnings that it ends up warning about a b ? c : d where the things are all bool. Sure, strictly by the standard, c and d get integer-promoted and then have to be narrowed back to bool, but gcc would know better than to give a warning if bool really were _Bool. The thing is, PostgreSQLs c.h is defining it to be char, so gcc doesnt know better. If it were happening a ton of places I would just live with it or turn off the warning, but changing two places isnt so bad. Rewrote using if to look less dorky than hanging a (bool) cast on a perfectly obviously boolean expression./Zap a few more conversion (not sign-) warnings. count|how 2 | fixed with obvious cast lacking in PG macro (e.g. PGUNSIXBIT) 5 | fixed using `size_t/Size` not `int`, locally verifiable 1 | cast to member defined by others, static `AssertVariableIsOfType` 1 | fixed with width suffix on literal/"
,,0.2135,pljava,"Fix varlena UDT breaking if longer than 32767. Spotted among the flurry of gcc warnings, most of which were nuisances. Declaring `dataLen` as `int16` makes sense if looking at the `typlen` catalog attribute, but then in `coerceScalarDatum` it can later get used for a `varlena` size, which can be up to 1GB-ish. It wasnt strictly necessary to change it also in `coerceScalarObject` (`buffer.len` gets used for the var size there), but I did for consistency. Other `dataLen`s later in the file were already `int32`, so now they all are. Closes a few more conversion (not sign-) warnings. count|how 2 | fixed with obvious cast lacking in PG macro (e.g. PGUNSIXBIT) 5 | fixed using `size_t/Size` not `int`, locally verifiable 1 | cast to member defined by others, static `AssertVariableIsOfType` 1 | fixed with width suffix on literal/"
,,0.2174,pljava,"Squash long-to-int narrowing warning in Timestamp. I was baffled why `tm_gmtoff` would ever be declared `long` until I saw Tom Lanes comment [just this last May][revelation]: ""The fact that `tm_gmtoff` is declared as `long` is no doubt a hangover from days when `int` might be only 16 bits ...."" Im not sure hangover is the word he meant but it seems strangely appropriate. His solution was to cast to `int` without compunction, and so is mine. Theres even the luxury of saying `int32` and never again worrying about whether its big enough for ±86400 seconds. [revelation]: pull request from kenolson/bug/master/msvc_build Fix to allow building pljava with Microsoft Visual C/Fix to allow building pljava with Microsoft Visual C Code changes to allow compilation and linking with Microsoft Visual C. Maven build process conditionalized to to detect Visual C and adjust options appropriately. See msvc-build-notes.txt for full details. Property names updated for clarity/"
,,0.204,pljava,"Zap a few more conversion (not sign-) warnings. count|how 2 | fixed with obvious cast lacking in PG macro (e.g. PGUNSIXBIT) 5 | fixed using `size_t/Size` not `int`, locally verifiable 1 | cast to member defined by others, static `AssertVariableIsOfType` 1 | fixed with width suffix on literal/"
,,0.2008,pljava,"Zap a few more conversion (not sign-) warnings. count|how 2 | fixed with obvious cast lacking in PG macro (e.g. PGUNSIXBIT) 5 | fixed using `size_t/Size` not `int`, locally verifiable 1 | cast to member defined by others, static `AssertVariableIsOfType` 1 | fixed with width suffix on literal/"
,,0.4151,pljava,"Add a class annotation to make a base/scalar UDT. Add the annotation, have DDRProcessor recognize it. Check the annotated class for the required properties and members. The snippets map formerly allowed only one type of annotation on a given element. That happened to work, but not now when a class could have both a UDT and a SQLAction annotation, for example. Adapt the map to key by element and snippet class, so snippets of different classes can be hung on an element and selectively retrieved. An old comment in populateAnnotationImpl suggested it would reduce boilerplate setter code if, failing to find a setter method, the field itself could be reflectively looked up and stored. Thats done now, so setter methods are needed only when something more special has to be done. Function declarations will be synthesized automagically for the four mandatory (in, out, recv, send) methods, but to allow their properties to be individually adjusted, they can still accept Function annotations. Thats done by hanging a new subclass of FunctionImpl on those elements, that generates the right special form of declaration, and has setters that refuse changes to certain properties where that wouldnt make sense. Treat the default implementor-tag (PostgreSQL if not changed with new ddr.implementor command line property) specially. Now that everything is getting wrapped with an implementor tag by default, the implied requires=""implementor-tag"" was holding everything back until released by the cycle-breaker, sometimes in puzzling order. The implementor tag that happens to be the default one should /not/ be treated as a pending requirement. Move ComplexScalar to annotation subpackage, in preparation for revamping it as an annotation example. So git wont lose track of it, this is a breaking change, to be fixed in the next commit with edits corresponding to the move./"
,,0.3868,pljava,"Conform to BaseUDT rename, add MappedUDT. Supporting MappedUDT is much simpler. It emits a CREATE TYPE foo AS ( ... structure ... ) if a structure is provided, or not, if it isnt, followed by a SELECT sqlj.add_type_mapping( ... ), and thats it. Much javadoc also added. This commit ends with pure renames of the Point and ComplexTuple examples in preparation to make them annotation examples ... breaking compilation until they are fixed up in the next commit, but git can see where they went./Add a class annotation to make a base/scalar UDT. Add the annotation, have DDRProcessor recognize it. Check the annotated class for the required properties and members. The snippets map formerly allowed only one type of annotation on a given element. That happened to work, but not now when a class could have both a UDT and a SQLAction annotation, for example. Adapt the map to key by element and snippet class, so snippets of different classes can be hung on an element and selectively retrieved. An old comment in populateAnnotationImpl suggested it would reduce boilerplate setter code if, failing to find a setter method, the field itself could be reflectively looked up and stored. Thats done now, so setter methods are needed only when something more special has to be done. Function declarations will be synthesized automagically for the four mandatory (in, out, recv, send) methods, but to allow their properties to be individually adjusted, they can still accept Function annotations. Thats done by hanging a new subclass of FunctionImpl on those elements, that generates the right special form of declaration, and has setters that refuse changes to certain properties where that wouldnt make sense. Treat the default implementor-tag (PostgreSQL if not changed with new ddr.implementor command line property) specially. Now that everything is getting wrapped with an implementor tag by default, the implied requires=""implementor-tag"" was holding everything back until released by the cycle-breaker, sometimes in puzzling order. The implementor tag that happens to be the default one should /not/ be treated as a pending requirement. Move ComplexScalar to annotation subpackage, in preparation for revamping it as an annotation example. So git wont lose track of it, this is a breaking change, to be fixed in the next commit with edits corresponding to the move./"
,,0.0689,pljava,"Merge pull request from tada/chore/master/javadoc8 Could as well have been called a bug, because javadoc 8 lint _stops_ `mvn site`./"
,,0.073,pljava,"Merge pull request from tada/chore/master/javadoc8 Could as well have been called a bug, because javadoc 8 lint _stops_ `mvn site`./"
,,0.0883,pljava,"Fix two javadoc links. While on javadocs, fix two links overlooked in the annotation keyword revisions./"
,,0.3017,pljava,"Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and tests for UDTs and SQLInput/SQLOutput. Add SQLActions to the existing ComplexScalar, ComplexTuple, and Point example classes, as rough tests that these three forms of UDT (scalar, composite, ""mirrored"") work. As a more thorough test, add UDTScalarIOTest class, exercising every supported SQLInput/SQLOutput method for scalar (or mirrored, noncomposite) types. At first Point is expected to fail on little-endian hardware./"
,,0.2991,pljava,"Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and tests for UDTs and SQLInput/SQLOutput. Add SQLActions to the existing ComplexScalar, ComplexTuple, and Point example classes, as rough tests that these three forms of UDT (scalar, composite, ""mirrored"") work. As a more thorough test, add UDTScalarIOTest class, exercising every supported SQLInput/SQLOutput method for scalar (or mirrored, noncomposite) types. At first Point is expected to fail on little-endian hardware./"
,,0.0863,pljava,Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and
,,0.2965,pljava,"Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and tests for UDTs and SQLInput/SQLOutput. Add SQLActions to the existing ComplexScalar, ComplexTuple, and Point example classes, as rough tests that these three forms of UDT (scalar, composite, ""mirrored"") work. As a more thorough test, add UDTScalarIOTest class, exercising every supported SQLInput/SQLOutput method for scalar (or mirrored, noncomposite) types. At first Point is expected to fail on little-endian hardware./"
,,0.2539,pljava,"Merge branch bug/REL1_5_STABLE/aseert into REL1_5_STABLE Trivial typo introduced with MinGW support, was bad for pre-9.3 builds./Fix pre-9.3 bug introduced with MinGW fixes. Trivial typo./Accommodate Windowsish printf format differences. Windows sets int long int32, int64 ""long long"". jni_md.h on Windows defines jint as long, jlong as long long. The gcc printf format checker in mingw notices these things. To keep it quiet, cast to known types and use corresponding formats. The debug messages are elogs, not ereports, hence not candidates for localization, so the format macro can be used directly. If localization were needed, the formats would need %s with the number-to-string conversion done in a separate step./Merge pull request from tada/chore/master/debuglevels Make DEBUG1 quieter. Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the initial load message that identifies PL/Java and JVM versions. (This is NOTICE if PL/Java is explicitly LOADed, so its seen by default, but in other cases you can now see it by enabling DEBUG1, and not mixed in with a lot of other stuff.)/Make DEBUG1 quieter. Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the initial load message that identifies PL/Java and JVM versions. (This is NOTICE if PL/Java is explicitly LOADed, so its seen by default, but in other cases you can now see it by enabling DEBUG1, and not mixed in with a lot of other stuff.)/"
,,0.4472,pljava,"Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and but serviceable way to set byte order. Addresses issue There really hasnt been a document that just lays out in detail how PL/Javas data coercions are chosen and especially how the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered, while documenting that, the reason Point was showing bogus values (noted in pull request comments) ... byte order ... leading to a last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing byte order to be selected. (It has to be selectable, not just fixed, in case PL/Java gets updated at a site that has a bunch of data stored under the old byte order. A switch allows dumping with the old order, then reloading with the new. In fact, by choosing a different byte order for each conversion direction, it is possible ... carefully ... to update in place.) A flag is passed to SQLInputFromChunk_create and SQLOutputFromChunk_create to indicate whether the type is a java-based scalar (otherwise, it is a non-composite mirror), and this allows byte order to be specified separately for scalars and mirrors: historically, it was always bigendian regardless of architecture. Presumably that has never mattered much for java-based scalars (because PostgreSQL itself doesnt have any independent way of seeing into them, so no inconsistency was visible), but for a mirror type it is definitely broken if the hardware is not bigendian, with PostgreSQL and Java not seeing the values the same way. Therefore, this change leaves the scalar default (for 1.5.0 at least) at bigendian, in case some sites may have used Java-based scalars in the past and have tables that contain them. Also, the current UDT implementation gives every scalar type a binary send/receive/COPY format that cant (yet) be decoupled from its internal stored form, and the PostgreSQL docs specify big-endian for those binary transfer formats, so it would be premature to change the scalar byte-order default before it is also possible to have a separate transfer format. For mirror types, on the other hand, the default is here immediately changed to native ... it is less likely that sites were heavily using mirror UDTs if they were seeing bogus values, and this will make them work right by default. Java properties are used (set with in the pljava.vmoptions GUC): org.postgresql.pljava.udt.byteorder to set everything the same, org.postgresql.pljava.udt.byteorder.scalar org.postgresql.pljava.udt.byteorder.mirror to set them separately. The allowable values for each property are big_endian, little_endian, and native. Even finer-grained control is available with: org.postgresql.pljava.udt.byteorder.scalar.p2j org.postgresql.pljava.udt.byteorder.scalar.j2p org.postgresql.pljava.udt.byteorder.mirror.p2j org.postgresql.pljava.udt.byteorder.mirror.j2p for a very special purpose, should someone wish to attempt an UPDATE where within a session, a column with values written in one order gets rewritten in another, a fiddly and somewhat unnerving process that turns out to actually work, and has a full new page documenting it now./"
,,0.4452,pljava,"Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and but serviceable way to set byte order. Addresses issue There really hasnt been a document that just lays out in detail how PL/Javas data coercions are chosen and especially how the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered, while documenting that, the reason Point was showing bogus values (noted in pull request comments) ... byte order ... leading to a last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing byte order to be selected. (It has to be selectable, not just fixed, in case PL/Java gets updated at a site that has a bunch of data stored under the old byte order. A switch allows dumping with the old order, then reloading with the new. In fact, by choosing a different byte order for each conversion direction, it is possible ... carefully ... to update in place.) A flag is passed to SQLInputFromChunk_create and SQLOutputFromChunk_create to indicate whether the type is a java-based scalar (otherwise, it is a non-composite mirror), and this allows byte order to be specified separately for scalars and mirrors: historically, it was always bigendian regardless of architecture. Presumably that has never mattered much for java-based scalars (because PostgreSQL itself doesnt have any independent way of seeing into them, so no inconsistency was visible), but for a mirror type it is definitely broken if the hardware is not bigendian, with PostgreSQL and Java not seeing the values the same way. Therefore, this change leaves the scalar default (for 1.5.0 at least) at bigendian, in case some sites may have used Java-based scalars in the past and have tables that contain them. Also, the current UDT implementation gives every scalar type a binary send/receive/COPY format that cant (yet) be decoupled from its internal stored form, and the PostgreSQL docs specify big-endian for those binary transfer formats, so it would be premature to change the scalar byte-order default before it is also possible to have a separate transfer format. For mirror types, on the other hand, the default is here immediately changed to native ... it is less likely that sites were heavily using mirror UDTs if they were seeing bogus values, and this will make them work right by default. Java properties are used (set with in the pljava.vmoptions GUC): org.postgresql.pljava.udt.byteorder to set everything the same, org.postgresql.pljava.udt.byteorder.scalar org.postgresql.pljava.udt.byteorder.mirror to set them separately. The allowable values for each property are big_endian, little_endian, and native. Even finer-grained control is available with: org.postgresql.pljava.udt.byteorder.scalar.p2j org.postgresql.pljava.udt.byteorder.scalar.j2p org.postgresql.pljava.udt.byteorder.mirror.p2j org.postgresql.pljava.udt.byteorder.mirror.j2p for a very special purpose, should someone wish to attempt an UPDATE where within a session, a column with values written in one order gets rewritten in another, a fiddly and somewhat unnerving process that turns out to actually work, and has a full new page documenting it now./"
,,0.2167,pljava,"Merge branch bug/REL1_5_STABLE/tupdescleak into REL1_5_STABLE Eliminate TupleDesc reference leak warnings at uses of composite UDTs; also commit a test class from an old pgFoundry bug report 1010962 different issue, but also TupleDesc reference leak warnings, and it runs without any now, so in it goes as a regression test./Plug composite UDT TupleDesc leak. In the composite case, UDT was keeping a reference to the types TupleDesc, causing PostgreSQLs reference counter to report a leak. Not a growing, memory leak: only one TupleDesc for each type would be kept. Of more concern would be how to invalidate it if the underlying type is altered. More convincing to just grab it from the type cache whenever needed. More at:"
,,0.213,pljava,"Merge branch bug/REL1_5_STABLE/tupdescleak into REL1_5_STABLE Eliminate TupleDesc reference leak warnings at uses of composite UDTs; also commit a test class from an old pgFoundry bug report 1010962 different issue, but also TupleDesc reference leak warnings, and it runs without any now, so in it goes as a regression test./Plug composite UDT TupleDesc leak. In the composite case, UDT was keeping a reference to the types TupleDesc, causing PostgreSQLs reference counter to report a leak. Not a growing, memory leak: only one TupleDesc for each type would be kept. Of more concern would be how to invalidate it if the underlying type is altered. More convincing to just grab it from the type cache whenever needed. More at:"
,,0.3302,pljava,"Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and for base UDT if no other type mapping found. Addresses issue The strategy of registering base UDTs on the first call to their input/output/send/recv functions breaks down if the first reference in a session to such a type is one that doesnt involve calling those functions (for example, an existing table has a column of that type, and a query wants to pass it to a Java function accepting that type; PostgreSQL has no reason to think it should call an I/O function in that case). This change adds one more step to the rules in Type_fromOid. If no previous step succeeded, and just before punting to String, take a close look at the type to see if it could be a Base UDT. Thats a tedious check that involves following the types input/ output/receive/send Oids via prolang back to their language Oids, and (one could stop here by assuming the language will always be named java or javaU, but if not) from there to the languages call handler C function and its dynamic library path, which should match PL/Javas. A future optimization could cache language Oids that are found to refer to PL/Java, but it might not be needed often enough to matter./"
,,0.3185,pljava,"Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and for base UDT if no other type mapping found. Addresses issue The strategy of registering base UDTs on the first call to their input/output/send/recv functions breaks down if the first reference in a session to such a type is one that doesnt involve calling those functions (for example, an existing table has a column of that type, and a query wants to pass it to a Java function accepting that type; PostgreSQL has no reason to think it should call an I/O function in that case). This change adds one more step to the rules in Type_fromOid. If no previous step succeeded, and just before punting to String, take a close look at the type to see if it could be a Base UDT. Thats a tedious check that involves following the types input/ output/receive/send Oids via prolang back to their language Oids, and (one could stop here by assuming the language will always be named java or javaU, but if not) from there to the languages call handler C function and its dynamic library path, which should match PL/Javas. A future optimization could cache language Oids that are found to refer to PL/Java, but it might not be needed often enough to matter./"
,,0.1806,pljava,"Merge pull request from tada/chore/master/debuglevels Make DEBUG1 quieter. Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the initial load message that identifies PL/Java and JVM versions. (This is NOTICE if PL/Java is explicitly LOADed, so its seen by default, but in other cases you can now see it by enabling DEBUG1, and not mixed in with a lot of other stuff.)/Make DEBUG1 quieter. Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the initial load message that identifies PL/Java and JVM versions. (This is NOTICE if PL/Java is explicitly LOADed, so its seen by default, but in other cases you can now see it by enabling DEBUG1, and not mixed in with a lot of other stuff.)/"
,,0.3204,pljava,"Merge branch doc/REL1_5_STABLE/clarify into REL1_5_STABLE Clarifies permissions needed for self-extractor, and the CREATE-EXTENSION-failed-because-new-session-needed message, as Daniel Blanch Bataller suggested./Make create-extension-didnt message clearer. The only error message resulting from a CREATE EXTENSION attempt that failed (because the library had been loaded before in the session, therefore LOAD was a no-op) is one about a table that already exists. But the name of the table appears in the error message, so the table may as well be named ""see doc: do CREATE EXTENSION PLJAVA in new session"" which may serve to get the point across./Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and for base UDT if no other type mapping found. Addresses issue The strategy of registering base UDTs on the first call to their input/output/send/recv functions breaks down if the first reference in a session to such a type is one that doesnt involve calling those functions (for example, an existing table has a column of that type, and a query wants to pass it to a Java function accepting that type; PostgreSQL has no reason to think it should call an I/O function in that case). This change adds one more step to the rules in Type_fromOid. If no previous step succeeded, and just before punting to String, take a close look at the type to see if it could be a Base UDT. Thats a tedious check that involves following the types input/ output/receive/send Oids via prolang back to their language Oids, and (one could stop here by assuming the language will always be named java or javaU, but if not) from there to the languages call handler C function and its dynamic library path, which should match PL/Javas. A future optimization could cache language Oids that are found to refer to PL/Java, but it might not be needed often enough to matter./Merge pull request from tada/chore/master/debuglevels Make DEBUG1 quieter. Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the initial load message that identifies PL/Java and JVM versions. (This is NOTICE if PL/Java is explicitly LOADed, so its seen by default, but in other cases you can now see it by enabling DEBUG1, and not mixed in with a lot of other stuff.)/Dont leak a local ref. JNI cleans em up automatically on returning to Java, but that wont happen here because this is *outside* Java calling *in*./Make DEBUG1 quieter. Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the initial load message that identifies PL/Java and JVM versions. (This is NOTICE if PL/Java is explicitly LOADed, so its seen by default, but in other cases you can now see it by enabling DEBUG1, and not mixed in with a lot of other stuff.)/"
,,0.3403,pljava,"Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and for base UDT if no other type mapping found. Addresses issue The strategy of registering base UDTs on the first call to their input/output/send/recv functions breaks down if the first reference in a session to such a type is one that doesnt involve calling those functions (for example, an existing table has a column of that type, and a query wants to pass it to a Java function accepting that type; PostgreSQL has no reason to think it should call an I/O function in that case). This change adds one more step to the rules in Type_fromOid. If no previous step succeeded, and just before punting to String, take a close look at the type to see if it could be a Base UDT. Thats a tedious check that involves following the types input/ output/receive/send Oids via prolang back to their language Oids, and (one could stop here by assuming the language will always be named java or javaU, but if not) from there to the languages call handler C function and its dynamic library path, which should match PL/Javas. A future optimization could cache language Oids that are found to refer to PL/Java, but it might not be needed often enough to matter./Merge pull request from tada/chore/master/debuglevels Make DEBUG1 quieter. Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the initial load message that identifies PL/Java and JVM versions. (This is NOTICE if PL/Java is explicitly LOADed, so its seen by default, but in other cases you can now see it by enabling DEBUG1, and not mixed in with a lot of other stuff.)/Make DEBUG1 quieter. Move a bunch of DEBUG1s to DEBUG2, leaving DEBUG1 for the initial load message that identifies PL/Java and JVM versions. (This is NOTICE if PL/Java is explicitly LOADed, so its seen by default, but in other cases you can now see it by enabling DEBUG1, and not mixed in with a lot of other stuff.)/"
,,0.2179,pljava,"Merge branch bug/REL1_5_STABLE/tupdescleak into REL1_5_STABLE Eliminate TupleDesc reference leak warnings at uses of composite UDTs; also commit a test class from an old pgFoundry bug report 1010962 different issue, but also TupleDesc reference leak warnings, and it runs without any now, so in it goes as a regression test./Plug composite UDT TupleDesc leak. In the composite case, UDT was keeping a reference to the types TupleDesc, causing PostgreSQLs reference counter to report a leak. Not a growing, memory leak: only one TupleDesc for each type would be kept. Of more concern would be how to invalidate it if the underlying type is altered. More convincing to just grab it from the type cache whenever needed. More at:"
,,0.4714,pljava,"Merge branch bug/REL1_5_STABLE/tupdescleak into REL1_5_STABLE Eliminate TupleDesc reference leak warnings at uses of composite UDTs; also commit a test class from an old pgFoundry bug report 1010962 different issue, but also TupleDesc reference leak warnings, and it runs without any now, so in it goes as a regression test./Plug composite UDT TupleDesc leak. In the composite case, UDT was keeping a reference to the types TupleDesc, causing PostgreSQLs reference counter to report a leak. Not a growing, memory leak: only one TupleDesc for each type would be kept. Of more concern would be how to invalidate it if the underlying type is altered. More convincing to just grab it from the type cache whenever needed. More at: branch feature/REL1_5_STABLE/typmodprep into REL1_5_STABLE Not a full implementation of type modifiers (which were requested in feature request 1011140), which would be too much to hold 1.5.0 for, but just enough to avoid releasing a version that gets in the way later: the SQL generator had better at least emit the three-argument forms for input and receive function declarations, or they would later have to be dropped and replaced, a cascading disruption. Non-default values in the extra arguments are not yet supported; theyll just cause unsupported feature ereports. As it turns out, only rare corners of PostgreSQL need that support; most application of typmods is done with the three-argument cast, which is already expressible in PL/Java. So, unexpectedly, mostly-usable typmod support is already here, and a new example illustrates it./Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and but serviceable way to set byte order. Addresses issue There really hasnt been a document that just lays out in detail how PL/Javas data coercions are chosen and especially how the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered, while documenting that, the reason Point was showing bogus values (noted in pull request comments) ... byte order ... leading to a last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing byte order to be selected. (It has to be selectable, not just fixed, in case PL/Java gets updated at a site that has a bunch of data stored under the old byte order. A switch allows dumping with the old order, then reloading with the new. In fact, by choosing a different byte order for each conversion direction, it is possible ... carefully ... to update in place.) A flag is passed to SQLInputFromChunk_create and SQLOutputFromChunk_create to indicate whether the type is a java-based scalar (otherwise, it is a non-composite mirror), and this allows byte order to be specified separately for scalars and mirrors: historically, it was always bigendian regardless of architecture. Presumably that has never mattered much for java-based scalars (because PostgreSQL itself doesnt have any independent way of seeing into them, so no inconsistency was visible), but for a mirror type it is definitely broken if the hardware is not bigendian, with PostgreSQL and Java not seeing the values the same way. Therefore, this change leaves the scalar default (for 1.5.0 at least) at bigendian, in case some sites may have used Java-based scalars in the past and have tables that contain them. Also, the current UDT implementation gives every scalar type a binary send/receive/COPY format that cant (yet) be decoupled from its internal stored form, and the PostgreSQL docs specify big-endian for those binary transfer formats, so it would be premature to change the scalar byte-order default before it is also possible to have a separate transfer format. For mirror types, on the other hand, the default is here immediately changed to native ... it is less likely that sites were heavily using mirror UDTs if they were seeing bogus values, and this will make them work right by default. Java properties are used (set with in the pljava.vmoptions GUC): org.postgresql.pljava.udt.byteorder to set everything the same, org.postgresql.pljava.udt.byteorder.scalar org.postgresql.pljava.udt.byteorder.mirror to set them separately. The allowable values for each property are big_endian, little_endian, and native. Even finer-grained control is available with: org.postgresql.pljava.udt.byteorder.scalar.p2j org.postgresql.pljava.udt.byteorder.scalar.j2p org.postgresql.pljava.udt.byteorder.mirror.p2j org.postgresql.pljava.udt.byteorder.mirror.j2p for a very special purpose, should someone wish to attempt an UPDATE where within a session, a column with values written in one order gets rewritten in another, a fiddly and somewhat unnerving process that turns out to actually work, and has a full new page documenting it now./Lay groundwork for typmod support. To fully support type modifiers, including the three-argument forms of input/receive functions, will take more thought than 1.5.0 can wait for. But to release 1.5.0 with the SQL generator emitting the one-argument forms would invite headaches later, because CREATE OR REPLACE FUNCTION cant change the parameter list, and DROP/reCREATE would cause cascading disruption. So, make sure the generator already emits the three-argument form, and just be sure to fail if a non-default typmod is in fact passed, with more complete support to be added later. By happy chance, it seems that PostgreSQL only very rarely passes non- default typmods to the input/receive functions--possibly only during COPY operations. (Those were the only way I was able to test this change.) In most other cases where a typmod is used, PostgreSQL relies on a typmod application cast in a separate step, not on passing the typmod to input/receive. PL/Java is already usable to implement typmodin, typmodout, and cast functions, so in limited testing it seems possible already to do types with typmods, maybe as long as COPY operations on them are not needed. Therefore, add an example that illustrates it./"
,,0.4442,pljava,"Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and but serviceable way to set byte order. Addresses issue There really hasnt been a document that just lays out in detail how PL/Javas data coercions are chosen and especially how the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered, while documenting that, the reason Point was showing bogus values (noted in pull request comments) ... byte order ... leading to a last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing byte order to be selected. (It has to be selectable, not just fixed, in case PL/Java gets updated at a site that has a bunch of data stored under the old byte order. A switch allows dumping with the old order, then reloading with the new. In fact, by choosing a different byte order for each conversion direction, it is possible ... carefully ... to update in place.) A flag is passed to SQLInputFromChunk_create and SQLOutputFromChunk_create to indicate whether the type is a java-based scalar (otherwise, it is a non-composite mirror), and this allows byte order to be specified separately for scalars and mirrors: historically, it was always bigendian regardless of architecture. Presumably that has never mattered much for java-based scalars (because PostgreSQL itself doesnt have any independent way of seeing into them, so no inconsistency was visible), but for a mirror type it is definitely broken if the hardware is not bigendian, with PostgreSQL and Java not seeing the values the same way. Therefore, this change leaves the scalar default (for 1.5.0 at least) at bigendian, in case some sites may have used Java-based scalars in the past and have tables that contain them. Also, the current UDT implementation gives every scalar type a binary send/receive/COPY format that cant (yet) be decoupled from its internal stored form, and the PostgreSQL docs specify big-endian for those binary transfer formats, so it would be premature to change the scalar byte-order default before it is also possible to have a separate transfer format. For mirror types, on the other hand, the default is here immediately changed to native ... it is less likely that sites were heavily using mirror UDTs if they were seeing bogus values, and this will make them work right by default. Java properties are used (set with in the pljava.vmoptions GUC): org.postgresql.pljava.udt.byteorder to set everything the same, org.postgresql.pljava.udt.byteorder.scalar org.postgresql.pljava.udt.byteorder.mirror to set them separately. The allowable values for each property are big_endian, little_endian, and native. Even finer-grained control is available with: org.postgresql.pljava.udt.byteorder.scalar.p2j org.postgresql.pljava.udt.byteorder.scalar.j2p org.postgresql.pljava.udt.byteorder.mirror.p2j org.postgresql.pljava.udt.byteorder.mirror.j2p for a very special purpose, should someone wish to attempt an UPDATE where within a session, a column with values written in one order gets rewritten in another, a fiddly and somewhat unnerving process that turns out to actually work, and has a full new page documenting it now./"
,,0.4472,pljava,"Merge branch bug/REL1_5_STABLE/udtarch into REL1_5_STABLE Addresses the user-defined type issues reported as and but serviceable way to set byte order. Addresses issue There really hasnt been a document that just lays out in detail how PL/Javas data coercions are chosen and especially how the raw-chunk-based versions of SQLInput/SQLOutput work. Discovered, while documenting that, the reason Point was showing bogus values (noted in pull request comments) ... byte order ... leading to a last-minute rework of SQLInputFromChunk and SQLOutputToChunk allowing byte order to be selected. (It has to be selectable, not just fixed, in case PL/Java gets updated at a site that has a bunch of data stored under the old byte order. A switch allows dumping with the old order, then reloading with the new. In fact, by choosing a different byte order for each conversion direction, it is possible ... carefully ... to update in place.) A flag is passed to SQLInputFromChunk_create and SQLOutputFromChunk_create to indicate whether the type is a java-based scalar (otherwise, it is a non-composite mirror), and this allows byte order to be specified separately for scalars and mirrors: historically, it was always bigendian regardless of architecture. Presumably that has never mattered much for java-based scalars (because PostgreSQL itself doesnt have any independent way of seeing into them, so no inconsistency was visible), but for a mirror type it is definitely broken if the hardware is not bigendian, with PostgreSQL and Java not seeing the values the same way. Therefore, this change leaves the scalar default (for 1.5.0 at least) at bigendian, in case some sites may have used Java-based scalars in the past and have tables that contain them. Also, the current UDT implementation gives every scalar type a binary send/receive/COPY format that cant (yet) be decoupled from its internal stored form, and the PostgreSQL docs specify big-endian for those binary transfer formats, so it would be premature to change the scalar byte-order default before it is also possible to have a separate transfer format. For mirror types, on the other hand, the default is here immediately changed to native ... it is less likely that sites were heavily using mirror UDTs if they were seeing bogus values, and this will make them work right by default. Java properties are used (set with in the pljava.vmoptions GUC): org.postgresql.pljava.udt.byteorder to set everything the same, org.postgresql.pljava.udt.byteorder.scalar org.postgresql.pljava.udt.byteorder.mirror to set them separately. The allowable values for each property are big_endian, little_endian, and native. Even finer-grained control is available with: org.postgresql.pljava.udt.byteorder.scalar.p2j org.postgresql.pljava.udt.byteorder.scalar.j2p org.postgresql.pljava.udt.byteorder.mirror.p2j org.postgresql.pljava.udt.byteorder.mirror.j2p for a very special purpose, should someone wish to attempt an UPDATE where within a session, a column with values written in one order gets rewritten in another, a fiddly and somewhat unnerving process that turns out to actually work, and has a full new page documenting it now./"
,,0.1677,pljava,"Initialize more lazily in background workers. In a background worker (in particular, one running ParallelWorkerMain), PL/Javas _PG_init can get called even if the parallel query being executed makes no reference to PL/Java functions. Thats because ParallelWorkerMain makes sure the same libraries are loaded that were present in the lead process, so if it had loaded PL/Java at any time, it gets loaded in the background worker ... quite early, and _PG_init gets called before much of the state it wants to look at has been set up. Detect that case and bail from the initsequencer as soon as possible (right after defining the custom GUCs), leaving all the rest to be completed when (if) any actual call arrives at the call handler. This prevents a baffling failure in parallel queries that make no use of PL/Java; even better, it also avoids starting JVMs unnecessarily in parallel queries that arent going to use them./"
,,0.1571,pljava,"Initialize more lazily in background workers. In a background worker (in particular, one running ParallelWorkerMain), PL/Javas _PG_init can get called even if the parallel query being executed makes no reference to PL/Java functions. Thats because ParallelWorkerMain makes sure the same libraries are loaded that were present in the lead process, so if it had loaded PL/Java at any time, it gets loaded in the background worker ... quite early, and _PG_init gets called before much of the state it wants to look at has been set up. Detect that case and bail from the initsequencer as soon as possible (right after defining the custom GUCs), leaving all the rest to be completed when (if) any actual call arrives at the call handler. This prevents a baffling failure in parallel queries that make no use of PL/Java; even better, it also avoids starting JVMs unnecessarily in parallel queries that arent going to use them./"
,,0.1508,pljava,"Merge pull request from tada/chore/REL1_5_STABLE/debuglevels Keep making DEBUG1 quieter./Keep making DEBUG1 quieter. These sites were missed in commit 1eb3bd8, trying to get the PL/Java-loaded-versions announcement to be the only thing at DEBUG1./"
,,0.1729,pljava,"Merge pull request from tada/bug/REL1_5_STABLE/loapi Do away with never-documented, long-broken LargeObject code./Do away with never-documented LargeObject code. In the run-up to releasing 1.5.0, the code to do with large objects was looked over in a very conservative and cautious way, as fits code that was never documented or presented as API and didnt have any test coverage, with little way of knowing whether some client code somewhere in the wild might have been developed around it. So, it got carefully updated to 64-bit offsets, and even had a vulnerability reported because it hadnt been updated to honor the object access controls added in 9.0. What all that very conservative analysis failed to notice was, thanks to a change made back in 77bfc34, coupled with the absence of test coverage, it has been about eleven years since the last chance anyone ever had of doing anything useful with a LargeObject instance. That makes the decision to do away with it much easier. In all the PostgreSQL versions PL/Java currently supports, all the functions needed to manipulate large objects are already exposed in SQL and usable through the JDBC/SPI, without any specific effort needed in PL/Java. For programming convenience, some later version (after Java 7 becomes the minimum requirement) could add a simple utility method to turn an integer LO fd from lo_open into a SeekableByteChannel that could then be used without further trips through SPI, but even that would be about optimization and convenience, not functionality./"
,,0.0936,pljava,Merge pull request from tada/bug/REL1_5_STABLE/pg_upgrade Address and document upgrade procedures./
,,0.0895,pljava,Merge pull request from tada/bug/REL1_5_STABLE/pg_upgrade Address and document upgrade procedures./
,,0.2082,pljava,"Merge branch bug/REL1_5_STABLE/issue146. Ensure, when returning RECORD or SETOF RECORD, that returned values are cast according to the types in the column definition list that SQL requires in the query following the function call./Document SETOF RECORD in ResultSet{Provider|Handle} Expand the API docs to explain the interaction with the calling querys column definition list when a function is declared to return SETOF RECORD. Except for the type-casting behavior change in ResultSetHandle for issue this is simply an exercise in documenting what currently happens./"
,,0.2162,pljava,"Merge branch bug/REL1_5_STABLE/issue146. Ensure, when returning RECORD or SETOF RECORD, that returned values are cast according to the types in the column definition list that SQL requires in the query following the function call./Document SETOF RECORD in ResultSet{Provider|Handle} Expand the API docs to explain the interaction with the calling querys column definition list when a function is declared to return SETOF RECORD. Except for the type-casting behavior change in ResultSetHandle for issue this is simply an exercise in documenting what currently happens./"
,,0.3022,pljava,"Merge branch bug/REL1_5_STABLE/issue146. Ensure, when returning RECORD or SETOF RECORD, that returned values are cast according to the types in the column definition list that SQL requires in the query following the function call./Do casts in ResultSetHandle by column definition list A function declared to return RECORD or SETOF RECORD is required by SQL to be followed by a column definition list in any query using it. If the function returns SETOF RECORD using ResultSetHandle, there is a possibility that one or more corresponding columns in the definition list and the ResultSet offered by ResultSetHandle differ in type. Let the type be cast automatically, just as it would be when using ResultSetProvider and storing each value into the output ResultSet. Also convert the SetOfRecordTest example to an annotation-style example and add an SQLAction that tests it. Addresses issue"
,,0.0645,pljava,Merge pull request from tada/bug/REL1_5_STABLE/issue134 Accomodate upstream SPI_push/pop API changes (issue
,,0.2988,pljava,"Merge branch bug/REL1_5_STABLE/issue146. Ensure, when returning RECORD or SETOF RECORD, that returned values are cast according to the types in the column definition list that SQL requires in the query following the function call./Do casts in ResultSetHandle by column definition list A function declared to return RECORD or SETOF RECORD is required by SQL to be followed by a column definition list in any query using it. If the function returns SETOF RECORD using ResultSetHandle, there is a possibility that one or more corresponding columns in the definition list and the ResultSet offered by ResultSetHandle differ in type. Let the type be cast automatically, just as it would be when using ResultSetProvider and storing each value into the output ResultSet. Also convert the SetOfRecordTest example to an annotation-style example and add an SQLAction that tests it. Addresses issue"
,,0.1931,pljava,"Let annotations give row-type parameters defaults. The annotation can now supply an array of strings as defaultValue for a parameter that has a row type (either the RECORD type, whose structure is unknown, or a named row type). In the case of RECORD, the only default that will be accepted is {} (the array of no strings). While a bit limiting, that is still just the ticket when a RECORD-typed parameter is being used to supply a function with an optional, arbitrary sequence of named, typed parameters. In the case of a named row type, the default should be an array of as many strings as the components of the type, and the strings should be castable to the corresponding component types. The DDR generator has no way to check that at compile time, but PostgreSQL will report the error at jar install time if there is a mismatch./"
,,0.3328,pljava,"Dont repeat yourself with UDT mappings. It was never satisfying to define a UDT in Java through annotations and still have the DDR generator give ""no mapping to an SQL type"" errors for functions accepting or returning that type. It was easy enough (if tedious) to work around by adding explicit type= or annotations, but the DDR generator had all the necessary information to figure that out without such manual help. Now it does, eliminating the tedium illustrated in To accommodate mappings added from the source being compiled, the protoMappings collection is now of TypeMirror instances rather than of Class instances. Still future work: also add implied ordering dependencies for uses of the new type (such as functions that have it as parameter or return types and have to follow the type declaration, as illustrated in or that are named in it as, for example, typmod in/out functions, and have to precede it)./"
,,0.3272,pljava,"Dont repeat yourself with UDT mappings. It was never satisfying to define a UDT in Java through annotations and still have the DDR generator give ""no mapping to an SQL type"" errors for functions accepting or returning that type. It was easy enough (if tedious) to work around by adding explicit type= or annotations, but the DDR generator had all the necessary information to figure that out without such manual help. Now it does, eliminating the tedium illustrated in To accommodate mappings added from the source being compiled, the protoMappings collection is now of TypeMirror instances rather than of Class instances. Still future work: also add implied ordering dependencies for uses of the new type (such as functions that have it as parameter or return types and have to follow the type declaration, as illustrated in or that are named in it as, for example, typmod in/out functions, and have to precede it)./"
,,0.336,pljava,"Dont repeat yourself with UDT mappings. It was never satisfying to define a UDT in Java through annotations and still have the DDR generator give ""no mapping to an SQL type"" errors for functions accepting or returning that type. It was easy enough (if tedious) to work around by adding explicit type= or annotations, but the DDR generator had all the necessary information to figure that out without such manual help. Now it does, eliminating the tedium illustrated in To accommodate mappings added from the source being compiled, the protoMappings collection is now of TypeMirror instances rather than of Class instances. Still future work: also add implied ordering dependencies for uses of the new type (such as functions that have it as parameter or return types and have to follow the type declaration, as illustrated in or that are named in it as, for example, typmod in/out functions, and have to precede it)./Merge pull request from trackjdbc/REL1_5_STABLE/udttypename Supplies one of the short-term improvements suggested in issue getSQLTypeName, and add a test. Provide one of the short-term solutions suggested in issue As the current PreparedStatement implementation does not get the inferred parameter types from PostgreSQL (which became possible with SPI only as recently as PostgreSQL 9.0), its setObject method must make a best effort to map in the other direction, finding the PostgreSQL type that corresponds to the Java parameter value. In one case, this is easily made much more reliable: when the Java parameter value is an SQLData instance (a UDT), and therefore has a getSQLTypeName method, unused until now. Add a test method (in the ComplexTuple UDT example) to confirm that the type is properly mapped when passed as a parameter to a PreparedStatement./"
,,0.1191,pljava,"Merge pull request bug/REL1_5_STABLE/issue155 Enables conversion of negative (before the epoch) timestamp values, which formerly threw an exception, so backward compatibility is not an issue for that case. Also avoids a double-counting of the fractional second, which can change the conversion result from what it formerly would have been, by a maximum of 1998 ms, average of 999 ms./Merge branch bug/REL1_5_STABLE/issue155 into HEAD Necessary to get the timestamp/timestamptz conversions XQuery types right./Correct errors in Timestamp (issue Review the arithmetic to make sure floored / and % are always done to preserve the constraint that the nanos component of the Java Timestamp class is always nonnegative, and to avoid double-counting the part of the fractional second that is represented in both the millis and the nanos components. Add SQLActions in the TypeRoundTripper to test this behavior. In passing, add conditionals for access in MSVC to the session_timezone GUC, for those PG versions where it has become possible, and avoid the work of computing tz in coerceDatum unless it is needed./"
,,0.2489,pljava,"SQLXML in/out of PreparedStatements / ResultSets. For PreparedStatement.setObject(col, x, Types.SQLXML) to work, its sufficient to mention the type in Oid.c. Getting the type back from the ResultSet already works, thanks to the Type_registerType() already done in SQLXMLImpl.c. However, the test in the getObject(col, SQLXML.class) needed fixing, as it was testing exact class equality, not whether it got an implementation of the desired interface. (In passing, reorder those methods to make clearer what JDBC revision brought them in.) The setObject overload without the explicit Types.SQLXML will not work yet, and simply adding addType(SQLXML.class,Types.SQLXML) in SPIConnection is not sufficient ... because that uses a hash table and therefore also depends on exact class equality; the full grody names of the implementing classes would have to be added. Or the mechanism would have to be fixed. Wondering why the out.updateObject(col, x) works, without giving an explicit type? That result set is already typed (by the column definition list you have to include in the query calling this RECORD-typed function). That method succeeding is /almost/ enough to make a subsequent ps.setObject(col, x) work right (because in succeeding, it primed the s_class2typeId cache in Oid); how would that be for spooky action at a distance? But that doesnt quite happen, because that cache is also a strict-class-equality hash map. At this point, implementing the various (get,set,update}SQLXML methods will be an easy formality, as they can be implemented in terms of the methods taking explicit types, which now work. Alas, this current behavior wont do for a 1.5.x release, because it would actually start producing SQLXML objects by default where old code may be expecting String. Before merging, this will need a way to suppress that automatic mapping but still allow the explicit kind. A subsequent major release can then go the rest of the way./"
,,0.0616,realm-java,Removed all the generated source files (issue
,,0.0616,realm-java,Removed all the generated source files (issue
,,0.0596,realm-java,Removed all the generated source files (issue
,,0.0636,realm-java,Removed all the generated source files (issue
,,0.0657,realm-java,Removed all the generated source files (issue
,,0.0677,realm-java,Removed all the generated source files (issue
,,0.0616,realm-java,Removed all the generated source files (issue
,,0.0616,realm-java,Removed all the generated source files (issue
,,0.0851,realm-java,"Moved the Table annotation into ""com.tightdb"" package (issue "".generated"" suffix in generated sources packages (issue configurable names of the generated classes (issue"
,,0.1536,realm-java,"Better workaround for relative URIs on OS X/Fixed the ""null folder"" bug in the code generator./Improved (and fixed) the ""field sorting"" mechanism./Various OS X related generator issues fixed/Improved field sorter to support multiple source folders (issue from errors to warnings for non-critical problems(issue the Table annotation into ""com.tightdb"" package (issue "".generated"" suffix in generated sources packages (issue configurable names of the generated classes (issue package name bugs in code generation (issue and issue specification of supported Java versions (issue"
,,0.0677,realm-java,Implemented configurable names of the generated classes (issue
,,0.0702,realm-java,Updated documentation for the new methods (issue and issue
,,0.0807,realm-java,Updated documentation for the new methods (issue and issue
,,0.079,realm-java,Disabled a few unit tests that were failing for known reasons/Fix for: Order of items in enum ColumnType updated to mach recent changes in the core library/
,,0.0872,realm-java,String conversion in both directions is complete except for an important FIXME in to_jstring() in util.h/
,,0.0669,realm-java,Adjusted docs and examples to the refactoring (issue and issue
,,0.0648,realm-java,Adjusted docs and examples to the refactoring (issue and issue
,,0.0669,realm-java,Adjusted docs and examples to the refactoring (issue and issue
,,0.0681,realm-java,Minor setup fixes./
,,0.0653,realm-java,Separated table and view column typed implementations (issue
,,0.0699,realm-java,"Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/debug added. Removed class reference in jni TR output, just the pointer now/"
,,0.0776,realm-java,"Merge pull request from mekjaer/gc-issue Gc issue. Implementation of Context in all tightdb objects/debug added. Removed class reference in jni TR output, just the pointer now/"
,,0.1068,realm-java,Merge pull request from mekjaer/namespace_typed_issue Namespace typed issue/avoiding namespace issue in typed table. Renames postion param to _rowIndex Simple test case added/
,,0.0814,realm-java,Supports new Version API (so far undocumented). Changed tableview->is_valid() to is_attached() Updated *.h files they must be autogenerated and not fixed by hand./
,,0.0795,realm-java,Supports new Version API (so far undocumented). Changed tableview->is_valid() to is_attached() Updated *.h files they must be autogenerated and not fixed by hand./
,,0.0814,realm-java,Supports new Version API (so far undocumented). Changed tableview->is_valid() to is_attached() Updated *.h files they must be autogenerated and not fixed by hand./
,,0.0776,realm-java,Supports new Version API (so far undocumented). Changed tableview->is_valid() to is_attached() Updated *.h files they must be autogenerated and not fixed by hand./
,,0.0814,realm-java,Supports new Version API (so far undocumented). Changed tableview->is_valid() to is_attached() Updated *.h files they must be autogenerated and not fixed by hand./
,,0.0757,realm-java,Supports new Version API (so far undocumented). Changed tableview->is_valid() to is_attached() Updated *.h files they must be autogenerated and not fixed by hand./
,,0.1048,realm-java,Merge pull request from zaki50/fix_typo fix typos/fix typos/Merge pull request from realm/kg-bug-timeout Unit test to expose timeout in finalizer/Merge branch kg-bug-timeout of github.com:realm/realm-java into kg-bug-timeout/Fixes
,,0.41100000000000003,realm-java,"Split base adapters into their own repository (#2702) Pros: Easier for CI. No need to rebuild everything for only adapter/component changes. Easier to build (smaller codebase). Everything related to Android interoperability is in one place. Will allow us to support new UI widgets faster. Keeps size/method count of main library as low as possible. Component repos will be more approachable to outside developers since they dont include a complicated build setup / native code. Issues in the right place. We already have 200+ issues in realm-java. Easier to make focused examples. Able to ship fixes and enhancements independently. We dont have to ship ""empty"" component releases in order to match version numbers. For benchmarks (keep any controversy out of the main repo). The Android eco system is migrating towards small focused libraries already. Cons: Discoverability Components have other versions than the main library. People have to find that version number. Website gets a bit more complex as we need to ship multiple Javadocs Developing on both adapters/components at the same time as a new release will be more difficult./Fix warnings in AdapterExample (#2580) * Fix warnings * Add missing newline * Add missing newline * Update AndroidManifest.xml/Merge pull request from realm/mc/bug/deprecate-getInstance Deprecate Realm.getInstance(Context)/"
,,0.429,realm-java,"Split base adapters into their own repository (#2702) Pros: Easier for CI. No need to rebuild everything for only adapter/component changes. Easier to build (smaller codebase). Everything related to Android interoperability is in one place. Will allow us to support new UI widgets faster. Keeps size/method count of main library as low as possible. Component repos will be more approachable to outside developers since they dont include a complicated build setup / native code. Issues in the right place. We already have 200+ issues in realm-java. Easier to make focused examples. Able to ship fixes and enhancements independently. We dont have to ship ""empty"" component releases in order to match version numbers. For benchmarks (keep any controversy out of the main repo). The Android eco system is migrating towards small focused libraries already. Cons: Discoverability Components have other versions than the main library. People have to find that version number. Website gets a bit more complex as we need to ship multiple Javadocs Developing on both adapters/components at the same time as a new release will be more difficult./"
,,0.4076,realm-java,"Split base adapters into their own repository (#2702) Pros: Easier for CI. No need to rebuild everything for only adapter/component changes. Easier to build (smaller codebase). Everything related to Android interoperability is in one place. Will allow us to support new UI widgets faster. Keeps size/method count of main library as low as possible. Component repos will be more approachable to outside developers since they dont include a complicated build setup / native code. Issues in the right place. We already have 200+ issues in realm-java. Easier to make focused examples. Able to ship fixes and enhancements independently. We dont have to ship ""empty"" component releases in order to match version numbers. For benchmarks (keep any controversy out of the main repo). The Android eco system is migrating towards small focused libraries already. Cons: Discoverability Components have other versions than the main library. People have to find that version number. Website gets a bit more complex as we need to ship multiple Javadocs Developing on both adapters/components at the same time as a new release will be more difficult./Fix warnings in AdapterExample (#2580) * Fix warnings * Add missing newline * Add missing newline * Update AndroidManifest.xml/Merge pull request from realm/mc/bug/deprecate-getInstance Deprecate Realm.getInstance(Context)/"
,,0.3885,realm-java,"Split base adapters into their own repository (#2702) Pros: Easier for CI. No need to rebuild everything for only adapter/component changes. Easier to build (smaller codebase). Everything related to Android interoperability is in one place. Will allow us to support new UI widgets faster. Keeps size/method count of main library as low as possible. Component repos will be more approachable to outside developers since they dont include a complicated build setup / native code. Issues in the right place. We already have 200+ issues in realm-java. Easier to make focused examples. Able to ship fixes and enhancements independently. We dont have to ship ""empty"" component releases in order to match version numbers. For benchmarks (keep any controversy out of the main repo). The Android eco system is migrating towards small focused libraries already. Cons: Discoverability Components have other versions than the main library. People have to find that version number. Website gets a bit more complex as we need to ship multiple Javadocs Developing on both adapters/components at the same time as a new release will be more difficult./Fix warnings in AdapterExample (#2580) * Fix warnings * Add missing newline * Add missing newline * Update AndroidManifest.xml/Merge pull request from realm/cm/lint-warnings-kotlin Fixed lint warnings in Kotlin project/Fixed lint warnings in Kotlin project/"
,,0.425,realm-java,"Split base adapters into their own repository (#2702) Pros: Easier for CI. No need to rebuild everything for only adapter/component changes. Easier to build (smaller codebase). Everything related to Android interoperability is in one place. Will allow us to support new UI widgets faster. Keeps size/method count of main library as low as possible. Component repos will be more approachable to outside developers since they dont include a complicated build setup / native code. Issues in the right place. We already have 200+ issues in realm-java. Easier to make focused examples. Able to ship fixes and enhancements independently. We dont have to ship ""empty"" component releases in order to match version numbers. For benchmarks (keep any controversy out of the main repo). The Android eco system is migrating towards small focused libraries already. Cons: Discoverability Components have other versions than the main library. People have to find that version number. Website gets a bit more complex as we need to ship multiple Javadocs Developing on both adapters/components at the same time as a new release will be more difficult./Fix warnings in AdapterExample (#2580) * Fix warnings * Add missing newline * Add missing newline * Update AndroidManifest.xml/"
,,0.4384,realm-java,"Split base adapters into their own repository (#2702) Pros: Easier for CI. No need to rebuild everything for only adapter/component changes. Easier to build (smaller codebase). Everything related to Android interoperability is in one place. Will allow us to support new UI widgets faster. Keeps size/method count of main library as low as possible. Component repos will be more approachable to outside developers since they dont include a complicated build setup / native code. Issues in the right place. We already have 200+ issues in realm-java. Easier to make focused examples. Able to ship fixes and enhancements independently. We dont have to ship ""empty"" component releases in order to match version numbers. For benchmarks (keep any controversy out of the main repo). The Android eco system is migrating towards small focused libraries already. Cons: Discoverability Components have other versions than the main library. People have to find that version number. Website gets a bit more complex as we need to ship multiple Javadocs Developing on both adapters/components at the same time as a new release will be more difficult./"
,,0.4234,realm-java,"Split base adapters into their own repository (#2702) Pros: Easier for CI. No need to rebuild everything for only adapter/component changes. Easier to build (smaller codebase). Everything related to Android interoperability is in one place. Will allow us to support new UI widgets faster. Keeps size/method count of main library as low as possible. Component repos will be more approachable to outside developers since they dont include a complicated build setup / native code. Issues in the right place. We already have 200+ issues in realm-java. Easier to make focused examples. Able to ship fixes and enhancements independently. We dont have to ship ""empty"" component releases in order to match version numbers. For benchmarks (keep any controversy out of the main repo). The Android eco system is migrating towards small focused libraries already. Cons: Discoverability Components have other versions than the main library. People have to find that version number. Website gets a bit more complex as we need to ship multiple Javadocs Developing on both adapters/components at the same time as a new release will be more difficult./"
,,0.066,realm-java,Merge pull request from realm/mc/bug/deprecate-getInstance Deprecate Realm.getInstance(Context)/
,,0.3532,realm-java,"Split base adapters into their own repository (#2702) Pros: Easier for CI. No need to rebuild everything for only adapter/component changes. Easier to build (smaller codebase). Everything related to Android interoperability is in one place. Will allow us to support new UI widgets faster. Keeps size/method count of main library as low as possible. Component repos will be more approachable to outside developers since they dont include a complicated build setup / native code. Issues in the right place. We already have 200+ issues in realm-java. Easier to make focused examples. Able to ship fixes and enhancements independently. We dont have to ship ""empty"" component releases in order to match version numbers. For benchmarks (keep any controversy out of the main repo). The Android eco system is migrating towards small focused libraries already. Cons: Discoverability Components have other versions than the main library. People have to find that version number. Website gets a bit more complex as we need to ship multiple Javadocs Developing on both adapters/components at the same time as a new release will be more difficult./Interface as supplement to extending RealmObject (#2599) * Backup * Add RealmModel * Modifying the annotation processor & byte code modification to use RealmModel, add UnitTests * fixing examples * WIP * fix Annotation processor * clean up * fix javadoc * add transformer tests & fix DynamicRealm tests * fixing tests * adding tests * adding tests * fixing tests for the realm-annotations-processor * add tests to cover more UC for RealmList * renamed POJO to RealmModel * reduce method count by using proxyState only in RealmObjectProxy * fix examples, no need to exclude RealmObject using Gson * making RealmList final, remove unused method & fixing APT test/"
,,0.1,realm-java,Merge pull request from realm/merge-ecbacf-to-master Fix merge from ecbacf to master/Use qualified name for model classes in generated code in order to avoid name conflict. (#3083) * use qualified name for model classes in generated code in order to avoid name conflict. * add model classes that test issue 3077. * update changelog for
,,0.3329,realm-java,"Forward all throwables but not only excpetions (#3126) For example the UnsatisfiedLinkError should cause the process terminated. This is the reason of all the time out issues we found for CI./Fix async transaction problem when async query already exist. (#2780) I have rewritten how async transactions works. Before they did this: 1) commitOnBackgroundThread() post REALM_CHANGED post onSuccess runnable The problem with that approach was that the REALM_CHANGED would be swallowed if async queries existed which meant that the async transaction would call onSuccess on an old version of the Realm (making it look like it didnt work). Instead we now do this: 2) commitOnBackgroundThread post runnable that calls HandlerController.handleAsyncTransactionCompleted(runnable) The special runnable is treated as a combined REALM_CHANGED + Callback, which makes it possible for us to queue up callbacks until we are finally able to trigger all of them. Unfortunately the Handler has poor support for this so it means that we no longer can detect if such a message is in the queue. This means that it introduces a slight chance of such a event plus a real REALM_CHANGED event to be in the message queue at the same time. I considered that acceptable (since it can already happen today), and since preventing this will introduce more complexity to something that is already entirely to complex./Fixed unit tests./"
,,0.2447,realm-java,"Add RealmQuery.in() (#3133) * Add RealmQuery.equalToAny() (#841) * PR feedback: equalToAny in * PR feedback: apply beginGroup() and endGroup() on in operator. We should use beginGroup() and endGroup() since equalTo(""a"") and in(""b"", ""c"", ""d"") does not equal to equalTo(""a"") and equalTo(""b"") or equalTo(""c"") or equalTo(""d""). * PR feedback: throws an IllegalArgumentException if values is an empty array. * Add a test, in_date() * Remove unnecessary tests. * Fix type fields in in_byte() * Add 3 tests, in_byte(), in_short() and in_int() * Update CHANGELOG.md for RealmQuery.in() * PR feedback: array version vargs version. * PR feedback: ++i i++ * PR feedback: fix javadocs. * PR feedback: remove unnecessary parenthesises. * PR feedback: revert the variable arguments version. * PR feedback: fix javadocs and improve error messages. * PR feedback: Extract the constant string literal from the hard-coded error message. * PR feedback: Adopt boxed type API. * PR feedback: add null tests. * Fix row_isValid * Fix openPreNullWithRequired * PR feedback: update javadocs. * PR feedback: use NoPrimaryKeyNullTypes for testing instead of AllTypes. * PR feedback: Revert AllTypes. * Revert automatic formatting. * Revert auto-formatting again. * PR feedback: remove unnecessay empty lines. * PR feedback: generalize tests. * PR feedback: update javadocs./ PrimaryKey index rearrangement in migration revisited (#2920) This PR fixes two issues; 1) When a column with a smaller index than that of a primary key field gets removed, the primary key field index decrements, which causes a cached primary key index to point a wrong field. 2) When a primary key field is renamed, the primary key meta table is not updated accordingly./addPrimaryKey() on RealmObjectSchema misses Index addition. (#2832) RealmObjectSchema.addPrimaryKey() is supposed to add a search index to its primary key field but it is currently missing. This is to fix the addition and removal of a search index related to primary key methods in RealmObjectSchema./"
,,0.0967,realm-java,Forward all throwables but not only excpetions (#3126) For example the UnsatisfiedLinkError should cause the process terminated. This is the reason of all the time out issues we found for CI./add a null check to addChangeListener and removeChangeListener (#2805) * add a null check to addChangeListener and removeChangeListener in Realm and DynamicRealm (fixes * reflect review comments/
,,0.2656,realm-java,Forward all throwables but not only excpetions (#3126) For example the UnsatisfiedLinkError should cause the process terminated. This is the reason of all the time out issues we found for CI./Race condition between Realm change notifications and UI events (#2990) This commit fixes a bug surfaced by our Realm Android Adapter example. Before this commit we posted all REALM_CHANGED events to the looper queue as normal. This meant that potential touch input events could get in front which in turn could cause a relayout of a ListView which would then crash because it detected a difference between its cached adapter size and the actual one. This commit now forces all local commits to be placed at the front of the queue eliminating that risk./
,,0.2306,realm-java,Race condition between Realm change notifications and UI events (#2990) This commit fixes a bug surfaced by our Realm Android Adapter example. Before this commit we posted all REALM_CHANGED events to the looper queue as normal. This meant that potential touch input events could get in front which in turn could cause a relayout of a ListView which would then crash because it detected a difference between its cached adapter size and the actual one. This commit now forces all local commits to be placed at the front of the queue eliminating that risk./
,,0.0934,realm-java,addPrimaryKey() on RealmObjectSchema misses Index addition. (#2832) RealmObjectSchema.addPrimaryKey() is supposed to add a search index to its primary key field but it is currently missing. This is to fix the addition and removal of a search index related to primary key methods in RealmObjectSchema./
,,0.2484,realm-java,"Add RealmQuery.in() (#3133) * Add RealmQuery.equalToAny() (#841) * PR feedback: equalToAny in * PR feedback: apply beginGroup() and endGroup() on in operator. We should use beginGroup() and endGroup() since equalTo(""a"") and in(""b"", ""c"", ""d"") does not equal to equalTo(""a"") and equalTo(""b"") or equalTo(""c"") or equalTo(""d""). * PR feedback: throws an IllegalArgumentException if values is an empty array. * Add a test, in_date() * Remove unnecessary tests. * Fix type fields in in_byte() * Add 3 tests, in_byte(), in_short() and in_int() * Update CHANGELOG.md for RealmQuery.in() * PR feedback: array version vargs version. * PR feedback: ++i i++ * PR feedback: fix javadocs. * PR feedback: remove unnecessary parenthesises. * PR feedback: revert the variable arguments version. * PR feedback: fix javadocs and improve error messages. * PR feedback: Extract the constant string literal from the hard-coded error message. * PR feedback: Adopt boxed type API. * PR feedback: add null tests. * Fix row_isValid * Fix openPreNullWithRequired * PR feedback: update javadocs. * PR feedback: use NoPrimaryKeyNullTypes for testing instead of AllTypes. * PR feedback: Revert AllTypes. * Revert automatic formatting. * Revert auto-formatting again. * PR feedback: remove unnecessay empty lines. * PR feedback: generalize tests. * PR feedback: update javadocs./Fixed unit tests./"
,,0.2525,realm-java,"Add RealmQuery.in() (#3133) * Add RealmQuery.equalToAny() (#841) * PR feedback: equalToAny in * PR feedback: apply beginGroup() and endGroup() on in operator. We should use beginGroup() and endGroup() since equalTo(""a"") and in(""b"", ""c"", ""d"") does not equal to equalTo(""a"") and equalTo(""b"") or equalTo(""c"") or equalTo(""d""). * PR feedback: throws an IllegalArgumentException if values is an empty array. * Add a test, in_date() * Remove unnecessary tests. * Fix type fields in in_byte() * Add 3 tests, in_byte(), in_short() and in_int() * Update CHANGELOG.md for RealmQuery.in() * PR feedback: array version vargs version. * PR feedback: ++i i++ * PR feedback: fix javadocs. * PR feedback: remove unnecessary parenthesises. * PR feedback: revert the variable arguments version. * PR feedback: fix javadocs and improve error messages. * PR feedback: Extract the constant string literal from the hard-coded error message. * PR feedback: Adopt boxed type API. * PR feedback: add null tests. * Fix row_isValid * Fix openPreNullWithRequired * PR feedback: update javadocs. * PR feedback: use NoPrimaryKeyNullTypes for testing instead of AllTypes. * PR feedback: Revert AllTypes. * Revert automatic formatting. * Revert auto-formatting again. * PR feedback: remove unnecessay empty lines. * PR feedback: generalize tests. * PR feedback: update javadocs./"
,,0.2072,realm-java,"Race condition between Realm change notifications and UI events (#2990) This commit fixes a bug surfaced by our Realm Android Adapter example. Before this commit we posted all REALM_CHANGED events to the looper queue as normal. This meant that potential touch input events could get in front which in turn could cause a relayout of a ListView which would then crash because it detected a difference between its cached adapter size and the actual one. This commit now forces all local commits to be placed at the front of the queue eliminating that risk./Fix listeners can exposing unsynchronized RealmResults (Async queries) (#2951) When async queries are updated, they call listeners in a specific order. Before this commit this had a very subtle bug, so accessing synchronous RealmResults from inside a async RealmResult listener might hit a detached row accessor. Reason being is that the Realm is advanced, then all listeners called in order, but RealmResults are not synchronised until just before listener is called. This commit fixes this so all RealmResults are now synced before the listener is called./Fixed unit tests./"
,,0.2884,realm-java,"Check transaction state for buld insertion (#3228) * Throws if they are not called in a transaction. * Test cases for buld insertion thread checking. * Lint warnings fix. Close all throwables but not only excpetions (#3126) For example the UnsatisfiedLinkError should cause the process terminated. This is the reason of all the time out issues we found for CI./Merge pull request from realm/merge-ecbacf-to-master Fix merge from ecbacf to master/Fix async transaction problem when async query already exist. (#2780) I have rewritten how async transactions works. Before they did this: 1) commitOnBackgroundThread() post REALM_CHANGED post onSuccess runnable The problem with that approach was that the REALM_CHANGED would be swallowed if async queries existed which meant that the async transaction would call onSuccess on an old version of the Realm (making it look like it didnt work). Instead we now do this: 2) commitOnBackgroundThread post runnable that calls HandlerController.handleAsyncTransactionCompleted(runnable) The special runnable is treated as a combined REALM_CHANGED + Callback, which makes it possible for us to queue up callbacks until we are finally able to trigger all of them. Unfortunately the Handler has poor support for this so it means that we no longer can detect if such a message is in the queue. This means that it introduces a slight chance of such a event plus a real REALM_CHANGED event to be in the message queue at the same time. I considered that acceptable (since it can already happen today), and since preventing this will introduce more complexity to something that is already entirely to complex./Race condition between Realm change notifications and UI events (#2990) This commit fixes a bug surfaced by our Realm Android Adapter example. Before this commit we posted all REALM_CHANGED events to the looper queue as normal. This meant that potential touch input events could get in front which in turn could cause a relayout of a ListView which would then crash because it detected a difference between its cached adapter size and the actual one. This commit now forces all local commits to be placed at the front of the queue eliminating that risk./Remove optional APIs if dependencies dont meet (#2727) * Add to mark a method as optional with dependencies. * New bytecode transformer to remove an optional API if it doesnt have enough dependencies. * Modify gradle plugin. * Mark the rx.Observable related APIs as optional. * Add integration-tests module. This is not the perfect solution since the RxObservableFactory is still in the final result. But it is good enough for us to work around the issue with Jackson and other lib which needs to do reflection on the RealmObject./Changed to throw IllegalStateException when setAutoRefresh() is called on non-Looper thread (#2820) * update Javadoc comment of setAutoRefresh() * Changed to throw IllegalStateException when BaseRealm.setAutoRefresh() is called from non-Looper thread even if the autoRefresh value is false/add a null check to addChangeListener and removeChangeListener (#2805) * add a null check to addChangeListener and removeChangeListener in Realm and DynamicRealm (fixes * reflect review comments/Removed all deprecated methods and fixed examples./"
,,0.1002,realm-java,Forward all throwables but not only excpetions (#3126) For example the UnsatisfiedLinkError should cause the process terminated. This is the reason of all the time out issues we found for CI./
,,0.3021,realm-java,"Fix async transaction problem when async query already exist. (#2780) I have rewritten how async transactions works. Before they did this: 1) commitOnBackgroundThread() post REALM_CHANGED post onSuccess runnable The problem with that approach was that the REALM_CHANGED would be swallowed if async queries existed which meant that the async transaction would call onSuccess on an old version of the Realm (making it look like it didnt work). Instead we now do this: 2) commitOnBackgroundThread post runnable that calls HandlerController.handleAsyncTransactionCompleted(runnable) The special runnable is treated as a combined REALM_CHANGED + Callback, which makes it possible for us to queue up callbacks until we are finally able to trigger all of them. Unfortunately the Handler has poor support for this so it means that we no longer can detect if such a message is in the queue. This means that it introduces a slight chance of such a event plus a real REALM_CHANGED event to be in the message queue at the same time. I considered that acceptable (since it can already happen today), and since preventing this will introduce more complexity to something that is already entirely to complex./"
,,0.3996,realm-java,"Add RealmQuery.in() (#3133) * Add RealmQuery.equalToAny() (#841) * PR feedback: equalToAny in * PR feedback: apply beginGroup() and endGroup() on in operator. We should use beginGroup() and endGroup() since equalTo(""a"") and in(""b"", ""c"", ""d"") does not equal to equalTo(""a"") and equalTo(""b"") or equalTo(""c"") or equalTo(""d""). * PR feedback: throws an IllegalArgumentException if values is an empty array. * Add a test, in_date() * Remove unnecessary tests. * Fix type fields in in_byte() * Add 3 tests, in_byte(), in_short() and in_int() * Update CHANGELOG.md for RealmQuery.in() * PR feedback: array version vargs version. * PR feedback: ++i i++ * PR feedback: fix javadocs. * PR feedback: remove unnecessary parenthesises. * PR feedback: revert the variable arguments version. * PR feedback: fix javadocs and improve error messages. * PR feedback: Extract the constant string literal from the hard-coded error message. * PR feedback: Adopt boxed type API. * PR feedback: add null tests. * Fix row_isValid * Fix openPreNullWithRequired * PR feedback: update javadocs. * PR feedback: use NoPrimaryKeyNullTypes for testing instead of AllTypes. * PR feedback: Revert AllTypes. * Revert automatic formatting. * Revert auto-formatting again. * PR feedback: remove unnecessay empty lines. * PR feedback: generalize tests. * PR feedback: update javadocs./Forward all throwables but not only excpetions (#3126) For example the UnsatisfiedLinkError should cause the process terminated. This is the reason of all the time out issues we found for CI./Fix async transaction problem when async query already exist. (#2780) I have rewritten how async transactions works. Before they did this: 1) commitOnBackgroundThread() post REALM_CHANGED post onSuccess runnable The problem with that approach was that the REALM_CHANGED would be swallowed if async queries existed which meant that the async transaction would call onSuccess on an old version of the Realm (making it look like it didnt work). Instead we now do this: 2) commitOnBackgroundThread post runnable that calls HandlerController.handleAsyncTransactionCompleted(runnable) The special runnable is treated as a combined REALM_CHANGED + Callback, which makes it possible for us to queue up callbacks until we are finally able to trigger all of them. Unfortunately the Handler has poor support for this so it means that we no longer can detect if such a message is in the queue. This means that it introduces a slight chance of such a event plus a real REALM_CHANGED event to be in the message queue at the same time. I considered that acceptable (since it can already happen today), and since preventing this will introduce more complexity to something that is already entirely to complex./Javadoc corrections for findAllSorted & findAllSortedAsync (#2811) Javadoc fix addressing the issue which could arise a confusion as to where one might search with a child RealmList or RealmObject field. * fix more javadoc/Removed all deprecated methods and fixed examples./"
,,0.3402,realm-java,"Forward all throwables but not only excpetions (#3126) For example the UnsatisfiedLinkError should cause the process terminated. This is the reason of all the time out issues we found for CI./Fix async transaction problem when async query already exist. (#2780) I have rewritten how async transactions works. Before they did this: 1) commitOnBackgroundThread() post REALM_CHANGED post onSuccess runnable The problem with that approach was that the REALM_CHANGED would be swallowed if async queries existed which meant that the async transaction would call onSuccess on an old version of the Realm (making it look like it didnt work). Instead we now do this: 2) commitOnBackgroundThread post runnable that calls HandlerController.handleAsyncTransactionCompleted(runnable) The special runnable is treated as a combined REALM_CHANGED + Callback, which makes it possible for us to queue up callbacks until we are finally able to trigger all of them. Unfortunately the Handler has poor support for this so it means that we no longer can detect if such a message is in the queue. This means that it introduces a slight chance of such a event plus a real REALM_CHANGED event to be in the message queue at the same time. I considered that acceptable (since it can already happen today), and since preventing this will introduce more complexity to something that is already entirely to complex./Race condition between Realm change notifications and UI events (#2990) This commit fixes a bug surfaced by our Realm Android Adapter example. Before this commit we posted all REALM_CHANGED events to the looper queue as normal. This meant that potential touch input events could get in front which in turn could cause a relayout of a ListView which would then crash because it detected a difference between its cached adapter size and the actual one. This commit now forces all local commits to be placed at the front of the queue eliminating that risk./Fix listeners can exposing unsynchronized RealmResults (Async queries) (#2951) When async queries are updated, they call listeners in a specific order. Before this commit this had a very subtle bug, so accessing synchronous RealmResults from inside a async RealmResult listener might hit a detached row accessor. Reason being is that the Realm is advanced, then all listeners called in order, but RealmResults are not synchronised until just before listener is called. This commit fixes this so all RealmResults are now synced before the listener is called./"
,,0.1539,realm-java,"JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./"
,,0.1524,realm-java,"JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./"
,,0.1329,realm-java,"JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./"
,,0.1464,realm-java,"JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./"
,,0.1164,realm-java,"JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./"
,,0.1554,realm-java,"JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./Wrong JNI function declaration caused test timeout (#2995) The worst thing is async query wont throw those exceptions in the background. * Rephrase changelog/"
,,0.1389,realm-java,"JNI clean up (#3010) * Enable and to ensure all global functions are defined with a proper declaration. JNI function not found problem can only be seen at run time, thus we need to do so. * Add static keyword for local functions. * Fix wrong JNI function declaration. * Remove useless functions. * TableView distinct should return void. * Rename JNI cpp files./"
,,0.08,realm-java,Smaller fixes to binary queries (#3323) * Updated changelog with credits * Fix potential memory leak * Add JniBytesArray helper class/
,,0.0876,realm-java,Smaller fixes to binary queries (#3323) * Updated changelog with credits * Fix potential memory leak * Add JniBytesArray helper class/
,,0.0988,realm-java,"Fix various minor issues/RAII wrapper for some JNI resources (#3959) * Move the global jvm pointer to JniUtils and add some helper functions. * Wrapper for jmethodID, global weak ref. * Refactor the wrapper for the local ref. * Before using the global weak ref, always try to acquire a local ref first since until Android 4.0 weak global references could only be passed to NewLocalRef, NewGlobalRef, and DeleteWeakGlobalRef. See for more details. This fix ./Handling Results exceptions. Adding support for contains/index_of/"
,,0.0978,realm-java,"RAII wrapper for some JNI resources (#3959) * Move the global jvm pointer to JniUtils and add some helper functions. * Wrapper for jmethodID, global weak ref. * Refactor the wrapper for the local ref. * Before using the global weak ref, always try to acquire a local ref first since until Android 4.0 weak global references could only be passed to NewLocalRef, NewGlobalRef, and DeleteWeakGlobalRef. See for more details. This fix ./Workaround for the Alooper and postAtFrontQueue See"
,,0.0697,realm-java,added field name information to exception messages (#4491) * add field name to the exception message when null is set to required field (#4484) * fix existing tests * fix cast style * update CHNAGELOG/Merge pull request from realm/merge-6d0712-to-master Fix merge from 6d0712 to master/fix warnings reported by ErrorProne (#4341)/
,,0.096,realm-java,added field name information to exception messages (#4491) * add field name to the exception message when null is set to required field (#4484) * fix existing tests * fix cast style * update CHNAGELOG/Merge pull request from realm/merge-dc09d5-to-master Fix merge from dc09d5 to master/Merge pull request from realm/merge-c72f2b-to-master Fix merge from c72f2b to master/Fix build base with core only (#4220) The error message shout be sync lib The util.hpp contains some sync only headers. It causes problem when build with core only for base flavour. We have an agreement that use macro to do casting should be avoided since it is less readable./
,,0.0814,realm-java,Add Gridview examples proguard configuration. (#5274) * Fix gridView. * Add missing proguard configuration file. * PR feedback./
,,0.0926,realm-java,"Merge pull request from realm/merge-1cf419-to-next-major Fix merge from 1cf419 to next-major/Nh/ros test tiemout (#5689) * Some Integration tests are running twice, checking if the TestSuite is causing this * Increase the start ROS connection read timeout * add logging to find out when ROS fails to start * adjusting ROS startup timeout * Fixed a pipline that causes all ABIs to build, despite selecting just one ( branch for example)/"
,,0.0926,realm-java,"Merge pull request from realm/merge-1cf419-to-next-major Fix merge from 1cf419 to next-major/Nh/ros test tiemout (#5689) * Some Integration tests are running twice, checking if the TestSuite is causing this * Increase the start ROS connection read timeout * add logging to find out when ROS fails to start * adjusting ROS startup timeout * Fixed a pipline that causes all ABIs to build, despite selecting just one ( branch for example)/"
,,0.0833,realm-java,Merge pull request from realm/merge-780a85-to-master Fix merge from 780a85 to master/Fixes (#6043) * Using Android Network Security Configuration to setup the test certificate for SSL tests/
,,0.0934,rocksdb,"Bugfixes for iterator and documentation. Fix bug in Iterator::Prev where it would return the wrong key. Fixes issues 29 and 30. Added a tweak to testharness to allow running just some tests. Fixing two minor documentation errors based on issues 28 and 25. Cleanup; fix namespaces of export-to-C code. Also fix one ""const char*"" vs ""char*"" mismatch. git-svn-id: 62dab493-f737-651d-591e-8d6aee1b9529/"
,,0.1119,rocksdb,"Bugfixes for iterator and documentation. Fix bug in Iterator::Prev where it would return the wrong key. Fixes issues 29 and 30. Added a tweak to testharness to allow running just some tests. Fixing two minor documentation errors based on issues 28 and 25. Cleanup; fix namespaces of export-to-C code. Also fix one ""const char*"" vs ""char*"" mismatch. git-svn-id: 62dab493-f737-651d-591e-8d6aee1b9529/"
,,0.1042,rocksdb,"Bugfixes for iterator and documentation. Fix bug in Iterator::Prev where it would return the wrong key. Fixes issues 29 and 30. Added a tweak to testharness to allow running just some tests. Fixing two minor documentation errors based on issues 28 and 25. Cleanup; fix namespaces of export-to-C code. Also fix one ""const char*"" vs ""char*"" mismatch. git-svn-id: 62dab493-f737-651d-591e-8d6aee1b9529/"
,,0.0534,rocksdb,Initialize sequence number in BatchResult issue
,,0.0806,rocksdb,"Print out stack trace in mac, too Summary: While debugging Mac-only issue with ThreadLocalPtr, this was very useful. Lets print out stack trace in MAC OS, too. Test Plan: Verified that somewhat useful stack trace was generated on mac. Will run PrintStack() on linux, too. Reviewers: ljin, haobo Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.1415,rocksdb,"Better stack trace in MAC Summary: Now this gives us the real deal stack trace: Assertion failed: (false), function GetProperty, file db/db_impl.cc, line 4072. Received signal 6 (Abort trap: 6) 0x7fff57ce39b9 abort (in libsystem_c.dylib) + 125 basename (in libsystem_c.dylib) + 0 rocksdb::DBImpl::GetProperty(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*) (in db_test) (db_impl.cc:4072) rocksdb::_Test_Empty::_Run() (in db_test) (testharness.h:68) rocksdb::_Test_Empty::_RunIt() (in db_test) (db_test.cc:1005) rocksdb::test::RunAllTests() (in db_test) (testharness.cc:60) main (in db_test) (db_test.cc:6697) start (in libdyld.dylib) + 1 Test Plan: added artificial assert, saw great stack trace Reviewers: haobo, dhruba, ljin Reviewed By: haobo CC: leveldb Differential Revision: stack trace handlers in unit tests Summary: Sometimes, our tests fail because of normal `assert` call. It would be helpful to see stack trace in that case, too. Test Plan: Added `assert(false)` and verified it prints out stack trace Reviewers: haobo, dhruba, sdong, ljin, yhchiang Reviewed By: haobo CC: leveldb Differential Revision: out stack trace in mac, too Summary: While debugging Mac-only issue with ThreadLocalPtr, this was very useful. Lets print out stack trace in MAC OS, too. Test Plan: Verified that somewhat useful stack trace was generated on mac. Will run PrintStack() on linux, too. Reviewers: ljin, haobo Reviewed By: haobo CC: leveldb Differential Revision:"
,,0.0699,rocksdb,hdfs cleanup; fix to NewDirectory to comply with definition in env.h fix compile error with env_test; static casts added/
,,0.0686,rocksdb,fix mis-named jar in JNI loader/
,,0.0621,rocksdb,Merge pull request from dalgaaf/wip-da-SCA-20141001 Fix some issues from SCA/
,,0.0577,rocksdb,Fix valgrind issue/
,,0.1511,rocksdb,Prevent xxhash symbols from polluting global namespace Summary: The functions and global symbols in xxhash.h and xxhash.cc were not in any namespace. This caused issues when rocksdb library was being used along with other uses of libraries with the same name Test Plan: unit tests Reviewers: CC: Task ID: Blame Rev:/
,,0.1446,rocksdb,Prevent xxhash symbols from polluting global namespace Summary: The functions and global symbols in xxhash.h and xxhash.cc were not in any namespace. This caused issues when rocksdb library was being used along with other uses of libraries with the same name Test Plan: unit tests Reviewers: CC: Task ID: Blame Rev:/
,,0.1743,rocksdb,"Address GCC compilation issues invalid suffix on literal no return statement in function returning non-void CuckooStep::operator= extra qualification ërocksdb::spatial::Variant:: dereferencing type-punned pointer will break strict-aliasing rules/Windows Port from Microsoft Summary: Make RocksDb build and run on Windows to be functionally complete and performant. All existing test cases run with no regressions. Performance numbers are in the pull-request. Test plan: make all of the existing unit tests pass, obtain perf numbers. Co-authored-by: Praveen Rao Co-authored-by: Sherlock Huang Co-authored-by: Alex Zinoviev Co-authored-by: Dmitri Smirnov"
,,0.1661,rocksdb,"Address GCC compilation issues invalid suffix on literal no return statement in function returning non-void CuckooStep::operator= extra qualification ërocksdb::spatial::Variant:: dereferencing type-punned pointer will break strict-aliasing rules/Windows Port from Microsoft Summary: Make RocksDb build and run on Windows to be functionally complete and performant. All existing test cases run with no regressions. Performance numbers are in the pull-request. Test plan: make all of the existing unit tests pass, obtain perf numbers. Co-authored-by: Praveen Rao Co-authored-by: Sherlock Huang Co-authored-by: Alex Zinoviev Co-authored-by: Dmitri Smirnov branch master of github.com:facebook/rocksdb D40233: Replace %llu with format macros in ParsedInternalKey::DebugString())/"
,,0.0865,rocksdb,Merge pull request from AMDmi3/printf-size_t Fix printf format for size_t/Fix printf format for size_t/
,,0.0725,rocksdb,Merge pull request from PraveenSinghRao/wal_filter_ex Avoid overloaded virtual function/Avoid overloaded virtual function/
,,0.063,rocksdb,Fix build issue. (#1103)/
,,0.2832,rocksdb,"Fix Iterator::Prev memory pinning bug Summary: We should not use IterKey::SetKey with copy false except if we are pinning the iterator thru its life time, otherwise we may release the temporarily pinned blocks and in this case the IterKey will be pointing to freed memory Test Plan: added a new test Reviewers: sdong, andrewkr Reviewed By: andrewkr Subscribers: andrewkr, dhruba Differential Revision: prefix_same_as_start to avoid iteration in FindNextUserEntryInternal. (#1102) This avoids excessive iteration in tombstone fields./Aggregate hot Iterator counters in LocalStatistics (DBIter::Next perf regression) Summary: This patch bump the counters in the frequent code path DBIter::Next() / DBIter::Prev() in a local data members and send them to Statistics when the iterator is destroyed A better solution will be to have thread_local implementation for Statistics New performance ``` readseq : 0.035 micros/op 28597881 ops/sec; 3163.7 MB/s 1,851,568,819 stalled-cycles-frontend 31.29% frontend cycles idle [49.86%] 884,929,823 stalled-cycles-backend 14.95% backend cycles idle [50.21%] readreverse : 0.071 micros/op 14077393 ops/sec; 1557.3 MB/s 3,239,575,993 stalled-cycles-frontend 27.36% frontend cycles idle [49.96%] 1,558,253,983 stalled-cycles-backend 13.16% backend cycles idle [50.14%] ``` Existing performance ``` readreverse : 0.174 micros/op 5732342 ops/sec; 634.1 MB/s 20,570,209,389 stalled-cycles-frontend 70.71% frontend cycles idle [50.01%] 18,422,816,837 stalled-cycles-backend 63.33% backend cycles idle [50.04%] readseq : 0.119 micros/op 8400537 ops/sec; 929.3 MB/s 15,634,225,844 stalled-cycles-frontend 79.07% frontend cycles idle [49.96%] 14,227,427,453 stalled-cycles-backend 71.95% backend cycles idle [50.09%] ``` Test Plan: unit tests Reviewers: yhchiang, sdong, igor Reviewed By: sdong Subscribers: andrewkr, dhruba Differential Revision:"
,,0.094,rocksdb,"Remove %z Format Specifier and Fix Windows Build of sim_cache.cc (#1224) * Replace %zu format specifier with Windows-compatible macro ROCKSDB_PRIszt * Added ""port/port.h"" include to sim_cache.cc for call to snprintf(). * Applied cleaner fix to windows build, reverting part of 7bedd94/"
,,0.1737,rocksdb,"Generalize Env registration framework Summary: The Env registration framework supports registering client Envs and selecting which one to instantiate according to a text field. This enabled things like adding the argument to db_bench, so the same binary could be reused with different Envs just by changing CLI config. Now this problem has come up again in a non-Env context, as I want to instantiate a client Statistics implementation from db_bench, which is configured entirely via text parameters. Also, in the future we may wish to use it for deserializing client objects when loading OPTIONS file. This diff generalizes the Env registration logic to work with arbitrary types. Generalized registration and instantiation code by templating them The entire implementation is in a header file as thats Google style guides recommendation for template definitions Pattern match with std::regex_match rather than checking prefix, which was the previous behavior Rename functions/files to be non-Env-specific Closes Differential Revision: D4421933 Pulled By: ajkr fbshipit-source-id: 34647d1/"
,,0.1634,rocksdb,"Generalize Env registration framework Summary: The Env registration framework supports registering client Envs and selecting which one to instantiate according to a text field. This enabled things like adding the argument to db_bench, so the same binary could be reused with different Envs just by changing CLI config. Now this problem has come up again in a non-Env context, as I want to instantiate a client Statistics implementation from db_bench, which is configured entirely via text parameters. Also, in the future we may wish to use it for deserializing client objects when loading OPTIONS file. This diff generalizes the Env registration logic to work with arbitrary types. Generalized registration and instantiation code by templating them The entire implementation is in a header file as thats Google style guides recommendation for template definitions Pattern match with std::regex_match rather than checking prefix, which was the previous behavior Rename functions/files to be non-Env-specific Closes Differential Revision: D4421933 Pulled By: ajkr fbshipit-source-id: 34647d1/"
,,0.0738,rocksdb,"Fix jni library name for PowerPC Architecture Summary: Right now, building rocksdbjava in PowerPC is broken due to JNI library name. I figured it out that ""uname and javas os.arch matches in PowerPC architecture. I made use of this advantage to fix the issue. More info can found from this issue Closes Differential Revision: D4779967 Pulled By: siying fbshipit-source-id: 259f939/"
,,0.3787,rocksdb,"util: Fix coverity issues Summary: util/concurrent_arena.h: CID 1396145 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member free_begin_ is not initialized in this constructor nor in any functions that it calls. 94 Shard() : allocated_and_unused_(0) {} util/dynamic_bloom.cc: 1. Condition hash_func NULL, taking true branch. CID 1322821 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 3. uninit_member: Non-static class member data_ is not initialized in this constructor nor in any functions that it calls. 47 hash_func_(hash_func nullptr ? &BloomHash : hash_func) {} 48 util/file_reader_writer.h: 204 private: 205 AlignedBuffer buffer_; member_not_init_in_gen_ctor: The compiler-generated constructor for this class does not initialize buffer_offset_. 206 uint64_t buffer_offset_; CID 1418246 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) member_not_init_in_gen_ctor: The compiler-generated constructor for this class does not initialize buffer_len_. 207 size_t buffer_len_; 208}; util/thread_local.cc: 341#endif CID 1322795 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 3. uninit_member: Non-static class member pthread_key_ is not initialized in this constructor nor in any functions that it calls. 342} 40struct ThreadData { 2. uninit_member: Non-static class member next is not initialized in this constructor nor in any functions that it calls. CID 1400668 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 4. uninit_member: Non-static class member prev is not initialized in this constructor nor in any functions that it calls. 41 explicit ThreadData(ThreadLocalPtr::StaticMeta* _inst) : entries(), inst(_inst) {} 42 std::vector<Entry> entries; 1. member_decl: Class member declaration for next. 43 ThreadData* next; 3. member_decl: Class member declaration for prev. 44 ThreadData* prev; 45 ThreadLocalPtr::StaticMeta* inst; 46}; Closes Differential Revision: D6233566 Pulled By: sagar0 fbshipit-source-id: aa2068790ea69787a0035c0db39d59b0c25108db/"
,,0.3745,rocksdb,"util: Fix coverity issues Summary: util/concurrent_arena.h: CID 1396145 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member free_begin_ is not initialized in this constructor nor in any functions that it calls. 94 Shard() : allocated_and_unused_(0) {} util/dynamic_bloom.cc: 1. Condition hash_func NULL, taking true branch. CID 1322821 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 3. uninit_member: Non-static class member data_ is not initialized in this constructor nor in any functions that it calls. 47 hash_func_(hash_func nullptr ? &BloomHash : hash_func) {} 48 util/file_reader_writer.h: 204 private: 205 AlignedBuffer buffer_; member_not_init_in_gen_ctor: The compiler-generated constructor for this class does not initialize buffer_offset_. 206 uint64_t buffer_offset_; CID 1418246 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) member_not_init_in_gen_ctor: The compiler-generated constructor for this class does not initialize buffer_len_. 207 size_t buffer_len_; 208}; util/thread_local.cc: 341#endif CID 1322795 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 3. uninit_member: Non-static class member pthread_key_ is not initialized in this constructor nor in any functions that it calls. 342} 40struct ThreadData { 2. uninit_member: Non-static class member next is not initialized in this constructor nor in any functions that it calls. CID 1400668 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 4. uninit_member: Non-static class member prev is not initialized in this constructor nor in any functions that it calls. 41 explicit ThreadData(ThreadLocalPtr::StaticMeta* _inst) : entries(), inst(_inst) {} 42 std::vector<Entry> entries; 1. member_decl: Class member declaration for next. 43 ThreadData* next; 3. member_decl: Class member declaration for prev. 44 ThreadData* prev; 45 ThreadLocalPtr::StaticMeta* inst; 46}; Closes Differential Revision: D6233566 Pulled By: sagar0 fbshipit-source-id: aa2068790ea69787a0035c0db39d59b0c25108db/"
,,0.3713,rocksdb,"util: Fix coverity issues Summary: util/concurrent_arena.h: CID 1396145 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member free_begin_ is not initialized in this constructor nor in any functions that it calls. 94 Shard() : allocated_and_unused_(0) {} util/dynamic_bloom.cc: 1. Condition hash_func NULL, taking true branch. CID 1322821 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 3. uninit_member: Non-static class member data_ is not initialized in this constructor nor in any functions that it calls. 47 hash_func_(hash_func nullptr ? &BloomHash : hash_func) {} 48 util/file_reader_writer.h: 204 private: 205 AlignedBuffer buffer_; member_not_init_in_gen_ctor: The compiler-generated constructor for this class does not initialize buffer_offset_. 206 uint64_t buffer_offset_; CID 1418246 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) member_not_init_in_gen_ctor: The compiler-generated constructor for this class does not initialize buffer_len_. 207 size_t buffer_len_; 208}; util/thread_local.cc: 341#endif CID 1322795 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 3. uninit_member: Non-static class member pthread_key_ is not initialized in this constructor nor in any functions that it calls. 342} 40struct ThreadData { 2. uninit_member: Non-static class member next is not initialized in this constructor nor in any functions that it calls. CID 1400668 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 4. uninit_member: Non-static class member prev is not initialized in this constructor nor in any functions that it calls. 41 explicit ThreadData(ThreadLocalPtr::StaticMeta* _inst) : entries(), inst(_inst) {} 42 std::vector<Entry> entries; 1. member_decl: Class member declaration for next. 43 ThreadData* next; 3. member_decl: Class member declaration for prev. 44 ThreadData* prev; 45 ThreadLocalPtr::StaticMeta* inst; 46}; Closes Differential Revision: D6233566 Pulled By: sagar0 fbshipit-source-id: aa2068790ea69787a0035c0db39d59b0c25108db/"
,,0.4484,rocksdb,Fix coverity issues in include/rocksdb Summary: include/rocksdb/metadata.h: struct ColumnFamilyMetaData { CID 1322804 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 2. uninit_member: Non-static class member file_count is not initialized in this constructor nor in any functions that it calls. struct SstFileMetaData { 2. uninit_member: Non-static class member size is not initialized in this constructor nor in any functions that it calls. 4. uninit_member: Non-static class member smallest_seqno is not initialized in this constructor nor in any functions that it calls. 6. uninit_member: Non-static class member largest_seqno is not initialized in this constructor nor in any functions that it calls. 8. uninit_member: Non-static class member num_reads_sampled is not initialized in this constructor nor in any functions that it calls. CID 1322807 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 10. uninit_member: Non-static class member being_compacted is not initialized in this constructor nor in any functions that it calls. include/rocksdb/sst_file_writer.h: struct ExternalSstFileInfo { 2. uninit_member: Non-static class member sequence_number is not initialized in this constructor nor in any functions that it calls. 4. uninit_member: Non-static class member file_size is not initialized in this constructor nor in any functions that it calls. 6. uninit_member: Non-static class member num_entries is not initialized in this constructor nor in any functions that it calls. CID 1351697 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 8. uninit_member: Non-static class member version is not initialized in this constructor nor in any functions that it calls. 31 ExternalSstFileInfo() {} include/rocksdb/utilities/transaction.h: explicit Transaction(const TransactionDB* db) {} 2. uninit_member: Non-static class member log_number_ is not initialized in this constructor nor in any functions that it calls. CID 1396133 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 4. uninit_member: Non-static class member field txn_state_._M_i is not initialized in this constructor nor in any functions that it calls. 473 Transaction() {} Closes Differential Revision: D6227651 Pulled By: sagar0 fbshipit-source-id: 5caa4a2cf9471d1f9c3c073f81473636e1f0aa14/
,,0.4502,rocksdb,Fix coverity issues in include/rocksdb Summary: include/rocksdb/metadata.h: struct ColumnFamilyMetaData { CID 1322804 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 2. uninit_member: Non-static class member file_count is not initialized in this constructor nor in any functions that it calls. struct SstFileMetaData { 2. uninit_member: Non-static class member size is not initialized in this constructor nor in any functions that it calls. 4. uninit_member: Non-static class member smallest_seqno is not initialized in this constructor nor in any functions that it calls. 6. uninit_member: Non-static class member largest_seqno is not initialized in this constructor nor in any functions that it calls. 8. uninit_member: Non-static class member num_reads_sampled is not initialized in this constructor nor in any functions that it calls. CID 1322807 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 10. uninit_member: Non-static class member being_compacted is not initialized in this constructor nor in any functions that it calls. include/rocksdb/sst_file_writer.h: struct ExternalSstFileInfo { 2. uninit_member: Non-static class member sequence_number is not initialized in this constructor nor in any functions that it calls. 4. uninit_member: Non-static class member file_size is not initialized in this constructor nor in any functions that it calls. 6. uninit_member: Non-static class member num_entries is not initialized in this constructor nor in any functions that it calls. CID 1351697 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 8. uninit_member: Non-static class member version is not initialized in this constructor nor in any functions that it calls. 31 ExternalSstFileInfo() {} include/rocksdb/utilities/transaction.h: explicit Transaction(const TransactionDB* db) {} 2. uninit_member: Non-static class member log_number_ is not initialized in this constructor nor in any functions that it calls. CID 1396133 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 4. uninit_member: Non-static class member field txn_state_._M_i is not initialized in this constructor nor in any functions that it calls. 473 Transaction() {} Closes Differential Revision: D6227651 Pulled By: sagar0 fbshipit-source-id: 5caa4a2cf9471d1f9c3c073f81473636e1f0aa14/
,,0.4338,rocksdb,Fix coverity issues in include/rocksdb Summary: include/rocksdb/metadata.h: struct ColumnFamilyMetaData { CID 1322804 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 2. uninit_member: Non-static class member file_count is not initialized in this constructor nor in any functions that it calls. struct SstFileMetaData { 2. uninit_member: Non-static class member size is not initialized in this constructor nor in any functions that it calls. 4. uninit_member: Non-static class member smallest_seqno is not initialized in this constructor nor in any functions that it calls. 6. uninit_member: Non-static class member largest_seqno is not initialized in this constructor nor in any functions that it calls. 8. uninit_member: Non-static class member num_reads_sampled is not initialized in this constructor nor in any functions that it calls. CID 1322807 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 10. uninit_member: Non-static class member being_compacted is not initialized in this constructor nor in any functions that it calls. include/rocksdb/sst_file_writer.h: struct ExternalSstFileInfo { 2. uninit_member: Non-static class member sequence_number is not initialized in this constructor nor in any functions that it calls. 4. uninit_member: Non-static class member file_size is not initialized in this constructor nor in any functions that it calls. 6. uninit_member: Non-static class member num_entries is not initialized in this constructor nor in any functions that it calls. CID 1351697 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 8. uninit_member: Non-static class member version is not initialized in this constructor nor in any functions that it calls. 31 ExternalSstFileInfo() {} include/rocksdb/utilities/transaction.h: explicit Transaction(const TransactionDB* db) {} 2. uninit_member: Non-static class member log_number_ is not initialized in this constructor nor in any functions that it calls. CID 1396133 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 4. uninit_member: Non-static class member field txn_state_._M_i is not initialized in this constructor nor in any functions that it calls. 473 Transaction() {} Closes Differential Revision: D6227651 Pulled By: sagar0 fbshipit-source-id: 5caa4a2cf9471d1f9c3c073f81473636e1f0aa14/Add TransactionDB::SingleDelete() Summary: Looks like the API is simply missing. Adding it. Closes Differential Revision: D5919955 Pulled By: yiwu-arbug fbshipit-source-id: 6e2e9c96c29882b0bb4113d1f8efb72bffc57878/
,,0.2943,rocksdb,"Fix coverity issues column_family, compaction_db/iterator Summary: db/column_family.h : 79 ColumnFamilyHandleInternal() CID 1322806 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member internal_cfd_ is not initialized in this constructor nor in any functions that it calls. 80 : ColumnFamilyHandleImpl(nullptr, nullptr, nullptr) {} db/compacted_db_impl.cc: 18CompactedDBImpl::CompactedDBImpl( 19 const DBOptions& options, const std::string& dbname) 20 : DBImpl(options, dbname) { 2. uninit_member: Non-static class member cfd_ is not initialized in this constructor nor in any functions that it calls. 4. uninit_member: Non-static class member version_ is not initialized in this constructor nor in any functions that it calls. CID 1396120 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 6. uninit_member: Non-static class member user_comparator_ is not initialized in this constructor nor in any functions that it calls. 21} db/compaction_iterator.cc: 9. uninit_member: Non-static class member current_user_key_sequence_ is not initialized in this constructor nor in any functions that it calls. 11. uninit_member: Non-static class member current_user_key_snapshot_ is not initialized in this constructor nor in any functions that it calls. CID 1419855 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 13. uninit_member: Non-static class member current_key_committed_ is not initialized in this constructor nor in any functions that it calls. Closes Differential Revision: D6172999 Pulled By: sagar0 fbshipit-source-id: 084d73393faf8022c01359cfb445807b6a782460/Fix a typo in a comment Summary: instad of for specific level instead of a specific level Closes Differential Revision: D6090811 Pulled By: sagar0 fbshipit-source-id: 499edef0a6f596c448f61791e6aca8f5cce08e9c/"
,,0.3168,rocksdb,"Fix coverity issues column_family, compaction_db/iterator Summary: db/column_family.h : 79 ColumnFamilyHandleInternal() CID 1322806 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member internal_cfd_ is not initialized in this constructor nor in any functions that it calls. 80 : ColumnFamilyHandleImpl(nullptr, nullptr, nullptr) {} db/compacted_db_impl.cc: 18CompactedDBImpl::CompactedDBImpl( 19 const DBOptions& options, const std::string& dbname) 20 : DBImpl(options, dbname) { 2. uninit_member: Non-static class member cfd_ is not initialized in this constructor nor in any functions that it calls. 4. uninit_member: Non-static class member version_ is not initialized in this constructor nor in any functions that it calls. CID 1396120 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 6. uninit_member: Non-static class member user_comparator_ is not initialized in this constructor nor in any functions that it calls. 21} db/compaction_iterator.cc: 9. uninit_member: Non-static class member current_user_key_sequence_ is not initialized in this constructor nor in any functions that it calls. 11. uninit_member: Non-static class member current_user_key_snapshot_ is not initialized in this constructor nor in any functions that it calls. CID 1419855 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 13. uninit_member: Non-static class member current_key_committed_ is not initialized in this constructor nor in any functions that it calls. Closes Differential Revision: D6172999 Pulled By: sagar0 fbshipit-source-id: 084d73393faf8022c01359cfb445807b6a782460/"
,,0.1276,rocksdb,options: Fix coverity issues Summary: options/cf_options.cc: 77 memtable_insert_with_hint_prefix_extractor( CID 1396208 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 2. uninit_member: Non-static class member info_log_level is not initialized in this constructor nor in any functions that it calls. Closes Differential Revision: D6874689 Pulled By: sagar0 fbshipit-source-id: b5cd2d13915fd86d87260050f9c5d117615bbe30/
,,0.1102,rocksdb,Suppress lint in old files Summary: Grandfather in super old lint issues to make a clean slate for moving forward that allows us to have stronger enforcement on new issues. Reviewed By: yiwu-arbug Differential Revision: D6821806 fbshipit-source-id: 22797d31ec58e9eb0255d3b66fedfcfcb0dc127c/
,,0.0995,rocksdb,Suppress lint in old files Summary: Grandfather in super old lint issues to make a clean slate for moving forward that allows us to have stronger enforcement on new issues. Reviewed By: yiwu-arbug Differential Revision: D6821806 fbshipit-source-id: 22797d31ec58e9eb0255d3b66fedfcfcb0dc127c/
,,0.1102,rocksdb,Suppress lint in old files Summary: Grandfather in super old lint issues to make a clean slate for moving forward that allows us to have stronger enforcement on new issues. Reviewed By: yiwu-arbug Differential Revision: D6821806 fbshipit-source-id: 22797d31ec58e9eb0255d3b66fedfcfcb0dc127c/
,,0.11199999999999999,rocksdb,Suppress lint in old files Summary: Grandfather in super old lint issues to make a clean slate for moving forward that allows us to have stronger enforcement on new issues. Reviewed By: yiwu-arbug Differential Revision: D6821806 fbshipit-source-id: 22797d31ec58e9eb0255d3b66fedfcfcb0dc127c/
,,0.1102,rocksdb,Suppress lint in old files Summary: Grandfather in super old lint issues to make a clean slate for moving forward that allows us to have stronger enforcement on new issues. Reviewed By: yiwu-arbug Differential Revision: D6821806 fbshipit-source-id: 22797d31ec58e9eb0255d3b66fedfcfcb0dc127c/
,,0.1048,rocksdb,Suppress lint in old files Summary: Grandfather in super old lint issues to make a clean slate for moving forward that allows us to have stronger enforcement on new issues. Reviewed By: yiwu-arbug Differential Revision: D6821806 fbshipit-source-id: 22797d31ec58e9eb0255d3b66fedfcfcb0dc127c/
,,0.1066,rocksdb,Suppress lint in old files Summary: Grandfather in super old lint issues to make a clean slate for moving forward that allows us to have stronger enforcement on new issues. Reviewed By: yiwu-arbug Differential Revision: D6821806 fbshipit-source-id: 22797d31ec58e9eb0255d3b66fedfcfcb0dc127c/
,,0.1013,rocksdb,Suppress lint in old files Summary: Grandfather in super old lint issues to make a clean slate for moving forward that allows us to have stronger enforcement on new issues. Reviewed By: yiwu-arbug Differential Revision: D6821806 fbshipit-source-id: 22797d31ec58e9eb0255d3b66fedfcfcb0dc127c/
,,0.3598,rocksdb,"Suppress lint in old files Summary: Grandfather in super old lint issues to make a clean slate for moving forward that allows us to have stronger enforcement on new issues. Reviewed By: yiwu-arbug Differential Revision: D6821806 fbshipit-source-id: 22797d31ec58e9eb0255d3b66fedfcfcb0dc127c/utilities: Fix coverity issues Summary: ``` utilities/persistent_cache/block_cache_tier_file.cc 64struct CacheRecordHeader { 2. uninit_member: Non-static class member magic_ is not initialized in this constructor nor in any functions that it calls. 4. uninit_member: Non-static class member crc_ is not initialized in this constructor nor in any functions that it calls. 6. uninit_member: Non-static class member key_size_ is not initialized in this constructor nor in any functions that it calls. CID 1396161 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 8. uninit_member: Non-static class member val_size_ is not initialized in this constructor nor in any functions that it calls. 65 CacheRecordHeader() {} 66 CacheRecordHeader(const uint32_t magic, const uint32_t key_size, 67 const uint32_t val_size) 68 : magic_(magic), crc_(0), key_size_(key_size), val_size_(val_size) {} 69 1. member_decl: Class member declaration for magic_. 70 uint32_t magic_; 3. member_decl: Class member declaration for crc_. 71 uint32_t crc_; 5. member_decl: Class member declaration for key_size_. 72 uint32_t key_size_; 7. member_decl: Class member declaration for val_size_. 73 uint32_t val_size_; 74}; utilities/simulator_cache/sim_cache.cc: 157 miss_times_(0), CID 1396124 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member stats_ is not initialized in this constructor nor in any functions that it calls. 158 hit_times_(0) {} 159 ``` Closes Differential Revision: D6427237 Pulled By: sagar0 fbshipit-source-id: 97e493da5fc043c5b9a3e0d33103442cffb75aad/"
,,0.4256,rocksdb,"fix backup meta-file buffer overrun Summary: check most times after calling snprintf that the buffer didnt fill up. Previously wed proceed and use `buf_size len` as the length in subsequent calls, which underflowed as those are unsigned size_t. replace some memcpys with snprintf for consistency Closes Differential Revision: D6541464 Pulled By: ajkr fbshipit-source-id: 8610ea6a24f38e0a37c6d17bc65b7c712da6d932/utilities/backupable : Fix coverity issues Summary: 1. Class BackupMeta ``` 52 : timestamp_(0), size_(0), meta_filename_(meta_filename), CID 1168103 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 2. uninit_member: Non-static class member sequence_number_ is not initialized in this constructor nor in any functions that it calls. 153 file_infos_(file_infos), env_(env) {} ``` 2. class BackupEngineImpl ``` 513 } 7. uninit_member: Non-static class member latest_backup_id_ is not initialized in this constructor nor in any functions that it calls. CID 1322803 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 9. uninit_member: Non-static class member latest_valid_backup_id_ is not initialized in this constructor nor in any functions that it calls. 514} ``` 3. struct BackupAfterCopyOrCreateWorkItem ``` 368 struct BackupAfterCopyOrCreateWorkItem { 369 std::future<CopyOrCreateResult> result; 1. member_decl: Class member declaration for shared. 370 bool shared; 3. member_decl: Class member declaration for needed_to_copy. 371 bool needed_to_copy; 5. member_decl: Class member declaration for backup_env. 372 Env* backup_env; 373 std::string dst_path_tmp; 374 std::string dst_path; 375 std::string dst_relative; 2. uninit_member: Non-static class member shared is not initialized in this constructor nor in any functions that it calls. 4. uninit_member: Non-static class member needed_to_copy is not initialized in this constructor nor in any functions that it calls. CID 1396122 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 6. uninit_member: Non-static class member backup_env is not initialized in this constructor nor in any functions that it calls. 376 BackupAfterCopyOrCreateWorkItem() {} ``` 4. struct CopyOrCreateWorkItem ``` 318 struct CopyOrCreateWorkItem { 319 std::string src_path; 320 std::string dst_path; 321 std::string contents; 1. member_decl: Class member declaration for src_env. 322 Env* src_env; 3. member_decl: Class member declaration for dst_env. 323 Env* dst_env; 5. member_decl: Class member declaration for sync. 324 bool sync; 7. member_decl: Class member declaration for rate_limiter. 325 RateLimiter* rate_limiter; 9. member_decl: Class member declaration for size_limit. 326 uint64_t size_limit; 327 std::promise<CopyOrCreateResult> result; 328 std::function<void()> progress_callback; 329 2. uninit_member: Non-static class member src_env is not initialized in this constructor nor in any functions that it calls. 4. uninit_member: Non-static class member dst_env is not initialized in this constructor nor in any functions that it calls. 6. uninit_member: Non-static class member sync is not initialized in this constructor nor in any functions that it calls. 8. uninit_member: Non-static class member rate_limiter is not initialized in this constructor nor in any functions that it calls. CID 1396123 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 10. uninit_member: Non-static class member size_limit is not initialized in this constructor nor in any functions that it calls. 330 CopyOrCreateWorkItem() {} ``` 5. struct RestoreAfterCopyOrCreateWorkItem ``` struct RestoreAfterCopyOrCreateWorkItem { 410 std::future<CopyOrCreateResult> result; 1. member_decl: Class member declaration for checksum_value. 411 uint32_t checksum_value; CID 1396153 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 2. uninit_member: Non-static class member checksum_value is not initialized in this constructor nor in any functions that it calls. 412 RestoreAfterCopyOrCreateWorkItem() {} ``` Closes Differential Revision: D6428556 Pulled By: sagar0 fbshipit-source-id: a86675444543eff028e3cae6942197a143a112c4/"
,,0.3338,rocksdb,"utilities: Fix coverity issues in blob_db and col_buf_decoder Summary: utilities/blob_db/blob_db_impl.cc 265 : bdb_options_.blob_dir; 3. uninit_member: Non-static class member env_ is not initialized in this constructor nor in any functions that it calls. 5. uninit_member: Non-static class member ttl_extractor_ is not initialized in this constructor nor in any functions that it calls. 7. uninit_member: Non-static class member open_p1_done_ is not initialized in this constructor nor in any functions that it calls. CID 1418245 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 9. uninit_member: Non-static class member debug_level_ is not initialized in this constructor nor in any functions that it calls. 266} 4. past_the_end: Function end creates an iterator. CID 1418258 (#1 of 1): Using invalid iterator (INVALIDATE_ITERATOR) 5. deref_iterator: Dereferencing iterator file_nums.end() though it is already past the end of its container. utilities/col_buf_decoder.h: nullable_(nullable), 2. uninit_member: Non-static class member remain_runs_ is not initialized in this constructor nor in any functions that it calls. 4. uninit_member: Non-static class member run_val_ is not initialized in this constructor nor in any functions that it calls. CID 1396134 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 6. uninit_member: Non-static class member last_val_ is not initialized in this constructor nor in any functions that it calls. 46 big_endian_(big_endian) {} Closes Differential Revision: D6340607 Pulled By: sagar0 fbshipit-source-id: 25c52566e2ff979fe6c7abb0f40c27fc16597054/"
,,0.349,rocksdb,"utilities: Fix coverity issues Summary: ``` utilities/persistent_cache/block_cache_tier_file.cc 64struct CacheRecordHeader { 2. uninit_member: Non-static class member magic_ is not initialized in this constructor nor in any functions that it calls. 4. uninit_member: Non-static class member crc_ is not initialized in this constructor nor in any functions that it calls. 6. uninit_member: Non-static class member key_size_ is not initialized in this constructor nor in any functions that it calls. CID 1396161 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 8. uninit_member: Non-static class member val_size_ is not initialized in this constructor nor in any functions that it calls. 65 CacheRecordHeader() {} 66 CacheRecordHeader(const uint32_t magic, const uint32_t key_size, 67 const uint32_t val_size) 68 : magic_(magic), crc_(0), key_size_(key_size), val_size_(val_size) {} 69 1. member_decl: Class member declaration for magic_. 70 uint32_t magic_; 3. member_decl: Class member declaration for crc_. 71 uint32_t crc_; 5. member_decl: Class member declaration for key_size_. 72 uint32_t key_size_; 7. member_decl: Class member declaration for val_size_. 73 uint32_t val_size_; 74}; utilities/simulator_cache/sim_cache.cc: 157 miss_times_(0), CID 1396124 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member stats_ is not initialized in this constructor nor in any functions that it calls. 158 hit_times_(0) {} 159 ``` Closes Differential Revision: D6427237 Pulled By: sagar0 fbshipit-source-id: 97e493da5fc043c5b9a3e0d33103442cffb75aad/"
,,0.5522,rocksdb,"table: Fix coverity issues Summary: table/block.cc: 420 } CID 1396127 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 7. uninit_member: Non-static class member restart_offset_ is not initialized in this constructor nor in any functions that it calls. 421} table/block_based_table_builder.cc: CID 1418259 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 7. uninit_member: Non-static class member compressed_cache_key_prefix_size is not initialized in this constructor nor in any functions that it calls. table/block_based_table_reader.h: 3. uninit_member: Non-static class member index_type is not initialized in this constructor nor in any functions that it calls. CID 1396147 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 5. uninit_member: Non-static class member hash_index_allow_collision is not initialized in this constructor nor in any functions that it calls. 413 global_seqno(kDisableGlobalSequenceNumber) {} 414 table/cuckoo_table_reader.cc: 55 if (hash_funs user_props.end()) { 56 status_ Status::Corruption(""Number of hash functions not found""); 5. uninit_member: Non-static class member is_last_level_ is not initialized in this constructor nor in any functions that it calls. 7. uninit_member: Non-static class member identity_as_first_hash_ is not initialized in this constructor nor in any functions that it calls. 9. uninit_member: Non-static class member use_module_hash_ is not initialized in this constructor nor in any functions that it calls. 11. uninit_member: Non-static class member num_hash_func_ is not initialized in this constructor nor in any functions that it calls. 13. uninit_member: Non-static class member key_length_ is not initialized in this constructor nor in any functions that it calls. 15. uninit_member: Non-static class member user_key_length_ is not initialized in this constructor nor in any functions that it calls. 17. uninit_member: Non-static class member value_length_ is not initialized in this constructor nor in any functions that it calls. 19. uninit_member: Non-static class member bucket_length_ is not initialized in this constructor nor in any functions that it calls. 21. uninit_member: Non-static class member cuckoo_block_size_ is not initialized in this constructor nor in any functions that it calls. 23. uninit_member: Non-static class member cuckoo_block_bytes_minus_one_ is not initialized in this constructor nor in any functions that it calls. CID 1322785 (#2 of 2): Uninitialized scalar field (UNINIT_CTOR) 25. uninit_member: Non-static class member table_size_ is not initialized in this constructor nor in any functions that it calls. 57 return; table/plain_table_index.h: 2. uninit_member: Non-static class member index_size_ is not initialized in this constructor nor in any functions that it calls. CID 1322801 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 4. uninit_member: Non-static class member sub_index_size_ is not initialized in this constructor nor in any functions that it calls. 128 huge_page_tlb_size_(huge_page_tlb_size) {} 129 Closes Differential Revision: D6505719 Pulled By: yiwu-arbug fbshipit-source-id: 38f44d8f9dfefb4c2e25d83b8df25a5201c75618/"
,,0.5522,rocksdb,"table: Fix coverity issues Summary: table/block.cc: 420 } CID 1396127 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 7. uninit_member: Non-static class member restart_offset_ is not initialized in this constructor nor in any functions that it calls. 421} table/block_based_table_builder.cc: CID 1418259 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 7. uninit_member: Non-static class member compressed_cache_key_prefix_size is not initialized in this constructor nor in any functions that it calls. table/block_based_table_reader.h: 3. uninit_member: Non-static class member index_type is not initialized in this constructor nor in any functions that it calls. CID 1396147 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 5. uninit_member: Non-static class member hash_index_allow_collision is not initialized in this constructor nor in any functions that it calls. 413 global_seqno(kDisableGlobalSequenceNumber) {} 414 table/cuckoo_table_reader.cc: 55 if (hash_funs user_props.end()) { 56 status_ Status::Corruption(""Number of hash functions not found""); 5. uninit_member: Non-static class member is_last_level_ is not initialized in this constructor nor in any functions that it calls. 7. uninit_member: Non-static class member identity_as_first_hash_ is not initialized in this constructor nor in any functions that it calls. 9. uninit_member: Non-static class member use_module_hash_ is not initialized in this constructor nor in any functions that it calls. 11. uninit_member: Non-static class member num_hash_func_ is not initialized in this constructor nor in any functions that it calls. 13. uninit_member: Non-static class member key_length_ is not initialized in this constructor nor in any functions that it calls. 15. uninit_member: Non-static class member user_key_length_ is not initialized in this constructor nor in any functions that it calls. 17. uninit_member: Non-static class member value_length_ is not initialized in this constructor nor in any functions that it calls. 19. uninit_member: Non-static class member bucket_length_ is not initialized in this constructor nor in any functions that it calls. 21. uninit_member: Non-static class member cuckoo_block_size_ is not initialized in this constructor nor in any functions that it calls. 23. uninit_member: Non-static class member cuckoo_block_bytes_minus_one_ is not initialized in this constructor nor in any functions that it calls. CID 1322785 (#2 of 2): Uninitialized scalar field (UNINIT_CTOR) 25. uninit_member: Non-static class member table_size_ is not initialized in this constructor nor in any functions that it calls. 57 return; table/plain_table_index.h: 2. uninit_member: Non-static class member index_size_ is not initialized in this constructor nor in any functions that it calls. CID 1322801 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 4. uninit_member: Non-static class member sub_index_size_ is not initialized in this constructor nor in any functions that it calls. 128 huge_page_tlb_size_(huge_page_tlb_size) {} 129 Closes Differential Revision: D6505719 Pulled By: yiwu-arbug fbshipit-source-id: 38f44d8f9dfefb4c2e25d83b8df25a5201c75618/"
,,0.5507,rocksdb,"table: Fix coverity issues Summary: table/block.cc: 420 } CID 1396127 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 7. uninit_member: Non-static class member restart_offset_ is not initialized in this constructor nor in any functions that it calls. 421} table/block_based_table_builder.cc: CID 1418259 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 7. uninit_member: Non-static class member compressed_cache_key_prefix_size is not initialized in this constructor nor in any functions that it calls. table/block_based_table_reader.h: 3. uninit_member: Non-static class member index_type is not initialized in this constructor nor in any functions that it calls. CID 1396147 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 5. uninit_member: Non-static class member hash_index_allow_collision is not initialized in this constructor nor in any functions that it calls. 413 global_seqno(kDisableGlobalSequenceNumber) {} 414 table/cuckoo_table_reader.cc: 55 if (hash_funs user_props.end()) { 56 status_ Status::Corruption(""Number of hash functions not found""); 5. uninit_member: Non-static class member is_last_level_ is not initialized in this constructor nor in any functions that it calls. 7. uninit_member: Non-static class member identity_as_first_hash_ is not initialized in this constructor nor in any functions that it calls. 9. uninit_member: Non-static class member use_module_hash_ is not initialized in this constructor nor in any functions that it calls. 11. uninit_member: Non-static class member num_hash_func_ is not initialized in this constructor nor in any functions that it calls. 13. uninit_member: Non-static class member key_length_ is not initialized in this constructor nor in any functions that it calls. 15. uninit_member: Non-static class member user_key_length_ is not initialized in this constructor nor in any functions that it calls. 17. uninit_member: Non-static class member value_length_ is not initialized in this constructor nor in any functions that it calls. 19. uninit_member: Non-static class member bucket_length_ is not initialized in this constructor nor in any functions that it calls. 21. uninit_member: Non-static class member cuckoo_block_size_ is not initialized in this constructor nor in any functions that it calls. 23. uninit_member: Non-static class member cuckoo_block_bytes_minus_one_ is not initialized in this constructor nor in any functions that it calls. CID 1322785 (#2 of 2): Uninitialized scalar field (UNINIT_CTOR) 25. uninit_member: Non-static class member table_size_ is not initialized in this constructor nor in any functions that it calls. 57 return; table/plain_table_index.h: 2. uninit_member: Non-static class member index_size_ is not initialized in this constructor nor in any functions that it calls. CID 1322801 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 4. uninit_member: Non-static class member sub_index_size_ is not initialized in this constructor nor in any functions that it calls. 128 huge_page_tlb_size_(huge_page_tlb_size) {} 129 Closes Differential Revision: D6505719 Pulled By: yiwu-arbug fbshipit-source-id: 38f44d8f9dfefb4c2e25d83b8df25a5201c75618/"
,,0.312,rocksdb,"Fix coverity issues compaction_job, compaction_picker Summary: db/compaction_job.cc: ReportStartedCompaction(compaction); CID 1419863 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 2. uninit_member: Non-static class member bottommost_level_ is not initialized in this constructor nor in any functions that it calls. db/compaction_picker_universal.cc: 7struct InputFileInfo { 2. uninit_member: Non-static class member level is not initialized in this constructor nor in any functions that it calls. CID 1405355 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 4. uninit_member: Non-static class member index is not initialized in this constructor nor in any functions that it calls. 38 InputFileInfo() : f(nullptr) {} db/dbformat.h: ParsedInternalKey() 84 : sequence(kMaxSequenceNumber) // Make code analyzer happy CID 1168095 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 2. uninit_member: Non-static class member type is not initialized in this constructor nor in any functions that it calls. 85 {} // Intentionally left uninitialized (for speed) Closes Differential Revision: D6534558 Pulled By: yiwu-arbug fbshipit-source-id: 5ada975956196d267b3f149386842af71eda7553/"
,,0.2731,rocksdb,"Incorrect Universal Compaction reason Summary: While writing tests for dynamic Universal Compaction options, I found that the compaction reasons we set for size-ratio based and sorted-run based universal compactions are swapped with each other. Fixed it. Closes Differential Revision: D6820540 Pulled By: sagar0 fbshipit-source-id: 270a188968ba25b2c96a8339904416c4c87ff5b3/Fix coverity issues compaction_job, compaction_picker Summary: db/compaction_job.cc: ReportStartedCompaction(compaction); CID 1419863 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 2. uninit_member: Non-static class member bottommost_level_ is not initialized in this constructor nor in any functions that it calls. db/compaction_picker_universal.cc: 7struct InputFileInfo { 2. uninit_member: Non-static class member level is not initialized in this constructor nor in any functions that it calls. CID 1405355 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 4. uninit_member: Non-static class member index is not initialized in this constructor nor in any functions that it calls. 38 InputFileInfo() : f(nullptr) {} db/dbformat.h: ParsedInternalKey() 84 : sequence(kMaxSequenceNumber) // Make code analyzer happy CID 1168095 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 2. uninit_member: Non-static class member type is not initialized in this constructor nor in any functions that it calls. 85 {} // Intentionally left uninitialized (for speed) Closes Differential Revision: D6534558 Pulled By: yiwu-arbug fbshipit-source-id: 5ada975956196d267b3f149386842af71eda7553/"
,,0.2785,rocksdb,"Fix coverity issues version, write_batch Summary: db/version_builder.cc: 117 base_vstorage_->InternalComparator(); CID 1351713 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member field level_zero_cmp_.internal_comparator is not initialized in this constructor nor in any functions that it calls. db/version_edit.h: 145 FdWithKeyRange() 146 : fd(), 147 smallest_key(), 148 largest_key() { CID 1418254 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member file_metadata is not initialized in this constructor nor in any functions that it calls. 149 } db/version_set.cc: 120 } CID 1322789 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 4. uninit_member: Non-static class member curr_file_level_ is not initialized in this constructor nor in any functions that it calls. 121 } db/write_batch.cc: 939 assert(cf_mems_); CID 1419862 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 3. uninit_member: Non-static class member rebuilding_trx_seq_ is not initialized in this constructor nor in any functions that it calls. 940 } Closes Differential Revision: D6505666 Pulled By: yiwu-arbug fbshipit-source-id: fd2c68948a0280772691a419d72ac7e190951d86/"
,,0.2785,rocksdb,"Fix coverity issues version, write_batch Summary: db/version_builder.cc: 117 base_vstorage_->InternalComparator(); CID 1351713 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member field level_zero_cmp_.internal_comparator is not initialized in this constructor nor in any functions that it calls. db/version_edit.h: 145 FdWithKeyRange() 146 : fd(), 147 smallest_key(), 148 largest_key() { CID 1418254 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 2. uninit_member: Non-static class member file_metadata is not initialized in this constructor nor in any functions that it calls. 149 } db/version_set.cc: 120 } CID 1322789 (#1 of 1): Uninitialized pointer field (UNINIT_CTOR) 4. uninit_member: Non-static class member curr_file_level_ is not initialized in this constructor nor in any functions that it calls. 121 } db/write_batch.cc: 939 assert(cf_mems_); CID 1419862 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 3. uninit_member: Non-static class member rebuilding_trx_seq_ is not initialized in this constructor nor in any functions that it calls. 940 } Closes Differential Revision: D6505666 Pulled By: yiwu-arbug fbshipit-source-id: fd2c68948a0280772691a419d72ac7e190951d86/"
,,0.1156,rocksdb,Suppress lint in old files Summary: Grandfather in super old lint issues to make a clean slate for moving forward that allows us to have stronger enforcement on new issues. Reviewed By: yiwu-arbug Differential Revision: D6821806 fbshipit-source-id: 22797d31ec58e9eb0255d3b66fedfcfcb0dc127c/
,,0.2049,rocksdb,"WritePrepared Txn: Support merge operator Summary: CompactionIterator invoke MergeHelper::MergeUntil() to do partial merge between snapshot boundaries. Previously it only depend on sequence number to tell snapshot boundary, but we also need to make use of snapshot_checker to verify visibility of the merge operands to the snapshots. For example, say there is a snapshot with seq 2 but only can see data with seq 1. There are three merges, each with seq 1, 2, 3. A correct compaction output would be (1),(2+3). Without taking snapshot_checker into account when generating merge result, compaction will generate output (1+2),(3). By filtering uncommitted keys with read callback, the read path already take care of merges well and dont need additional updates. Closes Differential Revision: D6926087 Pulled By: yiwu-arbug fbshipit-source-id: 8f539d6f897cfe29b6dc27a8992f68c2a629d40a/Fix a wrong log formatting Summary: I experienced weird segfault because of this mismatch of type in log formatting. Fix it. Closes Differential Revision: D6687224 Pulled By: siying fbshipit-source-id: c51fb1c008b7ebc3efdc353a4adad3e8f5b3e9de/Fix coverity issues compaction_job, compaction_picker Summary: db/compaction_job.cc: ReportStartedCompaction(compaction); CID 1419863 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 2. uninit_member: Non-static class member bottommost_level_ is not initialized in this constructor nor in any functions that it calls. db/compaction_picker_universal.cc: 7struct InputFileInfo { 2. uninit_member: Non-static class member level is not initialized in this constructor nor in any functions that it calls. CID 1405355 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 4. uninit_member: Non-static class member index is not initialized in this constructor nor in any functions that it calls. 38 InputFileInfo() : f(nullptr) {} db/dbformat.h: ParsedInternalKey() 84 : sequence(kMaxSequenceNumber) // Make code analyzer happy CID 1168095 (#1 of 1): Uninitialized scalar field (UNINIT_CTOR) 2. uninit_member: Non-static class member type is not initialized in this constructor nor in any functions that it calls. 85 {} // Intentionally left uninitialized (for speed) Closes Differential Revision: D6534558 Pulled By: yiwu-arbug fbshipit-source-id: 5ada975956196d267b3f149386842af71eda7553/Log GetCurrentTime failures during Flush and Compaction Summary: `GetCurrentTime()` is used to populate `creation_time` table property during flushes and compactions. It is safe to ignore `GetCurrentTime()` failures here but they should be logged. (Note that `creation_time` property was introduced as part of TTL-based FIFO compaction in Tes Plan: `make check` Closes Differential Revision: D6501935 Pulled By: sagar0 fbshipit-source-id: 376adcf4ab801d3a43ec4453894b9a10909c8eb6/"
,,0.0776,rocksdb,fix missing perfcontext destroy declare in C API Summary: `rocksdb_perfcontext_destroy` declare is missing in C API. Closes Differential Revision: D7816490 Pulled By: ajkr fbshipit-source-id: 3a488607bfc897c7ce846a1b3c2b7af693134d0d/
,,0.2289,rocksdb,"add locking around calls to RecalculateWriteStallConditions in column_family_test (#4474) Summary: this should fix the current failing TSAN jobs: The callstack for TSAN: > WARNING: ThreadSanitizer: data race (pid=87440) Read of size 8 at 0x7d580000fce0 by thread T22 (mutexes: write M548703): rocksdb::InternalStats::DumpCFStatsNoFileHistogram(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) db/internal_stats.cc:1204 (column_family_test+0x00000080eca7) rocksdb::InternalStats::DumpCFStats(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) db/internal_stats.cc:1169 (column_family_test+0x0000008106d0) rocksdb::InternalStats::HandleCFStats(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, rocksdb::Slice) db/internal_stats.cc:578 (column_family_test+0x000000810720) rocksdb::InternalStats::GetStringProperty(rocksdb::DBPropertyInfo const&, rocksdb::Slice const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) db/internal_stats.cc:488 (column_family_test+0x00000080670c) rocksdb::DBImpl::DumpStats() db/db_impl.cc:625 (column_family_test+0x00000070ce9a) > Previous write of size 8 at 0x7d580000fce0 by main thread: rocksdb::InternalStats::AddCFStats(rocksdb::InternalStats::InternalCFStatsType, unsigned long) db/internal_stats.h:324 (column_family_test+0x000000693bbf) rocksdb::ColumnFamilyData::RecalculateWriteStallConditions(rocksdb::MutableCFOptions const&) db/column_family.cc:818 (column_family_test+0x000000693bbf) rocksdb::ColumnFamilyTest_WriteStallSingleColumnFamily_Test::TestBody() db/column_family_test.cc:2563 (column_family_test+0x0000005e5a49) Pull Request resolved: Differential Revision: D10262099 Pulled By: miasantreble fbshipit-source-id: 1247973a3ca32e399b4575d3401dd5439c39efc5/"
,,0.1291,rocksdb,"Detect if Jemalloc is linked with the binary (#4844) Summary: Declare Jemalloc non-standard APIs as weak symbols, so that if Jemalloc is linked with the binary, these symbols will be replaced by Jemallocs, otherwise they will be nullptr. This is similar to how folly detect jemalloc, but we assume the main program use jemalloc as long as jemalloc is linked: Pull Request resolved: Differential Revision: D13574934 Pulled By: yiwu-arbug fbshipit-source-id: 7ea871beb1be7d5a1259cc38f9b78078793db2db/"
,,0.0842,rocksdb,"Fix build failures due to missing JEMALLOC_CXX_THROW macro (#5053) Summary: JEMALLOC_CXX_THROW is not defined for earlier versions of jemalloc (e.g. 3.6), causing builds to fail on some platforms. Fixing it. Closes Pull Request resolved: Differential Revision: D14390034 Pulled By: sagar0 fbshipit-source-id: b2b7a03cd377201ef385eb521f65bae85c558055/"
,,0.1655,rocksdb,"Fix build errors regarding const qualifier being ignored on cast result type (#5432) Summary: This affects some TSAN builds: env/env_test.cc: In member function ëvirtual void rocksdb::EnvPosixTestWithParam_MultiRead_Test::TestBody()í: env/env_test.cc:1126:76: error: type qualifiers ignored on cast result type [-Werror=ignored-qualifiers] auto data NewAligned(kSectorSize * 8, static_cast<const char>(i + 1)); ^ env/env_test.cc:1154:77: error: type qualifiers ignored on cast result type [-Werror=ignored-qualifiers] auto buf NewAligned(kSectorSize * 8, static_cast<const char>(i*2 + 1)); ^ Pull Request resolved: Differential Revision: D15727277 Pulled By: ltamasi fbshipit-source-id: dc0e687b123e7c4d703ccc0c16b7167e07d1c9b0/Add support for loading dynamic libraries into the RocksDB environment (#5281) Summary: This change adds a Dynamic Library class to the RocksDB Env. Dynamic libraries are populated via the Env::LoadLibrary method. The addition of dynamic library support allows for a few different features to be developed: 1. The compression code can be changed to use dynamic library support. This would allow RocksDB to determine at run-time what compression packages were installed. This change would eliminate the need to make sure the build-time and run-time environment had the same library set. It would also simplify some of the Java build issues (where it attempts to build and include various packages inside the RocksDB jars). 2. Along with other features (to be provided in a subsequent PR), this change would allow code/configurations to be added to RocksDB at run-time. For example, the build system includes code for building an ""rados"" environment and adding ""Cassandra"" features. Instead of these extensions being built into the base RocksDB code, these extensions could be loaded at run-time as required/appropriate, either by configuration or explicitly. We intend to push out other changes in support of the extending RocksDB at run-time via configurations. Pull Request resolved: Differential Revision: D15447613 Pulled By: riversand963 fbshipit-source-id: 452cd4f54511c0bceee18f6d9d919aae9fd25fef/"
,,0.1989,rocksdb,"Support jemalloc compiled with `--with-jemalloc-prefix` (#5521) Summary: Previously, if the jemalloc was built with nonempty string for `--with-jemalloc-prefix`, then `HasJemalloc()` would return false on Linux, so jemalloc would not be used at runtime. On Mac, it would cause a linker failure due to no definitions found for the weak functions declared in ""port/jemalloc_helper.h"". This should be a rare problem because (1) on Linux the default `--with-jemalloc-prefix` value is the empty string, and (2) Homebrews build explicitly sets `--with-jemalloc-prefix` to the empty string. However, there are cases where `--with-jemalloc-prefix` is nonempty. For example, when building jemalloc from source on Mac, the default setting is `--with-jemalloc-prefix=je_`. Such jemalloc builds should be usable by RocksDB. The fix is simple. Defining `JEMALLOC_MANGLE` before including ""jemalloc.h"" causes it to define unprefixed symbols that are aliases for each of the prefixed symbols. Thanks to benesch for figuring this out and explaining it to me. Fixes Pull Request resolved: Test Plan: build jemalloc with prefixed symbols: ``` $ ./configure $ make ``` compile rocksdb against it: ``` $ WITH_JEMALLOC_FLAG=1 JEMALLOC=1 EXTRA_LDFLAGS=""-L/home/andrew/jemalloc/lib/"" EXTRA_CXXFLAGS=""-I/home/andrew/jemalloc/include/"" make ./db_bench ``` run db_bench and verify jemalloc actually used: ``` $ ./db_bench $ grep jemalloc /tmp/rocksdbtest-1000/dbbench/LOG 2019/06/29-12:20:52.088658 7fc5fb7f6700 [_impl/db_impl.cc:837] ___ Begin jemalloc statistics ___ ... ``` Differential Revision: D16092758 fbshipit-source-id: c2c358346190ed62ceb2a3547a6c4c180b12f7c4/"
,,0.3057,rocksdb,"Fix clang build with jemalloc (#5522) Summary: Fixes the below build failure for clang compiler using glibc and jemalloc. Platform: linux x86-64 Compiler: clang version 6.0.0-1ubuntu2 Build failure: ``` $ CXX=clang++ CC=clang USE_CLANG=1 WITH_JEMALLOC_FLAG=1 JEMALLOC=1 EXTRA_LDFLAGS=""-L/home/andrew/jemalloc/lib/"" EXTRA_CXXFLAGS=""-I/home/andrew/jemalloc/include/"" make check ... CC memory/jemalloc_nodump_allocator.o In file included from memory/jemalloc_nodump_allocator.cc:6: In file included from ./memory/jemalloc_nodump_allocator.h:11: In file included from ./port/jemalloc_helper.h:16: /usr/include/clang/6.0.0/include/mm_malloc.h:39:16: error: posix_memalign is missing exception specification throw() extern ""C"" int posix_memalign(void **__memptr, size_t __alignment, size_t __size); ^ /home/andrew/jemalloc/include/jemalloc/jemalloc.h:388:26: note: expanded from macro posix_memalign define posix_memalign je_posix_memalign ^ /home/andrew/jemalloc/include/jemalloc/jemalloc.h:77:29: note: expanded from macro je_posix_memalign define je_posix_memalign posix_memalign ^ /home/andrew/jemalloc/include/jemalloc/jemalloc.h:232:38: note: previous declaration is here JEMALLOC_EXPORT int JEMALLOC_NOTHROW je_posix_memalign(void **memptr, ^ /home/andrew/jemalloc/include/jemalloc/jemalloc.h:77:29: note: expanded from macro je_posix_memalign define je_posix_memalign posix_memalign ^ 1 error generated. Makefile:1972: recipe for target memory/jemalloc_nodump_allocator.o failed make: *** [memory/jemalloc_nodump_allocator.o] Error 1 ``` Pull Request resolved: Differential Revision: D16069869 Pulled By: miasantreble fbshipit-source-id: c489bbc993adee194b9a550134c6237a264bc443/Support jemalloc compiled with `--with-jemalloc-prefix` (#5521) Summary: Previously, if the jemalloc was built with nonempty string for `--with-jemalloc-prefix`, then `HasJemalloc()` would return false on Linux, so jemalloc would not be used at runtime. On Mac, it would cause a linker failure due to no definitions found for the weak functions declared in ""port/jemalloc_helper.h"". This should be a rare problem because (1) on Linux the default `--with-jemalloc-prefix` value is the empty string, and (2) Homebrews build explicitly sets `--with-jemalloc-prefix` to the empty string. However, there are cases where `--with-jemalloc-prefix` is nonempty. For example, when building jemalloc from source on Mac, the default setting is `--with-jemalloc-prefix=je_`. Such jemalloc builds should be usable by RocksDB. The fix is simple. Defining `JEMALLOC_MANGLE` before including ""jemalloc.h"" causes it to define unprefixed symbols that are aliases for each of the prefixed symbols. Thanks to benesch for figuring this out and explaining it to me. Fixes Pull Request resolved: Test Plan: build jemalloc with prefixed symbols: ``` $ ./configure $ make ``` compile rocksdb against it: ``` $ WITH_JEMALLOC_FLAG=1 JEMALLOC=1 EXTRA_LDFLAGS=""-L/home/andrew/jemalloc/lib/"" EXTRA_CXXFLAGS=""-I/home/andrew/jemalloc/include/"" make ./db_bench ``` run db_bench and verify jemalloc actually used: ``` $ ./db_bench $ grep jemalloc /tmp/rocksdbtest-1000/dbbench/LOG 2019/06/29-12:20:52.088658 7fc5fb7f6700 [_impl/db_impl.cc:837] ___ Begin jemalloc statistics ___ ... ``` Differential Revision: D16092758 fbshipit-source-id: c2c358346190ed62ceb2a3547a6c4c180b12f7c4/fix compilation error on MSVC (#5458) Summary: ""__attribute__((__weak__))"" was introduced in port\jemalloc_helper.h. Its not supported by Microsoft VS 2015, resulting in compile error. This fix adds a branch to work around the compile issue. Pull Request resolved: Differential Revision: D15827285 fbshipit-source-id: 8c5f7ad31de1ac677bd96f16c4450767de834beb/"
,,0.284,rocksdb,"remove unused to fix musl libc build (#5583) Summary: The `#include ""core_local.h""` was pulling in libgccs `posix_memalign()` declaration. That declaration specifies `throw()` whereas musl libcs declaration does not. This was leading to the following compiler error when using musl libc: ``` In file included from /go/src/github.com/cockroachdb/cockroach/c-deps/rocksdb/port/jemalloc_helper.h:26:0, from /go/src/github.com/cockroachdb/cockroach/c-deps/rocksdb/util/jemalloc_nodump_allocator.h:11, from /go/src/github.com/cockroachdb/cockroach/c-deps/rocksdb/util/jemalloc_nodump_allocator.cc:6: /go/native/x86_64-unknown-linux-musl/jemalloc/include/jemalloc/jemalloc.h:63:29: error: declaration of int posix_memalign(void**, size_t, size_t) throw () has a different exception specifier define je_posix_memalign posix_memalign ^ /go/native/x86_64-unknown-linux-musl/jemalloc/include/jemalloc/jemalloc.h:63:29: note: from previous declaration int posix_memalign(void**, size_t, size_t) define je_posix_memalign posix_memalign ^ /go/native/x86_64-unknown-linux-musl/jemalloc/include/jemalloc/jemalloc.h:202:38: note: in expansion of macro je_posix_memalign JEMALLOC_EXPORT int JEMALLOC_NOTHROW je_posix_memalign(void **memptr, ^~~~~~~~~~~~~~~~~ make[4]: *** [CMakeFiles/rocksdb.dir/util/jemalloc_nodump_allocator.cc.o] Error 1 ``` Since `#include ""core_local.h""` is not actually used, we can just remove it. I verified that fixes the build. There was a related PR here ( although the problem description is slightly different. Pull Request resolved: Differential Revision: D16343227 fbshipit-source-id: 0386bc2b5fd55b2c3b5fba19382014efa52e44f8/"
,,0.0998,rocksdb,"Remove invalid comparison of va_list and nullptr (#5836) Summary: The comparison of va_list and nullptr is always False under any arch, and will raise invalid operands of types error in aarch64 env (`error: invalid operands of types ëva_list {aka __va_list}í and ëstd::nullptr_tí to binary ëoperator=í`). This patch removes this invalid assert. Closes: Pull Request resolved: Differential Revision: D17532470 fbshipit-source-id: ca98078ecbc6a9416c69de3bd6ffcfa33a0f0185/"
,,0.1329,rocksdb,"Avoid clock_gettime on pre-10.12 macOS versions (#5570) Summary: On older macOS like 10.10 we saw the following compiler error: ``` /go/src/github.com/cockroachdb/cockroach/c-deps/rocksdb/env/env_posix.cc:845:19: error: use of undeclared identifier CLOCK_THREAD_CPUTIME_ID clock_gettime(CLOCK_THREAD_CPUTIME_ID, &ts); ^ ``` According to macs `man clock_gettime`: ""These functions first appeared in Mac OSX 10.12"". So we should not try to compile it on earlier versions. Pull Request resolved: Test Plan: verified it compiles now on 10.10. Also did some investigation to ensure it does not cause regression on macOS 10.12+, although I do not have access to such an environment to really test. Differential Revision: D17322629 Pulled By: riversand963 fbshipit-source-id: e0a412223854f826b4d83e6d15c3739ff4620d7d/"
,,0.0822,rocksdb,"fix compiling with `-DNPERF_CONTEXT` (#5704) Summary: This was previously broken, as the performance context-related macro signatures in file monitoring/perf_context_imp.h deviated for the case when NPERF_CONTEXT was defined and when it was not. Update the macros for the `-DNPERF_CONTEXT` case, so it compiles. Pull Request resolved: Differential Revision: D16867746 fbshipit-source-id: 05539724cb1f7955ecc42828365836a677759ad9/"
,,0.1022,rocksdb,"Fix build breakage from lock_guard error (#6161) Summary: This change fixes a source issue that caused compile time error which breaks build for many fbcode services in that setup. The size() member function of channel is a const member, so member variables accessed within it are implicitly const as well. This caused error when clang fails to resolve to a constructor that takes std::mutex because the suitable constructor got rejected due to loss of constness for its argument. The fix is to add mutable modifier to the lock_ member of channel. Pull Request resolved: Differential Revision: D18967685 Pulled By: maysamyabandeh fbshipit-source-id: 698b6a5153c3c92eeacb842c467aa28cc350d432/"
,,0.1147,rocksdb,"Fix the constness issues around autovector::iterator_impls dereference operators (#6057) Summary: As described in detail in issue iterators dereference operators (`*`, `->`, and `[]`) should return `pointer`s/`reference`s (as opposed to `const_pointer`s/`const_reference`s) even if the iterator itself is `const` to be in sync with the standards iterator concept. Pull Request resolved: Test Plan: make check Differential Revision: D18623235 Pulled By: ltamasi fbshipit-source-id: 04e82d73bc0c67fb0ded018383af8dfc332050cc/"
,,0.0919,rocksdb,Implement PinnableSlice::remove_prefix (#6330) Summary: The function was left unimplemented. Although we currently dont have a use for that it was declared with an assert(0) to prevent mistakenly using the remove_prefix of the parent class. The function body with only assert(0) however causes issues with some compilers warning levels. The patch implements the function to avoid the warning. It also piggybacks some minor code warning for unnecessary semicolons after the function definition.s Pull Request resolved: Differential Revision: D19559062 Pulled By: maysamyabandeh fbshipit-source-id: 3a022484f688c9abd4556e5412bcc2628ab96a00/
,,0.175,rocksdb,"Correct pragma once problem with Bazel on Windows (#6321) Summary: This is a simple edit to have two file paths be consistent within range_del_aggregator.{h,cc} with everywhere else. The impact of this inconsistency is that it actual breaks a Bazel based build on the Windows platform. The same pragma once failure occurs with both Windows Visual C++ 2019 and clang for Windows 9.0. Bazels ""sandboxing"" of the builds causes both compilers to not properly recognize ""rocksdb/types.h"" and ""include/rocksdb/types.h"" to be the same file (also comparator.h). My guess is that the backslash versus forward slash mixing within path names is the underlying issue. But, everything builds fine once the include paths in these two source files are consistent with the rest of the repository. Pull Request resolved: Differential Revision: D19506585 Pulled By: ltamasi fbshipit-source-id: 294c346607edc433ab99eaabc9c880ee7426817a/"
,,0.1672,rocksdb,"Correct pragma once problem with Bazel on Windows (#6321) Summary: This is a simple edit to have two file paths be consistent within range_del_aggregator.{h,cc} with everywhere else. The impact of this inconsistency is that it actual breaks a Bazel based build on the Windows platform. The same pragma once failure occurs with both Windows Visual C++ 2019 and clang for Windows 9.0. Bazels ""sandboxing"" of the builds causes both compilers to not properly recognize ""rocksdb/types.h"" and ""include/rocksdb/types.h"" to be the same file (also comparator.h). My guess is that the backslash versus forward slash mixing within path names is the underlying issue. But, everything builds fine once the include paths in these two source files are consistent with the rest of the repository. Pull Request resolved: Differential Revision: D19506585 Pulled By: ltamasi fbshipit-source-id: 294c346607edc433ab99eaabc9c880ee7426817a/"
,,0.1628,rocksdb,"Correct pragma once problem with Bazel on Windows (#6321) Summary: This is a simple edit to have two file paths be consistent within range_del_aggregator.{h,cc} with everywhere else. The impact of this inconsistency is that it actual breaks a Bazel based build on the Windows platform. The same pragma once failure occurs with both Windows Visual C++ 2019 and clang for Windows 9.0. Bazels ""sandboxing"" of the builds causes both compilers to not properly recognize ""rocksdb/types.h"" and ""include/rocksdb/types.h"" to be the same file (also comparator.h). My guess is that the backslash versus forward slash mixing within path names is the underlying issue. But, everything builds fine once the include paths in these two source files are consistent with the rest of the repository. Pull Request resolved: Differential Revision: D19506585 Pulled By: ltamasi fbshipit-source-id: 294c346607edc433ab99eaabc9c880ee7426817a/"
,,0.1739,rocksdb,"Correct pragma once problem with Bazel on Windows (#6321) Summary: This is a simple edit to have two file paths be consistent within range_del_aggregator.{h,cc} with everywhere else. The impact of this inconsistency is that it actual breaks a Bazel based build on the Windows platform. The same pragma once failure occurs with both Windows Visual C++ 2019 and clang for Windows 9.0. Bazels ""sandboxing"" of the builds causes both compilers to not properly recognize ""rocksdb/types.h"" and ""include/rocksdb/types.h"" to be the same file (also comparator.h). My guess is that the backslash versus forward slash mixing within path names is the underlying issue. But, everything builds fine once the include paths in these two source files are consistent with the rest of the repository. Pull Request resolved: Differential Revision: D19506585 Pulled By: ltamasi fbshipit-source-id: 294c346607edc433ab99eaabc9c880ee7426817a/"
,,0.0807,rocksdb,fix MSVC build failures (#6517) Summary: fix a few build warnings that are treated as failures with more strict MSVC warning settings Pull Request resolved: Differential Revision: D20401325 Pulled By: pdillinger fbshipit-source-id: b44979dfaafdc7b3b8cb44a565400a99b331dd30/
,,0.0859,rocksdb,fix MSVC build failures (#6517) Summary: fix a few build warnings that are treated as failures with more strict MSVC warning settings Pull Request resolved: Differential Revision: D20401325 Pulled By: pdillinger fbshipit-source-id: b44979dfaafdc7b3b8cb44a565400a99b331dd30/
,,0.0807,rocksdb,fix MSVC build failures (#6517) Summary: fix a few build warnings that are treated as failures with more strict MSVC warning settings Pull Request resolved: Differential Revision: D20401325 Pulled By: pdillinger fbshipit-source-id: b44979dfaafdc7b3b8cb44a565400a99b331dd30/
,,0.0838,rocksdb,Fix jemalloc forward declarations (#6613) Summary: Add `nothrow` attribute to match declarations in jemalloc. Pull Request resolved: Reviewed By: igorsugak Differential Revision: D20749490 fbshipit-source-id: 9ac8df27f7b4268f27b32b130c23ce8a1f772b3a/
