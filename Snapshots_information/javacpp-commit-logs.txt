eee519ae15a381052f6cff73c3d69983bc794ce3|2020-02-28|Samuel Audet| * Fix `Parser` not picking up `Info` for declarations with `decltype()` specifier
d11320678907d6130844caf3c8d45c65214661e8|2020-02-27|Samuel Audet|Update links in the README.md file
55e3bdcef7742022844cb3ea0b0a69a6ebb3224a|2020-02-25|Samuel Audet| * Fix `Pointer` losing its owner when mistakenly ignoring deallocators for `const` values returned from adapters
e6ea81122f5c6c74722df3361964b294d970cee4|2020-02-23|lchdev| * Remove unnecessary declared `Exception` from `Indexer.close()` signature (pull #382)
5711d537675346698dadbe28e6f328cfceb92a1b|2020-02-18|Samuel Audet| * Make sure `Parser` recognizes base classes of `struct` as `public` by default  * Fix `Parser` error on initializer lists containing C++11 style `{ ... }` for template instances  * Change the default mapping of `jboolean` to `BooleanPointer` instead of `BoolPointer`
ccce6b38d0b6d52b8b347b3c65ed1df94d7440da|2020-02-16|Samuel Audet| * Fix `Parser` error on function declarations with `...` varargs as single parameter  * Make `Parser` skip over `&&`-qualified functions automatically since they cannot be supported
0521e94b18f2acdf3c3179037ecb2e038bc51a9d|2020-02-12|Samuel Audet| * Fix `Parser` annotating pointer cast `operator` methods with incorrect `@Cast` (issue #379)
3583ded5cf4a646c1ea506aa7e975850db3da0e9|2020-02-04|Samuel Audet| * Allow `Parser` to inherit constructors from template classes with `using`  * Make `Parser` honor `Info.skip` for anonymous `struct` or `union` as well
2ab753794eacb3ce97a6d3fa5f426098e1a9d8d4|2020-02-03|Samuel Audet| * Optimize `Pointer.sizeof()` method of subclasses for primitive types
538845233d908af37dd0154f9dc4330ab57d9a5b|2020-01-19|Samuel Audet| * Let users override `Info.enumerate` on a per-`enum` basis and allow attributes after `enum class`  * Fix `Parser` not considering identifiers as type names when placed directly after `friend` or in `template<>`  * Check for defined `NO_WINDOWS_H` macro in `Generator` to skip `#include <windows.h>`
b1f29bec7bed3c30a9ebe63f8fed1f83acace59c|2020-01-03|Samuel Audet| * Provide `ULongIndexer`, treating array and buffer data as unsigned 64-bit integers, for convenience (issue #376)
11e20d81c657a0155a43a6a90a482cd83d9d24b2|2020-01-02|Samuel Audet| * Provide `UIntIndexer`, treating array and buffer data as unsigned 32-bit integers, for convenience (issue #376)
c5669141929984771c3f49c63aa4044c8aa6b806|2019-12-30|Samuel Audet| * Fix `Parser` not evaluating `using namespace` with respect to the current block (issue #370)
40d11bbffabbb58f2c8eec29480712fa35297ca5|2019-12-24|HGuillemet| * Fix exception in `Loader` when running jlink image with JDK 13+ (pull #375)
9c82d2109b4ad12f58c66417d1dcaab494b19764|2019-12-22|Samuel Audet| * Fix errors with `@Virtual @Name("operator ...")` in `Generator` by using Java names for C++ (issue #362)
1592fd7b29cf979ca1da7f3b4b852107479d6bcf|2019-12-22|Alexey Rochev| * Use in `Generator` C++11 `override` keyword for `@Virtual` functions (pull #373)
af0e5131174db1fd8c95261c9f6878cde3bab2c4|2019-12-17|Samuel Audet| * Speed up `Loader.load()` by caching results returned from `Loader.findLibrary()` (issue #287)
696a1b454b9f475e4545d361e220dcf20326cca4|2019-12-16|Samuel Audet| * Pick up `Info` correctly in `Parser` also for anonymous function pointers with `const` parameters  * Make `Parser` apply `Info.translate` in the case of enumerators as well
16109d3d0f81ad2d9968e732608569ab63435dd6|2019-12-11|Samuel Audet| * Fix compiler failures in `Builder` with platform properties containing relative paths
32e52a1601fe7be31aaeae0455bc03fe969a3c71|2019-12-08|louxiu| * Let `Parser` rename types using `Info.javaNames` in addition to `valueTypes` and `pointerTypes` (pull #367)
9a5f5916730a8de348efdf5573c3ddeed0c1980f|2019-12-06|Samuel Audet| * Include in the defaults of `InfoMap` mappings missing for the `std::array` and `jchar` types  * Fix various `Parser` failures with attributes on constructors, empty macros, enum classes, friend classes, inherited constructors, and keywords in parameter names  * Add to `Parser` support for C++11 attributes found within `[[` and `]]` brackets
2141d20a1c7395771fbf51b2d81624d63588b97e|2019-11-29|Samuel Audet|Fix call to `parseBytes()` to be relative to `Runtime.maxMemory()` also for `maxPhysicalBytes`
4f7b55697bf19a534359f7623cbf67303f399d99|2019-11-29|Samuel Audet|Add some Javadoc for the new `%` unit of the `Pointer` values `maxBytes` and `maxPhysicalBytes`
cd09b7170d840dde98003f4bd613b0a4f8e3d32c|2019-11-29|Maxime Michel| * Consider `Pointer` values `maxBytes` or `maxPhysicalBytes` suffixed with `%` as relative to `Runtime.maxMemory()` (pull #365)
ecf562ee79bf1bd2d69dedd17387843ac3b9eb38|2019-11-29|Samuel Audet|Add missing cache entry for Maven on Travis CI
68625715a54e2040f997ac4aa7e7d4d1cd1da6ae|2019-11-27|Samuel Audet| * Prevent `Parser` from considering `constexpr operator` declarations as `const` types
90279d1ca78bd7c02731607a81baeb9ca574b27e|2019-11-20|Samuel Audet| * Fix on `Loader.load()` the default library name of classes without `@Properties(target=..., global=...)`
3e5a0dfc5a9334d2c7dfda5f044082364abcdc9b|2019-11-15|Samuel Audet| * Prevent `Parser` from outputting `asPointer()` cast methods with multiple inheritance (issue #360)
4e522b802378ef946cb953135946ccc02adb8039|2019-11-15|Samuel Audet| * Add `CacheMojo` to help extract binaries and resources used by command line tools outside of the JVM
0711716b65c3fc9e4c765547f562e12719743fd1|2019-11-12|Aman Gupta| * Fix Android build properties for NDK r20b (pull #357)
2c692dfd2d8a725cdda57329b5db0be40bd325f0|2019-11-10|vb216|Run tests on ARM64 as well with Travis CI (pull #355)
5ef8dce1187a74e3c3897577a0331845188d0456|2019-11-06|Samuel Audet|Update version in the `pom.xml` file to 1.5.3-SNAPSHOT
3ddea3e8102af096ab9c6979a1adffe4915e728f|2019-11-05|Samuel Audet|Release version 1.5.2
9239a178822dd939df3fe126f044bf8c29b3700a|2019-10-30|Samuel Audet| * Provide `ByteIndexer` with value getters and setters for unsigned `byte` or `short`, `half`, `bfloat16`, and `boolean` types as well
8cc4144336792b9d9040d5e4eee236ca5688b6a2|2019-10-29|Samuel Audet| * Introduce `PointerScope.extend()` to prevent deallocation on the next call to `close()`
663aa55d4d69e32fbc0eda65fffb9501fb02d74f|2019-10-23|GeekOffTheStreet| * Make `Generator` avoid ambiguous conversion errors from `UniquePtrAdapter` to `std::unique_ptr` (pull #353)
f901aa9025dc63f6e595c43479f98226c138bfb7|2019-10-23|Samuel Audet| * Fix `Parser` using fully qualified names for `@Name` annotations of nested classes (issue #352)
e4b3812887310f4e0a0cde0ee7fd94fadde08a79|2019-10-10|Samuel Audet| * Add `Parser` support for macro expansion of `__VA_ARGS__`
ced53953f98a004db32f75e3e8c7112b30d89de8|2019-10-09|Tim Ward|Fix OSGi integration tests on Windows (pull #350)
bdd18ef30b2a7a0b3fb0ac979b4a2c3c931214d5|2019-10-06|Samuel Audet| * Fix `Builder` not processing all classes when given `.**` as input (issue bytedeco/javacv#1311)
606ac566a6837bd971318834e88be343e8bd080f|2019-10-05|Samuel Audet|Fix IndexerTest and PointerTest on 32-bit platforms (issue #347)
762e1f917c7fda61e8c896cbda1c2324efc44220|2019-10-05|Tim Ward|Add support for more platforms in OSGi testing (pull #348)
f75ae1847e766e31cd5f14bc89db553297243eef|2019-10-04|Samuel Audet| * Introduce reference counting in `Pointer` and retrofit `PointerScope` to use it
ff0af72140b8cb655f4776d320bfedccbde78460|2019-09-25|Samuel Audet| * Fix `Parser` incorrectly inheriting default constructors multiple times with `using`
1dc77de3b6ba54a1b225786e7aec28526501c0ae|2019-09-23|Samuel Audet| * Allow in `Parser` fully qualified names as `Info.valueTypes` for enumerators as well
8194e47dcbbe84cfd4dc661ea551ccb469d2ac37|2019-09-19|Michael McKenzie| * Perform template substitution in `Parser` also for default argument values (pull #343)
dadb92fde9cb197a7f3f2e46730763e7f52722d1|2019-09-18|Samuel Audet| * Introduce `PointerScope.forClasses` to limit the `Pointer` classes that can be attached to a given instance
946e28bee593aeaa80c0ced516ff6ac766ce6096|2019-09-12|Samuel Audet| * Add support for custom `Allocator` to `VectorAdapter` and custom `Deleter` to `UniquePtrAdapter`
a86fde7b4a4aff1e24f4bc081d55225c615745f1|2019-09-06|Tim Ward| * Enable support for OSGi bundles (pull #332)
0c649daaddae70f94195994278d043847d5ee550|2019-09-05|Samuel Audet|Update version in the `pom.xml` file to 1.5.2-SNAPSHOT
705df9a42d9f8258e1a4e32c7e5c31b4eaa66d00|2019-09-05|Samuel Audet|Release version 1.5.1-1
500902386a28cd29ade6c319e8025d6cbf49a248|2019-09-05|louxiu| * Use the native thread ID as name on `AttachCurrentThread()` (pull #339)
c3946d20146763f484a85b73376fc7e6c05f2fe0|2019-08-09|Samuel Audet| * Make sure we `canRead()`, `canWrite()`, and `canExecute()` what `Loader.getCacheDir()` returns
c25b57c51a7fdd7636e6a02dd05f564501ff282b|2019-08-05|Samuel Audet|Add project.version to baseDirectory for maven-assembly-plugin
484d007b9a3ece3ed1caa8ea222e108704c5b791|2019-07-29|Samuel Audet| * Prevent `Generator` from copying data unnecessarily when returning Java arrays from adapters (issue #317)
8bebe93e1a669b07a108964eaa28d2c5f8e4bb84|2019-07-23|Samuel Audet| * Fix `Parser` issues when casting `const` pointers or enumerating anonymous `enum` declarations
7b7ca8a9ffbe794dce8750e98e13da8d84169262|2019-07-23|Samuel Audet| * Add `Info.objectify` to map global functions without using the `static` modifier, similarly to Scala companion objects
27a7a49185904fdd503cbd035147c3988c8bc4c2|2019-07-11|Samuel Audet| * Allow once more `abstract` subclasses of `FunctionPointer` (issue #318)
4a5f8b6ed53e3d0a4418ea13587a2201316639c8|2019-07-10|Samuel Audet|Update version in the `pom.xml` file to 1.5.2-SNAPSHOT
183553268b6c306f5993ef18900d400c4d6267a8|2019-07-08|Samuel Audet|Release version 1.5.1
dfdf97100fbab77ffc45a7934047c3d011b0a68b|2019-07-05|Samuel Audet| * Make sure `Generator` ignores deallocators on `const` values returned from adapters (issue #317)
16e061941a658e1ff14764697e6364ef8aaf69a5|2019-06-26|Samuel Audet|Upgrade to Ubuntu 16.04 LTS (Xenial) distribution on Travis CI
a7144ce644857c46f284126dc9dfc04b4d3cdcd1|2019-06-18|Samuel Audet| * Accelerate `Loader.extractResource()` for directories already cached, also preventing failures (issue #197)
0b026392b340ed35e2276acff23dd5671c44e111|2019-06-14|Samuel Audet| * Avoid `Parser` writing `allocateArray()` when single `int`, `long`, `float`, or `double` constructor already exists (issue bytedeco/javacv#1224)
95710554b20848343f6873801d36225fb370931f|2019-06-12|Samuel Audet|Clarify what values of 0 or less mean for `Pointer.maxBytes` and `maxPhysicalBytes`
41f366560853c750e7da0e730fc29e6356bb3a6f|2019-06-09|Samuel Audet|Prevent `NullPointerException` in `Parser` for function pointers declared with `using`
2c8c56868f8d0cfcd119c6ac0c19e7738053f8c3|2019-06-05|Samuel Audet| * Expose all platform properties to process executed with `Builder.buildCommand` via environment variables, with names uppercase and all `.` replaced with `_`
2c291b2e536bc55102a24ee05b0d33d71b8c1dde|2019-05-30|Samuel Audet| * Let `Parser` add `@Name` or `@Namespace` annotations to non-translated enumerators as well  * Make `Parser` pick up the names of type aliases for function pointers declared with `using`  * Fix `Parser` failing on lambda expressions found inside member initialization lists of constructors  * Add special support for `constexpr` variables in `Parser` by disabling their member setters automatically  * Fix `Parser` not placing `&` and `*` at the right place inside template arguments containing function declarations  * Support more basic containers in `Parser` by comparing their names in a case-insensitive manner and add annotations missing from index types  * Fix `Generator` taking the `@By*` annotation of the paired method for the index instead of the value argument of a setter  * Fix `Parser` sometimes considering global C++ identifiers starting with `::` as if they were local
5b9216cf0878bb4757733ece8f7da1bfe8550a0e|2019-05-27|Alex Black| * Change default value for `Pointer.maxPhysicalBytes` to `Pointer.maxBytes + Runtime.maxMemory()` (pull #310)
2c8231f790537c639608c12c8d2950e5a13ab7c4|2019-05-26|Samuel Audet|Log warnings in `Loader.checkVersion()` only if `Loader.isLoadLibraries()`
07e0533299fb3213c045d5ecb70ff5cf758c4cd8|2019-05-26|Samuel Audet|Add a convenient overloaded `Loader.getVersion()` method with no parameters
85670482cdd9741585a5d87db979a7266502dfae|2019-05-26|Samuel Audet| * Add `Loader.getVersion()` and `checkVersion()` to get versions of Maven artifacts and check against JavaCPP
108d851acb728b66b6ef755d22ed5bbe93415bd6|2019-05-22|Samuel Audet| * Fix compile errors caused by `Generator` occurring with callback functions returning a value by reference  * Make `Builder` expand entries from the user class path with `*` as basename to all JAR files in the directory
88205c3ec80d26f8839204a0afc8117cff7a192d|2019-05-22|HGuillemet| * Prevent `Loader` from creating symbolic links pointing to themselves by comparing with `Path.normalize()` (pull #307)
f7d2a61049d7815f2a4328fe61a96758dcbf7fb8|2019-05-22|HGuillemet| * Fix `Loader.cacheResource()` with the "jrt" protocol as used by jlink (pull #305)
e4e4b9d1263b5c9ea336ee9ce99d8501686dd791|2019-05-20|louxiu| * Fix compiler error with `SharedPtrAdapter` and `UniquePtrAdapter` in callback functions (pull #304)
655dae21833119a0edd45e1a16dbaa2e585d6455|2019-05-18|Samuel Audet| * Start `Pointer.DeallocatorThread` with `setContextClassLoader(null)` as required by containers (issue deeplearning4j/deeplearning4j#7737)
7a9ac9cfb647e9850a1bcd2aec829751704a7457|2019-05-15|Samuel Audet| * Add `-print` command line option to access platform properties externally, for example, inside build scripts  * Add to `InfoMap` default pointer and value types for `ssize_t`, `char16_t`, `char32_t`, `std::u16string`, and `std::u32string`
8fa2688b33db1eb9fef91839947969a9687d08a4|2019-05-12|Samuel Audet| * Support multiple instances of `FunctionPointer` subclasses, up to the value in `@Allocator(max=...)` (issue bytedeco/javacpp-presets#683)
1bc3afe034b7f5dd2631accf455838dacfc76003|2019-05-05|Samuel Audet| * Allow suffixing library names with `:` to specify exact relative paths to libraries, ignoring any additional prefix or suffix
34597f5f2ed1fb868d01055bda9e0a4ebb51c11f|2019-05-04|Samuel Audet| * Prevent `Loader.load()` from trying to load library files that do not exist or to create symbolic links to them
665daa195084f64ee85a0ac33c03f42f96942646|2019-04-25|Samuel Audet| * Let `Loader.load()` extract libraries suffixed with `##`, but still ignored for copying by `Builder`
2f7c95638ae3291ed0c0ae410856a8f7c71e35c4|2019-04-24|Samuel Audet| * Make sure `Loader.load()` also initializes classes that are passed explicitly
18aec223e7d6dc42a8ed99d6fbb98b265766ece7|2019-04-23|Samuel Audet| * Fix `Loader.createLibraryLink()` incorrectly truncating library versions when there is one before and another after the suffix
5e7ff2506ee127c6f07ca81cc919cc8bae6b9be2|2019-04-18|Samuel Audet| * Iterate extensions of libraries or executables on `Loader.load()` in reverse to be consistent with properties overriding
130afac898275d393391a2711289a1e896524a39|2019-04-18|Samuel Audet|Change trailing `long[] sizes` parameters of indexers to `long... sizes` for convenience
67c528cf8acb0beadd36b9e24ddb6d9c68167671|2019-04-16|Samuel Audet| * Allow prefixing library names with `:` to have `Loader` consider them as filenames with prefix and suffix already included
c50f88649e00ed54e55083adf11b05805bca57b5|2019-04-16|Samuel Audet| * Add `Loader.loadGlobal()` to load symbols globally as often required by Python libraries (issue ContinuumIO/anaconda-issues#6401)
135c444c3aad52ae2a4328f657c46d75111b9311|2019-04-11|Samuel Audet|Update version in the `pom.xml` file to 1.5.1-SNAPSHOT
e39dbe576ef93e1a8eecef0b767277375afb6483|2019-04-08|Samuel Audet|Release version 1.5
29183e82eb97326715e7a0555a57c320260722f4|2019-04-07|Samuel Audet| * Have `Parser` output `setter` as dummy parameter name for setter methods to clarify usage
6db23a20d149599b9b2f07b47971a6c978319b8f|2019-04-02|Samuel Audet| * Add `Indexer.strides(long... sizes)` and use as default strides when not specified by the user
b37febbd2f6980fb7144d02d813b01ff5a12d8fe|2019-04-02|Samuel Audet| * Add `long...` constructors, getters, and setters to `CLongPointer` and `SizeTPointer` for convenience
59839f50773b5c496e6c3f8f2d057bed4326008d|2019-04-02|Samuel Audet| * Fix some `Generator` issues with `FunctionPointer` passed or returned `@ByPtrPtr`
461e9bd2578b124d18c61382aa80ca4ae38ef6c3|2019-03-27|Samuel Audet|Comment out workaround for OpenJDK 9 not needed for OpenJDK 8 on Travis CI
8bc0296890dd058dec743f6baa7f355a77818da5|2019-03-27|Samuel Audet|Fix Builder failing to overwrite files on copy
f763d5c88e824472d3d36263b6597e1f44209de3|2019-03-27|Samuel Audet| * Use ModiTect to compile `module-info.java` with JDK 8 and preserve backward compatibility
d966519862500e64b90b4bd30d56e3d7aeb39ce2|2019-03-23|Samuel Audet| * Add `platform.executable` and `platform.executablepath` properties to bundle executables and extract them with `Loader.load()`
58521bac6995572f3e30c3645a4c4ae8bdc573a4|2019-03-20|Samuel Audet| * Create symbolic links for all libraries preloaded by `Loader` as they get loaded to satisfy libraries like MKL
b9cdff75133ade366a3c32f8bf8b1537b575c1e6|2019-03-10|Samuel Audet| * Prevent `ClassCastException` in `Loader` on illegal system properties (issue #289)  * Fix `Parser` not replacing all type names of the base class with `Info.flatten` (issue #288)
9cced26b39702bc370aacd0a3375b574c33b9a84|2019-01-21|Samuel Audet|Update version in the `pom.xml` file to 1.5-SNAPSHOT
b03fda78a7c4a97c8d01093e177ecd655a997b53|2019-03-02|Samuel Audet| * Let `BuildMojo` return to the Maven project the detected host platform as `${javacpp.platform.host}`
398a965192990d03ff44ae402a8eb07a2e8a1fc7|2019-02-26|Samuel Audet|Fix spurious library generation when overriding `@Properties` with an additional `@Platform` annotation
97111f991ba816ca21ae8dcca9fd7ebcbf1c4cbc|2019-02-25|Samuel Audet| * Have `BuildMojo` output a JPMS friendly name for the platform and extension back to the Maven project as `${javacpp.platform.module}`
a675a5811749f87fade536b60c31a62721d47f51|2019-02-24|Samuel Audet| * Add `Builder.clean` option to delete the `outputDirectory` before generating files
5b4709ea58444e25f676a1baed442a5ba9d0546b|2019-02-23|Samuel Audet|But leave `Parser` fall back on `Info` for the type when not explicitly available for constructors
be92fe8331e798a552da6a1915a25e6cb25e5285|2019-02-22|Samuel Audet| * Let `Parser` pick up `Info` explicitly for all constructors by considering their names as functions (issue #284)
3e134fe6d8d2eba8b6584a357b6c690201af3475|2019-02-20|Samuel Audet| * Fix `Parser` overlooking `Info` for constructors inside templates (issue #284)
d120d852729c57f5f0acafb4389ff8306eb219ea|2019-02-19|Samuel Audet| * Fix `Parser` not always generating files using the simple names of classes
eabbccb0735044ec79cbffd346db66b916c43ecb|2019-02-19|Samuel Audet| * Add a `BuildMojo.targetDirectories` parameter to allow setting multiple directories where to find generated Java files
e435a018957143bcbaef022212cae785249eb7e7|2019-02-19|Samuel Audet| * Add `Parser` support for attributes appearing after `struct` declarations (issue bytedeco/javacpp-presets#685)
7f7ba43bf84389b3ec7d21e32101e6bf31245739|2019-02-19|Samuel Audet| * Fix `Parser` overlooking `Info` for constructors inside a namespace (issue #284)
d71d8f690b23648b00601a6a56be1c5ae89d9d8a|2019-02-18|Samuel Audet| * Fix `Parser` applying some `Info.annotations` at the wrong place (issue #284)
e9daf35187676acbc2cc3bd083495a37c84e8e9c|2019-02-13|Samuel Audet| * Allow an additional `@Platform` annotation to override `@Properties`
e51d34a230ad1e076d2158bd6810a6032d4b6d74|2019-01-29|Samuel Audet| * Make `Parser` behave the same with `@Properties` having only one out of `global` or `target` value set
32d1721236f47a536d61106de684a6e77efe34e1|2019-01-26|Samuel Audet| * Enhance `UniquePtrAdapter` with the ability to move pointers out with the `&&` operator  * Let `Parser` map constructors also for abstract classes with `Info.virtualize`
bc4f85c5ae5d29fa120d67438a8a91fddfb5bacf|2019-01-25|Samuel Audet| * Fix `Parser` taking the global package as the target package even when both are set
a1e196cccbbc72b7f79fb27414b0acebe92bbaa6|2019-01-23|Samuel Audet| * Consider `@Properties(global=..., helper=...)` class names without "." as relative to `target` (pull bytedeco/javacpp-presets#669)
8658d3ab7ee230a59bea346676710101073d3e9e|2019-01-22|Samuel Audet|Remove regex not supported by Java SE 7
60bb9d91024c26500845deb2a15429954a4ebcb4|2019-01-21|HGuillemet| * Use regex in `Parser` to translate more Doxygen commands into Javadoc tags (pull #278 and pull #281)
3707a48c37e8d35afd901cda218f7e13ed0558f9|2019-01-14|Alex Merritt| * Do not let `Parser` map `operator=()` when prefixing container name with `const ` (pull #280)
5729b075bdc6a40c70146b0f203d24bb4b487cf0|2019-01-12|Samuel Audet|Update version in the `pom.xml` files to 1.4.5-SNAPSHOT
526f0da950fcfb0f1eefe0609d8a7f2cbb44ad74|2019-01-10|Samuel Audet|Release version 1.4.4
a84bfb7899a649c6ef541b4e109b9b49595da9ae|2019-01-08|Samuel Audet|Update links for Javadoc
2cf75e542f1a2756e5a918872a90720e895fe239|2019-01-04|Samuel Audet|Refine `Parser` skipping over C++11 style `{ ... }` member initializer lists (pull bytedeco/javacpp-presets#642)
3da3c7aa82aa4ecc9a15cc08f0741e94c76fcee1|2018-12-31|Samuel Audet| * Allow users to override platform properties via system properties starting with "org.bytedeco.javacpp.platform."
c2413811dba8195c1de1e522d34d52002ed5cf84|2018-12-29|Samuel Audet| * Have `BuildMojo` output its class path back to the Maven project as `${javacpp.platform.artifacts}`
ce03d55c66a359db28b36373e51c80e4751a7be6|2018-12-28|Samuel Audet| * Fix potential `NullPointerException` in `Loader.findResources()` under the bootstrap class loader
f39f2c81f5d20b3e70de5fcbbf4a094892c599ed|2018-12-27|Samuel Audet| * Add `size()` and `stride()` methods to `Indexer` for convenience
fbf9e958e564bc0c93dec201e8e6d650f10524ef|2018-12-23|Samuel Audet| * Let `Parser` skip over C++11 style `{ ... }` member initializer lists (pull bytedeco/javacpp-presets#642)
6a71efb96405174d3876b1d82dd9cca2f64b2aa6|2018-12-17|Samuel Audet| * Fix `Parser` not picking up `Info` for cast `operator` declarations with `const`, `&`, or `*` (issue bytedeco/javacpp-presets#377)
61db8dd73b23b1375dd540da729de3d96b696ed6|2018-12-15|Samuel Audet|Fix bug introduced in changes to `Loader.findResources()` for dealing with JPMS
2eca93ffe016e25aaf22f9ac47c791b881f11920|2018-12-15|Samuel Audet| * Add validation for `Builder.environmentVariables` to prevent `NullPointerException` in `executeCommand()`
257dd6ad055c2c38ba333540a9a68b2f5f2f4e15|2018-12-13|Samuel Audet| * Update `android-arm-clang.properties` and `android-x86-clang.properties` to API level 21 (Android 5.0) for consistency and forward compatibility
f3a7d76dd0291aa9c4e0a588b654c84411c00b18|2018-12-10|Samuel Audet| * Replace calls to `Class.getResource()` with `Loader.findResource()` to work around issues with JPMS ([pull #276](https://github.com/bytedeco/javacpp/pull/276))  * Enhance `Loader.findResources()` with `Class.getResource()` and search among parent packages  * Take shortest common package name among all user classes for the default output path of `Builder`
3ebcd82fb7009ec25aefef7c67f40c1f8aa1cd81|2018-12-05|Samuel Audet| * Add `Bfloat16Indexer` to access `short` arrays as `bfloat16` floating point numbers
32610ea3d743f3bd1fe0559602c759af7fc83939|2018-12-05|HGuillemet| * When `Indexer.sizes.length != 3`, return -1 for `rows()`, `cols()`, `width()`, `height()`, and `channels()` (pull #275)
7ed419196f40a075685b577cf37ccf742a7d6058|2018-12-03|Samuel Audet| * Synchronize `Loader.cacheResources()` on `Runtime` to avoid `OverlappingFileLockException` with multiple class loaders (issue bytedeco/javacpp-presets#650)
ea93ef1cd49585d2f390bc94a6d678ce67e05246|2018-12-03|Samuel Audet| * Annotate `BuildMojo` as `threadSafe`
3e72b05572206751bb5651c10539f31634151d37|2018-11-30|Samuel Audet| * Fix `Generator` errors for `@StdString` and other `@Adapter` on `@Virtual` return values
f69de74da8109774d58d278832ce7e8aae24a1d6|2018-11-29|Samuel Audet|Use `@Properties(inherit=...)` instead of `@Platform(library=...)` for classes targeted by `@Properties(global=...)`
fe0140af6af9d3db216bf505c7d611b0c67a4b6c|2018-11-28|Samuel Audet| * Use simple name from `@Properties(target=..., global=...)` class as default for `@Platform(library=...)` name
99835a5b8cc26e2162f30ba4b8dbf188e389cb0f|2018-11-28|Samuel Audet| * Make sure `Generator` does not use `position` of `@Opaque Pointer` output parameters with `@Adapter` (pull bytedeco/javacpp-presets#642)
66023c2c4e547828439d8bd2b9f0d577e1c671f0|2018-11-28|Samuel Audet| * Prevent `Builder` from trying to use `Pointer` as library name for the output
1dcfcc7c444b3c073af37a8e849577f759d9539a|2018-11-25|Samuel Audet| * Add `Builder.generate` option and corresponding `ParseMojo` to prioritize parsing header files
0e3ff4546b2a34beeb5abae254f94b38e139ad21|2018-11-20|Samuel Audet| * Fix `Parser` mapping of `const` function pointer variable declarations
572500bfabf1290dc05a515b7fe2db5bf6823309|2018-11-20|Samuel Audet| * Enhance `Loader.cacheResource()` with support for HTTP connections
edb51914bc38c4ff56283ba69830cff422b15245|2018-11-18|Samuel Audet|Work around broken certificates for OpenJDK 9 on Travis CI (issue travis-ci/travis-ci#9368)
7bff797bb91d75b04890598609ff014fa7adae7f|2018-11-18|Samuel Audet| * Add `module-info.java` and create a multi-release JAR to comply with JPMS (pull #252)
486f3eff7d31c7dd16bcaac9eae932e6592d73b0|2018-11-15|Samuel Audet| * Prevent `Parser` from outputting twice the same `Info.javaText` by using it as declaration signature
2d731dc8a36a68a0c26a0c2a94567197bba3739f|2018-11-12|Samuel Audet| * Provide default `Info` for `std::string*` and `std::wstring*` mapping to `BytePointer`, and `CharPointer` and `IntPointer`  * Ensure `Parser` skips over attributes of friend declarations or function definitions that are not used  * Do not let `Parser` output `@Override` when overloading a method with less parameters using default arguments
d03f3bd6738c3bf253d0dbaa4e5b0899918e0137|2018-11-10|Samuel Audet| * Allow `Builder` to execute `javac` and `java` for convenience, and remove "." from class path (issue #192)
f214f5c3aa14d2231bfe4e8d0fbab394a7a50a30|2018-11-06|Samuel Audet| * Enhance support for `java.nio.Buffer` by taking into account `offset`, `position`, `limit`, and `capacity` on function calls
8fe769428ee9510f25b5e30d476cdd1c779e0bb2|2018-11-05|Samuel Audet| * Make sure `Parser` always uses the short version of identifiers for Java class declarations  * Prevent `Parser` from inheriting constructors with `using` when not accessible or of incomplete template instances
c4759be5d7345c59e1d773c42b6182b3c5d096bf|2018-10-25|Samuel Audet| * Add default `Info` to map `noexcept` attribute from C++11 to `@NoException` annotation  * Fix `Parser` failures on variadic function template arguments `...` and destructor attributes (pull bytedeco/javacpp-presets#622)
f89f1c370617105f940a4e7a0eabbbcb491939dd|2018-10-24|Samuel Audet| * Add `@Properties(global=...)` value to allow `Parser` to target Java packages (pull #252)
c03cd9d335820ba9a26bf200fe90a69400001303|2018-10-17|Samuel Audet| * Fix `Generator` output for `@Const` parameters of function pointers
e46c5bc3c2a878ecd8119cd505e6c38fac6274d0|2018-10-16|Samuel Audet|Update version in the `pom.xml` files to 1.4.4-SNAPSHOT
86713b761642588a5301d9241a93ff5d58d78536|2018-10-15|Samuel Audet|Release version 1.4.3
b4d816a860a7ddb293f98e44e42ff2c9fbc26be7|2018-10-12|Ao Qi| * Add support for `linux-mips64el` with `linux-mips64el.properties` (pull #268)
c105445fb30709263c6cc830067c6c684ceaa73d|2018-10-11|Samuel Audet| * Enhance `Generator` with `@ByPtr` for primitive types and `@NoException` for `FunctionPointer` methods
734e30e8a2ae15539bb4af5a00aa649804ca0296|2018-10-02|Samuel Audet| * Add `BooleanPointer` and `BooleanIndexer` to access arrays of boolean values with `sizeof(jboolean) == 1`
8f7889f83e6f2567196b0ea07cfbade9088f3383|2018-09-28|Samuel Audet| * Update `README.md` with reference to newly published [Basic Architecture of JavaCPP](https://github.com/bytedeco/javacpp/wiki/Basic-Architecture)
46a66d90e94aca1a35fe163beacb19e0f35c45d5|2018-09-28|Samuel Audet| * Let `Parser` skip over `static_assert()` declarations of C++11
7393162b69846edae5622df0bb5a31d89d5038a9|2018-09-27|Aman Gupta| * Fix `android-arm-clang.properties` and `android-x86-clang.properties` for builds with NDK r18 (pull #263)
223e82e8cc6d078a940d551012e1afee13f4197e|2018-09-24|Samuel Audet| * Add to default `InfoMap` missing `int` value type and `IntPointer` pointer type for `wchar_t`
5b70ce94f55b3adeeef06da9f541534bcc667d9f|2018-09-13|Samuel Audet| * Add `Loader.getLoadedLibraries()` method for debugging purposes and fix flaky `BuilderTest` (issue #245)  * Call `PointerScope.attach()` as part of `Pointer.deallocator()`, instead of `init()`, to support custom deallocators as well  * Prevent `Parser` from appending annotations to setter methods of variables to satisfy the `Generator`
63cf6b616df408bc19f53a9fb97b34aaa6fb8935|2018-09-11|louxiu|Include member name in JavaCPP_exception message for pure virtual functions (pull #258)
2f4e1d22b7bd1b4bfa164c51804de54731d8a0b2|2018-09-09|Samuel Audet| * Fix `Parser` failing when a value of an `std::pair` basic container is also an `std::pair` (issue bytedeco/javacpp-presets#614)
78902d2a716d39c59ffb17b94e568bfcfddc1c19|2018-09-06|Zayin Krige| * Fix build issues with `android-arm` and recent versions of the NDK (pull #256)
449f31b2717a6cebe1581d940b916f52eab790ac|2018-09-05|Samuel Audet| * Add `platform.preloadresource` property to be able to preload libraries from other Java packages
30316827791c11e2b6d6bbd253ecb1d30591b665|2018-08-30|Samuel Audet|Add a "Getting Started" section to the README.md file
d8a0f910b328596302cdec414be418bd7de47ba7|2018-08-28|louxiu| * Make `Builder` accept multiple options for `platform.link.prefix` and `platform.link.suffix` (pull #250)
dd57c2cca04c937de8031f5dfc896f1c45b59379|2018-08-27|Samuel Audet| * Let `Loader` rename JNI libraries when "already loaded in another classloader" (issue deeplearning4j/deeplearning4j#6166)
c50d69f896332e6817cb371fdfc43b86fbbedc85|2018-08-25|vincent-grosbois| * Add new `@CriticalRegion` annotation to allow zero-copy access to data of Java arrays (pull #254)
fa35503c768441aad93ed227048d194130ed1c6e|2018-08-24|Samuel Audet|Add `PointerTest.testPointerPointer()` to make sure it works correctly (issue #251)
00cd483bebfbd04f7e3f6fbe3272f49eb7db4fb2|2018-08-17|Samuel Audet| * Allow `Builder` to create links for resource libraries even when no Java classes are built  * Fix `Loader.cacheResource()` creating a subdirectory named "null" when caching a top-level file
1ec41b64e6d0bf1a7e305e823a7a5c68bf808883|2018-08-17|Samuel Audet| * Update `README.md` with reference to newly published [Mapping Recipes for C/C++ Libraries](https://github.com/bytedeco/javacpp/wiki/Mapping-Recipes)
41e0bf0df69eaf641105df2b2217c59ee5551e33|2018-08-15|Samuel Audet| * Make `Parser` strip annotations from setter methods for basic containers to satisfy the `Generator`
53dcb8b90172a39a22d0b622adb75197f9d0010d|2018-08-03|Samuel Audet| * Have `Parser` wrap the `insert()` and `erase()` methods of basic containers to allow modifying lists and sets
391002c10e41461e05298c28da47fe6d23950de9|2018-08-03|Samuel Audet| * Let `Parser` create mutable instances of map containers without `const ` prefix (issue bytedeco/javacpp-presets#595)  * Fix `Parser` sometimes ignoring `define` of `const ` containers (pull bytedeco/javacpp-presets#547)
7cfd1bf5ad06230716c8274fe304e83ceff24f59|2018-08-02|Samuel Audet| * Explain the purpose of the `intern()` methods generated for Java enums
cc6bbc801aa1de1b3010a92e0b9a38de13fd9834|2018-07-31|Samuel Audet|Revert dependency on maven-core to version 3.0
018138d6fc075bea761ed36bbae9cc9d40774ec0|2018-07-29|Samuel Audet|Disable broken maven-deploy-plugin as no longer needed
0bdad1cc32c59b78d061bc717391a20a6f773f5b|2018-07-28|Samuel Audet| * Clarify that `Loader.load()` can throw `UnsatisfiedLinkError` when interrupted
c24de8951f2f73a32924d8ec20a7bbeba652abf9|2018-07-28|Samuel Audet|Upgrade all Maven dependencies and plugins to latest versions
69d392114b82bc0831f61786d6bc49cddd906e84|2018-07-28|louxiu| * Synchronize `Loader.loadLibrary()` to fix potential race condition (pull #246)
a9ab4e920526663309f0a44c739889e64eb6d633|2018-07-18|Samuel Audet|Update version in the `pom.xml` file to 1.4.3-SNAPSHOT
c036db27ca85191e246b23b9390758225ed81c50|2018-07-16|Samuel Audet|Release version 1.4.2
925bc9eb0303d52d09de0ec43e7cce4e20e5e276|2018-07-16|Samuel Audet| * Add `Loader.getJavaVM()` method to get the JNI `JavaVM` object as required to initialize some libraries
45b811bfbe94fde93a2a6adcb21d9e7f25715739|2018-07-14|Samuel Audet|Rectify misconceptions about cppyy in the README.md file
13e6ff1a72c0e3423c50cc02b5746cc98f4418dc|2018-07-12|Samuel Audet| * Fix `Parser` from outputting accessors not available with `std::forward_list` or `std::list`
428c79da3858963be3883808e5f15e36b91364bc|2018-07-12|Aman Gupta| * Use `pthread_setspecific()` in `Generator` to detach automatically native threads on exit for Android (pull #243)
135c3ed7a461d30226538899b995a3ea9d7318ee|2018-07-12|Aman Gupta|Fix `android-arm-clang.properties`, `android-arm64-clang.properties`, and `android-x86_64-clang.properties` for NDK r17b (pull #244)
b53117a35992ef35c71e20c274d3e77e1492288a|2018-07-05|Samuel Audet| * Fix issues with anonymous classes by calling `getEnclosingClass()` instead of `getDeclaringClass()`
454f1ae7e676f431eccd6d7df63205ddc2f94e18|2018-06-20|Samuel Audet| * Add `android-arm-clang.properties`, `android-arm64-clang.properties`, `android-x86-clang.properties` and `android-x86_64-clang.properties`
a90fa526da6b3a8388aaa5a868afef510230bc60|2018-06-19|Samuel Audet| * Search in `linkpath` before `preloadpath` to avoid copying or loading unwanted libraries
9b5d85d9996ece51533a7e23b1ac66e0696a8811|2018-06-17|Samuel Audet| * Fix `Builder` not bundling libraries containing a `#` fragment only useful at load time
cc3325732209d75779cfc3d05b342137a4f8b473|2018-06-15|Samuel Audet| * Make `Parser` take into account implicit constructors even when inheriting some with `using` declarations  * Pick up `Parser` translation of enum and macro expressions from `Info.javaNames`  * Let `Parser` define `Info.pointerTypes` also for partially specialized templates with default arguments
e88ae488b66872fbeac5526d93a7e30be3747429|2018-06-11|Samuel Audet| * Tweak `Pointer.formatBytes()` to increase the number of digits returned (issue #240)
8d385ea964e52ef30d56196f1274eb0260ba8919|2018-06-11|Samuel Audet| * Enhance `InfoMap` and `StringAdapter` with default mappings and casts for `std::wstring`
d07eb39ce1faebab3ade0ab1d388dee59663e4c3|2018-06-11|Samuel Audet| * Templatize `StringAdapter` to allow other character types like `wchar_t` and add corresponding `@StdWString` annotation
4fb67229f8230f45f9a7d7fd6c17cb8dad6f26c8|2018-06-07|Samuel Audet| * Do not fall back on `System.loadLibrary()` when we are renaming libraries (issue deeplearning4j/deeplearning4j#5503)
cd736e9e21e29425a29fb22dcb31597b6d3a73d9|2018-06-05|Samuel Audet| * Prevent `Loader` from creating symbolic links to rename libraries, which does not always work
7a90061d996e80197274564b573b92c39a51e311|2018-06-02|Samuel Audet| * Fix memory leak that occurs with "org.bytedeco.javacpp.nopointergc" (issue #239)
e0567736395108300756bd2b9f293d602ca009fe|2018-05-30|Samuel Audet| * Make `Generator` use `GENERIC_EXCEPTION_TOSTRING` macro on `GENERIC_EXCEPTION_CLASS` instead of the default `what()`
4be2d02204ae7ccc02462bff9d5ac55bcce8a12b|2018-05-26|Samuel Audet|Fix potential `NullPointerException` in `Loader`
f1f21ae38aba00972992aa03b77fed763377ba77|2018-05-24|Samuel Audet| * Fall back on Android-friendly `System.loadLibrary()` in `Loader.load()` instead of "java.library.path" (issue bytedeco/javacv#970)
ba5f7d48a67f1443031a40a5ac69b226427d953c|2018-05-18|Samuel Audet|Fix `EnumTest` on Windows (issue #238)
d20de9bc50eb05067b1a1436970fac12edfabce3|2018-05-16|Samuel Audet| * Add to Java enums an `intern()` method and use it in `toString()` to return non-null strings
a8179ee7d19c096853d52c2eaa7938c2148e69f2|2018-05-16|Samuel Audet|Add `PointerScope.getInnerScope()` that can be called from any context
d98d323778c4b73865d19c7fc15c8380b130f5e0|2018-05-10|Samuel Audet| * Add `PointerScope` to manage more easily the resources of a group of `Pointer` objects
96045c9b86625df009e3986c555e467bd7d58853|2018-04-30|Samuel Audet|Add instructions to include in Leiningen projects
380feb2a92badef083d0000eb3db6a2a264a620c|2018-04-28|Samuel Audet| * Fix `Parser` failing on constructors of class templates
97d7ea6c08c6056a2ed715c38d3c67de50b24ce7|2018-04-20|Samuel Audet| * Fix `Parser` failing on `const void*&` or similar function arguments
d9077e6353ffecbe2f70fdb5d8358400e338b7cc|2018-04-18|Samuel Audet| * Add `Info.skipDefaults` to have the `Parser` ignore default function arguments and prevent method overloading
135190039020e6d0b2f1f592e63788358cfcac23|2018-04-17|Samuel Audet| * Accelerate copy and extraction of resources by using larger buffers for file operations
be49bde573801e2899ce8149b434c2ccc4af317a|2018-04-13|Samuel Audet|Fix logic of last commit surrounding function arguments and qualified names
609e65ab2a48cd487d61f8278bea456211277488|2018-04-12|Samuel Audet| * Fix `Parser` incorrectly referring to function arguments with impossibly qualified names
e5c349d11a3892461425de215aa2e998331f1f26|2018-04-04|Samuel Audet| * Allow using `new Info().enumerate()` to map all C++ `enum` to Java `enum` types by default  * Fix `Parser` issues surrounding enum classes, anonymous namespaces, and pure virtual classes
41289a7ef4965a145f4cc182964f55ffac633997|2018-04-01|Samuel Audet| * Avoid `synchronized` on first call to `physicalBytes()` in `Pointer.deallocator()` to reduce contention (pull #232)
80209b31086a6ec80b940f2d1a838bacd35f777f|2018-03-31|Samuel Audet|Update links in the README.md file
4a87176e3713ea240390f6d93d6fe408cd1b0957|2018-03-29|Samuel Audet|Update version in the `pom.xml` file to 1.4.2-SNAPSHOT
d58ef854e131a6b22f830bf59551f00f745993ad|2018-03-28|Samuel Audet|Release version 1.4.1
1367b8191c474bc78a647ee38f5c836d55c8410b|2018-03-27|Samuel Audet|Reference new enum types only when needed to maintain backward compatibility
8736b172af26b5fc68dfbcaa2e11820660bd998b|2018-03-26|Samuel Audet| * Enhance `Loader.createLibraryLink()` by allowing to create symbolic links in other directories
c3b9dc2e9967710f70aa4daceef3cc9d22fa4cdd|2018-03-23|Samuel Audet| * Fix `Parser` failing on `enum` declarations where the first line is a macro (issue #230)
273d4bca636530052d7e7b2c7c164cac8c7274af|2018-03-23|Samuel Audet| * Make call to `Pointer.physicalBytes()` thread safe and remove lock (issue #231)
23389292924b4329f76874a4e4e952b4cd3cb3e5|2018-03-22|Samuel Audet|Make sure to use C++11 with `EnumTest`
8b9fc2fd0285879276ee4b622351dbee30b011e5|2018-03-22|Samuel Audet| * Add `Info.enumerate` to let `Parser` map C++ enum classes to Java enum types (issue #108)
aea25af1df233ef448511995abb3f5029a9bd17a|2018-03-19|Samuel Audet| * Prevent `Loader` from loading twice copies of the same DLL (issue deeplearning4j/deeplearning4j#4776)
24eee5f2db9843c663f5d05fa3ec587900b9f0e6|2018-03-15|Samuel Audet| * Add a `BuildMojo.targetDirectory` parameter to set a directory containing Java files generated by `buildCommand`
d103d98f0bf4586ba25d379be0629a364a3fb157|2018-03-10|Samuel Audet| * Fix missing `jnijavacpp.cpp` when processing classes from different packages (issue #228)
ae084eb30a7186c3f3102cbd56ea41c648e99f48|2018-03-09|Samuel Audet|Fix `Parser` failing on `enum` declarations with attributes
5dd74d705594d50a8f21389add36f9848e51cc44|2018-03-08|Samuel Audet|Disable call to `dl_iterate_phdr()` not available on `android-arm`
5efcce972a9fac55c1fbe3f35c1f38336e5eff56|2018-03-08|Samuel Audet| * Enhance `Loader.addressof()` by making it try harder to find symbols on Linux and Mac OS X
2549d4bccc8eae5b87a45d744b97f005eec791bf|2018-03-05|Samuel Audet| * Add `get()` and `toString()` methods to basic containers defined in `Parser`
77a1028e376846f2fb5feab00a8dec96ca16aec2|2018-03-03|Samuel Audet| * Fix `Parser` ignoring `Info.define` and other information for macros actually defined
00a7f6ad0387af49a6ef0c12bf8774299ff4abbe|2018-03-03|Samuel Audet| * Fix `SharedPtrAdapter` and `UniquePtrAdapter` failing to take ownership of temporary objects
65c41d94a20bacf30f69d1ab4637f1790adc8506|2018-02-28|Samuel Audet|Fix various small issues with `Parser`
0822f0cc1916dd6056693796594180a9e377304b|2018-02-23|Samuel Audet| * Fix properties for `android-arm64` and `android-x86_64` platforms that need API level 21
7b84d8366e9a502f02b5271a05ac72bb620f81d8|2018-02-21|Samuel Audet| * Add "org.bytedeco.javacpp.pathsfirst" system property to let users search "java.library.path", etc before the class path
594b62f67d4e7a442eec690ed1cece7b6e18326f|2018-02-20|Samuel Audet| * Add `Parser` support for `_Bool`, `_Complex`, `_Imaginary`, `complex`, `imaginary` types from C99
f5d9fede11899f70f48ba5e69bfa77698135b04e|2018-02-16|Samuel Audet| * Fix `Generator` incorrectly splitting type names for template arguments containing function types
197d7e206cbc5379138eb612e7ddc9dfeb8bb8ec|2018-02-15|Samuel Audet| * Fix `NullPointerException` in `Builder` when copying resources for static libraries
e3f9faa786173614d7d54f274b2867577bf1e0e8|2018-02-14|Samuel Audet| * Let `Generator` pick up `@NoException` annotations from super classes as well
db5aeaaf5f0d51fba12ac35ba8befc210f0533a2|2018-02-13|Samuel Audet| * Add `-stdlib=libc++` option to iOS properties, required by `clang++` to support C++11 (pull #221)
31419c71e117c154b3b67662199f241c96877c0e|2018-02-11|Samuel Audet| * Make it possible to define read-only containers with `Parser` by prepending `const ` (issue #223)
b6fa91a2037cd85ec6afefda86fbcdc66d111235|2018-02-10|Samuel Audet| * Fix `Parser` failure of variable or function declarations on names starting with `::`
021a36d6ad1bca985c4186ae11b109089339d6c2|2018-02-09|Samuel Audet|Handle exceptions thrown in code generated for `@Index(function = ...)`
5c99b302805b95350b672ffded1cb382ebfbef45|2018-02-08|Samuel Audet| * Access elements of basic containers defined in `Parser` with `at()` instead of `operator[]` (issue #223)
c97570e8baecac6d4a99656e318471d18f123c36|2018-02-06|louxiu| * Add third element to `@Const` annotation to support `virtual const` functions (pull #224)
fe2da1a35f88327b38bbd795a57a0d8162664960|2018-02-06|Samuel Audet| * Create more symbolic links to libraries preloaded by `Loader` to satisfy libraries like MKL
6b7bb07a83aa62d155cdeda20a20d9910370f7fa|2018-02-06|Samuel Audet| * Work around in `Builder` the inability to pass empty arguments on Windows
3d182d51e3ac5697bc7548c9476200ad366a896e|2018-02-01|Alex Black| * Catch more exceptions that can occur in `Loader` when caching resources (pull #226)
944f6b1d99985a0b0c54b531716c8ce9966e4f58|2018-01-31|Samuel Audet| * Add `.a` as an allowed library extension for iOS so they can get bundled
7cba4d67ef7c77f7118b28e62cf02fc2c61d7150|2018-01-29|Samuel Audet| * Fix `Parser` failing on variables with direct list initialization `{ ... }` (issue #223)
c579b22492b7b2331a85cec5038a44bca708530c|2018-01-23|Samuel Audet|Update links in the README.md file
83570ae1597ca1ec8aa38c26b6c6aa364888559a|2018-01-23|Samuel Audet| * Allow `Parser` to map and cast function pointers to `Pointer`
13c8c884d0fa2dd728e1c19230c71f98e212a0e0|2018-01-17|Samuel Audet|Update version in the `pom.xml` file to 1.4.1-SNAPSHOT
59fd619b31bcee8547b1d336d76ce65dbdb7c339|2018-01-15|Samuel Audet|Release version 1.4
1ffbf360743ff5319e4f5777ab46f24366fceb18|2018-01-14|Samuel Audet| * Output to log all commands executed for `Builder.buildCommand` via `ProcessBuilder`
652249c7ee95d3457110178353d4bf7b0fc52140|2018-01-09|Samuel Audet| * Switch architecture in `android-arm.properties` to ARMv7-A
be9eca52c70cdb5c7d2c962784df170e7f62ce48|2018-01-09|Samuel Audet| * Fix `Parser` not producing `@Cast` annotations for types with `Info.cast()` on `operator()`, as well as failing on `using operator` statements
a5e3350a0c2faf9b6a9fe61bbab50b09d640df6e|2018-01-08|Samuel Audet| * Fix `Parser` issue with multiple container types (`std::vector`, etc) getting mixed up when mapped to adapters (`@StdVector`, etc)
fa16a255c2d87974c1c7cd672aceff9efdd04eae|2017-12-31|Samuel Audet| * Fix "Negative Buffer Capacity" errors happening in subclasses on `Pointer.asBuffer()` (issue deeplearning4j/deeplearning4j#4061)
4f01ca06da9a2aee895fb24be3f34e2a62d974e5|2017-12-31|Samuel Audet| * Prevent `JNI_OnLoad()` from failing when `Loader.putMemberOffset()` cannot find a class  * Throw clear error message when `Loader.load()` gets called on a class not supporting current platform
b1146e5f5f93a143d85c028d1aac0c3dba8f499c|2017-12-26|Samuel Audet| * Create symbolic links to libraries preloaded by `Loader` as needed on Mac for renamed libraries
81f97d284ab1dc6f2bdcad3a9bd34fc171315a1e|2017-12-25|Samuel Audet| * Make `Parser` honor `Info.skip()` for function pointers as well
4ab59bf97b475187c042b2311745bca90894080e|2017-12-24|Samuel Audet| * Define `clear()` and `empty()` for resizable basic containers in `Parser`
b0ba5093de018051e8a9ce15fd3f540f48818e0f|2017-12-22|Samuel Audet| * Update platform properties to support recent versions of the Android NDK
c3e75adbdfec0d09a6b1ca3af0b616ac437fbd78|2017-12-21|Samuel Audet| * Fix `Generator` issues with `@ByPtrPtr` return of `String` or `Pointer` types (issue bytedeco/javacpp-presets#499)
ac9c54e4d2400c5e2a3394b1b098406b0ed7427a|2017-12-20|Samuel Audet| * Produce `pop_back()` and `push_back()` for relevant basic containers in `Parser` (issue bytedeco/javacv#659)
acde6ff1225f78f508bb010b4a1949513f969e67|2017-12-20|Samuel Audet| * Add "nowarnings" option for the `@Platform(compiler=...)` value to suppress all warnings
ebae3a343ba9927c8fc6d5f26275611e66263c2e|2017-12-18|Samuel Audet|Refine support for `platform.extension` by moving it to platform properties
b12117a9024f9bc00c938602ab28fc6be1ec4597|2017-12-14|Samuel Audet| * Have `Builder` generate base JNI functions into `jnijavacpp.cpp` for better iOS support (issue #213)
d25d7e4b393620c54ba4b3a9b8f5c7be76343a54|2017-12-14|Samuel Audet| * Output single value setters for containers in `Parser` to avoid surprises (issue #217)
93009c8a3859cd0e03f465f862298ee6afcc35e2|2017-12-11|Samuel Audet| * Add `Parser` support for C++11 `using` declarations inheriting constructors (issue bytedeco/javacpp-presets#491)  * Fix compiler error when defining `std::set` or `std::unordered_set` with `Parser`
0853968e8dc5a77fa7167d62f3a311fb300594ff|2017-12-10|Samuel Audet|Restore version in the `pom.xml` file to 1.3.4-SNAPSHOT
9c6aa2f8225a8021cc9d14b0780a66537e2dce21|2017-12-07|Samuel Audet|Release version 1.3.4_skil-1.0.0
50bb3dacaa5c32b148b937d9df289b2ebc525227|2017-12-07|Samuel Audet| * Make `Parser` take `Info.skip()` into account for enumerators as well
d8c9f123f9e26e48d60863bd566b7ac9d7fc8b94|2017-12-06|Johan Vos|Add missing forward declaration for `JNI_OnLoad_libname()` (pull #212)
86d1019abf8767efb176e90e315c99d110bc12c3|2017-12-04|Samuel Audet| * Add `LoadEnabled` interface to allow classes to modify their `ClassProperties` at runtime
79680934375a4844d64a026d9b02e58196915c7f|2017-11-27|Samuel Audet| * Move `sizeof()` and `offsetof()` data to global variables to prevent `StackOverflowError` in `JNI_OnLoad()` (issue bytedeco/javacpp-presets#331)  * Propagate within `Parser` type information from macros to other macros referencing them
251c5be6d000bb8e90c6b65bd9fcbb8104663798|2017-11-20|Samuel Audet| * Add support for `JNI_OnLoad_libname()` naming scheme for iOS via new `platform.library.static=true` property  * Improve the clarity of error messages on `Parser` failures  * Fix `Parser` issues with multiple `typedef` declarations in a single statement  * Require `Info.annotations("@Name")` to pick up alternate names from attributes
ce6acac351ce03f7775e07bb3cf1da17b35e6297|2017-11-15|Samuel Audet| * Add `@Platform(exclude=...)` annotation value to remove header files from inherited `@Platform(include=...`
8f713ea13922e283ae23610f8740c50e2475e693|2017-11-13|Samuel Audet| * Fix a few issues with `Parser`, including missing `PointerPointer` member setters (issue bytedeco/javacpp-presets#478)
8b05de89b91ded6287bbddd40caed6ecdce11cdd|2017-11-08|Samuel Audet| * Fix potential race conditions and various issues with `Loader` that could prevent libraries like MKL from working properly
cb70d2bd3b5312bb05078af11f3613406d356768|2017-11-02|Samuel Audet|Add OpenJDK 7 back to .travis.yml
6aafacfcd608a2e82b27af1ead054009c608b06c|2017-10-19|Samuel Audet| * Add `Loader.addressof()` to access native symbols, usable via optional `ValueGetter/ValueSetter` in `FunctionPointer`
cd961ca93a73568ea858b32a9373f03e49bbd149|2017-10-11|Samuel Audet| * Add `BuildEnabled` interface to allow `InfoMapper` classes to participate in the build
2d4249d5f08976b49e37e86fd37de0976b649bce|2017-09-30|Samuel Audet| * Try to use symbolic links in `Loader.load()` for output filenames specified with the `#` character (useful for libraries like MKL)
2038672bd9a61b658e8d5aaa54d9904fd875f500|2017-09-16|Samuel Audet| * Fix `Parser` incorrectly resolving type definitions with classes of the same name in parent namespaces  * Fix `Generator` compile errors for `const` template types of `@Adapter` classes using the `@Cast` annotation
35463a65f93b52db5522a8dc8ec281289b6ac4be|2017-09-07|Samuel Audet| * Call `Loader.createLibraryLink()` when executing the user specified `Builder.buildCommand` as well  * Introduce new `platform.extensions` property to manage more than one set of binaries per platform
936dd6443b11d19615d793dfec95418f15c66b16|2017-08-24|Trejkaz (pen name)| * Catch `SecurityException` in `Loader.getCacheDir()` (pull #198)
8f92fc333314367f097b3f965cd61bb5790e7610|2017-07-25|Samuel Audet|Update version in the `pom.xml` file to 1.3.4-SNAPSHOT
e5c332f699596f87e05a6898cbe2db4bbd79c1e9|2017-07-25|Samuel Audet|Release version 1.3.3
5ccb36fc5c60f60ac02e2feb6f60b0d63c5dd903|2017-07-11|François Garillot|Remove `<updatePolicy>never</updatePolicy>` from pom.xml file (pull #193)
86e4d57e9ac0bc94f0b836e0c08e3a45f362148f|2017-07-09|Samuel Audet| * Call `malloc_trim(0)` after `System.gc()` on Linux to make sure memory gets released (issue bytedeco/javacpp-presets#423)
c4fa2c1b39c327312056c4198eee6e2fb849f0fc|2017-07-01|Samuel Audet|  * Make public the `Pointer.formatBytes()` and `Pointer.parseBytes()` static methods
f105e88ee53b9d36b78fe51faeb82d41705cb58a|2017-06-24|Samuel Audet| * Use `Integer.decode()` instead of `parseInt()` on integer literals to support hexadecimal and octal numbers
6952a0da106663ccf0030ed1abbb408648734e29|2017-06-21|Samuel Audet| * Add `Builder.encoding` option to let users specify I/O character set name (issue bytedeco/javacpp-presets#195)
1797745bcbc2e32233c93107c5729696d4930187|2017-06-08|Mo Tao| * Prevent race condition that could occur in `Loader.cacheResource()` (pull #188)
d570d7bfbfa12bf9a5ef705d2375d6009e44251c|2017-06-07|Samuel Audet| * Fix potential compile errors with Android caused by superfluous `typedef` from `Generator` (issue #186)
35638476646b0cd5fd1e4b066c1694781cf5a8ab|2017-06-06|Samuel Audet|Add automated SNAPSHOT deployment with Travis CI
8c257c0ae02f9e0e8da229300fe2be2cd630a21d|2017-06-06|Samuel Audet| * Fix `Parser` translation of strings containing the "::" subsequence (issue #184)
997201fb56a4d5005ac227ee43759ed36637fdd9|2017-06-03|Samuel Audet| * Prevent `Parser` from overwriting target classes when nothing was parsed
c6760df4cac68f83d5dbf61092ff273beaac1dfe|2017-05-28|Samuel Audet| * Fix `Parser` error on member variables with initializers plus `Info.skip()` (issue #179)
b5378cff5d0f8722bd92a43d05efa9c59cecab96|2017-05-15|Samuel Audet|Fix bugs in Parser
89e91f1f67491396c287e2dae889143e5076e9a6|2017-05-12|Samuel Audet| * Fix issue with `Loader.getCallerClass()` when a `SecurityManager` cannot be created (issue #176)
217bcc235a22f4e465224cc8b87217e339b9e954|2017-05-12|Samuel Audet| * Make it possible to rename enumerators of C++ `enum class` (issue #180)
d206b2fe71d028ab636f077d01ed0c09aea14aaa|2017-05-08|Samuel Audet|Use `BUILD_PATH_SEPARATOR` instead of `PATH_SEPARATOR`, which conflicts with MSYS2
ee96dc65fbe63b9925e03ff3c5af01ed9770bd00|2017-05-07|Samuel Audet| * Make the arbitrary resources available to process executed with `Builder.buildCommand` via the `BUILD_PATH` environment variable
afa7b7ca40305c9df7b4260ea8378361aca168bb|2017-05-05|Samuel Audet| * Prevent `Parser` from outputting setters for `const` member pointers
de98ee865c2244cb427f12e4748a92580c2fe49f|2017-04-29|Samuel Audet| * Add support for arrays of function pointers
93ccf7f4e5c04f79060f895cb123a040f1724400|2017-04-28|Samuel Audet| * Let users bundle arbitrary resources, have them extracted in cache, and used as `include` or `link` paths (pull #43)
07b98d2f25cec10cca1877f4a5e16acba113b7a4|2017-04-27|Samuel Audet| * Fix potential formatting issues with `OutOfMemoryError` thrown from `Pointer`
87b5f8cd46102562dc4d4e29a5529c6a42c4cb44|2017-04-23|zhanhb| * Fix `Loader.getCallerClass()` (pull #175)
2802bba7ac48dc6caeedcd14d3a6935746d239fa|2017-04-10|Samuel Audet|Comment out broken OpenJDK7 from .travis.yml
e87b5bad73811bd360247b96a51bb5479fed0995|2017-04-10|Samuel Audet|Add .travis.yml to do continuous integration with Travis CI
954ee4ae59f6d4c71ac17e6407624d53a0807c4a|2017-04-05|Samuel Audet| * Fix `Parser` not considering empty `class`, `struct`, or `union` declarations as opaque forward declarations
81ddd54f72a45cf652dc2659344279911ea9d915|2017-04-02|Samuel Audet| * Provide `ByteIndexer` with value getters and setters for primitive types other than `byte` to facilitate unaligned memory accesses
ba01323d651bc40c01a772a9fb365fb22d3a0d1d|2017-03-20|Samuel Audet| * Provide `BytePointer` with value getters and setters for primitive types other than `byte` to facilitate unaligned memory accesses
88b7f9fc8217e5bc535c66036cf3d6cdf0ec191a|2017-03-19|Samuel Audet| * Add a `BuildMojo.buildCommand` parameter that lets users execute arbitrary system commands easily with `ProcessBuilder`
cae82056f01a91e320b25e72707cf1ab21c864db|2017-03-15|Samuel Audet|Update version in the `pom.xml` file to 1.3.3-SNAPSHOT
bafcdf1ae750a8c74084d965e49950fad1747cb8|2017-03-11|Samuel Audet|Release version 1.3.2
d7d6af2b4a2d5e5d3ea48cb27248e2f84a031fd2|2017-03-08|Samuel Audet| * Add new "org.bytedeco.javacpp.cachedir.nosubdir" system property to restore old behavior (issue #167)
cc669d621291ae50539fb280f8a3a4d00a9a2386|2017-03-08|Samuel Audet| * Prevent `Pointer` from copying array data from NIO buffers that are also direct (issue bytedeco/javacpp-presets#380)
6589a59fa40e744c3eae44fc563e8fa24bb70adc|2017-02-19|Samuel Audet| * Fix `SharedPtrAdapter` and `UniquePtrAdapter` of the `Generator` for `const` types (issue #166)
e528b3608d3f74f2a9d63a51f3395df7afa07b34|2017-02-15|Samuel Audet| * Prevent `Loader` from loading system libraries, which causes problems on Android 7.x (issue bytedeco/javacv#617)
9fdea90d8e61df222c906b9d74c5f6df41d5486b|2017-02-12|Samuel Audet| * Make `Parser` strip return type annotations when naming `FunctionPointer` (issue #162)
d6cbe79b4a987f2700b3ac07676b5b4cfff6a68e|2017-02-06|Samuel Audet| * Let `Pointer` log debug messages when forced to call `System.gc()`
ac38535cfbe1f83e88434a2f47a83c323d7d7bfb|2017-01-28|Samuel Audet| * Fix `Parser` handling of `std::map` and of documentation comments containing the "*/" sequence
7d4810bb25bb0da43df50296c29c9cf251098ae6|2017-01-28|Samuel Audet|Fix `totalProcessors()`, `totalCores()`, `totalChips()` methods on Android
6946c4c1b94ece4e0e1faaacb549c65fc243625a|2017-01-26|Samuel Audet| * Add portable and efficient `totalChips()` methods
6851a060880d6fa0817e2d86a7938a92eb773f3d|2017-01-22|Samuel Audet| * Add portable and efficient `totalPhysicalBytes()`, `availablePhysicalBytes()`, `totalProcessors()`, and `totalCores()` methods
3c437d80e8bd72290dd207389e9ac8bcf5cc6b38|2017-01-18|Samuel Audet| * Avoid `Loader` issues with spaces, etc in paths to library files (issue deeplearning4j/nd4j#1564)
fe0a74cf6ec9d5f8b20d18b8d808fcfdf2cf0feb|2017-01-07|Felix Andrews| * Prevent `Generator` from creating duplicate `using` statements (pull #158)
20a335c4d551767e6368dfe96e710ffdd56fdb8e|2017-01-03|Samuel Audet|Update version in the `pom.xml` file to 1.3.2-SNAPSHOT
b41028b99e3f25d263e063680c0b7fd9514d5d29|2016-12-24|Samuel Audet|Release version 1.3.1
de43b8253e2482f5211246f193b05d76d1df0235|2016-12-19|Samuel Audet| * Fix broken `outputDirectory` property and corresponding `-d` command line option (issue #153)  * Add `Loader.extractResources()` and `cacheResources()` methods to extract or cache all resources with given name
909e878ed1a45e14c652f2d08bc747ad350f5a1b|2016-12-18|Samuel Audet|Update version in the `pom.xml` file to 1.3.1-SNAPSHOT
89acc4fbfc59865a4eaea2e106409c4de1b5f444|2016-12-07|Samuel Audet|Release version 1.3
a30fa53b29ba29a60a81e3cd260999681b8ff1e5|2016-12-04|Samuel Audet|Update version in the `pom.xml` file to 1.3-SNAPSHOT
7c0b4409deebfe61cc67b31bbe5afeff8d1cee1d|2016-11-30|vb216|Update Maven plugins for OpenJDK 9 (pull #149)
e3d56b297ddcf600b555a4f4b5806e9f263475ed|2016-11-29|Samuel Audet|Release version 1.2.7
389b2fbd89465d511390a506ed301ad5d0322231|2016-11-28|Samuel Audet|Release version 1.2.6
9cc0adc0f5cd4fb8596715a66c2ddfee811e0147|2016-11-28|Samuel Audet| * Improve `Loader` handling of duplicate libraries found in different JAR files using symbolic links (useful for MKL, etc)
fad8558253f938d1f6665e3f12d40585727ea19e|2016-11-27|Samuel Audet| * Prevent `Loader` from overwriting previously extracted and renamed libraries (issue deeplearning4j/nd4j#1460)
5d1bd6a4ad2c364cfcd550f7a044d1a5341bcb50|2016-11-23|vb216|Update maven-assembly-plugin (pull #145)
3abc7bf0c45612d9ca926b9a2ed15f65a4b23e77|2016-11-22|Samuel Audet| * Allow users to define `NO_JNI_DETACH_THREAD` to prevent callbacks from reinitializing threads (issue #143)
3c1fc9b3ad13eeedf30ab557fc4e533271f0623b|2016-11-13|Samuel Audet|Release version 1.2.5
2277cbc008ca55393c9ed2ac9eea792810fc9ff9|2016-10-30|Samuel Audet| * Add support for `decltype()` declarations (issue #135)
0c8f834466eed138f9ad8efe8f3a58a5bcc605f6|2016-10-22|Samuel Audet| * Fix `Generator` when a `FunctionPointer` contains methods that start with "get" or "put" (issue #137)
32a1f42f36e094a9295fa2c739fb23aa1a439a1c|2016-10-20|Samuel Audet| * Enhance `Parser` to let users skip the default values of arguments, as well as classes when one base class is skipped
042af0492a73fe39c21464e20fd7ff3000c4a1d8|2016-10-19|Samuel Audet| * Fix `Parser` not properly mapping the type of `long` anonymous enums
4bed6f319ed4b529f593e41e8ccbf6519fd24bcb|2016-10-15|Samuel Audet| * Take into account `const` on function parameters when looking up in `InfoMap`, and fix some incorrectly translated macros into variables  * Add to `InfoMap.defaults` more names that are reserved in Java, but not in C++  * Add via `@ByPtrRef` support for function pointers passed by reference, as well as support for `Info.javaText` with `typedef`
bf899dce52dd679b11ddebb576ce596bebbfaf63|2016-10-10|Samuel Audet| * Make sure `Parser` exhausts all combinations of method parameter types even with duplicates (issue bytedeco/javacv#518)
076fd04173bf305eed39d8a64da79acbd5105ef2|2016-10-10|Samuel Audet| * Make `Loader` cache libraries (in `~/.javacpp/cache/` by default) instead of using temporary files
c26e91aaada72dbd7b295206ad09b316a9f50fc6|2016-10-10|Samuel Audet| * Have `Parser` annotate the `allocate()` functions and not the actual constructors (issue bytedeco/javacpp-presets#297)
b349b4249de72a0d1994c37e619ff3483259b980|2016-10-09|Samuel Audet| * Fix `Parser` handling of `class`, `struct`, or `union` types with variables declared in the same statement
b7b1e5ddc52d8970ec1d55f1b69584ef7a3819f1|2016-10-09|Samuel Audet| * Add missing `platform.link` to `psapi` required by some versions of Visual Studio (issue bytedeco/javacpp-presets#298)
cba7a5918bac72a21d3da2beaf235019105da00d|2016-10-08|Samuel Audet| * Make sure default values placed in `nullValue` by the `Parser` have the right type (issue bytedeco/javacv#518)
8344c5990745d052feba76e16f65399e829a87ab|2016-10-08|Samuel Audet| * Accelerate call to `Pointer.physicalBytes()` on Linux (issue #133)
ed7fc0b20a0110c0479dae8cada6dbe7710a5e1e|2016-10-08|Samuel Audet| * Fix `Parser` incorrectly skipping over some template function declarations
f5ffac5996070c15dbe48638d96f8373f7e65079|2016-09-30|Samuel Audet| * Allow C++ types to be prefixed by `class`, `struct`, or `union` to work around name clashes (pull bytedeco/javacpp-presets#266)
22b68b88c3d3d4b87e9ed85904936f902f96354a|2016-09-22|Samuel Audet| * Properly expand the special predefined `__COUNTER__` macro (pull bytedeco/javacpp-presets#266)
30c7fcd9af190652ff56a07ad41a2538acd3c3f1|2016-09-22|Samuel Audet| * Create all missing directories in the paths to the source files created by `Generator`
02f99b0081dcecdec5f23333cde2cdbb507424f0|2016-09-16|Samuel Audet|Release version 1.2.4
a4c32cca05c66611667febeee8cac96336bcc18a|2016-09-16|Samuel Audet|Merge pull request #129 from lloydmeta/patch-1
163a92f22c532130d77e6c1a859f841bca10117e|2016-09-16|Lloyd|Add Maven Central version badge
1a28e44dea706988a1f5e09978f2ffe19b3b8c94|2016-09-14|Samuel Audet| * Insure `Parser` properly ignores the `auto`, `mutable`, `register`, `thread_local`, and `volatile` C++ keywords for storage classes  * Fix `Generator` and `Parser` for types like `std::unordered_map<std::string,std::pair<int,int> >` (issue bytedeco/javacpp-presets#266)
e6a243a280adc734cb330d9ba9ccf697777e1d5c|2016-09-13|Samuel Audet| * Add `std::forward_list`, `std::priority_queue`, `std::unordered_map`, and `std::unordered_set` to the list of "basic/containers" in `InfoMap` (issue bytedeco/javacpp-presets#266)
9e21bb74fff5e2232f29ff7966bff1f045e957c4|2016-09-13|Samuel Audet|Add test for `Pointer.physicalBytes()`
70a31364b5cf00a561f71030daf6da1bc42354cd|2016-08-31|Samuel Audet|Merge pull request #123 from vb216/master
f93e8a7851b5810cedb3d06166c37c6660555135|2016-08-31|Samuel Audet|Throw more information when `OutOfMemoryError` occurs on `allocateArray()` for `Pointer` of primitive types
7de1d1666fcf540885852aadd7ef96ad21fb95d4|2016-08-30|Samuel Audet| * Fix `Parser` not accepting namespace aliases with `::` tokens in them (issue bytedeco/javacpp-presets#265)
d666a119cf858e0df663e486c08973d19bcb670b|2016-08-30|Samuel Audet|Make `Pointer.physicalBytes()` optional to preserve backward compatibility with old binaries
851583a17e176733ec4b822f3b387184c9f15ccb|2016-08-28|Samuel Audet| * Add "org.bytedeco.javacpp.maxphysicalbytes" system property to force calls to `System.gc()` based on `Pointer.physicalBytes()`  * Allow strings ending with "t", "g", "m", etc to specify the number of bytes in system properties (issue #125)
55f675b38efad0610d71bc2f450656eda2ddc96b|2016-08-26|Samuel Audet| * Add `Info.linePatterns` to limit the lines from header files that the `Parser` has to process
4bf43d3015630acc3aab9262abdea9e1b35a907d|2016-08-26|Samuel Audet| * Introduce "platform.compiler.hardfpu" option inside `android-arm.properties` to target `armeabi-v7a-hard`
8dcac0905aa3a885791fa492556ac0d0ce517c71|2016-08-21|Samuel Audet| * Add `UniquePtrAdapter` and corresponding `@UniquePtr` annotation to support `unique_ptr` containers (issue bytedeco/javacpp-presets#266)
a394220ee844dc26585d7f75390173127de0b21f|2016-08-20|Samuel Audet|Simplify synchronization of memory allocation to avoid `OutOfMemoryError` when low on memory
642b6d9823a290488e8c4dd8f579cf3e414ab3b3|2016-08-14|vb216|Add handling for OpenJDK to armhf build
3f7160e7211579a3fe9b0e7ce360744cdfb20757|2016-08-12|Samuel Audet|Fix `Parser` incorrectly escaping quotes for multiline `nullValue` of `@ByRef` or `@ByVal`
ff8b9e3f2c3580b731b4db795a84aa6b5520f67c|2016-08-12|Samuel Audet|Merge pull request #122 from mirosval/master
f0c198c7a36ad15866f1e909ac172797055ed6f4|2016-08-11|Miroslav Zoricak|Fix #264 unexpected token ::
ad0ae659b648dbeeb1d08f6df42fc449418a5144|2016-08-10|Samuel Audet| * Synchronize memory allocation in `Pointer` when low on memory to avoid `OutOfMemoryError`
6ee928f3b6f8edb05299f5d0489ccfddc4f946b1|2016-08-06|Samuel Audet| * Make it clear that `Indexable.createIndexer()` can throw a `NullPointerException` (issue bytedeco/javacv#437)
0b9f92ff3fc209d7ea2998f72ff0409f1a836669|2016-08-05|Samuel Audet|Merge pull request #119 from ashleyj/master
f00d31371613b04b1d116cc37b5cdf65924f2bb9|2016-08-05|Ashley|escape empty strings for nullValue
4c8bcd3b0f0cccf808f95b827999747fa0f81fed|2016-08-05|Samuel Audet| * Let `Parser` accept identifiers in addition to integer literals for bit fields (issue #118)
e709aee829609f2b6a8ae22c5cf85088ee28a8fa|2016-08-05|Samuel Audet| * Fix `Loader.load()` not renaming a library when previously loaded under a different name
6a673a20442b14ae0ea6d688e455c560a5f01d47|2016-08-01|Samuel Audet|Release version 1.2.3
1380e19f51dd12b7083356e3601f6b5fc763da35|2016-07-29|Samuel Audet| * Add support for data member pointers as pseudo-`FunctionPointer` (issue #114)
21c3c66355374f925f1afdc5e39c96af1518ab3b|2016-07-26|Samuel Audet|Update version in the `pom.xml` file to 1.2.3-SNAPSHOT
b56a4de021319e273c4dcb7df63ec867af7ccea0|2016-07-24|Samuel Audet| * Change the packaging type to `jar` since `maven-plugin` causes issues with sbt and Ivy (issue #113)
d49be20b628fd00350271e429455be0df1604140|2016-07-23|Samuel Audet| * Include new `platform.compiler.debug` options inside the default properties file (pull #90)  * Always use the `platform.compiler.default` options unless `@Platform(compiler="!default", ...)` is specified  * Move optimization options from `platform.compiler.output` to `platform.compiler.default`, allowing users to override
1d3b5de68d6e8bdcba810a50f1fc308400840388|2016-07-21|Samuel Audet| * Create all missing directories in the path to the target file of `Parser`
307ca4ef668ba2cd9611875b3a818cb502f2ee17|2016-07-15|Samuel Audet| * Parse properly custom `enum` types, found after the ':' token in C++11
badbc45e9ccdb32df7b9222721ddea1b64bf0ba6|2016-07-14|Samuel Audet| * Output compiled libraries to user specified class path by default for input classes inside JAR files, etc
0098168a51fe3935ae5450f9d90b570f96507a85|2016-07-12|Samuel Audet| * Add `HalfIndexer` to access `short` arrays as half-precision floating point numbers
8ce96d9d4d2b5d50eac5b5e4f3151429df6c5de1|2016-07-08|Samuel Audet|Release version 1.2.2
8a7b271b6c8b50af216c22eca5350d951a26cca5|2016-07-01|Samuel Audet|Fix potentially failing tests
104656712d0f51804912378dd5f92d5fc6e1f618|2016-07-01|Samuel Audet| * Prevent creating unnecessary garbage when using `Indexer` on simple arrays with a stride of 1 (issue deeplearning4j/nd4j#1063)
f56082d24163fbfea233b07904e266211d93a2e5|2016-06-30|Samuel Audet| * Add "org.bytedeco.javacpp.maxretries" system property, the number times to call `System.gc()` before giving up (defaults to 10)
c90d37ed905936aace411fdde7136c05b0f735bb|2016-06-29|Samuel Audet| * Deallocate native memory in a dedicated thread to reduce lock contention (issue #103)
d18f629539c60f7298a9e1b2e8fc7bf22f2a8d39|2016-06-25|Samuel Audet| * Fix Javadoc links for externally referenced classes
9019534988669383159a1d82ecfc9cf38976afba|2016-06-23|Samuel Audet| * Prevent Android system libraries from getting copied or extracted
75f4fb3fd09402c92788015114952ccb11f69937|2016-06-21|Samuel Audet| * Insert in `Indexer` an `indexable` field optionally set by the user for convenience
cda036fae61fc3b32485713f88b5f8748ad52e5a|2016-06-13|Samuel Audet| * Fix potential `ParserException` on comments found after annotations before function declarations
c731d1df8fda204a58a755bebc35b0d204aec587|2016-06-10|Samuel Audet| * Fix `IndexerTest` potentially failing with `OutOfMemoryError` (issue bytedeco/javacpp-presets#234)  * Preload libraries to work around some cases when they refuse to load once renamed (issue deeplearning4j/libnd4j#235)  * Fix compilation error on some `linux-ppc64le` platforms (issue deeplearning4j/libnd4j#232)
396d19f49c5e6d4b6b3adfc0489b4b7545d0d1ff|2016-05-31|Samuel Audet| * Make sure `JavaCPP_getStringBytes()` is defined to handle exception messages when using callbacks
5149f6b3d17043e15ad115a9a0453d4074252bb6|2016-05-26|Samuel Audet|Release version 1.2.1
a0bf27ce3cd41c35b3513e0e967f5facb4cda646|2016-05-26|Samuel Audet|* Fix `Loader` crashing on Android (issue bytedeco/javacv#412)
dbd1826f11af33da8c65f6e6c8b58219e7458c7a|2016-05-24|Samuel Audet| * Fix `NullPointerException` on "generic" platforms
587f9e836d547f4d7ea72306a7846fd7cfd888bc|2016-05-23|Samuel Audet| * Throw `OutOfMemoryError` on `allocateArray()` for `Pointer` of primitive types with `size > 0 && address == 0`
91762facdb75e7087a8ca65282f5452098e3ed07|2016-05-21|Samuel Audet| * Add the ability the specify, after a `#` character, the output filename of libraries extracted by `Loader.load()`
dd7ccdf4fd88ec3ce67cfc0510fda23a79359284|2016-05-21|Samuel Audet| * Consider `FunctionPointer` annotated with empty `@Namespace` as non-member function pointers (issue #99)
7f7ef702137984c5a9430f637256c3e01f7ab934|2016-05-16|Samuel Audet|Add additional information for Gradle and sbt users
1d971f043afa175175adf90197316df64bb9c69b|2016-05-15|Samuel Audet|Release version 1.2
dcf71343a516b0c3c03790701d09d91484215c12|2016-05-13|Samuel Audet| * Fix `NullPointerException` in `Builder` on inaccessible directories
ad24046000ecf455e94a14865ecca2c56e29fa17|2016-05-11|Samuel Audet|Prevent pointers from getting prematurely garbage collected in test
01248c576a6468313ef2e7d11812def7c0456ec8|2016-05-08|Samuel Audet| * Fix `NullPointerException` in `Builder` on invalid `java.home` system property
f55847f442f304fa60af70023604c6eff4262392|2016-05-06|Samuel Audet|Wait a bit longer for `System.gc()` to reclaim memory
e987b69e3a818de5cdd81281443eaa837bfd7243|2016-05-06|Samuel Audet| * Add parameters to `Loader.load()` offering more flexibility over the platform properties and library paths
ed4efbc7edbf208ef4d847e1dacf9265c9ddf19e|2016-04-25|Samuel Audet|Add `Pointer.maxBytes()` and `totalBytes()` to monitor amount of memory tracked
b8d6b9719b0b778482e9723d88c5abe9356d7802|2016-04-17|Samuel Audet| * Treat all `String` with `Charset.defaultCharset()` (or define `MODIFIED_UTF8_STRING` for old behavior) (issue #70)
331b93f4bf8e98de72c426c2da29185a48d69c83|2016-04-17|Samuel Audet| * Fix `NullPointerException` in `Parser` on variadic templates (issue #81)
14f5b9abd0ec1d948806e8fa95e1040aa48b6375|2016-04-14|Samuel Audet| * Fix `Loader.load()` error when called right after `Builder.build()` within the same process
55edd4c924dcda57c62dca9ff53cff926d79fd9f|2016-04-12|Samuel Audet| * Add properties for the `linux-ppc64` and `linux-ppc64le` platforms
3aeec265cadbeaf65556f86782eaf0ee17c1c6fc|2016-04-09|Samuel Audet| * Lower Maven prerequisite in the `pom.xml` file to 3.0 (issue #93)
7f95c9dced124cd241b21ff8290e6f1e1afc562a|2016-04-09|Samuel Audet| * Use `Info.cppTypes` for all `Parser` type substitutions, in addition to macros and templates (issue bytedeco/javacpp-presets#192)
e4da76e8f61cc5ed4589f7e38734093e6fa426a0|2016-04-08|Samuel Audet| * Make `Parser` take into account Java keywords not reserved in C++, casting issues with `int64_t`, and `const` value types in basic containers
29208f7369e95219830b60fb37e90bb1e5bd9448|2016-04-07|Samuel Audet|Fix potential compilation error with VectorAdapter
24abf3a5d2e54d815ef35b85ffd786023784d073|2016-04-05|Samuel Audet| * Let users define `NATIVE_ALLOCATOR` and `NATIVE_DEALLOCATOR` macros to overload global `new` and `delete` operators
82c922ce089c7c2438cba796c28bb32219447ead|2016-04-04|Samuel Audet| * Map `jint` to `int` and `jlong` to `long long` on Windows as well as all platforms with GCC (or Clang)
96b7922185fb7e0fa5ac39497e2eb978f256e592|2016-04-02|Samuel Audet| * Fix corner cases when checking for the platform in `Generator` and `Parser`
e415db9745729d7c52d5abd4772724565fbab462|2016-04-02|Samuel Audet| * Link libraries with "-z noexecstack" on Linux as recommended by HotSpot (pull #90)
8182d7db98f0bc7f5ecf813bf25098fb723501e7|2016-04-02|Samuel Audet| * Set the internal DT_SONAME field in libraries created for Android (issue bytedeco/javacpp-presets#188)
0bdcabc758a16f15528fd2e0aade7f54f63cadd7|2016-03-26|Samuel Audet| * Add "org.bytedeco.javacpp.maxbytes" system property, forcing a call to `System.gc()` when this amount of memory tracked with deallocators is reached
07322ee361a1343b86333779ab97bd60b4715a63|2016-03-26|Samuel Audet| * Let `Parser` pick up `Info.annotations` in the case of function pointers as well  * Add `@Convention(extern=...)` value to have `Generator` produce `FunctionPointer` with other language linkage than "C"
f945c9a48e017d0df926f04b0e30547c9af634b1|2016-03-22|Samuel Audet| * Enhance the `indexer` package with `long` indexing, initially via the `sun.misc.Unsafe`, for now
32793c76711c928c0b24f535ba66b8953bc14af1|2016-03-15|Samuel Audet| * Lengthen the `position`, `limit`, and `capacity` fields of `Pointer` using `long`
4c1ea9e985737da19ad3ccd6215db1e58b7db24a|2016-03-08|Adam Gibson|indexers should be ints since they relied on java constructs
6d96d32a48196d66f7ed2255ef8121b2a2303700|2016-03-08|Adam Gibson|long pointers
73d22261b0558dbb4f8f8013656b7c2fe69b31d7|2016-03-19|Samuel Audet|Merge pull request #91 from vb216/master
1aadbcc7a2ecef6cd8b384dd780b224e0f45a84b|2016-03-19|vb216|arm6 flags and fastfpu for arm7
0a4080f13f889f659ce9c5269b8776d942b28d64|2016-03-19|Samuel Audet|Remove a potential NullPointerException in Parser (pull #74)
3aa51afeb9d527a5edb345f427cb0baffc738ecc|2016-03-15|Samuel Audet| * Prevent creating text relocations for shared libraries on Android, which are rejected by recent versions of the SDK
4f99a941df49c2a756c838389ab21ecdb8306dbe|2016-03-15|Samuel Audet|Merge pull request #86 from osialr/staging/pointer-close-throws-runtime
5944112bb41dbeba870a2bcfe190a7ca369c2cda|2016-03-13|Samuel Audet|Merge pull request #85 from osialr/staging/allow-archiving-cpp-jni
27be9c977a78d746890e5d5e0df1ed54502856cc|2016-03-13|Samuel Audet|Merge pull request #87 from osialr/staging/multi-dimension-array-comment
079d3d6dd4cd61f555d3b69501bcb0a16e3b71d6|2016-03-13|Samuel Audet|Merge pull request #84 from osialr/staging/mark-c-funcs-as-noexception
b6cf70463402133a4c62b9bc0b8ba224e0b05d0f|2016-03-12|Ryan Osial|Add flag to keep the generated cpp files
7c53985d8e9d5311b478e903e80c7ff7c5fde277|2016-03-12|Ryan Osial|Make array comments show up in cpp and java files
9086541d99bf80911f7d2588b9635d55c5aa3b16|2016-03-12|Ryan Osial|Mark functions from c includes with noexception
0c2b518cb4bc81d77f33381473a1650c8da8dcbe|2016-03-12|Samuel Audet|Merge pull request #89 from osialr/staging/compiler-working-directory
1d407797951ccaa09eb994e5401ebe123943cb5c|2016-03-12|Samuel Audet|Merge pull request #83 from osialr/staging/jni-abort-on-const-arrays
49b4f90556a344c1ab3b0cc35f1ac31c72039054|2016-03-11|Ryan Osial|Use binary output folder as the compiler's working directory
02c82f51e030c606f3594c86f177d1117aab2638|2016-03-11|Ryan Osial|Comment with first dimension of multidimensional array inside @Cast
6105a24497bd699583bc9f653c88db6db8fa656e|2016-02-29|Ryan Osial|Call JNI_ABORT on release of constant arrays
f201855c53e1f6cd89e3c77d94ace5665d5489f6|2016-03-11|Ryan Osial|Remove 'throws Exception' from Pointer::close
4604195614ca1e9f68a29a7ed41db4dd789c006e|2016-03-07|Samuel Audet|Clarify `IllegalArgumentException` when it occurs on `new File(URI)` in `Builder`
5da88881c43c3ab413f040481913612bf0e49b13|2016-02-28|Samuel Audet| * Add support for C++11 `default` and `delete` on function declarations (issue #80)
bdca59df06947f26e91e7e39aec6523c28547047|2016-02-27|Samuel Audet| * Add support for `enum` without enumerator list (issue #78)
bbd9eedd7759baf328392542b4f7d2742e6b9f09|2016-02-27|Samuel Audet| * Add support for C++11 typed `enum` (issue #78)
84babfb88f76ac32b8e07b06bda05a475da36e49|2016-02-27|Samuel Audet| * Add missing space for `const` types when normalizing template arguments in `Parser` (issue bytedeco/javacpp-presets#165)
4083b8a1488c394665db713cf8683e2576c769dc|2016-02-27|Samuel Audet| * Make `Builder` fail on `ClassNotFoundException` or `NoClassDefFoundError` instead of logging warnings
485081f3e3ba67c447ef8dad3d0b313664cb0618|2016-02-27|Samuel Audet| * Allow `Builder` to generate native libraries with empty `@Platform` annotation even without user defined `native` methods
802fc482e862aa904a5a352f9dc445153d679124|2016-02-25|Samuel Audet| * Enhance `Parser` to support a bit better `&&` tokens and C++11 rvalue references (issue bytedeco/javacpp-presets#160)
82566a7d88a08a36167d4dd42b4e7f5b4824a57a|2016-02-23|Samuel Audet| * Pick up `macosx` when `os.name` is `darwin`
5e6958ff63e19342609dddeacb9f287232dd4ccd|2016-02-23|Samuel Audet|Merge pull request #77 from vb216/master
b5dab9f4c72b3679baca4cc4ea3b1aa1a57c20a1|2016-02-21|vb216|add definition of linux-armhf arch based on sun.arch.abi property
4b738fa5c21984e5828f75c270ae17dab9c81b69|2016-02-18|Samuel Audet|Merge pull request #67 from georgekankava/staging/nested-blocks-of-code-should-not-be-left-empty-fix-1
7858f2ef7025b1947b30b5b59ab4554c5b594324|2016-02-03|George Kankava|squid:S00108 - Nested blocks of code should not be left empty
3380ee99b48a9e829339173307a35ac4363f1f44|2016-02-17|Samuel Audet|Merge pull request #75 from georgekankava/staging/resources-should-be-closed-fix-1
57690d90130d2a38eac25b4d2291cd3df6bba416|2016-02-17|Samuel Audet|Merge pull request #73 from georgekankava/staging/dead-stores-should-be-removed-fix-1
c216413551928fe80cc516904ac226bc558f7a1c|2016-02-16|George Kankava|squid:S2095 - Resources should be closed
9d85fa2b6005b8cb09b17f9c412e9da41ffc10b5|2016-02-16|George Kankava|squid:S1854 - Dead stores should be removed
eabafa4fcab5b06fbd60d85f5c66f7befee45239|2016-02-15|Samuel Audet| * Fix `NullPointerException` in `Parser` on unexpected forms of function pointers (issue #70)
6e982f7faf50f8b18b2ccbe2affd84f0dbd77ea3|2016-02-15|Samuel Audet|Merge pull request #68 from georgekankava/staging/local-variable-and-method-parameter-names-should-comply-with-a-naming-convention-fix-2
66057e6a211346f28d28105422a3f2626dfd90bc|2016-02-13|Samuel Audet| * Make sure `Generator` produces calls to `sizeof()` and `offsetof()` for all `Pointer` classes with allocators
263a9aa0fdc4e3816a2c6aaa9df746c5a8664f25|2016-02-12|Samuel Audet|Merge pull request #66 from georgekankava/staging/sections-of-code-should-not-be-commented-out-fix-1
bfa2dd7af52db589785c4bc76a0ac615da1e7806|2016-01-29|George Kankava|squid:CommentedOutCodeLine - Sections of code should not be "commented out"
e165acbaed97b18a512d1f5f02623ce5d801340a|2016-02-11|Samuel Audet| * Let `Parser` use adapters in the case `FunctionPointer` as well (issue bytedeco/javacpp-presets#145)
1604a0f4880f698572a241de49262556a9377138|2016-02-07|Samuel Audet| * Prepend "javacpp." to all properties associated with Maven in `BuildMojo` to avoid name clashes
a14e299b0154fa760c2aaf9ec22fd9c45af9978a|2016-02-02|George Kankava|Multiple code improvements 1
9113a2ec0cded8fd0e5c6b956254ad55d80c6610|2016-02-02|Samuel Audet| * Let users define the `GENERIC_EXCEPTION_CLASS` macro (default of `std::exception`) to indicate the base exception thrown by native methods
23a0ea53224afaf86fa056f2d9590da450c4eca3|2016-02-02|Samuel Audet|Merge pull request #69 from JLLeitschuh/patch-1
d1a6581f5155717be86bf354e9e4881cce755118|2016-02-02|Jonathan Leitschuh|Adds the .idea file to gitignore
35734b5df3c7ed8b48a7f09fb15b58643c967e1f|2016-01-31|Samuel Audet| * Split type names at `::` delimiters before mapping them against templates in `Parser`
f7161d04f77798cf9996f2ba64cf1ba8a9f62e9c|2016-01-30|Samuel Audet| * Fix swallowed `InterruptedException` (issue bytedeco/javacv#315)
186efe62dcce19ba123e378aa42d7832d63cc75b|2016-01-29|George Kankava|squid:S00117 - Local variable and method parameter names should comply with a naming convention squid:S1197 - Array designators "[]" should be on the type, not the variable squid:S00115 - Constant names should comply with a naming convention
2f16e6bbf21b51c4564cfc35b53624f7109c0dcf|2016-01-27|Samuel Audet| * Adjust a few things in `Generator` preventing `@Virtual` from working properly in some cases (issue bytedeco/javacpp-presets#143)
fda60443eb4bd9d146c37e7cef2c4ba56d6a2b11|2016-01-24|Samuel Audet| * Fix `TokenIndexer` inserting an invalid token while expanding macros ending with a backslash (issue #63)
c16206e3dd3df6bd4a04c46be84000edebe1e0ff|2016-01-16|Samuel Audet| * Make `Parser` take `Info.skip` into account for `enum` declarations as well
7f3202dac72136c4ed830944c87c1ef3d77f373d|2016-01-14|Samuel Audet|Merge pull request #62 from 243826/master
6eb70522278a0a86187f60041026ffd0b9492a90|2016-01-11|Chetan Narsude|#61 dedup all the classes for which the code needs to be generated
193fab81868560ac674a938b294afe3e8eaedb89|2016-01-09|Samuel Audet|Fix up functionality for `Info.flatten`
d781e467f23de62f52771d5a6a0edfdbc349f40f|2016-01-05|Samuel Audet|Merge pull request #58 from NagyGa1/master
4a51c8ef47e851711eeb79024b80628e0519fe68|2016-01-04|Gabor Nagy|Class-Path manifest entry changed to . from ./, to make sure it is ignored by Wildfly.
e4208cc3b52a36a9b09a8f822a5c10226d9f4a7d|2015-12-28|Samuel Audet| * Improve the performance of `BytePointer.getString()` by using `strlen()`
c290c326f9d16b127e60f8ec3f14fac8d3e5d1fc|2015-12-26|Samuel Audet| * Prevent `Generator` from initializing classes when preloading them, which can cause problems (issue bytedeco/javacpp-presets#126)
cbee6ca6a7b6756b7fdfd3e86c55868c86a39534|2015-12-26|Samuel Audet| * Add `Info.flatten` to duplicate class declarations into their subclasses, useful when a subclass pointer cannot be used for the base class as well
ffab0a367c6e57455f8be3117cd7a75167d50000|2015-12-20|Samuel Audet| * Prevent `Loader` from extracting libraries more than once, which can cause problems (issue bytedeco/javacpp-presets#126)  * Make `Indexer implements AutoCloseable` to let us try-with-resources
4bfc68ba0a31384ec103233cdf3bd56673c8af05|2015-12-12|Samuel Audet| * Add missing calls to `close()` for `InputStream` and `OutputStream` in `Loader` (issue #53)  * Remove `Piper` class no longer needed with Java SE 7
a5c38602dd7a6affd8a6d8f9b0aec044eb726777|2015-12-07|Samuel Audet|Update documentation for the @Adapter annotation with SharedPtrAdapter
1f57946c425c89d0afc81b15d12c5ae35016562c|2015-12-06|Samuel Audet| * Fix the `Parser` producing invalid comments for macros
42e2b1f5205915976687e624c464b8d030b8a2de|2015-12-06|Samuel Audet| * Let `Parser` place appropriate `Info.javaText()` provided by users in the case of destructors as well
947f8db641e731f1365c1968efba0790c95301bc|2015-12-04|Samuel Audet| * Fix the `Parser` skipping over some declarations by mistake  * To let users specify `...` varargs as `Info.pointerTypes()`, have the `Parser` replace them with array `[]` when not found on the last parameter
3cee39fe898ed1fc3e039ab80d43a1858132fcae|2015-11-30|Samuel Audet| * Enhance basic support for containers of the style `std::vector<std::pair< ... > >` with user-friendly array-based setter methods  * Fix `Generator` not passing function objects even when annotating `FunctionPointer` parameters with `@ByVal` or `@ByRef`  * Map `bool*` to `boolean[]` tentatively in `Parser` since `sizeof(bool) == sizeof(jboolean)` on most platforms
45daaa690059ca65a12fdbc965beb8f0aebb6dbc|2015-11-22|Samuel Audet| * Allow `Parser` to generate `@Cast()` annotations and overloaded `put()` methods in basic containers too  * Move list of basic containers and types to `Info.cppTypes` of the "basic/containers" and "basic/types" `InfoMap` entries, letting users change them at build time  * Fix some `Parser` issues with `typedef` and forward declarations inside `class` definitions
bc444bccd0801730ab226fcf94207779169edfc9|2015-11-19|Samuel Audet| * Insure `Parser` maps 64-bit values in C++ `enum` to `long` variables (issue #48)
03f91d7e79eb537a4a53958803ef478efd0caa78|2015-11-16|Samuel Audet| * Fix `Generator` trying to cast improperly objects on return from  `@Virtual` functions  * Make `Parser` take `constexpr` into account
2eeb49f6613ff02d20f741e4051773bfd5bcfe85|2015-11-15|Samuel Audet| * Make `Parser` take namespace aliases into account, and fix a couple of preprocessing issues with `TokenIndexer`
1268a92291ff51c6a4179b87b43fe1c0a4534828|2015-11-12|Samuel Audet| * Make `Parser` ignore namespace aliases
1e3a64b6a8eb91d8b9f9cd7b27216137851f1c5c|2015-11-10|Samuel Audet| * Fix primitive arrays and NIO buffers not getting updated on return when used as arguments with adapters (issue bytedeco/javacpp-presets#109)  * Remove confusing and now unnecessary empty constructors
85d86231c0504faa4247e096384510aaaeb7d78c|2015-11-07|Samuel Audet|Update version in the `pom.xml` file to 1.2-SNAPSHOT
a2a724c79355c2647d19825aac88c92835db48e5|2015-11-05|Samuel Audet|Add `repositories { mavenCentral() }` to Gradle instructions for completeness
36115fa4a65ab9a9378aa0fe0d868a093b12134f|2015-10-25|Samuel Audet|Release version 1.1
358ae48f19102856bf33bfe61c07e0b4654c8590|2015-10-24|Samuel Audet|Remove unnecessary use of `LinkedList` and switch to `ArrayList` for overall efficiency
9c1b8ebd4aa4cb1fcc39094eb3bdc99a522e21f9|2015-10-18|Samuel Audet| * Make `Generator` use actual C++ operators for commonly overloaded ones instead of calling `operator??()` functions, for better portability
ed752d299900fc92ebd639a1b5b7139f6902b8db|2015-10-17|Samuel Audet| * Fix potential race condition when deallocating `Pointer` objects from multiple threads
21e3e4e4f8e38589f77eabe56d2baec5831009eb|2015-10-11|Samuel Audet| * Add logging to `Loader.loadLibrary()` to help diagnose loading problems (issue #41)
c0b20be489f57b51971d96008d6bdb946c1b1855|2015-10-10|Samuel Audet| * Provide new `@Platform(pragma=...)` value to have `Generator` output `#pragma` directives
d09a7bac0d359e3daeea0e104b5e1f519b945128|2015-10-04|Samuel Audet| * Upgrade all Maven dependencies and plugins to latest versions, thus bumping minimum requirements to Maven 3.0
fd663f16aed6d7702572850da61a692c64d94cd7|2015-09-27|Samuel Audet| * Add new "org.bytedeco.javacpp.cachedir" system property to specify where to extract and leave native libraries to share across multiple JVM instances
5070834a7ebec8453c3d50384652ac33b59fcd99|2015-09-25|Samuel Audet| * Provide `@Virtual(true)` to specify pure virtual functions and prevent `Generator` from making undefined calls  * Update properties for Android to detect undefined symbols at compile time
9ff6d936641c8fa279348ebe8ba84ad9f6830bc3|2015-09-20|Samuel Audet| * Log when `Pointer.deallocator` gets registered, garbage collected, or deallocated manually, if `Logger.isDebugEnabled()` (redirectable to SLF4J)  * Make `Pointer implements AutoCloseable` to let us try-with-resources, thus bumping requirements to Java SE 7 and Android 4.0
ad17860e529b9e4dcd7ac5c6737a005de79ebfb9|2015-09-20|Samuel Audet|Merge pull request #40 from cypof/ignores
96908f2f16f8b3b183ecd9f6e94d6bb3145b3c47|2015-09-19|cypof|Ignore OSX and IDE files
f61ac32ec07bb0c1e0e96e40480ebac40823c6bd|2015-09-15|Samuel Audet|Update version in the `pom.xml` file to 1.1-SNAPSHOT
70bc933850516fdaccc9caadbd6e12b9d79f69f0|2015-09-15|Samuel Audet| * Add new "cpp11" option for the `@Platform(compiler=...)` value to build against the C++11 standard
466d6a97abe4ef11f6454d147f65220c1b27741d|2015-09-14|Samuel Audet| * Fix `Parser` support for the `interface` keyword of the Microsoft C/C++ Compiler
5047c36d4b5d1ccfc59c44336360370b7688d85b|2015-09-13|Samuel Audet| * Let `Parser` pick up names from `Info.pointerTypes` in the case of function pointers as well
28f840add57aeb1b9d867fa57186501ebb27bcb2|2015-09-11|Samuel Audet| * Add new "org.bytedeco.javacpp.nopointergc" system property to prevent `Pointer` from registering deallocators with the garbage collector
fbcd62c6b0716aa37d1d17a13d641a0550589415|2015-09-11|Samuel Audet| * Fix `Parser` bug involving simple types and skipped identifiers
12b526a058c2f0202592adcba3d860342742e230|2015-09-06|Samuel Audet| * Add `@Properties(names=...)` value to specify a list of default platform names that can be inherited by other classes
f424004a0f39a88d13e1a1197a823778740b7493|2015-09-03|Samuel Audet| * Fix a couple of `Parser` issues on complex template types (issue #37)
aaa803a33f55ed078844493b1f4c4709e06e7fc4|2015-09-01|Samuel Audet| * Take into account `Buffer.arrayOffset()` when creating a `Pointer` from a buffer backed by an array (issue bytedeco/javacv#190)
b94b057d702fc3d579589cbfa33cc5adf3ec2ba4|2015-08-24|Samuel Audet| * Fix some incorrectly translated comments in `Parser` (issue #32)
1e799612a0867f8445e87055df62423897d6ed9b|2015-08-22|Samuel Audet| * Add `Parser` support for the `std::bitset` "container"
5c259e1ee08c65a89dd4af4a4ee8c12af9547fc8|2015-08-17|Samuel Audet| * Fix one more potential `NullPointerException` in `Parser` (issue #30)
9ed94ed61c01c711b08f9fe290701ecc5f008b00|2015-08-16|Samuel Audet| * Properly parse overloaded `new` and `delete` operators, `friend` declarations, and default constructors with an explicit `void` parameter (issue #31)  * Fix a couple of potential `NullPointerException` in `Parser` (issue #30)
5d374eb83f23da870d1fd0f84f27a1991fd26946|2015-08-13|Samuel Audet| * Have the `Parser` wrap the `iterator` of some standard C++ containers when useful
fe92af816b2cef8770263d7746cf771e64a28ae0|2015-08-03|Samuel Audet| * Use Clang as the default compiler for Mac OS X and iOS (via RoboVM)
13ce836beb73cb992aaf12af0569976d680c7809|2015-08-01|Samuel Audet| * Adjust `BytePointer`, `CharPointer`, `IntPointer`, and `StringAdapter` to work with data strings that are not null-terminated (issue #24)
3b3b1c8cf4af364d125dc762859f1b2c2fad7159|2015-07-31|Samuel Audet| * Forbid `Parser` from producing `abstract` classes, preventing C++ factory methods and such from working properly (issue #25)
c5c1622ee56b06c4c040c1511ae5ff1130b9702a|2015-07-30|Samuel Audet|Merge pull request #27 from gitter-badger/gitter-badge
9ea091c265fd7525d51b4c9477a5632a371016a0|2015-07-30|Samuel Audet| * Fix crash when trying to create objects from abstract classes, to let the exception be thrown on return (issue #26)
55aee22458677b9e28830146d326cecf90b278a2|2015-07-29|The Gitter Badger|Added Gitter badge
75d281736263a5b0394a59881158c31ff6de81a5|2015-07-18|Samuel Audet| * Switch to GCC 4.9 by default on Android, probably dropping support for Android 2.2, because GCC 4.6 has been dropped from the NDK since r10e
3d48cb5d856f5e17cbf216d0ef31dcc270430999|2015-07-14|Samuel Audet| * Insure `Generator` casts properly to `jweak` when calling `DeleteWeakGlobalRef()` (issue #23)
954193136aa6a06cb62bf678aec7e4142371a37b|2015-07-11|Samuel Audet|Release version 1.0
a5865974b482b0284bfb23c98265af01e2544588|2015-07-11|Samuel Audet| * Add `-undefined dynamic_lookup` option to Mac OS X compiler, making its native linker behave a bit better, plus search for libraries suffixed with ".so" too
6f8181f29ae3a4dc470964a978de0f2b143bb1d8|2015-06-27|Samuel Audet| * Add missing `@Platform(frameworkpath=...)` value and corresponding property to set custom framework paths for the linker
de9c9191d2daddbb13a848be4aef2f5339e5723f|2015-06-27|Samuel Audet| * Fix `Parser` errors caused by constructors in nested `typedef struct` constructs, and skip over pointer names too (issue bytedeco/javacpp-presets#62)
27ec6825ead26c73d5ebb5ce5807b88992493a79|2015-06-26|Samuel Audet| * Add `Parser` support for the `interface` keyword of the Microsoft C/C++ Compiler
9922f748f9c9112b8ae5cf82b29c8f659652cc2a|2015-06-20|Samuel Audet|* Fix `Generator` performance issue on classes with a lot of methods (issue bytedeco/javacpp-presets#36)
bc4f0090a4bed47b2a9a09428cf22ce9b9b9a0da|2015-06-14|Samuel Audet| * Offer the Apache License, Version 2.0, as a new choice of license, in addition to the GPLv2 with Classpath exception
33f4335f6d644f505f61ec81f60992cc37aaeb36|2015-06-07|Samuel Audet|Update version in the `pom.xml` file to 1.0-SNAPSHOT
9ff00146a99561e42806f92f2576e8d2bb49d1f1|2015-06-01|Samuel Audet| * Fix `NullPointerException` when trying to process an `interface` class
beecf1b58a13af09771a36dbbb0d3d9ad21dd888|2015-05-30|Samuel Audet| * Fix `Parser` errors on unnamed `namespace` blocks, preprocessor directives with comments, and empty macros
8bd2194be4afc76afa52d12f0489a1d1634737dd|2015-05-24|Samuel Audet| * Introduce a `nullValue` to `@ByRef` and `@ByVal` annotations to let us specify what to do when passed `null`
977fbd266cbe7e6725e8c6f6b745e15ed571bed1|2015-05-17|Samuel Audet| * Add properties for `android-arm64`, `android-x86_64`, and `linux-arm64` platforms
d0093ee79cd65e71a41244fd340145bb82de288b|2015-05-10|Samuel Audet| * Add slow but generic `Indexer.putDouble()` to complement existing `Indexer.getDouble()` (useful for testing)
da07a988a06b07a03bb0b117606b6a7882dc258d|2015-04-26|Samuel Audet| * Fix and enhance in various ways the support of `Parser` and `Generator` for function pointers, virtual functions, and abstract classes  * Improve `Parser` check for `const` references and pointers required to output appropriate `@Const` annotation  * Add `Info.purify` to force the `Parser` in producing abstract classes
d4281196c8b10c1e7ac2cb3566d1fc718eae2781|2015-04-19|Samuel Audet| * Let `StringAdapter` (via the `@StdString` annotation) support `std::string*`, that is to say, pointers to strings
7d2ec678cc403a22875fd943132ea22786b30d88|2015-04-19|Samuel Audet| * Fix `Tokenizer` failing on some character and string literals  * Fix `Parser` errors caused by constructors in `typedef struct` constructs  * Generalize `Info.virtualize` to let non-pure virtual functions get annotated with `@Virtual native`  * Make `VectorAdapter` work even with elements that have no default constructor  * Add `Parser` support for `std::pair` as a sort of zero-dimensional container type
91183d50b328b507410c7a1dc9bb340cb2902757|2015-04-15|Samuel Audet| * Fix `Parser` crash on empty comments (issue #14)
e5e08b941da1078d48f30afc1674c847f3248b35|2015-04-05|Samuel Audet|Release version 0.11
29dd71a15c5c0028d614bd3b5cdd939bacf9db90|2015-04-02|Samuel Audet| * Clarify with documentation comments various constructors produced by the `Parser`
2d0055ede1937b69fc7fd5e3d16990b65c987378|2015-03-11|Samuel Audet| * Work around a few additional corner cases with the `Parser`
26d83ac42f8e2f5c89a36fe6131d0545140e55df|2015-03-10|Samuel Audet| * Fix a few more small issues with the `Parser` and the `Generator`
ebfea68ae0bbe99c17105bbc14b3535d355ea8c3|2015-03-09|Samuel Audet| * Add `SharedPtrAdapter` and corresponding `@SharedPtr` annotation to support `shared_ptr` containers  * Fix a few small issues with the `Parser` and the `Generator`
9bf3ec486b76d932b18da6c55d5632fcc22f4650|2015-02-28|Samuel Audet|Update version in the `pom.xml` file to 0.11-SNAPSHOT  * Provide `UByteIndexer` and `UShortIndexer`, treating array and buffer data as unsigned integers, for ease of use  * Clean up Windows `java.io.tmpdir` even when program messes with `java.class.path` (issue #12)
e2af6ce967b1ea4711ac0b7a54f0cec961b87b43|2015-02-25|Samuel Audet|Merge pull request #13 from mabruce/tempfile-deleter
146674f290dc0456288f2ebc12218f34ab719416|2015-02-24|mabruce|Feed javacpp.jar path to temp file deleter
ab7237e3a313d40124e9e3abfb433023ad0332ad|2015-02-18|Samuel Audet| * In addition to direct NIO buffers, also accept as function arguments non-direct ones backed by arrays (issue bytedeco/javacpp-presets#36)
52b7ee1c7cd31f4e8f51ab75d07990151c171335|2015-01-15|Samuel Audet| * Fix `@Virtual` callback functions defined inside a `@Namespace`
58bb45d315de49d9c966a310279cd05baff1aa05|2015-01-12|Samuel Audet| * Adjust `TokenIndexer` and `Parser` to handle `#if`, `#ifdef`, `#ifndef`, `#elif`, `#else`, and `#endif` preprocessor directives more appropriately, even when placed in the middle of declarations
5a157cbc4b2f43375c97ad3d16b6cc84be371583|2015-01-06|Samuel Audet| * Append `@Documented` to annotation types to have them picked up by Javadoc  * Fix `friend` functions not getting skipped by the `Parser`  * Add `Info` for `__int8`, `__int16`, `__int32`, and `__int64` to `InfoMap.defaults`
6212a1bed040e6da663778374397454460247e70|2014-12-24|Samuel Audet|Release version 0.10
02d978a1dced566678c0680fd9865ab28447460a|2014-12-14|Samuel Audet|Implement `Indexer.toString()` to display vectors and matrices
b235b7629f53a1f5f1c893b0f7415c42d4204cc1|2014-12-14|Samuel Audet| * Fix multiple "platform.preload" or "platform.preloadpath" properties not getting considered by the `Loader`
1b26d886cf9b7ef7594d2ba809e110e822603920|2014-11-16|Samuel Audet|Enhance indexers with bulk `get()` and `put()` methods
92d3f0f112c833ef8c6d8e179770a3a0e263e595|2014-11-16|Samuel Audet| * Fix some `Parser` exceptions on valid declarations with macro expansions or overloaded cast operators
cd632cfb0421639355a9622ce1285469dd5ffadd|2014-11-09|Samuel Audet|Add factory methods to create from pointers indexers with proper `release()` methods
8afa67a5047268fee82cd9558f0b4124801d3001|2014-11-03|Samuel Audet| * Fix some `Parser` exceptions on valid declarations with template arguments, and make `Info.javaName` usable in the case of `enum`
d4df1d396b7fca234fab61755ddf1c9a68dce6d2|2014-11-01|Samuel Audet| * Disable DocLint, which prevents the build from succeeding on Java 8 (issue #5)
4d8dc9d8b244b79ca3c9d9355e476f028f3f36f9|2014-10-19|Samuel Audet| * Add new `indexer` package containing a set of `Indexer` for easy and efficient multidimensional access of arrays and buffers ([issue javacv:317](http://code.google.com/p/javacv/issues/detail?id=317))
6dac3bb911048634e16b36354bdca0982fc7f2ce|2014-10-05|Samuel Audet| * Use `Long.decode()` inside the `Tokenizer` to test more precisely when integer values are larger than 32 bits  * Have the `Parser` produce `@Name("operator=") ... put(... )` methods for standard C++ containers, avoiding mistaken calls to `Pointer.put(Pointer)` ([issue javacv:34](https://github.com/bytedeco/javacv/issues/34))  * Let the `Parser` apply `Info.skip` in the case of macros as well  * Remove warning log messages when using the `@Raw` annotation
cf57c44d5bda003ed6916e1ab57400be61f36c01|2014-09-20|Samuel Audet| * Let `@Virtual @MemberGetter` annotated methods return member function pointers of functions defined with `@Virtual`, useful for frameworks like Cocos2d-x
0c7bd3a37c6d190fa113fc01d58008b886727be7|2014-09-06|Samuel Audet| * Fix `NullPointerException` when leaving the `includePath`, `linkPath`, or `preloadPath` Mojo parameter empty
0a2c26b07586041cec9bdd3d185e737bc0711a83|2014-08-26|Samuel Audet|Add support for virtual functions to let C++ call back methods implemented in Java
ec16d8c53a105b309ddfb0b8cb5a8d3fba029b7b|2014-08-09|Samuel Audet| * Add hack for `typedef void*` definitions and parameters with a double indirection to them
b32cc5e1188d30292503948d134c5cb18af529f3|2014-08-03|Samuel Audet|Add .gitignore file
c823f252524619f7a6af29fa58ddd850ca90a25a|2014-07-28|Samuel Audet|Release version 0.9
329e4338fa22e61bf9e4e61e24eedfbc9ea53b90|2014-07-26|Samuel Audet| * Fix `Generator.checkPlatform()` not checking super classes
9d71d86330cbdacd33b33cc8918a672662089333|2014-07-21|Samuel Audet| * Fix issues with pointers to function pointers
379a9a55ebed63ead840ee2f8811cc4235e3e2bf|2014-07-19|Samuel Audet| * Fix issues in the `Parser` with the `long double`, `ptrdiff_t`, `intptr_t`, `uintptr_t`, `off_t` types, optional parentheses, const data types in templates, declarator names equal to a type name, friend functions, inline constructors, `typedef void` declarations within namespaces
0f4e6c97b76daa7c04d05ad4caf75f872bebe338|2014-07-06|Samuel Audet| * Add `includePath`, `linkPath`, and `preloadPath` parameters to `BuildMojo` to let Maven users append paths to the properties easily  * In consequence, remove too arbitrary "local" paths from the default platform properties
dd145115fdd1ccf68c16c3acf99c700ea3a46ec3|2014-06-28|Samuel Audet| * Fix issues in the `Parser` with access specifiers and casting of const values by reference
14c8b1c690bbbd1e868a0bf03c1b4ed2df164f62|2014-06-17|Samuel Audet| * Fix a few other minor issues in the `Parser`
f05099fb3db966925199f2b398a273b4c279239f|2014-06-08|Samuel Audet| * Allow users to instruct the `Parser` to skip the expansion of specific macro invocations  * Let `Parser` concatenate tokens when expanding macros containing the `##` operator
7f64d9e41923314ab433055d8647aa332d96ee83|2014-05-18|Samuel Audet| * Add some documentation for `Info`, `InfoMap`, `InfoMapper`, and `Parser`  * Fix the `Parser` not filtering and expanding properly some preprocessor directives, as well as producing wrong code for `typedef struct *`
11bdc998f74362c29d3a9c71cf2cb774e4498cea|2014-05-16|Samuel Audet| * Skip Java path search when building for Android to prevent including some random `jni.h` file (issue #3)
662fdc3804d8f2d0325d277a9bf8a59ace85db70|2014-05-10|Samuel Audet| * Fix the `Parser` losing some keywords like `static` on methods annotated with an `@Adapter` (issue #2)
282926e489f67375d51f23d221bc640a95e13420|2014-05-03|Samuel Audet| * Fix `Loader.load()` not properly force loading all inherited target classes (issue #1)
5e0ed47f781793795d779f9362bd660ec6558821|2014-04-28|Samuel Audet|Release version 0.8
37b70e00dc463533455bb8ebcf467d3a5feb4991|2014-04-21|Samuel Audet| * Move from Google Code to GitHub as main source code repository  * Place build-time classes in the `org.bytedeco.javacpp.tools` package and bring out static nested classes, in an effort to avoid conflicts and ease development  * Rename the `com.googlecode.javacpp` package to `org.bytedeco.javacpp`
e5173585a30f1e24afcb8a1eeb67c5f70c3f9f60|2014-04-06|Samuel Audet| * Added `public long Pointer.address()` getter method, useful when one needs to subtract two pointers  * Removed old NetBeans project files that cause a conflict when trying to open as a Maven project (issue javacv:210)
80ff38cbda8cd68d6d177725c4a1e42b4a7d55cf|2014-03-30|Samuel Audet| * Fixed compilation error on `FunctionPointer` classes containing no native callback methods  * Continued to clean up the `Parser` and improve the support of enumerations
93bbeb9e7ac72f528ccab7c45c779523d79fc618|2014-03-30|Samuel Audet| * Added a `platform.library.path` property, such as "lib/armeabi/" in the case of the "android-arm" platform, to be used instead of "package/platform" (issue javacv:427)  * Generalized references to the path of the Android NDK  * Improved a few small things in the set of `Pointer` classes`
121050d063095152fc323da8685f8ae631ae9d2e|2014-03-23|Samuel Audet| * Upgraded references of the Android NDK to version r9d  * Continued to clean up the `Parser` and improve the support of, for the most part, functions pointers and anonymous `struct` or `union`
afe454f9d3926941ef9663b14ea82e1089e9518d|2014-03-16|Samuel Audet| * Introduced a simple `Logger` class and unified the logging output calls around it  * Continued to clean up the `Parser` and improve the support of, for the most part, default parameter arguments, multiple inheritance, custom names of wrapped declarators, and helper classes written in Java
412642dd802ee8787e0b09e68c694e4537cc9066|2014-03-08|Samuel Audet|Cleaned up the code a bit
9ad301f81625c0e5eda06d9b43473e5fee4cbed6|2014-03-05|Samuel Audet| * Unified the property names with the `@Properties` and `@Platform` annotations into a consistent naming scheme
446fe46e573300b4bf79069f26e38c24a069c3f5|2014-03-02|Samuel Audet| * Continued to clean up the `Parser` and improve the support of comments, templates, overloaded operators, namespaces, and standard containers, for the most part
2acbe76f9232a801fc052ff0b155f8a18e664dd7|2014-03-01|Samuel Audet| * Annotations such as `@Adapter` or `@ByVal` are no longer ignored on parameters of getters or setters annotated with `@Index`  * Fixed some other corner cases in `Generator`  * Added for convenience to `PointerPointer` a generic parameter `<P extends Pointer>` and the associated `get(Class<P> ...)` getters, as well as `String` getters and setters  * Passing a `Class` object as first argument to a native method that returns a `Pointer` now determines the runtime type of that returned object
c49c3535fb4454d9862934ca8118356bafe38a74|2014-02-16|Samuel Audet| * Continued to clean up the `Parser` and improve the support of comments, templates, overloaded operators, and namespaces, for the most part  * Unified the function pointer type of native deallocators to `void (*)(void*)`  * Removed dependency on (efficient) `AllocObject()` and `CallNonvirtualVoidMethodA()` JNI functions, which are not supported by Avian
f32c55cf0b7f62d7ab684d99e6d947d5bba99f42|2014-02-15|Samuel Audet| * Fixed a few potential issues with the hacks in `Loader`  * Generalized somewhat more the compiler options used inside `linux-arm.properties` (issue javacv:418)
0f003f0639fe9eafd9beca40df164da19d49718d|2014-01-19|Samuel Audet| * Cleaned up and optimized `Generator` a bit, and fixed a crash that could occur when `FindClass()` returns NULL
1104907b29ff7b42b562c5495672a51f9a46af7c|2014-01-06|Samuel Audet|Released version 0.7  * Tweaked a few things to support RoboVM and target iOS, but `JNI_OnLoad()` does not appear to get called...  * Upgraded references of the Android NDK to version r9c  * Improved the C++ support of the `Parser` for templates and overloaded operators
e192b1eacc824bd2fef5ca8bf8e5f32578b61d6b|2013-12-17|Samuel Audet|Fixed a Windows bug that caused immediate crash (issue #41)
a9bcf01c04868c1f1036cf0f2d6a90e9d1265300|2013-12-12|Samuel Audet| * Made `Loader.load()` work, within reason, even when all annotations and resources have been removed, for example, by ProGuard  * Fixed compile error when using a `FunctionPointer` as parameter from outside its top-level enclosing class  * The `Parser` now filters tokens appropriately with preprocessor directives  * Improved the C++ support of the `Parser` for macros, templates, etc
61c0c0b6a4f65f3a0b3633a2db66bccc59accbf2|2013-11-28|Samuel Audet| * Added new `Pointer.deallocate(false)` call to disable garbage collection on a per object basis, allowing users to deal with memory leaks in other ways  * Changed the default compiler option `-mfpu=vfpv` for ARM to `-mfpu=vfpv3-d16`, because the former is not supported by Tegra 2
2718ef7fd3a1ad18c095556e3f87b77b00329869|2013-11-17|Samuel Audet| * Removed call to `Arrays.copyOf()` in `Loader.findLibrary()`, which would prevent it from working on Android 2.2 (issue #39)
fad2ca5c8b15431ef3188eb890acb4c0a33dad7a|2013-11-03|Samuel Audet| * Fixed invalid code generated for `FunctionPointer` parameters annotated with `@Const @ByRef`
88d011c350b5bff956c27b83caf45b686e8b45df|2013-10-20|Samuel Audet| * Fixed `NullPointerException` in `Loader.load()` when no `@Platform` annotation is provided (issue #38)  * Parsing for anonymous `struct` or `union` and for `typedef void` (mapped to `@Opaque Pointer`) now outputs something  * The `Parser` now expands preprocessor macros and outputs all unprocessed directives as comments
c897cd1d8ae681eb5aff7cff354b64163bdc3bcc|2013-10-06|Samuel Audet| * Added support for parsing namespaces, derived classes, access specifiers, custom constructors, vector types, and updated a bunch of other stuff in `Parser`
e0f63f9012e48190d30839f5abcf0000c44261b0|2013-09-28|Samuel Audet| * Fixed `typedef` of function pointers and a few code formatting issues with `Parser`  * Supplied checks to prevent `Loader.load()` from throwing `java.lang.IllegalStateException: Can't overwrite cause`
55b2a62a058495b73f45b5a54bd4fd42d6ceb0f5|2013-09-15|Samuel Audet|Released version 0.6  * Added new very preliminary `Parser` to produce Java interface files almost automatically from C/C++ header files; please refer to the new JavaCPP Presets subproject for details
605e77b7b746531b5f1377ecbd104af3e4537905|2013-08-31|Samuel Audet| * When catching a C++ exception, the first class declared after `throws` now gets thrown (issue #36) instead of `RuntimeException`, which is still used by default  * Fixed Java resource leak after catching a C++ exception
dc4b8be35e27fc3b02609b3157b525eebb3dc382|2013-08-25|Samuel Audet| * Let `Buffer` or arrays of primitive values be valid callback arguments
d23f4f472966eef1c656478d8863feee1e221f8f|2013-08-03|Samuel Audet| * Upgraded references of the Android NDK to version r9  * Added new `Builder` option "-copylibs" that copies into the build directory any dependent shared libraries listed in the `@Platform(link={...}, preload={...})` annotation  * `Loader.getPlatformName()` can now be overridden by setting the `com.googlecode.javacpp.platform.name` system property  * Refactored the loading code for `@Properties()` into a neat `Loader.ClassProperties` class, among a few other small changes in `Loader`, `Builder`, `Generator`, and the properties
630823d135f6705cbee059c091361539d314dc3b|2013-07-20|Samuel Audet| * Included often used directories such as `/usr/local/include/` and `/usr/local/lib/` to `compiler.includepath` and `compiler.linkpath` default properties  * New `@Properties(inherit={Class})` value lets users specify properties in common on a similarly annotated shared config class of sorts
85e6dc635bb2b495bfb6ff17dee9438e84664b01|2013-07-15|Samuel Audet| * Let `Buffer` objects be valid return arguments, mostly useful when used along with the `@StdVector` annotation, or some other custom adapter
f481d9aef24c175d54fa01a4beb76a3561807a3c|2013-07-13|Samuel Audet| * Fixed callbacks when used with custom class loaders such as with Web containers
2b3ce614120d0b813dd83901294e0064b62f97cb|2013-07-07|Samuel Audet| * Fixed using `@StdString` (or other `@Adapter` with `@Cast` annotations) on callbacks (issue #34), incidentally allowing them to return a `String`
81a627b83de1e76d491297299265a76736f747fd|2013-06-15|Samuel Audet| * By default, `Builder` now links to the `jvm` library only when required, when using the `-header` command line option (issue #33)
f658734b2cf5b1974d66ae61d773e7fe6df472a3|2013-06-08|Samuel Audet| * Incorporated missing explicit cast on return values when using the `@Cast` annotation
455f8a6fe91eb1f44d014b1d0c3a51f2bd972c27|2013-05-11|Samuel Audet| * Fixed duplicate code getting generated when both specifying the output filename with "-o <name>" and using wildcards on packages containing nested classes
3c130a66c6e5d62adfd5bb03c60407c8eac07d24|2013-04-20|Samuel Audet| * Let arrays of primitive values be valid return arguments, mostly useful when used along with the `@StdVector` annotation, or some other custom adapter
1a5e78ae9510d1ba8408937e2cbdb1c3c24da346|2013-04-07|Samuel Audet|Released version 0.5
3934c45285d7de75c7c827b3a104cbe89658d6aa|2013-03-24|Samuel Audet| * Arguments of `Pointer` type now get handled as `char*` in cases when the `position` can be used for arithmetic  * Worked around bug of `InputStream.available()` always returning 0 with the `http` protocol in `Loader.extractResource(URL)`
28832078f3c748b54b18cd120cfe84bb34762a78|2013-03-03|Samuel Audet|Released version 0.4 * Fixed potential problem with methods of `FunctionPointer` annotated with `@Cast("const...")` * Upgraded references of the Android NDK to version r8d
a41cb1dcc6513133e9466331c1f73143dca5e422|2013-02-24|Samuel Audet| * Fixed callbacks not working on Android anymore (issue #30)  * Added some Javadoc to most of the code
d5d47a5d7b3d8488ca7d98e92c5e65334ec43208|2013-02-11|Samuel Audet| * To help diagnose `UnsatisfiedLinkError` thrown by `Loader.load()`, they have been augmented with a potential cause originating from the "preloading" of libraries, whose premature deletion has also been fixed
21a7a204df4821a80b3dab14f0bf5066c85c7258|2013-02-07|Samuel Audet|Removed the need to provide a `@Platform(library="...")` name for enclosing but nested classes
18b642d647c22a353415fb66545dd5e66d4b53f5|2013-02-03|Samuel Audet| * Provided new `@Platform(library="...")` annotation value to let users specify the name of the native library used by both `Builder` and `Loader`, where different classes with the same name get built together, which also works on nested classes (issue #29)
69a706a342df67d80bcd028cf4c254526ef9ad76|2012-12-15|Samuel Audet|Fixed `BuildMojo` not working without specifying any class or package after last change to `Builder` (fix #2)
c5e0d603e9cbbc89ced3bde64be0590bd14ef15f|2012-12-15|Samuel Audet|Fixed `BuildMojo` not working without specifying any class or package after last change to `Builder`
342553da4575bf89494cbf8de713a7b8da76b46e|2012-12-11|Samuel Audet|Fixed compile error of `FunctionPointer` deallocator with `@Name`
f5d5b10834173f870d4cd9ad1ef542bc17258c27|2012-12-10|Samuel Audet| * Added the ability to change the name of the class of function objects created when defining a `FunctionPointer` with the `@Name` annotation  * `Builder` would go on a compile spree when all classes specified on the command line could not be loaded
0ba284424e16758574e81ba4640a1826acca50a2|2012-11-20|Samuel Audet| * Exported `Loader.isLoadLibraries()`, which always returns true, except when the `Builder` loads the classes  * Made it possible to specify a nested class (with a '$' character in the name) on the command line  * When `Pointer.limit == 0`, the methods `put()`, `zero()`, and `asBuffer()` now assume a size of 1
b51e25dffc7a234b359476cae3797dc7c13e5b49|2012-11-10|Samuel Audet| * Fixed compiler error on 32-bit Mac OS X
994d451bbf4ddad29d8dd0d0cf56139aa8b7cf18|2012-11-04|Samuel Audet|Released version 0.3
09e76232250ece004ef1eeaa465f4d3358b0725e|2012-11-03|Samuel Audet|Fixed a few small things
edc0de4d103d2a690db7ab5e3db224e7ef75d5d1|2012-11-02|Samuel Audet| * Added `Pointer.withDeallocator(Pointer)` method to attach easily a custom `Deallocator` created out of a `static void deallocate(Pointer)` method in the subclass, including native ones such as `@Namespace @Name("delete") static void deallocate(Pointer)`
8d68946b734a7555a2d80b5c173f633b89ad1273|2012-11-01|Samuel Audet| * A name starting with "::", for example `@Name("::std::string")` or `@Namespace("::std")`, now drops the remaining enclosing scope
c523018ddd9715c0ba937405c2afc2bdf8ad2688|2012-10-28|Samuel Audet|Modified `Builder` to prevent requiring the `jvm` library for cases where linking has a high probability of failure
e544f7c74edc2b34b125bf02dee6e7441a130224|2012-10-27|Samuel Audet| * Removed confusing `cast` value of `@Adapter` instead relying on new `String[]` value of `@Cast` to order multiple casts  * The `Builder` was not linking with the `jvm` library by default
37228aa780eae24c64e8011763d419151b6ee6d1|2012-10-21|Samuel Audet| * Renamed various variables in `Generator` to make the generated code more readable  * Fixed memory corruption when using `@ByRef` on a function that returns by value an `std::string` (issue #26)
d2765542855984ad68ce04c9846dbb5a083fc95e|2012-10-17|Samuel Audet| * Fixed memory corruption when returning by value an `std::vector<>` using an adapter  * Added `Pointer.zero()` method that calls `memset(0)` on the range  * For easier memory management, more than one `Pointer` now allowed to share the `deallocator` when "casting" them
f179b014dbe1ddecb617c2d95efb6040a0908eda|2012-10-13|Samuel Audet| * Fixed `@Cast` not working when attempting to `return` the argument
3398e6ace6c524cb31f85dd0867ec4776530d089|2012-10-08|Samuel Audet| * Upgraded references of the Android NDK to version r8b
c746a27404dc32f2e0376c492801b5f65e68d289|2012-10-08|Samuel Audet|Fixed a few things related to named `FunctionPointer` callbacks
e8825ab479c2b8e92e8d63c846c5adb3269d14d2|2012-09-30|Samuel Audet| * Added functionality to access `FunctionPointer` callbacks by their name from C/C++: We can annotate them with `@Name` and build with the new `-header` option to get their declarations in a header file
1de56e4043a85af4f85da3434eb10ae16fbc71de|2012-09-14|Samuel Audet| * `Pointer.deallocator()` would needlessly enqueue `Deallocator` objects pointing to the native `NULL` address
ffaf80a124727efe953d83d60caa0ad173daa213|2012-09-02|Samuel Audet| * Added support for C++ "functors" based on the `operator()`, which gets used when annotating a `FunctionPointer` method parameter with `@ByRef`  * For convenience in Scala, added `apply()` as an acceptable method name within a `FunctionPointer`, in addition to `call()`
4056ca045fc622d19cec6b3481404426173f042f|2012-08-19|Samuel Audet| * Fixed `@Cast` not working along parameters with an `@Adapter`
c9c2ab8fd582f6920b30a7320a92293d07d3c74d|2012-08-18|Samuel Audet| * `Generator` would ignore `Pointer.position()` in the case of `@ByPtrPtr` and `@ByPtrRef` parameters  * Replaced hack to create a `Pointer` from a `Buffer` object with something more standard
6a57e944b4b66923bc1e91f9779bed155473ff17|2012-08-11|Samuel Audet| * Fixed `Loader.sizeof(Pointer.class)` to return the `sizeof(void*)`  * In addition to methods and parameters, we may now apply `@Adapter` to annotation types as well, allowing us to shorten expressions like `@Adapter("VectorAdapter<int>") int[]` to `@StdVector int[]`, to support `std::vector<int>`, and similarly for `@StdString` and `std::string`
2e230af078036823758a48e1bfc45083a8d47977|2012-08-10|Samuel Audet| * Fixed callback parameter casting of primitive and `String` types  * An empty `@Namespace` can now be used to let `Generator` know of entities that are not part of any scope, such as macros and operators  * Turned `FunctionPointer` into an `abstract class` with `protected` constructors, but if users still try to use it as function parameters, `Generator` now logs a warning indicating that a subclass should be used (issue #23)
cacf0d9977db7b5a5cc70a5e6db0f4b93197424b|2012-08-08|Samuel Audet| * Removed the `out` value of the `@Adapter` annotation: All adapters are now "out" by default, unless `@Const` also appears on the same element
51f4daa13d618c6bd6a5556ff2096d0e834638cc|2012-08-04|Samuel Audet| * Fixed `Pointer.equals(null)` throwing `NullPointerException` (issue #22)  * `@NoOffset` would erroneously prevent `sizeof()` operations from getting generated
a360dc078dc558a7af61753e324664d218576882|2012-07-21|Samuel Audet|Released version 0.2
fa409e4dd606be4b2b8a30c6adefb95dbbb919c0|2012-07-21|Samuel Audet| * Fixed problems when trying to map `java.lang.String` to other native types than `char*`, such as `unsigned char*`
3fd6db7d5021e51e4beec97c7c5421229b82ac31|2012-07-09|Samuel Audet| * JavaCPP now uses the `new (std::nothrow)` operator for allocation, which guarantees that allocation of primitive native arrays won't throw exceptions, making it possible to build C++ exception free JNI libraries
bb8584471547acdcfd6a9be768de38b9b1a7a029|2012-07-01|Samuel Audet| * Added new `Pointer.limit` property, mainly useful to get the `size` of an output parameter, as returned by an adapter specified with the `@Adapter` annotation  * Renamed the `capacity` field of an adapter to `size` as it now maps to both `Pointer.limit` and `Pointer.capacity` (the latter only for new allocations)
f4ece2f34684e5995635932a383498d56aad87a0|2012-06-23|Samuel Audet| * Added `Pointer.put(Pointer)` method, the counterpart of `Buffer.put(Buffer)`, to call the native `memcpy()` function on two `Pointer` objects
d524c1f8fb36aea69b6edb7ea27772abdba988f9|2012-06-16|Samuel Audet|Added missing `NoException.java` source file
5c5a58a12a6535b84d9c3fb8fe5f3226324e65de|2012-06-09|Samuel Audet| * New `@NoException` annotation to reduce the size of generated code and optimize runtime performance of functions that are guaranteed not to throw exceptions, or for cases when we do not mind that the JVM may crash and burn  * Trying to generate code for non-static native methods inside a class not extending `Pointer` now generates proper warning (issue #19)  * Fixed regression where the `@Adapter` notation generates incorrect code for types other than `Pointer` (issue #20)
d7a1761a52869a2d45c9b1ae77766ec75fca30e9|2012-06-09|Samuel Audet| * Fixed `@Adapter` generating incorrect code on primitive types
f027143595ba196a0254957b5c15e6711c5477f2|2012-06-09|Samuel Audet| * Trying to generate code for non-static native methods inside a class not extending `Pointer` now generates proper warning (issue #19)  * Fixed regression where the `@Adapter` notation generates incorrect code for types other than `Pointer` (issue #20)
96cf838a9edde36105f9abad1945f84381882393|2012-05-26|Samuel Audet| * Started using version numbers, friendly to tools like Maven, and placing packages in a sort of [Maven repository http://maven2.javacpp.googlecode.com/git/] (issue #10)  * All files now get extracted into a temporary subdirectory, and with the appropriate platform-dependent linker options, or with libraries patched up after the fact with tools such as `install_name_tool` of Mac OS X, most native dynamic linkers can load dependent libraries from there  * Changed the default value of the `@Index` annotation from 0 to 1, and fixed the `Generator` when it is used with member getters and setters  * Renamed `mingw-*.properties` to `windows-*-mingw.properties` for consistency  * Made the `Generator` allocate native heap memory for callback arguments passed `@ByVal` (in addition to `FunctionPointer`), rendering their behavior consistent with return `@ByVal` in the case of function calls (issue #16)  * `Generator` now uses `std::runtime_error(std::string&)` instead of assuming that some nonstandard `std::exception(std::string&)` constructor exists (issue #17)  * Fixed `Generator` producing incorrect code when applying invalid annotations such as `@ByVal` on a method that returns something else than a `Pointer` object (issue #18)
8c13f85ab6ce4baa82916a54667d68e48107c3d6|2012-05-20|Samuel Audet| * Before loading the JNI library, the `Loader` now also tries to extract and load libraries listed in the `@Platform(link={...}, preload={...})` annotation values, and to support library names with version numbers, each value has to follow the format "libname@version" (or "libname@@version" to have `Builder` use it for the compiler as well), where "version" is the version number found in the filename as required by the native dynamic linker, usually a short sequence of digits and dots, but it can be anything (e.g.: "mylib@.4.2" would map to "libmylib.so.4.2", "libmylib.4.2.dylib", and "mylib.4.2.dll" under Linux, Mac OS X, and Windows respectively)  * Stopped using `java.net.URL` as hash key in `Loader` (very bad idea)
856ecd989f26cc3920de024dcdf3e9bcd9d892bd|2012-05-12|Samuel Audet| * New `Loader.loadLibrary()` method similar to `System.loadLibrary()`, but before searching the library path, it tries to extract and load the librar  * `Generator` now accepts `@Const` on `FunctionPointer` class declarations  * Added new `@Adapter.cast()` value to cast explicitly the output of a C++ adapter object  * Upgraded references of the Android NDK to version r8  * Included new command line option "-Xcompiler" to pass options such as "-Wl,-static" directly to the compiler  * Made other various minor changes and enhancements
50b05a53b842d92719ee58b793fe70df882a17a5|2012-04-30|Samuel Audet| * Refactored `Builder` to remove the need of the `Builder.Main` class  * Added CUDA properties for Windows and Mac OS X as well
2ff99db5e5d68b94e1d3620bbc6da0f1e3c3c3ab|2012-04-29|Samuel Audet|Added an `environmentVariables` configuration option to `BuildMojo`, along with some slight refactoring of `Builder.Main`
6518d25f403a7b0d97ac9d2e5b66925460150a26|2012-04-28|Samuel Audet| * Fixed syntax error in `VectorAdapter`, which GCC and Visual C++ would still happily compile  * Added new `source.suffix` property to have the names of generated source files end with something else than `.cpp` and support frameworks like CUDA that require filenames with a `.cu` extension to compile properly, and also changed the `-cpp` command line option to `-nocompile`
ae09bd7742742d054c5e2ba13e93a8708900c83a|2012-04-21|Samuel Audet|Added `BuildMojo` class and made other adjustments for Maven (second attempt)
39997aa3dd13aa18c043aa2c1c48c46b0730a7ad|2012-04-21|Samuel Audet|Added `BuildMojo` class and made other adjustments for Maven
6f15182e69f682b5c789cd974bb59573bffb6cad|2012-04-15|Samuel Audet|Fixed Maven build and Mac OS X `-framework` option (issue #10) and other minor things
c3248e6fd3c391ff4e5e6b1048d86a438c25191c|2012-04-08|Samuel Audet|Initial commit